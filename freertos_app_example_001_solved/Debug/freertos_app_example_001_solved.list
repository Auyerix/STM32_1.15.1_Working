
freertos_app_example_001_solved.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008064  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08008214  08008214  00009214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800876c  0800876c  0000a0cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800876c  0800876c  0000976c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008774  08008774  0000a0cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008774  08008774  00009774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008778  08008778  00009778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800877c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0cc  2**0
                  CONTENTS
 10 .bss          00004818  200000cc  200000cc  0000a0cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200048e4  200048e4  0000a0cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b431  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d6a  00000000  00000000  0002552d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  00029298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001249  00000000  00000000  0002aa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005482  00000000  00000000  0002bc79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cab0  00000000  00000000  000310fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec77b  00000000  00000000  0004dbab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013a326  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006fd0  00000000  00000000  0013a36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0014133c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080081fc 	.word	0x080081fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000d0 	.word	0x200000d0
 80001ec:	080081fc 	.word	0x080081fc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000594:	f006 fc30 	bl	8006df8 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fd38 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f816 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f972 	bl	8000888 <MX_GPIO_Init>
  MX_ETH_Init();
 80005a4:	f000 f87c 	bl	80006a0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005a8:	f000 f916 	bl	80007d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ac:	f000 f93e 	bl	800082c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80005b0:	f000 f8c4 	bl	800073c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 80005b4:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <main+0x38>)
 80005b6:	f002 f987 	bl	80028c8 <HAL_TIM_Base_Start_IT>
	
    /* add application, ... */
	app_init();
 80005ba:	f005 fd63 	bl	8006084 <app_init>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005be:	f003 fb6c 	bl	8003c9a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c2:	bf00      	nop
 80005c4:	e7fd      	b.n	80005c2 <main+0x32>
 80005c6:	bf00      	nop
 80005c8:	20000310 	.word	0x20000310

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	@ 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f006 fe95 	bl	800730a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	@ (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	@ (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a21      	ldr	r2, [pc, #132]	@ (800069c <SystemClock_Config+0xd0>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800062c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000640:	23a8      	movs	r3, #168	@ 0xa8
 8000642:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000648:	2307      	movs	r3, #7
 800064a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fc1f 	bl	8001e94 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800065c:	f000 fa00 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2302      	movs	r3, #2
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2105      	movs	r1, #5
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fe80 	bl	8002384 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068a:	f000 f9e9 	bl	8000a60 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	@ 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <MX_ETH_Init+0x84>)
 80006a6:	4a20      	ldr	r2, [pc, #128]	@ (8000728 <MX_ETH_Init+0x88>)
 80006a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006aa:	4b20      	ldr	r3, [pc, #128]	@ (800072c <MX_ETH_Init+0x8c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006b0:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <MX_ETH_Init+0x8c>)
 80006b2:	2280      	movs	r2, #128	@ 0x80
 80006b4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <MX_ETH_Init+0x8c>)
 80006b8:	22e1      	movs	r2, #225	@ 0xe1
 80006ba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <MX_ETH_Init+0x8c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <MX_ETH_Init+0x8c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006c8:	4b18      	ldr	r3, [pc, #96]	@ (800072c <MX_ETH_Init+0x8c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ce:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <MX_ETH_Init+0x84>)
 80006d0:	4a16      	ldr	r2, [pc, #88]	@ (800072c <MX_ETH_Init+0x8c>)
 80006d2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006d4:	4b13      	ldr	r3, [pc, #76]	@ (8000724 <MX_ETH_Init+0x84>)
 80006d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006da:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006dc:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_ETH_Init+0x84>)
 80006de:	4a14      	ldr	r2, [pc, #80]	@ (8000730 <MX_ETH_Init+0x90>)
 80006e0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006e2:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <MX_ETH_Init+0x84>)
 80006e4:	4a13      	ldr	r2, [pc, #76]	@ (8000734 <MX_ETH_Init+0x94>)
 80006e6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <MX_ETH_Init+0x84>)
 80006ea:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006ee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006f0:	480c      	ldr	r0, [pc, #48]	@ (8000724 <MX_ETH_Init+0x84>)
 80006f2:	f000 fdd3 	bl	800129c <HAL_ETH_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006fc:	f000 f9b0 	bl	8000a60 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000700:	2238      	movs	r2, #56	@ 0x38
 8000702:	2100      	movs	r1, #0
 8000704:	480c      	ldr	r0, [pc, #48]	@ (8000738 <MX_ETH_Init+0x98>)
 8000706:	f006 fe00 	bl	800730a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800070a:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <MX_ETH_Init+0x98>)
 800070c:	2221      	movs	r2, #33	@ 0x21
 800070e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000710:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_ETH_Init+0x98>)
 8000712:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000716:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000718:	4b07      	ldr	r3, [pc, #28]	@ (8000738 <MX_ETH_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000260 	.word	0x20000260
 8000728:	40028000 	.word	0x40028000
 800072c:	20000888 	.word	0x20000888
 8000730:	200001c0 	.word	0x200001c0
 8000734:	20000120 	.word	0x20000120
 8000738:	200000e8 	.word	0x200000e8

0800073c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	463b      	mov	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000758:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <MX_TIM2_Init+0x94>)
 800075a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800075e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8000760:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <MX_TIM2_Init+0x94>)
 8000762:	2201      	movs	r2, #1
 8000764:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <MX_TIM2_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 84000-1;
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <MX_TIM2_Init+0x94>)
 800076e:	4a19      	ldr	r2, [pc, #100]	@ (80007d4 <MX_TIM2_Init+0x98>)
 8000770:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000772:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <MX_TIM2_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <MX_TIM2_Init+0x94>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800077e:	4814      	ldr	r0, [pc, #80]	@ (80007d0 <MX_TIM2_Init+0x94>)
 8000780:	f002 f852 	bl	8002828 <HAL_TIM_Base_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f969 	bl	8000a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000792:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	4619      	mov	r1, r3
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <MX_TIM2_Init+0x94>)
 800079c:	f002 f9f4 	bl	8002b88 <HAL_TIM_ConfigClockSource>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 f95b 	bl	8000a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b2:	463b      	mov	r3, r7
 80007b4:	4619      	mov	r1, r3
 80007b6:	4806      	ldr	r0, [pc, #24]	@ (80007d0 <MX_TIM2_Init+0x94>)
 80007b8:	f002 fc1c 	bl	8002ff4 <HAL_TIMEx_MasterConfigSynchronization>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80007c2:	f000 f94d 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000310 	.word	0x20000310
 80007d4:	0001481f 	.word	0x0001481f

080007d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <MX_USART3_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 8000810:	f002 fc80 	bl	8003114 <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 f921 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000358 	.word	0x20000358
 8000828:	40004800 	.word	0x40004800

0800082c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000832:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000836:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2204      	movs	r2, #4
 800083c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2202      	movs	r2, #2
 8000842:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	2202      	movs	r2, #2
 800084e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2201      	movs	r2, #1
 8000854:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	2201      	movs	r2, #1
 8000866:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000870:	f001 fa01 	bl	8001c76 <HAL_PCD_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800087a:	f000 f8f1 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200003a0 	.word	0x200003a0

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	@ 0x30
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
 80008a2:	4b4c      	ldr	r3, [pc, #304]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a4b      	ldr	r2, [pc, #300]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b49      	ldr	r3, [pc, #292]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	4b45      	ldr	r3, [pc, #276]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a44      	ldr	r2, [pc, #272]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b42      	ldr	r3, [pc, #264]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b3e      	ldr	r3, [pc, #248]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a3d      	ldr	r2, [pc, #244]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b3b      	ldr	r3, [pc, #236]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b37      	ldr	r3, [pc, #220]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a36      	ldr	r2, [pc, #216]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b34      	ldr	r3, [pc, #208]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b30      	ldr	r3, [pc, #192]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a2f      	ldr	r2, [pc, #188]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b2d      	ldr	r3, [pc, #180]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b29      	ldr	r3, [pc, #164]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a28      	ldr	r2, [pc, #160]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 8000934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f244 0181 	movw	r1, #16513	@ 0x4081
 800094c:	4822      	ldr	r0, [pc, #136]	@ (80009d8 <MX_GPIO_Init+0x150>)
 800094e:	f001 f979 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2140      	movs	r1, #64	@ 0x40
 8000956:	4821      	ldr	r0, [pc, #132]	@ (80009dc <MX_GPIO_Init+0x154>)
 8000958:	f001 f974 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800095c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000962:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	481b      	ldr	r0, [pc, #108]	@ (80009e0 <MX_GPIO_Init+0x158>)
 8000974:	f000 ffba 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000978:	f244 0381 	movw	r3, #16513	@ 0x4081
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4811      	ldr	r0, [pc, #68]	@ (80009d8 <MX_GPIO_Init+0x150>)
 8000992:	f000 ffab 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000996:	2340      	movs	r3, #64	@ 0x40
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	480b      	ldr	r0, [pc, #44]	@ (80009dc <MX_GPIO_Init+0x154>)
 80009ae:	f000 ff9d 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b2:	2380      	movs	r3, #128	@ 0x80
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_GPIO_Init+0x154>)
 80009c6:	f000 ff91 	bl	80018ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ca:	bf00      	nop
 80009cc:	3730      	adds	r7, #48	@ 0x30
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40021800 	.word	0x40021800
 80009e0:	40020800 	.word	0x40020800

080009e4 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <configureTimerForRunTimeStats+0x14>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	20000884 	.word	0x20000884

080009fc <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000a00:	4b03      	ldr	r3, [pc, #12]	@ (8000a10 <getRunTimeCounterValue+0x14>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000884 	.word	0x20000884

08000a14 <vApplicationIdleHook>:

/* Hook Functions */
void vApplicationIdleHook(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	   The idle hook is called repeatedly as long as the idle task is running. It
	   is paramount that the idle hook function does not call any API functions
	   that could cause it to block.*/
	//LOGGER_LOG("  +\r\n");
	
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a09      	ldr	r2, [pc, #36]	@ (8000a58 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d101      	bne.n	8000a3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a36:	f000 fb0b 	bl	8001050 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a42:	d104      	bne.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 8000a44:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	4a04      	ldr	r2, [pc, #16]	@ (8000a5c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a4c:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40010000 	.word	0x40010000
 8000a5c:	20000884 	.word	0x20000884

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <Error_Handler+0x8>

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <HAL_MspInit+0x54>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7a:	4a11      	ldr	r2, [pc, #68]	@ (8000ac0 <HAL_MspInit+0x54>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <HAL_MspInit+0x54>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <HAL_MspInit+0x54>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <HAL_MspInit+0x54>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <HAL_MspInit+0x54>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	210f      	movs	r1, #15
 8000aae:	f06f 0001 	mvn.w	r0, #1
 8000ab2:	f000 fbc9 	bl	8001248 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	@ 0x38
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a55      	ldr	r2, [pc, #340]	@ (8000c38 <HAL_ETH_MspInit+0x174>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	f040 80a4 	bne.w	8000c30 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
 8000aec:	4b53      	ldr	r3, [pc, #332]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af0:	4a52      	ldr	r2, [pc, #328]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000af2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000af6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af8:	4b50      	ldr	r3, [pc, #320]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b00:	623b      	str	r3, [r7, #32]
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	4b4c      	ldr	r3, [pc, #304]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0c:	4a4b      	ldr	r2, [pc, #300]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b14:	4b49      	ldr	r3, [pc, #292]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b1c:	61fb      	str	r3, [r7, #28]
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
 8000b24:	4b45      	ldr	r3, [pc, #276]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b28:	4a44      	ldr	r2, [pc, #272]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b2a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b30:	4b42      	ldr	r3, [pc, #264]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b38:	61bb      	str	r3, [r7, #24]
 8000b3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	4b3e      	ldr	r3, [pc, #248]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b44:	4a3d      	ldr	r2, [pc, #244]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b46:	f043 0304 	orr.w	r3, r3, #4
 8000b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	4b37      	ldr	r3, [pc, #220]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	4a36      	ldr	r2, [pc, #216]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b68:	4b34      	ldr	r3, [pc, #208]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4b30      	ldr	r3, [pc, #192]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	4a2f      	ldr	r2, [pc, #188]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b7e:	f043 0302 	orr.w	r3, r3, #2
 8000b82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b84:	4b2d      	ldr	r3, [pc, #180]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	4b29      	ldr	r3, [pc, #164]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	4a28      	ldr	r2, [pc, #160]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba0:	4b26      	ldr	r3, [pc, #152]	@ (8000c3c <HAL_ETH_MspInit+0x178>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bac:	2332      	movs	r3, #50	@ 0x32
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481e      	ldr	r0, [pc, #120]	@ (8000c40 <HAL_ETH_MspInit+0x17c>)
 8000bc8:	f000 fe90 	bl	80018ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bcc:	2386      	movs	r3, #134	@ 0x86
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bdc:	230b      	movs	r3, #11
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	4817      	ldr	r0, [pc, #92]	@ (8000c44 <HAL_ETH_MspInit+0x180>)
 8000be8:	f000 fe80 	bl	80018ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfe:	230b      	movs	r3, #11
 8000c00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	480f      	ldr	r0, [pc, #60]	@ (8000c48 <HAL_ETH_MspInit+0x184>)
 8000c0a:	f000 fe6f 	bl	80018ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c0e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c20:	230b      	movs	r3, #11
 8000c22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4808      	ldr	r0, [pc, #32]	@ (8000c4c <HAL_ETH_MspInit+0x188>)
 8000c2c:	f000 fe5e 	bl	80018ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3738      	adds	r7, #56	@ 0x38
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40028000 	.word	0x40028000
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020400 	.word	0x40020400
 8000c4c:	40021800 	.word	0x40021800

08000c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c60:	d115      	bne.n	8000c8e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <HAL_TIM_Base_MspInit+0x48>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c98 <HAL_TIM_Base_MspInit+0x48>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <HAL_TIM_Base_MspInit+0x48>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2105      	movs	r1, #5
 8000c82:	201c      	movs	r0, #28
 8000c84:	f000 fae0 	bl	8001248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c88:	201c      	movs	r0, #28
 8000c8a:	f000 faf9 	bl	8001280 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a19      	ldr	r2, [pc, #100]	@ (8000d20 <HAL_UART_MspInit+0x84>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d12c      	bne.n	8000d18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	4a17      	ldr	r2, [pc, #92]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a10      	ldr	r2, [pc, #64]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cf6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <HAL_UART_MspInit+0x8c>)
 8000d14:	f000 fdea 	bl	80018ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	@ 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40004800 	.word	0x40004800
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020c00 	.word	0x40020c00

08000d2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	@ 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d4c:	d13f      	bne.n	8000dce <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <HAL_PCD_MspInit+0xac>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a20      	ldr	r2, [pc, #128]	@ (8000dd8 <HAL_PCD_MspInit+0xac>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <HAL_PCD_MspInit+0xac>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d6a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d7c:	230a      	movs	r3, #10
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	4815      	ldr	r0, [pc, #84]	@ (8000ddc <HAL_PCD_MspInit+0xb0>)
 8000d88:	f000 fdb0 	bl	80018ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480e      	ldr	r0, [pc, #56]	@ (8000ddc <HAL_PCD_MspInit+0xb0>)
 8000da2:	f000 fda3 	bl	80018ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000da6:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <HAL_PCD_MspInit+0xac>)
 8000da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000daa:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd8 <HAL_PCD_MspInit+0xac>)
 8000dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db0:	6353      	str	r3, [r2, #52]	@ 0x34
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <HAL_PCD_MspInit+0xac>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	4a07      	ldr	r2, [pc, #28]	@ (8000dd8 <HAL_PCD_MspInit+0xac>)
 8000dbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc2:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <HAL_PCD_MspInit+0xac>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	@ 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000

08000de0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	@ 0x30
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb4 <HAL_InitTick+0xd4>)
 8000df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df8:	4a2e      	ldr	r2, [pc, #184]	@ (8000eb4 <HAL_InitTick+0xd4>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e00:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb4 <HAL_InitTick+0xd4>)
 8000e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e0c:	f107 020c 	add.w	r2, r7, #12
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 fcd4 	bl	80027c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e1c:	f001 fcbe 	bl	800279c <HAL_RCC_GetPCLK2Freq>
 8000e20:	4603      	mov	r3, r0
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e28:	4a23      	ldr	r2, [pc, #140]	@ (8000eb8 <HAL_InitTick+0xd8>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	0c9b      	lsrs	r3, r3, #18
 8000e30:	3b01      	subs	r3, #1
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e34:	4b21      	ldr	r3, [pc, #132]	@ (8000ebc <HAL_InitTick+0xdc>)
 8000e36:	4a22      	ldr	r2, [pc, #136]	@ (8000ec0 <HAL_InitTick+0xe0>)
 8000e38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e3a:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <HAL_InitTick+0xdc>)
 8000e3c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e40:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e42:	4a1e      	ldr	r2, [pc, #120]	@ (8000ebc <HAL_InitTick+0xdc>)
 8000e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e46:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e48:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <HAL_InitTick+0xdc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <HAL_InitTick+0xdc>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e54:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <HAL_InitTick+0xdc>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e5a:	4818      	ldr	r0, [pc, #96]	@ (8000ebc <HAL_InitTick+0xdc>)
 8000e5c:	f001 fce4 	bl	8002828 <HAL_TIM_Base_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d11b      	bne.n	8000ea6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e6e:	4813      	ldr	r0, [pc, #76]	@ (8000ebc <HAL_InitTick+0xdc>)
 8000e70:	f001 fd2a 	bl	80028c8 <HAL_TIM_Base_Start_IT>
 8000e74:	4603      	mov	r3, r0
 8000e76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d111      	bne.n	8000ea6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e82:	2019      	movs	r0, #25
 8000e84:	f000 f9fc 	bl	8001280 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	d808      	bhi.n	8000ea0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	2019      	movs	r0, #25
 8000e94:	f000 f9d8 	bl	8001248 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_InitTick+0xe4>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e002      	b.n	8000ea6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ea6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3730      	adds	r7, #48	@ 0x30
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	431bde83 	.word	0x431bde83
 8000ebc:	20000890 	.word	0x20000890
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <NMI_Handler+0x4>

08000ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <MemManage_Handler+0x4>

08000ee0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <UsageFault_Handler+0x4>

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f06:	f001 fd4f 	bl	80029a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000890 	.word	0x20000890

08000f14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f18:	4802      	ldr	r0, [pc, #8]	@ (8000f24 <TIM2_IRQHandler+0x10>)
 8000f1a:	f001 fd45 	bl	80029a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000310 	.word	0x20000310

08000f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f30:	4a14      	ldr	r2, [pc, #80]	@ (8000f84 <_sbrk+0x5c>)
 8000f32:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <_sbrk+0x60>)
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f3c:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <_sbrk+0x64>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	@ (8000f90 <_sbrk+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d207      	bcs.n	8000f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f58:	f006 fa7c 	bl	8007454 <__errno>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	220c      	movs	r2, #12
 8000f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	e009      	b.n	8000f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f68:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <_sbrk+0x64>)
 8000f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20030000 	.word	0x20030000
 8000f88:	00000400 	.word	0x00000400
 8000f8c:	200008d8 	.word	0x200008d8
 8000f90:	200048e8 	.word	0x200048e8

08000f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <SystemInit+0x20>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f9e:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <SystemInit+0x20>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fbc:	f7ff ffea 	bl	8000f94 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	@ (8000ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f006 fa3b 	bl	8007460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff fad1 	bl	8000590 <main>
  bx  lr    
 8000fee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ff0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8000ffc:	0800877c 	.word	0x0800877c
  ldr r2, =_sbss
 8001000:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001004:	200048e4 	.word	0x200048e4

08001008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001010:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <HAL_Init+0x40>)
 8001016:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800101a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <HAL_Init+0x40>)
 8001022:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	@ (800104c <HAL_Init+0x40>)
 800102e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 f8fc 	bl	8001232 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	200f      	movs	r0, #15
 800103c:	f7ff fed0 	bl	8000de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f7ff fd14 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023c00 	.word	0x40023c00

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	200008dc 	.word	0x200008dc

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	@ (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	200008dc 	.word	0x200008dc

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff ffee 	bl	8001078 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <HAL_Delay+0x44>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b6:	bf00      	nop
 80010b8:	f7ff ffde 	bl	8001078 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f7      	bhi.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	@ (800111c <__NVIC_SetPriorityGrouping+0x44>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db0b      	blt.n	8001166 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f003 021f 	and.w	r2, r3, #31
 8001154:	4907      	ldr	r1, [pc, #28]	@ (8001174 <__NVIC_EnableIRQ+0x38>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	095b      	lsrs	r3, r3, #5
 800115c:	2001      	movs	r0, #1
 800115e:	fa00 f202 	lsl.w	r2, r0, r2
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	@ (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	@ (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	@ 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	@ 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff4c 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125a:	f7ff ff61 	bl	8001120 <__NVIC_GetPriorityGrouping>
 800125e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	6978      	ldr	r0, [r7, #20]
 8001266:	f7ff ffb1 	bl	80011cc <NVIC_EncodePriority>
 800126a:	4602      	mov	r2, r0
 800126c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff80 	bl	8001178 <__NVIC_SetPriority>
}
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff54 	bl	800113c <__NVIC_EnableIRQ>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e06c      	b.n	8001388 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d106      	bne.n	80012c6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2223      	movs	r2, #35	@ 0x23
 80012bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff fbff 	bl	8000ac4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	4b31      	ldr	r3, [pc, #196]	@ (8001390 <HAL_ETH_Init+0xf4>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	4a30      	ldr	r2, [pc, #192]	@ (8001390 <HAL_ETH_Init+0xf4>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001390 <HAL_ETH_Init+0xf4>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001394 <HAL_ETH_Init+0xf8>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001394 <HAL_ETH_Init+0xf8>)
 80012e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80012ec:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012ee:	4b29      	ldr	r3, [pc, #164]	@ (8001394 <HAL_ETH_Init+0xf8>)
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	4927      	ldr	r1, [pc, #156]	@ (8001394 <HAL_ETH_Init+0xf8>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012fc:	4b25      	ldr	r3, [pc, #148]	@ (8001394 <HAL_ETH_Init+0xf8>)
 80012fe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001316:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001318:	f7ff feae 	bl	8001078 <HAL_GetTick>
 800131c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800131e:	e011      	b.n	8001344 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001320:	f7ff feaa 	bl	8001078 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800132e:	d909      	bls.n	8001344 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2204      	movs	r2, #4
 8001334:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	22e0      	movs	r2, #224	@ 0xe0
 800133c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e021      	b.n	8001388 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1e4      	bne.n	8001320 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f958 	bl	800160c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f9ff 	bl	8001760 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 fa55 	bl	8001812 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	461a      	mov	r2, r3
 800136e:	2100      	movs	r1, #0
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f9bd 	bl	80016f0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2210      	movs	r2, #16
 8001382:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	40013800 	.word	0x40013800

08001398 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4b51      	ldr	r3, [pc, #324]	@ (80014f4 <ETH_SetMACConfig+0x15c>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	7c1b      	ldrb	r3, [r3, #16]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <ETH_SetMACConfig+0x28>
 80013ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013be:	e000      	b.n	80013c2 <ETH_SetMACConfig+0x2a>
 80013c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	7c5b      	ldrb	r3, [r3, #17]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d102      	bne.n	80013d0 <ETH_SetMACConfig+0x38>
 80013ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013ce:	e000      	b.n	80013d2 <ETH_SetMACConfig+0x3a>
 80013d0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013d2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	7fdb      	ldrb	r3, [r3, #31]
 80013de:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013e0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	7f92      	ldrb	r2, [r2, #30]
 80013ec:	2a00      	cmp	r2, #0
 80013ee:	d102      	bne.n	80013f6 <ETH_SetMACConfig+0x5e>
 80013f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013f4:	e000      	b.n	80013f8 <ETH_SetMACConfig+0x60>
 80013f6:	2200      	movs	r2, #0
                        macconf->Speed |
 80013f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	7f1b      	ldrb	r3, [r3, #28]
 80013fe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001400:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001406:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	791b      	ldrb	r3, [r3, #4]
 800140c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800140e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001416:	2a00      	cmp	r2, #0
 8001418:	d102      	bne.n	8001420 <ETH_SetMACConfig+0x88>
 800141a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800141e:	e000      	b.n	8001422 <ETH_SetMACConfig+0x8a>
 8001420:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001422:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	7bdb      	ldrb	r3, [r3, #15]
 8001428:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800142a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001430:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001438:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800143a:	4313      	orrs	r3, r2
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001452:	2001      	movs	r0, #1
 8001454:	f7ff fe1c 	bl	8001090 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800146e:	4013      	ands	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001476:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800147e:	2a00      	cmp	r2, #0
 8001480:	d101      	bne.n	8001486 <ETH_SetMACConfig+0xee>
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	e000      	b.n	8001488 <ETH_SetMACConfig+0xf0>
 8001486:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001488:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800148e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001496:	2a01      	cmp	r2, #1
 8001498:	d101      	bne.n	800149e <ETH_SetMACConfig+0x106>
 800149a:	2208      	movs	r2, #8
 800149c:	e000      	b.n	80014a0 <ETH_SetMACConfig+0x108>
 800149e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80014a8:	2a01      	cmp	r2, #1
 80014aa:	d101      	bne.n	80014b0 <ETH_SetMACConfig+0x118>
 80014ac:	2204      	movs	r2, #4
 80014ae:	e000      	b.n	80014b2 <ETH_SetMACConfig+0x11a>
 80014b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80014ba:	2a01      	cmp	r2, #1
 80014bc:	d101      	bne.n	80014c2 <ETH_SetMACConfig+0x12a>
 80014be:	2202      	movs	r2, #2
 80014c0:	e000      	b.n	80014c4 <ETH_SetMACConfig+0x12c>
 80014c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014c4:	4313      	orrs	r3, r2
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014dc:	2001      	movs	r0, #1
 80014de:	f7ff fdd7 	bl	8001090 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	619a      	str	r2, [r3, #24]
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	ff20810f 	.word	0xff20810f

080014f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	4b3d      	ldr	r3, [pc, #244]	@ (8001608 <ETH_SetDMAConfig+0x110>)
 8001512:	4013      	ands	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	7b1b      	ldrb	r3, [r3, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <ETH_SetDMAConfig+0x2c>
 800151e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001522:	e000      	b.n	8001526 <ETH_SetDMAConfig+0x2e>
 8001524:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	7b5b      	ldrb	r3, [r3, #13]
 800152a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800152c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	7f52      	ldrb	r2, [r2, #29]
 8001532:	2a00      	cmp	r2, #0
 8001534:	d102      	bne.n	800153c <ETH_SetDMAConfig+0x44>
 8001536:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800153a:	e000      	b.n	800153e <ETH_SetDMAConfig+0x46>
 800153c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800153e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	7b9b      	ldrb	r3, [r3, #14]
 8001544:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001546:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800154c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	7f1b      	ldrb	r3, [r3, #28]
 8001552:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001554:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	7f9b      	ldrb	r3, [r3, #30]
 800155a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800155c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001562:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800156a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800156c:	4313      	orrs	r3, r2
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4313      	orrs	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800157c:	461a      	mov	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800158e:	2001      	movs	r0, #1
 8001590:	f7ff fd7e 	bl	8001090 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800159c:	461a      	mov	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	791b      	ldrb	r3, [r3, #4]
 80015a6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015ac:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015b2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015b8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015c0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015c2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015ca:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015d0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015de:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ec:	2001      	movs	r0, #1
 80015ee:	f7ff fd4f 	bl	8001090 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	f8de3f23 	.word	0xf8de3f23

0800160c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0a6      	sub	sp, #152	@ 0x98
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001614:	2301      	movs	r3, #1
 8001616:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001620:	2300      	movs	r3, #0
 8001622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800162a:	2301      	movs	r3, #1
 800162c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001636:	2301      	movs	r3, #1
 8001638:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001648:	2300      	movs	r3, #0
 800164a:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001652:	2300      	movs	r3, #0
 8001654:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800166e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001672:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001674:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001678:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001680:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001684:	4619      	mov	r1, r3
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fe86 	bl	8001398 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800168c:	2301      	movs	r3, #1
 800168e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001690:	2301      	movs	r3, #1
 8001692:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001694:	2301      	movs	r3, #1
 8001696:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800169a:	2301      	movs	r3, #1
 800169c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016b2:	2301      	movs	r3, #1
 80016b4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016b8:	2301      	movs	r3, #1
 80016ba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016c0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016c6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016cc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016ce:	2301      	movs	r3, #1
 80016d0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	4619      	mov	r1, r3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ff08 	bl	80014f8 <ETH_SetDMAConfig>
}
 80016e8:	bf00      	nop
 80016ea:	3798      	adds	r7, #152	@ 0x98
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3305      	adds	r3, #5
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	3204      	adds	r2, #4
 8001708:	7812      	ldrb	r2, [r2, #0]
 800170a:	4313      	orrs	r3, r2
 800170c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <ETH_MACAddressConfig+0x68>)
 8001712:	4413      	add	r3, r2
 8001714:	461a      	mov	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3303      	adds	r3, #3
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	061a      	lsls	r2, r3, #24
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3302      	adds	r3, #2
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	041b      	lsls	r3, r3, #16
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3301      	adds	r3, #1
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	4313      	orrs	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	4313      	orrs	r3, r2
 800173c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <ETH_MACAddressConfig+0x6c>)
 8001742:	4413      	add	r3, r2
 8001744:	461a      	mov	r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	6013      	str	r3, [r2, #0]
}
 800174a:	bf00      	nop
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40028040 	.word	0x40028040
 800175c:	40028044 	.word	0x40028044

08001760 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	e03e      	b.n	80017ec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68d9      	ldr	r1, [r3, #12]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2200      	movs	r2, #0
 800178a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	3206      	adds	r2, #6
 80017a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d80c      	bhi.n	80017d0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68d9      	ldr	r1, [r3, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	461a      	mov	r2, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	e004      	b.n	80017da <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	461a      	mov	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3301      	adds	r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d9bd      	bls.n	800176e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001804:	611a      	str	r2, [r3, #16]
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e046      	b.n	80018ae <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6919      	ldr	r1, [r3, #16]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2200      	movs	r2, #0
 800183c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800185c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001864:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001872:	68b9      	ldr	r1, [r7, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	3212      	adds	r2, #18
 800187a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d80c      	bhi.n	800189e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6919      	ldr	r1, [r3, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	461a      	mov	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	e004      	b.n	80018a8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	461a      	mov	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	3301      	adds	r3, #1
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d9b5      	bls.n	8001820 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018de:	60da      	str	r2, [r3, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	e177      	b.n	8001bf8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	f040 8166 	bne.w	8001bf2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b01      	cmp	r3, #1
 8001930:	d005      	beq.n	800193e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193a:	2b02      	cmp	r3, #2
 800193c:	d130      	bne.n	80019a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001974:	2201      	movs	r2, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	f003 0201 	and.w	r2, r3, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d017      	beq.n	80019dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d123      	bne.n	8001a30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	08da      	lsrs	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3208      	adds	r2, #8
 80019f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	08da      	lsrs	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3208      	adds	r2, #8
 8001a2a:	69b9      	ldr	r1, [r7, #24]
 8001a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0203 	and.w	r2, r3, #3
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80c0 	beq.w	8001bf2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b66      	ldr	r3, [pc, #408]	@ (8001c10 <HAL_GPIO_Init+0x324>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	4a65      	ldr	r2, [pc, #404]	@ (8001c10 <HAL_GPIO_Init+0x324>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a82:	4b63      	ldr	r3, [pc, #396]	@ (8001c10 <HAL_GPIO_Init+0x324>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8e:	4a61      	ldr	r2, [pc, #388]	@ (8001c14 <HAL_GPIO_Init+0x328>)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	3302      	adds	r3, #2
 8001a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a58      	ldr	r2, [pc, #352]	@ (8001c18 <HAL_GPIO_Init+0x32c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d037      	beq.n	8001b2a <HAL_GPIO_Init+0x23e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a57      	ldr	r2, [pc, #348]	@ (8001c1c <HAL_GPIO_Init+0x330>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d031      	beq.n	8001b26 <HAL_GPIO_Init+0x23a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a56      	ldr	r2, [pc, #344]	@ (8001c20 <HAL_GPIO_Init+0x334>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d02b      	beq.n	8001b22 <HAL_GPIO_Init+0x236>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a55      	ldr	r2, [pc, #340]	@ (8001c24 <HAL_GPIO_Init+0x338>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d025      	beq.n	8001b1e <HAL_GPIO_Init+0x232>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a54      	ldr	r2, [pc, #336]	@ (8001c28 <HAL_GPIO_Init+0x33c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01f      	beq.n	8001b1a <HAL_GPIO_Init+0x22e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a53      	ldr	r2, [pc, #332]	@ (8001c2c <HAL_GPIO_Init+0x340>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d019      	beq.n	8001b16 <HAL_GPIO_Init+0x22a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a52      	ldr	r2, [pc, #328]	@ (8001c30 <HAL_GPIO_Init+0x344>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0x226>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a51      	ldr	r2, [pc, #324]	@ (8001c34 <HAL_GPIO_Init+0x348>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00d      	beq.n	8001b0e <HAL_GPIO_Init+0x222>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a50      	ldr	r2, [pc, #320]	@ (8001c38 <HAL_GPIO_Init+0x34c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <HAL_GPIO_Init+0x21e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4f      	ldr	r2, [pc, #316]	@ (8001c3c <HAL_GPIO_Init+0x350>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_GPIO_Init+0x21a>
 8001b02:	2309      	movs	r3, #9
 8001b04:	e012      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b06:	230a      	movs	r3, #10
 8001b08:	e010      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b0a:	2308      	movs	r3, #8
 8001b0c:	e00e      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b0e:	2307      	movs	r3, #7
 8001b10:	e00c      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b12:	2306      	movs	r3, #6
 8001b14:	e00a      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b16:	2305      	movs	r3, #5
 8001b18:	e008      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e004      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e002      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	f002 0203 	and.w	r2, r2, #3
 8001b32:	0092      	lsls	r2, r2, #2
 8001b34:	4093      	lsls	r3, r2
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b3c:	4935      	ldr	r1, [pc, #212]	@ (8001c14 <HAL_GPIO_Init+0x328>)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6e:	4a34      	ldr	r2, [pc, #208]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b74:	4b32      	ldr	r3, [pc, #200]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b98:	4a29      	ldr	r2, [pc, #164]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b9e:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bec:	4a14      	ldr	r2, [pc, #80]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	2b0f      	cmp	r3, #15
 8001bfc:	f67f ae84 	bls.w	8001908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3724      	adds	r7, #36	@ 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40013800 	.word	0x40013800
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40020800 	.word	0x40020800
 8001c24:	40020c00 	.word	0x40020c00
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40021400 	.word	0x40021400
 8001c30:	40021800 	.word	0x40021800
 8001c34:	40021c00 	.word	0x40021c00
 8001c38:	40022000 	.word	0x40022000
 8001c3c:	40022400 	.word	0x40022400
 8001c40:	40013c00 	.word	0x40013c00

08001c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
 8001c50:	4613      	mov	r3, r2
 8001c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c54:	787b      	ldrb	r3, [r7, #1]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c60:	e003      	b.n	8001c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	041a      	lsls	r2, r3, #16
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	619a      	str	r2, [r3, #24]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af02      	add	r7, sp, #8
 8001c7c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e101      	b.n	8001e8c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff f842 	bl	8000d2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2203      	movs	r2, #3
 8001cac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cb6:	d102      	bne.n	8001cbe <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f001 fd4e 	bl	8003764 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7c1a      	ldrb	r2, [r3, #16]
 8001cd0:	f88d 2000 	strb.w	r2, [sp]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cd8:	f001 fce0 	bl	800369c <USB_CoreInit>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0ce      	b.n	8001e8c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 fd46 	bl	8003786 <USB_SetCurrentMode>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0bf      	b.n	8001e8c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	e04a      	b.n	8001da8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	3315      	adds	r3, #21
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	3314      	adds	r3, #20
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	b298      	uxth	r0, r3
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	332e      	adds	r3, #46	@ 0x2e
 8001d4e:	4602      	mov	r2, r0
 8001d50:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3318      	adds	r3, #24
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	331c      	adds	r3, #28
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	3320      	adds	r3, #32
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3324      	adds	r3, #36	@ 0x24
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	3301      	adds	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	791b      	ldrb	r3, [r3, #4]
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d3af      	bcc.n	8001d12 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
 8001db6:	e044      	b.n	8001e42 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	791b      	ldrb	r3, [r3, #4]
 8001e46:	7bfa      	ldrb	r2, [r7, #15]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d3b5      	bcc.n	8001db8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	7c1a      	ldrb	r2, [r3, #16]
 8001e54:	f88d 2000 	strb.w	r2, [sp]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e5c:	f001 fce0 	bl	8003820 <USB_DevInit>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00c      	b.n	8001e8c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f001 fea8 	bl	8003bda <USB_DevDisconnect>

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e267      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d075      	beq.n	8001f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb2:	4b88      	ldr	r3, [pc, #544]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d00c      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ebe:	4b85      	ldr	r3, [pc, #532]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d112      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eca:	4b82      	ldr	r3, [pc, #520]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	4b7e      	ldr	r3, [pc, #504]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d05b      	beq.n	8001f9c <HAL_RCC_OscConfig+0x108>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d157      	bne.n	8001f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e242      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ef8:	d106      	bne.n	8001f08 <HAL_RCC_OscConfig+0x74>
 8001efa:	4b76      	ldr	r3, [pc, #472]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a75      	ldr	r2, [pc, #468]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e01d      	b.n	8001f44 <HAL_RCC_OscConfig+0xb0>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x98>
 8001f12:	4b70      	ldr	r3, [pc, #448]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a6f      	ldr	r2, [pc, #444]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b6d      	ldr	r3, [pc, #436]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a6c      	ldr	r2, [pc, #432]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e00b      	b.n	8001f44 <HAL_RCC_OscConfig+0xb0>
 8001f2c:	4b69      	ldr	r3, [pc, #420]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a68      	ldr	r2, [pc, #416]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	4b66      	ldr	r3, [pc, #408]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a65      	ldr	r2, [pc, #404]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d013      	beq.n	8001f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f894 	bl	8001078 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f54:	f7ff f890 	bl	8001078 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	@ 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e207      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	4b5b      	ldr	r3, [pc, #364]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0xc0>
 8001f72:	e014      	b.n	8001f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7ff f880 	bl	8001078 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff f87c 	bl	8001078 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	@ 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e1f3      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	4b51      	ldr	r3, [pc, #324]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0xe8>
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d063      	beq.n	8002072 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001faa:	4b4a      	ldr	r3, [pc, #296]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00b      	beq.n	8001fce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb6:	4b47      	ldr	r3, [pc, #284]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d11c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc2:	4b44      	ldr	r3, [pc, #272]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d116      	bne.n	8001ffc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fce:	4b41      	ldr	r3, [pc, #260]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x152>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e1c7      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4937      	ldr	r1, [pc, #220]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	e03a      	b.n	8002072 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d020      	beq.n	8002046 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002004:	4b34      	ldr	r3, [pc, #208]	@ (80020d8 <HAL_RCC_OscConfig+0x244>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200a:	f7ff f835 	bl	8001078 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002012:	f7ff f831 	bl	8001078 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e1a8      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	4b2b      	ldr	r3, [pc, #172]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002030:	4b28      	ldr	r3, [pc, #160]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4925      	ldr	r1, [pc, #148]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8002040:	4313      	orrs	r3, r2
 8002042:	600b      	str	r3, [r1, #0]
 8002044:	e015      	b.n	8002072 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002046:	4b24      	ldr	r3, [pc, #144]	@ (80020d8 <HAL_RCC_OscConfig+0x244>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7ff f814 	bl	8001078 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002054:	f7ff f810 	bl	8001078 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e187      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d036      	beq.n	80020ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d016      	beq.n	80020b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <HAL_RCC_OscConfig+0x248>)
 8002088:	2201      	movs	r2, #1
 800208a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208c:	f7fe fff4 	bl	8001078 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002094:	f7fe fff0 	bl	8001078 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e167      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <HAL_RCC_OscConfig+0x240>)
 80020a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x200>
 80020b2:	e01b      	b.n	80020ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b4:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_RCC_OscConfig+0x248>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7fe ffdd 	bl	8001078 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c0:	e00e      	b.n	80020e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c2:	f7fe ffd9 	bl	8001078 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d907      	bls.n	80020e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e150      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
 80020d4:	40023800 	.word	0x40023800
 80020d8:	42470000 	.word	0x42470000
 80020dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e0:	4b88      	ldr	r3, [pc, #544]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 80020e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1ea      	bne.n	80020c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8097 	beq.w	8002228 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fe:	4b81      	ldr	r3, [pc, #516]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10f      	bne.n	800212a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	4b7d      	ldr	r3, [pc, #500]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	4a7c      	ldr	r2, [pc, #496]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 8002114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002118:	6413      	str	r3, [r2, #64]	@ 0x40
 800211a:	4b7a      	ldr	r3, [pc, #488]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002126:	2301      	movs	r3, #1
 8002128:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212a:	4b77      	ldr	r3, [pc, #476]	@ (8002308 <HAL_RCC_OscConfig+0x474>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002132:	2b00      	cmp	r3, #0
 8002134:	d118      	bne.n	8002168 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002136:	4b74      	ldr	r3, [pc, #464]	@ (8002308 <HAL_RCC_OscConfig+0x474>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a73      	ldr	r2, [pc, #460]	@ (8002308 <HAL_RCC_OscConfig+0x474>)
 800213c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002142:	f7fe ff99 	bl	8001078 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214a:	f7fe ff95 	bl	8001078 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e10c      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	4b6a      	ldr	r3, [pc, #424]	@ (8002308 <HAL_RCC_OscConfig+0x474>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x2ea>
 8002170:	4b64      	ldr	r3, [pc, #400]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002174:	4a63      	ldr	r2, [pc, #396]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6713      	str	r3, [r2, #112]	@ 0x70
 800217c:	e01c      	b.n	80021b8 <HAL_RCC_OscConfig+0x324>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b05      	cmp	r3, #5
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x30c>
 8002186:	4b5f      	ldr	r3, [pc, #380]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218a:	4a5e      	ldr	r2, [pc, #376]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 800218c:	f043 0304 	orr.w	r3, r3, #4
 8002190:	6713      	str	r3, [r2, #112]	@ 0x70
 8002192:	4b5c      	ldr	r3, [pc, #368]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002196:	4a5b      	ldr	r2, [pc, #364]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6713      	str	r3, [r2, #112]	@ 0x70
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0x324>
 80021a0:	4b58      	ldr	r3, [pc, #352]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a4:	4a57      	ldr	r2, [pc, #348]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 80021a6:	f023 0301 	bic.w	r3, r3, #1
 80021aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ac:	4b55      	ldr	r3, [pc, #340]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b0:	4a54      	ldr	r2, [pc, #336]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 80021b2:	f023 0304 	bic.w	r3, r3, #4
 80021b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d015      	beq.n	80021ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c0:	f7fe ff5a 	bl	8001078 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c6:	e00a      	b.n	80021de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c8:	f7fe ff56 	bl	8001078 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e0cb      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021de:	4b49      	ldr	r3, [pc, #292]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0ee      	beq.n	80021c8 <HAL_RCC_OscConfig+0x334>
 80021ea:	e014      	b.n	8002216 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ec:	f7fe ff44 	bl	8001078 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f2:	e00a      	b.n	800220a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f7fe ff40 	bl	8001078 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e0b5      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220a:	4b3e      	ldr	r3, [pc, #248]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1ee      	bne.n	80021f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002216:	7dfb      	ldrb	r3, [r7, #23]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d105      	bne.n	8002228 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221c:	4b39      	ldr	r3, [pc, #228]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	4a38      	ldr	r2, [pc, #224]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 8002222:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002226:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 80a1 	beq.w	8002374 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002232:	4b34      	ldr	r3, [pc, #208]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b08      	cmp	r3, #8
 800223c:	d05c      	beq.n	80022f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d141      	bne.n	80022ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002246:	4b31      	ldr	r3, [pc, #196]	@ (800230c <HAL_RCC_OscConfig+0x478>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fe ff14 	bl	8001078 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002254:	f7fe ff10 	bl	8001078 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e087      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002266:	4b27      	ldr	r3, [pc, #156]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69da      	ldr	r2, [r3, #28]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002280:	019b      	lsls	r3, r3, #6
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002288:	085b      	lsrs	r3, r3, #1
 800228a:	3b01      	subs	r3, #1
 800228c:	041b      	lsls	r3, r3, #16
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002294:	061b      	lsls	r3, r3, #24
 8002296:	491b      	ldr	r1, [pc, #108]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800229c:	4b1b      	ldr	r3, [pc, #108]	@ (800230c <HAL_RCC_OscConfig+0x478>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a2:	f7fe fee9 	bl	8001078 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022aa:	f7fe fee5 	bl	8001078 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e05c      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022bc:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x416>
 80022c8:	e054      	b.n	8002374 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ca:	4b10      	ldr	r3, [pc, #64]	@ (800230c <HAL_RCC_OscConfig+0x478>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7fe fed2 	bl	8001078 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d8:	f7fe fece 	bl	8001078 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e045      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <HAL_RCC_OscConfig+0x470>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x444>
 80022f6:	e03d      	b.n	8002374 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d107      	bne.n	8002310 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e038      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
 8002304:	40023800 	.word	0x40023800
 8002308:	40007000 	.word	0x40007000
 800230c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002310:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_RCC_OscConfig+0x4ec>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d028      	beq.n	8002370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d121      	bne.n	8002370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d11a      	bne.n	8002370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002340:	4013      	ands	r3, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002346:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002348:	4293      	cmp	r3, r2
 800234a:	d111      	bne.n	8002370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002356:	085b      	lsrs	r3, r3, #1
 8002358:	3b01      	subs	r3, #1
 800235a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d107      	bne.n	8002370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800

08002384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0cc      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002398:	4b68      	ldr	r3, [pc, #416]	@ (800253c <HAL_RCC_ClockConfig+0x1b8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d90c      	bls.n	80023c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b65      	ldr	r3, [pc, #404]	@ (800253c <HAL_RCC_ClockConfig+0x1b8>)
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	4b63      	ldr	r3, [pc, #396]	@ (800253c <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d001      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0b8      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d020      	beq.n	800240e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d8:	4b59      	ldr	r3, [pc, #356]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	4a58      	ldr	r2, [pc, #352]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f0:	4b53      	ldr	r3, [pc, #332]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	4a52      	ldr	r2, [pc, #328]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fc:	4b50      	ldr	r3, [pc, #320]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	494d      	ldr	r1, [pc, #308]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d044      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	4b47      	ldr	r3, [pc, #284]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d119      	bne.n	8002462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e07f      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d003      	beq.n	8002442 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243e:	2b03      	cmp	r3, #3
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002442:	4b3f      	ldr	r3, [pc, #252]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e06f      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002452:	4b3b      	ldr	r3, [pc, #236]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e067      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002462:	4b37      	ldr	r3, [pc, #220]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f023 0203 	bic.w	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4934      	ldr	r1, [pc, #208]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	4313      	orrs	r3, r2
 8002472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002474:	f7fe fe00 	bl	8001078 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	e00a      	b.n	8002492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247c:	f7fe fdfc 	bl	8001078 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e04f      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	4b2b      	ldr	r3, [pc, #172]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 020c 	and.w	r2, r3, #12
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d1eb      	bne.n	800247c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a4:	4b25      	ldr	r3, [pc, #148]	@ (800253c <HAL_RCC_ClockConfig+0x1b8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d20c      	bcs.n	80024cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b22      	ldr	r3, [pc, #136]	@ (800253c <HAL_RCC_ClockConfig+0x1b8>)
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b20      	ldr	r3, [pc, #128]	@ (800253c <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e032      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d8:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4916      	ldr	r1, [pc, #88]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d009      	beq.n	800250a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024f6:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	490e      	ldr	r1, [pc, #56]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	4313      	orrs	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800250a:	f000 f821 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 800250e:	4602      	mov	r2, r0
 8002510:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	490a      	ldr	r1, [pc, #40]	@ (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	5ccb      	ldrb	r3, [r1, r3]
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	4a09      	ldr	r2, [pc, #36]	@ (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002526:	4b09      	ldr	r3, [pc, #36]	@ (800254c <HAL_RCC_ClockConfig+0x1c8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fc58 	bl	8000de0 <HAL_InitTick>

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40023c00 	.word	0x40023c00
 8002540:	40023800 	.word	0x40023800
 8002544:	080086fc 	.word	0x080086fc
 8002548:	20000000 	.word	0x20000000
 800254c:	20000004 	.word	0x20000004

08002550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002554:	b094      	sub	sp, #80	@ 0x50
 8002556:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	647b      	str	r3, [r7, #68]	@ 0x44
 800255c:	2300      	movs	r3, #0
 800255e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002560:	2300      	movs	r3, #0
 8002562:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002568:	4b79      	ldr	r3, [pc, #484]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x200>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b08      	cmp	r3, #8
 8002572:	d00d      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x40>
 8002574:	2b08      	cmp	r3, #8
 8002576:	f200 80e1 	bhi.w	800273c <HAL_RCC_GetSysClockFreq+0x1ec>
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x34>
 800257e:	2b04      	cmp	r3, #4
 8002580:	d003      	beq.n	800258a <HAL_RCC_GetSysClockFreq+0x3a>
 8002582:	e0db      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002584:	4b73      	ldr	r3, [pc, #460]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x204>)
 8002586:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002588:	e0db      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800258a:	4b73      	ldr	r3, [pc, #460]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x208>)
 800258c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800258e:	e0d8      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002590:	4b6f      	ldr	r3, [pc, #444]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x200>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002598:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800259a:	4b6d      	ldr	r3, [pc, #436]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x200>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d063      	beq.n	800266e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	099b      	lsrs	r3, r3, #6
 80025ac:	2200      	movs	r2, #0
 80025ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80025ba:	2300      	movs	r3, #0
 80025bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80025be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025c2:	4622      	mov	r2, r4
 80025c4:	462b      	mov	r3, r5
 80025c6:	f04f 0000 	mov.w	r0, #0
 80025ca:	f04f 0100 	mov.w	r1, #0
 80025ce:	0159      	lsls	r1, r3, #5
 80025d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d4:	0150      	lsls	r0, r2, #5
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4621      	mov	r1, r4
 80025dc:	1a51      	subs	r1, r2, r1
 80025de:	6139      	str	r1, [r7, #16]
 80025e0:	4629      	mov	r1, r5
 80025e2:	eb63 0301 	sbc.w	r3, r3, r1
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025f4:	4659      	mov	r1, fp
 80025f6:	018b      	lsls	r3, r1, #6
 80025f8:	4651      	mov	r1, sl
 80025fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025fe:	4651      	mov	r1, sl
 8002600:	018a      	lsls	r2, r1, #6
 8002602:	4651      	mov	r1, sl
 8002604:	ebb2 0801 	subs.w	r8, r2, r1
 8002608:	4659      	mov	r1, fp
 800260a:	eb63 0901 	sbc.w	r9, r3, r1
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800261a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800261e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002622:	4690      	mov	r8, r2
 8002624:	4699      	mov	r9, r3
 8002626:	4623      	mov	r3, r4
 8002628:	eb18 0303 	adds.w	r3, r8, r3
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	462b      	mov	r3, r5
 8002630:	eb49 0303 	adc.w	r3, r9, r3
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002642:	4629      	mov	r1, r5
 8002644:	024b      	lsls	r3, r1, #9
 8002646:	4621      	mov	r1, r4
 8002648:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800264c:	4621      	mov	r1, r4
 800264e:	024a      	lsls	r2, r1, #9
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002656:	2200      	movs	r2, #0
 8002658:	62bb      	str	r3, [r7, #40]	@ 0x28
 800265a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800265c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002660:	f7fd fe1e 	bl	80002a0 <__aeabi_uldivmod>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4613      	mov	r3, r2
 800266a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800266c:	e058      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266e:	4b38      	ldr	r3, [pc, #224]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x200>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	099b      	lsrs	r3, r3, #6
 8002674:	2200      	movs	r2, #0
 8002676:	4618      	mov	r0, r3
 8002678:	4611      	mov	r1, r2
 800267a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800267e:	623b      	str	r3, [r7, #32]
 8002680:	2300      	movs	r3, #0
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
 8002684:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002688:	4642      	mov	r2, r8
 800268a:	464b      	mov	r3, r9
 800268c:	f04f 0000 	mov.w	r0, #0
 8002690:	f04f 0100 	mov.w	r1, #0
 8002694:	0159      	lsls	r1, r3, #5
 8002696:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800269a:	0150      	lsls	r0, r2, #5
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4641      	mov	r1, r8
 80026a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80026a6:	4649      	mov	r1, r9
 80026a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026c0:	ebb2 040a 	subs.w	r4, r2, sl
 80026c4:	eb63 050b 	sbc.w	r5, r3, fp
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	00eb      	lsls	r3, r5, #3
 80026d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026d6:	00e2      	lsls	r2, r4, #3
 80026d8:	4614      	mov	r4, r2
 80026da:	461d      	mov	r5, r3
 80026dc:	4643      	mov	r3, r8
 80026de:	18e3      	adds	r3, r4, r3
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	464b      	mov	r3, r9
 80026e4:	eb45 0303 	adc.w	r3, r5, r3
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026f6:	4629      	mov	r1, r5
 80026f8:	028b      	lsls	r3, r1, #10
 80026fa:	4621      	mov	r1, r4
 80026fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002700:	4621      	mov	r1, r4
 8002702:	028a      	lsls	r2, r1, #10
 8002704:	4610      	mov	r0, r2
 8002706:	4619      	mov	r1, r3
 8002708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800270a:	2200      	movs	r2, #0
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	61fa      	str	r2, [r7, #28]
 8002710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002714:	f7fd fdc4 	bl	80002a0 <__aeabi_uldivmod>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4613      	mov	r3, r2
 800271e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002720:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x200>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	3301      	adds	r3, #1
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002730:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002734:	fbb2 f3f3 	udiv	r3, r2, r3
 8002738:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800273a:	e002      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800273c:	4b05      	ldr	r3, [pc, #20]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x204>)
 800273e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002744:	4618      	mov	r0, r3
 8002746:	3750      	adds	r7, #80	@ 0x50
 8002748:	46bd      	mov	sp, r7
 800274a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	00f42400 	.word	0x00f42400
 8002758:	007a1200 	.word	0x007a1200

0800275c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002760:	4b03      	ldr	r3, [pc, #12]	@ (8002770 <HAL_RCC_GetHCLKFreq+0x14>)
 8002762:	681b      	ldr	r3, [r3, #0]
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000000 	.word	0x20000000

08002774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002778:	f7ff fff0 	bl	800275c <HAL_RCC_GetHCLKFreq>
 800277c:	4602      	mov	r2, r0
 800277e:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	0a9b      	lsrs	r3, r3, #10
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	4903      	ldr	r1, [pc, #12]	@ (8002798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800278a:	5ccb      	ldrb	r3, [r1, r3]
 800278c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40023800 	.word	0x40023800
 8002798:	0800870c 	.word	0x0800870c

0800279c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027a0:	f7ff ffdc 	bl	800275c <HAL_RCC_GetHCLKFreq>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	0b5b      	lsrs	r3, r3, #13
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	4903      	ldr	r1, [pc, #12]	@ (80027c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027b2:	5ccb      	ldrb	r3, [r1, r3]
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	0800870c 	.word	0x0800870c

080027c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	220f      	movs	r2, #15
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027d4:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <HAL_RCC_GetClockConfig+0x5c>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0203 	and.w	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002820 <HAL_RCC_GetClockConfig+0x5c>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <HAL_RCC_GetClockConfig+0x5c>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027f8:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <HAL_RCC_GetClockConfig+0x5c>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	08db      	lsrs	r3, r3, #3
 80027fe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002806:	4b07      	ldr	r3, [pc, #28]	@ (8002824 <HAL_RCC_GetClockConfig+0x60>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 020f 	and.w	r2, r3, #15
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	601a      	str	r2, [r3, #0]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	40023c00 	.word	0x40023c00

08002828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e041      	b.n	80028be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe f9fe 	bl	8000c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3304      	adds	r3, #4
 8002864:	4619      	mov	r1, r3
 8002866:	4610      	mov	r0, r2
 8002868:	f000 fa7e 	bl	8002d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d001      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e04e      	b.n	800297e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a23      	ldr	r2, [pc, #140]	@ (800298c <HAL_TIM_Base_Start_IT+0xc4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d022      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800290a:	d01d      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1f      	ldr	r2, [pc, #124]	@ (8002990 <HAL_TIM_Base_Start_IT+0xc8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d018      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1e      	ldr	r2, [pc, #120]	@ (8002994 <HAL_TIM_Base_Start_IT+0xcc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1c      	ldr	r2, [pc, #112]	@ (8002998 <HAL_TIM_Base_Start_IT+0xd0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00e      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1b      	ldr	r2, [pc, #108]	@ (800299c <HAL_TIM_Base_Start_IT+0xd4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d009      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a19      	ldr	r2, [pc, #100]	@ (80029a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d004      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a18      	ldr	r2, [pc, #96]	@ (80029a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d111      	bne.n	800296c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b06      	cmp	r3, #6
 8002958:	d010      	beq.n	800297c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296a:	e007      	b.n	800297c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40010000 	.word	0x40010000
 8002990:	40000400 	.word	0x40000400
 8002994:	40000800 	.word	0x40000800
 8002998:	40000c00 	.word	0x40000c00
 800299c:	40010400 	.word	0x40010400
 80029a0:	40014000 	.word	0x40014000
 80029a4:	40001800 	.word	0x40001800

080029a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d020      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01b      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0202 	mvn.w	r2, #2
 80029dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f999 	bl	8002d2a <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f98b 	bl	8002d16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f99c 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d020      	beq.n	8002a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0204 	mvn.w	r2, #4
 8002a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f973 	bl	8002d2a <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f965 	bl	8002d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f976 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d020      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01b      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0208 	mvn.w	r2, #8
 8002a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2204      	movs	r2, #4
 8002a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f94d 	bl	8002d2a <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f93f 	bl	8002d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f950 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d020      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01b      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0210 	mvn.w	r2, #16
 8002ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f927 	bl	8002d2a <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f919 	bl	8002d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f92a 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00c      	beq.n	8002b14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0201 	mvn.w	r2, #1
 8002b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fd ff88 	bl	8000a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00c      	beq.n	8002b38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fae4 	bl	8003100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00c      	beq.n	8002b5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f8fb 	bl	8002d52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00c      	beq.n	8002b80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0220 	mvn.w	r2, #32
 8002b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fab6 	bl	80030ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e0b4      	b.n	8002d0e <HAL_TIM_ConfigClockSource+0x186>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bdc:	d03e      	beq.n	8002c5c <HAL_TIM_ConfigClockSource+0xd4>
 8002bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002be2:	f200 8087 	bhi.w	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bea:	f000 8086 	beq.w	8002cfa <HAL_TIM_ConfigClockSource+0x172>
 8002bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bf2:	d87f      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf4:	2b70      	cmp	r3, #112	@ 0x70
 8002bf6:	d01a      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0xa6>
 8002bf8:	2b70      	cmp	r3, #112	@ 0x70
 8002bfa:	d87b      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bfc:	2b60      	cmp	r3, #96	@ 0x60
 8002bfe:	d050      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0x11a>
 8002c00:	2b60      	cmp	r3, #96	@ 0x60
 8002c02:	d877      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c04:	2b50      	cmp	r3, #80	@ 0x50
 8002c06:	d03c      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0xfa>
 8002c08:	2b50      	cmp	r3, #80	@ 0x50
 8002c0a:	d873      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c0c:	2b40      	cmp	r3, #64	@ 0x40
 8002c0e:	d058      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x13a>
 8002c10:	2b40      	cmp	r3, #64	@ 0x40
 8002c12:	d86f      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c14:	2b30      	cmp	r3, #48	@ 0x30
 8002c16:	d064      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c18:	2b30      	cmp	r3, #48	@ 0x30
 8002c1a:	d86b      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d060      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d867      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d05c      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d05a      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c2c:	e062      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c3e:	f000 f9b9 	bl	8002fb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	609a      	str	r2, [r3, #8]
      break;
 8002c5a:	e04f      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c6c:	f000 f9a2 	bl	8002fb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c7e:	609a      	str	r2, [r3, #8]
      break;
 8002c80:	e03c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f000 f916 	bl	8002ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2150      	movs	r1, #80	@ 0x50
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f96f 	bl	8002f7e <TIM_ITRx_SetConfig>
      break;
 8002ca0:	e02c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f000 f935 	bl	8002f1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2160      	movs	r1, #96	@ 0x60
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f95f 	bl	8002f7e <TIM_ITRx_SetConfig>
      break;
 8002cc0:	e01c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f000 f8f6 	bl	8002ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2140      	movs	r1, #64	@ 0x40
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f94f 	bl	8002f7e <TIM_ITRx_SetConfig>
      break;
 8002ce0:	e00c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4619      	mov	r1, r3
 8002cec:	4610      	mov	r0, r2
 8002cee:	f000 f946 	bl	8002f7e <TIM_ITRx_SetConfig>
      break;
 8002cf2:	e003      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf8:	e000      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a46      	ldr	r2, [pc, #280]	@ (8002e94 <TIM_Base_SetConfig+0x12c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d013      	beq.n	8002da8 <TIM_Base_SetConfig+0x40>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d86:	d00f      	beq.n	8002da8 <TIM_Base_SetConfig+0x40>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a43      	ldr	r2, [pc, #268]	@ (8002e98 <TIM_Base_SetConfig+0x130>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00b      	beq.n	8002da8 <TIM_Base_SetConfig+0x40>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a42      	ldr	r2, [pc, #264]	@ (8002e9c <TIM_Base_SetConfig+0x134>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d007      	beq.n	8002da8 <TIM_Base_SetConfig+0x40>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a41      	ldr	r2, [pc, #260]	@ (8002ea0 <TIM_Base_SetConfig+0x138>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d003      	beq.n	8002da8 <TIM_Base_SetConfig+0x40>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a40      	ldr	r2, [pc, #256]	@ (8002ea4 <TIM_Base_SetConfig+0x13c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d108      	bne.n	8002dba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a35      	ldr	r2, [pc, #212]	@ (8002e94 <TIM_Base_SetConfig+0x12c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d02b      	beq.n	8002e1a <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc8:	d027      	beq.n	8002e1a <TIM_Base_SetConfig+0xb2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a32      	ldr	r2, [pc, #200]	@ (8002e98 <TIM_Base_SetConfig+0x130>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d023      	beq.n	8002e1a <TIM_Base_SetConfig+0xb2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a31      	ldr	r2, [pc, #196]	@ (8002e9c <TIM_Base_SetConfig+0x134>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d01f      	beq.n	8002e1a <TIM_Base_SetConfig+0xb2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a30      	ldr	r2, [pc, #192]	@ (8002ea0 <TIM_Base_SetConfig+0x138>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d01b      	beq.n	8002e1a <TIM_Base_SetConfig+0xb2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a2f      	ldr	r2, [pc, #188]	@ (8002ea4 <TIM_Base_SetConfig+0x13c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d017      	beq.n	8002e1a <TIM_Base_SetConfig+0xb2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a2e      	ldr	r2, [pc, #184]	@ (8002ea8 <TIM_Base_SetConfig+0x140>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <TIM_Base_SetConfig+0xb2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a2d      	ldr	r2, [pc, #180]	@ (8002eac <TIM_Base_SetConfig+0x144>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00f      	beq.n	8002e1a <TIM_Base_SetConfig+0xb2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8002eb0 <TIM_Base_SetConfig+0x148>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00b      	beq.n	8002e1a <TIM_Base_SetConfig+0xb2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb4 <TIM_Base_SetConfig+0x14c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d007      	beq.n	8002e1a <TIM_Base_SetConfig+0xb2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8002eb8 <TIM_Base_SetConfig+0x150>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d003      	beq.n	8002e1a <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a29      	ldr	r2, [pc, #164]	@ (8002ebc <TIM_Base_SetConfig+0x154>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d108      	bne.n	8002e2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a10      	ldr	r2, [pc, #64]	@ (8002e94 <TIM_Base_SetConfig+0x12c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d003      	beq.n	8002e60 <TIM_Base_SetConfig+0xf8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ea4 <TIM_Base_SetConfig+0x13c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d103      	bne.n	8002e68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d105      	bne.n	8002e86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f023 0201 	bic.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	611a      	str	r2, [r3, #16]
  }
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40010000 	.word	0x40010000
 8002e98:	40000400 	.word	0x40000400
 8002e9c:	40000800 	.word	0x40000800
 8002ea0:	40000c00 	.word	0x40000c00
 8002ea4:	40010400 	.word	0x40010400
 8002ea8:	40014000 	.word	0x40014000
 8002eac:	40014400 	.word	0x40014400
 8002eb0:	40014800 	.word	0x40014800
 8002eb4:	40001800 	.word	0x40001800
 8002eb8:	40001c00 	.word	0x40001c00
 8002ebc:	40002000 	.word	0x40002000

08002ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f023 0201 	bic.w	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f023 030a 	bic.w	r3, r3, #10
 8002efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b087      	sub	sp, #28
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f023 0210 	bic.w	r2, r3, #16
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	031b      	lsls	r3, r3, #12
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	621a      	str	r2, [r3, #32]
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b085      	sub	sp, #20
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f043 0307 	orr.w	r3, r3, #7
 8002fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	609a      	str	r2, [r3, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	021a      	lsls	r2, r3, #8
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	609a      	str	r2, [r3, #8]
}
 8002fe8:	bf00      	nop
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003008:	2302      	movs	r3, #2
 800300a:	e05a      	b.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a21      	ldr	r2, [pc, #132]	@ (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d022      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003058:	d01d      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1d      	ldr	r2, [pc, #116]	@ (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d018      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1b      	ldr	r2, [pc, #108]	@ (80030d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1a      	ldr	r2, [pc, #104]	@ (80030dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00e      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a18      	ldr	r2, [pc, #96]	@ (80030e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d009      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a17      	ldr	r2, [pc, #92]	@ (80030e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a15      	ldr	r2, [pc, #84]	@ (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d10c      	bne.n	80030b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800309c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40010000 	.word	0x40010000
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40000800 	.word	0x40000800
 80030dc:	40000c00 	.word	0x40000c00
 80030e0:	40010400 	.word	0x40010400
 80030e4:	40014000 	.word	0x40014000
 80030e8:	40001800 	.word	0x40001800

080030ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e042      	b.n	80031ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fd fdae 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2224      	movs	r2, #36	@ 0x24
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f82b 	bl	80031b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800316c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800317c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800318c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b8:	b0c0      	sub	sp, #256	@ 0x100
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d0:	68d9      	ldr	r1, [r3, #12]
 80031d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	ea40 0301 	orr.w	r3, r0, r1
 80031dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800320c:	f021 010c 	bic.w	r1, r1, #12
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800321a:	430b      	orrs	r3, r1
 800321c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800321e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800322a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322e:	6999      	ldr	r1, [r3, #24]
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	ea40 0301 	orr.w	r3, r0, r1
 800323a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800323c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4b8f      	ldr	r3, [pc, #572]	@ (8003480 <UART_SetConfig+0x2cc>)
 8003244:	429a      	cmp	r2, r3
 8003246:	d005      	beq.n	8003254 <UART_SetConfig+0xa0>
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4b8d      	ldr	r3, [pc, #564]	@ (8003484 <UART_SetConfig+0x2d0>)
 8003250:	429a      	cmp	r2, r3
 8003252:	d104      	bne.n	800325e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003254:	f7ff faa2 	bl	800279c <HAL_RCC_GetPCLK2Freq>
 8003258:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800325c:	e003      	b.n	8003266 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800325e:	f7ff fa89 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8003262:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003270:	f040 810c 	bne.w	800348c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003278:	2200      	movs	r2, #0
 800327a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800327e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003282:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003286:	4622      	mov	r2, r4
 8003288:	462b      	mov	r3, r5
 800328a:	1891      	adds	r1, r2, r2
 800328c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800328e:	415b      	adcs	r3, r3
 8003290:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003292:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003296:	4621      	mov	r1, r4
 8003298:	eb12 0801 	adds.w	r8, r2, r1
 800329c:	4629      	mov	r1, r5
 800329e:	eb43 0901 	adc.w	r9, r3, r1
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032b6:	4690      	mov	r8, r2
 80032b8:	4699      	mov	r9, r3
 80032ba:	4623      	mov	r3, r4
 80032bc:	eb18 0303 	adds.w	r3, r8, r3
 80032c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032c4:	462b      	mov	r3, r5
 80032c6:	eb49 0303 	adc.w	r3, r9, r3
 80032ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032e2:	460b      	mov	r3, r1
 80032e4:	18db      	adds	r3, r3, r3
 80032e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80032e8:	4613      	mov	r3, r2
 80032ea:	eb42 0303 	adc.w	r3, r2, r3
 80032ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80032f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032f8:	f7fc ffd2 	bl	80002a0 <__aeabi_uldivmod>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4b61      	ldr	r3, [pc, #388]	@ (8003488 <UART_SetConfig+0x2d4>)
 8003302:	fba3 2302 	umull	r2, r3, r3, r2
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	011c      	lsls	r4, r3, #4
 800330a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800330e:	2200      	movs	r2, #0
 8003310:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003314:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003318:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800331c:	4642      	mov	r2, r8
 800331e:	464b      	mov	r3, r9
 8003320:	1891      	adds	r1, r2, r2
 8003322:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003324:	415b      	adcs	r3, r3
 8003326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003328:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800332c:	4641      	mov	r1, r8
 800332e:	eb12 0a01 	adds.w	sl, r2, r1
 8003332:	4649      	mov	r1, r9
 8003334:	eb43 0b01 	adc.w	fp, r3, r1
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003344:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003348:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800334c:	4692      	mov	sl, r2
 800334e:	469b      	mov	fp, r3
 8003350:	4643      	mov	r3, r8
 8003352:	eb1a 0303 	adds.w	r3, sl, r3
 8003356:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800335a:	464b      	mov	r3, r9
 800335c:	eb4b 0303 	adc.w	r3, fp, r3
 8003360:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003370:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003374:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003378:	460b      	mov	r3, r1
 800337a:	18db      	adds	r3, r3, r3
 800337c:	643b      	str	r3, [r7, #64]	@ 0x40
 800337e:	4613      	mov	r3, r2
 8003380:	eb42 0303 	adc.w	r3, r2, r3
 8003384:	647b      	str	r3, [r7, #68]	@ 0x44
 8003386:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800338a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800338e:	f7fc ff87 	bl	80002a0 <__aeabi_uldivmod>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4611      	mov	r1, r2
 8003398:	4b3b      	ldr	r3, [pc, #236]	@ (8003488 <UART_SetConfig+0x2d4>)
 800339a:	fba3 2301 	umull	r2, r3, r3, r1
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2264      	movs	r2, #100	@ 0x64
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	1acb      	subs	r3, r1, r3
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80033ae:	4b36      	ldr	r3, [pc, #216]	@ (8003488 <UART_SetConfig+0x2d4>)
 80033b0:	fba3 2302 	umull	r2, r3, r3, r2
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80033bc:	441c      	add	r4, r3
 80033be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033c2:	2200      	movs	r2, #0
 80033c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80033cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033d0:	4642      	mov	r2, r8
 80033d2:	464b      	mov	r3, r9
 80033d4:	1891      	adds	r1, r2, r2
 80033d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033d8:	415b      	adcs	r3, r3
 80033da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033e0:	4641      	mov	r1, r8
 80033e2:	1851      	adds	r1, r2, r1
 80033e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80033e6:	4649      	mov	r1, r9
 80033e8:	414b      	adcs	r3, r1
 80033ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033f8:	4659      	mov	r1, fp
 80033fa:	00cb      	lsls	r3, r1, #3
 80033fc:	4651      	mov	r1, sl
 80033fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003402:	4651      	mov	r1, sl
 8003404:	00ca      	lsls	r2, r1, #3
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	4603      	mov	r3, r0
 800340c:	4642      	mov	r2, r8
 800340e:	189b      	adds	r3, r3, r2
 8003410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003414:	464b      	mov	r3, r9
 8003416:	460a      	mov	r2, r1
 8003418:	eb42 0303 	adc.w	r3, r2, r3
 800341c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800342c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003430:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003434:	460b      	mov	r3, r1
 8003436:	18db      	adds	r3, r3, r3
 8003438:	62bb      	str	r3, [r7, #40]	@ 0x28
 800343a:	4613      	mov	r3, r2
 800343c:	eb42 0303 	adc.w	r3, r2, r3
 8003440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003442:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003446:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800344a:	f7fc ff29 	bl	80002a0 <__aeabi_uldivmod>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4b0d      	ldr	r3, [pc, #52]	@ (8003488 <UART_SetConfig+0x2d4>)
 8003454:	fba3 1302 	umull	r1, r3, r3, r2
 8003458:	095b      	lsrs	r3, r3, #5
 800345a:	2164      	movs	r1, #100	@ 0x64
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	3332      	adds	r3, #50	@ 0x32
 8003466:	4a08      	ldr	r2, [pc, #32]	@ (8003488 <UART_SetConfig+0x2d4>)
 8003468:	fba2 2303 	umull	r2, r3, r2, r3
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	f003 0207 	and.w	r2, r3, #7
 8003472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4422      	add	r2, r4
 800347a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800347c:	e106      	b.n	800368c <UART_SetConfig+0x4d8>
 800347e:	bf00      	nop
 8003480:	40011000 	.word	0x40011000
 8003484:	40011400 	.word	0x40011400
 8003488:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800348c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003490:	2200      	movs	r2, #0
 8003492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003496:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800349a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800349e:	4642      	mov	r2, r8
 80034a0:	464b      	mov	r3, r9
 80034a2:	1891      	adds	r1, r2, r2
 80034a4:	6239      	str	r1, [r7, #32]
 80034a6:	415b      	adcs	r3, r3
 80034a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ae:	4641      	mov	r1, r8
 80034b0:	1854      	adds	r4, r2, r1
 80034b2:	4649      	mov	r1, r9
 80034b4:	eb43 0501 	adc.w	r5, r3, r1
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	00eb      	lsls	r3, r5, #3
 80034c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c6:	00e2      	lsls	r2, r4, #3
 80034c8:	4614      	mov	r4, r2
 80034ca:	461d      	mov	r5, r3
 80034cc:	4643      	mov	r3, r8
 80034ce:	18e3      	adds	r3, r4, r3
 80034d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034d4:	464b      	mov	r3, r9
 80034d6:	eb45 0303 	adc.w	r3, r5, r3
 80034da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034fa:	4629      	mov	r1, r5
 80034fc:	008b      	lsls	r3, r1, #2
 80034fe:	4621      	mov	r1, r4
 8003500:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003504:	4621      	mov	r1, r4
 8003506:	008a      	lsls	r2, r1, #2
 8003508:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800350c:	f7fc fec8 	bl	80002a0 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4b60      	ldr	r3, [pc, #384]	@ (8003698 <UART_SetConfig+0x4e4>)
 8003516:	fba3 2302 	umull	r2, r3, r3, r2
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	011c      	lsls	r4, r3, #4
 800351e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003528:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800352c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003530:	4642      	mov	r2, r8
 8003532:	464b      	mov	r3, r9
 8003534:	1891      	adds	r1, r2, r2
 8003536:	61b9      	str	r1, [r7, #24]
 8003538:	415b      	adcs	r3, r3
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003540:	4641      	mov	r1, r8
 8003542:	1851      	adds	r1, r2, r1
 8003544:	6139      	str	r1, [r7, #16]
 8003546:	4649      	mov	r1, r9
 8003548:	414b      	adcs	r3, r1
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003558:	4659      	mov	r1, fp
 800355a:	00cb      	lsls	r3, r1, #3
 800355c:	4651      	mov	r1, sl
 800355e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003562:	4651      	mov	r1, sl
 8003564:	00ca      	lsls	r2, r1, #3
 8003566:	4610      	mov	r0, r2
 8003568:	4619      	mov	r1, r3
 800356a:	4603      	mov	r3, r0
 800356c:	4642      	mov	r2, r8
 800356e:	189b      	adds	r3, r3, r2
 8003570:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003574:	464b      	mov	r3, r9
 8003576:	460a      	mov	r2, r1
 8003578:	eb42 0303 	adc.w	r3, r2, r3
 800357c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	67bb      	str	r3, [r7, #120]	@ 0x78
 800358a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003598:	4649      	mov	r1, r9
 800359a:	008b      	lsls	r3, r1, #2
 800359c:	4641      	mov	r1, r8
 800359e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a2:	4641      	mov	r1, r8
 80035a4:	008a      	lsls	r2, r1, #2
 80035a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035aa:	f7fc fe79 	bl	80002a0 <__aeabi_uldivmod>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	4b38      	ldr	r3, [pc, #224]	@ (8003698 <UART_SetConfig+0x4e4>)
 80035b6:	fba3 2301 	umull	r2, r3, r3, r1
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2264      	movs	r2, #100	@ 0x64
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	1acb      	subs	r3, r1, r3
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	3332      	adds	r3, #50	@ 0x32
 80035c8:	4a33      	ldr	r2, [pc, #204]	@ (8003698 <UART_SetConfig+0x4e4>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035d4:	441c      	add	r4, r3
 80035d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035da:	2200      	movs	r2, #0
 80035dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80035de:	677a      	str	r2, [r7, #116]	@ 0x74
 80035e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035e4:	4642      	mov	r2, r8
 80035e6:	464b      	mov	r3, r9
 80035e8:	1891      	adds	r1, r2, r2
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	415b      	adcs	r3, r3
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035f4:	4641      	mov	r1, r8
 80035f6:	1851      	adds	r1, r2, r1
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	4649      	mov	r1, r9
 80035fc:	414b      	adcs	r3, r1
 80035fe:	607b      	str	r3, [r7, #4]
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800360c:	4659      	mov	r1, fp
 800360e:	00cb      	lsls	r3, r1, #3
 8003610:	4651      	mov	r1, sl
 8003612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003616:	4651      	mov	r1, sl
 8003618:	00ca      	lsls	r2, r1, #3
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	4603      	mov	r3, r0
 8003620:	4642      	mov	r2, r8
 8003622:	189b      	adds	r3, r3, r2
 8003624:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003626:	464b      	mov	r3, r9
 8003628:	460a      	mov	r2, r1
 800362a:	eb42 0303 	adc.w	r3, r2, r3
 800362e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	663b      	str	r3, [r7, #96]	@ 0x60
 800363a:	667a      	str	r2, [r7, #100]	@ 0x64
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003648:	4649      	mov	r1, r9
 800364a:	008b      	lsls	r3, r1, #2
 800364c:	4641      	mov	r1, r8
 800364e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003652:	4641      	mov	r1, r8
 8003654:	008a      	lsls	r2, r1, #2
 8003656:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800365a:	f7fc fe21 	bl	80002a0 <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4b0d      	ldr	r3, [pc, #52]	@ (8003698 <UART_SetConfig+0x4e4>)
 8003664:	fba3 1302 	umull	r1, r3, r3, r2
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	2164      	movs	r1, #100	@ 0x64
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	3332      	adds	r3, #50	@ 0x32
 8003676:	4a08      	ldr	r2, [pc, #32]	@ (8003698 <UART_SetConfig+0x4e4>)
 8003678:	fba2 2303 	umull	r2, r3, r2, r3
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	f003 020f 	and.w	r2, r3, #15
 8003682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4422      	add	r2, r4
 800368a:	609a      	str	r2, [r3, #8]
}
 800368c:	bf00      	nop
 800368e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003692:	46bd      	mov	sp, r7
 8003694:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003698:	51eb851f 	.word	0x51eb851f

0800369c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800369c:	b084      	sub	sp, #16
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	f107 001c 	add.w	r0, r7, #28
 80036aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d123      	bne.n	80036fe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80036ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d105      	bne.n	80036f2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 faa0 	bl	8003c38 <USB_CoreReset>
 80036f8:	4603      	mov	r3, r0
 80036fa:	73fb      	strb	r3, [r7, #15]
 80036fc:	e01b      	b.n	8003736 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fa94 	bl	8003c38 <USB_CoreReset>
 8003710:	4603      	mov	r3, r0
 8003712:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003714:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003718:	2b00      	cmp	r3, #0
 800371a:	d106      	bne.n	800372a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003720:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	639a      	str	r2, [r3, #56]	@ 0x38
 8003728:	e005      	b.n	8003736 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003736:	7fbb      	ldrb	r3, [r7, #30]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d10b      	bne.n	8003754 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f043 0206 	orr.w	r2, r3, #6
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f043 0220 	orr.w	r2, r3, #32
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003760:	b004      	add	sp, #16
 8003762:	4770      	bx	lr

08003764 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f023 0201 	bic.w	r2, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	460b      	mov	r3, r1
 8003790:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d115      	bne.n	80037d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80037b4:	200a      	movs	r0, #10
 80037b6:	f7fd fc6b 	bl	8001090 <HAL_Delay>
      ms += 10U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	330a      	adds	r3, #10
 80037be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fa2b 	bl	8003c1c <USB_GetMode>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d01e      	beq.n	800380a <USB_SetCurrentMode+0x84>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80037d0:	d9f0      	bls.n	80037b4 <USB_SetCurrentMode+0x2e>
 80037d2:	e01a      	b.n	800380a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d115      	bne.n	8003806 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80037e6:	200a      	movs	r0, #10
 80037e8:	f7fd fc52 	bl	8001090 <HAL_Delay>
      ms += 10U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	330a      	adds	r3, #10
 80037f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fa12 	bl	8003c1c <USB_GetMode>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <USB_SetCurrentMode+0x84>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2bc7      	cmp	r3, #199	@ 0xc7
 8003802:	d9f0      	bls.n	80037e6 <USB_SetCurrentMode+0x60>
 8003804:	e001      	b.n	800380a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e005      	b.n	8003816 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2bc8      	cmp	r3, #200	@ 0xc8
 800380e:	d101      	bne.n	8003814 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003820:	b084      	sub	sp, #16
 8003822:	b580      	push	{r7, lr}
 8003824:	b086      	sub	sp, #24
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800382e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	e009      	b.n	8003854 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	3340      	adds	r3, #64	@ 0x40
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	2200      	movs	r2, #0
 800384c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	3301      	adds	r3, #1
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b0e      	cmp	r3, #14
 8003858:	d9f2      	bls.n	8003840 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800385a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800385e:	2b00      	cmp	r3, #0
 8003860:	d11c      	bne.n	800389c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003870:	f043 0302 	orr.w	r3, r3, #2
 8003874:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003886:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003892:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	639a      	str	r2, [r3, #56]	@ 0x38
 800389a:	e00b      	b.n	80038b4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80038ba:	461a      	mov	r2, r3
 80038bc:	2300      	movs	r3, #0
 80038be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d10d      	bne.n	80038e4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d104      	bne.n	80038da <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038d0:	2100      	movs	r1, #0
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f968 	bl	8003ba8 <USB_SetDevSpeed>
 80038d8:	e008      	b.n	80038ec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80038da:	2101      	movs	r1, #1
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f963 	bl	8003ba8 <USB_SetDevSpeed>
 80038e2:	e003      	b.n	80038ec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80038e4:	2103      	movs	r1, #3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f95e 	bl	8003ba8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038ec:	2110      	movs	r1, #16
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f8fa 	bl	8003ae8 <USB_FlushTxFifo>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f924 	bl	8003b4c <USB_FlushRxFifo>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003914:	461a      	mov	r2, r3
 8003916:	2300      	movs	r3, #0
 8003918:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003920:	461a      	mov	r2, r3
 8003922:	2300      	movs	r3, #0
 8003924:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800392c:	461a      	mov	r2, r3
 800392e:	2300      	movs	r3, #0
 8003930:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	e043      	b.n	80039c0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800394a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800394e:	d118      	bne.n	8003982 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10a      	bne.n	800396c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003962:	461a      	mov	r2, r3
 8003964:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	e013      	b.n	8003994 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003978:	461a      	mov	r2, r3
 800397a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	e008      	b.n	8003994 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800398e:	461a      	mov	r2, r3
 8003990:	2300      	movs	r3, #0
 8003992:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a0:	461a      	mov	r2, r3
 80039a2:	2300      	movs	r3, #0
 80039a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039b2:	461a      	mov	r2, r3
 80039b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	3301      	adds	r3, #1
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039c4:	461a      	mov	r2, r3
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d3b5      	bcc.n	8003938 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	e043      	b.n	8003a5a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039e8:	d118      	bne.n	8003a1c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039fc:	461a      	mov	r2, r3
 80039fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	e013      	b.n	8003a2e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a12:	461a      	mov	r2, r3
 8003a14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e008      	b.n	8003a2e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a28:	461a      	mov	r2, r3
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	3301      	adds	r3, #1
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a5e:	461a      	mov	r2, r3
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d3b5      	bcc.n	80039d2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a78:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003a86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d105      	bne.n	8003a9c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f043 0210 	orr.w	r2, r3, #16
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699a      	ldr	r2, [r3, #24]
 8003aa0:	4b10      	ldr	r3, [pc, #64]	@ (8003ae4 <USB_DevInit+0x2c4>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003aa8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f043 0208 	orr.w	r2, r3, #8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003abc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d107      	bne.n	8003ad4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003acc:	f043 0304 	orr.w	r3, r3, #4
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ae0:	b004      	add	sp, #16
 8003ae2:	4770      	bx	lr
 8003ae4:	803c3800 	.word	0x803c3800

08003ae8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3301      	adds	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b02:	d901      	bls.n	8003b08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e01b      	b.n	8003b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	daf2      	bge.n	8003af6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	019b      	lsls	r3, r3, #6
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3301      	adds	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b2c:	d901      	bls.n	8003b32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e006      	b.n	8003b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d0f0      	beq.n	8003b20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b64:	d901      	bls.n	8003b6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e018      	b.n	8003b9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	daf2      	bge.n	8003b58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2210      	movs	r2, #16
 8003b7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b88:	d901      	bls.n	8003b8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e006      	b.n	8003b9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b10      	cmp	r3, #16
 8003b98:	d0f0      	beq.n	8003b7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	68f9      	ldr	r1, [r7, #12]
 8003bc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b085      	sub	sp, #20
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003bf4:	f023 0303 	bic.w	r3, r3, #3
 8003bf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c08:	f043 0302 	orr.w	r3, r3, #2
 8003c0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f003 0301 	and.w	r3, r3, #1
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3301      	adds	r3, #1
 8003c48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c50:	d901      	bls.n	8003c56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e01b      	b.n	8003c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	daf2      	bge.n	8003c44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f043 0201 	orr.w	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3301      	adds	r3, #1
 8003c72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c7a:	d901      	bls.n	8003c80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e006      	b.n	8003c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d0f0      	beq.n	8003c6e <USB_CoreReset+0x36>

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c9e:	f000 ff8d 	bl	8004bbc <vTaskStartScheduler>
  
  return osOK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f103 0208 	add.w	r2, r3, #8
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f103 0208 	add.w	r2, r3, #8
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f103 0208 	add.w	r2, r3, #8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d02:	b480      	push	{r7}
 8003d04:	b085      	sub	sp, #20
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	601a      	str	r2, [r3, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d103      	bne.n	8003d6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e00c      	b.n	8003d84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	e002      	b.n	8003d78 <vListInsert+0x2e>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d2f6      	bcs.n	8003d72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	601a      	str	r2, [r3, #0]
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6892      	ldr	r2, [r2, #8]
 8003dd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6852      	ldr	r2, [r2, #4]
 8003ddc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d103      	bne.n	8003df0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	1e5a      	subs	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10b      	bne.n	8003e3c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e36:	bf00      	nop
 8003e38:	bf00      	nop
 8003e3a:	e7fd      	b.n	8003e38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e3c:	f001 fe54 	bl	8005ae8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e48:	68f9      	ldr	r1, [r7, #12]
 8003e4a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	441a      	add	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	68f9      	ldr	r1, [r7, #12]
 8003e70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e72:	fb01 f303 	mul.w	r3, r1, r3
 8003e76:	441a      	add	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	22ff      	movs	r2, #255	@ 0xff
 8003e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	22ff      	movs	r2, #255	@ 0xff
 8003e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d114      	bne.n	8003ebc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01a      	beq.n	8003ed0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3310      	adds	r3, #16
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 f920 	bl	80050e4 <xTaskRemoveFromEventList>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d012      	beq.n	8003ed0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <xQueueGenericReset+0xd0>)
 8003eac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	e009      	b.n	8003ed0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3310      	adds	r3, #16
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff fef1 	bl	8003ca8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3324      	adds	r3, #36	@ 0x24
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff feec 	bl	8003ca8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ed0:	f001 fe3c 	bl	8005b4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ed4:	2301      	movs	r3, #1
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	e000ed04 	.word	0xe000ed04

08003ee4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	@ 0x28
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10b      	bne.n	8003f10 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	613b      	str	r3, [r7, #16]
}
 8003f0a:	bf00      	nop
 8003f0c:	bf00      	nop
 8003f0e:	e7fd      	b.n	8003f0c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	fb02 f303 	mul.w	r3, r2, r3
 8003f18:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	3350      	adds	r3, #80	@ 0x50
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f001 fec2 	bl	8005ca8 <pvPortMalloc>
 8003f24:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00d      	beq.n	8003f48 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	3350      	adds	r3, #80	@ 0x50
 8003f34:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f36:	79fa      	ldrb	r2, [r7, #7]
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f805 	bl	8003f52 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f48:	69bb      	ldr	r3, [r7, #24]
	}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d103      	bne.n	8003f6e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	e002      	b.n	8003f74 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f80:	2101      	movs	r1, #1
 8003f82:	69b8      	ldr	r0, [r7, #24]
 8003f84:	f7ff ff44 	bl	8003e10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00e      	beq.n	8003fc4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f81c 	bl	8003ffc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003fc4:	bf00      	nop
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003fde:	79fb      	ldrb	r3, [r7, #7]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6939      	ldr	r1, [r7, #16]
 8003fe4:	6978      	ldr	r0, [r7, #20]
 8003fe6:	f7ff ff7d 	bl	8003ee4 <xQueueGenericCreate>
 8003fea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff ffd3 	bl	8003f98 <prvInitialiseMutex>

		return xNewQueue;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
	}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08e      	sub	sp, #56	@ 0x38
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800400a:	2300      	movs	r3, #0
 800400c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10b      	bne.n	8004030 <xQueueGenericSend+0x34>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800402a:	bf00      	nop
 800402c:	bf00      	nop
 800402e:	e7fd      	b.n	800402c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d103      	bne.n	800403e <xQueueGenericSend+0x42>
 8004036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <xQueueGenericSend+0x46>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <xQueueGenericSend+0x48>
 8004042:	2300      	movs	r3, #0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10b      	bne.n	8004060 <xQueueGenericSend+0x64>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800405a:	bf00      	nop
 800405c:	bf00      	nop
 800405e:	e7fd      	b.n	800405c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d103      	bne.n	800406e <xQueueGenericSend+0x72>
 8004066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <xQueueGenericSend+0x76>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <xQueueGenericSend+0x78>
 8004072:	2300      	movs	r3, #0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10b      	bne.n	8004090 <xQueueGenericSend+0x94>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	623b      	str	r3, [r7, #32]
}
 800408a:	bf00      	nop
 800408c:	bf00      	nop
 800408e:	e7fd      	b.n	800408c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004090:	f001 f9d0 	bl	8005434 <xTaskGetSchedulerState>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d102      	bne.n	80040a0 <xQueueGenericSend+0xa4>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <xQueueGenericSend+0xa8>
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <xQueueGenericSend+0xaa>
 80040a4:	2300      	movs	r3, #0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10b      	bne.n	80040c2 <xQueueGenericSend+0xc6>
	__asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	61fb      	str	r3, [r7, #28]
}
 80040bc:	bf00      	nop
 80040be:	bf00      	nop
 80040c0:	e7fd      	b.n	80040be <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040c2:	f001 fd11 	bl	8005ae8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d302      	bcc.n	80040d8 <xQueueGenericSend+0xdc>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d129      	bne.n	800412c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	68b9      	ldr	r1, [r7, #8]
 80040dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040de:	f000 f9b7 	bl	8004450 <prvCopyDataToQueue>
 80040e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d010      	beq.n	800410e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ee:	3324      	adds	r3, #36	@ 0x24
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fff7 	bl	80050e4 <xTaskRemoveFromEventList>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d013      	beq.n	8004124 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040fc:	4b3f      	ldr	r3, [pc, #252]	@ (80041fc <xQueueGenericSend+0x200>)
 80040fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	e00a      	b.n	8004124 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800410e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004114:	4b39      	ldr	r3, [pc, #228]	@ (80041fc <xQueueGenericSend+0x200>)
 8004116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004124:	f001 fd12 	bl	8005b4c <vPortExitCritical>
				return pdPASS;
 8004128:	2301      	movs	r3, #1
 800412a:	e063      	b.n	80041f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d103      	bne.n	800413a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004132:	f001 fd0b 	bl	8005b4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004136:	2300      	movs	r3, #0
 8004138:	e05c      	b.n	80041f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800413a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800413c:	2b00      	cmp	r3, #0
 800413e:	d106      	bne.n	800414e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004140:	f107 0314 	add.w	r3, r7, #20
 8004144:	4618      	mov	r0, r3
 8004146:	f001 f831 	bl	80051ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800414a:	2301      	movs	r3, #1
 800414c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800414e:	f001 fcfd 	bl	8005b4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004152:	f000 fd87 	bl	8004c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004156:	f001 fcc7 	bl	8005ae8 <vPortEnterCritical>
 800415a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004160:	b25b      	sxtb	r3, r3
 8004162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004166:	d103      	bne.n	8004170 <xQueueGenericSend+0x174>
 8004168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004172:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004176:	b25b      	sxtb	r3, r3
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d103      	bne.n	8004186 <xQueueGenericSend+0x18a>
 800417e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004186:	f001 fce1 	bl	8005b4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800418a:	1d3a      	adds	r2, r7, #4
 800418c:	f107 0314 	add.w	r3, r7, #20
 8004190:	4611      	mov	r1, r2
 8004192:	4618      	mov	r0, r3
 8004194:	f001 f820 	bl	80051d8 <xTaskCheckForTimeOut>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d124      	bne.n	80041e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800419e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041a0:	f000 fa28 	bl	80045f4 <prvIsQueueFull>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d018      	beq.n	80041dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ac:	3310      	adds	r3, #16
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	4611      	mov	r1, r2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 ff70 	bl	8005098 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041ba:	f000 f9b3 	bl	8004524 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041be:	f000 fd5f 	bl	8004c80 <xTaskResumeAll>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f47f af7c 	bne.w	80040c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80041ca:	4b0c      	ldr	r3, [pc, #48]	@ (80041fc <xQueueGenericSend+0x200>)
 80041cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	e772      	b.n	80040c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041de:	f000 f9a1 	bl	8004524 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041e2:	f000 fd4d 	bl	8004c80 <xTaskResumeAll>
 80041e6:	e76c      	b.n	80040c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041ea:	f000 f99b 	bl	8004524 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041ee:	f000 fd47 	bl	8004c80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3738      	adds	r7, #56	@ 0x38
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	e000ed04 	.word	0xe000ed04

08004200 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08e      	sub	sp, #56	@ 0x38
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800420a:	2300      	movs	r3, #0
 800420c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004212:	2300      	movs	r3, #0
 8004214:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	623b      	str	r3, [r7, #32]
}
 800422e:	bf00      	nop
 8004230:	bf00      	nop
 8004232:	e7fd      	b.n	8004230 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00b      	beq.n	8004254 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	61fb      	str	r3, [r7, #28]
}
 800424e:	bf00      	nop
 8004250:	bf00      	nop
 8004252:	e7fd      	b.n	8004250 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004254:	f001 f8ee 	bl	8005434 <xTaskGetSchedulerState>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <xQueueSemaphoreTake+0x64>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <xQueueSemaphoreTake+0x68>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <xQueueSemaphoreTake+0x6a>
 8004268:	2300      	movs	r3, #0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10b      	bne.n	8004286 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	61bb      	str	r3, [r7, #24]
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	e7fd      	b.n	8004282 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004286:	f001 fc2f 	bl	8005ae8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800428a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004292:	2b00      	cmp	r3, #0
 8004294:	d024      	beq.n	80042e0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004298:	1e5a      	subs	r2, r3, #1
 800429a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800429e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d104      	bne.n	80042b0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80042a6:	f001 fa71 	bl	800578c <pvTaskIncrementMutexHeldCount>
 80042aa:	4602      	mov	r2, r0
 80042ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00f      	beq.n	80042d8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ba:	3310      	adds	r3, #16
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 ff11 	bl	80050e4 <xTaskRemoveFromEventList>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042c8:	4b54      	ldr	r3, [pc, #336]	@ (800441c <xQueueSemaphoreTake+0x21c>)
 80042ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042d8:	f001 fc38 	bl	8005b4c <vPortExitCritical>
				return pdPASS;
 80042dc:	2301      	movs	r3, #1
 80042de:	e098      	b.n	8004412 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d112      	bne.n	800430c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80042e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00b      	beq.n	8004304 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	617b      	str	r3, [r7, #20]
}
 80042fe:	bf00      	nop
 8004300:	bf00      	nop
 8004302:	e7fd      	b.n	8004300 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004304:	f001 fc22 	bl	8005b4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004308:	2300      	movs	r3, #0
 800430a:	e082      	b.n	8004412 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800430c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004312:	f107 030c 	add.w	r3, r7, #12
 8004316:	4618      	mov	r0, r3
 8004318:	f000 ff48 	bl	80051ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800431c:	2301      	movs	r3, #1
 800431e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004320:	f001 fc14 	bl	8005b4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004324:	f000 fc9e 	bl	8004c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004328:	f001 fbde 	bl	8005ae8 <vPortEnterCritical>
 800432c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004332:	b25b      	sxtb	r3, r3
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004338:	d103      	bne.n	8004342 <xQueueSemaphoreTake+0x142>
 800433a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004344:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004348:	b25b      	sxtb	r3, r3
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434e:	d103      	bne.n	8004358 <xQueueSemaphoreTake+0x158>
 8004350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004358:	f001 fbf8 	bl	8005b4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800435c:	463a      	mov	r2, r7
 800435e:	f107 030c 	add.w	r3, r7, #12
 8004362:	4611      	mov	r1, r2
 8004364:	4618      	mov	r0, r3
 8004366:	f000 ff37 	bl	80051d8 <xTaskCheckForTimeOut>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d132      	bne.n	80043d6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004370:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004372:	f000 f929 	bl	80045c8 <prvIsQueueEmpty>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d026      	beq.n	80043ca <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800437c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d109      	bne.n	8004398 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004384:	f001 fbb0 	bl	8005ae8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4618      	mov	r0, r3
 800438e:	f001 f86f 	bl	8005470 <xTaskPriorityInherit>
 8004392:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004394:	f001 fbda 	bl	8005b4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439a:	3324      	adds	r3, #36	@ 0x24
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	4611      	mov	r1, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fe79 	bl	8005098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043a8:	f000 f8bc 	bl	8004524 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043ac:	f000 fc68 	bl	8004c80 <xTaskResumeAll>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f47f af67 	bne.w	8004286 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80043b8:	4b18      	ldr	r3, [pc, #96]	@ (800441c <xQueueSemaphoreTake+0x21c>)
 80043ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	e75d      	b.n	8004286 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80043ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043cc:	f000 f8aa 	bl	8004524 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043d0:	f000 fc56 	bl	8004c80 <xTaskResumeAll>
 80043d4:	e757      	b.n	8004286 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80043d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043d8:	f000 f8a4 	bl	8004524 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043dc:	f000 fc50 	bl	8004c80 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043e2:	f000 f8f1 	bl	80045c8 <prvIsQueueEmpty>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f43f af4c 	beq.w	8004286 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80043ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00d      	beq.n	8004410 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80043f4:	f001 fb78 	bl	8005ae8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80043f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043fa:	f000 f811 	bl	8004420 <prvGetDisinheritPriorityAfterTimeout>
 80043fe:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004406:	4618      	mov	r0, r3
 8004408:	f001 f930 	bl	800566c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800440c:	f001 fb9e 	bl	8005b4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004410:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004412:	4618      	mov	r0, r3
 8004414:	3738      	adds	r7, #56	@ 0x38
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	e000ed04 	.word	0xe000ed04

08004420 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	2b00      	cmp	r3, #0
 800442e:	d006      	beq.n	800443e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f1c3 0307 	rsb	r3, r3, #7
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	e001      	b.n	8004442 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004442:	68fb      	ldr	r3, [r7, #12]
	}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004464:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10d      	bne.n	800448a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d14d      	bne.n	8004512 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	4618      	mov	r0, r3
 800447c:	f001 f86e 	bl	800555c <xTaskPriorityDisinherit>
 8004480:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	e043      	b.n	8004512 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d119      	bne.n	80044c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6858      	ldr	r0, [r3, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	461a      	mov	r2, r3
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	f003 f807 	bl	80074ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	441a      	add	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d32b      	bcc.n	8004512 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	e026      	b.n	8004512 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68d8      	ldr	r0, [r3, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044cc:	461a      	mov	r2, r3
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	f002 ffed 	bl	80074ae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044dc:	425b      	negs	r3, r3
 80044de:	441a      	add	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d207      	bcs.n	8004500 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f8:	425b      	negs	r3, r3
 80044fa:	441a      	add	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d105      	bne.n	8004512 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	3b01      	subs	r3, #1
 8004510:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800451a:	697b      	ldr	r3, [r7, #20]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800452c:	f001 fadc 	bl	8005ae8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004536:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004538:	e011      	b.n	800455e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453e:	2b00      	cmp	r3, #0
 8004540:	d012      	beq.n	8004568 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3324      	adds	r3, #36	@ 0x24
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fdcc 	bl	80050e4 <xTaskRemoveFromEventList>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004552:	f000 fea5 	bl	80052a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	3b01      	subs	r3, #1
 800455a:	b2db      	uxtb	r3, r3
 800455c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800455e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004562:	2b00      	cmp	r3, #0
 8004564:	dce9      	bgt.n	800453a <prvUnlockQueue+0x16>
 8004566:	e000      	b.n	800456a <prvUnlockQueue+0x46>
					break;
 8004568:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	22ff      	movs	r2, #255	@ 0xff
 800456e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004572:	f001 faeb 	bl	8005b4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004576:	f001 fab7 	bl	8005ae8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004580:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004582:	e011      	b.n	80045a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d012      	beq.n	80045b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3310      	adds	r3, #16
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fda7 	bl	80050e4 <xTaskRemoveFromEventList>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800459c:	f000 fe80 	bl	80052a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045a0:	7bbb      	ldrb	r3, [r7, #14]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	dce9      	bgt.n	8004584 <prvUnlockQueue+0x60>
 80045b0:	e000      	b.n	80045b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	22ff      	movs	r2, #255	@ 0xff
 80045b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80045bc:	f001 fac6 	bl	8005b4c <vPortExitCritical>
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045d0:	f001 fa8a 	bl	8005ae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d102      	bne.n	80045e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045dc:	2301      	movs	r3, #1
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	e001      	b.n	80045e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045e6:	f001 fab1 	bl	8005b4c <vPortExitCritical>

	return xReturn;
 80045ea:	68fb      	ldr	r3, [r7, #12]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045fc:	f001 fa74 	bl	8005ae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004608:	429a      	cmp	r2, r3
 800460a:	d102      	bne.n	8004612 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800460c:	2301      	movs	r3, #1
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e001      	b.n	8004616 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004616:	f001 fa99 	bl	8005b4c <vPortExitCritical>

	return xReturn;
 800461a:	68fb      	ldr	r3, [r7, #12]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e014      	b.n	800465e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004634:	4a0f      	ldr	r2, [pc, #60]	@ (8004674 <vQueueAddToRegistry+0x50>)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10b      	bne.n	8004658 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004640:	490c      	ldr	r1, [pc, #48]	@ (8004674 <vQueueAddToRegistry+0x50>)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800464a:	4a0a      	ldr	r2, [pc, #40]	@ (8004674 <vQueueAddToRegistry+0x50>)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004656:	e006      	b.n	8004666 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3301      	adds	r3, #1
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b07      	cmp	r3, #7
 8004662:	d9e7      	bls.n	8004634 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	200008e0 	.word	0x200008e0

08004678 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08c      	sub	sp, #48	@ 0x30
 800467c:	af04      	add	r7, sp, #16
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4618      	mov	r0, r3
 800468e:	f001 fb0b 	bl	8005ca8 <pvPortMalloc>
 8004692:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00e      	beq.n	80046b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800469a:	20b0      	movs	r0, #176	@ 0xb0
 800469c:	f001 fb04 	bl	8005ca8 <pvPortMalloc>
 80046a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80046ae:	e005      	b.n	80046bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046b0:	6978      	ldr	r0, [r7, #20]
 80046b2:	f001 fbc7 	bl	8005e44 <vPortFree>
 80046b6:	e001      	b.n	80046bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d013      	beq.n	80046ea <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046c2:	88fa      	ldrh	r2, [r7, #6]
 80046c4:	2300      	movs	r3, #0
 80046c6:	9303      	str	r3, [sp, #12]
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	9302      	str	r3, [sp, #8]
 80046cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f80f 	bl	80046fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046de:	69f8      	ldr	r0, [r7, #28]
 80046e0:	f000 f8ba 	bl	8004858 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046e4:	2301      	movs	r3, #1
 80046e6:	61bb      	str	r3, [r7, #24]
 80046e8:	e002      	b.n	80046f0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046ea:	f04f 33ff 	mov.w	r3, #4294967295
 80046ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046f0:	69bb      	ldr	r3, [r7, #24]
	}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800470a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	461a      	mov	r2, r3
 8004714:	21a5      	movs	r1, #165	@ 0xa5
 8004716:	f002 fdf8 	bl	800730a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004724:	3b01      	subs	r3, #1
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f023 0307 	bic.w	r3, r3, #7
 8004732:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	617b      	str	r3, [r7, #20]
}
 8004750:	bf00      	nop
 8004752:	bf00      	nop
 8004754:	e7fd      	b.n	8004752 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8004756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d01f      	beq.n	80047a2 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	e012      	b.n	800478e <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	7819      	ldrb	r1, [r3, #0]
 8004770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	4413      	add	r3, r2
 8004776:	3334      	adds	r3, #52	@ 0x34
 8004778:	460a      	mov	r2, r1
 800477a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4413      	add	r3, r2
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d006      	beq.n	8004796 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	3301      	adds	r3, #1
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	2b0f      	cmp	r3, #15
 8004792:	d9e9      	bls.n	8004768 <prvInitialiseNewTask+0x6c>
 8004794:	e000      	b.n	8004798 <prvInitialiseNewTask+0x9c>
			{
				break;
 8004796:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047a0:	e003      	b.n	80047aa <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ac:	2b06      	cmp	r3, #6
 80047ae:	d901      	bls.n	80047b4 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047b0:	2306      	movs	r3, #6
 80047b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047be:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80047c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c2:	2200      	movs	r2, #0
 80047c4:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c8:	3304      	adds	r3, #4
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff fa8c 	bl	8003ce8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d2:	3318      	adds	r3, #24
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fa87 	bl	8003ce8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e2:	f1c3 0207 	rsb	r2, r3, #7
 80047e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80047f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f2:	2200      	movs	r2, #0
 80047f4:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004800:	2200      	movs	r2, #0
 8004802:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004808:	335c      	adds	r3, #92	@ 0x5c
 800480a:	224c      	movs	r2, #76	@ 0x4c
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f002 fd7b 	bl	800730a <memset>
 8004814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004816:	4a0d      	ldr	r2, [pc, #52]	@ (800484c <prvInitialiseNewTask+0x150>)
 8004818:	661a      	str	r2, [r3, #96]	@ 0x60
 800481a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481c:	4a0c      	ldr	r2, [pc, #48]	@ (8004850 <prvInitialiseNewTask+0x154>)
 800481e:	665a      	str	r2, [r3, #100]	@ 0x64
 8004820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004822:	4a0c      	ldr	r2, [pc, #48]	@ (8004854 <prvInitialiseNewTask+0x158>)
 8004824:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	68f9      	ldr	r1, [r7, #12]
 800482a:	69b8      	ldr	r0, [r7, #24]
 800482c:	f001 f828 	bl	8005880 <pxPortInitialiseStack>
 8004830:	4602      	mov	r2, r0
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800483c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004842:	bf00      	nop
 8004844:	3720      	adds	r7, #32
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20004798 	.word	0x20004798
 8004850:	20004800 	.word	0x20004800
 8004854:	20004868 	.word	0x20004868

08004858 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004860:	f001 f942 	bl	8005ae8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004864:	4b2c      	ldr	r3, [pc, #176]	@ (8004918 <prvAddNewTaskToReadyList+0xc0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3301      	adds	r3, #1
 800486a:	4a2b      	ldr	r2, [pc, #172]	@ (8004918 <prvAddNewTaskToReadyList+0xc0>)
 800486c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800486e:	4b2b      	ldr	r3, [pc, #172]	@ (800491c <prvAddNewTaskToReadyList+0xc4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004876:	4a29      	ldr	r2, [pc, #164]	@ (800491c <prvAddNewTaskToReadyList+0xc4>)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800487c:	4b26      	ldr	r3, [pc, #152]	@ (8004918 <prvAddNewTaskToReadyList+0xc0>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d110      	bne.n	80048a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004884:	f000 fd32 	bl	80052ec <prvInitialiseTaskLists>
 8004888:	e00d      	b.n	80048a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800488a:	4b25      	ldr	r3, [pc, #148]	@ (8004920 <prvAddNewTaskToReadyList+0xc8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004892:	4b22      	ldr	r3, [pc, #136]	@ (800491c <prvAddNewTaskToReadyList+0xc4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489c:	429a      	cmp	r2, r3
 800489e:	d802      	bhi.n	80048a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048a0:	4a1e      	ldr	r2, [pc, #120]	@ (800491c <prvAddNewTaskToReadyList+0xc4>)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004924 <prvAddNewTaskToReadyList+0xcc>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3301      	adds	r3, #1
 80048ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004924 <prvAddNewTaskToReadyList+0xcc>)
 80048ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80048b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004924 <prvAddNewTaskToReadyList+0xcc>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048bc:	2201      	movs	r2, #1
 80048be:	409a      	lsls	r2, r3
 80048c0:	4b19      	ldr	r3, [pc, #100]	@ (8004928 <prvAddNewTaskToReadyList+0xd0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	4a18      	ldr	r2, [pc, #96]	@ (8004928 <prvAddNewTaskToReadyList+0xd0>)
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ce:	4613      	mov	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4a15      	ldr	r2, [pc, #84]	@ (800492c <prvAddNewTaskToReadyList+0xd4>)
 80048d8:	441a      	add	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3304      	adds	r3, #4
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f7ff fa0e 	bl	8003d02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048e6:	f001 f931 	bl	8005b4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004920 <prvAddNewTaskToReadyList+0xc8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00e      	beq.n	8004910 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048f2:	4b0a      	ldr	r3, [pc, #40]	@ (800491c <prvAddNewTaskToReadyList+0xc4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d207      	bcs.n	8004910 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004900:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <prvAddNewTaskToReadyList+0xd8>)
 8004902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000a20 	.word	0x20000a20
 800491c:	20000920 	.word	0x20000920
 8004920:	20000a2c 	.word	0x20000a2c
 8004924:	20000a3c 	.word	0x20000a3c
 8004928:	20000a28 	.word	0x20000a28
 800492c:	20000924 	.word	0x20000924
 8004930:	e000ed04 	.word	0xe000ed04

08004934 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08a      	sub	sp, #40	@ 0x28
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800493e:	2300      	movs	r3, #0
 8004940:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10b      	bne.n	8004960 <vTaskDelayUntil+0x2c>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	617b      	str	r3, [r7, #20]
}
 800495a:	bf00      	nop
 800495c:	bf00      	nop
 800495e:	e7fd      	b.n	800495c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10b      	bne.n	800497e <vTaskDelayUntil+0x4a>
	__asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	613b      	str	r3, [r7, #16]
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	e7fd      	b.n	800497a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800497e:	4b2a      	ldr	r3, [pc, #168]	@ (8004a28 <vTaskDelayUntil+0xf4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <vTaskDelayUntil+0x6a>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	60fb      	str	r3, [r7, #12]
}
 8004998:	bf00      	nop
 800499a:	bf00      	nop
 800499c:	e7fd      	b.n	800499a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800499e:	f000 f961 	bl	8004c64 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80049a2:	4b22      	ldr	r3, [pc, #136]	@ (8004a2c <vTaskDelayUntil+0xf8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	4413      	add	r3, r2
 80049b0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6a3a      	ldr	r2, [r7, #32]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d20b      	bcs.n	80049d4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d211      	bcs.n	80049ea <vTaskDelayUntil+0xb6>
 80049c6:	69fa      	ldr	r2, [r7, #28]
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d90d      	bls.n	80049ea <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80049ce:	2301      	movs	r3, #1
 80049d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d2:	e00a      	b.n	80049ea <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d303      	bcc.n	80049e6 <vTaskDelayUntil+0xb2>
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d901      	bls.n	80049ea <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80049e6:	2301      	movs	r3, #1
 80049e8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80049f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d006      	beq.n	8004a04 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2100      	movs	r1, #0
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fed8 	bl	80057b4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004a04:	f000 f93c 	bl	8004c80 <xTaskResumeAll>
 8004a08:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d107      	bne.n	8004a20 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8004a10:	4b07      	ldr	r3, [pc, #28]	@ (8004a30 <vTaskDelayUntil+0xfc>)
 8004a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a20:	bf00      	nop
 8004a22:	3728      	adds	r7, #40	@ 0x28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000a48 	.word	0x20000a48
 8004a2c:	20000a24 	.word	0x20000a24
 8004a30:	e000ed04 	.word	0xe000ed04

08004a34 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8004a3c:	f001 f854 	bl	8005ae8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <uxTaskPriorityGet+0x18>
 8004a46:	4b07      	ldr	r3, [pc, #28]	@ (8004a64 <uxTaskPriorityGet+0x30>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	e000      	b.n	8004a4e <uxTaskPriorityGet+0x1a>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a54:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8004a56:	f001 f879 	bl	8005b4c <vPortExitCritical>

		return uxReturn;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
	}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	20000920 	.word	0x20000920

08004a68 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b06      	cmp	r3, #6
 8004a7a:	d90b      	bls.n	8004a94 <vTaskPrioritySet+0x2c>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	60fb      	str	r3, [r7, #12]
}
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
 8004a92:	e7fd      	b.n	8004a90 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b06      	cmp	r3, #6
 8004a98:	d901      	bls.n	8004a9e <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a9a:	2306      	movs	r3, #6
 8004a9c:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8004a9e:	f001 f823 	bl	8005ae8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d102      	bne.n	8004aae <vTaskPrioritySet+0x46>
 8004aa8:	4b40      	ldr	r3, [pc, #256]	@ (8004bac <vTaskPrioritySet+0x144>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	e000      	b.n	8004ab0 <vTaskPrioritySet+0x48>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab6:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d06f      	beq.n	8004ba0 <vTaskPrioritySet+0x138>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d90d      	bls.n	8004ae4 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 8004ac8:	4b38      	ldr	r3, [pc, #224]	@ (8004bac <vTaskPrioritySet+0x144>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d00f      	beq.n	8004af2 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8004ad2:	4b36      	ldr	r3, [pc, #216]	@ (8004bac <vTaskPrioritySet+0x144>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d309      	bcc.n	8004af2 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	e006      	b.n	8004af2 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8004ae4:	4b31      	ldr	r3, [pc, #196]	@ (8004bac <vTaskPrioritySet+0x144>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d101      	bne.n	8004af2 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8004aee:	2301      	movs	r3, #1
 8004af0:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af6:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d102      	bne.n	8004b0a <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	651a      	str	r2, [r3, #80]	@ 0x50
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	db04      	blt.n	8004b22 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f1c3 0207 	rsb	r2, r3, #7
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	6959      	ldr	r1, [r3, #20]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4a1f      	ldr	r2, [pc, #124]	@ (8004bb0 <vTaskPrioritySet+0x148>)
 8004b32:	4413      	add	r3, r2
 8004b34:	4299      	cmp	r1, r3
 8004b36:	d128      	bne.n	8004b8a <vTaskPrioritySet+0x122>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff f93d 	bl	8003dbc <uxListRemove>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d109      	bne.n	8004b5c <vTaskPrioritySet+0xf4>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8004b48:	2201      	movs	r2, #1
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	43da      	mvns	r2, r3
 8004b52:	4b18      	ldr	r3, [pc, #96]	@ (8004bb4 <vTaskPrioritySet+0x14c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4013      	ands	r3, r2
 8004b58:	4a16      	ldr	r2, [pc, #88]	@ (8004bb4 <vTaskPrioritySet+0x14c>)
 8004b5a:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b60:	2201      	movs	r2, #1
 8004b62:	409a      	lsls	r2, r3
 8004b64:	4b13      	ldr	r3, [pc, #76]	@ (8004bb4 <vTaskPrioritySet+0x14c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	4a12      	ldr	r2, [pc, #72]	@ (8004bb4 <vTaskPrioritySet+0x14c>)
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4a0d      	ldr	r2, [pc, #52]	@ (8004bb0 <vTaskPrioritySet+0x148>)
 8004b7c:	441a      	add	r2, r3
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	3304      	adds	r3, #4
 8004b82:	4619      	mov	r1, r3
 8004b84:	4610      	mov	r0, r2
 8004b86:	f7ff f8bc 	bl	8003d02 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <vTaskPrioritySet+0x138>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8004b90:	4b09      	ldr	r3, [pc, #36]	@ (8004bb8 <vTaskPrioritySet+0x150>)
 8004b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8004ba0:	f000 ffd4 	bl	8005b4c <vPortExitCritical>
	}
 8004ba4:	bf00      	nop
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	20000920 	.word	0x20000920
 8004bb0:	20000924 	.word	0x20000924
 8004bb4:	20000a28 	.word	0x20000a28
 8004bb8:	e000ed04 	.word	0xe000ed04

08004bbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004bc2:	4b20      	ldr	r3, [pc, #128]	@ (8004c44 <vTaskStartScheduler+0x88>)
 8004bc4:	9301      	str	r3, [sp, #4]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	2280      	movs	r2, #128	@ 0x80
 8004bce:	491e      	ldr	r1, [pc, #120]	@ (8004c48 <vTaskStartScheduler+0x8c>)
 8004bd0:	481e      	ldr	r0, [pc, #120]	@ (8004c4c <vTaskStartScheduler+0x90>)
 8004bd2:	f7ff fd51 	bl	8004678 <xTaskCreate>
 8004bd6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d11d      	bne.n	8004c1a <vTaskStartScheduler+0x5e>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	60bb      	str	r3, [r7, #8]
}
 8004bf0:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004bf2:	4b17      	ldr	r3, [pc, #92]	@ (8004c50 <vTaskStartScheduler+0x94>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	335c      	adds	r3, #92	@ 0x5c
 8004bf8:	4a16      	ldr	r2, [pc, #88]	@ (8004c54 <vTaskStartScheduler+0x98>)
 8004bfa:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004bfc:	4b16      	ldr	r3, [pc, #88]	@ (8004c58 <vTaskStartScheduler+0x9c>)
 8004bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8004c02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c04:	4b15      	ldr	r3, [pc, #84]	@ (8004c5c <vTaskStartScheduler+0xa0>)
 8004c06:	2201      	movs	r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c0a:	4b15      	ldr	r3, [pc, #84]	@ (8004c60 <vTaskStartScheduler+0xa4>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004c10:	f7fb fee8 	bl	80009e4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c14:	f000 fec4 	bl	80059a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c18:	e00f      	b.n	8004c3a <vTaskStartScheduler+0x7e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d10b      	bne.n	8004c3a <vTaskStartScheduler+0x7e>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	607b      	str	r3, [r7, #4]
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	e7fd      	b.n	8004c36 <vTaskStartScheduler+0x7a>
}
 8004c3a:	bf00      	nop
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000a44 	.word	0x20000a44
 8004c48:	08008214 	.word	0x08008214
 8004c4c:	080052b9 	.word	0x080052b9
 8004c50:	20000920 	.word	0x20000920
 8004c54:	2000007c 	.word	0x2000007c
 8004c58:	20000a40 	.word	0x20000a40
 8004c5c:	20000a2c 	.word	0x20000a2c
 8004c60:	20000a24 	.word	0x20000a24

08004c64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c68:	4b04      	ldr	r3, [pc, #16]	@ (8004c7c <vTaskSuspendAll+0x18>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	4a03      	ldr	r2, [pc, #12]	@ (8004c7c <vTaskSuspendAll+0x18>)
 8004c70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c72:	bf00      	nop
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	20000a48 	.word	0x20000a48

08004c80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c8e:	4b42      	ldr	r3, [pc, #264]	@ (8004d98 <xTaskResumeAll+0x118>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10b      	bne.n	8004cae <xTaskResumeAll+0x2e>
	__asm volatile
 8004c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9a:	f383 8811 	msr	BASEPRI, r3
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	603b      	str	r3, [r7, #0]
}
 8004ca8:	bf00      	nop
 8004caa:	bf00      	nop
 8004cac:	e7fd      	b.n	8004caa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cae:	f000 ff1b 	bl	8005ae8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cb2:	4b39      	ldr	r3, [pc, #228]	@ (8004d98 <xTaskResumeAll+0x118>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	4a37      	ldr	r2, [pc, #220]	@ (8004d98 <xTaskResumeAll+0x118>)
 8004cba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cbc:	4b36      	ldr	r3, [pc, #216]	@ (8004d98 <xTaskResumeAll+0x118>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d161      	bne.n	8004d88 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cc4:	4b35      	ldr	r3, [pc, #212]	@ (8004d9c <xTaskResumeAll+0x11c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d05d      	beq.n	8004d88 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ccc:	e02e      	b.n	8004d2c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cce:	4b34      	ldr	r3, [pc, #208]	@ (8004da0 <xTaskResumeAll+0x120>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3318      	adds	r3, #24
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff f86e 	bl	8003dbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff f869 	bl	8003dbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cee:	2201      	movs	r2, #1
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8004da4 <xTaskResumeAll+0x124>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8004da4 <xTaskResumeAll+0x124>)
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4a27      	ldr	r2, [pc, #156]	@ (8004da8 <xTaskResumeAll+0x128>)
 8004d0a:	441a      	add	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	4619      	mov	r1, r3
 8004d12:	4610      	mov	r0, r2
 8004d14:	f7fe fff5 	bl	8003d02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d1c:	4b23      	ldr	r3, [pc, #140]	@ (8004dac <xTaskResumeAll+0x12c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d302      	bcc.n	8004d2c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004d26:	4b22      	ldr	r3, [pc, #136]	@ (8004db0 <xTaskResumeAll+0x130>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8004da0 <xTaskResumeAll+0x120>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1cc      	bne.n	8004cce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d3a:	f000 fb5b 	bl	80053f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004db4 <xTaskResumeAll+0x134>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d010      	beq.n	8004d6c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d4a:	f000 f86d 	bl	8004e28 <xTaskIncrementTick>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004d54:	4b16      	ldr	r3, [pc, #88]	@ (8004db0 <xTaskResumeAll+0x130>)
 8004d56:	2201      	movs	r2, #1
 8004d58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f1      	bne.n	8004d4a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004d66:	4b13      	ldr	r3, [pc, #76]	@ (8004db4 <xTaskResumeAll+0x134>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d6c:	4b10      	ldr	r3, [pc, #64]	@ (8004db0 <xTaskResumeAll+0x130>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d009      	beq.n	8004d88 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d74:	2301      	movs	r3, #1
 8004d76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d78:	4b0f      	ldr	r3, [pc, #60]	@ (8004db8 <xTaskResumeAll+0x138>)
 8004d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d88:	f000 fee0 	bl	8005b4c <vPortExitCritical>

	return xAlreadyYielded;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000a48 	.word	0x20000a48
 8004d9c:	20000a20 	.word	0x20000a20
 8004da0:	200009e0 	.word	0x200009e0
 8004da4:	20000a28 	.word	0x20000a28
 8004da8:	20000924 	.word	0x20000924
 8004dac:	20000920 	.word	0x20000920
 8004db0:	20000a34 	.word	0x20000a34
 8004db4:	20000a30 	.word	0x20000a30
 8004db8:	e000ed04 	.word	0xe000ed04

08004dbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004dc2:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <xTaskGetTickCount+0x1c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004dc8:	687b      	ldr	r3, [r7, #4]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20000a24 	.word	0x20000a24

08004ddc <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <pcTaskGetName+0x14>
 8004dea:	4b0e      	ldr	r3, [pc, #56]	@ (8004e24 <pcTaskGetName+0x48>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	e000      	b.n	8004df2 <pcTaskGetName+0x16>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10b      	bne.n	8004e12 <pcTaskGetName+0x36>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	60bb      	str	r3, [r7, #8]
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	e7fd      	b.n	8004e0e <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3334      	adds	r3, #52	@ 0x34
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20000920 	.word	0x20000920

08004e28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e32:	4b4f      	ldr	r3, [pc, #316]	@ (8004f70 <xTaskIncrementTick+0x148>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f040 808f 	bne.w	8004f5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e3c:	4b4d      	ldr	r3, [pc, #308]	@ (8004f74 <xTaskIncrementTick+0x14c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e44:	4a4b      	ldr	r2, [pc, #300]	@ (8004f74 <xTaskIncrementTick+0x14c>)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d121      	bne.n	8004e94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e50:	4b49      	ldr	r3, [pc, #292]	@ (8004f78 <xTaskIncrementTick+0x150>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00b      	beq.n	8004e72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	603b      	str	r3, [r7, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	bf00      	nop
 8004e70:	e7fd      	b.n	8004e6e <xTaskIncrementTick+0x46>
 8004e72:	4b41      	ldr	r3, [pc, #260]	@ (8004f78 <xTaskIncrementTick+0x150>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	4b40      	ldr	r3, [pc, #256]	@ (8004f7c <xTaskIncrementTick+0x154>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a3e      	ldr	r2, [pc, #248]	@ (8004f78 <xTaskIncrementTick+0x150>)
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	4a3e      	ldr	r2, [pc, #248]	@ (8004f7c <xTaskIncrementTick+0x154>)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	4b3e      	ldr	r3, [pc, #248]	@ (8004f80 <xTaskIncrementTick+0x158>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f80 <xTaskIncrementTick+0x158>)
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	f000 fab0 	bl	80053f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e94:	4b3b      	ldr	r3, [pc, #236]	@ (8004f84 <xTaskIncrementTick+0x15c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d348      	bcc.n	8004f30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e9e:	4b36      	ldr	r3, [pc, #216]	@ (8004f78 <xTaskIncrementTick+0x150>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d104      	bne.n	8004eb2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ea8:	4b36      	ldr	r3, [pc, #216]	@ (8004f84 <xTaskIncrementTick+0x15c>)
 8004eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8004eae:	601a      	str	r2, [r3, #0]
					break;
 8004eb0:	e03e      	b.n	8004f30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eb2:	4b31      	ldr	r3, [pc, #196]	@ (8004f78 <xTaskIncrementTick+0x150>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d203      	bcs.n	8004ed2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004eca:	4a2e      	ldr	r2, [pc, #184]	@ (8004f84 <xTaskIncrementTick+0x15c>)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ed0:	e02e      	b.n	8004f30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fe ff70 	bl	8003dbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d004      	beq.n	8004eee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	3318      	adds	r3, #24
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fe ff67 	bl	8003dbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	409a      	lsls	r2, r3
 8004ef6:	4b24      	ldr	r3, [pc, #144]	@ (8004f88 <xTaskIncrementTick+0x160>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	4a22      	ldr	r2, [pc, #136]	@ (8004f88 <xTaskIncrementTick+0x160>)
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004f8c <xTaskIncrementTick+0x164>)
 8004f0e:	441a      	add	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	3304      	adds	r3, #4
 8004f14:	4619      	mov	r1, r3
 8004f16:	4610      	mov	r0, r2
 8004f18:	f7fe fef3 	bl	8003d02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f20:	4b1b      	ldr	r3, [pc, #108]	@ (8004f90 <xTaskIncrementTick+0x168>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d3b9      	bcc.n	8004e9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f2e:	e7b6      	b.n	8004e9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f30:	4b17      	ldr	r3, [pc, #92]	@ (8004f90 <xTaskIncrementTick+0x168>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f36:	4915      	ldr	r1, [pc, #84]	@ (8004f8c <xTaskIncrementTick+0x164>)
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d901      	bls.n	8004f4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f4c:	4b11      	ldr	r3, [pc, #68]	@ (8004f94 <xTaskIncrementTick+0x16c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004f54:	2301      	movs	r3, #1
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	e004      	b.n	8004f64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f98 <xTaskIncrementTick+0x170>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	4a0d      	ldr	r2, [pc, #52]	@ (8004f98 <xTaskIncrementTick+0x170>)
 8004f62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f64:	697b      	ldr	r3, [r7, #20]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000a48 	.word	0x20000a48
 8004f74:	20000a24 	.word	0x20000a24
 8004f78:	200009d8 	.word	0x200009d8
 8004f7c:	200009dc 	.word	0x200009dc
 8004f80:	20000a38 	.word	0x20000a38
 8004f84:	20000a40 	.word	0x20000a40
 8004f88:	20000a28 	.word	0x20000a28
 8004f8c:	20000924 	.word	0x20000924
 8004f90:	20000920 	.word	0x20000920
 8004f94:	20000a34 	.word	0x20000a34
 8004f98:	20000a30 	.word	0x20000a30

08004f9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fa2:	4b35      	ldr	r3, [pc, #212]	@ (8005078 <vTaskSwitchContext+0xdc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004faa:	4b34      	ldr	r3, [pc, #208]	@ (800507c <vTaskSwitchContext+0xe0>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fb0:	e05e      	b.n	8005070 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 8004fb2:	4b32      	ldr	r3, [pc, #200]	@ (800507c <vTaskSwitchContext+0xe0>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004fb8:	f7fb fd20 	bl	80009fc <getRunTimeCounterValue>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	4a30      	ldr	r2, [pc, #192]	@ (8005080 <vTaskSwitchContext+0xe4>)
 8004fc0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8005080 <vTaskSwitchContext+0xe4>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8005084 <vTaskSwitchContext+0xe8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d909      	bls.n	8004fe2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004fce:	4b2e      	ldr	r3, [pc, #184]	@ (8005088 <vTaskSwitchContext+0xec>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8004fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8005080 <vTaskSwitchContext+0xe4>)
 8004fd6:	6810      	ldr	r0, [r2, #0]
 8004fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8005084 <vTaskSwitchContext+0xe8>)
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	1a82      	subs	r2, r0, r2
 8004fde:	440a      	add	r2, r1
 8004fe0:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004fe2:	4b27      	ldr	r3, [pc, #156]	@ (8005080 <vTaskSwitchContext+0xe4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a27      	ldr	r2, [pc, #156]	@ (8005084 <vTaskSwitchContext+0xe8>)
 8004fe8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fea:	4b28      	ldr	r3, [pc, #160]	@ (800508c <vTaskSwitchContext+0xf0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	fab3 f383 	clz	r3, r3
 8004ff6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004ff8:	7afb      	ldrb	r3, [r7, #11]
 8004ffa:	f1c3 031f 	rsb	r3, r3, #31
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	4923      	ldr	r1, [pc, #140]	@ (8005090 <vTaskSwitchContext+0xf4>)
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10b      	bne.n	800502c <vTaskSwitchContext+0x90>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	607b      	str	r3, [r7, #4]
}
 8005026:	bf00      	nop
 8005028:	bf00      	nop
 800502a:	e7fd      	b.n	8005028 <vTaskSwitchContext+0x8c>
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4a16      	ldr	r2, [pc, #88]	@ (8005090 <vTaskSwitchContext+0xf4>)
 8005038:	4413      	add	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	605a      	str	r2, [r3, #4]
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	3308      	adds	r3, #8
 800504e:	429a      	cmp	r2, r3
 8005050:	d104      	bne.n	800505c <vTaskSwitchContext+0xc0>
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	605a      	str	r2, [r3, #4]
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	4a09      	ldr	r2, [pc, #36]	@ (8005088 <vTaskSwitchContext+0xec>)
 8005064:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005066:	4b08      	ldr	r3, [pc, #32]	@ (8005088 <vTaskSwitchContext+0xec>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	335c      	adds	r3, #92	@ 0x5c
 800506c:	4a09      	ldr	r2, [pc, #36]	@ (8005094 <vTaskSwitchContext+0xf8>)
 800506e:	6013      	str	r3, [r2, #0]
}
 8005070:	bf00      	nop
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000a48 	.word	0x20000a48
 800507c:	20000a34 	.word	0x20000a34
 8005080:	20000a50 	.word	0x20000a50
 8005084:	20000a4c 	.word	0x20000a4c
 8005088:	20000920 	.word	0x20000920
 800508c:	20000a28 	.word	0x20000a28
 8005090:	20000924 	.word	0x20000924
 8005094:	2000007c 	.word	0x2000007c

08005098 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10b      	bne.n	80050c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	60fb      	str	r3, [r7, #12]
}
 80050ba:	bf00      	nop
 80050bc:	bf00      	nop
 80050be:	e7fd      	b.n	80050bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050c0:	4b07      	ldr	r3, [pc, #28]	@ (80050e0 <vTaskPlaceOnEventList+0x48>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3318      	adds	r3, #24
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7fe fe3e 	bl	8003d4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050ce:	2101      	movs	r1, #1
 80050d0:	6838      	ldr	r0, [r7, #0]
 80050d2:	f000 fb6f 	bl	80057b4 <prvAddCurrentTaskToDelayedList>
}
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000920 	.word	0x20000920

080050e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	60fb      	str	r3, [r7, #12]
}
 800510c:	bf00      	nop
 800510e:	bf00      	nop
 8005110:	e7fd      	b.n	800510e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	3318      	adds	r3, #24
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe fe50 	bl	8003dbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800511c:	4b1d      	ldr	r3, [pc, #116]	@ (8005194 <xTaskRemoveFromEventList+0xb0>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d11c      	bne.n	800515e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	3304      	adds	r3, #4
 8005128:	4618      	mov	r0, r3
 800512a:	f7fe fe47 	bl	8003dbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005132:	2201      	movs	r2, #1
 8005134:	409a      	lsls	r2, r3
 8005136:	4b18      	ldr	r3, [pc, #96]	@ (8005198 <xTaskRemoveFromEventList+0xb4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4313      	orrs	r3, r2
 800513c:	4a16      	ldr	r2, [pc, #88]	@ (8005198 <xTaskRemoveFromEventList+0xb4>)
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4a13      	ldr	r2, [pc, #76]	@ (800519c <xTaskRemoveFromEventList+0xb8>)
 800514e:	441a      	add	r2, r3
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	3304      	adds	r3, #4
 8005154:	4619      	mov	r1, r3
 8005156:	4610      	mov	r0, r2
 8005158:	f7fe fdd3 	bl	8003d02 <vListInsertEnd>
 800515c:	e005      	b.n	800516a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	3318      	adds	r3, #24
 8005162:	4619      	mov	r1, r3
 8005164:	480e      	ldr	r0, [pc, #56]	@ (80051a0 <xTaskRemoveFromEventList+0xbc>)
 8005166:	f7fe fdcc 	bl	8003d02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800516e:	4b0d      	ldr	r3, [pc, #52]	@ (80051a4 <xTaskRemoveFromEventList+0xc0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005174:	429a      	cmp	r2, r3
 8005176:	d905      	bls.n	8005184 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005178:	2301      	movs	r3, #1
 800517a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800517c:	4b0a      	ldr	r3, [pc, #40]	@ (80051a8 <xTaskRemoveFromEventList+0xc4>)
 800517e:	2201      	movs	r2, #1
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	e001      	b.n	8005188 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005188:	697b      	ldr	r3, [r7, #20]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000a48 	.word	0x20000a48
 8005198:	20000a28 	.word	0x20000a28
 800519c:	20000924 	.word	0x20000924
 80051a0:	200009e0 	.word	0x200009e0
 80051a4:	20000920 	.word	0x20000920
 80051a8:	20000a34 	.word	0x20000a34

080051ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051b4:	4b06      	ldr	r3, [pc, #24]	@ (80051d0 <vTaskInternalSetTimeOutState+0x24>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051bc:	4b05      	ldr	r3, [pc, #20]	@ (80051d4 <vTaskInternalSetTimeOutState+0x28>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	605a      	str	r2, [r3, #4]
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	20000a38 	.word	0x20000a38
 80051d4:	20000a24 	.word	0x20000a24

080051d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10b      	bne.n	8005200 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	613b      	str	r3, [r7, #16]
}
 80051fa:	bf00      	nop
 80051fc:	bf00      	nop
 80051fe:	e7fd      	b.n	80051fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10b      	bne.n	800521e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	60fb      	str	r3, [r7, #12]
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	e7fd      	b.n	800521a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800521e:	f000 fc63 	bl	8005ae8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005222:	4b1d      	ldr	r3, [pc, #116]	@ (8005298 <xTaskCheckForTimeOut+0xc0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523a:	d102      	bne.n	8005242 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800523c:	2300      	movs	r3, #0
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	e023      	b.n	800528a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	4b15      	ldr	r3, [pc, #84]	@ (800529c <xTaskCheckForTimeOut+0xc4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d007      	beq.n	800525e <xTaskCheckForTimeOut+0x86>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	429a      	cmp	r2, r3
 8005256:	d302      	bcc.n	800525e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005258:	2301      	movs	r3, #1
 800525a:	61fb      	str	r3, [r7, #28]
 800525c:	e015      	b.n	800528a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	429a      	cmp	r2, r3
 8005266:	d20b      	bcs.n	8005280 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	1ad2      	subs	r2, r2, r3
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff ff99 	bl	80051ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
 800527e:	e004      	b.n	800528a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005286:	2301      	movs	r3, #1
 8005288:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800528a:	f000 fc5f 	bl	8005b4c <vPortExitCritical>

	return xReturn;
 800528e:	69fb      	ldr	r3, [r7, #28]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20000a24 	.word	0x20000a24
 800529c:	20000a38 	.word	0x20000a38

080052a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052a4:	4b03      	ldr	r3, [pc, #12]	@ (80052b4 <vTaskMissedYield+0x14>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	601a      	str	r2, [r3, #0]
}
 80052aa:	bf00      	nop
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	20000a34 	.word	0x20000a34

080052b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052c0:	f000 f854 	bl	800536c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052c4:	4b07      	ldr	r3, [pc, #28]	@ (80052e4 <prvIdleTask+0x2c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d907      	bls.n	80052dc <prvIdleTask+0x24>
			{
				taskYIELD();
 80052cc:	4b06      	ldr	r3, [pc, #24]	@ (80052e8 <prvIdleTask+0x30>)
 80052ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80052dc:	f7fb fb9a 	bl	8000a14 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80052e0:	e7ee      	b.n	80052c0 <prvIdleTask+0x8>
 80052e2:	bf00      	nop
 80052e4:	20000924 	.word	0x20000924
 80052e8:	e000ed04 	.word	0xe000ed04

080052ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052f2:	2300      	movs	r3, #0
 80052f4:	607b      	str	r3, [r7, #4]
 80052f6:	e00c      	b.n	8005312 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4a12      	ldr	r2, [pc, #72]	@ (800534c <prvInitialiseTaskLists+0x60>)
 8005304:	4413      	add	r3, r2
 8005306:	4618      	mov	r0, r3
 8005308:	f7fe fcce 	bl	8003ca8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3301      	adds	r3, #1
 8005310:	607b      	str	r3, [r7, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b06      	cmp	r3, #6
 8005316:	d9ef      	bls.n	80052f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005318:	480d      	ldr	r0, [pc, #52]	@ (8005350 <prvInitialiseTaskLists+0x64>)
 800531a:	f7fe fcc5 	bl	8003ca8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800531e:	480d      	ldr	r0, [pc, #52]	@ (8005354 <prvInitialiseTaskLists+0x68>)
 8005320:	f7fe fcc2 	bl	8003ca8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005324:	480c      	ldr	r0, [pc, #48]	@ (8005358 <prvInitialiseTaskLists+0x6c>)
 8005326:	f7fe fcbf 	bl	8003ca8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800532a:	480c      	ldr	r0, [pc, #48]	@ (800535c <prvInitialiseTaskLists+0x70>)
 800532c:	f7fe fcbc 	bl	8003ca8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005330:	480b      	ldr	r0, [pc, #44]	@ (8005360 <prvInitialiseTaskLists+0x74>)
 8005332:	f7fe fcb9 	bl	8003ca8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005336:	4b0b      	ldr	r3, [pc, #44]	@ (8005364 <prvInitialiseTaskLists+0x78>)
 8005338:	4a05      	ldr	r2, [pc, #20]	@ (8005350 <prvInitialiseTaskLists+0x64>)
 800533a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800533c:	4b0a      	ldr	r3, [pc, #40]	@ (8005368 <prvInitialiseTaskLists+0x7c>)
 800533e:	4a05      	ldr	r2, [pc, #20]	@ (8005354 <prvInitialiseTaskLists+0x68>)
 8005340:	601a      	str	r2, [r3, #0]
}
 8005342:	bf00      	nop
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20000924 	.word	0x20000924
 8005350:	200009b0 	.word	0x200009b0
 8005354:	200009c4 	.word	0x200009c4
 8005358:	200009e0 	.word	0x200009e0
 800535c:	200009f4 	.word	0x200009f4
 8005360:	20000a0c 	.word	0x20000a0c
 8005364:	200009d8 	.word	0x200009d8
 8005368:	200009dc 	.word	0x200009dc

0800536c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005372:	e019      	b.n	80053a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005374:	f000 fbb8 	bl	8005ae8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005378:	4b10      	ldr	r3, [pc, #64]	@ (80053bc <prvCheckTasksWaitingTermination+0x50>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3304      	adds	r3, #4
 8005384:	4618      	mov	r0, r3
 8005386:	f7fe fd19 	bl	8003dbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800538a:	4b0d      	ldr	r3, [pc, #52]	@ (80053c0 <prvCheckTasksWaitingTermination+0x54>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3b01      	subs	r3, #1
 8005390:	4a0b      	ldr	r2, [pc, #44]	@ (80053c0 <prvCheckTasksWaitingTermination+0x54>)
 8005392:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005394:	4b0b      	ldr	r3, [pc, #44]	@ (80053c4 <prvCheckTasksWaitingTermination+0x58>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3b01      	subs	r3, #1
 800539a:	4a0a      	ldr	r2, [pc, #40]	@ (80053c4 <prvCheckTasksWaitingTermination+0x58>)
 800539c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800539e:	f000 fbd5 	bl	8005b4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f810 	bl	80053c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053a8:	4b06      	ldr	r3, [pc, #24]	@ (80053c4 <prvCheckTasksWaitingTermination+0x58>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e1      	bne.n	8005374 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	200009f4 	.word	0x200009f4
 80053c0:	20000a20 	.word	0x20000a20
 80053c4:	20000a08 	.word	0x20000a08

080053c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	335c      	adds	r3, #92	@ 0x5c
 80053d4:	4618      	mov	r0, r3
 80053d6:	f001 ffb1 	bl	800733c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fd30 	bl	8005e44 <vPortFree>
			vPortFree( pxTCB );
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fd2d 	bl	8005e44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053ea:	bf00      	nop
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053fa:	4b0c      	ldr	r3, [pc, #48]	@ (800542c <prvResetNextTaskUnblockTime+0x38>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005404:	4b0a      	ldr	r3, [pc, #40]	@ (8005430 <prvResetNextTaskUnblockTime+0x3c>)
 8005406:	f04f 32ff 	mov.w	r2, #4294967295
 800540a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800540c:	e008      	b.n	8005420 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800540e:	4b07      	ldr	r3, [pc, #28]	@ (800542c <prvResetNextTaskUnblockTime+0x38>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	4a04      	ldr	r2, [pc, #16]	@ (8005430 <prvResetNextTaskUnblockTime+0x3c>)
 800541e:	6013      	str	r3, [r2, #0]
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	200009d8 	.word	0x200009d8
 8005430:	20000a40 	.word	0x20000a40

08005434 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800543a:	4b0b      	ldr	r3, [pc, #44]	@ (8005468 <xTaskGetSchedulerState+0x34>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d102      	bne.n	8005448 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005442:	2301      	movs	r3, #1
 8005444:	607b      	str	r3, [r7, #4]
 8005446:	e008      	b.n	800545a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005448:	4b08      	ldr	r3, [pc, #32]	@ (800546c <xTaskGetSchedulerState+0x38>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005450:	2302      	movs	r3, #2
 8005452:	607b      	str	r3, [r7, #4]
 8005454:	e001      	b.n	800545a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005456:	2300      	movs	r3, #0
 8005458:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800545a:	687b      	ldr	r3, [r7, #4]
	}
 800545c:	4618      	mov	r0, r3
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	20000a2c 	.word	0x20000a2c
 800546c:	20000a48 	.word	0x20000a48

08005470 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d05e      	beq.n	8005544 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800548a:	4b31      	ldr	r3, [pc, #196]	@ (8005550 <xTaskPriorityInherit+0xe0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005490:	429a      	cmp	r2, r3
 8005492:	d24e      	bcs.n	8005532 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	db06      	blt.n	80054aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800549c:	4b2c      	ldr	r3, [pc, #176]	@ (8005550 <xTaskPriorityInherit+0xe0>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a2:	f1c3 0207 	rsb	r2, r3, #7
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	6959      	ldr	r1, [r3, #20]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4a26      	ldr	r2, [pc, #152]	@ (8005554 <xTaskPriorityInherit+0xe4>)
 80054bc:	4413      	add	r3, r2
 80054be:	4299      	cmp	r1, r3
 80054c0:	d12f      	bne.n	8005522 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	3304      	adds	r3, #4
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fe fc78 	bl	8003dbc <uxListRemove>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10a      	bne.n	80054e8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d6:	2201      	movs	r2, #1
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	43da      	mvns	r2, r3
 80054de:	4b1e      	ldr	r3, [pc, #120]	@ (8005558 <xTaskPriorityInherit+0xe8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4013      	ands	r3, r2
 80054e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005558 <xTaskPriorityInherit+0xe8>)
 80054e6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80054e8:	4b19      	ldr	r3, [pc, #100]	@ (8005550 <xTaskPriorityInherit+0xe0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f6:	2201      	movs	r2, #1
 80054f8:	409a      	lsls	r2, r3
 80054fa:	4b17      	ldr	r3, [pc, #92]	@ (8005558 <xTaskPriorityInherit+0xe8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4313      	orrs	r3, r2
 8005500:	4a15      	ldr	r2, [pc, #84]	@ (8005558 <xTaskPriorityInherit+0xe8>)
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4a10      	ldr	r2, [pc, #64]	@ (8005554 <xTaskPriorityInherit+0xe4>)
 8005512:	441a      	add	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	3304      	adds	r3, #4
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	f7fe fbf1 	bl	8003d02 <vListInsertEnd>
 8005520:	e004      	b.n	800552c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005522:	4b0b      	ldr	r3, [pc, #44]	@ (8005550 <xTaskPriorityInherit+0xe0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800552c:	2301      	movs	r3, #1
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	e008      	b.n	8005544 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005536:	4b06      	ldr	r3, [pc, #24]	@ (8005550 <xTaskPriorityInherit+0xe0>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	429a      	cmp	r2, r3
 800553e:	d201      	bcs.n	8005544 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005540:	2301      	movs	r3, #1
 8005542:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005544:	68fb      	ldr	r3, [r7, #12]
	}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20000920 	.word	0x20000920
 8005554:	20000924 	.word	0x20000924
 8005558:	20000a28 	.word	0x20000a28

0800555c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d070      	beq.n	8005654 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005572:	4b3b      	ldr	r3, [pc, #236]	@ (8005660 <xTaskPriorityDisinherit+0x104>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	429a      	cmp	r2, r3
 800557a:	d00b      	beq.n	8005594 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	60fb      	str	r3, [r7, #12]
}
 800558e:	bf00      	nop
 8005590:	bf00      	nop
 8005592:	e7fd      	b.n	8005590 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10b      	bne.n	80055b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	60bb      	str	r3, [r7, #8]
}
 80055ae:	bf00      	nop
 80055b0:	bf00      	nop
 80055b2:	e7fd      	b.n	80055b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b8:	1e5a      	subs	r2, r3, #1
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d044      	beq.n	8005654 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d140      	bne.n	8005654 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	3304      	adds	r3, #4
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe fbf0 	bl	8003dbc <uxListRemove>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d115      	bne.n	800560e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e6:	491f      	ldr	r1, [pc, #124]	@ (8005664 <xTaskPriorityDisinherit+0x108>)
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10a      	bne.n	800560e <xTaskPriorityDisinherit+0xb2>
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fc:	2201      	movs	r2, #1
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	43da      	mvns	r2, r3
 8005604:	4b18      	ldr	r3, [pc, #96]	@ (8005668 <xTaskPriorityDisinherit+0x10c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4013      	ands	r3, r2
 800560a:	4a17      	ldr	r2, [pc, #92]	@ (8005668 <xTaskPriorityDisinherit+0x10c>)
 800560c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561a:	f1c3 0207 	rsb	r2, r3, #7
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005626:	2201      	movs	r2, #1
 8005628:	409a      	lsls	r2, r3
 800562a:	4b0f      	ldr	r3, [pc, #60]	@ (8005668 <xTaskPriorityDisinherit+0x10c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4313      	orrs	r3, r2
 8005630:	4a0d      	ldr	r2, [pc, #52]	@ (8005668 <xTaskPriorityDisinherit+0x10c>)
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4a08      	ldr	r2, [pc, #32]	@ (8005664 <xTaskPriorityDisinherit+0x108>)
 8005642:	441a      	add	r2, r3
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	3304      	adds	r3, #4
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f7fe fb59 	bl	8003d02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005650:	2301      	movs	r3, #1
 8005652:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005654:	697b      	ldr	r3, [r7, #20]
	}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000920 	.word	0x20000920
 8005664:	20000924 	.word	0x20000924
 8005668:	20000a28 	.word	0x20000a28

0800566c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800567a:	2301      	movs	r3, #1
 800567c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d079      	beq.n	8005778 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10b      	bne.n	80056a4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	60fb      	str	r3, [r7, #12]
}
 800569e:	bf00      	nop
 80056a0:	bf00      	nop
 80056a2:	e7fd      	b.n	80056a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d902      	bls.n	80056b4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	61fb      	str	r3, [r7, #28]
 80056b2:	e002      	b.n	80056ba <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056b8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d059      	beq.n	8005778 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d154      	bne.n	8005778 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80056ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005780 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d10b      	bne.n	80056f0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	60bb      	str	r3, [r7, #8]
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	e7fd      	b.n	80056ec <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	2b00      	cmp	r3, #0
 8005702:	db04      	blt.n	800570e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	f1c3 0207 	rsb	r2, r3, #7
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	6959      	ldr	r1, [r3, #20]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4a19      	ldr	r2, [pc, #100]	@ (8005784 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800571e:	4413      	add	r3, r2
 8005720:	4299      	cmp	r1, r3
 8005722:	d129      	bne.n	8005778 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	3304      	adds	r3, #4
 8005728:	4618      	mov	r0, r3
 800572a:	f7fe fb47 	bl	8003dbc <uxListRemove>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005738:	2201      	movs	r2, #1
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	43da      	mvns	r2, r3
 8005740:	4b11      	ldr	r3, [pc, #68]	@ (8005788 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4013      	ands	r3, r2
 8005746:	4a10      	ldr	r2, [pc, #64]	@ (8005788 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005748:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574e:	2201      	movs	r2, #1
 8005750:	409a      	lsls	r2, r3
 8005752:	4b0d      	ldr	r3, [pc, #52]	@ (8005788 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4313      	orrs	r3, r2
 8005758:	4a0b      	ldr	r2, [pc, #44]	@ (8005788 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005760:	4613      	mov	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4a06      	ldr	r2, [pc, #24]	@ (8005784 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800576a:	441a      	add	r2, r3
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	3304      	adds	r3, #4
 8005770:	4619      	mov	r1, r3
 8005772:	4610      	mov	r0, r2
 8005774:	f7fe fac5 	bl	8003d02 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005778:	bf00      	nop
 800577a:	3720      	adds	r7, #32
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	20000920 	.word	0x20000920
 8005784:	20000924 	.word	0x20000924
 8005788:	20000a28 	.word	0x20000a28

0800578c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005790:	4b07      	ldr	r3, [pc, #28]	@ (80057b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d004      	beq.n	80057a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005798:	4b05      	ldr	r3, [pc, #20]	@ (80057b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800579e:	3201      	adds	r2, #1
 80057a0:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 80057a2:	4b03      	ldr	r3, [pc, #12]	@ (80057b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80057a4:	681b      	ldr	r3, [r3, #0]
	}
 80057a6:	4618      	mov	r0, r3
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	20000920 	.word	0x20000920

080057b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057be:	4b29      	ldr	r3, [pc, #164]	@ (8005864 <prvAddCurrentTaskToDelayedList+0xb0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057c4:	4b28      	ldr	r3, [pc, #160]	@ (8005868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3304      	adds	r3, #4
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fe faf6 	bl	8003dbc <uxListRemove>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10b      	bne.n	80057ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80057d6:	4b24      	ldr	r3, [pc, #144]	@ (8005868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057dc:	2201      	movs	r2, #1
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	43da      	mvns	r2, r3
 80057e4:	4b21      	ldr	r3, [pc, #132]	@ (800586c <prvAddCurrentTaskToDelayedList+0xb8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4013      	ands	r3, r2
 80057ea:	4a20      	ldr	r2, [pc, #128]	@ (800586c <prvAddCurrentTaskToDelayedList+0xb8>)
 80057ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d10a      	bne.n	800580c <prvAddCurrentTaskToDelayedList+0x58>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d007      	beq.n	800580c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3304      	adds	r3, #4
 8005802:	4619      	mov	r1, r3
 8005804:	481a      	ldr	r0, [pc, #104]	@ (8005870 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005806:	f7fe fa7c 	bl	8003d02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800580a:	e026      	b.n	800585a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4413      	add	r3, r2
 8005812:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005814:	4b14      	ldr	r3, [pc, #80]	@ (8005868 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	429a      	cmp	r2, r3
 8005822:	d209      	bcs.n	8005838 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005824:	4b13      	ldr	r3, [pc, #76]	@ (8005874 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	4b0f      	ldr	r3, [pc, #60]	@ (8005868 <prvAddCurrentTaskToDelayedList+0xb4>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3304      	adds	r3, #4
 800582e:	4619      	mov	r1, r3
 8005830:	4610      	mov	r0, r2
 8005832:	f7fe fa8a 	bl	8003d4a <vListInsert>
}
 8005836:	e010      	b.n	800585a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005838:	4b0f      	ldr	r3, [pc, #60]	@ (8005878 <prvAddCurrentTaskToDelayedList+0xc4>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <prvAddCurrentTaskToDelayedList+0xb4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3304      	adds	r3, #4
 8005842:	4619      	mov	r1, r3
 8005844:	4610      	mov	r0, r2
 8005846:	f7fe fa80 	bl	8003d4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800584a:	4b0c      	ldr	r3, [pc, #48]	@ (800587c <prvAddCurrentTaskToDelayedList+0xc8>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	429a      	cmp	r2, r3
 8005852:	d202      	bcs.n	800585a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005854:	4a09      	ldr	r2, [pc, #36]	@ (800587c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	6013      	str	r3, [r2, #0]
}
 800585a:	bf00      	nop
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20000a24 	.word	0x20000a24
 8005868:	20000920 	.word	0x20000920
 800586c:	20000a28 	.word	0x20000a28
 8005870:	20000a0c 	.word	0x20000a0c
 8005874:	200009dc 	.word	0x200009dc
 8005878:	200009d8 	.word	0x200009d8
 800587c:	20000a40 	.word	0x20000a40

08005880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3b04      	subs	r3, #4
 8005890:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3b04      	subs	r3, #4
 800589e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f023 0201 	bic.w	r2, r3, #1
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3b04      	subs	r3, #4
 80058ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058b0:	4a0c      	ldr	r2, [pc, #48]	@ (80058e4 <pxPortInitialiseStack+0x64>)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3b14      	subs	r3, #20
 80058ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3b04      	subs	r3, #4
 80058c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f06f 0202 	mvn.w	r2, #2
 80058ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	3b20      	subs	r3, #32
 80058d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058d6:	68fb      	ldr	r3, [r7, #12]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	080058e9 	.word	0x080058e9

080058e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80058ee:	2300      	movs	r3, #0
 80058f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058f2:	4b13      	ldr	r3, [pc, #76]	@ (8005940 <prvTaskExitError+0x58>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fa:	d00b      	beq.n	8005914 <prvTaskExitError+0x2c>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60fb      	str	r3, [r7, #12]
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	e7fd      	b.n	8005910 <prvTaskExitError+0x28>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	60bb      	str	r3, [r7, #8]
}
 8005926:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005928:	bf00      	nop
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0fc      	beq.n	800592a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005930:	bf00      	nop
 8005932:	bf00      	nop
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	2000000c 	.word	0x2000000c
	...

08005950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005950:	4b07      	ldr	r3, [pc, #28]	@ (8005970 <pxCurrentTCBConst2>)
 8005952:	6819      	ldr	r1, [r3, #0]
 8005954:	6808      	ldr	r0, [r1, #0]
 8005956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595a:	f380 8809 	msr	PSP, r0
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f04f 0000 	mov.w	r0, #0
 8005966:	f380 8811 	msr	BASEPRI, r0
 800596a:	4770      	bx	lr
 800596c:	f3af 8000 	nop.w

08005970 <pxCurrentTCBConst2>:
 8005970:	20000920 	.word	0x20000920
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop

08005978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005978:	4808      	ldr	r0, [pc, #32]	@ (800599c <prvPortStartFirstTask+0x24>)
 800597a:	6800      	ldr	r0, [r0, #0]
 800597c:	6800      	ldr	r0, [r0, #0]
 800597e:	f380 8808 	msr	MSP, r0
 8005982:	f04f 0000 	mov.w	r0, #0
 8005986:	f380 8814 	msr	CONTROL, r0
 800598a:	b662      	cpsie	i
 800598c:	b661      	cpsie	f
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	df00      	svc	0
 8005998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800599a:	bf00      	nop
 800599c:	e000ed08 	.word	0xe000ed08

080059a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059a6:	4b47      	ldr	r3, [pc, #284]	@ (8005ac4 <xPortStartScheduler+0x124>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a47      	ldr	r2, [pc, #284]	@ (8005ac8 <xPortStartScheduler+0x128>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10b      	bne.n	80059c8 <xPortStartScheduler+0x28>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	613b      	str	r3, [r7, #16]
}
 80059c2:	bf00      	nop
 80059c4:	bf00      	nop
 80059c6:	e7fd      	b.n	80059c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059c8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ac4 <xPortStartScheduler+0x124>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a3f      	ldr	r2, [pc, #252]	@ (8005acc <xPortStartScheduler+0x12c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d10b      	bne.n	80059ea <xPortStartScheduler+0x4a>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	60fb      	str	r3, [r7, #12]
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	e7fd      	b.n	80059e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059ea:	4b39      	ldr	r3, [pc, #228]	@ (8005ad0 <xPortStartScheduler+0x130>)
 80059ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	22ff      	movs	r2, #255	@ 0xff
 80059fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	4b31      	ldr	r3, [pc, #196]	@ (8005ad4 <xPortStartScheduler+0x134>)
 8005a10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a12:	4b31      	ldr	r3, [pc, #196]	@ (8005ad8 <xPortStartScheduler+0x138>)
 8005a14:	2207      	movs	r2, #7
 8005a16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a18:	e009      	b.n	8005a2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005ad8 <xPortStartScheduler+0x138>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	4a2d      	ldr	r2, [pc, #180]	@ (8005ad8 <xPortStartScheduler+0x138>)
 8005a22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a24:	78fb      	ldrb	r3, [r7, #3]
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a2e:	78fb      	ldrb	r3, [r7, #3]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a36:	2b80      	cmp	r3, #128	@ 0x80
 8005a38:	d0ef      	beq.n	8005a1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a3a:	4b27      	ldr	r3, [pc, #156]	@ (8005ad8 <xPortStartScheduler+0x138>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f1c3 0307 	rsb	r3, r3, #7
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d00b      	beq.n	8005a5e <xPortStartScheduler+0xbe>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	60bb      	str	r3, [r7, #8]
}
 8005a58:	bf00      	nop
 8005a5a:	bf00      	nop
 8005a5c:	e7fd      	b.n	8005a5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad8 <xPortStartScheduler+0x138>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	4a1c      	ldr	r2, [pc, #112]	@ (8005ad8 <xPortStartScheduler+0x138>)
 8005a66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a68:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad8 <xPortStartScheduler+0x138>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a70:	4a19      	ldr	r2, [pc, #100]	@ (8005ad8 <xPortStartScheduler+0x138>)
 8005a72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a7c:	4b17      	ldr	r3, [pc, #92]	@ (8005adc <xPortStartScheduler+0x13c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a16      	ldr	r2, [pc, #88]	@ (8005adc <xPortStartScheduler+0x13c>)
 8005a82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a88:	4b14      	ldr	r3, [pc, #80]	@ (8005adc <xPortStartScheduler+0x13c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a13      	ldr	r2, [pc, #76]	@ (8005adc <xPortStartScheduler+0x13c>)
 8005a8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005a92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a94:	f000 f8da 	bl	8005c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a98:	4b11      	ldr	r3, [pc, #68]	@ (8005ae0 <xPortStartScheduler+0x140>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a9e:	f000 f8f9 	bl	8005c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005aa2:	4b10      	ldr	r3, [pc, #64]	@ (8005ae4 <xPortStartScheduler+0x144>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8005ae4 <xPortStartScheduler+0x144>)
 8005aa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005aac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005aae:	f7ff ff63 	bl	8005978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ab2:	f7ff fa73 	bl	8004f9c <vTaskSwitchContext>
	prvTaskExitError();
 8005ab6:	f7ff ff17 	bl	80058e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	e000ed00 	.word	0xe000ed00
 8005ac8:	410fc271 	.word	0x410fc271
 8005acc:	410fc270 	.word	0x410fc270
 8005ad0:	e000e400 	.word	0xe000e400
 8005ad4:	20000a54 	.word	0x20000a54
 8005ad8:	20000a58 	.word	0x20000a58
 8005adc:	e000ed20 	.word	0xe000ed20
 8005ae0:	2000000c 	.word	0x2000000c
 8005ae4:	e000ef34 	.word	0xe000ef34

08005ae8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	607b      	str	r3, [r7, #4]
}
 8005b00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b02:	4b10      	ldr	r3, [pc, #64]	@ (8005b44 <vPortEnterCritical+0x5c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3301      	adds	r3, #1
 8005b08:	4a0e      	ldr	r2, [pc, #56]	@ (8005b44 <vPortEnterCritical+0x5c>)
 8005b0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b44 <vPortEnterCritical+0x5c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d110      	bne.n	8005b36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b14:	4b0c      	ldr	r3, [pc, #48]	@ (8005b48 <vPortEnterCritical+0x60>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00b      	beq.n	8005b36 <vPortEnterCritical+0x4e>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	603b      	str	r3, [r7, #0]
}
 8005b30:	bf00      	nop
 8005b32:	bf00      	nop
 8005b34:	e7fd      	b.n	8005b32 <vPortEnterCritical+0x4a>
	}
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	2000000c 	.word	0x2000000c
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b52:	4b12      	ldr	r3, [pc, #72]	@ (8005b9c <vPortExitCritical+0x50>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10b      	bne.n	8005b72 <vPortExitCritical+0x26>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	607b      	str	r3, [r7, #4]
}
 8005b6c:	bf00      	nop
 8005b6e:	bf00      	nop
 8005b70:	e7fd      	b.n	8005b6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b72:	4b0a      	ldr	r3, [pc, #40]	@ (8005b9c <vPortExitCritical+0x50>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	4a08      	ldr	r2, [pc, #32]	@ (8005b9c <vPortExitCritical+0x50>)
 8005b7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b7c:	4b07      	ldr	r3, [pc, #28]	@ (8005b9c <vPortExitCritical+0x50>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d105      	bne.n	8005b90 <vPortExitCritical+0x44>
 8005b84:	2300      	movs	r3, #0
 8005b86:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	2000000c 	.word	0x2000000c

08005ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ba0:	f3ef 8009 	mrs	r0, PSP
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	4b15      	ldr	r3, [pc, #84]	@ (8005c00 <pxCurrentTCBConst>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	f01e 0f10 	tst.w	lr, #16
 8005bb0:	bf08      	it	eq
 8005bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bba:	6010      	str	r0, [r2, #0]
 8005bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005bc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005bc4:	f380 8811 	msr	BASEPRI, r0
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f7ff f9e4 	bl	8004f9c <vTaskSwitchContext>
 8005bd4:	f04f 0000 	mov.w	r0, #0
 8005bd8:	f380 8811 	msr	BASEPRI, r0
 8005bdc:	bc09      	pop	{r0, r3}
 8005bde:	6819      	ldr	r1, [r3, #0]
 8005be0:	6808      	ldr	r0, [r1, #0]
 8005be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be6:	f01e 0f10 	tst.w	lr, #16
 8005bea:	bf08      	it	eq
 8005bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005bf0:	f380 8809 	msr	PSP, r0
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	f3af 8000 	nop.w

08005c00 <pxCurrentTCBConst>:
 8005c00:	20000920 	.word	0x20000920
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop

08005c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	607b      	str	r3, [r7, #4]
}
 8005c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c22:	f7ff f901 	bl	8004e28 <xTaskIncrementTick>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c2c:	4b06      	ldr	r3, [pc, #24]	@ (8005c48 <SysTick_Handler+0x40>)
 8005c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	2300      	movs	r3, #0
 8005c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	f383 8811 	msr	BASEPRI, r3
}
 8005c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c40:	bf00      	nop
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	e000ed04 	.word	0xe000ed04

08005c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c50:	4b0b      	ldr	r3, [pc, #44]	@ (8005c80 <vPortSetupTimerInterrupt+0x34>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c56:	4b0b      	ldr	r3, [pc, #44]	@ (8005c84 <vPortSetupTimerInterrupt+0x38>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c88 <vPortSetupTimerInterrupt+0x3c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a0a      	ldr	r2, [pc, #40]	@ (8005c8c <vPortSetupTimerInterrupt+0x40>)
 8005c62:	fba2 2303 	umull	r2, r3, r2, r3
 8005c66:	099b      	lsrs	r3, r3, #6
 8005c68:	4a09      	ldr	r2, [pc, #36]	@ (8005c90 <vPortSetupTimerInterrupt+0x44>)
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c6e:	4b04      	ldr	r3, [pc, #16]	@ (8005c80 <vPortSetupTimerInterrupt+0x34>)
 8005c70:	2207      	movs	r2, #7
 8005c72:	601a      	str	r2, [r3, #0]
}
 8005c74:	bf00      	nop
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	e000e010 	.word	0xe000e010
 8005c84:	e000e018 	.word	0xe000e018
 8005c88:	20000000 	.word	0x20000000
 8005c8c:	10624dd3 	.word	0x10624dd3
 8005c90:	e000e014 	.word	0xe000e014

08005c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005ca4 <vPortEnableVFP+0x10>
 8005c98:	6801      	ldr	r1, [r0, #0]
 8005c9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005c9e:	6001      	str	r1, [r0, #0]
 8005ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ca2:	bf00      	nop
 8005ca4:	e000ed88 	.word	0xe000ed88

08005ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08a      	sub	sp, #40	@ 0x28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cb4:	f7fe ffd6 	bl	8004c64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cb8:	4b5c      	ldr	r3, [pc, #368]	@ (8005e2c <pvPortMalloc+0x184>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005cc0:	f000 f924 	bl	8005f0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005cc4:	4b5a      	ldr	r3, [pc, #360]	@ (8005e30 <pvPortMalloc+0x188>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f040 8095 	bne.w	8005dfc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01e      	beq.n	8005d16 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005cd8:	2208      	movs	r2, #8
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4413      	add	r3, r2
 8005cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d015      	beq.n	8005d16 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f023 0307 	bic.w	r3, r3, #7
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00b      	beq.n	8005d16 <pvPortMalloc+0x6e>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	617b      	str	r3, [r7, #20]
}
 8005d10:	bf00      	nop
 8005d12:	bf00      	nop
 8005d14:	e7fd      	b.n	8005d12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d06f      	beq.n	8005dfc <pvPortMalloc+0x154>
 8005d1c:	4b45      	ldr	r3, [pc, #276]	@ (8005e34 <pvPortMalloc+0x18c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d86a      	bhi.n	8005dfc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d26:	4b44      	ldr	r3, [pc, #272]	@ (8005e38 <pvPortMalloc+0x190>)
 8005d28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d2a:	4b43      	ldr	r3, [pc, #268]	@ (8005e38 <pvPortMalloc+0x190>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d30:	e004      	b.n	8005d3c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d903      	bls.n	8005d4e <pvPortMalloc+0xa6>
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f1      	bne.n	8005d32 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d4e:	4b37      	ldr	r3, [pc, #220]	@ (8005e2c <pvPortMalloc+0x184>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d051      	beq.n	8005dfc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2208      	movs	r2, #8
 8005d5e:	4413      	add	r3, r2
 8005d60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	1ad2      	subs	r2, r2, r3
 8005d72:	2308      	movs	r3, #8
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d920      	bls.n	8005dbc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4413      	add	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <pvPortMalloc+0xfc>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	613b      	str	r3, [r7, #16]
}
 8005d9e:	bf00      	nop
 8005da0:	bf00      	nop
 8005da2:	e7fd      	b.n	8005da0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	1ad2      	subs	r2, r2, r3
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005db6:	69b8      	ldr	r0, [r7, #24]
 8005db8:	f000 f90a 	bl	8005fd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8005e34 <pvPortMalloc+0x18c>)
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e34 <pvPortMalloc+0x18c>)
 8005dc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dca:	4b1a      	ldr	r3, [pc, #104]	@ (8005e34 <pvPortMalloc+0x18c>)
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4b1b      	ldr	r3, [pc, #108]	@ (8005e3c <pvPortMalloc+0x194>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d203      	bcs.n	8005dde <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005dd6:	4b17      	ldr	r3, [pc, #92]	@ (8005e34 <pvPortMalloc+0x18c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a18      	ldr	r2, [pc, #96]	@ (8005e3c <pvPortMalloc+0x194>)
 8005ddc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	4b13      	ldr	r3, [pc, #76]	@ (8005e30 <pvPortMalloc+0x188>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005df2:	4b13      	ldr	r3, [pc, #76]	@ (8005e40 <pvPortMalloc+0x198>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3301      	adds	r3, #1
 8005df8:	4a11      	ldr	r2, [pc, #68]	@ (8005e40 <pvPortMalloc+0x198>)
 8005dfa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005dfc:	f7fe ff40 	bl	8004c80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <pvPortMalloc+0x17a>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	60fb      	str	r3, [r7, #12]
}
 8005e1c:	bf00      	nop
 8005e1e:	bf00      	nop
 8005e20:	e7fd      	b.n	8005e1e <pvPortMalloc+0x176>
	return pvReturn;
 8005e22:	69fb      	ldr	r3, [r7, #28]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3728      	adds	r7, #40	@ 0x28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	20004664 	.word	0x20004664
 8005e30:	20004678 	.word	0x20004678
 8005e34:	20004668 	.word	0x20004668
 8005e38:	2000465c 	.word	0x2000465c
 8005e3c:	2000466c 	.word	0x2000466c
 8005e40:	20004670 	.word	0x20004670

08005e44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d04f      	beq.n	8005ef6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e56:	2308      	movs	r3, #8
 8005e58:	425b      	negs	r3, r3
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	4b25      	ldr	r3, [pc, #148]	@ (8005f00 <vPortFree+0xbc>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10b      	bne.n	8005e8a <vPortFree+0x46>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	60fb      	str	r3, [r7, #12]
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop
 8005e88:	e7fd      	b.n	8005e86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <vPortFree+0x66>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	60bb      	str	r3, [r7, #8]
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	e7fd      	b.n	8005ea6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	4b14      	ldr	r3, [pc, #80]	@ (8005f00 <vPortFree+0xbc>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01e      	beq.n	8005ef6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d11a      	bne.n	8005ef6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f00 <vPortFree+0xbc>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	401a      	ands	r2, r3
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ed0:	f7fe fec8 	bl	8004c64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8005f04 <vPortFree+0xc0>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4413      	add	r3, r2
 8005ede:	4a09      	ldr	r2, [pc, #36]	@ (8005f04 <vPortFree+0xc0>)
 8005ee0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ee2:	6938      	ldr	r0, [r7, #16]
 8005ee4:	f000 f874 	bl	8005fd0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ee8:	4b07      	ldr	r3, [pc, #28]	@ (8005f08 <vPortFree+0xc4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3301      	adds	r3, #1
 8005eee:	4a06      	ldr	r2, [pc, #24]	@ (8005f08 <vPortFree+0xc4>)
 8005ef0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005ef2:	f7fe fec5 	bl	8004c80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ef6:	bf00      	nop
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20004678 	.word	0x20004678
 8005f04:	20004668 	.word	0x20004668
 8005f08:	20004674 	.word	0x20004674

08005f0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f12:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005f16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f18:	4b27      	ldr	r3, [pc, #156]	@ (8005fb8 <prvHeapInit+0xac>)
 8005f1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00c      	beq.n	8005f40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3307      	adds	r3, #7
 8005f2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0307 	bic.w	r3, r3, #7
 8005f32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fb8 <prvHeapInit+0xac>)
 8005f3c:	4413      	add	r3, r2
 8005f3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f44:	4a1d      	ldr	r2, [pc, #116]	@ (8005fbc <prvHeapInit+0xb0>)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005fbc <prvHeapInit+0xb0>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	4413      	add	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f58:	2208      	movs	r2, #8
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0307 	bic.w	r3, r3, #7
 8005f66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4a15      	ldr	r2, [pc, #84]	@ (8005fc0 <prvHeapInit+0xb4>)
 8005f6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f6e:	4b14      	ldr	r3, [pc, #80]	@ (8005fc0 <prvHeapInit+0xb4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2200      	movs	r2, #0
 8005f74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f76:	4b12      	ldr	r3, [pc, #72]	@ (8005fc0 <prvHeapInit+0xb4>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	1ad2      	subs	r2, r2, r3
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc0 <prvHeapInit+0xb4>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4a0a      	ldr	r2, [pc, #40]	@ (8005fc4 <prvHeapInit+0xb8>)
 8005f9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4a09      	ldr	r2, [pc, #36]	@ (8005fc8 <prvHeapInit+0xbc>)
 8005fa2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fa4:	4b09      	ldr	r3, [pc, #36]	@ (8005fcc <prvHeapInit+0xc0>)
 8005fa6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005faa:	601a      	str	r2, [r3, #0]
}
 8005fac:	bf00      	nop
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	20000a5c 	.word	0x20000a5c
 8005fbc:	2000465c 	.word	0x2000465c
 8005fc0:	20004664 	.word	0x20004664
 8005fc4:	2000466c 	.word	0x2000466c
 8005fc8:	20004668 	.word	0x20004668
 8005fcc:	20004678 	.word	0x20004678

08005fd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fd8:	4b28      	ldr	r3, [pc, #160]	@ (800607c <prvInsertBlockIntoFreeList+0xac>)
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	e002      	b.n	8005fe4 <prvInsertBlockIntoFreeList+0x14>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d8f7      	bhi.n	8005fde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d108      	bne.n	8006012 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	441a      	add	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	441a      	add	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d118      	bne.n	8006058 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	4b15      	ldr	r3, [pc, #84]	@ (8006080 <prvInsertBlockIntoFreeList+0xb0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	429a      	cmp	r2, r3
 8006030:	d00d      	beq.n	800604e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	441a      	add	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	e008      	b.n	8006060 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800604e:	4b0c      	ldr	r3, [pc, #48]	@ (8006080 <prvInsertBlockIntoFreeList+0xb0>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e003      	b.n	8006060 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	429a      	cmp	r2, r3
 8006066:	d002      	beq.n	800606e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800606e:	bf00      	nop
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	2000465c 	.word	0x2000465c
 8006080:	20004664 	.word	0x20004664

08006084 <app_init>:
TaskHandle_t task_b_h;
TaskHandle_t task_test_h;

/********************** external functions definition ************************/
void app_init(void)
{
 8006084:	b590      	push	{r4, r7, lr}
 8006086:	b08d      	sub	sp, #52	@ 0x34
 8006088:	af02      	add	r7, sp, #8
	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 800608a:	f7ff fd2d 	bl	8005ae8 <vPortEnterCritical>
 800608e:	4ba3      	ldr	r3, [pc, #652]	@ (800631c <app_init+0x298>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4aa3      	ldr	r2, [pc, #652]	@ (8006320 <app_init+0x29c>)
 8006094:	213f      	movs	r1, #63	@ 0x3f
 8006096:	4618      	mov	r0, r3
 8006098:	f001 f8c0 	bl	800721c <sniprintf>
 800609c:	4603      	mov	r3, r0
 800609e:	4aa1      	ldr	r2, [pc, #644]	@ (8006324 <app_init+0x2a0>)
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	4b9e      	ldr	r3, [pc, #632]	@ (800631c <app_init+0x298>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 f99e 	bl	80063e8 <logger_log_print_>
 80060ac:	f7ff fd4e 	bl	8005b4c <vPortExitCritical>
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)xTaskGetTickCount());
 80060b0:	f7ff fd1a 	bl	8005ae8 <vPortEnterCritical>
 80060b4:	4b99      	ldr	r3, [pc, #612]	@ (800631c <app_init+0x298>)
 80060b6:	681c      	ldr	r4, [r3, #0]
 80060b8:	f7fe fe80 	bl	8004dbc <xTaskGetTickCount>
 80060bc:	4603      	mov	r3, r0
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	4b99      	ldr	r3, [pc, #612]	@ (8006328 <app_init+0x2a4>)
 80060c2:	4a9a      	ldr	r2, [pc, #616]	@ (800632c <app_init+0x2a8>)
 80060c4:	213f      	movs	r1, #63	@ 0x3f
 80060c6:	4620      	mov	r0, r4
 80060c8:	f001 f8a8 	bl	800721c <sniprintf>
 80060cc:	4603      	mov	r3, r0
 80060ce:	4a95      	ldr	r2, [pc, #596]	@ (8006324 <app_init+0x2a0>)
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	4b92      	ldr	r3, [pc, #584]	@ (800631c <app_init+0x298>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 f986 	bl	80063e8 <logger_log_print_>
 80060dc:	f7ff fd36 	bl	8005b4c <vPortExitCritical>

	LOGGER_LOG(p_sys);
 80060e0:	f7ff fd02 	bl	8005ae8 <vPortEnterCritical>
 80060e4:	4b8d      	ldr	r3, [pc, #564]	@ (800631c <app_init+0x298>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a91      	ldr	r2, [pc, #580]	@ (8006330 <app_init+0x2ac>)
 80060ea:	6812      	ldr	r2, [r2, #0]
 80060ec:	213f      	movs	r1, #63	@ 0x3f
 80060ee:	4618      	mov	r0, r3
 80060f0:	f001 f894 	bl	800721c <sniprintf>
 80060f4:	4603      	mov	r3, r0
 80060f6:	4a8b      	ldr	r2, [pc, #556]	@ (8006324 <app_init+0x2a0>)
 80060f8:	6013      	str	r3, [r2, #0]
 80060fa:	4b88      	ldr	r3, [pc, #544]	@ (800631c <app_init+0x298>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 f972 	bl	80063e8 <logger_log_print_>
 8006104:	f7ff fd22 	bl	8005b4c <vPortExitCritical>
	LOGGER_LOG(p_app);
 8006108:	f7ff fcee 	bl	8005ae8 <vPortEnterCritical>
 800610c:	4b83      	ldr	r3, [pc, #524]	@ (800631c <app_init+0x298>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a88      	ldr	r2, [pc, #544]	@ (8006334 <app_init+0x2b0>)
 8006112:	6812      	ldr	r2, [r2, #0]
 8006114:	213f      	movs	r1, #63	@ 0x3f
 8006116:	4618      	mov	r0, r3
 8006118:	f001 f880 	bl	800721c <sniprintf>
 800611c:	4603      	mov	r3, r0
 800611e:	4a81      	ldr	r2, [pc, #516]	@ (8006324 <app_init+0x2a0>)
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	4b7e      	ldr	r3, [pc, #504]	@ (800631c <app_init+0x298>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4618      	mov	r0, r3
 8006128:	f000 f95e 	bl	80063e8 <logger_log_print_>
 800612c:	f7ff fd0e 	bl	8005b4c <vPortExitCritical>

    /* Before a queue or semaphore (binary or counting) or mutex is used it must 
     * be explicitly created */
	vSemaphoreCreateBinary(binary_semaphore_entry_a_h);
 8006130:	2203      	movs	r2, #3
 8006132:	2100      	movs	r1, #0
 8006134:	2001      	movs	r0, #1
 8006136:	f7fd fed5 	bl	8003ee4 <xQueueGenericCreate>
 800613a:	4603      	mov	r3, r0
 800613c:	4a7e      	ldr	r2, [pc, #504]	@ (8006338 <app_init+0x2b4>)
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	4b7d      	ldr	r3, [pc, #500]	@ (8006338 <app_init+0x2b4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d006      	beq.n	8006156 <app_init+0xd2>
 8006148:	4b7b      	ldr	r3, [pc, #492]	@ (8006338 <app_init+0x2b4>)
 800614a:	6818      	ldr	r0, [r3, #0]
 800614c:	2300      	movs	r3, #0
 800614e:	2200      	movs	r2, #0
 8006150:	2100      	movs	r1, #0
 8006152:	f7fd ff53 	bl	8003ffc <xQueueGenericSend>
	vSemaphoreCreateBinary(binary_semaphore_exit_a_h);
 8006156:	2203      	movs	r2, #3
 8006158:	2100      	movs	r1, #0
 800615a:	2001      	movs	r0, #1
 800615c:	f7fd fec2 	bl	8003ee4 <xQueueGenericCreate>
 8006160:	4603      	mov	r3, r0
 8006162:	4a76      	ldr	r2, [pc, #472]	@ (800633c <app_init+0x2b8>)
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	4b75      	ldr	r3, [pc, #468]	@ (800633c <app_init+0x2b8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d006      	beq.n	800617c <app_init+0xf8>
 800616e:	4b73      	ldr	r3, [pc, #460]	@ (800633c <app_init+0x2b8>)
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	2300      	movs	r3, #0
 8006174:	2200      	movs	r2, #0
 8006176:	2100      	movs	r1, #0
 8006178:	f7fd ff40 	bl	8003ffc <xQueueGenericSend>

	vSemaphoreCreateBinary(binary_semaphore_entry_b_h);
 800617c:	2203      	movs	r2, #3
 800617e:	2100      	movs	r1, #0
 8006180:	2001      	movs	r0, #1
 8006182:	f7fd feaf 	bl	8003ee4 <xQueueGenericCreate>
 8006186:	4603      	mov	r3, r0
 8006188:	4a6d      	ldr	r2, [pc, #436]	@ (8006340 <app_init+0x2bc>)
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	4b6c      	ldr	r3, [pc, #432]	@ (8006340 <app_init+0x2bc>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d006      	beq.n	80061a2 <app_init+0x11e>
 8006194:	4b6a      	ldr	r3, [pc, #424]	@ (8006340 <app_init+0x2bc>)
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	2300      	movs	r3, #0
 800619a:	2200      	movs	r2, #0
 800619c:	2100      	movs	r1, #0
 800619e:	f7fd ff2d 	bl	8003ffc <xQueueGenericSend>
	vSemaphoreCreateBinary(binary_semaphore_exit_b_h);
 80061a2:	2203      	movs	r2, #3
 80061a4:	2100      	movs	r1, #0
 80061a6:	2001      	movs	r0, #1
 80061a8:	f7fd fe9c 	bl	8003ee4 <xQueueGenericCreate>
 80061ac:	4603      	mov	r3, r0
 80061ae:	4a65      	ldr	r2, [pc, #404]	@ (8006344 <app_init+0x2c0>)
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	4b64      	ldr	r3, [pc, #400]	@ (8006344 <app_init+0x2c0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d006      	beq.n	80061c8 <app_init+0x144>
 80061ba:	4b62      	ldr	r3, [pc, #392]	@ (8006344 <app_init+0x2c0>)
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	2300      	movs	r3, #0
 80061c0:	2200      	movs	r2, #0
 80061c2:	2100      	movs	r1, #0
 80061c4:	f7fd ff1a 	bl	8003ffc <xQueueGenericSend>

	mutex_semaphore_h = xSemaphoreCreateMutex();
 80061c8:	2001      	movs	r0, #1
 80061ca:	f7fd feff 	bl	8003fcc <xQueueCreateMutex>
 80061ce:	4603      	mov	r3, r0
 80061d0:	4a5d      	ldr	r2, [pc, #372]	@ (8006348 <app_init+0x2c4>)
 80061d2:	6013      	str	r3, [r2, #0]

    /* Check the queue or semaphore (binary or counting) or mutex was created 
     * successfully. */
  	configASSERT(binary_semaphore_entry_a_h != NULL);
 80061d4:	4b58      	ldr	r3, [pc, #352]	@ (8006338 <app_init+0x2b4>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10b      	bne.n	80061f4 <app_init+0x170>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	623b      	str	r3, [r7, #32]
}
 80061ee:	bf00      	nop
 80061f0:	bf00      	nop
 80061f2:	e7fd      	b.n	80061f0 <app_init+0x16c>
	configASSERT(binary_semaphore_exit_a_h  != NULL);
 80061f4:	4b51      	ldr	r3, [pc, #324]	@ (800633c <app_init+0x2b8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10b      	bne.n	8006214 <app_init+0x190>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	61fb      	str	r3, [r7, #28]
}
 800620e:	bf00      	nop
 8006210:	bf00      	nop
 8006212:	e7fd      	b.n	8006210 <app_init+0x18c>

	configASSERT(binary_semaphore_entry_b_h != NULL);
 8006214:	4b4a      	ldr	r3, [pc, #296]	@ (8006340 <app_init+0x2bc>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10b      	bne.n	8006234 <app_init+0x1b0>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	61bb      	str	r3, [r7, #24]
}
 800622e:	bf00      	nop
 8006230:	bf00      	nop
 8006232:	e7fd      	b.n	8006230 <app_init+0x1ac>
	configASSERT(binary_semaphore_exit_b_h  != NULL);
 8006234:	4b43      	ldr	r3, [pc, #268]	@ (8006344 <app_init+0x2c0>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10b      	bne.n	8006254 <app_init+0x1d0>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	617b      	str	r3, [r7, #20]
}
 800624e:	bf00      	nop
 8006250:	bf00      	nop
 8006252:	e7fd      	b.n	8006250 <app_init+0x1cc>

    configASSERT(mutex_semaphore_h !=  NULL);
 8006254:	4b3c      	ldr	r3, [pc, #240]	@ (8006348 <app_init+0x2c4>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10b      	bne.n	8006274 <app_init+0x1f0>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	613b      	str	r3, [r7, #16]
}
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	e7fd      	b.n	8006270 <app_init+0x1ec>

	/* Add queue or semaphore (binary or counting) or mutex to registry. */
   	vQueueAddToRegistry(binary_semaphore_entry_a_h, "Binary Semaphore Entry A Handle");
 8006274:	4b30      	ldr	r3, [pc, #192]	@ (8006338 <app_init+0x2b4>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4934      	ldr	r1, [pc, #208]	@ (800634c <app_init+0x2c8>)
 800627a:	4618      	mov	r0, r3
 800627c:	f7fe f9d2 	bl	8004624 <vQueueAddToRegistry>
	vQueueAddToRegistry(binary_semaphore_exit_a_h, "Binary Semaphore Exit A Handle");
 8006280:	4b2e      	ldr	r3, [pc, #184]	@ (800633c <app_init+0x2b8>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4932      	ldr	r1, [pc, #200]	@ (8006350 <app_init+0x2cc>)
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe f9cc 	bl	8004624 <vQueueAddToRegistry>

	vQueueAddToRegistry(binary_semaphore_entry_b_h, "Binary Semaphore Entry B Handle");
 800628c:	4b2c      	ldr	r3, [pc, #176]	@ (8006340 <app_init+0x2bc>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4930      	ldr	r1, [pc, #192]	@ (8006354 <app_init+0x2d0>)
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe f9c6 	bl	8004624 <vQueueAddToRegistry>
	vQueueAddToRegistry(binary_semaphore_exit_b_h, "Binary Semaphore Exit B Handle");
 8006298:	4b2a      	ldr	r3, [pc, #168]	@ (8006344 <app_init+0x2c0>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	492e      	ldr	r1, [pc, #184]	@ (8006358 <app_init+0x2d4>)
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fe f9c0 	bl	8004624 <vQueueAddToRegistry>

	vQueueAddToRegistry(mutex_semaphore_h, "Mutex Semaphore Handle");
 80062a4:	4b28      	ldr	r3, [pc, #160]	@ (8006348 <app_init+0x2c4>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	492c      	ldr	r1, [pc, #176]	@ (800635c <app_init+0x2d8>)
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fe f9ba 	bl	8004624 <vQueueAddToRegistry>

	/* Add threads, ... */
    BaseType_t ret;

    /* Task A thread at priority 2 */
    ret = xTaskCreate(task_a,							/* Pointer to the function thats implement the task. */
 80062b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006360 <app_init+0x2dc>)
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	2302      	movs	r3, #2
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	2300      	movs	r3, #0
 80062ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80062be:	4929      	ldr	r1, [pc, #164]	@ (8006364 <app_init+0x2e0>)
 80062c0:	4829      	ldr	r0, [pc, #164]	@ (8006368 <app_init+0x2e4>)
 80062c2:	f7fe f9d9 	bl	8004678 <xTaskCreate>
 80062c6:	6278      	str	r0, [r7, #36]	@ 0x24
					  NULL,								/* We are not using the task parameter. */
					  (tskIDLE_PRIORITY + 2UL),			/* This task will run at priority 1. */
					  &task_a_h);						/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(ret == pdPASS);
 80062c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d00b      	beq.n	80062e6 <app_init+0x262>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	60fb      	str	r3, [r7, #12]
}
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop
 80062e4:	e7fd      	b.n	80062e2 <app_init+0x25e>

    /* Task B thread at priority 2 */
    ret = xTaskCreate(task_b,						/* Pointer to the function thats implement the task. */
 80062e6:	4b21      	ldr	r3, [pc, #132]	@ (800636c <app_init+0x2e8>)
 80062e8:	9301      	str	r3, [sp, #4]
 80062ea:	2302      	movs	r3, #2
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	2300      	movs	r3, #0
 80062f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80062f4:	491e      	ldr	r1, [pc, #120]	@ (8006370 <app_init+0x2ec>)
 80062f6:	481f      	ldr	r0, [pc, #124]	@ (8006374 <app_init+0x2f0>)
 80062f8:	f7fe f9be 	bl	8004678 <xTaskCreate>
 80062fc:	6278      	str	r0, [r7, #36]	@ 0x24
					  NULL,								/* We are not using the task parameter. */
					  (tskIDLE_PRIORITY + 2UL),			/* This task will run at priority 1. */
					  &task_b_h);						/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(ret == pdPASS);
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	2b01      	cmp	r3, #1
 8006302:	d039      	beq.n	8006378 <app_init+0x2f4>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	60bb      	str	r3, [r7, #8]
}
 8006316:	bf00      	nop
 8006318:	bf00      	nop
 800631a:	e7fd      	b.n	8006318 <app_init+0x294>
 800631c:	08008714 	.word	0x08008714
 8006320:	080082a4 	.word	0x080082a4
 8006324:	200046dc 	.word	0x200046dc
 8006328:	080082a8 	.word	0x080082a8
 800632c:	080082b4 	.word	0x080082b4
 8006330:	20000010 	.word	0x20000010
 8006334:	20000014 	.word	0x20000014
 8006338:	2000467c 	.word	0x2000467c
 800633c:	20004680 	.word	0x20004680
 8006340:	20004684 	.word	0x20004684
 8006344:	20004688 	.word	0x20004688
 8006348:	2000468c 	.word	0x2000468c
 800634c:	080082d8 	.word	0x080082d8
 8006350:	080082f8 	.word	0x080082f8
 8006354:	08008318 	.word	0x08008318
 8006358:	08008338 	.word	0x08008338
 800635c:	08008358 	.word	0x08008358
 8006360:	20004690 	.word	0x20004690
 8006364:	08008370 	.word	0x08008370
 8006368:	08006411 	.word	0x08006411
 800636c:	20004694 	.word	0x20004694
 8006370:	08008378 	.word	0x08008378
 8006374:	08006585 	.word	0x08006585

    /* Task Test thread at priority 1, periodically excites other tasks */
    ret = xTaskCreate(task_test,						/* Pointer to the function thats implement the task. */
 8006378:	4b16      	ldr	r3, [pc, #88]	@ (80063d4 <app_init+0x350>)
 800637a:	9301      	str	r3, [sp, #4]
 800637c:	2301      	movs	r3, #1
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	2300      	movs	r3, #0
 8006382:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006386:	4914      	ldr	r1, [pc, #80]	@ (80063d8 <app_init+0x354>)
 8006388:	4814      	ldr	r0, [pc, #80]	@ (80063dc <app_init+0x358>)
 800638a:	f7fe f975 	bl	8004678 <xTaskCreate>
 800638e:	6278      	str	r0, [r7, #36]	@ 0x24
					  NULL,								/* We are not using the task parameter. */
					  (tskIDLE_PRIORITY + 1UL),			/* This task will run at priority 1. */
					  &task_test_h);					/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(ret == pdPASS);
 8006390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006392:	2b01      	cmp	r3, #1
 8006394:	d00b      	beq.n	80063ae <app_init+0x32a>
	__asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	607b      	str	r3, [r7, #4]
}
 80063a8:	bf00      	nop
 80063aa:	bf00      	nop
 80063ac:	e7fd      	b.n	80063aa <app_init+0x326>

    cycle_counter_init();
 80063ae:	4b0c      	ldr	r3, [pc, #48]	@ (80063e0 <app_init+0x35c>)
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	4a0b      	ldr	r2, [pc, #44]	@ (80063e0 <app_init+0x35c>)
 80063b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063b8:	60d3      	str	r3, [r2, #12]
 80063ba:	4b0a      	ldr	r3, [pc, #40]	@ (80063e4 <app_init+0x360>)
 80063bc:	2200      	movs	r2, #0
 80063be:	605a      	str	r2, [r3, #4]
 80063c0:	4b08      	ldr	r3, [pc, #32]	@ (80063e4 <app_init+0x360>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a07      	ldr	r2, [pc, #28]	@ (80063e4 <app_init+0x360>)
 80063c6:	f043 0301 	orr.w	r3, r3, #1
 80063ca:	6013      	str	r3, [r2, #0]
}
 80063cc:	bf00      	nop
 80063ce:	372c      	adds	r7, #44	@ 0x2c
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd90      	pop	{r4, r7, pc}
 80063d4:	20004698 	.word	0x20004698
 80063d8:	08008380 	.word	0x08008380
 80063dc:	08006725 	.word	0x08006725
 80063e0:	e000edf0 	.word	0xe000edf0
 80063e4:	e0001000 	.word	0xe0001000

080063e8 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
	printf(msg);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 ff01 	bl	80071f8 <iprintf>
	fflush(stdout);
 80063f6:	4b05      	ldr	r3, [pc, #20]	@ (800640c <logger_log_print_+0x24>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fe25 	bl	800704c <fflush>
}
 8006402:	bf00      	nop
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	2000007c 	.word	0x2000007c

08006410 <task_a>:
uint32_t g_task_a_cnt;

/********************** external functions definition ************************/
/* Task A thread */
void task_a(void *parameters)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af02      	add	r7, sp, #8
 8006416:	6078      	str	r0, [r7, #4]
	#if (TEST_X == TEST_0)

	g_task_a_cnt = G_TASK_A_CNT_INI;
 8006418:	4b4d      	ldr	r3, [pc, #308]	@ (8006550 <task_a+0x140>)
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]

	/*  Declare & Initialize Task Function variables for argument, led, button and task */
	char *p_task_name = (char *) pcTaskGetName(NULL);
 800641e:	2000      	movs	r0, #0
 8006420:	f7fe fcdc 	bl	8004ddc <pcTaskGetName>
 8006424:	60f8      	str	r0, [r7, #12]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", p_task_name, p_task_a);
 8006426:	f7ff fb5f 	bl	8005ae8 <vPortEnterCritical>
 800642a:	4b4a      	ldr	r3, [pc, #296]	@ (8006554 <task_a+0x144>)
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	4b4a      	ldr	r3, [pc, #296]	@ (8006558 <task_a+0x148>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4a49      	ldr	r2, [pc, #292]	@ (800655c <task_a+0x14c>)
 8006438:	213f      	movs	r1, #63	@ 0x3f
 800643a:	f000 feef 	bl	800721c <sniprintf>
 800643e:	4603      	mov	r3, r0
 8006440:	4a47      	ldr	r2, [pc, #284]	@ (8006560 <task_a+0x150>)
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	4b43      	ldr	r3, [pc, #268]	@ (8006554 <task_a+0x144>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff ffcd 	bl	80063e8 <logger_log_print_>
 800644e:	f7ff fb7d 	bl	8005b4c <vPortExitCritical>

	xSemaphoreTake(binary_semaphore_entry_a_h, (portTickType) 0);
 8006452:	4b44      	ldr	r3, [pc, #272]	@ (8006564 <task_a+0x154>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2100      	movs	r1, #0
 8006458:	4618      	mov	r0, r3
 800645a:	f7fd fed1 	bl	8004200 <xQueueSemaphoreTake>
	xSemaphoreTake(binary_semaphore_exit_a_h, (portTickType) 0);
 800645e:	4b42      	ldr	r3, [pc, #264]	@ (8006568 <task_a+0x158>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2100      	movs	r1, #0
 8006464:	4618      	mov	r0, r3
 8006466:	f7fd fecb 	bl	8004200 <xQueueSemaphoreTake>
	{

		#if (TEST_X == TEST_0)

		/* Update Task A Counter */
		g_task_a_cnt++;
 800646a:	4b39      	ldr	r3, [pc, #228]	@ (8006550 <task_a+0x140>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3301      	adds	r3, #1
 8006470:	4a37      	ldr	r2, [pc, #220]	@ (8006550 <task_a+0x140>)
 8006472:	6013      	str	r3, [r2, #0]

		/* Print out: Wait Entry A */
		LOGGER_LOG("  %s\r\n", p_task_a_wait_entry_a);
 8006474:	f7ff fb38 	bl	8005ae8 <vPortEnterCritical>
 8006478:	4b36      	ldr	r3, [pc, #216]	@ (8006554 <task_a+0x144>)
 800647a:	6818      	ldr	r0, [r3, #0]
 800647c:	4b3b      	ldr	r3, [pc, #236]	@ (800656c <task_a+0x15c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a3b      	ldr	r2, [pc, #236]	@ (8006570 <task_a+0x160>)
 8006482:	213f      	movs	r1, #63	@ 0x3f
 8006484:	f000 feca 	bl	800721c <sniprintf>
 8006488:	4603      	mov	r3, r0
 800648a:	4a35      	ldr	r2, [pc, #212]	@ (8006560 <task_a+0x150>)
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	4b31      	ldr	r3, [pc, #196]	@ (8006554 <task_a+0x144>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff ffa8 	bl	80063e8 <logger_log_print_>
 8006498:	f7ff fb58 	bl	8005b4c <vPortExitCritical>
		xSemaphoreTake(binary_semaphore_entry_a_h, portMAX_DELAY);
 800649c:	4b31      	ldr	r3, [pc, #196]	@ (8006564 <task_a+0x154>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f04f 31ff 	mov.w	r1, #4294967295
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fd feab 	bl	8004200 <xQueueSemaphoreTake>
		{
    		/* Print out: Wait Mutex */
    		LOGGER_LOG("  %s\r\n", p_task_a_wait_mutex);
 80064aa:	f7ff fb1d 	bl	8005ae8 <vPortEnterCritical>
 80064ae:	4b29      	ldr	r3, [pc, #164]	@ (8006554 <task_a+0x144>)
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	4b30      	ldr	r3, [pc, #192]	@ (8006574 <task_a+0x164>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006570 <task_a+0x160>)
 80064b8:	213f      	movs	r1, #63	@ 0x3f
 80064ba:	f000 feaf 	bl	800721c <sniprintf>
 80064be:	4603      	mov	r3, r0
 80064c0:	4a27      	ldr	r2, [pc, #156]	@ (8006560 <task_a+0x150>)
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	4b23      	ldr	r3, [pc, #140]	@ (8006554 <task_a+0x144>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff ff8d 	bl	80063e8 <logger_log_print_>
 80064ce:	f7ff fb3d 	bl	8005b4c <vPortExitCritical>
			xSemaphoreTake(mutex_semaphore_h, portMAX_DELAY);
 80064d2:	4b29      	ldr	r3, [pc, #164]	@ (8006578 <task_a+0x168>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f04f 31ff 	mov.w	r1, #4294967295
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fd fe90 	bl	8004200 <xQueueSemaphoreTake>
			{
				/* Print out: Wait Exit A */
				LOGGER_LOG("  %s\r\n", p_task_a_wait_exit_a);
 80064e0:	f7ff fb02 	bl	8005ae8 <vPortEnterCritical>
 80064e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006554 <task_a+0x144>)
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	4b24      	ldr	r3, [pc, #144]	@ (800657c <task_a+0x16c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a20      	ldr	r2, [pc, #128]	@ (8006570 <task_a+0x160>)
 80064ee:	213f      	movs	r1, #63	@ 0x3f
 80064f0:	f000 fe94 	bl	800721c <sniprintf>
 80064f4:	4603      	mov	r3, r0
 80064f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006560 <task_a+0x150>)
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	4b16      	ldr	r3, [pc, #88]	@ (8006554 <task_a+0x144>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff ff72 	bl	80063e8 <logger_log_print_>
 8006504:	f7ff fb22 	bl	8005b4c <vPortExitCritical>
				xSemaphoreTake(binary_semaphore_exit_a_h, portMAX_DELAY);
 8006508:	4b17      	ldr	r3, [pc, #92]	@ (8006568 <task_a+0x158>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f04f 31ff 	mov.w	r1, #4294967295
 8006510:	4618      	mov	r0, r3
 8006512:	f7fd fe75 	bl	8004200 <xQueueSemaphoreTake>
				{
					/* Print out: Signal Mutex */
					LOGGER_LOG("  %s\r\n", p_task_a_signal_mutex);
 8006516:	f7ff fae7 	bl	8005ae8 <vPortEnterCritical>
 800651a:	4b0e      	ldr	r3, [pc, #56]	@ (8006554 <task_a+0x144>)
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	4b18      	ldr	r3, [pc, #96]	@ (8006580 <task_a+0x170>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a13      	ldr	r2, [pc, #76]	@ (8006570 <task_a+0x160>)
 8006524:	213f      	movs	r1, #63	@ 0x3f
 8006526:	f000 fe79 	bl	800721c <sniprintf>
 800652a:	4603      	mov	r3, r0
 800652c:	4a0c      	ldr	r2, [pc, #48]	@ (8006560 <task_a+0x150>)
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	4b08      	ldr	r3, [pc, #32]	@ (8006554 <task_a+0x144>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff ff57 	bl	80063e8 <logger_log_print_>
 800653a:	f7ff fb07 	bl	8005b4c <vPortExitCritical>
					xSemaphoreGive(mutex_semaphore_h);
 800653e:	4b0e      	ldr	r3, [pc, #56]	@ (8006578 <task_a+0x168>)
 8006540:	6818      	ldr	r0, [r3, #0]
 8006542:	2300      	movs	r3, #0
 8006544:	2200      	movs	r2, #0
 8006546:	2100      	movs	r1, #0
 8006548:	f7fd fd58 	bl	8003ffc <xQueueGenericSend>
		g_task_a_cnt++;
 800654c:	bf00      	nop
 800654e:	e78c      	b.n	800646a <task_a+0x5a>
 8006550:	200046e0 	.word	0x200046e0
 8006554:	08008714 	.word	0x08008714
 8006558:	20000018 	.word	0x20000018
 800655c:	08008454 	.word	0x08008454
 8006560:	200046dc 	.word	0x200046dc
 8006564:	2000467c 	.word	0x2000467c
 8006568:	20004680 	.word	0x20004680
 800656c:	2000001c 	.word	0x2000001c
 8006570:	0800846c 	.word	0x0800846c
 8006574:	20000024 	.word	0x20000024
 8006578:	2000468c 	.word	0x2000468c
 800657c:	20000020 	.word	0x20000020
 8006580:	20000028 	.word	0x20000028

08006584 <task_b>:
uint32_t g_task_b_cnt;

/********************** external functions definition ************************/
/* Task B thread */
void task_b(void *parameters)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af02      	add	r7, sp, #8
 800658a:	6078      	str	r0, [r7, #4]
	#if (TEST_X == TEST_0)

	g_task_b_cnt = G_TASK_B_CNT_INI;
 800658c:	4b57      	ldr	r3, [pc, #348]	@ (80066ec <task_b+0x168>)
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]

	/*  Declare & Initialize Task Function variables for argument, led, button and task */
	char *p_task_name = (char *) pcTaskGetName(NULL);
 8006592:	2000      	movs	r0, #0
 8006594:	f7fe fc22 	bl	8004ddc <pcTaskGetName>
 8006598:	60f8      	str	r0, [r7, #12]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", p_task_name, p_task_b);
 800659a:	f7ff faa5 	bl	8005ae8 <vPortEnterCritical>
 800659e:	4b54      	ldr	r3, [pc, #336]	@ (80066f0 <task_b+0x16c>)
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	4b54      	ldr	r3, [pc, #336]	@ (80066f4 <task_b+0x170>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4a53      	ldr	r2, [pc, #332]	@ (80066f8 <task_b+0x174>)
 80065ac:	213f      	movs	r1, #63	@ 0x3f
 80065ae:	f000 fe35 	bl	800721c <sniprintf>
 80065b2:	4603      	mov	r3, r0
 80065b4:	4a51      	ldr	r2, [pc, #324]	@ (80066fc <task_b+0x178>)
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	4b4d      	ldr	r3, [pc, #308]	@ (80066f0 <task_b+0x16c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff ff13 	bl	80063e8 <logger_log_print_>
 80065c2:	f7ff fac3 	bl	8005b4c <vPortExitCritical>

	xSemaphoreTake(binary_semaphore_entry_b_h, (portTickType) 0);
 80065c6:	4b4e      	ldr	r3, [pc, #312]	@ (8006700 <task_b+0x17c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2100      	movs	r1, #0
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fd fe17 	bl	8004200 <xQueueSemaphoreTake>
	xSemaphoreTake(binary_semaphore_exit_b_h, (portTickType) 0);
 80065d2:	4b4c      	ldr	r3, [pc, #304]	@ (8006704 <task_b+0x180>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2100      	movs	r1, #0
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fd fe11 	bl	8004200 <xQueueSemaphoreTake>
	{

		#if (TEST_X == TEST_0)

		/* Update Task B Counter */
		g_task_b_cnt++;
 80065de:	4b43      	ldr	r3, [pc, #268]	@ (80066ec <task_b+0x168>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3301      	adds	r3, #1
 80065e4:	4a41      	ldr	r2, [pc, #260]	@ (80066ec <task_b+0x168>)
 80065e6:	6013      	str	r3, [r2, #0]

		/* Print out: Wait 2500mS */
//		LOGGER_LOG("  %s - %s %d\r\n", p_task_b_wait_2500mS, GET_NAME(g_task_b_cnt), (int)g_task_b_cnt);
		LOGGER_LOG("  %s\r\n", p_task_b_wait_2500mS);
 80065e8:	f7ff fa7e 	bl	8005ae8 <vPortEnterCritical>
 80065ec:	4b40      	ldr	r3, [pc, #256]	@ (80066f0 <task_b+0x16c>)
 80065ee:	6818      	ldr	r0, [r3, #0]
 80065f0:	4b45      	ldr	r3, [pc, #276]	@ (8006708 <task_b+0x184>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a45      	ldr	r2, [pc, #276]	@ (800670c <task_b+0x188>)
 80065f6:	213f      	movs	r1, #63	@ 0x3f
 80065f8:	f000 fe10 	bl	800721c <sniprintf>
 80065fc:	4603      	mov	r3, r0
 80065fe:	4a3f      	ldr	r2, [pc, #252]	@ (80066fc <task_b+0x178>)
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	4b3b      	ldr	r3, [pc, #236]	@ (80066f0 <task_b+0x16c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff feee 	bl	80063e8 <logger_log_print_>
 800660c:	f7ff fa9e 	bl	8005b4c <vPortExitCritical>

		/* Print out: Wait Entry B */
		LOGGER_LOG("  %s\r\n", p_task_b_wait_entry_b);
 8006610:	f7ff fa6a 	bl	8005ae8 <vPortEnterCritical>
 8006614:	4b36      	ldr	r3, [pc, #216]	@ (80066f0 <task_b+0x16c>)
 8006616:	6818      	ldr	r0, [r3, #0]
 8006618:	4b3d      	ldr	r3, [pc, #244]	@ (8006710 <task_b+0x18c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a3b      	ldr	r2, [pc, #236]	@ (800670c <task_b+0x188>)
 800661e:	213f      	movs	r1, #63	@ 0x3f
 8006620:	f000 fdfc 	bl	800721c <sniprintf>
 8006624:	4603      	mov	r3, r0
 8006626:	4a35      	ldr	r2, [pc, #212]	@ (80066fc <task_b+0x178>)
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	4b31      	ldr	r3, [pc, #196]	@ (80066f0 <task_b+0x16c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff feda 	bl	80063e8 <logger_log_print_>
 8006634:	f7ff fa8a 	bl	8005b4c <vPortExitCritical>
		xSemaphoreTake(binary_semaphore_entry_b_h, portMAX_DELAY);
 8006638:	4b31      	ldr	r3, [pc, #196]	@ (8006700 <task_b+0x17c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f04f 31ff 	mov.w	r1, #4294967295
 8006640:	4618      	mov	r0, r3
 8006642:	f7fd fddd 	bl	8004200 <xQueueSemaphoreTake>
		{
			/* Print out: Wait Mutex */
			LOGGER_LOG("  %s\r\n", p_task_b_wait_mutex);
 8006646:	f7ff fa4f 	bl	8005ae8 <vPortEnterCritical>
 800664a:	4b29      	ldr	r3, [pc, #164]	@ (80066f0 <task_b+0x16c>)
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	4b31      	ldr	r3, [pc, #196]	@ (8006714 <task_b+0x190>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a2e      	ldr	r2, [pc, #184]	@ (800670c <task_b+0x188>)
 8006654:	213f      	movs	r1, #63	@ 0x3f
 8006656:	f000 fde1 	bl	800721c <sniprintf>
 800665a:	4603      	mov	r3, r0
 800665c:	4a27      	ldr	r2, [pc, #156]	@ (80066fc <task_b+0x178>)
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	4b23      	ldr	r3, [pc, #140]	@ (80066f0 <task_b+0x16c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4618      	mov	r0, r3
 8006666:	f7ff febf 	bl	80063e8 <logger_log_print_>
 800666a:	f7ff fa6f 	bl	8005b4c <vPortExitCritical>
			xSemaphoreTake(mutex_semaphore_h, portMAX_DELAY);
 800666e:	4b2a      	ldr	r3, [pc, #168]	@ (8006718 <task_b+0x194>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f04f 31ff 	mov.w	r1, #4294967295
 8006676:	4618      	mov	r0, r3
 8006678:	f7fd fdc2 	bl	8004200 <xQueueSemaphoreTake>
			{
				/* Print out: Wait Exit B */
				LOGGER_LOG("  %s\r\n", p_task_b_wait_exit_b);
 800667c:	f7ff fa34 	bl	8005ae8 <vPortEnterCritical>
 8006680:	4b1b      	ldr	r3, [pc, #108]	@ (80066f0 <task_b+0x16c>)
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	4b25      	ldr	r3, [pc, #148]	@ (800671c <task_b+0x198>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a20      	ldr	r2, [pc, #128]	@ (800670c <task_b+0x188>)
 800668a:	213f      	movs	r1, #63	@ 0x3f
 800668c:	f000 fdc6 	bl	800721c <sniprintf>
 8006690:	4603      	mov	r3, r0
 8006692:	4a1a      	ldr	r2, [pc, #104]	@ (80066fc <task_b+0x178>)
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	4b16      	ldr	r3, [pc, #88]	@ (80066f0 <task_b+0x16c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff fea4 	bl	80063e8 <logger_log_print_>
 80066a0:	f7ff fa54 	bl	8005b4c <vPortExitCritical>
				xSemaphoreTake(binary_semaphore_exit_b_h, portMAX_DELAY);
 80066a4:	4b17      	ldr	r3, [pc, #92]	@ (8006704 <task_b+0x180>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f04f 31ff 	mov.w	r1, #4294967295
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fd fda7 	bl	8004200 <xQueueSemaphoreTake>
				{
					/* Print out: Signal Mutex */
					LOGGER_LOG("  %s\r\n", p_task_b_signal_mutex);
 80066b2:	f7ff fa19 	bl	8005ae8 <vPortEnterCritical>
 80066b6:	4b0e      	ldr	r3, [pc, #56]	@ (80066f0 <task_b+0x16c>)
 80066b8:	6818      	ldr	r0, [r3, #0]
 80066ba:	4b19      	ldr	r3, [pc, #100]	@ (8006720 <task_b+0x19c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a13      	ldr	r2, [pc, #76]	@ (800670c <task_b+0x188>)
 80066c0:	213f      	movs	r1, #63	@ 0x3f
 80066c2:	f000 fdab 	bl	800721c <sniprintf>
 80066c6:	4603      	mov	r3, r0
 80066c8:	4a0c      	ldr	r2, [pc, #48]	@ (80066fc <task_b+0x178>)
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	4b08      	ldr	r3, [pc, #32]	@ (80066f0 <task_b+0x16c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7ff fe89 	bl	80063e8 <logger_log_print_>
 80066d6:	f7ff fa39 	bl	8005b4c <vPortExitCritical>
					xSemaphoreGive(mutex_semaphore_h);
 80066da:	4b0f      	ldr	r3, [pc, #60]	@ (8006718 <task_b+0x194>)
 80066dc:	6818      	ldr	r0, [r3, #0]
 80066de:	2300      	movs	r3, #0
 80066e0:	2200      	movs	r2, #0
 80066e2:	2100      	movs	r1, #0
 80066e4:	f7fd fc8a 	bl	8003ffc <xQueueGenericSend>
		g_task_b_cnt++;
 80066e8:	bf00      	nop
 80066ea:	e778      	b.n	80065de <task_b+0x5a>
 80066ec:	200046e4 	.word	0x200046e4
 80066f0:	08008714 	.word	0x08008714
 80066f4:	2000002c 	.word	0x2000002c
 80066f8:	0800853c 	.word	0x0800853c
 80066fc:	200046dc 	.word	0x200046dc
 8006700:	20004684 	.word	0x20004684
 8006704:	20004688 	.word	0x20004688
 8006708:	20000040 	.word	0x20000040
 800670c:	08008554 	.word	0x08008554
 8006710:	20000030 	.word	0x20000030
 8006714:	20000038 	.word	0x20000038
 8006718:	2000468c 	.word	0x2000468c
 800671c:	20000034 	.word	0x20000034
 8006720:	2000003c 	.word	0x2000003c

08006724 <task_test>:
uint32_t g_task_test_cnt;

/********************** external functions definition ************************/
/* Task Test thread */
void task_test(void *parameters)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af02      	add	r7, sp, #8
 800672a:	6078      	str	r0, [r7, #4]
	#if (TEST_X == TEST_0)

	g_task_test_cnt = G_TASK_TEST_CNT_INI;
 800672c:	4b90      	ldr	r3, [pc, #576]	@ (8006970 <task_test+0x24c>)
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]
	/*  Declare & Initialize Task Function variables for argument, led, button and task */
	TickType_t last_wake_time;

	/* The xLastWakeTime variable needs to be initialized with the current tick
	   count. ws*/
	last_wake_time = xTaskGetTickCount();
 8006732:	f7fe fb43 	bl	8004dbc <xTaskGetTickCount>
 8006736:	4603      	mov	r3, r0
 8006738:	60bb      	str	r3, [r7, #8]

	char *p_task_name = (char *) pcTaskGetName(NULL);
 800673a:	2000      	movs	r0, #0
 800673c:	f7fe fb4e 	bl	8004ddc <pcTaskGetName>
 8006740:	6138      	str	r0, [r7, #16]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", p_task_name, p_task_test);
 8006742:	f7ff f9d1 	bl	8005ae8 <vPortEnterCritical>
 8006746:	4b8b      	ldr	r3, [pc, #556]	@ (8006974 <task_test+0x250>)
 8006748:	6818      	ldr	r0, [r3, #0]
 800674a:	4b8b      	ldr	r3, [pc, #556]	@ (8006978 <task_test+0x254>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	4a8a      	ldr	r2, [pc, #552]	@ (800697c <task_test+0x258>)
 8006754:	213f      	movs	r1, #63	@ 0x3f
 8006756:	f000 fd61 	bl	800721c <sniprintf>
 800675a:	4603      	mov	r3, r0
 800675c:	4a88      	ldr	r2, [pc, #544]	@ (8006980 <task_test+0x25c>)
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	4b84      	ldr	r3, [pc, #528]	@ (8006974 <task_test+0x250>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff fe3f 	bl	80063e8 <logger_log_print_>
 800676a:	f7ff f9ef 	bl	8005b4c <vPortExitCritical>
	 * priority.
	 *
	 * Query the priority at which this task is running - passing in NULL means
	 * "return our own priority". */
	UBaseType_t task_test_priority;
	task_test_priority = uxTaskPriorityGet(NULL) + 2UL;
 800676e:	2000      	movs	r0, #0
 8006770:	f7fe f960 	bl	8004a34 <uxTaskPriorityGet>
 8006774:	4603      	mov	r3, r0
 8006776:	3302      	adds	r3, #2
 8006778:	60fb      	str	r3, [r7, #12]

	/* Setting the TestingTask priority above the other tasks priority will
	 * cause TestingTask to immediately start running (as then TestingTask
	 * will have the higher priority of the three created tasks). */
	vTaskPrioritySet(NULL, task_test_priority);
 800677a:	68f9      	ldr	r1, [r7, #12]
 800677c:	2000      	movs	r0, #0
 800677e:	f7fe f973 	bl	8004a68 <vTaskPrioritySet>

	/* Print out: Task priority */
	LOGGER_LOG("  %s %s %d\r\n", p_task_test_priority, GET_NAME(task_test_priority), (int)task_test_priority);
 8006782:	f7ff f9b1 	bl	8005ae8 <vPortEnterCritical>
 8006786:	4b7b      	ldr	r3, [pc, #492]	@ (8006974 <task_test+0x250>)
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	4b7e      	ldr	r3, [pc, #504]	@ (8006984 <task_test+0x260>)
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	4b7d      	ldr	r3, [pc, #500]	@ (8006988 <task_test+0x264>)
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	4613      	mov	r3, r2
 8006798:	4a7c      	ldr	r2, [pc, #496]	@ (800698c <task_test+0x268>)
 800679a:	213f      	movs	r1, #63	@ 0x3f
 800679c:	f000 fd3e 	bl	800721c <sniprintf>
 80067a0:	4603      	mov	r3, r0
 80067a2:	4a77      	ldr	r2, [pc, #476]	@ (8006980 <task_test+0x25c>)
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	4b73      	ldr	r3, [pc, #460]	@ (8006974 <task_test+0x250>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff fe1c 	bl	80063e8 <logger_log_print_>
 80067b0:	f7ff f9cc 	bl	8005b4c <vPortExitCritical>
	for (;;)
	{

		#if (TEST_X == TEST_0)

		uint32_t index = E_TASK_TEST_X;
 80067b4:	2301      	movs	r3, #1
 80067b6:	617b      	str	r3, [r7, #20]

		/* Scanning the array of events to excite tasks */
		for (index = 0; index < (sizeof(e_task_test_array)/sizeof(e_task_test_t)); index++)
 80067b8:	2300      	movs	r3, #0
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	e0d3      	b.n	8006966 <task_test+0x242>
		{
			/* Update Task Task Counter */
			g_task_test_cnt++;
 80067be:	4b6c      	ldr	r3, [pc, #432]	@ (8006970 <task_test+0x24c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3301      	adds	r3, #1
 80067c4:	4a6a      	ldr	r2, [pc, #424]	@ (8006970 <task_test+0x24c>)
 80067c6:	6013      	str	r3, [r2, #0]

			/* Print out: Event Task Test Array Index */
			LOGGER_LOG("  %s %s %d\r\n", p_task_test_e_task_test_array, GET_NAME(index), (int)index);
 80067c8:	f7ff f98e 	bl	8005ae8 <vPortEnterCritical>
 80067cc:	4b69      	ldr	r3, [pc, #420]	@ (8006974 <task_test+0x250>)
 80067ce:	6818      	ldr	r0, [r3, #0]
 80067d0:	4b6f      	ldr	r3, [pc, #444]	@ (8006990 <task_test+0x26c>)
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	9301      	str	r3, [sp, #4]
 80067d8:	4b6e      	ldr	r3, [pc, #440]	@ (8006994 <task_test+0x270>)
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	4613      	mov	r3, r2
 80067de:	4a6b      	ldr	r2, [pc, #428]	@ (800698c <task_test+0x268>)
 80067e0:	213f      	movs	r1, #63	@ 0x3f
 80067e2:	f000 fd1b 	bl	800721c <sniprintf>
 80067e6:	4603      	mov	r3, r0
 80067e8:	4a65      	ldr	r2, [pc, #404]	@ (8006980 <task_test+0x25c>)
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	4b61      	ldr	r3, [pc, #388]	@ (8006974 <task_test+0x250>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7ff fdf9 	bl	80063e8 <logger_log_print_>
 80067f6:	f7ff f9a9 	bl	8005b4c <vPortExitCritical>

			switch (e_task_test_array[index]) {
 80067fa:	4a67      	ldr	r2, [pc, #412]	@ (8006998 <task_test+0x274>)
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	4413      	add	r3, r2
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	3b01      	subs	r3, #1
 8006804:	2b03      	cmp	r3, #3
 8006806:	d87b      	bhi.n	8006900 <task_test+0x1dc>
 8006808:	a201      	add	r2, pc, #4	@ (adr r2, 8006810 <task_test+0xec>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006821 	.word	0x08006821
 8006814:	08006891 	.word	0x08006891
 8006818:	08006859 	.word	0x08006859
 800681c:	080068c9 	.word	0x080068c9

	    		case Entry_A:

		    		/* Print out: Signal Entry A */
		    		LOGGER_LOG("  %s\r\n", p_task_test_signal_entry_a);
 8006820:	f7ff f962 	bl	8005ae8 <vPortEnterCritical>
 8006824:	4b53      	ldr	r3, [pc, #332]	@ (8006974 <task_test+0x250>)
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	4b5c      	ldr	r3, [pc, #368]	@ (800699c <task_test+0x278>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a5c      	ldr	r2, [pc, #368]	@ (80069a0 <task_test+0x27c>)
 800682e:	213f      	movs	r1, #63	@ 0x3f
 8006830:	f000 fcf4 	bl	800721c <sniprintf>
 8006834:	4603      	mov	r3, r0
 8006836:	4a52      	ldr	r2, [pc, #328]	@ (8006980 <task_test+0x25c>)
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	4b4e      	ldr	r3, [pc, #312]	@ (8006974 <task_test+0x250>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f7ff fdd2 	bl	80063e8 <logger_log_print_>
 8006844:	f7ff f982 	bl	8005b4c <vPortExitCritical>
		    		xSemaphoreGive(binary_semaphore_entry_a_h);
 8006848:	4b56      	ldr	r3, [pc, #344]	@ (80069a4 <task_test+0x280>)
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	2300      	movs	r3, #0
 800684e:	2200      	movs	r2, #0
 8006850:	2100      	movs	r1, #0
 8006852:	f7fd fbd3 	bl	8003ffc <xQueueGenericSend>
		    		break;
 8006856:	e068      	b.n	800692a <task_test+0x206>

	    		case Exit_A:

		    		/* Print out: Signal Exit A */
		    		LOGGER_LOG("  %s\r\n", p_task_test_signal_exit_a);
 8006858:	f7ff f946 	bl	8005ae8 <vPortEnterCritical>
 800685c:	4b45      	ldr	r3, [pc, #276]	@ (8006974 <task_test+0x250>)
 800685e:	6818      	ldr	r0, [r3, #0]
 8006860:	4b51      	ldr	r3, [pc, #324]	@ (80069a8 <task_test+0x284>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a4e      	ldr	r2, [pc, #312]	@ (80069a0 <task_test+0x27c>)
 8006866:	213f      	movs	r1, #63	@ 0x3f
 8006868:	f000 fcd8 	bl	800721c <sniprintf>
 800686c:	4603      	mov	r3, r0
 800686e:	4a44      	ldr	r2, [pc, #272]	@ (8006980 <task_test+0x25c>)
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	4b40      	ldr	r3, [pc, #256]	@ (8006974 <task_test+0x250>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	f7ff fdb6 	bl	80063e8 <logger_log_print_>
 800687c:	f7ff f966 	bl	8005b4c <vPortExitCritical>
		    		xSemaphoreGive(binary_semaphore_exit_a_h);
 8006880:	4b4a      	ldr	r3, [pc, #296]	@ (80069ac <task_test+0x288>)
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	2300      	movs	r3, #0
 8006886:	2200      	movs	r2, #0
 8006888:	2100      	movs	r1, #0
 800688a:	f7fd fbb7 	bl	8003ffc <xQueueGenericSend>
		    		break;
 800688e:	e04c      	b.n	800692a <task_test+0x206>

	    		case Entry_B:

		    		/* Print out: Signal Entry B */
		    		LOGGER_LOG("  %s\r\n", p_task_test_signal_entry_b);
 8006890:	f7ff f92a 	bl	8005ae8 <vPortEnterCritical>
 8006894:	4b37      	ldr	r3, [pc, #220]	@ (8006974 <task_test+0x250>)
 8006896:	6818      	ldr	r0, [r3, #0]
 8006898:	4b45      	ldr	r3, [pc, #276]	@ (80069b0 <task_test+0x28c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a40      	ldr	r2, [pc, #256]	@ (80069a0 <task_test+0x27c>)
 800689e:	213f      	movs	r1, #63	@ 0x3f
 80068a0:	f000 fcbc 	bl	800721c <sniprintf>
 80068a4:	4603      	mov	r3, r0
 80068a6:	4a36      	ldr	r2, [pc, #216]	@ (8006980 <task_test+0x25c>)
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	4b32      	ldr	r3, [pc, #200]	@ (8006974 <task_test+0x250>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff fd9a 	bl	80063e8 <logger_log_print_>
 80068b4:	f7ff f94a 	bl	8005b4c <vPortExitCritical>
		    		xSemaphoreGive(binary_semaphore_entry_b_h);
 80068b8:	4b3e      	ldr	r3, [pc, #248]	@ (80069b4 <task_test+0x290>)
 80068ba:	6818      	ldr	r0, [r3, #0]
 80068bc:	2300      	movs	r3, #0
 80068be:	2200      	movs	r2, #0
 80068c0:	2100      	movs	r1, #0
 80068c2:	f7fd fb9b 	bl	8003ffc <xQueueGenericSend>
		    		break;
 80068c6:	e030      	b.n	800692a <task_test+0x206>
		    		
		    		case Exit_B:

		    		/* Print out: Signal Exit B */
		    		LOGGER_LOG("  %s\r\n", p_task_test_signal_exit_b);
 80068c8:	f7ff f90e 	bl	8005ae8 <vPortEnterCritical>
 80068cc:	4b29      	ldr	r3, [pc, #164]	@ (8006974 <task_test+0x250>)
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	4b39      	ldr	r3, [pc, #228]	@ (80069b8 <task_test+0x294>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a32      	ldr	r2, [pc, #200]	@ (80069a0 <task_test+0x27c>)
 80068d6:	213f      	movs	r1, #63	@ 0x3f
 80068d8:	f000 fca0 	bl	800721c <sniprintf>
 80068dc:	4603      	mov	r3, r0
 80068de:	4a28      	ldr	r2, [pc, #160]	@ (8006980 <task_test+0x25c>)
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	4b24      	ldr	r3, [pc, #144]	@ (8006974 <task_test+0x250>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff fd7e 	bl	80063e8 <logger_log_print_>
 80068ec:	f7ff f92e 	bl	8005b4c <vPortExitCritical>
		    		xSemaphoreGive(binary_semaphore_exit_b_h);
 80068f0:	4b32      	ldr	r3, [pc, #200]	@ (80069bc <task_test+0x298>)
 80068f2:	6818      	ldr	r0, [r3, #0]
 80068f4:	2300      	movs	r3, #0
 80068f6:	2200      	movs	r2, #0
 80068f8:	2100      	movs	r1, #0
 80068fa:	f7fd fb7f 	bl	8003ffc <xQueueGenericSend>
		    		break;
 80068fe:	e014      	b.n	800692a <task_test+0x206>

		    	case Error:
		    	default:

		    		/* Print out: Signal Error */
		    		LOGGER_LOG("  %s\r\n", p_task_test_signal_error);
 8006900:	f7ff f8f2 	bl	8005ae8 <vPortEnterCritical>
 8006904:	4b1b      	ldr	r3, [pc, #108]	@ (8006974 <task_test+0x250>)
 8006906:	6818      	ldr	r0, [r3, #0]
 8006908:	4b2d      	ldr	r3, [pc, #180]	@ (80069c0 <task_test+0x29c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a24      	ldr	r2, [pc, #144]	@ (80069a0 <task_test+0x27c>)
 800690e:	213f      	movs	r1, #63	@ 0x3f
 8006910:	f000 fc84 	bl	800721c <sniprintf>
 8006914:	4603      	mov	r3, r0
 8006916:	4a1a      	ldr	r2, [pc, #104]	@ (8006980 <task_test+0x25c>)
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	4b16      	ldr	r3, [pc, #88]	@ (8006974 <task_test+0x250>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff fd62 	bl	80063e8 <logger_log_print_>
 8006924:	f7ff f912 	bl	8005b4c <vPortExitCritical>
		    		break;
 8006928:	bf00      	nop
		    }

			/* Print out: Wait 5000mS */
//			LOGGER_LOG("  %s - %s %d\r\n", p_task_test_wait_5000mS, GET_NAME(g_task_test_cnt), (int)g_task_test_cnt);
			LOGGER_LOG("  %s\r\n", p_task_test_wait_5000mS);
 800692a:	f7ff f8dd 	bl	8005ae8 <vPortEnterCritical>
 800692e:	4b11      	ldr	r3, [pc, #68]	@ (8006974 <task_test+0x250>)
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	4b24      	ldr	r3, [pc, #144]	@ (80069c4 <task_test+0x2a0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a1a      	ldr	r2, [pc, #104]	@ (80069a0 <task_test+0x27c>)
 8006938:	213f      	movs	r1, #63	@ 0x3f
 800693a:	f000 fc6f 	bl	800721c <sniprintf>
 800693e:	4603      	mov	r3, r0
 8006940:	4a0f      	ldr	r2, [pc, #60]	@ (8006980 <task_test+0x25c>)
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	4b0b      	ldr	r3, [pc, #44]	@ (8006974 <task_test+0x250>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff fd4d 	bl	80063e8 <logger_log_print_>
 800694e:	f7ff f8fd 	bl	8005b4c <vPortExitCritical>

			/* We want this task to execute exactly every 5000 milliseconds. */
			vTaskDelayUntil(&last_wake_time, TASK_TEST_TICK_DEL_MAX);
 8006952:	f107 0308 	add.w	r3, r7, #8
 8006956:	f241 3188 	movw	r1, #5000	@ 0x1388
 800695a:	4618      	mov	r0, r3
 800695c:	f7fd ffea 	bl	8004934 <vTaskDelayUntil>
		for (index = 0; index < (sizeof(e_task_test_array)/sizeof(e_task_test_t)); index++)
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	3301      	adds	r3, #1
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2b03      	cmp	r3, #3
 800696a:	f67f af28 	bls.w	80067be <task_test+0x9a>
	{
 800696e:	e721      	b.n	80067b4 <task_test+0x90>
 8006970:	200046e8 	.word	0x200046e8
 8006974:	08008714 	.word	0x08008714
 8006978:	20000044 	.word	0x20000044
 800697c:	080086b0 	.word	0x080086b0
 8006980:	200046dc 	.word	0x200046dc
 8006984:	20000048 	.word	0x20000048
 8006988:	080086d8 	.word	0x080086d8
 800698c:	080086c8 	.word	0x080086c8
 8006990:	2000004c 	.word	0x2000004c
 8006994:	080086ec 	.word	0x080086ec
 8006998:	08008718 	.word	0x08008718
 800699c:	20000050 	.word	0x20000050
 80069a0:	080086f4 	.word	0x080086f4
 80069a4:	2000467c 	.word	0x2000467c
 80069a8:	20000054 	.word	0x20000054
 80069ac:	20004680 	.word	0x20004680
 80069b0:	20000058 	.word	0x20000058
 80069b4:	20004684 	.word	0x20004684
 80069b8:	2000005c 	.word	0x2000005c
 80069bc:	20004688 	.word	0x20004688
 80069c0:	20000060 	.word	0x20000060
 80069c4:	20000064 	.word	0x20000064

080069c8 <findslot>:
 80069c8:	4b0a      	ldr	r3, [pc, #40]	@ (80069f4 <findslot+0x2c>)
 80069ca:	b510      	push	{r4, lr}
 80069cc:	4604      	mov	r4, r0
 80069ce:	6818      	ldr	r0, [r3, #0]
 80069d0:	b118      	cbz	r0, 80069da <findslot+0x12>
 80069d2:	6a03      	ldr	r3, [r0, #32]
 80069d4:	b90b      	cbnz	r3, 80069da <findslot+0x12>
 80069d6:	f000 fbd9 	bl	800718c <__sinit>
 80069da:	2c13      	cmp	r4, #19
 80069dc:	d807      	bhi.n	80069ee <findslot+0x26>
 80069de:	4806      	ldr	r0, [pc, #24]	@ (80069f8 <findslot+0x30>)
 80069e0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80069e4:	3201      	adds	r2, #1
 80069e6:	d002      	beq.n	80069ee <findslot+0x26>
 80069e8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80069ec:	bd10      	pop	{r4, pc}
 80069ee:	2000      	movs	r0, #0
 80069f0:	e7fc      	b.n	80069ec <findslot+0x24>
 80069f2:	bf00      	nop
 80069f4:	2000007c 	.word	0x2000007c
 80069f8:	200046f8 	.word	0x200046f8

080069fc <error>:
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	4604      	mov	r4, r0
 8006a00:	f000 fd28 	bl	8007454 <__errno>
 8006a04:	2613      	movs	r6, #19
 8006a06:	4605      	mov	r5, r0
 8006a08:	2700      	movs	r7, #0
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	4639      	mov	r1, r7
 8006a0e:	beab      	bkpt	0x00ab
 8006a10:	4606      	mov	r6, r0
 8006a12:	602e      	str	r6, [r5, #0]
 8006a14:	4620      	mov	r0, r4
 8006a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a18 <checkerror>:
 8006a18:	1c43      	adds	r3, r0, #1
 8006a1a:	d101      	bne.n	8006a20 <checkerror+0x8>
 8006a1c:	f7ff bfee 	b.w	80069fc <error>
 8006a20:	4770      	bx	lr

08006a22 <_swiread>:
 8006a22:	b530      	push	{r4, r5, lr}
 8006a24:	b085      	sub	sp, #20
 8006a26:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006a2a:	9203      	str	r2, [sp, #12]
 8006a2c:	2406      	movs	r4, #6
 8006a2e:	ad01      	add	r5, sp, #4
 8006a30:	4620      	mov	r0, r4
 8006a32:	4629      	mov	r1, r5
 8006a34:	beab      	bkpt	0x00ab
 8006a36:	4604      	mov	r4, r0
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f7ff ffed 	bl	8006a18 <checkerror>
 8006a3e:	b005      	add	sp, #20
 8006a40:	bd30      	pop	{r4, r5, pc}

08006a42 <_read>:
 8006a42:	b570      	push	{r4, r5, r6, lr}
 8006a44:	460e      	mov	r6, r1
 8006a46:	4614      	mov	r4, r2
 8006a48:	f7ff ffbe 	bl	80069c8 <findslot>
 8006a4c:	4605      	mov	r5, r0
 8006a4e:	b930      	cbnz	r0, 8006a5e <_read+0x1c>
 8006a50:	f000 fd00 	bl	8007454 <__errno>
 8006a54:	2309      	movs	r3, #9
 8006a56:	6003      	str	r3, [r0, #0]
 8006a58:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5c:	bd70      	pop	{r4, r5, r6, pc}
 8006a5e:	6800      	ldr	r0, [r0, #0]
 8006a60:	4622      	mov	r2, r4
 8006a62:	4631      	mov	r1, r6
 8006a64:	f7ff ffdd 	bl	8006a22 <_swiread>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d0f5      	beq.n	8006a58 <_read+0x16>
 8006a6c:	686b      	ldr	r3, [r5, #4]
 8006a6e:	1a20      	subs	r0, r4, r0
 8006a70:	4403      	add	r3, r0
 8006a72:	606b      	str	r3, [r5, #4]
 8006a74:	e7f2      	b.n	8006a5c <_read+0x1a>

08006a76 <_swilseek>:
 8006a76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a78:	460c      	mov	r4, r1
 8006a7a:	4616      	mov	r6, r2
 8006a7c:	f7ff ffa4 	bl	80069c8 <findslot>
 8006a80:	4605      	mov	r5, r0
 8006a82:	b940      	cbnz	r0, 8006a96 <_swilseek+0x20>
 8006a84:	f000 fce6 	bl	8007454 <__errno>
 8006a88:	2309      	movs	r3, #9
 8006a8a:	6003      	str	r3, [r0, #0]
 8006a8c:	f04f 34ff 	mov.w	r4, #4294967295
 8006a90:	4620      	mov	r0, r4
 8006a92:	b003      	add	sp, #12
 8006a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a96:	2e02      	cmp	r6, #2
 8006a98:	d903      	bls.n	8006aa2 <_swilseek+0x2c>
 8006a9a:	f000 fcdb 	bl	8007454 <__errno>
 8006a9e:	2316      	movs	r3, #22
 8006aa0:	e7f3      	b.n	8006a8a <_swilseek+0x14>
 8006aa2:	2e01      	cmp	r6, #1
 8006aa4:	d112      	bne.n	8006acc <_swilseek+0x56>
 8006aa6:	6843      	ldr	r3, [r0, #4]
 8006aa8:	18e4      	adds	r4, r4, r3
 8006aaa:	d4f6      	bmi.n	8006a9a <_swilseek+0x24>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	260a      	movs	r6, #10
 8006ab0:	e9cd 3400 	strd	r3, r4, [sp]
 8006ab4:	466f      	mov	r7, sp
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	4639      	mov	r1, r7
 8006aba:	beab      	bkpt	0x00ab
 8006abc:	4606      	mov	r6, r0
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f7ff ffaa 	bl	8006a18 <checkerror>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	dbe1      	blt.n	8006a8c <_swilseek+0x16>
 8006ac8:	606c      	str	r4, [r5, #4]
 8006aca:	e7e1      	b.n	8006a90 <_swilseek+0x1a>
 8006acc:	2e02      	cmp	r6, #2
 8006ace:	6803      	ldr	r3, [r0, #0]
 8006ad0:	d1ec      	bne.n	8006aac <_swilseek+0x36>
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	260c      	movs	r6, #12
 8006ad6:	466f      	mov	r7, sp
 8006ad8:	4630      	mov	r0, r6
 8006ada:	4639      	mov	r1, r7
 8006adc:	beab      	bkpt	0x00ab
 8006ade:	4606      	mov	r6, r0
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f7ff ff99 	bl	8006a18 <checkerror>
 8006ae6:	1c43      	adds	r3, r0, #1
 8006ae8:	d0d0      	beq.n	8006a8c <_swilseek+0x16>
 8006aea:	4404      	add	r4, r0
 8006aec:	e7de      	b.n	8006aac <_swilseek+0x36>

08006aee <_lseek>:
 8006aee:	f7ff bfc2 	b.w	8006a76 <_swilseek>

08006af2 <_swiwrite>:
 8006af2:	b530      	push	{r4, r5, lr}
 8006af4:	b085      	sub	sp, #20
 8006af6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006afa:	9203      	str	r2, [sp, #12]
 8006afc:	2405      	movs	r4, #5
 8006afe:	ad01      	add	r5, sp, #4
 8006b00:	4620      	mov	r0, r4
 8006b02:	4629      	mov	r1, r5
 8006b04:	beab      	bkpt	0x00ab
 8006b06:	4604      	mov	r4, r0
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f7ff ff85 	bl	8006a18 <checkerror>
 8006b0e:	b005      	add	sp, #20
 8006b10:	bd30      	pop	{r4, r5, pc}

08006b12 <_write>:
 8006b12:	b570      	push	{r4, r5, r6, lr}
 8006b14:	460e      	mov	r6, r1
 8006b16:	4615      	mov	r5, r2
 8006b18:	f7ff ff56 	bl	80069c8 <findslot>
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	b930      	cbnz	r0, 8006b2e <_write+0x1c>
 8006b20:	f000 fc98 	bl	8007454 <__errno>
 8006b24:	2309      	movs	r3, #9
 8006b26:	6003      	str	r3, [r0, #0]
 8006b28:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2c:	bd70      	pop	{r4, r5, r6, pc}
 8006b2e:	6800      	ldr	r0, [r0, #0]
 8006b30:	462a      	mov	r2, r5
 8006b32:	4631      	mov	r1, r6
 8006b34:	f7ff ffdd 	bl	8006af2 <_swiwrite>
 8006b38:	1e03      	subs	r3, r0, #0
 8006b3a:	dbf5      	blt.n	8006b28 <_write+0x16>
 8006b3c:	6862      	ldr	r2, [r4, #4]
 8006b3e:	1ae8      	subs	r0, r5, r3
 8006b40:	4402      	add	r2, r0
 8006b42:	42ab      	cmp	r3, r5
 8006b44:	6062      	str	r2, [r4, #4]
 8006b46:	d1f1      	bne.n	8006b2c <_write+0x1a>
 8006b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	f7ff bf55 	b.w	80069fc <error>

08006b52 <_swiclose>:
 8006b52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b54:	2402      	movs	r4, #2
 8006b56:	9001      	str	r0, [sp, #4]
 8006b58:	ad01      	add	r5, sp, #4
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	beab      	bkpt	0x00ab
 8006b60:	4604      	mov	r4, r0
 8006b62:	4620      	mov	r0, r4
 8006b64:	f7ff ff58 	bl	8006a18 <checkerror>
 8006b68:	b003      	add	sp, #12
 8006b6a:	bd30      	pop	{r4, r5, pc}

08006b6c <_close>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	4605      	mov	r5, r0
 8006b70:	f7ff ff2a 	bl	80069c8 <findslot>
 8006b74:	4604      	mov	r4, r0
 8006b76:	b930      	cbnz	r0, 8006b86 <_close+0x1a>
 8006b78:	f000 fc6c 	bl	8007454 <__errno>
 8006b7c:	2309      	movs	r3, #9
 8006b7e:	6003      	str	r3, [r0, #0]
 8006b80:	f04f 30ff 	mov.w	r0, #4294967295
 8006b84:	bd38      	pop	{r3, r4, r5, pc}
 8006b86:	3d01      	subs	r5, #1
 8006b88:	2d01      	cmp	r5, #1
 8006b8a:	d809      	bhi.n	8006ba0 <_close+0x34>
 8006b8c:	4b07      	ldr	r3, [pc, #28]	@ (8006bac <_close+0x40>)
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d104      	bne.n	8006ba0 <_close+0x34>
 8006b96:	f04f 33ff 	mov.w	r3, #4294967295
 8006b9a:	6023      	str	r3, [r4, #0]
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	e7f1      	b.n	8006b84 <_close+0x18>
 8006ba0:	6820      	ldr	r0, [r4, #0]
 8006ba2:	f7ff ffd6 	bl	8006b52 <_swiclose>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d0f5      	beq.n	8006b96 <_close+0x2a>
 8006baa:	e7eb      	b.n	8006b84 <_close+0x18>
 8006bac:	200046f8 	.word	0x200046f8

08006bb0 <_swistat>:
 8006bb0:	b570      	push	{r4, r5, r6, lr}
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	f7ff ff08 	bl	80069c8 <findslot>
 8006bb8:	4605      	mov	r5, r0
 8006bba:	b930      	cbnz	r0, 8006bca <_swistat+0x1a>
 8006bbc:	f000 fc4a 	bl	8007454 <__errno>
 8006bc0:	2309      	movs	r3, #9
 8006bc2:	6003      	str	r3, [r0, #0]
 8006bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc8:	bd70      	pop	{r4, r5, r6, pc}
 8006bca:	6863      	ldr	r3, [r4, #4]
 8006bcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006bd0:	6063      	str	r3, [r4, #4]
 8006bd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bd6:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006bd8:	260c      	movs	r6, #12
 8006bda:	4630      	mov	r0, r6
 8006bdc:	4629      	mov	r1, r5
 8006bde:	beab      	bkpt	0x00ab
 8006be0:	4605      	mov	r5, r0
 8006be2:	4628      	mov	r0, r5
 8006be4:	f7ff ff18 	bl	8006a18 <checkerror>
 8006be8:	1c43      	adds	r3, r0, #1
 8006bea:	d0eb      	beq.n	8006bc4 <_swistat+0x14>
 8006bec:	6120      	str	r0, [r4, #16]
 8006bee:	2000      	movs	r0, #0
 8006bf0:	e7ea      	b.n	8006bc8 <_swistat+0x18>

08006bf2 <_fstat>:
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	b510      	push	{r4, lr}
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	2258      	movs	r2, #88	@ 0x58
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fb84 	bl	800730a <memset>
 8006c02:	4601      	mov	r1, r0
 8006c04:	4620      	mov	r0, r4
 8006c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c0a:	f7ff bfd1 	b.w	8006bb0 <_swistat>

08006c0e <_stat>:
 8006c0e:	b538      	push	{r3, r4, r5, lr}
 8006c10:	460d      	mov	r5, r1
 8006c12:	4604      	mov	r4, r0
 8006c14:	2258      	movs	r2, #88	@ 0x58
 8006c16:	2100      	movs	r1, #0
 8006c18:	4628      	mov	r0, r5
 8006c1a:	f000 fb76 	bl	800730a <memset>
 8006c1e:	4620      	mov	r0, r4
 8006c20:	2100      	movs	r1, #0
 8006c22:	f000 f811 	bl	8006c48 <_swiopen>
 8006c26:	1c43      	adds	r3, r0, #1
 8006c28:	4604      	mov	r4, r0
 8006c2a:	d00b      	beq.n	8006c44 <_stat+0x36>
 8006c2c:	686b      	ldr	r3, [r5, #4]
 8006c2e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006c32:	606b      	str	r3, [r5, #4]
 8006c34:	4629      	mov	r1, r5
 8006c36:	f7ff ffbb 	bl	8006bb0 <_swistat>
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f7ff ff95 	bl	8006b6c <_close>
 8006c42:	462c      	mov	r4, r5
 8006c44:	4620      	mov	r0, r4
 8006c46:	bd38      	pop	{r3, r4, r5, pc}

08006c48 <_swiopen>:
 8006c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c4c:	4f29      	ldr	r7, [pc, #164]	@ (8006cf4 <_swiopen+0xac>)
 8006c4e:	b096      	sub	sp, #88	@ 0x58
 8006c50:	4682      	mov	sl, r0
 8006c52:	460e      	mov	r6, r1
 8006c54:	2400      	movs	r4, #0
 8006c56:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8006c60:	d00c      	beq.n	8006c7c <_swiopen+0x34>
 8006c62:	3401      	adds	r4, #1
 8006c64:	2c14      	cmp	r4, #20
 8006c66:	d1f6      	bne.n	8006c56 <_swiopen+0xe>
 8006c68:	f000 fbf4 	bl	8007454 <__errno>
 8006c6c:	2318      	movs	r3, #24
 8006c6e:	6003      	str	r3, [r0, #0]
 8006c70:	f04f 34ff 	mov.w	r4, #4294967295
 8006c74:	4620      	mov	r0, r4
 8006c76:	b016      	add	sp, #88	@ 0x58
 8006c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c7c:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8006c80:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006c84:	46e9      	mov	r9, sp
 8006c86:	d109      	bne.n	8006c9c <_swiopen+0x54>
 8006c88:	4649      	mov	r1, r9
 8006c8a:	4650      	mov	r0, sl
 8006c8c:	f7ff ffbf 	bl	8006c0e <_stat>
 8006c90:	3001      	adds	r0, #1
 8006c92:	d003      	beq.n	8006c9c <_swiopen+0x54>
 8006c94:	f000 fbde 	bl	8007454 <__errno>
 8006c98:	2311      	movs	r3, #17
 8006c9a:	e7e8      	b.n	8006c6e <_swiopen+0x26>
 8006c9c:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8006ca0:	f240 6301 	movw	r3, #1537	@ 0x601
 8006ca4:	07b2      	lsls	r2, r6, #30
 8006ca6:	bf48      	it	mi
 8006ca8:	f045 0502 	orrmi.w	r5, r5, #2
 8006cac:	421e      	tst	r6, r3
 8006cae:	bf18      	it	ne
 8006cb0:	f045 0504 	orrne.w	r5, r5, #4
 8006cb4:	0733      	lsls	r3, r6, #28
 8006cb6:	bf48      	it	mi
 8006cb8:	f025 0504 	bicmi.w	r5, r5, #4
 8006cbc:	4650      	mov	r0, sl
 8006cbe:	bf48      	it	mi
 8006cc0:	f045 0508 	orrmi.w	r5, r5, #8
 8006cc4:	f8cd a000 	str.w	sl, [sp]
 8006cc8:	f7f9 fa92 	bl	80001f0 <strlen>
 8006ccc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8006cd0:	2501      	movs	r5, #1
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	beab      	bkpt	0x00ab
 8006cd8:	4605      	mov	r5, r0
 8006cda:	2d00      	cmp	r5, #0
 8006cdc:	db05      	blt.n	8006cea <_swiopen+0xa2>
 8006cde:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8006ce2:	4447      	add	r7, r8
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	607b      	str	r3, [r7, #4]
 8006ce8:	e7c4      	b.n	8006c74 <_swiopen+0x2c>
 8006cea:	4628      	mov	r0, r5
 8006cec:	f7ff fe86 	bl	80069fc <error>
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	e7bf      	b.n	8006c74 <_swiopen+0x2c>
 8006cf4:	200046f8 	.word	0x200046f8

08006cf8 <_get_semihosting_exts>:
 8006cf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	460f      	mov	r7, r1
 8006d00:	4829      	ldr	r0, [pc, #164]	@ (8006da8 <_get_semihosting_exts+0xb0>)
 8006d02:	2100      	movs	r1, #0
 8006d04:	4615      	mov	r5, r2
 8006d06:	f7ff ff9f 	bl	8006c48 <_swiopen>
 8006d0a:	462a      	mov	r2, r5
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	2100      	movs	r1, #0
 8006d10:	4630      	mov	r0, r6
 8006d12:	f000 fafa 	bl	800730a <memset>
 8006d16:	1c63      	adds	r3, r4, #1
 8006d18:	d014      	beq.n	8006d44 <_get_semihosting_exts+0x4c>
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f7ff fe54 	bl	80069c8 <findslot>
 8006d20:	f04f 080c 	mov.w	r8, #12
 8006d24:	4681      	mov	r9, r0
 8006d26:	4640      	mov	r0, r8
 8006d28:	4649      	mov	r1, r9
 8006d2a:	beab      	bkpt	0x00ab
 8006d2c:	4680      	mov	r8, r0
 8006d2e:	4640      	mov	r0, r8
 8006d30:	f7ff fe72 	bl	8006a18 <checkerror>
 8006d34:	2803      	cmp	r0, #3
 8006d36:	dd02      	ble.n	8006d3e <_get_semihosting_exts+0x46>
 8006d38:	1ec3      	subs	r3, r0, #3
 8006d3a:	42ab      	cmp	r3, r5
 8006d3c:	dc07      	bgt.n	8006d4e <_get_semihosting_exts+0x56>
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f7ff ff14 	bl	8006b6c <_close>
 8006d44:	f04f 30ff 	mov.w	r0, #4294967295
 8006d48:	b003      	add	sp, #12
 8006d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d4e:	2204      	movs	r2, #4
 8006d50:	eb0d 0102 	add.w	r1, sp, r2
 8006d54:	4620      	mov	r0, r4
 8006d56:	f7ff fe74 	bl	8006a42 <_read>
 8006d5a:	2803      	cmp	r0, #3
 8006d5c:	ddef      	ble.n	8006d3e <_get_semihosting_exts+0x46>
 8006d5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006d62:	2b53      	cmp	r3, #83	@ 0x53
 8006d64:	d1eb      	bne.n	8006d3e <_get_semihosting_exts+0x46>
 8006d66:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006d6a:	2b48      	cmp	r3, #72	@ 0x48
 8006d6c:	d1e7      	bne.n	8006d3e <_get_semihosting_exts+0x46>
 8006d6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006d72:	2b46      	cmp	r3, #70	@ 0x46
 8006d74:	d1e3      	bne.n	8006d3e <_get_semihosting_exts+0x46>
 8006d76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006d7a:	2b42      	cmp	r3, #66	@ 0x42
 8006d7c:	d1df      	bne.n	8006d3e <_get_semihosting_exts+0x46>
 8006d7e:	2201      	movs	r2, #1
 8006d80:	4639      	mov	r1, r7
 8006d82:	4620      	mov	r0, r4
 8006d84:	f7ff fe77 	bl	8006a76 <_swilseek>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	dbd8      	blt.n	8006d3e <_get_semihosting_exts+0x46>
 8006d8c:	462a      	mov	r2, r5
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4620      	mov	r0, r4
 8006d92:	f7ff fe56 	bl	8006a42 <_read>
 8006d96:	4605      	mov	r5, r0
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f7ff fee7 	bl	8006b6c <_close>
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f7ff fe3a 	bl	8006a18 <checkerror>
 8006da4:	e7d0      	b.n	8006d48 <_get_semihosting_exts+0x50>
 8006da6:	bf00      	nop
 8006da8:	0800871c 	.word	0x0800871c

08006dac <initialise_semihosting_exts>:
 8006dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dae:	4d0a      	ldr	r5, [pc, #40]	@ (8006dd8 <initialise_semihosting_exts+0x2c>)
 8006db0:	4c0a      	ldr	r4, [pc, #40]	@ (8006ddc <initialise_semihosting_exts+0x30>)
 8006db2:	2100      	movs	r1, #0
 8006db4:	2201      	movs	r2, #1
 8006db6:	a801      	add	r0, sp, #4
 8006db8:	6029      	str	r1, [r5, #0]
 8006dba:	6022      	str	r2, [r4, #0]
 8006dbc:	f7ff ff9c 	bl	8006cf8 <_get_semihosting_exts>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	dd07      	ble.n	8006dd4 <initialise_semihosting_exts+0x28>
 8006dc4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006dc8:	f003 0201 	and.w	r2, r3, #1
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	602a      	str	r2, [r5, #0]
 8006dd2:	6023      	str	r3, [r4, #0]
 8006dd4:	b003      	add	sp, #12
 8006dd6:	bd30      	pop	{r4, r5, pc}
 8006dd8:	2000006c 	.word	0x2000006c
 8006ddc:	20000068 	.word	0x20000068

08006de0 <_has_ext_stdout_stderr>:
 8006de0:	b510      	push	{r4, lr}
 8006de2:	4c04      	ldr	r4, [pc, #16]	@ (8006df4 <_has_ext_stdout_stderr+0x14>)
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	da01      	bge.n	8006dee <_has_ext_stdout_stderr+0xe>
 8006dea:	f7ff ffdf 	bl	8006dac <initialise_semihosting_exts>
 8006dee:	6820      	ldr	r0, [r4, #0]
 8006df0:	bd10      	pop	{r4, pc}
 8006df2:	bf00      	nop
 8006df4:	20000068 	.word	0x20000068

08006df8 <initialise_monitor_handles>:
 8006df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	b085      	sub	sp, #20
 8006dfe:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8006eb0 <initialise_monitor_handles+0xb8>
 8006e02:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e06:	2303      	movs	r3, #3
 8006e08:	2400      	movs	r4, #0
 8006e0a:	9303      	str	r3, [sp, #12]
 8006e0c:	af01      	add	r7, sp, #4
 8006e0e:	9402      	str	r4, [sp, #8]
 8006e10:	2501      	movs	r5, #1
 8006e12:	4628      	mov	r0, r5
 8006e14:	4639      	mov	r1, r7
 8006e16:	beab      	bkpt	0x00ab
 8006e18:	4605      	mov	r5, r0
 8006e1a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006eb4 <initialise_monitor_handles+0xbc>
 8006e1e:	4623      	mov	r3, r4
 8006e20:	4c20      	ldr	r4, [pc, #128]	@ (8006ea4 <initialise_monitor_handles+0xac>)
 8006e22:	f8c8 5000 	str.w	r5, [r8]
 8006e26:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	2b14      	cmp	r3, #20
 8006e32:	d1fa      	bne.n	8006e2a <initialise_monitor_handles+0x32>
 8006e34:	f7ff ffd4 	bl	8006de0 <_has_ext_stdout_stderr>
 8006e38:	4d1b      	ldr	r5, [pc, #108]	@ (8006ea8 <initialise_monitor_handles+0xb0>)
 8006e3a:	b1d0      	cbz	r0, 8006e72 <initialise_monitor_handles+0x7a>
 8006e3c:	f04f 0a03 	mov.w	sl, #3
 8006e40:	2304      	movs	r3, #4
 8006e42:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e46:	2601      	movs	r6, #1
 8006e48:	f8cd a00c 	str.w	sl, [sp, #12]
 8006e4c:	9302      	str	r3, [sp, #8]
 8006e4e:	4630      	mov	r0, r6
 8006e50:	4639      	mov	r1, r7
 8006e52:	beab      	bkpt	0x00ab
 8006e54:	4683      	mov	fp, r0
 8006e56:	4b15      	ldr	r3, [pc, #84]	@ (8006eac <initialise_monitor_handles+0xb4>)
 8006e58:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e5c:	f8c3 b000 	str.w	fp, [r3]
 8006e60:	2308      	movs	r3, #8
 8006e62:	f8cd a00c 	str.w	sl, [sp, #12]
 8006e66:	9302      	str	r3, [sp, #8]
 8006e68:	4630      	mov	r0, r6
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	beab      	bkpt	0x00ab
 8006e6e:	4606      	mov	r6, r0
 8006e70:	602e      	str	r6, [r5, #0]
 8006e72:	682b      	ldr	r3, [r5, #0]
 8006e74:	3301      	adds	r3, #1
 8006e76:	bf02      	ittt	eq
 8006e78:	4b0c      	ldreq	r3, [pc, #48]	@ (8006eac <initialise_monitor_handles+0xb4>)
 8006e7a:	681b      	ldreq	r3, [r3, #0]
 8006e7c:	602b      	streq	r3, [r5, #0]
 8006e7e:	2600      	movs	r6, #0
 8006e80:	f8d8 3000 	ldr.w	r3, [r8]
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	6066      	str	r6, [r4, #4]
 8006e88:	f7ff ffaa 	bl	8006de0 <_has_ext_stdout_stderr>
 8006e8c:	b130      	cbz	r0, 8006e9c <initialise_monitor_handles+0xa4>
 8006e8e:	4b07      	ldr	r3, [pc, #28]	@ (8006eac <initialise_monitor_handles+0xb4>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006e96:	682b      	ldr	r3, [r5, #0]
 8006e98:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006e9c:	b005      	add	sp, #20
 8006e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea2:	bf00      	nop
 8006ea4:	200046f8 	.word	0x200046f8
 8006ea8:	200046ec 	.word	0x200046ec
 8006eac:	200046f0 	.word	0x200046f0
 8006eb0:	08008732 	.word	0x08008732
 8006eb4:	200046f4 	.word	0x200046f4

08006eb8 <_isatty>:
 8006eb8:	b570      	push	{r4, r5, r6, lr}
 8006eba:	f7ff fd85 	bl	80069c8 <findslot>
 8006ebe:	2409      	movs	r4, #9
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	b920      	cbnz	r0, 8006ece <_isatty+0x16>
 8006ec4:	f000 fac6 	bl	8007454 <__errno>
 8006ec8:	6004      	str	r4, [r0, #0]
 8006eca:	2000      	movs	r0, #0
 8006ecc:	bd70      	pop	{r4, r5, r6, pc}
 8006ece:	4620      	mov	r0, r4
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	beab      	bkpt	0x00ab
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	2c01      	cmp	r4, #1
 8006ed8:	4620      	mov	r0, r4
 8006eda:	d0f7      	beq.n	8006ecc <_isatty+0x14>
 8006edc:	f000 faba 	bl	8007454 <__errno>
 8006ee0:	2513      	movs	r5, #19
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	2600      	movs	r6, #0
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	4631      	mov	r1, r6
 8006eea:	beab      	bkpt	0x00ab
 8006eec:	4605      	mov	r5, r0
 8006eee:	6025      	str	r5, [r4, #0]
 8006ef0:	e7eb      	b.n	8006eca <_isatty+0x12>
	...

08006ef4 <__sflush_r>:
 8006ef4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006efc:	0716      	lsls	r6, r2, #28
 8006efe:	4605      	mov	r5, r0
 8006f00:	460c      	mov	r4, r1
 8006f02:	d454      	bmi.n	8006fae <__sflush_r+0xba>
 8006f04:	684b      	ldr	r3, [r1, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	dc02      	bgt.n	8006f10 <__sflush_r+0x1c>
 8006f0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	dd48      	ble.n	8006fa2 <__sflush_r+0xae>
 8006f10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f12:	2e00      	cmp	r6, #0
 8006f14:	d045      	beq.n	8006fa2 <__sflush_r+0xae>
 8006f16:	2300      	movs	r3, #0
 8006f18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f1c:	682f      	ldr	r7, [r5, #0]
 8006f1e:	6a21      	ldr	r1, [r4, #32]
 8006f20:	602b      	str	r3, [r5, #0]
 8006f22:	d030      	beq.n	8006f86 <__sflush_r+0x92>
 8006f24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f26:	89a3      	ldrh	r3, [r4, #12]
 8006f28:	0759      	lsls	r1, r3, #29
 8006f2a:	d505      	bpl.n	8006f38 <__sflush_r+0x44>
 8006f2c:	6863      	ldr	r3, [r4, #4]
 8006f2e:	1ad2      	subs	r2, r2, r3
 8006f30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f32:	b10b      	cbz	r3, 8006f38 <__sflush_r+0x44>
 8006f34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f36:	1ad2      	subs	r2, r2, r3
 8006f38:	2300      	movs	r3, #0
 8006f3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f3c:	6a21      	ldr	r1, [r4, #32]
 8006f3e:	4628      	mov	r0, r5
 8006f40:	47b0      	blx	r6
 8006f42:	1c43      	adds	r3, r0, #1
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	d106      	bne.n	8006f56 <__sflush_r+0x62>
 8006f48:	6829      	ldr	r1, [r5, #0]
 8006f4a:	291d      	cmp	r1, #29
 8006f4c:	d82b      	bhi.n	8006fa6 <__sflush_r+0xb2>
 8006f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8006ff8 <__sflush_r+0x104>)
 8006f50:	410a      	asrs	r2, r1
 8006f52:	07d6      	lsls	r6, r2, #31
 8006f54:	d427      	bmi.n	8006fa6 <__sflush_r+0xb2>
 8006f56:	2200      	movs	r2, #0
 8006f58:	6062      	str	r2, [r4, #4]
 8006f5a:	04d9      	lsls	r1, r3, #19
 8006f5c:	6922      	ldr	r2, [r4, #16]
 8006f5e:	6022      	str	r2, [r4, #0]
 8006f60:	d504      	bpl.n	8006f6c <__sflush_r+0x78>
 8006f62:	1c42      	adds	r2, r0, #1
 8006f64:	d101      	bne.n	8006f6a <__sflush_r+0x76>
 8006f66:	682b      	ldr	r3, [r5, #0]
 8006f68:	b903      	cbnz	r3, 8006f6c <__sflush_r+0x78>
 8006f6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f6e:	602f      	str	r7, [r5, #0]
 8006f70:	b1b9      	cbz	r1, 8006fa2 <__sflush_r+0xae>
 8006f72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f76:	4299      	cmp	r1, r3
 8006f78:	d002      	beq.n	8006f80 <__sflush_r+0x8c>
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f000 faa6 	bl	80074cc <_free_r>
 8006f80:	2300      	movs	r3, #0
 8006f82:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f84:	e00d      	b.n	8006fa2 <__sflush_r+0xae>
 8006f86:	2301      	movs	r3, #1
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b0      	blx	r6
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	1c50      	adds	r0, r2, #1
 8006f90:	d1c9      	bne.n	8006f26 <__sflush_r+0x32>
 8006f92:	682b      	ldr	r3, [r5, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d0c6      	beq.n	8006f26 <__sflush_r+0x32>
 8006f98:	2b1d      	cmp	r3, #29
 8006f9a:	d001      	beq.n	8006fa0 <__sflush_r+0xac>
 8006f9c:	2b16      	cmp	r3, #22
 8006f9e:	d11e      	bne.n	8006fde <__sflush_r+0xea>
 8006fa0:	602f      	str	r7, [r5, #0]
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	e022      	b.n	8006fec <__sflush_r+0xf8>
 8006fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006faa:	b21b      	sxth	r3, r3
 8006fac:	e01b      	b.n	8006fe6 <__sflush_r+0xf2>
 8006fae:	690f      	ldr	r7, [r1, #16]
 8006fb0:	2f00      	cmp	r7, #0
 8006fb2:	d0f6      	beq.n	8006fa2 <__sflush_r+0xae>
 8006fb4:	0793      	lsls	r3, r2, #30
 8006fb6:	680e      	ldr	r6, [r1, #0]
 8006fb8:	bf08      	it	eq
 8006fba:	694b      	ldreq	r3, [r1, #20]
 8006fbc:	600f      	str	r7, [r1, #0]
 8006fbe:	bf18      	it	ne
 8006fc0:	2300      	movne	r3, #0
 8006fc2:	eba6 0807 	sub.w	r8, r6, r7
 8006fc6:	608b      	str	r3, [r1, #8]
 8006fc8:	f1b8 0f00 	cmp.w	r8, #0
 8006fcc:	dde9      	ble.n	8006fa2 <__sflush_r+0xae>
 8006fce:	6a21      	ldr	r1, [r4, #32]
 8006fd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006fd2:	4643      	mov	r3, r8
 8006fd4:	463a      	mov	r2, r7
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	47b0      	blx	r6
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	dc08      	bgt.n	8006ff0 <__sflush_r+0xfc>
 8006fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fe6:	81a3      	strh	r3, [r4, #12]
 8006fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ff0:	4407      	add	r7, r0
 8006ff2:	eba8 0800 	sub.w	r8, r8, r0
 8006ff6:	e7e7      	b.n	8006fc8 <__sflush_r+0xd4>
 8006ff8:	dfbffffe 	.word	0xdfbffffe

08006ffc <_fflush_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	690b      	ldr	r3, [r1, #16]
 8007000:	4605      	mov	r5, r0
 8007002:	460c      	mov	r4, r1
 8007004:	b913      	cbnz	r3, 800700c <_fflush_r+0x10>
 8007006:	2500      	movs	r5, #0
 8007008:	4628      	mov	r0, r5
 800700a:	bd38      	pop	{r3, r4, r5, pc}
 800700c:	b118      	cbz	r0, 8007016 <_fflush_r+0x1a>
 800700e:	6a03      	ldr	r3, [r0, #32]
 8007010:	b90b      	cbnz	r3, 8007016 <_fflush_r+0x1a>
 8007012:	f000 f8bb 	bl	800718c <__sinit>
 8007016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0f3      	beq.n	8007006 <_fflush_r+0xa>
 800701e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007020:	07d0      	lsls	r0, r2, #31
 8007022:	d404      	bmi.n	800702e <_fflush_r+0x32>
 8007024:	0599      	lsls	r1, r3, #22
 8007026:	d402      	bmi.n	800702e <_fflush_r+0x32>
 8007028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800702a:	f000 fa3e 	bl	80074aa <__retarget_lock_acquire_recursive>
 800702e:	4628      	mov	r0, r5
 8007030:	4621      	mov	r1, r4
 8007032:	f7ff ff5f 	bl	8006ef4 <__sflush_r>
 8007036:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007038:	07da      	lsls	r2, r3, #31
 800703a:	4605      	mov	r5, r0
 800703c:	d4e4      	bmi.n	8007008 <_fflush_r+0xc>
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	059b      	lsls	r3, r3, #22
 8007042:	d4e1      	bmi.n	8007008 <_fflush_r+0xc>
 8007044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007046:	f000 fa31 	bl	80074ac <__retarget_lock_release_recursive>
 800704a:	e7dd      	b.n	8007008 <_fflush_r+0xc>

0800704c <fflush>:
 800704c:	4601      	mov	r1, r0
 800704e:	b920      	cbnz	r0, 800705a <fflush+0xe>
 8007050:	4a04      	ldr	r2, [pc, #16]	@ (8007064 <fflush+0x18>)
 8007052:	4905      	ldr	r1, [pc, #20]	@ (8007068 <fflush+0x1c>)
 8007054:	4805      	ldr	r0, [pc, #20]	@ (800706c <fflush+0x20>)
 8007056:	f000 b8b1 	b.w	80071bc <_fwalk_sglue>
 800705a:	4b05      	ldr	r3, [pc, #20]	@ (8007070 <fflush+0x24>)
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	f7ff bfcd 	b.w	8006ffc <_fflush_r>
 8007062:	bf00      	nop
 8007064:	20000070 	.word	0x20000070
 8007068:	08006ffd 	.word	0x08006ffd
 800706c:	20000080 	.word	0x20000080
 8007070:	2000007c 	.word	0x2000007c

08007074 <std>:
 8007074:	2300      	movs	r3, #0
 8007076:	b510      	push	{r4, lr}
 8007078:	4604      	mov	r4, r0
 800707a:	e9c0 3300 	strd	r3, r3, [r0]
 800707e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007082:	6083      	str	r3, [r0, #8]
 8007084:	8181      	strh	r1, [r0, #12]
 8007086:	6643      	str	r3, [r0, #100]	@ 0x64
 8007088:	81c2      	strh	r2, [r0, #14]
 800708a:	6183      	str	r3, [r0, #24]
 800708c:	4619      	mov	r1, r3
 800708e:	2208      	movs	r2, #8
 8007090:	305c      	adds	r0, #92	@ 0x5c
 8007092:	f000 f93a 	bl	800730a <memset>
 8007096:	4b0d      	ldr	r3, [pc, #52]	@ (80070cc <std+0x58>)
 8007098:	6263      	str	r3, [r4, #36]	@ 0x24
 800709a:	4b0d      	ldr	r3, [pc, #52]	@ (80070d0 <std+0x5c>)
 800709c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800709e:	4b0d      	ldr	r3, [pc, #52]	@ (80070d4 <std+0x60>)
 80070a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070a2:	4b0d      	ldr	r3, [pc, #52]	@ (80070d8 <std+0x64>)
 80070a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80070a6:	4b0d      	ldr	r3, [pc, #52]	@ (80070dc <std+0x68>)
 80070a8:	6224      	str	r4, [r4, #32]
 80070aa:	429c      	cmp	r4, r3
 80070ac:	d006      	beq.n	80070bc <std+0x48>
 80070ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070b2:	4294      	cmp	r4, r2
 80070b4:	d002      	beq.n	80070bc <std+0x48>
 80070b6:	33d0      	adds	r3, #208	@ 0xd0
 80070b8:	429c      	cmp	r4, r3
 80070ba:	d105      	bne.n	80070c8 <std+0x54>
 80070bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c4:	f000 b9f0 	b.w	80074a8 <__retarget_lock_init_recursive>
 80070c8:	bd10      	pop	{r4, pc}
 80070ca:	bf00      	nop
 80070cc:	08007285 	.word	0x08007285
 80070d0:	080072a7 	.word	0x080072a7
 80070d4:	080072df 	.word	0x080072df
 80070d8:	08007303 	.word	0x08007303
 80070dc:	20004798 	.word	0x20004798

080070e0 <stdio_exit_handler>:
 80070e0:	4a02      	ldr	r2, [pc, #8]	@ (80070ec <stdio_exit_handler+0xc>)
 80070e2:	4903      	ldr	r1, [pc, #12]	@ (80070f0 <stdio_exit_handler+0x10>)
 80070e4:	4803      	ldr	r0, [pc, #12]	@ (80070f4 <stdio_exit_handler+0x14>)
 80070e6:	f000 b869 	b.w	80071bc <_fwalk_sglue>
 80070ea:	bf00      	nop
 80070ec:	20000070 	.word	0x20000070
 80070f0:	08006ffd 	.word	0x08006ffd
 80070f4:	20000080 	.word	0x20000080

080070f8 <cleanup_stdio>:
 80070f8:	6841      	ldr	r1, [r0, #4]
 80070fa:	4b0c      	ldr	r3, [pc, #48]	@ (800712c <cleanup_stdio+0x34>)
 80070fc:	4299      	cmp	r1, r3
 80070fe:	b510      	push	{r4, lr}
 8007100:	4604      	mov	r4, r0
 8007102:	d001      	beq.n	8007108 <cleanup_stdio+0x10>
 8007104:	f7ff ff7a 	bl	8006ffc <_fflush_r>
 8007108:	68a1      	ldr	r1, [r4, #8]
 800710a:	4b09      	ldr	r3, [pc, #36]	@ (8007130 <cleanup_stdio+0x38>)
 800710c:	4299      	cmp	r1, r3
 800710e:	d002      	beq.n	8007116 <cleanup_stdio+0x1e>
 8007110:	4620      	mov	r0, r4
 8007112:	f7ff ff73 	bl	8006ffc <_fflush_r>
 8007116:	68e1      	ldr	r1, [r4, #12]
 8007118:	4b06      	ldr	r3, [pc, #24]	@ (8007134 <cleanup_stdio+0x3c>)
 800711a:	4299      	cmp	r1, r3
 800711c:	d004      	beq.n	8007128 <cleanup_stdio+0x30>
 800711e:	4620      	mov	r0, r4
 8007120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007124:	f7ff bf6a 	b.w	8006ffc <_fflush_r>
 8007128:	bd10      	pop	{r4, pc}
 800712a:	bf00      	nop
 800712c:	20004798 	.word	0x20004798
 8007130:	20004800 	.word	0x20004800
 8007134:	20004868 	.word	0x20004868

08007138 <global_stdio_init.part.0>:
 8007138:	b510      	push	{r4, lr}
 800713a:	4b0b      	ldr	r3, [pc, #44]	@ (8007168 <global_stdio_init.part.0+0x30>)
 800713c:	4c0b      	ldr	r4, [pc, #44]	@ (800716c <global_stdio_init.part.0+0x34>)
 800713e:	4a0c      	ldr	r2, [pc, #48]	@ (8007170 <global_stdio_init.part.0+0x38>)
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	4620      	mov	r0, r4
 8007144:	2200      	movs	r2, #0
 8007146:	2104      	movs	r1, #4
 8007148:	f7ff ff94 	bl	8007074 <std>
 800714c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007150:	2201      	movs	r2, #1
 8007152:	2109      	movs	r1, #9
 8007154:	f7ff ff8e 	bl	8007074 <std>
 8007158:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800715c:	2202      	movs	r2, #2
 800715e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007162:	2112      	movs	r1, #18
 8007164:	f7ff bf86 	b.w	8007074 <std>
 8007168:	200048d0 	.word	0x200048d0
 800716c:	20004798 	.word	0x20004798
 8007170:	080070e1 	.word	0x080070e1

08007174 <__sfp_lock_acquire>:
 8007174:	4801      	ldr	r0, [pc, #4]	@ (800717c <__sfp_lock_acquire+0x8>)
 8007176:	f000 b998 	b.w	80074aa <__retarget_lock_acquire_recursive>
 800717a:	bf00      	nop
 800717c:	200048d9 	.word	0x200048d9

08007180 <__sfp_lock_release>:
 8007180:	4801      	ldr	r0, [pc, #4]	@ (8007188 <__sfp_lock_release+0x8>)
 8007182:	f000 b993 	b.w	80074ac <__retarget_lock_release_recursive>
 8007186:	bf00      	nop
 8007188:	200048d9 	.word	0x200048d9

0800718c <__sinit>:
 800718c:	b510      	push	{r4, lr}
 800718e:	4604      	mov	r4, r0
 8007190:	f7ff fff0 	bl	8007174 <__sfp_lock_acquire>
 8007194:	6a23      	ldr	r3, [r4, #32]
 8007196:	b11b      	cbz	r3, 80071a0 <__sinit+0x14>
 8007198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800719c:	f7ff bff0 	b.w	8007180 <__sfp_lock_release>
 80071a0:	4b04      	ldr	r3, [pc, #16]	@ (80071b4 <__sinit+0x28>)
 80071a2:	6223      	str	r3, [r4, #32]
 80071a4:	4b04      	ldr	r3, [pc, #16]	@ (80071b8 <__sinit+0x2c>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1f5      	bne.n	8007198 <__sinit+0xc>
 80071ac:	f7ff ffc4 	bl	8007138 <global_stdio_init.part.0>
 80071b0:	e7f2      	b.n	8007198 <__sinit+0xc>
 80071b2:	bf00      	nop
 80071b4:	080070f9 	.word	0x080070f9
 80071b8:	200048d0 	.word	0x200048d0

080071bc <_fwalk_sglue>:
 80071bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c0:	4607      	mov	r7, r0
 80071c2:	4688      	mov	r8, r1
 80071c4:	4614      	mov	r4, r2
 80071c6:	2600      	movs	r6, #0
 80071c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071cc:	f1b9 0901 	subs.w	r9, r9, #1
 80071d0:	d505      	bpl.n	80071de <_fwalk_sglue+0x22>
 80071d2:	6824      	ldr	r4, [r4, #0]
 80071d4:	2c00      	cmp	r4, #0
 80071d6:	d1f7      	bne.n	80071c8 <_fwalk_sglue+0xc>
 80071d8:	4630      	mov	r0, r6
 80071da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071de:	89ab      	ldrh	r3, [r5, #12]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d907      	bls.n	80071f4 <_fwalk_sglue+0x38>
 80071e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071e8:	3301      	adds	r3, #1
 80071ea:	d003      	beq.n	80071f4 <_fwalk_sglue+0x38>
 80071ec:	4629      	mov	r1, r5
 80071ee:	4638      	mov	r0, r7
 80071f0:	47c0      	blx	r8
 80071f2:	4306      	orrs	r6, r0
 80071f4:	3568      	adds	r5, #104	@ 0x68
 80071f6:	e7e9      	b.n	80071cc <_fwalk_sglue+0x10>

080071f8 <iprintf>:
 80071f8:	b40f      	push	{r0, r1, r2, r3}
 80071fa:	b507      	push	{r0, r1, r2, lr}
 80071fc:	4906      	ldr	r1, [pc, #24]	@ (8007218 <iprintf+0x20>)
 80071fe:	ab04      	add	r3, sp, #16
 8007200:	6808      	ldr	r0, [r1, #0]
 8007202:	f853 2b04 	ldr.w	r2, [r3], #4
 8007206:	6881      	ldr	r1, [r0, #8]
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	f000 fbd9 	bl	80079c0 <_vfiprintf_r>
 800720e:	b003      	add	sp, #12
 8007210:	f85d eb04 	ldr.w	lr, [sp], #4
 8007214:	b004      	add	sp, #16
 8007216:	4770      	bx	lr
 8007218:	2000007c 	.word	0x2000007c

0800721c <sniprintf>:
 800721c:	b40c      	push	{r2, r3}
 800721e:	b530      	push	{r4, r5, lr}
 8007220:	4b17      	ldr	r3, [pc, #92]	@ (8007280 <sniprintf+0x64>)
 8007222:	1e0c      	subs	r4, r1, #0
 8007224:	681d      	ldr	r5, [r3, #0]
 8007226:	b09d      	sub	sp, #116	@ 0x74
 8007228:	da08      	bge.n	800723c <sniprintf+0x20>
 800722a:	238b      	movs	r3, #139	@ 0x8b
 800722c:	602b      	str	r3, [r5, #0]
 800722e:	f04f 30ff 	mov.w	r0, #4294967295
 8007232:	b01d      	add	sp, #116	@ 0x74
 8007234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007238:	b002      	add	sp, #8
 800723a:	4770      	bx	lr
 800723c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007240:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007244:	bf14      	ite	ne
 8007246:	f104 33ff 	addne.w	r3, r4, #4294967295
 800724a:	4623      	moveq	r3, r4
 800724c:	9304      	str	r3, [sp, #16]
 800724e:	9307      	str	r3, [sp, #28]
 8007250:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007254:	9002      	str	r0, [sp, #8]
 8007256:	9006      	str	r0, [sp, #24]
 8007258:	f8ad 3016 	strh.w	r3, [sp, #22]
 800725c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800725e:	ab21      	add	r3, sp, #132	@ 0x84
 8007260:	a902      	add	r1, sp, #8
 8007262:	4628      	mov	r0, r5
 8007264:	9301      	str	r3, [sp, #4]
 8007266:	f000 fa85 	bl	8007774 <_svfiprintf_r>
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	bfbc      	itt	lt
 800726e:	238b      	movlt	r3, #139	@ 0x8b
 8007270:	602b      	strlt	r3, [r5, #0]
 8007272:	2c00      	cmp	r4, #0
 8007274:	d0dd      	beq.n	8007232 <sniprintf+0x16>
 8007276:	9b02      	ldr	r3, [sp, #8]
 8007278:	2200      	movs	r2, #0
 800727a:	701a      	strb	r2, [r3, #0]
 800727c:	e7d9      	b.n	8007232 <sniprintf+0x16>
 800727e:	bf00      	nop
 8007280:	2000007c 	.word	0x2000007c

08007284 <__sread>:
 8007284:	b510      	push	{r4, lr}
 8007286:	460c      	mov	r4, r1
 8007288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728c:	f000 f8be 	bl	800740c <_read_r>
 8007290:	2800      	cmp	r0, #0
 8007292:	bfab      	itete	ge
 8007294:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007296:	89a3      	ldrhlt	r3, [r4, #12]
 8007298:	181b      	addge	r3, r3, r0
 800729a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800729e:	bfac      	ite	ge
 80072a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80072a2:	81a3      	strhlt	r3, [r4, #12]
 80072a4:	bd10      	pop	{r4, pc}

080072a6 <__swrite>:
 80072a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072aa:	461f      	mov	r7, r3
 80072ac:	898b      	ldrh	r3, [r1, #12]
 80072ae:	05db      	lsls	r3, r3, #23
 80072b0:	4605      	mov	r5, r0
 80072b2:	460c      	mov	r4, r1
 80072b4:	4616      	mov	r6, r2
 80072b6:	d505      	bpl.n	80072c4 <__swrite+0x1e>
 80072b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072bc:	2302      	movs	r3, #2
 80072be:	2200      	movs	r2, #0
 80072c0:	f000 f892 	bl	80073e8 <_lseek_r>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072ce:	81a3      	strh	r3, [r4, #12]
 80072d0:	4632      	mov	r2, r6
 80072d2:	463b      	mov	r3, r7
 80072d4:	4628      	mov	r0, r5
 80072d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072da:	f000 b8a9 	b.w	8007430 <_write_r>

080072de <__sseek>:
 80072de:	b510      	push	{r4, lr}
 80072e0:	460c      	mov	r4, r1
 80072e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e6:	f000 f87f 	bl	80073e8 <_lseek_r>
 80072ea:	1c43      	adds	r3, r0, #1
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	bf15      	itete	ne
 80072f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80072f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80072f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80072fa:	81a3      	strheq	r3, [r4, #12]
 80072fc:	bf18      	it	ne
 80072fe:	81a3      	strhne	r3, [r4, #12]
 8007300:	bd10      	pop	{r4, pc}

08007302 <__sclose>:
 8007302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007306:	f000 b809 	b.w	800731c <_close_r>

0800730a <memset>:
 800730a:	4402      	add	r2, r0
 800730c:	4603      	mov	r3, r0
 800730e:	4293      	cmp	r3, r2
 8007310:	d100      	bne.n	8007314 <memset+0xa>
 8007312:	4770      	bx	lr
 8007314:	f803 1b01 	strb.w	r1, [r3], #1
 8007318:	e7f9      	b.n	800730e <memset+0x4>
	...

0800731c <_close_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	4d06      	ldr	r5, [pc, #24]	@ (8007338 <_close_r+0x1c>)
 8007320:	2300      	movs	r3, #0
 8007322:	4604      	mov	r4, r0
 8007324:	4608      	mov	r0, r1
 8007326:	602b      	str	r3, [r5, #0]
 8007328:	f7ff fc20 	bl	8006b6c <_close>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d102      	bne.n	8007336 <_close_r+0x1a>
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	b103      	cbz	r3, 8007336 <_close_r+0x1a>
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	200048d4 	.word	0x200048d4

0800733c <_reclaim_reent>:
 800733c:	4b29      	ldr	r3, [pc, #164]	@ (80073e4 <_reclaim_reent+0xa8>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4283      	cmp	r3, r0
 8007342:	b570      	push	{r4, r5, r6, lr}
 8007344:	4604      	mov	r4, r0
 8007346:	d04b      	beq.n	80073e0 <_reclaim_reent+0xa4>
 8007348:	69c3      	ldr	r3, [r0, #28]
 800734a:	b1ab      	cbz	r3, 8007378 <_reclaim_reent+0x3c>
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	b16b      	cbz	r3, 800736c <_reclaim_reent+0x30>
 8007350:	2500      	movs	r5, #0
 8007352:	69e3      	ldr	r3, [r4, #28]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	5959      	ldr	r1, [r3, r5]
 8007358:	2900      	cmp	r1, #0
 800735a:	d13b      	bne.n	80073d4 <_reclaim_reent+0x98>
 800735c:	3504      	adds	r5, #4
 800735e:	2d80      	cmp	r5, #128	@ 0x80
 8007360:	d1f7      	bne.n	8007352 <_reclaim_reent+0x16>
 8007362:	69e3      	ldr	r3, [r4, #28]
 8007364:	4620      	mov	r0, r4
 8007366:	68d9      	ldr	r1, [r3, #12]
 8007368:	f000 f8b0 	bl	80074cc <_free_r>
 800736c:	69e3      	ldr	r3, [r4, #28]
 800736e:	6819      	ldr	r1, [r3, #0]
 8007370:	b111      	cbz	r1, 8007378 <_reclaim_reent+0x3c>
 8007372:	4620      	mov	r0, r4
 8007374:	f000 f8aa 	bl	80074cc <_free_r>
 8007378:	6961      	ldr	r1, [r4, #20]
 800737a:	b111      	cbz	r1, 8007382 <_reclaim_reent+0x46>
 800737c:	4620      	mov	r0, r4
 800737e:	f000 f8a5 	bl	80074cc <_free_r>
 8007382:	69e1      	ldr	r1, [r4, #28]
 8007384:	b111      	cbz	r1, 800738c <_reclaim_reent+0x50>
 8007386:	4620      	mov	r0, r4
 8007388:	f000 f8a0 	bl	80074cc <_free_r>
 800738c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800738e:	b111      	cbz	r1, 8007396 <_reclaim_reent+0x5a>
 8007390:	4620      	mov	r0, r4
 8007392:	f000 f89b 	bl	80074cc <_free_r>
 8007396:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007398:	b111      	cbz	r1, 80073a0 <_reclaim_reent+0x64>
 800739a:	4620      	mov	r0, r4
 800739c:	f000 f896 	bl	80074cc <_free_r>
 80073a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80073a2:	b111      	cbz	r1, 80073aa <_reclaim_reent+0x6e>
 80073a4:	4620      	mov	r0, r4
 80073a6:	f000 f891 	bl	80074cc <_free_r>
 80073aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80073ac:	b111      	cbz	r1, 80073b4 <_reclaim_reent+0x78>
 80073ae:	4620      	mov	r0, r4
 80073b0:	f000 f88c 	bl	80074cc <_free_r>
 80073b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80073b6:	b111      	cbz	r1, 80073be <_reclaim_reent+0x82>
 80073b8:	4620      	mov	r0, r4
 80073ba:	f000 f887 	bl	80074cc <_free_r>
 80073be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80073c0:	b111      	cbz	r1, 80073c8 <_reclaim_reent+0x8c>
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 f882 	bl	80074cc <_free_r>
 80073c8:	6a23      	ldr	r3, [r4, #32]
 80073ca:	b14b      	cbz	r3, 80073e0 <_reclaim_reent+0xa4>
 80073cc:	4620      	mov	r0, r4
 80073ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80073d2:	4718      	bx	r3
 80073d4:	680e      	ldr	r6, [r1, #0]
 80073d6:	4620      	mov	r0, r4
 80073d8:	f000 f878 	bl	80074cc <_free_r>
 80073dc:	4631      	mov	r1, r6
 80073de:	e7bb      	b.n	8007358 <_reclaim_reent+0x1c>
 80073e0:	bd70      	pop	{r4, r5, r6, pc}
 80073e2:	bf00      	nop
 80073e4:	2000007c 	.word	0x2000007c

080073e8 <_lseek_r>:
 80073e8:	b538      	push	{r3, r4, r5, lr}
 80073ea:	4d07      	ldr	r5, [pc, #28]	@ (8007408 <_lseek_r+0x20>)
 80073ec:	4604      	mov	r4, r0
 80073ee:	4608      	mov	r0, r1
 80073f0:	4611      	mov	r1, r2
 80073f2:	2200      	movs	r2, #0
 80073f4:	602a      	str	r2, [r5, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	f7ff fb79 	bl	8006aee <_lseek>
 80073fc:	1c43      	adds	r3, r0, #1
 80073fe:	d102      	bne.n	8007406 <_lseek_r+0x1e>
 8007400:	682b      	ldr	r3, [r5, #0]
 8007402:	b103      	cbz	r3, 8007406 <_lseek_r+0x1e>
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	bd38      	pop	{r3, r4, r5, pc}
 8007408:	200048d4 	.word	0x200048d4

0800740c <_read_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4d07      	ldr	r5, [pc, #28]	@ (800742c <_read_r+0x20>)
 8007410:	4604      	mov	r4, r0
 8007412:	4608      	mov	r0, r1
 8007414:	4611      	mov	r1, r2
 8007416:	2200      	movs	r2, #0
 8007418:	602a      	str	r2, [r5, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	f7ff fb11 	bl	8006a42 <_read>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d102      	bne.n	800742a <_read_r+0x1e>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	b103      	cbz	r3, 800742a <_read_r+0x1e>
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	200048d4 	.word	0x200048d4

08007430 <_write_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4d07      	ldr	r5, [pc, #28]	@ (8007450 <_write_r+0x20>)
 8007434:	4604      	mov	r4, r0
 8007436:	4608      	mov	r0, r1
 8007438:	4611      	mov	r1, r2
 800743a:	2200      	movs	r2, #0
 800743c:	602a      	str	r2, [r5, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	f7ff fb67 	bl	8006b12 <_write>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d102      	bne.n	800744e <_write_r+0x1e>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b103      	cbz	r3, 800744e <_write_r+0x1e>
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	200048d4 	.word	0x200048d4

08007454 <__errno>:
 8007454:	4b01      	ldr	r3, [pc, #4]	@ (800745c <__errno+0x8>)
 8007456:	6818      	ldr	r0, [r3, #0]
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	2000007c 	.word	0x2000007c

08007460 <__libc_init_array>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	4d0d      	ldr	r5, [pc, #52]	@ (8007498 <__libc_init_array+0x38>)
 8007464:	4c0d      	ldr	r4, [pc, #52]	@ (800749c <__libc_init_array+0x3c>)
 8007466:	1b64      	subs	r4, r4, r5
 8007468:	10a4      	asrs	r4, r4, #2
 800746a:	2600      	movs	r6, #0
 800746c:	42a6      	cmp	r6, r4
 800746e:	d109      	bne.n	8007484 <__libc_init_array+0x24>
 8007470:	4d0b      	ldr	r5, [pc, #44]	@ (80074a0 <__libc_init_array+0x40>)
 8007472:	4c0c      	ldr	r4, [pc, #48]	@ (80074a4 <__libc_init_array+0x44>)
 8007474:	f000 fec2 	bl	80081fc <_init>
 8007478:	1b64      	subs	r4, r4, r5
 800747a:	10a4      	asrs	r4, r4, #2
 800747c:	2600      	movs	r6, #0
 800747e:	42a6      	cmp	r6, r4
 8007480:	d105      	bne.n	800748e <__libc_init_array+0x2e>
 8007482:	bd70      	pop	{r4, r5, r6, pc}
 8007484:	f855 3b04 	ldr.w	r3, [r5], #4
 8007488:	4798      	blx	r3
 800748a:	3601      	adds	r6, #1
 800748c:	e7ee      	b.n	800746c <__libc_init_array+0xc>
 800748e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007492:	4798      	blx	r3
 8007494:	3601      	adds	r6, #1
 8007496:	e7f2      	b.n	800747e <__libc_init_array+0x1e>
 8007498:	08008774 	.word	0x08008774
 800749c:	08008774 	.word	0x08008774
 80074a0:	08008774 	.word	0x08008774
 80074a4:	08008778 	.word	0x08008778

080074a8 <__retarget_lock_init_recursive>:
 80074a8:	4770      	bx	lr

080074aa <__retarget_lock_acquire_recursive>:
 80074aa:	4770      	bx	lr

080074ac <__retarget_lock_release_recursive>:
 80074ac:	4770      	bx	lr

080074ae <memcpy>:
 80074ae:	440a      	add	r2, r1
 80074b0:	4291      	cmp	r1, r2
 80074b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80074b6:	d100      	bne.n	80074ba <memcpy+0xc>
 80074b8:	4770      	bx	lr
 80074ba:	b510      	push	{r4, lr}
 80074bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074c4:	4291      	cmp	r1, r2
 80074c6:	d1f9      	bne.n	80074bc <memcpy+0xe>
 80074c8:	bd10      	pop	{r4, pc}
	...

080074cc <_free_r>:
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	4605      	mov	r5, r0
 80074d0:	2900      	cmp	r1, #0
 80074d2:	d041      	beq.n	8007558 <_free_r+0x8c>
 80074d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074d8:	1f0c      	subs	r4, r1, #4
 80074da:	2b00      	cmp	r3, #0
 80074dc:	bfb8      	it	lt
 80074de:	18e4      	addlt	r4, r4, r3
 80074e0:	f000 f8e0 	bl	80076a4 <__malloc_lock>
 80074e4:	4a1d      	ldr	r2, [pc, #116]	@ (800755c <_free_r+0x90>)
 80074e6:	6813      	ldr	r3, [r2, #0]
 80074e8:	b933      	cbnz	r3, 80074f8 <_free_r+0x2c>
 80074ea:	6063      	str	r3, [r4, #4]
 80074ec:	6014      	str	r4, [r2, #0]
 80074ee:	4628      	mov	r0, r5
 80074f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074f4:	f000 b8dc 	b.w	80076b0 <__malloc_unlock>
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	d908      	bls.n	800750e <_free_r+0x42>
 80074fc:	6820      	ldr	r0, [r4, #0]
 80074fe:	1821      	adds	r1, r4, r0
 8007500:	428b      	cmp	r3, r1
 8007502:	bf01      	itttt	eq
 8007504:	6819      	ldreq	r1, [r3, #0]
 8007506:	685b      	ldreq	r3, [r3, #4]
 8007508:	1809      	addeq	r1, r1, r0
 800750a:	6021      	streq	r1, [r4, #0]
 800750c:	e7ed      	b.n	80074ea <_free_r+0x1e>
 800750e:	461a      	mov	r2, r3
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	b10b      	cbz	r3, 8007518 <_free_r+0x4c>
 8007514:	42a3      	cmp	r3, r4
 8007516:	d9fa      	bls.n	800750e <_free_r+0x42>
 8007518:	6811      	ldr	r1, [r2, #0]
 800751a:	1850      	adds	r0, r2, r1
 800751c:	42a0      	cmp	r0, r4
 800751e:	d10b      	bne.n	8007538 <_free_r+0x6c>
 8007520:	6820      	ldr	r0, [r4, #0]
 8007522:	4401      	add	r1, r0
 8007524:	1850      	adds	r0, r2, r1
 8007526:	4283      	cmp	r3, r0
 8007528:	6011      	str	r1, [r2, #0]
 800752a:	d1e0      	bne.n	80074ee <_free_r+0x22>
 800752c:	6818      	ldr	r0, [r3, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	6053      	str	r3, [r2, #4]
 8007532:	4408      	add	r0, r1
 8007534:	6010      	str	r0, [r2, #0]
 8007536:	e7da      	b.n	80074ee <_free_r+0x22>
 8007538:	d902      	bls.n	8007540 <_free_r+0x74>
 800753a:	230c      	movs	r3, #12
 800753c:	602b      	str	r3, [r5, #0]
 800753e:	e7d6      	b.n	80074ee <_free_r+0x22>
 8007540:	6820      	ldr	r0, [r4, #0]
 8007542:	1821      	adds	r1, r4, r0
 8007544:	428b      	cmp	r3, r1
 8007546:	bf04      	itt	eq
 8007548:	6819      	ldreq	r1, [r3, #0]
 800754a:	685b      	ldreq	r3, [r3, #4]
 800754c:	6063      	str	r3, [r4, #4]
 800754e:	bf04      	itt	eq
 8007550:	1809      	addeq	r1, r1, r0
 8007552:	6021      	streq	r1, [r4, #0]
 8007554:	6054      	str	r4, [r2, #4]
 8007556:	e7ca      	b.n	80074ee <_free_r+0x22>
 8007558:	bd38      	pop	{r3, r4, r5, pc}
 800755a:	bf00      	nop
 800755c:	200048e0 	.word	0x200048e0

08007560 <sbrk_aligned>:
 8007560:	b570      	push	{r4, r5, r6, lr}
 8007562:	4e0f      	ldr	r6, [pc, #60]	@ (80075a0 <sbrk_aligned+0x40>)
 8007564:	460c      	mov	r4, r1
 8007566:	6831      	ldr	r1, [r6, #0]
 8007568:	4605      	mov	r5, r0
 800756a:	b911      	cbnz	r1, 8007572 <sbrk_aligned+0x12>
 800756c:	f000 fd7c 	bl	8008068 <_sbrk_r>
 8007570:	6030      	str	r0, [r6, #0]
 8007572:	4621      	mov	r1, r4
 8007574:	4628      	mov	r0, r5
 8007576:	f000 fd77 	bl	8008068 <_sbrk_r>
 800757a:	1c43      	adds	r3, r0, #1
 800757c:	d103      	bne.n	8007586 <sbrk_aligned+0x26>
 800757e:	f04f 34ff 	mov.w	r4, #4294967295
 8007582:	4620      	mov	r0, r4
 8007584:	bd70      	pop	{r4, r5, r6, pc}
 8007586:	1cc4      	adds	r4, r0, #3
 8007588:	f024 0403 	bic.w	r4, r4, #3
 800758c:	42a0      	cmp	r0, r4
 800758e:	d0f8      	beq.n	8007582 <sbrk_aligned+0x22>
 8007590:	1a21      	subs	r1, r4, r0
 8007592:	4628      	mov	r0, r5
 8007594:	f000 fd68 	bl	8008068 <_sbrk_r>
 8007598:	3001      	adds	r0, #1
 800759a:	d1f2      	bne.n	8007582 <sbrk_aligned+0x22>
 800759c:	e7ef      	b.n	800757e <sbrk_aligned+0x1e>
 800759e:	bf00      	nop
 80075a0:	200048dc 	.word	0x200048dc

080075a4 <_malloc_r>:
 80075a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075a8:	1ccd      	adds	r5, r1, #3
 80075aa:	f025 0503 	bic.w	r5, r5, #3
 80075ae:	3508      	adds	r5, #8
 80075b0:	2d0c      	cmp	r5, #12
 80075b2:	bf38      	it	cc
 80075b4:	250c      	movcc	r5, #12
 80075b6:	2d00      	cmp	r5, #0
 80075b8:	4606      	mov	r6, r0
 80075ba:	db01      	blt.n	80075c0 <_malloc_r+0x1c>
 80075bc:	42a9      	cmp	r1, r5
 80075be:	d904      	bls.n	80075ca <_malloc_r+0x26>
 80075c0:	230c      	movs	r3, #12
 80075c2:	6033      	str	r3, [r6, #0]
 80075c4:	2000      	movs	r0, #0
 80075c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076a0 <_malloc_r+0xfc>
 80075ce:	f000 f869 	bl	80076a4 <__malloc_lock>
 80075d2:	f8d8 3000 	ldr.w	r3, [r8]
 80075d6:	461c      	mov	r4, r3
 80075d8:	bb44      	cbnz	r4, 800762c <_malloc_r+0x88>
 80075da:	4629      	mov	r1, r5
 80075dc:	4630      	mov	r0, r6
 80075de:	f7ff ffbf 	bl	8007560 <sbrk_aligned>
 80075e2:	1c43      	adds	r3, r0, #1
 80075e4:	4604      	mov	r4, r0
 80075e6:	d158      	bne.n	800769a <_malloc_r+0xf6>
 80075e8:	f8d8 4000 	ldr.w	r4, [r8]
 80075ec:	4627      	mov	r7, r4
 80075ee:	2f00      	cmp	r7, #0
 80075f0:	d143      	bne.n	800767a <_malloc_r+0xd6>
 80075f2:	2c00      	cmp	r4, #0
 80075f4:	d04b      	beq.n	800768e <_malloc_r+0xea>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	4639      	mov	r1, r7
 80075fa:	4630      	mov	r0, r6
 80075fc:	eb04 0903 	add.w	r9, r4, r3
 8007600:	f000 fd32 	bl	8008068 <_sbrk_r>
 8007604:	4581      	cmp	r9, r0
 8007606:	d142      	bne.n	800768e <_malloc_r+0xea>
 8007608:	6821      	ldr	r1, [r4, #0]
 800760a:	1a6d      	subs	r5, r5, r1
 800760c:	4629      	mov	r1, r5
 800760e:	4630      	mov	r0, r6
 8007610:	f7ff ffa6 	bl	8007560 <sbrk_aligned>
 8007614:	3001      	adds	r0, #1
 8007616:	d03a      	beq.n	800768e <_malloc_r+0xea>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	442b      	add	r3, r5
 800761c:	6023      	str	r3, [r4, #0]
 800761e:	f8d8 3000 	ldr.w	r3, [r8]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	bb62      	cbnz	r2, 8007680 <_malloc_r+0xdc>
 8007626:	f8c8 7000 	str.w	r7, [r8]
 800762a:	e00f      	b.n	800764c <_malloc_r+0xa8>
 800762c:	6822      	ldr	r2, [r4, #0]
 800762e:	1b52      	subs	r2, r2, r5
 8007630:	d420      	bmi.n	8007674 <_malloc_r+0xd0>
 8007632:	2a0b      	cmp	r2, #11
 8007634:	d917      	bls.n	8007666 <_malloc_r+0xc2>
 8007636:	1961      	adds	r1, r4, r5
 8007638:	42a3      	cmp	r3, r4
 800763a:	6025      	str	r5, [r4, #0]
 800763c:	bf18      	it	ne
 800763e:	6059      	strne	r1, [r3, #4]
 8007640:	6863      	ldr	r3, [r4, #4]
 8007642:	bf08      	it	eq
 8007644:	f8c8 1000 	streq.w	r1, [r8]
 8007648:	5162      	str	r2, [r4, r5]
 800764a:	604b      	str	r3, [r1, #4]
 800764c:	4630      	mov	r0, r6
 800764e:	f000 f82f 	bl	80076b0 <__malloc_unlock>
 8007652:	f104 000b 	add.w	r0, r4, #11
 8007656:	1d23      	adds	r3, r4, #4
 8007658:	f020 0007 	bic.w	r0, r0, #7
 800765c:	1ac2      	subs	r2, r0, r3
 800765e:	bf1c      	itt	ne
 8007660:	1a1b      	subne	r3, r3, r0
 8007662:	50a3      	strne	r3, [r4, r2]
 8007664:	e7af      	b.n	80075c6 <_malloc_r+0x22>
 8007666:	6862      	ldr	r2, [r4, #4]
 8007668:	42a3      	cmp	r3, r4
 800766a:	bf0c      	ite	eq
 800766c:	f8c8 2000 	streq.w	r2, [r8]
 8007670:	605a      	strne	r2, [r3, #4]
 8007672:	e7eb      	b.n	800764c <_malloc_r+0xa8>
 8007674:	4623      	mov	r3, r4
 8007676:	6864      	ldr	r4, [r4, #4]
 8007678:	e7ae      	b.n	80075d8 <_malloc_r+0x34>
 800767a:	463c      	mov	r4, r7
 800767c:	687f      	ldr	r7, [r7, #4]
 800767e:	e7b6      	b.n	80075ee <_malloc_r+0x4a>
 8007680:	461a      	mov	r2, r3
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	42a3      	cmp	r3, r4
 8007686:	d1fb      	bne.n	8007680 <_malloc_r+0xdc>
 8007688:	2300      	movs	r3, #0
 800768a:	6053      	str	r3, [r2, #4]
 800768c:	e7de      	b.n	800764c <_malloc_r+0xa8>
 800768e:	230c      	movs	r3, #12
 8007690:	6033      	str	r3, [r6, #0]
 8007692:	4630      	mov	r0, r6
 8007694:	f000 f80c 	bl	80076b0 <__malloc_unlock>
 8007698:	e794      	b.n	80075c4 <_malloc_r+0x20>
 800769a:	6005      	str	r5, [r0, #0]
 800769c:	e7d6      	b.n	800764c <_malloc_r+0xa8>
 800769e:	bf00      	nop
 80076a0:	200048e0 	.word	0x200048e0

080076a4 <__malloc_lock>:
 80076a4:	4801      	ldr	r0, [pc, #4]	@ (80076ac <__malloc_lock+0x8>)
 80076a6:	f7ff bf00 	b.w	80074aa <__retarget_lock_acquire_recursive>
 80076aa:	bf00      	nop
 80076ac:	200048d8 	.word	0x200048d8

080076b0 <__malloc_unlock>:
 80076b0:	4801      	ldr	r0, [pc, #4]	@ (80076b8 <__malloc_unlock+0x8>)
 80076b2:	f7ff befb 	b.w	80074ac <__retarget_lock_release_recursive>
 80076b6:	bf00      	nop
 80076b8:	200048d8 	.word	0x200048d8

080076bc <__ssputs_r>:
 80076bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c0:	688e      	ldr	r6, [r1, #8]
 80076c2:	461f      	mov	r7, r3
 80076c4:	42be      	cmp	r6, r7
 80076c6:	680b      	ldr	r3, [r1, #0]
 80076c8:	4682      	mov	sl, r0
 80076ca:	460c      	mov	r4, r1
 80076cc:	4690      	mov	r8, r2
 80076ce:	d82d      	bhi.n	800772c <__ssputs_r+0x70>
 80076d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80076d8:	d026      	beq.n	8007728 <__ssputs_r+0x6c>
 80076da:	6965      	ldr	r5, [r4, #20]
 80076dc:	6909      	ldr	r1, [r1, #16]
 80076de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076e2:	eba3 0901 	sub.w	r9, r3, r1
 80076e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076ea:	1c7b      	adds	r3, r7, #1
 80076ec:	444b      	add	r3, r9
 80076ee:	106d      	asrs	r5, r5, #1
 80076f0:	429d      	cmp	r5, r3
 80076f2:	bf38      	it	cc
 80076f4:	461d      	movcc	r5, r3
 80076f6:	0553      	lsls	r3, r2, #21
 80076f8:	d527      	bpl.n	800774a <__ssputs_r+0x8e>
 80076fa:	4629      	mov	r1, r5
 80076fc:	f7ff ff52 	bl	80075a4 <_malloc_r>
 8007700:	4606      	mov	r6, r0
 8007702:	b360      	cbz	r0, 800775e <__ssputs_r+0xa2>
 8007704:	6921      	ldr	r1, [r4, #16]
 8007706:	464a      	mov	r2, r9
 8007708:	f7ff fed1 	bl	80074ae <memcpy>
 800770c:	89a3      	ldrh	r3, [r4, #12]
 800770e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007716:	81a3      	strh	r3, [r4, #12]
 8007718:	6126      	str	r6, [r4, #16]
 800771a:	6165      	str	r5, [r4, #20]
 800771c:	444e      	add	r6, r9
 800771e:	eba5 0509 	sub.w	r5, r5, r9
 8007722:	6026      	str	r6, [r4, #0]
 8007724:	60a5      	str	r5, [r4, #8]
 8007726:	463e      	mov	r6, r7
 8007728:	42be      	cmp	r6, r7
 800772a:	d900      	bls.n	800772e <__ssputs_r+0x72>
 800772c:	463e      	mov	r6, r7
 800772e:	6820      	ldr	r0, [r4, #0]
 8007730:	4632      	mov	r2, r6
 8007732:	4641      	mov	r1, r8
 8007734:	f000 fc7e 	bl	8008034 <memmove>
 8007738:	68a3      	ldr	r3, [r4, #8]
 800773a:	1b9b      	subs	r3, r3, r6
 800773c:	60a3      	str	r3, [r4, #8]
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	4433      	add	r3, r6
 8007742:	6023      	str	r3, [r4, #0]
 8007744:	2000      	movs	r0, #0
 8007746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800774a:	462a      	mov	r2, r5
 800774c:	f000 fc9c 	bl	8008088 <_realloc_r>
 8007750:	4606      	mov	r6, r0
 8007752:	2800      	cmp	r0, #0
 8007754:	d1e0      	bne.n	8007718 <__ssputs_r+0x5c>
 8007756:	6921      	ldr	r1, [r4, #16]
 8007758:	4650      	mov	r0, sl
 800775a:	f7ff feb7 	bl	80074cc <_free_r>
 800775e:	230c      	movs	r3, #12
 8007760:	f8ca 3000 	str.w	r3, [sl]
 8007764:	89a3      	ldrh	r3, [r4, #12]
 8007766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800776a:	81a3      	strh	r3, [r4, #12]
 800776c:	f04f 30ff 	mov.w	r0, #4294967295
 8007770:	e7e9      	b.n	8007746 <__ssputs_r+0x8a>
	...

08007774 <_svfiprintf_r>:
 8007774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007778:	4698      	mov	r8, r3
 800777a:	898b      	ldrh	r3, [r1, #12]
 800777c:	061b      	lsls	r3, r3, #24
 800777e:	b09d      	sub	sp, #116	@ 0x74
 8007780:	4607      	mov	r7, r0
 8007782:	460d      	mov	r5, r1
 8007784:	4614      	mov	r4, r2
 8007786:	d510      	bpl.n	80077aa <_svfiprintf_r+0x36>
 8007788:	690b      	ldr	r3, [r1, #16]
 800778a:	b973      	cbnz	r3, 80077aa <_svfiprintf_r+0x36>
 800778c:	2140      	movs	r1, #64	@ 0x40
 800778e:	f7ff ff09 	bl	80075a4 <_malloc_r>
 8007792:	6028      	str	r0, [r5, #0]
 8007794:	6128      	str	r0, [r5, #16]
 8007796:	b930      	cbnz	r0, 80077a6 <_svfiprintf_r+0x32>
 8007798:	230c      	movs	r3, #12
 800779a:	603b      	str	r3, [r7, #0]
 800779c:	f04f 30ff 	mov.w	r0, #4294967295
 80077a0:	b01d      	add	sp, #116	@ 0x74
 80077a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a6:	2340      	movs	r3, #64	@ 0x40
 80077a8:	616b      	str	r3, [r5, #20]
 80077aa:	2300      	movs	r3, #0
 80077ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80077ae:	2320      	movs	r3, #32
 80077b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80077b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80077b8:	2330      	movs	r3, #48	@ 0x30
 80077ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007958 <_svfiprintf_r+0x1e4>
 80077be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80077c2:	f04f 0901 	mov.w	r9, #1
 80077c6:	4623      	mov	r3, r4
 80077c8:	469a      	mov	sl, r3
 80077ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077ce:	b10a      	cbz	r2, 80077d4 <_svfiprintf_r+0x60>
 80077d0:	2a25      	cmp	r2, #37	@ 0x25
 80077d2:	d1f9      	bne.n	80077c8 <_svfiprintf_r+0x54>
 80077d4:	ebba 0b04 	subs.w	fp, sl, r4
 80077d8:	d00b      	beq.n	80077f2 <_svfiprintf_r+0x7e>
 80077da:	465b      	mov	r3, fp
 80077dc:	4622      	mov	r2, r4
 80077de:	4629      	mov	r1, r5
 80077e0:	4638      	mov	r0, r7
 80077e2:	f7ff ff6b 	bl	80076bc <__ssputs_r>
 80077e6:	3001      	adds	r0, #1
 80077e8:	f000 80a7 	beq.w	800793a <_svfiprintf_r+0x1c6>
 80077ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077ee:	445a      	add	r2, fp
 80077f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80077f2:	f89a 3000 	ldrb.w	r3, [sl]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 809f 	beq.w	800793a <_svfiprintf_r+0x1c6>
 80077fc:	2300      	movs	r3, #0
 80077fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007806:	f10a 0a01 	add.w	sl, sl, #1
 800780a:	9304      	str	r3, [sp, #16]
 800780c:	9307      	str	r3, [sp, #28]
 800780e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007812:	931a      	str	r3, [sp, #104]	@ 0x68
 8007814:	4654      	mov	r4, sl
 8007816:	2205      	movs	r2, #5
 8007818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800781c:	484e      	ldr	r0, [pc, #312]	@ (8007958 <_svfiprintf_r+0x1e4>)
 800781e:	f7f8 fcef 	bl	8000200 <memchr>
 8007822:	9a04      	ldr	r2, [sp, #16]
 8007824:	b9d8      	cbnz	r0, 800785e <_svfiprintf_r+0xea>
 8007826:	06d0      	lsls	r0, r2, #27
 8007828:	bf44      	itt	mi
 800782a:	2320      	movmi	r3, #32
 800782c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007830:	0711      	lsls	r1, r2, #28
 8007832:	bf44      	itt	mi
 8007834:	232b      	movmi	r3, #43	@ 0x2b
 8007836:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800783a:	f89a 3000 	ldrb.w	r3, [sl]
 800783e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007840:	d015      	beq.n	800786e <_svfiprintf_r+0xfa>
 8007842:	9a07      	ldr	r2, [sp, #28]
 8007844:	4654      	mov	r4, sl
 8007846:	2000      	movs	r0, #0
 8007848:	f04f 0c0a 	mov.w	ip, #10
 800784c:	4621      	mov	r1, r4
 800784e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007852:	3b30      	subs	r3, #48	@ 0x30
 8007854:	2b09      	cmp	r3, #9
 8007856:	d94b      	bls.n	80078f0 <_svfiprintf_r+0x17c>
 8007858:	b1b0      	cbz	r0, 8007888 <_svfiprintf_r+0x114>
 800785a:	9207      	str	r2, [sp, #28]
 800785c:	e014      	b.n	8007888 <_svfiprintf_r+0x114>
 800785e:	eba0 0308 	sub.w	r3, r0, r8
 8007862:	fa09 f303 	lsl.w	r3, r9, r3
 8007866:	4313      	orrs	r3, r2
 8007868:	9304      	str	r3, [sp, #16]
 800786a:	46a2      	mov	sl, r4
 800786c:	e7d2      	b.n	8007814 <_svfiprintf_r+0xa0>
 800786e:	9b03      	ldr	r3, [sp, #12]
 8007870:	1d19      	adds	r1, r3, #4
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	9103      	str	r1, [sp, #12]
 8007876:	2b00      	cmp	r3, #0
 8007878:	bfbb      	ittet	lt
 800787a:	425b      	neglt	r3, r3
 800787c:	f042 0202 	orrlt.w	r2, r2, #2
 8007880:	9307      	strge	r3, [sp, #28]
 8007882:	9307      	strlt	r3, [sp, #28]
 8007884:	bfb8      	it	lt
 8007886:	9204      	strlt	r2, [sp, #16]
 8007888:	7823      	ldrb	r3, [r4, #0]
 800788a:	2b2e      	cmp	r3, #46	@ 0x2e
 800788c:	d10a      	bne.n	80078a4 <_svfiprintf_r+0x130>
 800788e:	7863      	ldrb	r3, [r4, #1]
 8007890:	2b2a      	cmp	r3, #42	@ 0x2a
 8007892:	d132      	bne.n	80078fa <_svfiprintf_r+0x186>
 8007894:	9b03      	ldr	r3, [sp, #12]
 8007896:	1d1a      	adds	r2, r3, #4
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	9203      	str	r2, [sp, #12]
 800789c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80078a0:	3402      	adds	r4, #2
 80078a2:	9305      	str	r3, [sp, #20]
 80078a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007968 <_svfiprintf_r+0x1f4>
 80078a8:	7821      	ldrb	r1, [r4, #0]
 80078aa:	2203      	movs	r2, #3
 80078ac:	4650      	mov	r0, sl
 80078ae:	f7f8 fca7 	bl	8000200 <memchr>
 80078b2:	b138      	cbz	r0, 80078c4 <_svfiprintf_r+0x150>
 80078b4:	9b04      	ldr	r3, [sp, #16]
 80078b6:	eba0 000a 	sub.w	r0, r0, sl
 80078ba:	2240      	movs	r2, #64	@ 0x40
 80078bc:	4082      	lsls	r2, r0
 80078be:	4313      	orrs	r3, r2
 80078c0:	3401      	adds	r4, #1
 80078c2:	9304      	str	r3, [sp, #16]
 80078c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c8:	4824      	ldr	r0, [pc, #144]	@ (800795c <_svfiprintf_r+0x1e8>)
 80078ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80078ce:	2206      	movs	r2, #6
 80078d0:	f7f8 fc96 	bl	8000200 <memchr>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d036      	beq.n	8007946 <_svfiprintf_r+0x1d2>
 80078d8:	4b21      	ldr	r3, [pc, #132]	@ (8007960 <_svfiprintf_r+0x1ec>)
 80078da:	bb1b      	cbnz	r3, 8007924 <_svfiprintf_r+0x1b0>
 80078dc:	9b03      	ldr	r3, [sp, #12]
 80078de:	3307      	adds	r3, #7
 80078e0:	f023 0307 	bic.w	r3, r3, #7
 80078e4:	3308      	adds	r3, #8
 80078e6:	9303      	str	r3, [sp, #12]
 80078e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ea:	4433      	add	r3, r6
 80078ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80078ee:	e76a      	b.n	80077c6 <_svfiprintf_r+0x52>
 80078f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80078f4:	460c      	mov	r4, r1
 80078f6:	2001      	movs	r0, #1
 80078f8:	e7a8      	b.n	800784c <_svfiprintf_r+0xd8>
 80078fa:	2300      	movs	r3, #0
 80078fc:	3401      	adds	r4, #1
 80078fe:	9305      	str	r3, [sp, #20]
 8007900:	4619      	mov	r1, r3
 8007902:	f04f 0c0a 	mov.w	ip, #10
 8007906:	4620      	mov	r0, r4
 8007908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800790c:	3a30      	subs	r2, #48	@ 0x30
 800790e:	2a09      	cmp	r2, #9
 8007910:	d903      	bls.n	800791a <_svfiprintf_r+0x1a6>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0c6      	beq.n	80078a4 <_svfiprintf_r+0x130>
 8007916:	9105      	str	r1, [sp, #20]
 8007918:	e7c4      	b.n	80078a4 <_svfiprintf_r+0x130>
 800791a:	fb0c 2101 	mla	r1, ip, r1, r2
 800791e:	4604      	mov	r4, r0
 8007920:	2301      	movs	r3, #1
 8007922:	e7f0      	b.n	8007906 <_svfiprintf_r+0x192>
 8007924:	ab03      	add	r3, sp, #12
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	462a      	mov	r2, r5
 800792a:	4b0e      	ldr	r3, [pc, #56]	@ (8007964 <_svfiprintf_r+0x1f0>)
 800792c:	a904      	add	r1, sp, #16
 800792e:	4638      	mov	r0, r7
 8007930:	f3af 8000 	nop.w
 8007934:	1c42      	adds	r2, r0, #1
 8007936:	4606      	mov	r6, r0
 8007938:	d1d6      	bne.n	80078e8 <_svfiprintf_r+0x174>
 800793a:	89ab      	ldrh	r3, [r5, #12]
 800793c:	065b      	lsls	r3, r3, #25
 800793e:	f53f af2d 	bmi.w	800779c <_svfiprintf_r+0x28>
 8007942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007944:	e72c      	b.n	80077a0 <_svfiprintf_r+0x2c>
 8007946:	ab03      	add	r3, sp, #12
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	462a      	mov	r2, r5
 800794c:	4b05      	ldr	r3, [pc, #20]	@ (8007964 <_svfiprintf_r+0x1f0>)
 800794e:	a904      	add	r1, sp, #16
 8007950:	4638      	mov	r0, r7
 8007952:	f000 f9bb 	bl	8007ccc <_printf_i>
 8007956:	e7ed      	b.n	8007934 <_svfiprintf_r+0x1c0>
 8007958:	08008736 	.word	0x08008736
 800795c:	08008740 	.word	0x08008740
 8007960:	00000000 	.word	0x00000000
 8007964:	080076bd 	.word	0x080076bd
 8007968:	0800873c 	.word	0x0800873c

0800796c <__sfputc_r>:
 800796c:	6893      	ldr	r3, [r2, #8]
 800796e:	3b01      	subs	r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	b410      	push	{r4}
 8007974:	6093      	str	r3, [r2, #8]
 8007976:	da08      	bge.n	800798a <__sfputc_r+0x1e>
 8007978:	6994      	ldr	r4, [r2, #24]
 800797a:	42a3      	cmp	r3, r4
 800797c:	db01      	blt.n	8007982 <__sfputc_r+0x16>
 800797e:	290a      	cmp	r1, #10
 8007980:	d103      	bne.n	800798a <__sfputc_r+0x1e>
 8007982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007986:	f000 bac1 	b.w	8007f0c <__swbuf_r>
 800798a:	6813      	ldr	r3, [r2, #0]
 800798c:	1c58      	adds	r0, r3, #1
 800798e:	6010      	str	r0, [r2, #0]
 8007990:	7019      	strb	r1, [r3, #0]
 8007992:	4608      	mov	r0, r1
 8007994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007998:	4770      	bx	lr

0800799a <__sfputs_r>:
 800799a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799c:	4606      	mov	r6, r0
 800799e:	460f      	mov	r7, r1
 80079a0:	4614      	mov	r4, r2
 80079a2:	18d5      	adds	r5, r2, r3
 80079a4:	42ac      	cmp	r4, r5
 80079a6:	d101      	bne.n	80079ac <__sfputs_r+0x12>
 80079a8:	2000      	movs	r0, #0
 80079aa:	e007      	b.n	80079bc <__sfputs_r+0x22>
 80079ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b0:	463a      	mov	r2, r7
 80079b2:	4630      	mov	r0, r6
 80079b4:	f7ff ffda 	bl	800796c <__sfputc_r>
 80079b8:	1c43      	adds	r3, r0, #1
 80079ba:	d1f3      	bne.n	80079a4 <__sfputs_r+0xa>
 80079bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079c0 <_vfiprintf_r>:
 80079c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	460d      	mov	r5, r1
 80079c6:	b09d      	sub	sp, #116	@ 0x74
 80079c8:	4614      	mov	r4, r2
 80079ca:	4698      	mov	r8, r3
 80079cc:	4606      	mov	r6, r0
 80079ce:	b118      	cbz	r0, 80079d8 <_vfiprintf_r+0x18>
 80079d0:	6a03      	ldr	r3, [r0, #32]
 80079d2:	b90b      	cbnz	r3, 80079d8 <_vfiprintf_r+0x18>
 80079d4:	f7ff fbda 	bl	800718c <__sinit>
 80079d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079da:	07d9      	lsls	r1, r3, #31
 80079dc:	d405      	bmi.n	80079ea <_vfiprintf_r+0x2a>
 80079de:	89ab      	ldrh	r3, [r5, #12]
 80079e0:	059a      	lsls	r2, r3, #22
 80079e2:	d402      	bmi.n	80079ea <_vfiprintf_r+0x2a>
 80079e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079e6:	f7ff fd60 	bl	80074aa <__retarget_lock_acquire_recursive>
 80079ea:	89ab      	ldrh	r3, [r5, #12]
 80079ec:	071b      	lsls	r3, r3, #28
 80079ee:	d501      	bpl.n	80079f4 <_vfiprintf_r+0x34>
 80079f0:	692b      	ldr	r3, [r5, #16]
 80079f2:	b99b      	cbnz	r3, 8007a1c <_vfiprintf_r+0x5c>
 80079f4:	4629      	mov	r1, r5
 80079f6:	4630      	mov	r0, r6
 80079f8:	f000 fac6 	bl	8007f88 <__swsetup_r>
 80079fc:	b170      	cbz	r0, 8007a1c <_vfiprintf_r+0x5c>
 80079fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a00:	07dc      	lsls	r4, r3, #31
 8007a02:	d504      	bpl.n	8007a0e <_vfiprintf_r+0x4e>
 8007a04:	f04f 30ff 	mov.w	r0, #4294967295
 8007a08:	b01d      	add	sp, #116	@ 0x74
 8007a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0e:	89ab      	ldrh	r3, [r5, #12]
 8007a10:	0598      	lsls	r0, r3, #22
 8007a12:	d4f7      	bmi.n	8007a04 <_vfiprintf_r+0x44>
 8007a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a16:	f7ff fd49 	bl	80074ac <__retarget_lock_release_recursive>
 8007a1a:	e7f3      	b.n	8007a04 <_vfiprintf_r+0x44>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a20:	2320      	movs	r3, #32
 8007a22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a2a:	2330      	movs	r3, #48	@ 0x30
 8007a2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007bdc <_vfiprintf_r+0x21c>
 8007a30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a34:	f04f 0901 	mov.w	r9, #1
 8007a38:	4623      	mov	r3, r4
 8007a3a:	469a      	mov	sl, r3
 8007a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a40:	b10a      	cbz	r2, 8007a46 <_vfiprintf_r+0x86>
 8007a42:	2a25      	cmp	r2, #37	@ 0x25
 8007a44:	d1f9      	bne.n	8007a3a <_vfiprintf_r+0x7a>
 8007a46:	ebba 0b04 	subs.w	fp, sl, r4
 8007a4a:	d00b      	beq.n	8007a64 <_vfiprintf_r+0xa4>
 8007a4c:	465b      	mov	r3, fp
 8007a4e:	4622      	mov	r2, r4
 8007a50:	4629      	mov	r1, r5
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7ff ffa1 	bl	800799a <__sfputs_r>
 8007a58:	3001      	adds	r0, #1
 8007a5a:	f000 80a7 	beq.w	8007bac <_vfiprintf_r+0x1ec>
 8007a5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a60:	445a      	add	r2, fp
 8007a62:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a64:	f89a 3000 	ldrb.w	r3, [sl]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 809f 	beq.w	8007bac <_vfiprintf_r+0x1ec>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f04f 32ff 	mov.w	r2, #4294967295
 8007a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a78:	f10a 0a01 	add.w	sl, sl, #1
 8007a7c:	9304      	str	r3, [sp, #16]
 8007a7e:	9307      	str	r3, [sp, #28]
 8007a80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a84:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a86:	4654      	mov	r4, sl
 8007a88:	2205      	movs	r2, #5
 8007a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a8e:	4853      	ldr	r0, [pc, #332]	@ (8007bdc <_vfiprintf_r+0x21c>)
 8007a90:	f7f8 fbb6 	bl	8000200 <memchr>
 8007a94:	9a04      	ldr	r2, [sp, #16]
 8007a96:	b9d8      	cbnz	r0, 8007ad0 <_vfiprintf_r+0x110>
 8007a98:	06d1      	lsls	r1, r2, #27
 8007a9a:	bf44      	itt	mi
 8007a9c:	2320      	movmi	r3, #32
 8007a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007aa2:	0713      	lsls	r3, r2, #28
 8007aa4:	bf44      	itt	mi
 8007aa6:	232b      	movmi	r3, #43	@ 0x2b
 8007aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007aac:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ab2:	d015      	beq.n	8007ae0 <_vfiprintf_r+0x120>
 8007ab4:	9a07      	ldr	r2, [sp, #28]
 8007ab6:	4654      	mov	r4, sl
 8007ab8:	2000      	movs	r0, #0
 8007aba:	f04f 0c0a 	mov.w	ip, #10
 8007abe:	4621      	mov	r1, r4
 8007ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ac4:	3b30      	subs	r3, #48	@ 0x30
 8007ac6:	2b09      	cmp	r3, #9
 8007ac8:	d94b      	bls.n	8007b62 <_vfiprintf_r+0x1a2>
 8007aca:	b1b0      	cbz	r0, 8007afa <_vfiprintf_r+0x13a>
 8007acc:	9207      	str	r2, [sp, #28]
 8007ace:	e014      	b.n	8007afa <_vfiprintf_r+0x13a>
 8007ad0:	eba0 0308 	sub.w	r3, r0, r8
 8007ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	9304      	str	r3, [sp, #16]
 8007adc:	46a2      	mov	sl, r4
 8007ade:	e7d2      	b.n	8007a86 <_vfiprintf_r+0xc6>
 8007ae0:	9b03      	ldr	r3, [sp, #12]
 8007ae2:	1d19      	adds	r1, r3, #4
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	9103      	str	r1, [sp, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	bfbb      	ittet	lt
 8007aec:	425b      	neglt	r3, r3
 8007aee:	f042 0202 	orrlt.w	r2, r2, #2
 8007af2:	9307      	strge	r3, [sp, #28]
 8007af4:	9307      	strlt	r3, [sp, #28]
 8007af6:	bfb8      	it	lt
 8007af8:	9204      	strlt	r2, [sp, #16]
 8007afa:	7823      	ldrb	r3, [r4, #0]
 8007afc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007afe:	d10a      	bne.n	8007b16 <_vfiprintf_r+0x156>
 8007b00:	7863      	ldrb	r3, [r4, #1]
 8007b02:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b04:	d132      	bne.n	8007b6c <_vfiprintf_r+0x1ac>
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	1d1a      	adds	r2, r3, #4
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	9203      	str	r2, [sp, #12]
 8007b0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b12:	3402      	adds	r4, #2
 8007b14:	9305      	str	r3, [sp, #20]
 8007b16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007bec <_vfiprintf_r+0x22c>
 8007b1a:	7821      	ldrb	r1, [r4, #0]
 8007b1c:	2203      	movs	r2, #3
 8007b1e:	4650      	mov	r0, sl
 8007b20:	f7f8 fb6e 	bl	8000200 <memchr>
 8007b24:	b138      	cbz	r0, 8007b36 <_vfiprintf_r+0x176>
 8007b26:	9b04      	ldr	r3, [sp, #16]
 8007b28:	eba0 000a 	sub.w	r0, r0, sl
 8007b2c:	2240      	movs	r2, #64	@ 0x40
 8007b2e:	4082      	lsls	r2, r0
 8007b30:	4313      	orrs	r3, r2
 8007b32:	3401      	adds	r4, #1
 8007b34:	9304      	str	r3, [sp, #16]
 8007b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b3a:	4829      	ldr	r0, [pc, #164]	@ (8007be0 <_vfiprintf_r+0x220>)
 8007b3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b40:	2206      	movs	r2, #6
 8007b42:	f7f8 fb5d 	bl	8000200 <memchr>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d03f      	beq.n	8007bca <_vfiprintf_r+0x20a>
 8007b4a:	4b26      	ldr	r3, [pc, #152]	@ (8007be4 <_vfiprintf_r+0x224>)
 8007b4c:	bb1b      	cbnz	r3, 8007b96 <_vfiprintf_r+0x1d6>
 8007b4e:	9b03      	ldr	r3, [sp, #12]
 8007b50:	3307      	adds	r3, #7
 8007b52:	f023 0307 	bic.w	r3, r3, #7
 8007b56:	3308      	adds	r3, #8
 8007b58:	9303      	str	r3, [sp, #12]
 8007b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b5c:	443b      	add	r3, r7
 8007b5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b60:	e76a      	b.n	8007a38 <_vfiprintf_r+0x78>
 8007b62:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b66:	460c      	mov	r4, r1
 8007b68:	2001      	movs	r0, #1
 8007b6a:	e7a8      	b.n	8007abe <_vfiprintf_r+0xfe>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	3401      	adds	r4, #1
 8007b70:	9305      	str	r3, [sp, #20]
 8007b72:	4619      	mov	r1, r3
 8007b74:	f04f 0c0a 	mov.w	ip, #10
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b7e:	3a30      	subs	r2, #48	@ 0x30
 8007b80:	2a09      	cmp	r2, #9
 8007b82:	d903      	bls.n	8007b8c <_vfiprintf_r+0x1cc>
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d0c6      	beq.n	8007b16 <_vfiprintf_r+0x156>
 8007b88:	9105      	str	r1, [sp, #20]
 8007b8a:	e7c4      	b.n	8007b16 <_vfiprintf_r+0x156>
 8007b8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b90:	4604      	mov	r4, r0
 8007b92:	2301      	movs	r3, #1
 8007b94:	e7f0      	b.n	8007b78 <_vfiprintf_r+0x1b8>
 8007b96:	ab03      	add	r3, sp, #12
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	462a      	mov	r2, r5
 8007b9c:	4b12      	ldr	r3, [pc, #72]	@ (8007be8 <_vfiprintf_r+0x228>)
 8007b9e:	a904      	add	r1, sp, #16
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f3af 8000 	nop.w
 8007ba6:	4607      	mov	r7, r0
 8007ba8:	1c78      	adds	r0, r7, #1
 8007baa:	d1d6      	bne.n	8007b5a <_vfiprintf_r+0x19a>
 8007bac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bae:	07d9      	lsls	r1, r3, #31
 8007bb0:	d405      	bmi.n	8007bbe <_vfiprintf_r+0x1fe>
 8007bb2:	89ab      	ldrh	r3, [r5, #12]
 8007bb4:	059a      	lsls	r2, r3, #22
 8007bb6:	d402      	bmi.n	8007bbe <_vfiprintf_r+0x1fe>
 8007bb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bba:	f7ff fc77 	bl	80074ac <__retarget_lock_release_recursive>
 8007bbe:	89ab      	ldrh	r3, [r5, #12]
 8007bc0:	065b      	lsls	r3, r3, #25
 8007bc2:	f53f af1f 	bmi.w	8007a04 <_vfiprintf_r+0x44>
 8007bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bc8:	e71e      	b.n	8007a08 <_vfiprintf_r+0x48>
 8007bca:	ab03      	add	r3, sp, #12
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	462a      	mov	r2, r5
 8007bd0:	4b05      	ldr	r3, [pc, #20]	@ (8007be8 <_vfiprintf_r+0x228>)
 8007bd2:	a904      	add	r1, sp, #16
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f000 f879 	bl	8007ccc <_printf_i>
 8007bda:	e7e4      	b.n	8007ba6 <_vfiprintf_r+0x1e6>
 8007bdc:	08008736 	.word	0x08008736
 8007be0:	08008740 	.word	0x08008740
 8007be4:	00000000 	.word	0x00000000
 8007be8:	0800799b 	.word	0x0800799b
 8007bec:	0800873c 	.word	0x0800873c

08007bf0 <_printf_common>:
 8007bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf4:	4616      	mov	r6, r2
 8007bf6:	4698      	mov	r8, r3
 8007bf8:	688a      	ldr	r2, [r1, #8]
 8007bfa:	690b      	ldr	r3, [r1, #16]
 8007bfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c00:	4293      	cmp	r3, r2
 8007c02:	bfb8      	it	lt
 8007c04:	4613      	movlt	r3, r2
 8007c06:	6033      	str	r3, [r6, #0]
 8007c08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c0c:	4607      	mov	r7, r0
 8007c0e:	460c      	mov	r4, r1
 8007c10:	b10a      	cbz	r2, 8007c16 <_printf_common+0x26>
 8007c12:	3301      	adds	r3, #1
 8007c14:	6033      	str	r3, [r6, #0]
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	0699      	lsls	r1, r3, #26
 8007c1a:	bf42      	ittt	mi
 8007c1c:	6833      	ldrmi	r3, [r6, #0]
 8007c1e:	3302      	addmi	r3, #2
 8007c20:	6033      	strmi	r3, [r6, #0]
 8007c22:	6825      	ldr	r5, [r4, #0]
 8007c24:	f015 0506 	ands.w	r5, r5, #6
 8007c28:	d106      	bne.n	8007c38 <_printf_common+0x48>
 8007c2a:	f104 0a19 	add.w	sl, r4, #25
 8007c2e:	68e3      	ldr	r3, [r4, #12]
 8007c30:	6832      	ldr	r2, [r6, #0]
 8007c32:	1a9b      	subs	r3, r3, r2
 8007c34:	42ab      	cmp	r3, r5
 8007c36:	dc26      	bgt.n	8007c86 <_printf_common+0x96>
 8007c38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c3c:	6822      	ldr	r2, [r4, #0]
 8007c3e:	3b00      	subs	r3, #0
 8007c40:	bf18      	it	ne
 8007c42:	2301      	movne	r3, #1
 8007c44:	0692      	lsls	r2, r2, #26
 8007c46:	d42b      	bmi.n	8007ca0 <_printf_common+0xb0>
 8007c48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c4c:	4641      	mov	r1, r8
 8007c4e:	4638      	mov	r0, r7
 8007c50:	47c8      	blx	r9
 8007c52:	3001      	adds	r0, #1
 8007c54:	d01e      	beq.n	8007c94 <_printf_common+0xa4>
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	6922      	ldr	r2, [r4, #16]
 8007c5a:	f003 0306 	and.w	r3, r3, #6
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	bf02      	ittt	eq
 8007c62:	68e5      	ldreq	r5, [r4, #12]
 8007c64:	6833      	ldreq	r3, [r6, #0]
 8007c66:	1aed      	subeq	r5, r5, r3
 8007c68:	68a3      	ldr	r3, [r4, #8]
 8007c6a:	bf0c      	ite	eq
 8007c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c70:	2500      	movne	r5, #0
 8007c72:	4293      	cmp	r3, r2
 8007c74:	bfc4      	itt	gt
 8007c76:	1a9b      	subgt	r3, r3, r2
 8007c78:	18ed      	addgt	r5, r5, r3
 8007c7a:	2600      	movs	r6, #0
 8007c7c:	341a      	adds	r4, #26
 8007c7e:	42b5      	cmp	r5, r6
 8007c80:	d11a      	bne.n	8007cb8 <_printf_common+0xc8>
 8007c82:	2000      	movs	r0, #0
 8007c84:	e008      	b.n	8007c98 <_printf_common+0xa8>
 8007c86:	2301      	movs	r3, #1
 8007c88:	4652      	mov	r2, sl
 8007c8a:	4641      	mov	r1, r8
 8007c8c:	4638      	mov	r0, r7
 8007c8e:	47c8      	blx	r9
 8007c90:	3001      	adds	r0, #1
 8007c92:	d103      	bne.n	8007c9c <_printf_common+0xac>
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9c:	3501      	adds	r5, #1
 8007c9e:	e7c6      	b.n	8007c2e <_printf_common+0x3e>
 8007ca0:	18e1      	adds	r1, r4, r3
 8007ca2:	1c5a      	adds	r2, r3, #1
 8007ca4:	2030      	movs	r0, #48	@ 0x30
 8007ca6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007caa:	4422      	add	r2, r4
 8007cac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007cb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007cb4:	3302      	adds	r3, #2
 8007cb6:	e7c7      	b.n	8007c48 <_printf_common+0x58>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	4622      	mov	r2, r4
 8007cbc:	4641      	mov	r1, r8
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	47c8      	blx	r9
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	d0e6      	beq.n	8007c94 <_printf_common+0xa4>
 8007cc6:	3601      	adds	r6, #1
 8007cc8:	e7d9      	b.n	8007c7e <_printf_common+0x8e>
	...

08007ccc <_printf_i>:
 8007ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd0:	7e0f      	ldrb	r7, [r1, #24]
 8007cd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007cd4:	2f78      	cmp	r7, #120	@ 0x78
 8007cd6:	4691      	mov	r9, r2
 8007cd8:	4680      	mov	r8, r0
 8007cda:	460c      	mov	r4, r1
 8007cdc:	469a      	mov	sl, r3
 8007cde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ce2:	d807      	bhi.n	8007cf4 <_printf_i+0x28>
 8007ce4:	2f62      	cmp	r7, #98	@ 0x62
 8007ce6:	d80a      	bhi.n	8007cfe <_printf_i+0x32>
 8007ce8:	2f00      	cmp	r7, #0
 8007cea:	f000 80d2 	beq.w	8007e92 <_printf_i+0x1c6>
 8007cee:	2f58      	cmp	r7, #88	@ 0x58
 8007cf0:	f000 80b9 	beq.w	8007e66 <_printf_i+0x19a>
 8007cf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007cfc:	e03a      	b.n	8007d74 <_printf_i+0xa8>
 8007cfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d02:	2b15      	cmp	r3, #21
 8007d04:	d8f6      	bhi.n	8007cf4 <_printf_i+0x28>
 8007d06:	a101      	add	r1, pc, #4	@ (adr r1, 8007d0c <_printf_i+0x40>)
 8007d08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d0c:	08007d65 	.word	0x08007d65
 8007d10:	08007d79 	.word	0x08007d79
 8007d14:	08007cf5 	.word	0x08007cf5
 8007d18:	08007cf5 	.word	0x08007cf5
 8007d1c:	08007cf5 	.word	0x08007cf5
 8007d20:	08007cf5 	.word	0x08007cf5
 8007d24:	08007d79 	.word	0x08007d79
 8007d28:	08007cf5 	.word	0x08007cf5
 8007d2c:	08007cf5 	.word	0x08007cf5
 8007d30:	08007cf5 	.word	0x08007cf5
 8007d34:	08007cf5 	.word	0x08007cf5
 8007d38:	08007e79 	.word	0x08007e79
 8007d3c:	08007da3 	.word	0x08007da3
 8007d40:	08007e33 	.word	0x08007e33
 8007d44:	08007cf5 	.word	0x08007cf5
 8007d48:	08007cf5 	.word	0x08007cf5
 8007d4c:	08007e9b 	.word	0x08007e9b
 8007d50:	08007cf5 	.word	0x08007cf5
 8007d54:	08007da3 	.word	0x08007da3
 8007d58:	08007cf5 	.word	0x08007cf5
 8007d5c:	08007cf5 	.word	0x08007cf5
 8007d60:	08007e3b 	.word	0x08007e3b
 8007d64:	6833      	ldr	r3, [r6, #0]
 8007d66:	1d1a      	adds	r2, r3, #4
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6032      	str	r2, [r6, #0]
 8007d6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d74:	2301      	movs	r3, #1
 8007d76:	e09d      	b.n	8007eb4 <_printf_i+0x1e8>
 8007d78:	6833      	ldr	r3, [r6, #0]
 8007d7a:	6820      	ldr	r0, [r4, #0]
 8007d7c:	1d19      	adds	r1, r3, #4
 8007d7e:	6031      	str	r1, [r6, #0]
 8007d80:	0606      	lsls	r6, r0, #24
 8007d82:	d501      	bpl.n	8007d88 <_printf_i+0xbc>
 8007d84:	681d      	ldr	r5, [r3, #0]
 8007d86:	e003      	b.n	8007d90 <_printf_i+0xc4>
 8007d88:	0645      	lsls	r5, r0, #25
 8007d8a:	d5fb      	bpl.n	8007d84 <_printf_i+0xb8>
 8007d8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d90:	2d00      	cmp	r5, #0
 8007d92:	da03      	bge.n	8007d9c <_printf_i+0xd0>
 8007d94:	232d      	movs	r3, #45	@ 0x2d
 8007d96:	426d      	negs	r5, r5
 8007d98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d9c:	4859      	ldr	r0, [pc, #356]	@ (8007f04 <_printf_i+0x238>)
 8007d9e:	230a      	movs	r3, #10
 8007da0:	e011      	b.n	8007dc6 <_printf_i+0xfa>
 8007da2:	6821      	ldr	r1, [r4, #0]
 8007da4:	6833      	ldr	r3, [r6, #0]
 8007da6:	0608      	lsls	r0, r1, #24
 8007da8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007dac:	d402      	bmi.n	8007db4 <_printf_i+0xe8>
 8007dae:	0649      	lsls	r1, r1, #25
 8007db0:	bf48      	it	mi
 8007db2:	b2ad      	uxthmi	r5, r5
 8007db4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007db6:	4853      	ldr	r0, [pc, #332]	@ (8007f04 <_printf_i+0x238>)
 8007db8:	6033      	str	r3, [r6, #0]
 8007dba:	bf14      	ite	ne
 8007dbc:	230a      	movne	r3, #10
 8007dbe:	2308      	moveq	r3, #8
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007dc6:	6866      	ldr	r6, [r4, #4]
 8007dc8:	60a6      	str	r6, [r4, #8]
 8007dca:	2e00      	cmp	r6, #0
 8007dcc:	bfa2      	ittt	ge
 8007dce:	6821      	ldrge	r1, [r4, #0]
 8007dd0:	f021 0104 	bicge.w	r1, r1, #4
 8007dd4:	6021      	strge	r1, [r4, #0]
 8007dd6:	b90d      	cbnz	r5, 8007ddc <_printf_i+0x110>
 8007dd8:	2e00      	cmp	r6, #0
 8007dda:	d04b      	beq.n	8007e74 <_printf_i+0x1a8>
 8007ddc:	4616      	mov	r6, r2
 8007dde:	fbb5 f1f3 	udiv	r1, r5, r3
 8007de2:	fb03 5711 	mls	r7, r3, r1, r5
 8007de6:	5dc7      	ldrb	r7, [r0, r7]
 8007de8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007dec:	462f      	mov	r7, r5
 8007dee:	42bb      	cmp	r3, r7
 8007df0:	460d      	mov	r5, r1
 8007df2:	d9f4      	bls.n	8007dde <_printf_i+0x112>
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d10b      	bne.n	8007e10 <_printf_i+0x144>
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	07df      	lsls	r7, r3, #31
 8007dfc:	d508      	bpl.n	8007e10 <_printf_i+0x144>
 8007dfe:	6923      	ldr	r3, [r4, #16]
 8007e00:	6861      	ldr	r1, [r4, #4]
 8007e02:	4299      	cmp	r1, r3
 8007e04:	bfde      	ittt	le
 8007e06:	2330      	movle	r3, #48	@ 0x30
 8007e08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e10:	1b92      	subs	r2, r2, r6
 8007e12:	6122      	str	r2, [r4, #16]
 8007e14:	f8cd a000 	str.w	sl, [sp]
 8007e18:	464b      	mov	r3, r9
 8007e1a:	aa03      	add	r2, sp, #12
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	4640      	mov	r0, r8
 8007e20:	f7ff fee6 	bl	8007bf0 <_printf_common>
 8007e24:	3001      	adds	r0, #1
 8007e26:	d14a      	bne.n	8007ebe <_printf_i+0x1f2>
 8007e28:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2c:	b004      	add	sp, #16
 8007e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	f043 0320 	orr.w	r3, r3, #32
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	4833      	ldr	r0, [pc, #204]	@ (8007f08 <_printf_i+0x23c>)
 8007e3c:	2778      	movs	r7, #120	@ 0x78
 8007e3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	6831      	ldr	r1, [r6, #0]
 8007e46:	061f      	lsls	r7, r3, #24
 8007e48:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e4c:	d402      	bmi.n	8007e54 <_printf_i+0x188>
 8007e4e:	065f      	lsls	r7, r3, #25
 8007e50:	bf48      	it	mi
 8007e52:	b2ad      	uxthmi	r5, r5
 8007e54:	6031      	str	r1, [r6, #0]
 8007e56:	07d9      	lsls	r1, r3, #31
 8007e58:	bf44      	itt	mi
 8007e5a:	f043 0320 	orrmi.w	r3, r3, #32
 8007e5e:	6023      	strmi	r3, [r4, #0]
 8007e60:	b11d      	cbz	r5, 8007e6a <_printf_i+0x19e>
 8007e62:	2310      	movs	r3, #16
 8007e64:	e7ac      	b.n	8007dc0 <_printf_i+0xf4>
 8007e66:	4827      	ldr	r0, [pc, #156]	@ (8007f04 <_printf_i+0x238>)
 8007e68:	e7e9      	b.n	8007e3e <_printf_i+0x172>
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	f023 0320 	bic.w	r3, r3, #32
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	e7f6      	b.n	8007e62 <_printf_i+0x196>
 8007e74:	4616      	mov	r6, r2
 8007e76:	e7bd      	b.n	8007df4 <_printf_i+0x128>
 8007e78:	6833      	ldr	r3, [r6, #0]
 8007e7a:	6825      	ldr	r5, [r4, #0]
 8007e7c:	6961      	ldr	r1, [r4, #20]
 8007e7e:	1d18      	adds	r0, r3, #4
 8007e80:	6030      	str	r0, [r6, #0]
 8007e82:	062e      	lsls	r6, r5, #24
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	d501      	bpl.n	8007e8c <_printf_i+0x1c0>
 8007e88:	6019      	str	r1, [r3, #0]
 8007e8a:	e002      	b.n	8007e92 <_printf_i+0x1c6>
 8007e8c:	0668      	lsls	r0, r5, #25
 8007e8e:	d5fb      	bpl.n	8007e88 <_printf_i+0x1bc>
 8007e90:	8019      	strh	r1, [r3, #0]
 8007e92:	2300      	movs	r3, #0
 8007e94:	6123      	str	r3, [r4, #16]
 8007e96:	4616      	mov	r6, r2
 8007e98:	e7bc      	b.n	8007e14 <_printf_i+0x148>
 8007e9a:	6833      	ldr	r3, [r6, #0]
 8007e9c:	1d1a      	adds	r2, r3, #4
 8007e9e:	6032      	str	r2, [r6, #0]
 8007ea0:	681e      	ldr	r6, [r3, #0]
 8007ea2:	6862      	ldr	r2, [r4, #4]
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f7f8 f9aa 	bl	8000200 <memchr>
 8007eac:	b108      	cbz	r0, 8007eb2 <_printf_i+0x1e6>
 8007eae:	1b80      	subs	r0, r0, r6
 8007eb0:	6060      	str	r0, [r4, #4]
 8007eb2:	6863      	ldr	r3, [r4, #4]
 8007eb4:	6123      	str	r3, [r4, #16]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ebc:	e7aa      	b.n	8007e14 <_printf_i+0x148>
 8007ebe:	6923      	ldr	r3, [r4, #16]
 8007ec0:	4632      	mov	r2, r6
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	4640      	mov	r0, r8
 8007ec6:	47d0      	blx	sl
 8007ec8:	3001      	adds	r0, #1
 8007eca:	d0ad      	beq.n	8007e28 <_printf_i+0x15c>
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	079b      	lsls	r3, r3, #30
 8007ed0:	d413      	bmi.n	8007efa <_printf_i+0x22e>
 8007ed2:	68e0      	ldr	r0, [r4, #12]
 8007ed4:	9b03      	ldr	r3, [sp, #12]
 8007ed6:	4298      	cmp	r0, r3
 8007ed8:	bfb8      	it	lt
 8007eda:	4618      	movlt	r0, r3
 8007edc:	e7a6      	b.n	8007e2c <_printf_i+0x160>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	4632      	mov	r2, r6
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	47d0      	blx	sl
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d09d      	beq.n	8007e28 <_printf_i+0x15c>
 8007eec:	3501      	adds	r5, #1
 8007eee:	68e3      	ldr	r3, [r4, #12]
 8007ef0:	9903      	ldr	r1, [sp, #12]
 8007ef2:	1a5b      	subs	r3, r3, r1
 8007ef4:	42ab      	cmp	r3, r5
 8007ef6:	dcf2      	bgt.n	8007ede <_printf_i+0x212>
 8007ef8:	e7eb      	b.n	8007ed2 <_printf_i+0x206>
 8007efa:	2500      	movs	r5, #0
 8007efc:	f104 0619 	add.w	r6, r4, #25
 8007f00:	e7f5      	b.n	8007eee <_printf_i+0x222>
 8007f02:	bf00      	nop
 8007f04:	08008747 	.word	0x08008747
 8007f08:	08008758 	.word	0x08008758

08007f0c <__swbuf_r>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	460e      	mov	r6, r1
 8007f10:	4614      	mov	r4, r2
 8007f12:	4605      	mov	r5, r0
 8007f14:	b118      	cbz	r0, 8007f1e <__swbuf_r+0x12>
 8007f16:	6a03      	ldr	r3, [r0, #32]
 8007f18:	b90b      	cbnz	r3, 8007f1e <__swbuf_r+0x12>
 8007f1a:	f7ff f937 	bl	800718c <__sinit>
 8007f1e:	69a3      	ldr	r3, [r4, #24]
 8007f20:	60a3      	str	r3, [r4, #8]
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	071a      	lsls	r2, r3, #28
 8007f26:	d501      	bpl.n	8007f2c <__swbuf_r+0x20>
 8007f28:	6923      	ldr	r3, [r4, #16]
 8007f2a:	b943      	cbnz	r3, 8007f3e <__swbuf_r+0x32>
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	4628      	mov	r0, r5
 8007f30:	f000 f82a 	bl	8007f88 <__swsetup_r>
 8007f34:	b118      	cbz	r0, 8007f3e <__swbuf_r+0x32>
 8007f36:	f04f 37ff 	mov.w	r7, #4294967295
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	6922      	ldr	r2, [r4, #16]
 8007f42:	1a98      	subs	r0, r3, r2
 8007f44:	6963      	ldr	r3, [r4, #20]
 8007f46:	b2f6      	uxtb	r6, r6
 8007f48:	4283      	cmp	r3, r0
 8007f4a:	4637      	mov	r7, r6
 8007f4c:	dc05      	bgt.n	8007f5a <__swbuf_r+0x4e>
 8007f4e:	4621      	mov	r1, r4
 8007f50:	4628      	mov	r0, r5
 8007f52:	f7ff f853 	bl	8006ffc <_fflush_r>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d1ed      	bne.n	8007f36 <__swbuf_r+0x2a>
 8007f5a:	68a3      	ldr	r3, [r4, #8]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	60a3      	str	r3, [r4, #8]
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	1c5a      	adds	r2, r3, #1
 8007f64:	6022      	str	r2, [r4, #0]
 8007f66:	701e      	strb	r6, [r3, #0]
 8007f68:	6962      	ldr	r2, [r4, #20]
 8007f6a:	1c43      	adds	r3, r0, #1
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d004      	beq.n	8007f7a <__swbuf_r+0x6e>
 8007f70:	89a3      	ldrh	r3, [r4, #12]
 8007f72:	07db      	lsls	r3, r3, #31
 8007f74:	d5e1      	bpl.n	8007f3a <__swbuf_r+0x2e>
 8007f76:	2e0a      	cmp	r6, #10
 8007f78:	d1df      	bne.n	8007f3a <__swbuf_r+0x2e>
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	f7ff f83d 	bl	8006ffc <_fflush_r>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d0d9      	beq.n	8007f3a <__swbuf_r+0x2e>
 8007f86:	e7d6      	b.n	8007f36 <__swbuf_r+0x2a>

08007f88 <__swsetup_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4b29      	ldr	r3, [pc, #164]	@ (8008030 <__swsetup_r+0xa8>)
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	6818      	ldr	r0, [r3, #0]
 8007f90:	460c      	mov	r4, r1
 8007f92:	b118      	cbz	r0, 8007f9c <__swsetup_r+0x14>
 8007f94:	6a03      	ldr	r3, [r0, #32]
 8007f96:	b90b      	cbnz	r3, 8007f9c <__swsetup_r+0x14>
 8007f98:	f7ff f8f8 	bl	800718c <__sinit>
 8007f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fa0:	0719      	lsls	r1, r3, #28
 8007fa2:	d422      	bmi.n	8007fea <__swsetup_r+0x62>
 8007fa4:	06da      	lsls	r2, r3, #27
 8007fa6:	d407      	bmi.n	8007fb8 <__swsetup_r+0x30>
 8007fa8:	2209      	movs	r2, #9
 8007faa:	602a      	str	r2, [r5, #0]
 8007fac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fb0:	81a3      	strh	r3, [r4, #12]
 8007fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb6:	e033      	b.n	8008020 <__swsetup_r+0x98>
 8007fb8:	0758      	lsls	r0, r3, #29
 8007fba:	d512      	bpl.n	8007fe2 <__swsetup_r+0x5a>
 8007fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fbe:	b141      	cbz	r1, 8007fd2 <__swsetup_r+0x4a>
 8007fc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fc4:	4299      	cmp	r1, r3
 8007fc6:	d002      	beq.n	8007fce <__swsetup_r+0x46>
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f7ff fa7f 	bl	80074cc <_free_r>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fd2:	89a3      	ldrh	r3, [r4, #12]
 8007fd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007fd8:	81a3      	strh	r3, [r4, #12]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	6063      	str	r3, [r4, #4]
 8007fde:	6923      	ldr	r3, [r4, #16]
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	f043 0308 	orr.w	r3, r3, #8
 8007fe8:	81a3      	strh	r3, [r4, #12]
 8007fea:	6923      	ldr	r3, [r4, #16]
 8007fec:	b94b      	cbnz	r3, 8008002 <__swsetup_r+0x7a>
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ff8:	d003      	beq.n	8008002 <__swsetup_r+0x7a>
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f000 f897 	bl	8008130 <__smakebuf_r>
 8008002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008006:	f013 0201 	ands.w	r2, r3, #1
 800800a:	d00a      	beq.n	8008022 <__swsetup_r+0x9a>
 800800c:	2200      	movs	r2, #0
 800800e:	60a2      	str	r2, [r4, #8]
 8008010:	6962      	ldr	r2, [r4, #20]
 8008012:	4252      	negs	r2, r2
 8008014:	61a2      	str	r2, [r4, #24]
 8008016:	6922      	ldr	r2, [r4, #16]
 8008018:	b942      	cbnz	r2, 800802c <__swsetup_r+0xa4>
 800801a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800801e:	d1c5      	bne.n	8007fac <__swsetup_r+0x24>
 8008020:	bd38      	pop	{r3, r4, r5, pc}
 8008022:	0799      	lsls	r1, r3, #30
 8008024:	bf58      	it	pl
 8008026:	6962      	ldrpl	r2, [r4, #20]
 8008028:	60a2      	str	r2, [r4, #8]
 800802a:	e7f4      	b.n	8008016 <__swsetup_r+0x8e>
 800802c:	2000      	movs	r0, #0
 800802e:	e7f7      	b.n	8008020 <__swsetup_r+0x98>
 8008030:	2000007c 	.word	0x2000007c

08008034 <memmove>:
 8008034:	4288      	cmp	r0, r1
 8008036:	b510      	push	{r4, lr}
 8008038:	eb01 0402 	add.w	r4, r1, r2
 800803c:	d902      	bls.n	8008044 <memmove+0x10>
 800803e:	4284      	cmp	r4, r0
 8008040:	4623      	mov	r3, r4
 8008042:	d807      	bhi.n	8008054 <memmove+0x20>
 8008044:	1e43      	subs	r3, r0, #1
 8008046:	42a1      	cmp	r1, r4
 8008048:	d008      	beq.n	800805c <memmove+0x28>
 800804a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800804e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008052:	e7f8      	b.n	8008046 <memmove+0x12>
 8008054:	4402      	add	r2, r0
 8008056:	4601      	mov	r1, r0
 8008058:	428a      	cmp	r2, r1
 800805a:	d100      	bne.n	800805e <memmove+0x2a>
 800805c:	bd10      	pop	{r4, pc}
 800805e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008066:	e7f7      	b.n	8008058 <memmove+0x24>

08008068 <_sbrk_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4d06      	ldr	r5, [pc, #24]	@ (8008084 <_sbrk_r+0x1c>)
 800806c:	2300      	movs	r3, #0
 800806e:	4604      	mov	r4, r0
 8008070:	4608      	mov	r0, r1
 8008072:	602b      	str	r3, [r5, #0]
 8008074:	f7f8 ff58 	bl	8000f28 <_sbrk>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d102      	bne.n	8008082 <_sbrk_r+0x1a>
 800807c:	682b      	ldr	r3, [r5, #0]
 800807e:	b103      	cbz	r3, 8008082 <_sbrk_r+0x1a>
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	200048d4 	.word	0x200048d4

08008088 <_realloc_r>:
 8008088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800808c:	4680      	mov	r8, r0
 800808e:	4615      	mov	r5, r2
 8008090:	460c      	mov	r4, r1
 8008092:	b921      	cbnz	r1, 800809e <_realloc_r+0x16>
 8008094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008098:	4611      	mov	r1, r2
 800809a:	f7ff ba83 	b.w	80075a4 <_malloc_r>
 800809e:	b92a      	cbnz	r2, 80080ac <_realloc_r+0x24>
 80080a0:	f7ff fa14 	bl	80074cc <_free_r>
 80080a4:	2400      	movs	r4, #0
 80080a6:	4620      	mov	r0, r4
 80080a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ac:	f000 f89e 	bl	80081ec <_malloc_usable_size_r>
 80080b0:	4285      	cmp	r5, r0
 80080b2:	4606      	mov	r6, r0
 80080b4:	d802      	bhi.n	80080bc <_realloc_r+0x34>
 80080b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080ba:	d8f4      	bhi.n	80080a6 <_realloc_r+0x1e>
 80080bc:	4629      	mov	r1, r5
 80080be:	4640      	mov	r0, r8
 80080c0:	f7ff fa70 	bl	80075a4 <_malloc_r>
 80080c4:	4607      	mov	r7, r0
 80080c6:	2800      	cmp	r0, #0
 80080c8:	d0ec      	beq.n	80080a4 <_realloc_r+0x1c>
 80080ca:	42b5      	cmp	r5, r6
 80080cc:	462a      	mov	r2, r5
 80080ce:	4621      	mov	r1, r4
 80080d0:	bf28      	it	cs
 80080d2:	4632      	movcs	r2, r6
 80080d4:	f7ff f9eb 	bl	80074ae <memcpy>
 80080d8:	4621      	mov	r1, r4
 80080da:	4640      	mov	r0, r8
 80080dc:	f7ff f9f6 	bl	80074cc <_free_r>
 80080e0:	463c      	mov	r4, r7
 80080e2:	e7e0      	b.n	80080a6 <_realloc_r+0x1e>

080080e4 <__swhatbuf_r>:
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	460c      	mov	r4, r1
 80080e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ec:	2900      	cmp	r1, #0
 80080ee:	b096      	sub	sp, #88	@ 0x58
 80080f0:	4615      	mov	r5, r2
 80080f2:	461e      	mov	r6, r3
 80080f4:	da0d      	bge.n	8008112 <__swhatbuf_r+0x2e>
 80080f6:	89a3      	ldrh	r3, [r4, #12]
 80080f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80080fc:	f04f 0100 	mov.w	r1, #0
 8008100:	bf14      	ite	ne
 8008102:	2340      	movne	r3, #64	@ 0x40
 8008104:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008108:	2000      	movs	r0, #0
 800810a:	6031      	str	r1, [r6, #0]
 800810c:	602b      	str	r3, [r5, #0]
 800810e:	b016      	add	sp, #88	@ 0x58
 8008110:	bd70      	pop	{r4, r5, r6, pc}
 8008112:	466a      	mov	r2, sp
 8008114:	f000 f848 	bl	80081a8 <_fstat_r>
 8008118:	2800      	cmp	r0, #0
 800811a:	dbec      	blt.n	80080f6 <__swhatbuf_r+0x12>
 800811c:	9901      	ldr	r1, [sp, #4]
 800811e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008122:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008126:	4259      	negs	r1, r3
 8008128:	4159      	adcs	r1, r3
 800812a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800812e:	e7eb      	b.n	8008108 <__swhatbuf_r+0x24>

08008130 <__smakebuf_r>:
 8008130:	898b      	ldrh	r3, [r1, #12]
 8008132:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008134:	079d      	lsls	r5, r3, #30
 8008136:	4606      	mov	r6, r0
 8008138:	460c      	mov	r4, r1
 800813a:	d507      	bpl.n	800814c <__smakebuf_r+0x1c>
 800813c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	6123      	str	r3, [r4, #16]
 8008144:	2301      	movs	r3, #1
 8008146:	6163      	str	r3, [r4, #20]
 8008148:	b003      	add	sp, #12
 800814a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800814c:	ab01      	add	r3, sp, #4
 800814e:	466a      	mov	r2, sp
 8008150:	f7ff ffc8 	bl	80080e4 <__swhatbuf_r>
 8008154:	9f00      	ldr	r7, [sp, #0]
 8008156:	4605      	mov	r5, r0
 8008158:	4639      	mov	r1, r7
 800815a:	4630      	mov	r0, r6
 800815c:	f7ff fa22 	bl	80075a4 <_malloc_r>
 8008160:	b948      	cbnz	r0, 8008176 <__smakebuf_r+0x46>
 8008162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008166:	059a      	lsls	r2, r3, #22
 8008168:	d4ee      	bmi.n	8008148 <__smakebuf_r+0x18>
 800816a:	f023 0303 	bic.w	r3, r3, #3
 800816e:	f043 0302 	orr.w	r3, r3, #2
 8008172:	81a3      	strh	r3, [r4, #12]
 8008174:	e7e2      	b.n	800813c <__smakebuf_r+0xc>
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	6020      	str	r0, [r4, #0]
 800817a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800817e:	81a3      	strh	r3, [r4, #12]
 8008180:	9b01      	ldr	r3, [sp, #4]
 8008182:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008186:	b15b      	cbz	r3, 80081a0 <__smakebuf_r+0x70>
 8008188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800818c:	4630      	mov	r0, r6
 800818e:	f000 f81d 	bl	80081cc <_isatty_r>
 8008192:	b128      	cbz	r0, 80081a0 <__smakebuf_r+0x70>
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	f023 0303 	bic.w	r3, r3, #3
 800819a:	f043 0301 	orr.w	r3, r3, #1
 800819e:	81a3      	strh	r3, [r4, #12]
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	431d      	orrs	r5, r3
 80081a4:	81a5      	strh	r5, [r4, #12]
 80081a6:	e7cf      	b.n	8008148 <__smakebuf_r+0x18>

080081a8 <_fstat_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4d07      	ldr	r5, [pc, #28]	@ (80081c8 <_fstat_r+0x20>)
 80081ac:	2300      	movs	r3, #0
 80081ae:	4604      	mov	r4, r0
 80081b0:	4608      	mov	r0, r1
 80081b2:	4611      	mov	r1, r2
 80081b4:	602b      	str	r3, [r5, #0]
 80081b6:	f7fe fd1c 	bl	8006bf2 <_fstat>
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	d102      	bne.n	80081c4 <_fstat_r+0x1c>
 80081be:	682b      	ldr	r3, [r5, #0]
 80081c0:	b103      	cbz	r3, 80081c4 <_fstat_r+0x1c>
 80081c2:	6023      	str	r3, [r4, #0]
 80081c4:	bd38      	pop	{r3, r4, r5, pc}
 80081c6:	bf00      	nop
 80081c8:	200048d4 	.word	0x200048d4

080081cc <_isatty_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4d06      	ldr	r5, [pc, #24]	@ (80081e8 <_isatty_r+0x1c>)
 80081d0:	2300      	movs	r3, #0
 80081d2:	4604      	mov	r4, r0
 80081d4:	4608      	mov	r0, r1
 80081d6:	602b      	str	r3, [r5, #0]
 80081d8:	f7fe fe6e 	bl	8006eb8 <_isatty>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	d102      	bne.n	80081e6 <_isatty_r+0x1a>
 80081e0:	682b      	ldr	r3, [r5, #0]
 80081e2:	b103      	cbz	r3, 80081e6 <_isatty_r+0x1a>
 80081e4:	6023      	str	r3, [r4, #0]
 80081e6:	bd38      	pop	{r3, r4, r5, pc}
 80081e8:	200048d4 	.word	0x200048d4

080081ec <_malloc_usable_size_r>:
 80081ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081f0:	1f18      	subs	r0, r3, #4
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	bfbc      	itt	lt
 80081f6:	580b      	ldrlt	r3, [r1, r0]
 80081f8:	18c0      	addlt	r0, r0, r3
 80081fa:	4770      	bx	lr

080081fc <_init>:
 80081fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fe:	bf00      	nop
 8008200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008202:	bc08      	pop	{r3}
 8008204:	469e      	mov	lr, r3
 8008206:	4770      	bx	lr

08008208 <_fini>:
 8008208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820a:	bf00      	nop
 800820c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800820e:	bc08      	pop	{r3}
 8008210:	469e      	mov	lr, r3
 8008212:	4770      	bx	lr
