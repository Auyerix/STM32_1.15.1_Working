
freertos_book_Example020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006df0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08006fa0  08006fa0  00007fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071d4  080071d4  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  080071d4  080071d4  000081d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071dc  080071dc  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071dc  080071dc  000081dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071e0  080071e0  000081e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080071e4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000906c  2**0
                  CONTENTS
 10 .bss          00004670  2000006c  2000006c  0000906c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200046dc  200046dc  0000906c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b054  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ab4  00000000  00000000  000240f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001740  00000000  00000000  00027ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000120b  00000000  00000000  000292e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004b99  00000000  00000000  0002a4f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a08f  00000000  00000000  0002f08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecebe  00000000  00000000  0004911b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135fd9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ca8  00000000  00000000  0013601c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0013ccc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006f88 	.word	0x08006f88

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08006f88 	.word	0x08006f88

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b08c      	sub	sp, #48	@ 0x30
 8000584:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	const char *pcTextForMain = "freertos_book_Example020 is running: Re-writing vPrintString() to use a semaphore\r\n\n";
 8000586:	4b38      	ldr	r3, [pc, #224]	@ (8000668 <main+0xe8>)
 8000588:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fe0b 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f87d 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f98b 	bl	80008ac <MX_GPIO_Init>
  MX_ETH_Init();
 8000596:	f000 f8e3 	bl	8000760 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800059a:	f000 f92f 	bl	80007fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800059e:	f000 f957 	bl	8000850 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
	/* Print out the name of this Example. */
	vPrintString( pcTextForMain );
 80005a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80005a4:	f000 fce2 	bl	8000f6c <vPrintString>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
    /* Before a semaphore is used it must be explicitly created. */
	MutexHandle = xSemaphoreCreateMutex();
 80005a8:	2001      	movs	r0, #1
 80005aa:	f003 fdc7 	bl	800413c <xQueueCreateMutex>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a2e      	ldr	r2, [pc, #184]	@ (800066c <main+0xec>)
 80005b2:	6013      	str	r3, [r2, #0]

    /* Check the semaphore was created successfully */
    configASSERT( MutexHandle != NULL );
 80005b4:	4b2d      	ldr	r3, [pc, #180]	@ (800066c <main+0xec>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d10b      	bne.n	80005d4 <main+0x54>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80005bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005c0:	f383 8811 	msr	BASEPRI, r3
 80005c4:	f3bf 8f6f 	isb	sy
 80005c8:	f3bf 8f4f 	dsb	sy
 80005cc:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80005ce:	bf00      	nop
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <main+0x50>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005d4:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <main+0xf0>)
 80005d6:	463c      	mov	r4, r7
 80005d8:	461d      	mov	r5, r3
 80005da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005de:	682b      	ldr	r3, [r5, #0]
 80005e0:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e2:	463b      	mov	r3, r7
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fbde 	bl	8003da8 <osThreadCreate>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a21      	ldr	r2, [pc, #132]	@ (8000674 <main+0xf4>)
 80005f0:	6013      	str	r3, [r2, #0]
	parameter.  The tasks are created at different priorities so some
	pre-emption will occur. */
	BaseType_t ret;

	/* Printer 1 thread at priority 1 */
	ret = xTaskCreate( prvPrintTask,				/* Pointer to the function thats implement the task. */
 80005f2:	2300      	movs	r3, #0
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2301      	movs	r3, #1
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <main+0xf8>)
 80005fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000600:	491e      	ldr	r1, [pc, #120]	@ (800067c <main+0xfc>)
 8000602:	481f      	ldr	r0, [pc, #124]	@ (8000680 <main+0x100>)
 8000604:	f004 f8c6 	bl	8004794 <xTaskCreate>
 8000608:	6238      	str	r0, [r7, #32]
					   ( void * ) "Task 1 ******************************************\r\n",		/* Pass the string to be used in as the task parameter.	*/
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 		*/
		               NULL );          	        /* We are not using the task handle. */

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00b      	beq.n	8000628 <main+0xa8>
	__asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	61bb      	str	r3, [r7, #24]
}
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <main+0xa4>

	/* Printer 2 thread at priority 2 */
	ret = xTaskCreate( prvPrintTask,				/* Pointer to the function thats implement the task. */
 8000628:	2300      	movs	r3, #0
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2302      	movs	r3, #2
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <main+0x104>)
 8000632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000636:	4914      	ldr	r1, [pc, #80]	@ (8000688 <main+0x108>)
 8000638:	4811      	ldr	r0, [pc, #68]	@ (8000680 <main+0x100>)
 800063a:	f004 f8ab 	bl	8004794 <xTaskCreate>
 800063e:	6238      	str	r0, [r7, #32]
					   ( void * ) "Task 2 ------------------------------------------\r\n",		/* Pass the string to be used in as the task parameter.	*/
					   (tskIDLE_PRIORITY + 2UL),	/* This task will run at priority 2. 		*/
		               NULL );          	        /* We are not using the task handle. */

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 8000640:	6a3b      	ldr	r3, [r7, #32]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d00b      	beq.n	800065e <main+0xde>
	__asm volatile
 8000646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800064a:	f383 8811 	msr	BASEPRI, r3
 800064e:	f3bf 8f6f 	isb	sy
 8000652:	f3bf 8f4f 	dsb	sy
 8000656:	617b      	str	r3, [r7, #20]
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	e7fd      	b.n	800065a <main+0xda>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065e:	f003 fb9c 	bl	8003d9a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000662:	bf00      	nop
 8000664:	e7fd      	b.n	8000662 <main+0xe2>
 8000666:	bf00      	nop
 8000668:	08006fa0 	.word	0x08006fa0
 800066c:	200007e0 	.word	0x200007e0
 8000670:	0800707c 	.word	0x0800707c
 8000674:	200007dc 	.word	0x200007dc
 8000678:	08006ff8 	.word	0x08006ff8
 800067c:	0800702c 	.word	0x0800702c
 8000680:	08000a55 	.word	0x08000a55
 8000684:	08007034 	.word	0x08007034
 8000688:	08007068 	.word	0x08007068

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	@ 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	@ 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f005 fe1f 	bl	80062de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b28      	ldr	r3, [pc, #160]	@ (8000758 <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	4a27      	ldr	r2, [pc, #156]	@ (8000758 <SystemClock_Config+0xcc>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c0:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b22      	ldr	r3, [pc, #136]	@ (800075c <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a21      	ldr	r2, [pc, #132]	@ (800075c <SystemClock_Config+0xd0>)
 80006d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ec:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000700:	23a8      	movs	r3, #168	@ 0xa8
 8000702:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000708:	2307      	movs	r3, #7
 800070a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fcb3 	bl	800207c <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800071c:	f000 f9d8 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2105      	movs	r1, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f001 ff14 	bl	800256c <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800074a:	f000 f9c1 	bl	8000ad0 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	@ 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000764:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <MX_ETH_Init+0x84>)
 8000766:	4a20      	ldr	r2, [pc, #128]	@ (80007e8 <MX_ETH_Init+0x88>)
 8000768:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800076a:	4b20      	ldr	r3, [pc, #128]	@ (80007ec <MX_ETH_Init+0x8c>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000770:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <MX_ETH_Init+0x8c>)
 8000772:	2280      	movs	r2, #128	@ 0x80
 8000774:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000776:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <MX_ETH_Init+0x8c>)
 8000778:	22e1      	movs	r2, #225	@ 0xe1
 800077a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800077c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <MX_ETH_Init+0x8c>)
 800077e:	2200      	movs	r2, #0
 8000780:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000782:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_ETH_Init+0x8c>)
 8000784:	2200      	movs	r2, #0
 8000786:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000788:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <MX_ETH_Init+0x8c>)
 800078a:	2200      	movs	r2, #0
 800078c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_ETH_Init+0x84>)
 8000790:	4a16      	ldr	r2, [pc, #88]	@ (80007ec <MX_ETH_Init+0x8c>)
 8000792:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_ETH_Init+0x84>)
 8000796:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800079a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_ETH_Init+0x84>)
 800079e:	4a14      	ldr	r2, [pc, #80]	@ (80007f0 <MX_ETH_Init+0x90>)
 80007a0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_ETH_Init+0x84>)
 80007a4:	4a13      	ldr	r2, [pc, #76]	@ (80007f4 <MX_ETH_Init+0x94>)
 80007a6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007a8:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_ETH_Init+0x84>)
 80007aa:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007ae:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007b0:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <MX_ETH_Init+0x84>)
 80007b2:	f000 fe3f 	bl	8001434 <HAL_ETH_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007bc:	f000 f988 	bl	8000ad0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007c0:	2238      	movs	r2, #56	@ 0x38
 80007c2:	2100      	movs	r1, #0
 80007c4:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <MX_ETH_Init+0x98>)
 80007c6:	f005 fd8a 	bl	80062de <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <MX_ETH_Init+0x98>)
 80007cc:	2221      	movs	r2, #33	@ 0x21
 80007ce:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_ETH_Init+0x98>)
 80007d2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80007d6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <MX_ETH_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000200 	.word	0x20000200
 80007e8:	40028000 	.word	0x40028000
 80007ec:	200007e4 	.word	0x200007e4
 80007f0:	20000160 	.word	0x20000160
 80007f4:	200000c0 	.word	0x200000c0
 80007f8:	20000088 	.word	0x20000088

080007fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 8000802:	4a12      	ldr	r2, [pc, #72]	@ (800084c <MX_USART3_UART_Init+0x50>)
 8000804:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 8000834:	f002 fb8e 	bl	8002f54 <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800083e:	f000 f947 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200002b0 	.word	0x200002b0
 800084c:	40004800 	.word	0x40004800

08000850 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800085a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2204      	movs	r2, #4
 8000860:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	2202      	movs	r2, #2
 8000866:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000870:	2202      	movs	r2, #2
 8000872:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	2201      	movs	r2, #1
 8000878:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000888:	2201      	movs	r2, #1
 800088a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000894:	f001 fae3 	bl	8001e5e <HAL_PCD_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800089e:	f000 f917 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200002f8 	.word	0x200002f8

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	@ 0x30
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	4b4c      	ldr	r3, [pc, #304]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a4b      	ldr	r2, [pc, #300]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b49      	ldr	r3, [pc, #292]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	4b45      	ldr	r3, [pc, #276]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a44      	ldr	r2, [pc, #272]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b42      	ldr	r3, [pc, #264]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b3e      	ldr	r3, [pc, #248]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a3d      	ldr	r2, [pc, #244]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b3b      	ldr	r3, [pc, #236]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b37      	ldr	r3, [pc, #220]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a36      	ldr	r2, [pc, #216]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b34      	ldr	r3, [pc, #208]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	4b30      	ldr	r3, [pc, #192]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a2f      	ldr	r2, [pc, #188]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b2d      	ldr	r3, [pc, #180]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b29      	ldr	r3, [pc, #164]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a28      	ldr	r2, [pc, #160]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b26      	ldr	r3, [pc, #152]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000970:	4822      	ldr	r0, [pc, #136]	@ (80009fc <MX_GPIO_Init+0x150>)
 8000972:	f001 fa5b 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2140      	movs	r1, #64	@ 0x40
 800097a:	4821      	ldr	r0, [pc, #132]	@ (8000a00 <MX_GPIO_Init+0x154>)
 800097c:	f001 fa56 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000980:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000986:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	481b      	ldr	r0, [pc, #108]	@ (8000a04 <MX_GPIO_Init+0x158>)
 8000998:	f001 f89c 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800099c:	f244 0381 	movw	r3, #16513	@ 0x4081
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4811      	ldr	r0, [pc, #68]	@ (80009fc <MX_GPIO_Init+0x150>)
 80009b6:	f001 f88d 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ba:	2340      	movs	r3, #64	@ 0x40
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	480b      	ldr	r0, [pc, #44]	@ (8000a00 <MX_GPIO_Init+0x154>)
 80009d2:	f001 f87f 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009d6:	2380      	movs	r3, #128	@ 0x80
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_GPIO_Init+0x154>)
 80009ea:	f001 f873 	bl	8001ad4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	@ 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020400 	.word	0x40020400
 8000a00:	40021800 	.word	0x40021800
 8000a04:	40020800 	.word	0x40020800

08000a08 <prvNewPrintString>:

/* USER CODE BEGIN 4 */
static void prvNewPrintString( const char *pcString )
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	available immediately.  The call to xSemaphoreTake() will only return when
	the semaphore has been successfully obtained so there is no need to check the
	return value.  If any other delay period was used then the code must check
	that xSemaphoreTake() returns pdTRUE before accessing the resource (in this
	case standard out. */
	xSemaphoreTake( MutexHandle, portMAX_DELAY );
 8000a10:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <prvNewPrintString+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f003 fca9 	bl	8004370 <xQueueSemaphoreTake>
	{
		/* The following line will only execute once the semaphore has been
		successfully obtained - so standard out can be accessed freely. */
		printf( "%s", pcString );
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	480a      	ldr	r0, [pc, #40]	@ (8000a4c <prvNewPrintString+0x44>)
 8000a22:	f005 fc07 	bl	8006234 <iprintf>
		fflush( stdout );
 8000a26:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <prvNewPrintString+0x48>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f005 fb2b 	bl	8006088 <fflush>
	}

	/* 'Give' the semaphore to unblock the task. */
	xSemaphoreGive( MutexHandle );
 8000a32:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <prvNewPrintString+0x40>)
 8000a34:	6818      	ldr	r0, [r3, #0]
 8000a36:	2300      	movs	r3, #0
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f003 fb96 	bl	800416c <xQueueGenericSend>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200007e0 	.word	0x200007e0
 8000a4c:	08007090 	.word	0x08007090
 8000a50:	2000001c 	.word	0x2000001c

08000a54 <prvPrintTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_prvPrintTask */
void prvPrintTask(void *pvParameters)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	char *pcStringToPrint;
	const TickType_t xSlowDownDelay = pdMS_TO_TICKS( 5UL );
 8000a5c:	2305      	movs	r3, #5
 8000a5e:	60fb      	str	r3, [r7, #12]

	/* Print out the name of this task. */
	vPrintString( "Print 1/2 is running\r\n" );
 8000a60:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <prvPrintTask+0x40>)
 8000a62:	f000 fa83 	bl	8000f6c <vPrintString>

	/* Two instances of this task are created.  The string printed by the task
	is passed into the task using the task's parameter.  The parameter is cast
	to the required type. */
	pcStringToPrint = ( char * ) pvParameters;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		/* Print out the string using the newly defined function. */
		prvNewPrintString( pcStringToPrint );
 8000a6a:	68b8      	ldr	r0, [r7, #8]
 8000a6c:	f7ff ffcc 	bl	8000a08 <prvNewPrintString>
		/* Wait a pseudo random time.  Note that rand() is not necessarily
		re-entrant, but in this case it does not really matter as the code does
		not care what value is returned.  In a more secure application a version
		of rand() that is known to be re-entrant should be used - or calls to
		rand() should be protected using a critical section. */
		vTaskDelay( rand() % xMaxBlockTimeTicks );
 8000a70:	f005 fa20 	bl	8005eb4 <rand>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	2320      	movs	r3, #32
 8000a7a:	fbb2 f1f3 	udiv	r1, r2, r3
 8000a7e:	fb01 f303 	mul.w	r3, r1, r3
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	4618      	mov	r0, r3
 8000a86:	f003 ffd1 	bl	8004a2c <vTaskDelay>

		/* Just to ensure the scrolling is not too fast! */
		vTaskDelay( xSlowDownDelay );
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f003 ffce 	bl	8004a2c <vTaskDelay>
		prvNewPrintString( pcStringToPrint );
 8000a90:	bf00      	nop
 8000a92:	e7ea      	b.n	8000a6a <prvPrintTask+0x16>
 8000a94:	08007094 	.word	0x08007094

08000a98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50000);
 8000aa0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000aa4:	f003 f9a7 	bl	8003df6 <osDelay>
 8000aa8:	e7fa      	b.n	8000aa0 <StartDefaultTask+0x8>
	...

08000aac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d101      	bne.n	8000ac2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000abe:	f000 fb93 	bl	80011e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40001400 	.word	0x40001400

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <Error_Handler+0x8>

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <HAL_MspInit+0x54>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	4a11      	ldr	r2, [pc, #68]	@ (8000b30 <HAL_MspInit+0x54>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <HAL_MspInit+0x54>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <HAL_MspInit+0x54>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <HAL_MspInit+0x54>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <HAL_MspInit+0x54>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	210f      	movs	r1, #15
 8000b1e:	f06f 0001 	mvn.w	r0, #1
 8000b22:	f000 fc5d 	bl	80013e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800

08000b34 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	@ 0x38
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a55      	ldr	r2, [pc, #340]	@ (8000ca8 <HAL_ETH_MspInit+0x174>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	f040 80a4 	bne.w	8000ca0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
 8000b5c:	4b53      	ldr	r3, [pc, #332]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	4a52      	ldr	r2, [pc, #328]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000b62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b68:	4b50      	ldr	r3, [pc, #320]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b70:	623b      	str	r3, [r7, #32]
 8000b72:	6a3b      	ldr	r3, [r7, #32]
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
 8000b78:	4b4c      	ldr	r3, [pc, #304]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	4a4b      	ldr	r2, [pc, #300]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000b7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b84:	4b49      	ldr	r3, [pc, #292]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	4b45      	ldr	r3, [pc, #276]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	4a44      	ldr	r2, [pc, #272]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000b9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba0:	4b42      	ldr	r3, [pc, #264]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	4a3d      	ldr	r2, [pc, #244]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	4b37      	ldr	r3, [pc, #220]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd0:	4a36      	ldr	r2, [pc, #216]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd8:	4b34      	ldr	r3, [pc, #208]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	4b30      	ldr	r3, [pc, #192]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bec:	4a2f      	ldr	r2, [pc, #188]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c08:	4a28      	ldr	r2, [pc, #160]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c10:	4b26      	ldr	r3, [pc, #152]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c1c:	2332      	movs	r3, #50	@ 0x32
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2c:	230b      	movs	r3, #11
 8000c2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	481e      	ldr	r0, [pc, #120]	@ (8000cb0 <HAL_ETH_MspInit+0x17c>)
 8000c38:	f000 ff4c 	bl	8001ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c3c:	2386      	movs	r3, #134	@ 0x86
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4c:	230b      	movs	r3, #11
 8000c4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4817      	ldr	r0, [pc, #92]	@ (8000cb4 <HAL_ETH_MspInit+0x180>)
 8000c58:	f000 ff3c 	bl	8001ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6e:	230b      	movs	r3, #11
 8000c70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	480f      	ldr	r0, [pc, #60]	@ (8000cb8 <HAL_ETH_MspInit+0x184>)
 8000c7a:	f000 ff2b 	bl	8001ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c7e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c90:	230b      	movs	r3, #11
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4808      	ldr	r0, [pc, #32]	@ (8000cbc <HAL_ETH_MspInit+0x188>)
 8000c9c:	f000 ff1a 	bl	8001ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ca0:	bf00      	nop
 8000ca2:	3738      	adds	r7, #56	@ 0x38
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40028000 	.word	0x40028000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020800 	.word	0x40020800
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	40020400 	.word	0x40020400
 8000cbc:	40021800 	.word	0x40021800

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a19      	ldr	r2, [pc, #100]	@ (8000d44 <HAL_UART_MspInit+0x84>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d12c      	bne.n	8000d3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	4a17      	ldr	r2, [pc, #92]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a10      	ldr	r2, [pc, #64]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <HAL_UART_MspInit+0x8c>)
 8000d38:	f000 fecc 	bl	8001ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	@ 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40004800 	.word	0x40004800
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020c00 	.word	0x40020c00

08000d50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d70:	d13f      	bne.n	8000df2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a20      	ldr	r2, [pc, #128]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d8e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000da0:	230a      	movs	r3, #10
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4815      	ldr	r0, [pc, #84]	@ (8000e00 <HAL_PCD_MspInit+0xb0>)
 8000dac:	f000 fe92 	bl	8001ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000db0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480e      	ldr	r0, [pc, #56]	@ (8000e00 <HAL_PCD_MspInit+0xb0>)
 8000dc6:	f000 fe85 	bl	8001ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dce:	4a0b      	ldr	r2, [pc, #44]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd4:	6353      	str	r3, [r2, #52]	@ 0x34
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	4a07      	ldr	r2, [pc, #28]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de6:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	@ 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08e      	sub	sp, #56	@ 0x38
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <HAL_InitTick+0xe4>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	4a32      	ldr	r2, [pc, #200]	@ (8000ee8 <HAL_InitTick+0xe4>)
 8000e1e:	f043 0320 	orr.w	r3, r3, #32
 8000e22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e24:	4b30      	ldr	r3, [pc, #192]	@ (8000ee8 <HAL_InitTick+0xe4>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	f003 0320 	and.w	r3, r3, #32
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e30:	f107 0210 	add.w	r2, r7, #16
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fdb6 	bl	80029ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e40:	6a3b      	ldr	r3, [r7, #32]
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d103      	bne.n	8000e52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e4a:	f001 fd87 	bl	800295c <HAL_RCC_GetPCLK1Freq>
 8000e4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e50:	e004      	b.n	8000e5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e52:	f001 fd83 	bl	800295c <HAL_RCC_GetPCLK1Freq>
 8000e56:	4603      	mov	r3, r0
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e5e:	4a23      	ldr	r2, [pc, #140]	@ (8000eec <HAL_InitTick+0xe8>)
 8000e60:	fba2 2303 	umull	r2, r3, r2, r3
 8000e64:	0c9b      	lsrs	r3, r3, #18
 8000e66:	3b01      	subs	r3, #1
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e6c:	4a21      	ldr	r2, [pc, #132]	@ (8000ef4 <HAL_InitTick+0xf0>)
 8000e6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e72:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e76:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000e78:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e7c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000e90:	4817      	ldr	r0, [pc, #92]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e92:	f001 fdbd 	bl	8002a10 <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d11b      	bne.n	8000edc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000ea4:	4812      	ldr	r0, [pc, #72]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000ea6:	f001 fe0d 	bl	8002ac4 <HAL_TIM_Base_Start_IT>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000eb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d111      	bne.n	8000edc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000eb8:	2037      	movs	r0, #55	@ 0x37
 8000eba:	f000 faad 	bl	8001418 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d808      	bhi.n	8000ed6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	2037      	movs	r0, #55	@ 0x37
 8000eca:	f000 fa89 	bl	80013e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <HAL_InitTick+0xf4>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	e002      	b.n	8000edc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000edc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3738      	adds	r7, #56	@ 0x38
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	431bde83 	.word	0x431bde83
 8000ef0:	200007ec 	.word	0x200007ec
 8000ef4:	40001400 	.word	0x40001400
 8000ef8:	20000004 	.word	0x20000004

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <NMI_Handler+0x4>

08000f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <MemManage_Handler+0x4>

08000f14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f38:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <TIM7_IRQHandler+0x10>)
 8000f3a:	f001 fe33 	bl	8002ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200007ec 	.word	0x200007ec

08000f48 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000f50:	1d39      	adds	r1, r7, #4
 8000f52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f56:	2201      	movs	r2, #1
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <__io_putchar+0x20>)
 8000f5a:	f002 f84b 	bl	8002ff4 <HAL_UART_Transmit>

	return ch;
 8000f5e:	687b      	ldr	r3, [r7, #4]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200002b0 	.word	0x200002b0

08000f6c <vPrintString>:

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 8000f74:	f004 fcd0 	bl	8005918 <vPortEnterCritical>
	{
		printf( "%s", pcString );
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <vPrintString+0x2c>)
 8000f7c:	f005 f95a 	bl	8006234 <iprintf>
		fflush( stdout );
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <vPrintString+0x30>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f005 f87e 	bl	8006088 <fflush>
	}
	taskEXIT_CRITICAL();
 8000f8c:	f004 fcf6 	bl	800597c <vPortExitCritical>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	080070ac 	.word	0x080070ac
 8000f9c:	2000001c 	.word	0x2000001c

08000fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
	return 1;
 8000fa4:	2301      	movs	r3, #1
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <_kill>:

int _kill(int pid, int sig)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fba:	f005 fa35 	bl	8006428 <__errno>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2216      	movs	r2, #22
 8000fc2:	601a      	str	r2, [r3, #0]
	return -1;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_exit>:

void _exit (int status)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ffe7 	bl	8000fb0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fe2:	bf00      	nop
 8000fe4:	e7fd      	b.n	8000fe2 <_exit+0x12>

08000fe6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	60f8      	str	r0, [r7, #12]
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	e00a      	b.n	800100e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ff8:	f3af 8000 	nop.w
 8000ffc:	4601      	mov	r1, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	60ba      	str	r2, [r7, #8]
 8001004:	b2ca      	uxtb	r2, r1
 8001006:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	dbf0      	blt.n	8000ff8 <_read+0x12>
	}

return len;
 8001016:	687b      	ldr	r3, [r7, #4]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	e009      	b.n	8001046 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	60ba      	str	r2, [r7, #8]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff84 	bl	8000f48 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3301      	adds	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	429a      	cmp	r2, r3
 800104c:	dbf1      	blt.n	8001032 <_write+0x12>
	}
	return len;
 800104e:	687b      	ldr	r3, [r7, #4]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_close>:

int _close(int file)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	return -1;
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001080:	605a      	str	r2, [r3, #4]
	return 0;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_isatty>:

int _isatty(int file)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	return 1;
 8001098:	2301      	movs	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
	return 0;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c8:	4a14      	ldr	r2, [pc, #80]	@ (800111c <_sbrk+0x5c>)
 80010ca:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <_sbrk+0x60>)
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d4:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <_sbrk+0x64>)
 80010de:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <_sbrk+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d207      	bcs.n	8001100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f0:	f005 f99a 	bl	8006428 <__errno>
 80010f4:	4603      	mov	r3, r0
 80010f6:	220c      	movs	r2, #12
 80010f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	e009      	b.n	8001114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001106:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <_sbrk+0x64>)
 8001110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20030000 	.word	0x20030000
 8001120:	00000400 	.word	0x00000400
 8001124:	20000834 	.word	0x20000834
 8001128:	200046e0 	.word	0x200046e0

0800112c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	@ (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001188 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001154:	480d      	ldr	r0, [pc, #52]	@ (800118c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001156:	490e      	ldr	r1, [pc, #56]	@ (8001190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001158:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0b      	ldr	r2, [pc, #44]	@ (8001198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800116c:	4c0b      	ldr	r4, [pc, #44]	@ (800119c <LoopFillZerobss+0x26>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800117a:	f7ff ffd7 	bl	800112c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117e:	f005 f959 	bl	8006434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001182:	f7ff f9fd 	bl	8000580 <main>
  bx  lr    
 8001186:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001188:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001194:	080071e4 	.word	0x080071e4
  ldr r2, =_sbss
 8001198:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800119c:	200046dc 	.word	0x200046dc

080011a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a8:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	@ (80011e4 <HAL_Init+0x40>)
 80011ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <HAL_Init+0x40>)
 80011ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a07      	ldr	r2, [pc, #28]	@ (80011e4 <HAL_Init+0x40>)
 80011c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f8fc 	bl	80013ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d2:	200f      	movs	r0, #15
 80011d4:	f7ff fe16 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d8:	f7ff fc80 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023c00 	.word	0x40023c00

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_IncTick+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_IncTick+0x24>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a04      	ldr	r2, [pc, #16]	@ (800120c <HAL_IncTick+0x24>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000008 	.word	0x20000008
 800120c:	20000838 	.word	0x20000838

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b03      	ldr	r3, [pc, #12]	@ (8001224 <HAL_GetTick+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000838 	.word	0x20000838

08001228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff ffee 	bl	8001210 <HAL_GetTick>
 8001234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001240:	d005      	beq.n	800124e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001242:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <HAL_Delay+0x44>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800124e:	bf00      	nop
 8001250:	f7ff ffde 	bl	8001210 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	429a      	cmp	r2, r3
 800125e:	d8f7      	bhi.n	8001250 <HAL_Delay+0x28>
  {
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000008 	.word	0x20000008

08001270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800129c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	@ (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	db0b      	blt.n	80012fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 021f 	and.w	r2, r3, #31
 80012ec:	4907      	ldr	r1, [pc, #28]	@ (800130c <__NVIC_EnableIRQ+0x38>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	2001      	movs	r0, #1
 80012f6:	fa00 f202 	lsl.w	r2, r0, r2
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	@ (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	@ (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	@ 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	@ 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff4c 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f2:	f7ff ff61 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 80013f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	6978      	ldr	r0, [r7, #20]
 80013fe:	f7ff ffb1 	bl	8001364 <NVIC_EncodePriority>
 8001402:	4602      	mov	r2, r0
 8001404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff80 	bl	8001310 <__NVIC_SetPriority>
}
 8001410:	bf00      	nop
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff54 	bl	80012d4 <__NVIC_EnableIRQ>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e08a      	b.n	800155c <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800144c:	2b00      	cmp	r3, #0
 800144e:	d106      	bne.n	800145e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2223      	movs	r2, #35	@ 0x23
 8001454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fb6b 	bl	8000b34 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b40      	ldr	r3, [pc, #256]	@ (8001564 <HAL_ETH_Init+0x130>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	4a3f      	ldr	r2, [pc, #252]	@ (8001564 <HAL_ETH_Init+0x130>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800146c:	6453      	str	r3, [r2, #68]	@ 0x44
 800146e:	4b3d      	ldr	r3, [pc, #244]	@ (8001564 <HAL_ETH_Init+0x130>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800147a:	4b3b      	ldr	r3, [pc, #236]	@ (8001568 <HAL_ETH_Init+0x134>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4a3a      	ldr	r2, [pc, #232]	@ (8001568 <HAL_ETH_Init+0x134>)
 8001480:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001484:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001486:	4b38      	ldr	r3, [pc, #224]	@ (8001568 <HAL_ETH_Init+0x134>)
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	4936      	ldr	r1, [pc, #216]	@ (8001568 <HAL_ETH_Init+0x134>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001494:	4b34      	ldr	r3, [pc, #208]	@ (8001568 <HAL_ETH_Init+0x134>)
 8001496:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b0:	f7ff feae 	bl	8001210 <HAL_GetTick>
 80014b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014b6:	e011      	b.n	80014dc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014b8:	f7ff feaa 	bl	8001210 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014c6:	d909      	bls.n	80014dc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2204      	movs	r2, #4
 80014cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	22e0      	movs	r2, #224	@ 0xe0
 80014d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e03f      	b.n	800155c <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1e4      	bne.n	80014b8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f97a 	bl	80017e8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fa25 	bl	8001944 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fa7b 	bl	80019f6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	461a      	mov	r2, r3
 8001506:	2100      	movs	r1, #0
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 f9e3 	bl	80018d4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800151c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800152e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001532:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001546:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2210      	movs	r2, #16
 8001556:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40013800 	.word	0x40013800

0800156c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	4b53      	ldr	r3, [pc, #332]	@ (80016d0 <ETH_SetMACConfig+0x164>)
 8001582:	4013      	ands	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	7b9b      	ldrb	r3, [r3, #14]
 800158a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	7c12      	ldrb	r2, [r2, #16]
 8001590:	2a00      	cmp	r2, #0
 8001592:	d102      	bne.n	800159a <ETH_SetMACConfig+0x2e>
 8001594:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001598:	e000      	b.n	800159c <ETH_SetMACConfig+0x30>
 800159a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800159c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	7c52      	ldrb	r2, [r2, #17]
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	d102      	bne.n	80015ac <ETH_SetMACConfig+0x40>
 80015a6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015aa:	e000      	b.n	80015ae <ETH_SetMACConfig+0x42>
 80015ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015ae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	7fdb      	ldrb	r3, [r3, #31]
 80015ba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80015bc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	7f92      	ldrb	r2, [r2, #30]
 80015c8:	2a00      	cmp	r2, #0
 80015ca:	d102      	bne.n	80015d2 <ETH_SetMACConfig+0x66>
 80015cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015d0:	e000      	b.n	80015d4 <ETH_SetMACConfig+0x68>
 80015d2:	2200      	movs	r2, #0
                        macconf->Speed |
 80015d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	7f1b      	ldrb	r3, [r3, #28]
 80015da:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015dc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	791b      	ldrb	r3, [r3, #4]
 80015e8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80015ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015f2:	2a00      	cmp	r2, #0
 80015f4:	d102      	bne.n	80015fc <ETH_SetMACConfig+0x90>
 80015f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015fa:	e000      	b.n	80015fe <ETH_SetMACConfig+0x92>
 80015fc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	7bdb      	ldrb	r3, [r3, #15]
 8001604:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001606:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800160c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001614:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001616:	4313      	orrs	r3, r2
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800162e:	2001      	movs	r0, #1
 8001630:	f7ff fdfa 	bl	8001228 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800164a:	4013      	ands	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001652:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800165a:	2a00      	cmp	r2, #0
 800165c:	d101      	bne.n	8001662 <ETH_SetMACConfig+0xf6>
 800165e:	2280      	movs	r2, #128	@ 0x80
 8001660:	e000      	b.n	8001664 <ETH_SetMACConfig+0xf8>
 8001662:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001664:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800166a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001672:	2a01      	cmp	r2, #1
 8001674:	d101      	bne.n	800167a <ETH_SetMACConfig+0x10e>
 8001676:	2208      	movs	r2, #8
 8001678:	e000      	b.n	800167c <ETH_SetMACConfig+0x110>
 800167a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800167c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001684:	2a01      	cmp	r2, #1
 8001686:	d101      	bne.n	800168c <ETH_SetMACConfig+0x120>
 8001688:	2204      	movs	r2, #4
 800168a:	e000      	b.n	800168e <ETH_SetMACConfig+0x122>
 800168c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800168e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001696:	2a01      	cmp	r2, #1
 8001698:	d101      	bne.n	800169e <ETH_SetMACConfig+0x132>
 800169a:	2202      	movs	r2, #2
 800169c:	e000      	b.n	80016a0 <ETH_SetMACConfig+0x134>
 800169e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016a0:	4313      	orrs	r3, r2
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f7ff fdb5 	bl	8001228 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	619a      	str	r2, [r3, #24]
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	fd20810f 	.word	0xfd20810f

080016d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	4b3d      	ldr	r3, [pc, #244]	@ (80017e4 <ETH_SetDMAConfig+0x110>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	7b1b      	ldrb	r3, [r3, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <ETH_SetDMAConfig+0x2c>
 80016fa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016fe:	e000      	b.n	8001702 <ETH_SetDMAConfig+0x2e>
 8001700:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	7b5b      	ldrb	r3, [r3, #13]
 8001706:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001708:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	7f52      	ldrb	r2, [r2, #29]
 800170e:	2a00      	cmp	r2, #0
 8001710:	d102      	bne.n	8001718 <ETH_SetDMAConfig+0x44>
 8001712:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001716:	e000      	b.n	800171a <ETH_SetDMAConfig+0x46>
 8001718:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800171a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	7b9b      	ldrb	r3, [r3, #14]
 8001720:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001722:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001728:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	7f1b      	ldrb	r3, [r3, #28]
 800172e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001730:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	7f9b      	ldrb	r3, [r3, #30]
 8001736:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001738:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800173e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001746:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001748:	4313      	orrs	r3, r2
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001758:	461a      	mov	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff fd5c 	bl	8001228 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001778:	461a      	mov	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	791b      	ldrb	r3, [r3, #4]
 8001782:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001788:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800178e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001794:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800179c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800179e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017a6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017ac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017ba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017c8:	2001      	movs	r0, #1
 80017ca:	f7ff fd2d 	bl	8001228 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	f8de3f23 	.word	0xf8de3f23

080017e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0a6      	sub	sp, #152	@ 0x98
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80017f6:	2301      	movs	r3, #1
 80017f8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80017fc:	2300      	movs	r3, #0
 80017fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001806:	2301      	movs	r3, #1
 8001808:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001812:	2301      	movs	r3, #1
 8001814:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001818:	2301      	movs	r3, #1
 800181a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800182a:	2300      	movs	r3, #0
 800182c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001834:	2300      	movs	r3, #0
 8001836:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001850:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001854:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001856:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800185a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001862:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001866:	4619      	mov	r1, r3
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fe7f 	bl	800156c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800186e:	2301      	movs	r3, #1
 8001870:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001872:	2301      	movs	r3, #1
 8001874:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001876:	2301      	movs	r3, #1
 8001878:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800187c:	2301      	movs	r3, #1
 800187e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001890:	2300      	movs	r3, #0
 8001892:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001894:	2301      	movs	r3, #1
 8001896:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800189a:	2301      	movs	r3, #1
 800189c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800189e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018a2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80018a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018a8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ae:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80018b0:	2301      	movs	r3, #1
 80018b2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	4619      	mov	r1, r3
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff05 	bl	80016d4 <ETH_SetDMAConfig>
}
 80018ca:	bf00      	nop
 80018cc:	3798      	adds	r7, #152	@ 0x98
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3305      	adds	r3, #5
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	3204      	adds	r2, #4
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <ETH_MACAddressConfig+0x68>)
 80018f6:	4413      	add	r3, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3303      	adds	r3, #3
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	061a      	lsls	r2, r3, #24
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3302      	adds	r3, #2
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	041b      	lsls	r3, r3, #16
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3301      	adds	r3, #1
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	4313      	orrs	r3, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	7812      	ldrb	r2, [r2, #0]
 800191e:	4313      	orrs	r3, r2
 8001920:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <ETH_MACAddressConfig+0x6c>)
 8001926:	4413      	add	r3, r2
 8001928:	461a      	mov	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	6013      	str	r3, [r2, #0]
}
 800192e:	bf00      	nop
 8001930:	371c      	adds	r7, #28
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40028040 	.word	0x40028040
 8001940:	40028044 	.word	0x40028044

08001944 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	e03e      	b.n	80019d0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68d9      	ldr	r1, [r3, #12]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	440b      	add	r3, r1
 8001962:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2200      	movs	r2, #0
 800196e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	3206      	adds	r2, #6
 8001984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d80c      	bhi.n	80019b4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68d9      	ldr	r1, [r3, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1c5a      	adds	r2, r3, #1
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	461a      	mov	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	e004      	b.n	80019be <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	461a      	mov	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3301      	adds	r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d9bd      	bls.n	8001952 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019e8:	611a      	str	r2, [r3, #16]
}
 80019ea:	bf00      	nop
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	e048      	b.n	8001a96 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6919      	ldr	r1, [r3, #16]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	440b      	add	r3, r1
 8001a14:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a40:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	3212      	adds	r2, #18
 8001a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d80c      	bhi.n	8001a86 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6919      	ldr	r1, [r3, #16]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	440b      	add	r3, r1
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	e004      	b.n	8001a90 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3301      	adds	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d9b3      	bls.n	8001a04 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691a      	ldr	r2, [r3, #16]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ac6:	60da      	str	r2, [r3, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	@ 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e177      	b.n	8001de0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 8166 	bne.w	8001dda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d005      	beq.n	8001b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d130      	bne.n	8001b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 0201 	and.w	r2, r3, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d017      	beq.n	8001bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d123      	bne.n	8001c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80c0 	beq.w	8001dda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b66      	ldr	r3, [pc, #408]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	4a65      	ldr	r2, [pc, #404]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6a:	4b63      	ldr	r3, [pc, #396]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c76:	4a61      	ldr	r2, [pc, #388]	@ (8001dfc <HAL_GPIO_Init+0x328>)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a58      	ldr	r2, [pc, #352]	@ (8001e00 <HAL_GPIO_Init+0x32c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d037      	beq.n	8001d12 <HAL_GPIO_Init+0x23e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a57      	ldr	r2, [pc, #348]	@ (8001e04 <HAL_GPIO_Init+0x330>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d031      	beq.n	8001d0e <HAL_GPIO_Init+0x23a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a56      	ldr	r2, [pc, #344]	@ (8001e08 <HAL_GPIO_Init+0x334>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d02b      	beq.n	8001d0a <HAL_GPIO_Init+0x236>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a55      	ldr	r2, [pc, #340]	@ (8001e0c <HAL_GPIO_Init+0x338>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d025      	beq.n	8001d06 <HAL_GPIO_Init+0x232>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a54      	ldr	r2, [pc, #336]	@ (8001e10 <HAL_GPIO_Init+0x33c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d01f      	beq.n	8001d02 <HAL_GPIO_Init+0x22e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a53      	ldr	r2, [pc, #332]	@ (8001e14 <HAL_GPIO_Init+0x340>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d019      	beq.n	8001cfe <HAL_GPIO_Init+0x22a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a52      	ldr	r2, [pc, #328]	@ (8001e18 <HAL_GPIO_Init+0x344>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <HAL_GPIO_Init+0x226>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a51      	ldr	r2, [pc, #324]	@ (8001e1c <HAL_GPIO_Init+0x348>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_GPIO_Init+0x222>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a50      	ldr	r2, [pc, #320]	@ (8001e20 <HAL_GPIO_Init+0x34c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d007      	beq.n	8001cf2 <HAL_GPIO_Init+0x21e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4f      	ldr	r2, [pc, #316]	@ (8001e24 <HAL_GPIO_Init+0x350>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_GPIO_Init+0x21a>
 8001cea:	2309      	movs	r3, #9
 8001cec:	e012      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001cee:	230a      	movs	r3, #10
 8001cf0:	e010      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001cf2:	2308      	movs	r3, #8
 8001cf4:	e00e      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001cf6:	2307      	movs	r3, #7
 8001cf8:	e00c      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	e00a      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001cfe:	2305      	movs	r3, #5
 8001d00:	e008      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001d02:	2304      	movs	r3, #4
 8001d04:	e006      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001d06:	2303      	movs	r3, #3
 8001d08:	e004      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e002      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001d12:	2300      	movs	r3, #0
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	f002 0203 	and.w	r2, r2, #3
 8001d1a:	0092      	lsls	r2, r2, #2
 8001d1c:	4093      	lsls	r3, r2
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d24:	4935      	ldr	r1, [pc, #212]	@ (8001dfc <HAL_GPIO_Init+0x328>)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d32:	4b3d      	ldr	r3, [pc, #244]	@ (8001e28 <HAL_GPIO_Init+0x354>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d56:	4a34      	ldr	r2, [pc, #208]	@ (8001e28 <HAL_GPIO_Init+0x354>)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d5c:	4b32      	ldr	r3, [pc, #200]	@ (8001e28 <HAL_GPIO_Init+0x354>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d80:	4a29      	ldr	r2, [pc, #164]	@ (8001e28 <HAL_GPIO_Init+0x354>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d86:	4b28      	ldr	r3, [pc, #160]	@ (8001e28 <HAL_GPIO_Init+0x354>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001daa:	4a1f      	ldr	r2, [pc, #124]	@ (8001e28 <HAL_GPIO_Init+0x354>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e28 <HAL_GPIO_Init+0x354>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd4:	4a14      	ldr	r2, [pc, #80]	@ (8001e28 <HAL_GPIO_Init+0x354>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2b0f      	cmp	r3, #15
 8001de4:	f67f ae84 	bls.w	8001af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	3724      	adds	r7, #36	@ 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40013800 	.word	0x40013800
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40020400 	.word	0x40020400
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020c00 	.word	0x40020c00
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40021400 	.word	0x40021400
 8001e18:	40021800 	.word	0x40021800
 8001e1c:	40021c00 	.word	0x40021c00
 8001e20:	40022000 	.word	0x40022000
 8001e24:	40022400 	.word	0x40022400
 8001e28:	40013c00 	.word	0x40013c00

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e48:	e003      	b.n	8001e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	041a      	lsls	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	619a      	str	r2, [r3, #24]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af02      	add	r7, sp, #8
 8001e64:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e101      	b.n	8002074 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7fe ff60 	bl	8000d50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2203      	movs	r2, #3
 8001e94:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e9e:	d102      	bne.n	8001ea6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f001 fcc2 	bl	8003834 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7c1a      	ldrb	r2, [r3, #16]
 8001eb8:	f88d 2000 	strb.w	r2, [sp]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec0:	f001 fc54 	bl	800376c <USB_CoreInit>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0ce      	b.n	8002074 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f001 fcba 	bl	8003856 <USB_SetCurrentMode>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0bf      	b.n	8002074 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	e04a      	b.n	8001f90 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	3315      	adds	r3, #21
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3314      	adds	r3, #20
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	b298      	uxth	r0, r3
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	332e      	adds	r3, #46	@ 0x2e
 8001f36:	4602      	mov	r2, r0
 8001f38:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	3318      	adds	r3, #24
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f4e:	7bfa      	ldrb	r2, [r7, #15]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	331c      	adds	r3, #28
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	3320      	adds	r3, #32
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	3324      	adds	r3, #36	@ 0x24
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	791b      	ldrb	r3, [r3, #4]
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d3af      	bcc.n	8001efa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]
 8001f9e:	e044      	b.n	800202a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fcc:	7bfa      	ldrb	r2, [r7, #15]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	3301      	adds	r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	791b      	ldrb	r3, [r3, #4]
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	429a      	cmp	r2, r3
 8002032:	d3b5      	bcc.n	8001fa0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	7c1a      	ldrb	r2, [r3, #16]
 800203c:	f88d 2000 	strb.w	r2, [sp]
 8002040:	3304      	adds	r3, #4
 8002042:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002044:	f001 fc54 	bl	80038f0 <USB_DevInit>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2202      	movs	r2, #2
 8002052:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e00c      	b.n	8002074 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f001 fe1c 	bl	8003caa <USB_DevDisconnect>

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e267      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d075      	beq.n	8002186 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800209a:	4b88      	ldr	r3, [pc, #544]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d00c      	beq.n	80020c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a6:	4b85      	ldr	r3, [pc, #532]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d112      	bne.n	80020d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b2:	4b82      	ldr	r3, [pc, #520]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020be:	d10b      	bne.n	80020d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	4b7e      	ldr	r3, [pc, #504]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d05b      	beq.n	8002184 <HAL_RCC_OscConfig+0x108>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d157      	bne.n	8002184 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e242      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020e0:	d106      	bne.n	80020f0 <HAL_RCC_OscConfig+0x74>
 80020e2:	4b76      	ldr	r3, [pc, #472]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a75      	ldr	r2, [pc, #468]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 80020e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	e01d      	b.n	800212c <HAL_RCC_OscConfig+0xb0>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x98>
 80020fa:	4b70      	ldr	r3, [pc, #448]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a6f      	ldr	r2, [pc, #444]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 8002100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b6d      	ldr	r3, [pc, #436]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a6c      	ldr	r2, [pc, #432]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 800210c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e00b      	b.n	800212c <HAL_RCC_OscConfig+0xb0>
 8002114:	4b69      	ldr	r3, [pc, #420]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a68      	ldr	r2, [pc, #416]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 800211a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b66      	ldr	r3, [pc, #408]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a65      	ldr	r2, [pc, #404]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 8002126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800212a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d013      	beq.n	800215c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff f86c 	bl	8001210 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213c:	f7ff f868 	bl	8001210 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	@ 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e207      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	4b5b      	ldr	r3, [pc, #364]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0xc0>
 800215a:	e014      	b.n	8002186 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7ff f858 	bl	8001210 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002164:	f7ff f854 	bl	8001210 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	@ 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e1f3      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002176:	4b51      	ldr	r3, [pc, #324]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0xe8>
 8002182:	e000      	b.n	8002186 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d063      	beq.n	800225a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002192:	4b4a      	ldr	r3, [pc, #296]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00b      	beq.n	80021b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219e:	4b47      	ldr	r3, [pc, #284]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d11c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021aa:	4b44      	ldr	r3, [pc, #272]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d116      	bne.n	80021e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	4b41      	ldr	r3, [pc, #260]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_RCC_OscConfig+0x152>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d001      	beq.n	80021ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e1c7      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ce:	4b3b      	ldr	r3, [pc, #236]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4937      	ldr	r1, [pc, #220]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e2:	e03a      	b.n	800225a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d020      	beq.n	800222e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ec:	4b34      	ldr	r3, [pc, #208]	@ (80022c0 <HAL_RCC_OscConfig+0x244>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f2:	f7ff f80d 	bl	8001210 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fa:	f7ff f809 	bl	8001210 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e1a8      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220c:	4b2b      	ldr	r3, [pc, #172]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002218:	4b28      	ldr	r3, [pc, #160]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4925      	ldr	r1, [pc, #148]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 8002228:	4313      	orrs	r3, r2
 800222a:	600b      	str	r3, [r1, #0]
 800222c:	e015      	b.n	800225a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800222e:	4b24      	ldr	r3, [pc, #144]	@ (80022c0 <HAL_RCC_OscConfig+0x244>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe ffec 	bl	8001210 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223c:	f7fe ffe8 	bl	8001210 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e187      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224e:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d036      	beq.n	80022d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d016      	beq.n	800229c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800226e:	4b15      	ldr	r3, [pc, #84]	@ (80022c4 <HAL_RCC_OscConfig+0x248>)
 8002270:	2201      	movs	r2, #1
 8002272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002274:	f7fe ffcc 	bl	8001210 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227c:	f7fe ffc8 	bl	8001210 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e167      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228e:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <HAL_RCC_OscConfig+0x240>)
 8002290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x200>
 800229a:	e01b      	b.n	80022d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800229c:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <HAL_RCC_OscConfig+0x248>)
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a2:	f7fe ffb5 	bl	8001210 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a8:	e00e      	b.n	80022c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022aa:	f7fe ffb1 	bl	8001210 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d907      	bls.n	80022c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e150      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
 80022bc:	40023800 	.word	0x40023800
 80022c0:	42470000 	.word	0x42470000
 80022c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c8:	4b88      	ldr	r3, [pc, #544]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 80022ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1ea      	bne.n	80022aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 8097 	beq.w	8002410 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e6:	4b81      	ldr	r3, [pc, #516]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10f      	bne.n	8002312 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	4b7d      	ldr	r3, [pc, #500]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	4a7c      	ldr	r2, [pc, #496]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002300:	6413      	str	r3, [r2, #64]	@ 0x40
 8002302:	4b7a      	ldr	r3, [pc, #488]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800230e:	2301      	movs	r3, #1
 8002310:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002312:	4b77      	ldr	r3, [pc, #476]	@ (80024f0 <HAL_RCC_OscConfig+0x474>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d118      	bne.n	8002350 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800231e:	4b74      	ldr	r3, [pc, #464]	@ (80024f0 <HAL_RCC_OscConfig+0x474>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a73      	ldr	r2, [pc, #460]	@ (80024f0 <HAL_RCC_OscConfig+0x474>)
 8002324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232a:	f7fe ff71 	bl	8001210 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002332:	f7fe ff6d 	bl	8001210 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e10c      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002344:	4b6a      	ldr	r3, [pc, #424]	@ (80024f0 <HAL_RCC_OscConfig+0x474>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d106      	bne.n	8002366 <HAL_RCC_OscConfig+0x2ea>
 8002358:	4b64      	ldr	r3, [pc, #400]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 800235a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235c:	4a63      	ldr	r2, [pc, #396]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6713      	str	r3, [r2, #112]	@ 0x70
 8002364:	e01c      	b.n	80023a0 <HAL_RCC_OscConfig+0x324>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b05      	cmp	r3, #5
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0x30c>
 800236e:	4b5f      	ldr	r3, [pc, #380]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 8002370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002372:	4a5e      	ldr	r2, [pc, #376]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 8002374:	f043 0304 	orr.w	r3, r3, #4
 8002378:	6713      	str	r3, [r2, #112]	@ 0x70
 800237a:	4b5c      	ldr	r3, [pc, #368]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 800237c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800237e:	4a5b      	ldr	r2, [pc, #364]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6713      	str	r3, [r2, #112]	@ 0x70
 8002386:	e00b      	b.n	80023a0 <HAL_RCC_OscConfig+0x324>
 8002388:	4b58      	ldr	r3, [pc, #352]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238c:	4a57      	ldr	r2, [pc, #348]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 800238e:	f023 0301 	bic.w	r3, r3, #1
 8002392:	6713      	str	r3, [r2, #112]	@ 0x70
 8002394:	4b55      	ldr	r3, [pc, #340]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002398:	4a54      	ldr	r2, [pc, #336]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 800239a:	f023 0304 	bic.w	r3, r3, #4
 800239e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d015      	beq.n	80023d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a8:	f7fe ff32 	bl	8001210 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b0:	f7fe ff2e 	bl	8001210 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e0cb      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c6:	4b49      	ldr	r3, [pc, #292]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 80023c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0ee      	beq.n	80023b0 <HAL_RCC_OscConfig+0x334>
 80023d2:	e014      	b.n	80023fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7fe ff1c 	bl	8001210 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023da:	e00a      	b.n	80023f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023dc:	f7fe ff18 	bl	8001210 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e0b5      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f2:	4b3e      	ldr	r3, [pc, #248]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ee      	bne.n	80023dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d105      	bne.n	8002410 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002404:	4b39      	ldr	r3, [pc, #228]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 8002406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002408:	4a38      	ldr	r2, [pc, #224]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 800240a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800240e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80a1 	beq.w	800255c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800241a:	4b34      	ldr	r3, [pc, #208]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b08      	cmp	r3, #8
 8002424:	d05c      	beq.n	80024e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d141      	bne.n	80024b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242e:	4b31      	ldr	r3, [pc, #196]	@ (80024f4 <HAL_RCC_OscConfig+0x478>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7fe feec 	bl	8001210 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243c:	f7fe fee8 	bl	8001210 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e087      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244e:	4b27      	ldr	r3, [pc, #156]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69da      	ldr	r2, [r3, #28]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	019b      	lsls	r3, r3, #6
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002470:	085b      	lsrs	r3, r3, #1
 8002472:	3b01      	subs	r3, #1
 8002474:	041b      	lsls	r3, r3, #16
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247c:	061b      	lsls	r3, r3, #24
 800247e:	491b      	ldr	r1, [pc, #108]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002484:	4b1b      	ldr	r3, [pc, #108]	@ (80024f4 <HAL_RCC_OscConfig+0x478>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248a:	f7fe fec1 	bl	8001210 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002492:	f7fe febd 	bl	8001210 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e05c      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a4:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x416>
 80024b0:	e054      	b.n	800255c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <HAL_RCC_OscConfig+0x478>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe feaa 	bl	8001210 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c0:	f7fe fea6 	bl	8001210 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e045      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d2:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_RCC_OscConfig+0x470>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x444>
 80024de:	e03d      	b.n	800255c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e038      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40007000 	.word	0x40007000
 80024f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <HAL_RCC_OscConfig+0x4ec>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d028      	beq.n	8002558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002510:	429a      	cmp	r2, r3
 8002512:	d121      	bne.n	8002558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d11a      	bne.n	8002558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002528:	4013      	ands	r3, r2
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800252e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002530:	4293      	cmp	r3, r2
 8002532:	d111      	bne.n	8002558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253e:	085b      	lsrs	r3, r3, #1
 8002540:	3b01      	subs	r3, #1
 8002542:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d107      	bne.n	8002558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002552:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d001      	beq.n	800255c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800

0800256c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0cc      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002580:	4b68      	ldr	r3, [pc, #416]	@ (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d90c      	bls.n	80025a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b65      	ldr	r3, [pc, #404]	@ (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002596:	4b63      	ldr	r3, [pc, #396]	@ (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0b8      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d020      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c0:	4b59      	ldr	r3, [pc, #356]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	4a58      	ldr	r2, [pc, #352]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d8:	4b53      	ldr	r3, [pc, #332]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	4a52      	ldr	r2, [pc, #328]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e4:	4b50      	ldr	r3, [pc, #320]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	494d      	ldr	r1, [pc, #308]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d044      	beq.n	800268c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	4b47      	ldr	r3, [pc, #284]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d119      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e07f      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d003      	beq.n	800262a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002626:	2b03      	cmp	r3, #3
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262a:	4b3f      	ldr	r3, [pc, #252]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e06f      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	4b3b      	ldr	r3, [pc, #236]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e067      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800264a:	4b37      	ldr	r3, [pc, #220]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f023 0203 	bic.w	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4934      	ldr	r1, [pc, #208]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	4313      	orrs	r3, r2
 800265a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800265c:	f7fe fdd8 	bl	8001210 <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	e00a      	b.n	800267a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002664:	f7fe fdd4 	bl	8001210 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e04f      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	4b2b      	ldr	r3, [pc, #172]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 020c 	and.w	r2, r3, #12
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	429a      	cmp	r2, r3
 800268a:	d1eb      	bne.n	8002664 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800268c:	4b25      	ldr	r3, [pc, #148]	@ (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d20c      	bcs.n	80026b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b22      	ldr	r3, [pc, #136]	@ (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b20      	ldr	r3, [pc, #128]	@ (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e032      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c0:	4b19      	ldr	r3, [pc, #100]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4916      	ldr	r1, [pc, #88]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026de:	4b12      	ldr	r3, [pc, #72]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	490e      	ldr	r1, [pc, #56]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026f2:	f000 f821 	bl	8002738 <HAL_RCC_GetSysClockFreq>
 80026f6:	4602      	mov	r2, r0
 80026f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	490a      	ldr	r1, [pc, #40]	@ (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	5ccb      	ldrb	r3, [r1, r3]
 8002706:	fa22 f303 	lsr.w	r3, r2, r3
 800270a:	4a09      	ldr	r2, [pc, #36]	@ (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800270e:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <HAL_RCC_ClockConfig+0x1c8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fb76 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40023c00 	.word	0x40023c00
 8002728:	40023800 	.word	0x40023800
 800272c:	080070dc 	.word	0x080070dc
 8002730:	20000000 	.word	0x20000000
 8002734:	20000004 	.word	0x20000004

08002738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800273c:	b094      	sub	sp, #80	@ 0x50
 800273e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002750:	4b79      	ldr	r3, [pc, #484]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x200>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 030c 	and.w	r3, r3, #12
 8002758:	2b08      	cmp	r3, #8
 800275a:	d00d      	beq.n	8002778 <HAL_RCC_GetSysClockFreq+0x40>
 800275c:	2b08      	cmp	r3, #8
 800275e:	f200 80e1 	bhi.w	8002924 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x34>
 8002766:	2b04      	cmp	r3, #4
 8002768:	d003      	beq.n	8002772 <HAL_RCC_GetSysClockFreq+0x3a>
 800276a:	e0db      	b.n	8002924 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800276c:	4b73      	ldr	r3, [pc, #460]	@ (800293c <HAL_RCC_GetSysClockFreq+0x204>)
 800276e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002770:	e0db      	b.n	800292a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002772:	4b73      	ldr	r3, [pc, #460]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x208>)
 8002774:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002776:	e0d8      	b.n	800292a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002778:	4b6f      	ldr	r3, [pc, #444]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x200>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002780:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002782:	4b6d      	ldr	r3, [pc, #436]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x200>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d063      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800278e:	4b6a      	ldr	r3, [pc, #424]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x200>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	099b      	lsrs	r3, r3, #6
 8002794:	2200      	movs	r2, #0
 8002796:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002798:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800279a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800279c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80027a2:	2300      	movs	r3, #0
 80027a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80027a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80027aa:	4622      	mov	r2, r4
 80027ac:	462b      	mov	r3, r5
 80027ae:	f04f 0000 	mov.w	r0, #0
 80027b2:	f04f 0100 	mov.w	r1, #0
 80027b6:	0159      	lsls	r1, r3, #5
 80027b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027bc:	0150      	lsls	r0, r2, #5
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4621      	mov	r1, r4
 80027c4:	1a51      	subs	r1, r2, r1
 80027c6:	6139      	str	r1, [r7, #16]
 80027c8:	4629      	mov	r1, r5
 80027ca:	eb63 0301 	sbc.w	r3, r3, r1
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027dc:	4659      	mov	r1, fp
 80027de:	018b      	lsls	r3, r1, #6
 80027e0:	4651      	mov	r1, sl
 80027e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027e6:	4651      	mov	r1, sl
 80027e8:	018a      	lsls	r2, r1, #6
 80027ea:	4651      	mov	r1, sl
 80027ec:	ebb2 0801 	subs.w	r8, r2, r1
 80027f0:	4659      	mov	r1, fp
 80027f2:	eb63 0901 	sbc.w	r9, r3, r1
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002802:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002806:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800280a:	4690      	mov	r8, r2
 800280c:	4699      	mov	r9, r3
 800280e:	4623      	mov	r3, r4
 8002810:	eb18 0303 	adds.w	r3, r8, r3
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	462b      	mov	r3, r5
 8002818:	eb49 0303 	adc.w	r3, r9, r3
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800282a:	4629      	mov	r1, r5
 800282c:	024b      	lsls	r3, r1, #9
 800282e:	4621      	mov	r1, r4
 8002830:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002834:	4621      	mov	r1, r4
 8002836:	024a      	lsls	r2, r1, #9
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
 800283c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800283e:	2200      	movs	r2, #0
 8002840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002842:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002844:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002848:	f7fd fd22 	bl	8000290 <__aeabi_uldivmod>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4613      	mov	r3, r2
 8002852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002854:	e058      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002856:	4b38      	ldr	r3, [pc, #224]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x200>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	099b      	lsrs	r3, r3, #6
 800285c:	2200      	movs	r2, #0
 800285e:	4618      	mov	r0, r3
 8002860:	4611      	mov	r1, r2
 8002862:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002866:	623b      	str	r3, [r7, #32]
 8002868:	2300      	movs	r3, #0
 800286a:	627b      	str	r3, [r7, #36]	@ 0x24
 800286c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002870:	4642      	mov	r2, r8
 8002872:	464b      	mov	r3, r9
 8002874:	f04f 0000 	mov.w	r0, #0
 8002878:	f04f 0100 	mov.w	r1, #0
 800287c:	0159      	lsls	r1, r3, #5
 800287e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002882:	0150      	lsls	r0, r2, #5
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4641      	mov	r1, r8
 800288a:	ebb2 0a01 	subs.w	sl, r2, r1
 800288e:	4649      	mov	r1, r9
 8002890:	eb63 0b01 	sbc.w	fp, r3, r1
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028a8:	ebb2 040a 	subs.w	r4, r2, sl
 80028ac:	eb63 050b 	sbc.w	r5, r3, fp
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	00eb      	lsls	r3, r5, #3
 80028ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028be:	00e2      	lsls	r2, r4, #3
 80028c0:	4614      	mov	r4, r2
 80028c2:	461d      	mov	r5, r3
 80028c4:	4643      	mov	r3, r8
 80028c6:	18e3      	adds	r3, r4, r3
 80028c8:	603b      	str	r3, [r7, #0]
 80028ca:	464b      	mov	r3, r9
 80028cc:	eb45 0303 	adc.w	r3, r5, r3
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028de:	4629      	mov	r1, r5
 80028e0:	028b      	lsls	r3, r1, #10
 80028e2:	4621      	mov	r1, r4
 80028e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028e8:	4621      	mov	r1, r4
 80028ea:	028a      	lsls	r2, r1, #10
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028f2:	2200      	movs	r2, #0
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	61fa      	str	r2, [r7, #28]
 80028f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028fc:	f7fd fcc8 	bl	8000290 <__aeabi_uldivmod>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4613      	mov	r3, r2
 8002906:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002908:	4b0b      	ldr	r3, [pc, #44]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x200>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	0c1b      	lsrs	r3, r3, #16
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	3301      	adds	r3, #1
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002918:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800291a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800291c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002920:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002922:	e002      	b.n	800292a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <HAL_RCC_GetSysClockFreq+0x204>)
 8002926:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800292a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800292c:	4618      	mov	r0, r3
 800292e:	3750      	adds	r7, #80	@ 0x50
 8002930:	46bd      	mov	sp, r7
 8002932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800
 800293c:	00f42400 	.word	0x00f42400
 8002940:	007a1200 	.word	0x007a1200

08002944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002948:	4b03      	ldr	r3, [pc, #12]	@ (8002958 <HAL_RCC_GetHCLKFreq+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000000 	.word	0x20000000

0800295c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002960:	f7ff fff0 	bl	8002944 <HAL_RCC_GetHCLKFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b05      	ldr	r3, [pc, #20]	@ (800297c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	0a9b      	lsrs	r3, r3, #10
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	4903      	ldr	r1, [pc, #12]	@ (8002980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002978:	4618      	mov	r0, r3
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40023800 	.word	0x40023800
 8002980:	080070ec 	.word	0x080070ec

08002984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002988:	f7ff ffdc 	bl	8002944 <HAL_RCC_GetHCLKFreq>
 800298c:	4602      	mov	r2, r0
 800298e:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	0b5b      	lsrs	r3, r3, #13
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	4903      	ldr	r1, [pc, #12]	@ (80029a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800299a:	5ccb      	ldrb	r3, [r1, r3]
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40023800 	.word	0x40023800
 80029a8:	080070ec 	.word	0x080070ec

080029ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	220f      	movs	r2, #15
 80029ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029bc:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <HAL_RCC_GetClockConfig+0x5c>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0203 	and.w	r2, r3, #3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a08 <HAL_RCC_GetClockConfig+0x5c>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a08 <HAL_RCC_GetClockConfig+0x5c>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029e0:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <HAL_RCC_GetClockConfig+0x5c>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	08db      	lsrs	r3, r3, #3
 80029e6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029ee:	4b07      	ldr	r3, [pc, #28]	@ (8002a0c <HAL_RCC_GetClockConfig+0x60>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 020f 	and.w	r2, r3, #15
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	601a      	str	r2, [r3, #0]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40023c00 	.word	0x40023c00

08002a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e041      	b.n	8002aa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f839 	bl	8002aae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f000 f9c0 	bl	8002dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d001      	beq.n	8002adc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e04e      	b.n	8002b7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a23      	ldr	r2, [pc, #140]	@ (8002b88 <HAL_TIM_Base_Start_IT+0xc4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d022      	beq.n	8002b44 <HAL_TIM_Base_Start_IT+0x80>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b06:	d01d      	beq.n	8002b44 <HAL_TIM_Base_Start_IT+0x80>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b8c <HAL_TIM_Base_Start_IT+0xc8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d018      	beq.n	8002b44 <HAL_TIM_Base_Start_IT+0x80>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1e      	ldr	r2, [pc, #120]	@ (8002b90 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d013      	beq.n	8002b44 <HAL_TIM_Base_Start_IT+0x80>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1c      	ldr	r2, [pc, #112]	@ (8002b94 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00e      	beq.n	8002b44 <HAL_TIM_Base_Start_IT+0x80>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002b98 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d009      	beq.n	8002b44 <HAL_TIM_Base_Start_IT+0x80>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a19      	ldr	r2, [pc, #100]	@ (8002b9c <HAL_TIM_Base_Start_IT+0xd8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d004      	beq.n	8002b44 <HAL_TIM_Base_Start_IT+0x80>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a18      	ldr	r2, [pc, #96]	@ (8002ba0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d111      	bne.n	8002b68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d010      	beq.n	8002b78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0201 	orr.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b66:	e007      	b.n	8002b78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40010000 	.word	0x40010000
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40000800 	.word	0x40000800
 8002b94:	40000c00 	.word	0x40000c00
 8002b98:	40010400 	.word	0x40010400
 8002b9c:	40014000 	.word	0x40014000
 8002ba0:	40001800 	.word	0x40001800

08002ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d020      	beq.n	8002c08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01b      	beq.n	8002c08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0202 	mvn.w	r2, #2
 8002bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f8d2 	bl	8002d98 <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f8c4 	bl	8002d84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f8d5 	bl	8002dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d020      	beq.n	8002c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01b      	beq.n	8002c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0204 	mvn.w	r2, #4
 8002c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8ac 	bl	8002d98 <HAL_TIM_IC_CaptureCallback>
 8002c40:	e005      	b.n	8002c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f89e 	bl	8002d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f8af 	bl	8002dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d020      	beq.n	8002ca0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01b      	beq.n	8002ca0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0208 	mvn.w	r2, #8
 8002c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2204      	movs	r2, #4
 8002c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f886 	bl	8002d98 <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f878 	bl	8002d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f889 	bl	8002dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d020      	beq.n	8002cec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d01b      	beq.n	8002cec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0210 	mvn.w	r2, #16
 8002cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f860 	bl	8002d98 <HAL_TIM_IC_CaptureCallback>
 8002cd8:	e005      	b.n	8002ce6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f852 	bl	8002d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f863 	bl	8002dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00c      	beq.n	8002d10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0201 	mvn.w	r2, #1
 8002d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fd fece 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00c      	beq.n	8002d34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f906 	bl	8002f40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00c      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d007      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f834 	bl	8002dc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0220 	mvn.w	r2, #32
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f8d8 	bl	8002f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a46      	ldr	r2, [pc, #280]	@ (8002f00 <TIM_Base_SetConfig+0x12c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d013      	beq.n	8002e14 <TIM_Base_SetConfig+0x40>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df2:	d00f      	beq.n	8002e14 <TIM_Base_SetConfig+0x40>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a43      	ldr	r2, [pc, #268]	@ (8002f04 <TIM_Base_SetConfig+0x130>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00b      	beq.n	8002e14 <TIM_Base_SetConfig+0x40>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a42      	ldr	r2, [pc, #264]	@ (8002f08 <TIM_Base_SetConfig+0x134>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d007      	beq.n	8002e14 <TIM_Base_SetConfig+0x40>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a41      	ldr	r2, [pc, #260]	@ (8002f0c <TIM_Base_SetConfig+0x138>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d003      	beq.n	8002e14 <TIM_Base_SetConfig+0x40>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a40      	ldr	r2, [pc, #256]	@ (8002f10 <TIM_Base_SetConfig+0x13c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d108      	bne.n	8002e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a35      	ldr	r2, [pc, #212]	@ (8002f00 <TIM_Base_SetConfig+0x12c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d02b      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e34:	d027      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a32      	ldr	r2, [pc, #200]	@ (8002f04 <TIM_Base_SetConfig+0x130>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d023      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a31      	ldr	r2, [pc, #196]	@ (8002f08 <TIM_Base_SetConfig+0x134>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01f      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a30      	ldr	r2, [pc, #192]	@ (8002f0c <TIM_Base_SetConfig+0x138>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d01b      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a2f      	ldr	r2, [pc, #188]	@ (8002f10 <TIM_Base_SetConfig+0x13c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d017      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a2e      	ldr	r2, [pc, #184]	@ (8002f14 <TIM_Base_SetConfig+0x140>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d013      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a2d      	ldr	r2, [pc, #180]	@ (8002f18 <TIM_Base_SetConfig+0x144>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00f      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a2c      	ldr	r2, [pc, #176]	@ (8002f1c <TIM_Base_SetConfig+0x148>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00b      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a2b      	ldr	r2, [pc, #172]	@ (8002f20 <TIM_Base_SetConfig+0x14c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a2a      	ldr	r2, [pc, #168]	@ (8002f24 <TIM_Base_SetConfig+0x150>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d003      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a29      	ldr	r2, [pc, #164]	@ (8002f28 <TIM_Base_SetConfig+0x154>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d108      	bne.n	8002e98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a10      	ldr	r2, [pc, #64]	@ (8002f00 <TIM_Base_SetConfig+0x12c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d003      	beq.n	8002ecc <TIM_Base_SetConfig+0xf8>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a12      	ldr	r2, [pc, #72]	@ (8002f10 <TIM_Base_SetConfig+0x13c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d103      	bne.n	8002ed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d105      	bne.n	8002ef2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f023 0201 	bic.w	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	611a      	str	r2, [r3, #16]
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40010000 	.word	0x40010000
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40000800 	.word	0x40000800
 8002f0c:	40000c00 	.word	0x40000c00
 8002f10:	40010400 	.word	0x40010400
 8002f14:	40014000 	.word	0x40014000
 8002f18:	40014400 	.word	0x40014400
 8002f1c:	40014800 	.word	0x40014800
 8002f20:	40001800 	.word	0x40001800
 8002f24:	40001c00 	.word	0x40001c00
 8002f28:	40002000 	.word	0x40002000

08002f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e042      	b.n	8002fec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fd fea0 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2224      	movs	r2, #36	@ 0x24
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f973 	bl	8003284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	@ 0x28
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	4613      	mov	r3, r2
 8003002:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b20      	cmp	r3, #32
 8003012:	d175      	bne.n	8003100 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <HAL_UART_Transmit+0x2c>
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e06e      	b.n	8003102 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2221      	movs	r2, #33	@ 0x21
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003032:	f7fe f8ed 	bl	8001210 <HAL_GetTick>
 8003036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	88fa      	ldrh	r2, [r7, #6]
 800303c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	88fa      	ldrh	r2, [r7, #6]
 8003042:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800304c:	d108      	bne.n	8003060 <HAL_UART_Transmit+0x6c>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d104      	bne.n	8003060 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	e003      	b.n	8003068 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003068:	e02e      	b.n	80030c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2200      	movs	r2, #0
 8003072:	2180      	movs	r1, #128	@ 0x80
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f848 	bl	800310a <UART_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e03a      	b.n	8003102 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10b      	bne.n	80030aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	3302      	adds	r3, #2
 80030a6:	61bb      	str	r3, [r7, #24]
 80030a8:	e007      	b.n	80030ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	3301      	adds	r3, #1
 80030b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1cb      	bne.n	800306a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2200      	movs	r2, #0
 80030da:	2140      	movs	r1, #64	@ 0x40
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f814 	bl	800310a <UART_WaitOnFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e006      	b.n	8003102 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	e000      	b.n	8003102 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003100:	2302      	movs	r3, #2
  }
}
 8003102:	4618      	mov	r0, r3
 8003104:	3720      	adds	r7, #32
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	4613      	mov	r3, r2
 8003118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800311a:	e03b      	b.n	8003194 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d037      	beq.n	8003194 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003124:	f7fe f874 	bl	8001210 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	6a3a      	ldr	r2, [r7, #32]
 8003130:	429a      	cmp	r2, r3
 8003132:	d302      	bcc.n	800313a <UART_WaitOnFlagUntilTimeout+0x30>
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e03a      	b.n	80031b4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d023      	beq.n	8003194 <UART_WaitOnFlagUntilTimeout+0x8a>
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b80      	cmp	r3, #128	@ 0x80
 8003150:	d020      	beq.n	8003194 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b40      	cmp	r3, #64	@ 0x40
 8003156:	d01d      	beq.n	8003194 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b08      	cmp	r3, #8
 8003164:	d116      	bne.n	8003194 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f81d 	bl	80031bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2208      	movs	r2, #8
 8003186:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e00f      	b.n	80031b4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	4013      	ands	r3, r2
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d0b4      	beq.n	800311c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031bc:	b480      	push	{r7}
 80031be:	b095      	sub	sp, #84	@ 0x54
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ce:	e853 3f00 	ldrex	r3, [r3]
 80031d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	330c      	adds	r3, #12
 80031e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80031e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031ec:	e841 2300 	strex	r3, r2, [r1]
 80031f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1e5      	bne.n	80031c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3314      	adds	r3, #20
 80031fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	e853 3f00 	ldrex	r3, [r3]
 8003206:	61fb      	str	r3, [r7, #28]
   return(result);
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3314      	adds	r3, #20
 8003216:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003218:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800321a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800321e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003220:	e841 2300 	strex	r3, r2, [r1]
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e5      	bne.n	80031f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003230:	2b01      	cmp	r3, #1
 8003232:	d119      	bne.n	8003268 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	e853 3f00 	ldrex	r3, [r3]
 8003242:	60bb      	str	r3, [r7, #8]
   return(result);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f023 0310 	bic.w	r3, r3, #16
 800324a:	647b      	str	r3, [r7, #68]	@ 0x44
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	330c      	adds	r3, #12
 8003252:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003254:	61ba      	str	r2, [r7, #24]
 8003256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	6979      	ldr	r1, [r7, #20]
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	613b      	str	r3, [r7, #16]
   return(result);
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e5      	bne.n	8003234 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003276:	bf00      	nop
 8003278:	3754      	adds	r7, #84	@ 0x54
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003288:	b0c0      	sub	sp, #256	@ 0x100
 800328a:	af00      	add	r7, sp, #0
 800328c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a0:	68d9      	ldr	r1, [r3, #12]
 80032a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	ea40 0301 	orr.w	r3, r0, r1
 80032ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80032dc:	f021 010c 	bic.w	r1, r1, #12
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032ea:	430b      	orrs	r3, r1
 80032ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032fe:	6999      	ldr	r1, [r3, #24]
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	ea40 0301 	orr.w	r3, r0, r1
 800330a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800330c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4b8f      	ldr	r3, [pc, #572]	@ (8003550 <UART_SetConfig+0x2cc>)
 8003314:	429a      	cmp	r2, r3
 8003316:	d005      	beq.n	8003324 <UART_SetConfig+0xa0>
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	4b8d      	ldr	r3, [pc, #564]	@ (8003554 <UART_SetConfig+0x2d0>)
 8003320:	429a      	cmp	r2, r3
 8003322:	d104      	bne.n	800332e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003324:	f7ff fb2e 	bl	8002984 <HAL_RCC_GetPCLK2Freq>
 8003328:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800332c:	e003      	b.n	8003336 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800332e:	f7ff fb15 	bl	800295c <HAL_RCC_GetPCLK1Freq>
 8003332:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003340:	f040 810c 	bne.w	800355c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003348:	2200      	movs	r2, #0
 800334a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800334e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003352:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003356:	4622      	mov	r2, r4
 8003358:	462b      	mov	r3, r5
 800335a:	1891      	adds	r1, r2, r2
 800335c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800335e:	415b      	adcs	r3, r3
 8003360:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003362:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003366:	4621      	mov	r1, r4
 8003368:	eb12 0801 	adds.w	r8, r2, r1
 800336c:	4629      	mov	r1, r5
 800336e:	eb43 0901 	adc.w	r9, r3, r1
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800337e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003386:	4690      	mov	r8, r2
 8003388:	4699      	mov	r9, r3
 800338a:	4623      	mov	r3, r4
 800338c:	eb18 0303 	adds.w	r3, r8, r3
 8003390:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003394:	462b      	mov	r3, r5
 8003396:	eb49 0303 	adc.w	r3, r9, r3
 800339a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800339e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80033ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033b2:	460b      	mov	r3, r1
 80033b4:	18db      	adds	r3, r3, r3
 80033b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80033b8:	4613      	mov	r3, r2
 80033ba:	eb42 0303 	adc.w	r3, r2, r3
 80033be:	657b      	str	r3, [r7, #84]	@ 0x54
 80033c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80033c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80033c8:	f7fc ff62 	bl	8000290 <__aeabi_uldivmod>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4b61      	ldr	r3, [pc, #388]	@ (8003558 <UART_SetConfig+0x2d4>)
 80033d2:	fba3 2302 	umull	r2, r3, r3, r2
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	011c      	lsls	r4, r3, #4
 80033da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033de:	2200      	movs	r2, #0
 80033e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80033ec:	4642      	mov	r2, r8
 80033ee:	464b      	mov	r3, r9
 80033f0:	1891      	adds	r1, r2, r2
 80033f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80033f4:	415b      	adcs	r3, r3
 80033f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033fc:	4641      	mov	r1, r8
 80033fe:	eb12 0a01 	adds.w	sl, r2, r1
 8003402:	4649      	mov	r1, r9
 8003404:	eb43 0b01 	adc.w	fp, r3, r1
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003414:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800341c:	4692      	mov	sl, r2
 800341e:	469b      	mov	fp, r3
 8003420:	4643      	mov	r3, r8
 8003422:	eb1a 0303 	adds.w	r3, sl, r3
 8003426:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800342a:	464b      	mov	r3, r9
 800342c:	eb4b 0303 	adc.w	r3, fp, r3
 8003430:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003440:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003444:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003448:	460b      	mov	r3, r1
 800344a:	18db      	adds	r3, r3, r3
 800344c:	643b      	str	r3, [r7, #64]	@ 0x40
 800344e:	4613      	mov	r3, r2
 8003450:	eb42 0303 	adc.w	r3, r2, r3
 8003454:	647b      	str	r3, [r7, #68]	@ 0x44
 8003456:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800345a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800345e:	f7fc ff17 	bl	8000290 <__aeabi_uldivmod>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4611      	mov	r1, r2
 8003468:	4b3b      	ldr	r3, [pc, #236]	@ (8003558 <UART_SetConfig+0x2d4>)
 800346a:	fba3 2301 	umull	r2, r3, r3, r1
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	2264      	movs	r2, #100	@ 0x64
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	1acb      	subs	r3, r1, r3
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800347e:	4b36      	ldr	r3, [pc, #216]	@ (8003558 <UART_SetConfig+0x2d4>)
 8003480:	fba3 2302 	umull	r2, r3, r3, r2
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800348c:	441c      	add	r4, r3
 800348e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003492:	2200      	movs	r2, #0
 8003494:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003498:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800349c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80034a0:	4642      	mov	r2, r8
 80034a2:	464b      	mov	r3, r9
 80034a4:	1891      	adds	r1, r2, r2
 80034a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034a8:	415b      	adcs	r3, r3
 80034aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80034b0:	4641      	mov	r1, r8
 80034b2:	1851      	adds	r1, r2, r1
 80034b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80034b6:	4649      	mov	r1, r9
 80034b8:	414b      	adcs	r3, r1
 80034ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80034c8:	4659      	mov	r1, fp
 80034ca:	00cb      	lsls	r3, r1, #3
 80034cc:	4651      	mov	r1, sl
 80034ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034d2:	4651      	mov	r1, sl
 80034d4:	00ca      	lsls	r2, r1, #3
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	4603      	mov	r3, r0
 80034dc:	4642      	mov	r2, r8
 80034de:	189b      	adds	r3, r3, r2
 80034e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034e4:	464b      	mov	r3, r9
 80034e6:	460a      	mov	r2, r1
 80034e8:	eb42 0303 	adc.w	r3, r2, r3
 80034ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003504:	460b      	mov	r3, r1
 8003506:	18db      	adds	r3, r3, r3
 8003508:	62bb      	str	r3, [r7, #40]	@ 0x28
 800350a:	4613      	mov	r3, r2
 800350c:	eb42 0303 	adc.w	r3, r2, r3
 8003510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003516:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800351a:	f7fc feb9 	bl	8000290 <__aeabi_uldivmod>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4b0d      	ldr	r3, [pc, #52]	@ (8003558 <UART_SetConfig+0x2d4>)
 8003524:	fba3 1302 	umull	r1, r3, r3, r2
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	2164      	movs	r1, #100	@ 0x64
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	3332      	adds	r3, #50	@ 0x32
 8003536:	4a08      	ldr	r2, [pc, #32]	@ (8003558 <UART_SetConfig+0x2d4>)
 8003538:	fba2 2303 	umull	r2, r3, r2, r3
 800353c:	095b      	lsrs	r3, r3, #5
 800353e:	f003 0207 	and.w	r2, r3, #7
 8003542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4422      	add	r2, r4
 800354a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800354c:	e106      	b.n	800375c <UART_SetConfig+0x4d8>
 800354e:	bf00      	nop
 8003550:	40011000 	.word	0x40011000
 8003554:	40011400 	.word	0x40011400
 8003558:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800355c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003560:	2200      	movs	r2, #0
 8003562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003566:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800356a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800356e:	4642      	mov	r2, r8
 8003570:	464b      	mov	r3, r9
 8003572:	1891      	adds	r1, r2, r2
 8003574:	6239      	str	r1, [r7, #32]
 8003576:	415b      	adcs	r3, r3
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
 800357a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800357e:	4641      	mov	r1, r8
 8003580:	1854      	adds	r4, r2, r1
 8003582:	4649      	mov	r1, r9
 8003584:	eb43 0501 	adc.w	r5, r3, r1
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	00eb      	lsls	r3, r5, #3
 8003592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003596:	00e2      	lsls	r2, r4, #3
 8003598:	4614      	mov	r4, r2
 800359a:	461d      	mov	r5, r3
 800359c:	4643      	mov	r3, r8
 800359e:	18e3      	adds	r3, r4, r3
 80035a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035a4:	464b      	mov	r3, r9
 80035a6:	eb45 0303 	adc.w	r3, r5, r3
 80035aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80035ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035ca:	4629      	mov	r1, r5
 80035cc:	008b      	lsls	r3, r1, #2
 80035ce:	4621      	mov	r1, r4
 80035d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035d4:	4621      	mov	r1, r4
 80035d6:	008a      	lsls	r2, r1, #2
 80035d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80035dc:	f7fc fe58 	bl	8000290 <__aeabi_uldivmod>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4b60      	ldr	r3, [pc, #384]	@ (8003768 <UART_SetConfig+0x4e4>)
 80035e6:	fba3 2302 	umull	r2, r3, r3, r2
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	011c      	lsls	r4, r3, #4
 80035ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003600:	4642      	mov	r2, r8
 8003602:	464b      	mov	r3, r9
 8003604:	1891      	adds	r1, r2, r2
 8003606:	61b9      	str	r1, [r7, #24]
 8003608:	415b      	adcs	r3, r3
 800360a:	61fb      	str	r3, [r7, #28]
 800360c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003610:	4641      	mov	r1, r8
 8003612:	1851      	adds	r1, r2, r1
 8003614:	6139      	str	r1, [r7, #16]
 8003616:	4649      	mov	r1, r9
 8003618:	414b      	adcs	r3, r1
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003628:	4659      	mov	r1, fp
 800362a:	00cb      	lsls	r3, r1, #3
 800362c:	4651      	mov	r1, sl
 800362e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003632:	4651      	mov	r1, sl
 8003634:	00ca      	lsls	r2, r1, #3
 8003636:	4610      	mov	r0, r2
 8003638:	4619      	mov	r1, r3
 800363a:	4603      	mov	r3, r0
 800363c:	4642      	mov	r2, r8
 800363e:	189b      	adds	r3, r3, r2
 8003640:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003644:	464b      	mov	r3, r9
 8003646:	460a      	mov	r2, r1
 8003648:	eb42 0303 	adc.w	r3, r2, r3
 800364c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	67bb      	str	r3, [r7, #120]	@ 0x78
 800365a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003668:	4649      	mov	r1, r9
 800366a:	008b      	lsls	r3, r1, #2
 800366c:	4641      	mov	r1, r8
 800366e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003672:	4641      	mov	r1, r8
 8003674:	008a      	lsls	r2, r1, #2
 8003676:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800367a:	f7fc fe09 	bl	8000290 <__aeabi_uldivmod>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4611      	mov	r1, r2
 8003684:	4b38      	ldr	r3, [pc, #224]	@ (8003768 <UART_SetConfig+0x4e4>)
 8003686:	fba3 2301 	umull	r2, r3, r3, r1
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	2264      	movs	r2, #100	@ 0x64
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	1acb      	subs	r3, r1, r3
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	3332      	adds	r3, #50	@ 0x32
 8003698:	4a33      	ldr	r2, [pc, #204]	@ (8003768 <UART_SetConfig+0x4e4>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036a4:	441c      	add	r4, r3
 80036a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036aa:	2200      	movs	r2, #0
 80036ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80036ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80036b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80036b4:	4642      	mov	r2, r8
 80036b6:	464b      	mov	r3, r9
 80036b8:	1891      	adds	r1, r2, r2
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	415b      	adcs	r3, r3
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036c4:	4641      	mov	r1, r8
 80036c6:	1851      	adds	r1, r2, r1
 80036c8:	6039      	str	r1, [r7, #0]
 80036ca:	4649      	mov	r1, r9
 80036cc:	414b      	adcs	r3, r1
 80036ce:	607b      	str	r3, [r7, #4]
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036dc:	4659      	mov	r1, fp
 80036de:	00cb      	lsls	r3, r1, #3
 80036e0:	4651      	mov	r1, sl
 80036e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036e6:	4651      	mov	r1, sl
 80036e8:	00ca      	lsls	r2, r1, #3
 80036ea:	4610      	mov	r0, r2
 80036ec:	4619      	mov	r1, r3
 80036ee:	4603      	mov	r3, r0
 80036f0:	4642      	mov	r2, r8
 80036f2:	189b      	adds	r3, r3, r2
 80036f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036f6:	464b      	mov	r3, r9
 80036f8:	460a      	mov	r2, r1
 80036fa:	eb42 0303 	adc.w	r3, r2, r3
 80036fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	663b      	str	r3, [r7, #96]	@ 0x60
 800370a:	667a      	str	r2, [r7, #100]	@ 0x64
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003718:	4649      	mov	r1, r9
 800371a:	008b      	lsls	r3, r1, #2
 800371c:	4641      	mov	r1, r8
 800371e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003722:	4641      	mov	r1, r8
 8003724:	008a      	lsls	r2, r1, #2
 8003726:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800372a:	f7fc fdb1 	bl	8000290 <__aeabi_uldivmod>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4b0d      	ldr	r3, [pc, #52]	@ (8003768 <UART_SetConfig+0x4e4>)
 8003734:	fba3 1302 	umull	r1, r3, r3, r2
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	2164      	movs	r1, #100	@ 0x64
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	3332      	adds	r3, #50	@ 0x32
 8003746:	4a08      	ldr	r2, [pc, #32]	@ (8003768 <UART_SetConfig+0x4e4>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	f003 020f 	and.w	r2, r3, #15
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4422      	add	r2, r4
 800375a:	609a      	str	r2, [r3, #8]
}
 800375c:	bf00      	nop
 800375e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003762:	46bd      	mov	sp, r7
 8003764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003768:	51eb851f 	.word	0x51eb851f

0800376c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800376c:	b084      	sub	sp, #16
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	f107 001c 	add.w	r0, r7, #28
 800377a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800377e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003782:	2b01      	cmp	r3, #1
 8003784:	d123      	bne.n	80037ce <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800379a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d105      	bne.n	80037c2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 faa0 	bl	8003d08 <USB_CoreReset>
 80037c8:	4603      	mov	r3, r0
 80037ca:	73fb      	strb	r3, [r7, #15]
 80037cc:	e01b      	b.n	8003806 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fa94 	bl	8003d08 <USB_CoreReset>
 80037e0:	4603      	mov	r3, r0
 80037e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d106      	bne.n	80037fa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80037f8:	e005      	b.n	8003806 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003806:	7fbb      	ldrb	r3, [r7, #30]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d10b      	bne.n	8003824 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f043 0206 	orr.w	r2, r3, #6
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f043 0220 	orr.w	r2, r3, #32
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003824:	7bfb      	ldrb	r3, [r7, #15]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003830:	b004      	add	sp, #16
 8003832:	4770      	bx	lr

08003834 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f023 0201 	bic.w	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	460b      	mov	r3, r1
 8003860:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d115      	bne.n	80038a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003884:	200a      	movs	r0, #10
 8003886:	f7fd fccf 	bl	8001228 <HAL_Delay>
      ms += 10U;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	330a      	adds	r3, #10
 800388e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fa2b 	bl	8003cec <USB_GetMode>
 8003896:	4603      	mov	r3, r0
 8003898:	2b01      	cmp	r3, #1
 800389a:	d01e      	beq.n	80038da <USB_SetCurrentMode+0x84>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2bc7      	cmp	r3, #199	@ 0xc7
 80038a0:	d9f0      	bls.n	8003884 <USB_SetCurrentMode+0x2e>
 80038a2:	e01a      	b.n	80038da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d115      	bne.n	80038d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80038b6:	200a      	movs	r0, #10
 80038b8:	f7fd fcb6 	bl	8001228 <HAL_Delay>
      ms += 10U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	330a      	adds	r3, #10
 80038c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fa12 	bl	8003cec <USB_GetMode>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <USB_SetCurrentMode+0x84>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80038d2:	d9f0      	bls.n	80038b6 <USB_SetCurrentMode+0x60>
 80038d4:	e001      	b.n	80038da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e005      	b.n	80038e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2bc8      	cmp	r3, #200	@ 0xc8
 80038de:	d101      	bne.n	80038e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038f0:	b084      	sub	sp, #16
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80038fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	e009      	b.n	8003924 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	3340      	adds	r3, #64	@ 0x40
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	2200      	movs	r2, #0
 800391c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	3301      	adds	r3, #1
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b0e      	cmp	r3, #14
 8003928:	d9f2      	bls.n	8003910 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800392a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800392e:	2b00      	cmp	r3, #0
 8003930:	d11c      	bne.n	800396c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003940:	f043 0302 	orr.w	r3, r3, #2
 8003944:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003956:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003962:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	639a      	str	r2, [r3, #56]	@ 0x38
 800396a:	e00b      	b.n	8003984 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003970:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800398a:	461a      	mov	r2, r3
 800398c:	2300      	movs	r3, #0
 800398e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003990:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10d      	bne.n	80039b4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039a0:	2100      	movs	r1, #0
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f968 	bl	8003c78 <USB_SetDevSpeed>
 80039a8:	e008      	b.n	80039bc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039aa:	2101      	movs	r1, #1
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f963 	bl	8003c78 <USB_SetDevSpeed>
 80039b2:	e003      	b.n	80039bc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039b4:	2103      	movs	r1, #3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f95e 	bl	8003c78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039bc:	2110      	movs	r1, #16
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8fa 	bl	8003bb8 <USB_FlushTxFifo>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f924 	bl	8003c1c <USB_FlushRxFifo>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039e4:	461a      	mov	r2, r3
 80039e6:	2300      	movs	r3, #0
 80039e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039f0:	461a      	mov	r2, r3
 80039f2:	2300      	movs	r3, #0
 80039f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039fc:	461a      	mov	r2, r3
 80039fe:	2300      	movs	r3, #0
 8003a00:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	e043      	b.n	8003a90 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a1e:	d118      	bne.n	8003a52 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a32:	461a      	mov	r2, r3
 8003a34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e013      	b.n	8003a64 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	e008      	b.n	8003a64 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2300      	movs	r3, #0
 8003a62:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a70:	461a      	mov	r2, r3
 8003a72:	2300      	movs	r3, #0
 8003a74:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a82:	461a      	mov	r2, r3
 8003a84:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a94:	461a      	mov	r2, r3
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d3b5      	bcc.n	8003a08 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	e043      	b.n	8003b2a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ab8:	d118      	bne.n	8003aec <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003acc:	461a      	mov	r2, r3
 8003ace:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	e013      	b.n	8003afe <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e008      	b.n	8003afe <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af8:	461a      	mov	r2, r3
 8003afa:	2300      	movs	r3, #0
 8003afc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	3301      	adds	r3, #1
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b2e:	461a      	mov	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d3b5      	bcc.n	8003aa2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b48:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003b56:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f043 0210 	orr.w	r2, r3, #16
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	4b10      	ldr	r3, [pc, #64]	@ (8003bb4 <USB_DevInit+0x2c4>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b78:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	f043 0208 	orr.w	r2, r3, #8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d107      	bne.n	8003ba4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bb0:	b004      	add	sp, #16
 8003bb2:	4770      	bx	lr
 8003bb4:	803c3800 	.word	0x803c3800

08003bb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bd2:	d901      	bls.n	8003bd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e01b      	b.n	8003c10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	daf2      	bge.n	8003bc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	019b      	lsls	r3, r3, #6
 8003be8:	f043 0220 	orr.w	r2, r3, #32
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bfc:	d901      	bls.n	8003c02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e006      	b.n	8003c10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	d0f0      	beq.n	8003bf0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c34:	d901      	bls.n	8003c3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e018      	b.n	8003c6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	daf2      	bge.n	8003c28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2210      	movs	r2, #16
 8003c4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c58:	d901      	bls.n	8003c5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e006      	b.n	8003c6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d0f0      	beq.n	8003c4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	68f9      	ldr	r1, [r7, #12]
 8003c94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003cc4:	f023 0303 	bic.w	r3, r3, #3
 8003cc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cd8:	f043 0302 	orr.w	r3, r3, #2
 8003cdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3301      	adds	r3, #1
 8003d18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d20:	d901      	bls.n	8003d26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e01b      	b.n	8003d5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	daf2      	bge.n	8003d14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f043 0201 	orr.w	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3301      	adds	r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d4a:	d901      	bls.n	8003d50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e006      	b.n	8003d5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d0f0      	beq.n	8003d3e <USB_CoreReset+0x36>

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	4603      	mov	r3, r0
 8003d72:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d7c:	2b84      	cmp	r3, #132	@ 0x84
 8003d7e:	d005      	beq.n	8003d8c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003d80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	3303      	adds	r3, #3
 8003d8a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003d9e:	f000 fe7b 	bl	8004a98 <vTaskStartScheduler>
  
  return osOK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685c      	ldr	r4, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dbe:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff ffcf 	bl	8003d6a <makeFreeRtosPriority>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	f107 030c 	add.w	r3, r7, #12
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	9200      	str	r2, [sp, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	4632      	mov	r2, r6
 8003dda:	4629      	mov	r1, r5
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f000 fcd9 	bl	8004794 <xTaskCreate>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d001      	beq.n	8003dec <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e000      	b.n	8003dee <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003dec:	68fb      	ldr	r3, [r7, #12]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003df6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <osDelay+0x16>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	e000      	b.n	8003e0e <osDelay+0x18>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fe0c 	bl	8004a2c <vTaskDelay>
  
  return osOK;
 8003e14:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f103 0208 	add.w	r2, r3, #8
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f04f 32ff 	mov.w	r2, #4294967295
 8003e36:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f103 0208 	add.w	r2, r3, #8
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f103 0208 	add.w	r2, r3, #8
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	601a      	str	r2, [r3, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed6:	d103      	bne.n	8003ee0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	e00c      	b.n	8003efa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3308      	adds	r3, #8
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	e002      	b.n	8003eee <vListInsert+0x2e>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d2f6      	bcs.n	8003ee8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	601a      	str	r2, [r3, #0]
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6892      	ldr	r2, [r2, #8]
 8003f48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6852      	ldr	r2, [r2, #4]
 8003f52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d103      	bne.n	8003f66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	1e5a      	subs	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10b      	bne.n	8003fb4 <xQueueGenericReset+0x2c>
	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	60bb      	str	r3, [r7, #8]
}
 8003fae:	bf00      	nop
 8003fb0:	bf00      	nop
 8003fb2:	e7fd      	b.n	8003fb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003fb4:	f001 fcb0 	bl	8005918 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc0:	68f9      	ldr	r1, [r7, #12]
 8003fc2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	441a      	add	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	68f9      	ldr	r1, [r7, #12]
 8003fe8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	441a      	add	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	22ff      	movs	r2, #255	@ 0xff
 8003ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	22ff      	movs	r2, #255	@ 0xff
 8004000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d114      	bne.n	8004034 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01a      	beq.n	8004048 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3310      	adds	r3, #16
 8004016:	4618      	mov	r0, r3
 8004018:	f000 ff80 	bl	8004f1c <xTaskRemoveFromEventList>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d012      	beq.n	8004048 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004022:	4b0d      	ldr	r3, [pc, #52]	@ (8004058 <xQueueGenericReset+0xd0>)
 8004024:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	e009      	b.n	8004048 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3310      	adds	r3, #16
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fef0 	bl	8003e1e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3324      	adds	r3, #36	@ 0x24
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff feeb 	bl	8003e1e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004048:	f001 fc98 	bl	800597c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800404c:	2301      	movs	r3, #1
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	e000ed04 	.word	0xe000ed04

0800405c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	@ 0x28
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10b      	bne.n	8004088 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	613b      	str	r3, [r7, #16]
}
 8004082:	bf00      	nop
 8004084:	bf00      	nop
 8004086:	e7fd      	b.n	8004084 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	fb02 f303 	mul.w	r3, r2, r3
 8004090:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	3348      	adds	r3, #72	@ 0x48
 8004096:	4618      	mov	r0, r3
 8004098:	f001 fd1e 	bl	8005ad8 <pvPortMalloc>
 800409c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00d      	beq.n	80040c0 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	3348      	adds	r3, #72	@ 0x48
 80040ac:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ae:	79fa      	ldrb	r2, [r7, #7]
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f805 	bl	80040ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040c0:	69bb      	ldr	r3, [r7, #24]
	}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	e002      	b.n	80040ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040f8:	2101      	movs	r1, #1
 80040fa:	69b8      	ldr	r0, [r7, #24]
 80040fc:	f7ff ff44 	bl	8003f88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00e      	beq.n	8004134 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004128:	2300      	movs	r3, #0
 800412a:	2200      	movs	r2, #0
 800412c:	2100      	movs	r1, #0
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f81c 	bl	800416c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004146:	2301      	movs	r3, #1
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	461a      	mov	r2, r3
 8004152:	6939      	ldr	r1, [r7, #16]
 8004154:	6978      	ldr	r0, [r7, #20]
 8004156:	f7ff ff81 	bl	800405c <xQueueGenericCreate>
 800415a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f7ff ffd3 	bl	8004108 <prvInitialiseMutex>

		return xNewQueue;
 8004162:	68fb      	ldr	r3, [r7, #12]
	}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08e      	sub	sp, #56	@ 0x38
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800417a:	2300      	movs	r3, #0
 800417c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10b      	bne.n	80041a0 <xQueueGenericSend+0x34>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800419a:	bf00      	nop
 800419c:	bf00      	nop
 800419e:	e7fd      	b.n	800419c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d103      	bne.n	80041ae <xQueueGenericSend+0x42>
 80041a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <xQueueGenericSend+0x46>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <xQueueGenericSend+0x48>
 80041b2:	2300      	movs	r3, #0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10b      	bne.n	80041d0 <xQueueGenericSend+0x64>
	__asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041ca:	bf00      	nop
 80041cc:	bf00      	nop
 80041ce:	e7fd      	b.n	80041cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d103      	bne.n	80041de <xQueueGenericSend+0x72>
 80041d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <xQueueGenericSend+0x76>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <xQueueGenericSend+0x78>
 80041e2:	2300      	movs	r3, #0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10b      	bne.n	8004200 <xQueueGenericSend+0x94>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	623b      	str	r3, [r7, #32]
}
 80041fa:	bf00      	nop
 80041fc:	bf00      	nop
 80041fe:	e7fd      	b.n	80041fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004200:	f001 f832 	bl	8005268 <xTaskGetSchedulerState>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d102      	bne.n	8004210 <xQueueGenericSend+0xa4>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <xQueueGenericSend+0xa8>
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <xQueueGenericSend+0xaa>
 8004214:	2300      	movs	r3, #0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <xQueueGenericSend+0xc6>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	61fb      	str	r3, [r7, #28]
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004232:	f001 fb71 	bl	8005918 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800423a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <xQueueGenericSend+0xdc>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d129      	bne.n	800429c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	68b9      	ldr	r1, [r7, #8]
 800424c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800424e:	f000 f9b7 	bl	80045c0 <prvCopyDataToQueue>
 8004252:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004258:	2b00      	cmp	r3, #0
 800425a:	d010      	beq.n	800427e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	3324      	adds	r3, #36	@ 0x24
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fe5b 	bl	8004f1c <xTaskRemoveFromEventList>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d013      	beq.n	8004294 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800426c:	4b3f      	ldr	r3, [pc, #252]	@ (800436c <xQueueGenericSend+0x200>)
 800426e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	e00a      	b.n	8004294 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800427e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004284:	4b39      	ldr	r3, [pc, #228]	@ (800436c <xQueueGenericSend+0x200>)
 8004286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004294:	f001 fb72 	bl	800597c <vPortExitCritical>
				return pdPASS;
 8004298:	2301      	movs	r3, #1
 800429a:	e063      	b.n	8004364 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042a2:	f001 fb6b 	bl	800597c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	e05c      	b.n	8004364 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d106      	bne.n	80042be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042b0:	f107 0314 	add.w	r3, r7, #20
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fe95 	bl	8004fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042ba:	2301      	movs	r3, #1
 80042bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042be:	f001 fb5d 	bl	800597c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042c2:	f000 fc3b 	bl	8004b3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042c6:	f001 fb27 	bl	8005918 <vPortEnterCritical>
 80042ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042d0:	b25b      	sxtb	r3, r3
 80042d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d6:	d103      	bne.n	80042e0 <xQueueGenericSend+0x174>
 80042d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042e6:	b25b      	sxtb	r3, r3
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ec:	d103      	bne.n	80042f6 <xQueueGenericSend+0x18a>
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042f6:	f001 fb41 	bl	800597c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042fa:	1d3a      	adds	r2, r7, #4
 80042fc:	f107 0314 	add.w	r3, r7, #20
 8004300:	4611      	mov	r1, r2
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fe84 	bl	8005010 <xTaskCheckForTimeOut>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d124      	bne.n	8004358 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800430e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004310:	f000 fa28 	bl	8004764 <prvIsQueueFull>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d018      	beq.n	800434c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800431a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431c:	3310      	adds	r3, #16
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	4611      	mov	r1, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fdd4 	bl	8004ed0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004328:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800432a:	f000 f9b3 	bl	8004694 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800432e:	f000 fc13 	bl	8004b58 <xTaskResumeAll>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	f47f af7c 	bne.w	8004232 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800433a:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <xQueueGenericSend+0x200>)
 800433c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	e772      	b.n	8004232 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800434c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800434e:	f000 f9a1 	bl	8004694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004352:	f000 fc01 	bl	8004b58 <xTaskResumeAll>
 8004356:	e76c      	b.n	8004232 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004358:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800435a:	f000 f99b 	bl	8004694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800435e:	f000 fbfb 	bl	8004b58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004362:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004364:	4618      	mov	r0, r3
 8004366:	3738      	adds	r7, #56	@ 0x38
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	e000ed04 	.word	0xe000ed04

08004370 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08e      	sub	sp, #56	@ 0x38
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800437a:	2300      	movs	r3, #0
 800437c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004382:	2300      	movs	r3, #0
 8004384:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	623b      	str	r3, [r7, #32]
}
 800439e:	bf00      	nop
 80043a0:	bf00      	nop
 80043a2:	e7fd      	b.n	80043a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80043a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00b      	beq.n	80043c4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80043ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	61fb      	str	r3, [r7, #28]
}
 80043be:	bf00      	nop
 80043c0:	bf00      	nop
 80043c2:	e7fd      	b.n	80043c0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043c4:	f000 ff50 	bl	8005268 <xTaskGetSchedulerState>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <xQueueSemaphoreTake+0x64>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <xQueueSemaphoreTake+0x68>
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <xQueueSemaphoreTake+0x6a>
 80043d8:	2300      	movs	r3, #0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10b      	bne.n	80043f6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	61bb      	str	r3, [r7, #24]
}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
 80043f4:	e7fd      	b.n	80043f2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043f6:	f001 fa8f 	bl	8005918 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80043fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004402:	2b00      	cmp	r3, #0
 8004404:	d024      	beq.n	8004450 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004408:	1e5a      	subs	r2, r3, #1
 800440a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800440e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d104      	bne.n	8004420 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004416:	f001 f8d3 	bl	80055c0 <pvTaskIncrementMutexHeldCount>
 800441a:	4602      	mov	r2, r0
 800441c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800441e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00f      	beq.n	8004448 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442a:	3310      	adds	r3, #16
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fd75 	bl	8004f1c <xTaskRemoveFromEventList>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d007      	beq.n	8004448 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004438:	4b54      	ldr	r3, [pc, #336]	@ (800458c <xQueueSemaphoreTake+0x21c>)
 800443a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004448:	f001 fa98 	bl	800597c <vPortExitCritical>
				return pdPASS;
 800444c:	2301      	movs	r3, #1
 800444e:	e098      	b.n	8004582 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d112      	bne.n	800447c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00b      	beq.n	8004474 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800445c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	617b      	str	r3, [r7, #20]
}
 800446e:	bf00      	nop
 8004470:	bf00      	nop
 8004472:	e7fd      	b.n	8004470 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004474:	f001 fa82 	bl	800597c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004478:	2300      	movs	r3, #0
 800447a:	e082      	b.n	8004582 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800447c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004482:	f107 030c 	add.w	r3, r7, #12
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fdac 	bl	8004fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800448c:	2301      	movs	r3, #1
 800448e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004490:	f001 fa74 	bl	800597c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004494:	f000 fb52 	bl	8004b3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004498:	f001 fa3e 	bl	8005918 <vPortEnterCritical>
 800449c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044a2:	b25b      	sxtb	r3, r3
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d103      	bne.n	80044b2 <xQueueSemaphoreTake+0x142>
 80044aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044b8:	b25b      	sxtb	r3, r3
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044be:	d103      	bne.n	80044c8 <xQueueSemaphoreTake+0x158>
 80044c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044c8:	f001 fa58 	bl	800597c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044cc:	463a      	mov	r2, r7
 80044ce:	f107 030c 	add.w	r3, r7, #12
 80044d2:	4611      	mov	r1, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fd9b 	bl	8005010 <xTaskCheckForTimeOut>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d132      	bne.n	8004546 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044e2:	f000 f929 	bl	8004738 <prvIsQueueEmpty>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d026      	beq.n	800453a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80044f4:	f001 fa10 	bl	8005918 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fed1 	bl	80052a4 <xTaskPriorityInherit>
 8004502:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004504:	f001 fa3a 	bl	800597c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450a:	3324      	adds	r3, #36	@ 0x24
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	4611      	mov	r1, r2
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fcdd 	bl	8004ed0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004516:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004518:	f000 f8bc 	bl	8004694 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800451c:	f000 fb1c 	bl	8004b58 <xTaskResumeAll>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	f47f af67 	bne.w	80043f6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004528:	4b18      	ldr	r3, [pc, #96]	@ (800458c <xQueueSemaphoreTake+0x21c>)
 800452a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	e75d      	b.n	80043f6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800453a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800453c:	f000 f8aa 	bl	8004694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004540:	f000 fb0a 	bl	8004b58 <xTaskResumeAll>
 8004544:	e757      	b.n	80043f6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004546:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004548:	f000 f8a4 	bl	8004694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800454c:	f000 fb04 	bl	8004b58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004550:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004552:	f000 f8f1 	bl	8004738 <prvIsQueueEmpty>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	f43f af4c 	beq.w	80043f6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800455e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00d      	beq.n	8004580 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004564:	f001 f9d8 	bl	8005918 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004568:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800456a:	f000 f811 	bl	8004590 <prvGetDisinheritPriorityAfterTimeout>
 800456e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004576:	4618      	mov	r0, r3
 8004578:	f000 ff92 	bl	80054a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800457c:	f001 f9fe 	bl	800597c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004580:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004582:	4618      	mov	r0, r3
 8004584:	3738      	adds	r7, #56	@ 0x38
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	e000ed04 	.word	0xe000ed04

08004590 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	2b00      	cmp	r3, #0
 800459e:	d006      	beq.n	80045ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f1c3 0307 	rsb	r3, r3, #7
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	e001      	b.n	80045b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80045b2:	68fb      	ldr	r3, [r7, #12]
	}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10d      	bne.n	80045fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d14d      	bne.n	8004682 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fed0 	bl	8005390 <xTaskPriorityDisinherit>
 80045f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	e043      	b.n	8004682 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d119      	bne.n	8004634 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6858      	ldr	r0, [r3, #4]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004608:	461a      	mov	r2, r3
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	f001 ff39 	bl	8006482 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004618:	441a      	add	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	429a      	cmp	r2, r3
 8004628:	d32b      	bcc.n	8004682 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	e026      	b.n	8004682 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	68d8      	ldr	r0, [r3, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463c:	461a      	mov	r2, r3
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	f001 ff1f 	bl	8006482 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464c:	425b      	negs	r3, r3
 800464e:	441a      	add	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d207      	bcs.n	8004670 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004668:	425b      	negs	r3, r3
 800466a:	441a      	add	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d105      	bne.n	8004682 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	3b01      	subs	r3, #1
 8004680:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800468a:	697b      	ldr	r3, [r7, #20]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800469c:	f001 f93c 	bl	8005918 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046a8:	e011      	b.n	80046ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d012      	beq.n	80046d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3324      	adds	r3, #36	@ 0x24
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fc30 	bl	8004f1c <xTaskRemoveFromEventList>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046c2:	f000 fd09 	bl	80050d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	dce9      	bgt.n	80046aa <prvUnlockQueue+0x16>
 80046d6:	e000      	b.n	80046da <prvUnlockQueue+0x46>
					break;
 80046d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	22ff      	movs	r2, #255	@ 0xff
 80046de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80046e2:	f001 f94b 	bl	800597c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046e6:	f001 f917 	bl	8005918 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046f2:	e011      	b.n	8004718 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d012      	beq.n	8004722 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3310      	adds	r3, #16
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fc0b 	bl	8004f1c <xTaskRemoveFromEventList>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800470c:	f000 fce4 	bl	80050d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004710:	7bbb      	ldrb	r3, [r7, #14]
 8004712:	3b01      	subs	r3, #1
 8004714:	b2db      	uxtb	r3, r3
 8004716:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800471c:	2b00      	cmp	r3, #0
 800471e:	dce9      	bgt.n	80046f4 <prvUnlockQueue+0x60>
 8004720:	e000      	b.n	8004724 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004722:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	22ff      	movs	r2, #255	@ 0xff
 8004728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800472c:	f001 f926 	bl	800597c <vPortExitCritical>
}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004740:	f001 f8ea 	bl	8005918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004748:	2b00      	cmp	r3, #0
 800474a:	d102      	bne.n	8004752 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e001      	b.n	8004756 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004756:	f001 f911 	bl	800597c <vPortExitCritical>

	return xReturn;
 800475a:	68fb      	ldr	r3, [r7, #12]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800476c:	f001 f8d4 	bl	8005918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004778:	429a      	cmp	r2, r3
 800477a:	d102      	bne.n	8004782 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800477c:	2301      	movs	r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	e001      	b.n	8004786 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004786:	f001 f8f9 	bl	800597c <vPortExitCritical>

	return xReturn;
 800478a:	68fb      	ldr	r3, [r7, #12]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08c      	sub	sp, #48	@ 0x30
 8004798:	af04      	add	r7, sp, #16
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	4613      	mov	r3, r2
 80047a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 f995 	bl	8005ad8 <pvPortMalloc>
 80047ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00e      	beq.n	80047d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047b6:	20a0      	movs	r0, #160	@ 0xa0
 80047b8:	f001 f98e 	bl	8005ad8 <pvPortMalloc>
 80047bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80047ca:	e005      	b.n	80047d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047cc:	6978      	ldr	r0, [r7, #20]
 80047ce:	f001 fa51 	bl	8005c74 <vPortFree>
 80047d2:	e001      	b.n	80047d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d013      	beq.n	8004806 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	2300      	movs	r3, #0
 80047e2:	9303      	str	r3, [sp, #12]
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	9302      	str	r3, [sp, #8]
 80047e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ea:	9301      	str	r3, [sp, #4]
 80047ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f80f 	bl	8004818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047fa:	69f8      	ldr	r0, [r7, #28]
 80047fc:	f000 f8ac 	bl	8004958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004800:	2301      	movs	r3, #1
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	e002      	b.n	800480c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004806:	f04f 33ff 	mov.w	r3, #4294967295
 800480a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800480c:	69bb      	ldr	r3, [r7, #24]
	}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004830:	3b01      	subs	r3, #1
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	f023 0307 	bic.w	r3, r3, #7
 800483e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00b      	beq.n	8004862 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	617b      	str	r3, [r7, #20]
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	e7fd      	b.n	800485e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01f      	beq.n	80048a8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004868:	2300      	movs	r3, #0
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	e012      	b.n	8004894 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	4413      	add	r3, r2
 8004874:	7819      	ldrb	r1, [r3, #0]
 8004876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	4413      	add	r3, r2
 800487c:	3334      	adds	r3, #52	@ 0x34
 800487e:	460a      	mov	r2, r1
 8004880:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	4413      	add	r3, r2
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d006      	beq.n	800489c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	3301      	adds	r3, #1
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	2b0f      	cmp	r3, #15
 8004898:	d9e9      	bls.n	800486e <prvInitialiseNewTask+0x56>
 800489a:	e000      	b.n	800489e <prvInitialiseNewTask+0x86>
			{
				break;
 800489c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800489e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048a6:	e003      	b.n	80048b0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b2:	2b06      	cmp	r3, #6
 80048b4:	d901      	bls.n	80048ba <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048b6:	2306      	movs	r3, #6
 80048b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048c4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80048c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c8:	2200      	movs	r2, #0
 80048ca:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ce:	3304      	adds	r3, #4
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fac4 	bl	8003e5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d8:	3318      	adds	r3, #24
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fabf 	bl	8003e5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e8:	f1c3 0207 	rsb	r2, r3, #7
 80048ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	2200      	movs	r2, #0
 80048fa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	2200      	movs	r2, #0
 8004902:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004908:	334c      	adds	r3, #76	@ 0x4c
 800490a:	224c      	movs	r2, #76	@ 0x4c
 800490c:	2100      	movs	r1, #0
 800490e:	4618      	mov	r0, r3
 8004910:	f001 fce5 	bl	80062de <memset>
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	4a0d      	ldr	r2, [pc, #52]	@ (800494c <prvInitialiseNewTask+0x134>)
 8004918:	651a      	str	r2, [r3, #80]	@ 0x50
 800491a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491c:	4a0c      	ldr	r2, [pc, #48]	@ (8004950 <prvInitialiseNewTask+0x138>)
 800491e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004922:	4a0c      	ldr	r2, [pc, #48]	@ (8004954 <prvInitialiseNewTask+0x13c>)
 8004924:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	68f9      	ldr	r1, [r7, #12]
 800492a:	69b8      	ldr	r0, [r7, #24]
 800492c:	f000 fec2 	bl	80056b4 <pxPortInitialiseStack>
 8004930:	4602      	mov	r2, r0
 8004932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004934:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800493c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004940:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004942:	bf00      	nop
 8004944:	3720      	adds	r7, #32
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20004590 	.word	0x20004590
 8004950:	200045f8 	.word	0x200045f8
 8004954:	20004660 	.word	0x20004660

08004958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004960:	f000 ffda 	bl	8005918 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004964:	4b2a      	ldr	r3, [pc, #168]	@ (8004a10 <prvAddNewTaskToReadyList+0xb8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3301      	adds	r3, #1
 800496a:	4a29      	ldr	r2, [pc, #164]	@ (8004a10 <prvAddNewTaskToReadyList+0xb8>)
 800496c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800496e:	4b29      	ldr	r3, [pc, #164]	@ (8004a14 <prvAddNewTaskToReadyList+0xbc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004976:	4a27      	ldr	r2, [pc, #156]	@ (8004a14 <prvAddNewTaskToReadyList+0xbc>)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800497c:	4b24      	ldr	r3, [pc, #144]	@ (8004a10 <prvAddNewTaskToReadyList+0xb8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d110      	bne.n	80049a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004984:	f000 fbcc 	bl	8005120 <prvInitialiseTaskLists>
 8004988:	e00d      	b.n	80049a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800498a:	4b23      	ldr	r3, [pc, #140]	@ (8004a18 <prvAddNewTaskToReadyList+0xc0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d109      	bne.n	80049a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004992:	4b20      	ldr	r3, [pc, #128]	@ (8004a14 <prvAddNewTaskToReadyList+0xbc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499c:	429a      	cmp	r2, r3
 800499e:	d802      	bhi.n	80049a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a14 <prvAddNewTaskToReadyList+0xbc>)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049a6:	4b1d      	ldr	r3, [pc, #116]	@ (8004a1c <prvAddNewTaskToReadyList+0xc4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3301      	adds	r3, #1
 80049ac:	4a1b      	ldr	r2, [pc, #108]	@ (8004a1c <prvAddNewTaskToReadyList+0xc4>)
 80049ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b4:	2201      	movs	r2, #1
 80049b6:	409a      	lsls	r2, r3
 80049b8:	4b19      	ldr	r3, [pc, #100]	@ (8004a20 <prvAddNewTaskToReadyList+0xc8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4313      	orrs	r3, r2
 80049be:	4a18      	ldr	r2, [pc, #96]	@ (8004a20 <prvAddNewTaskToReadyList+0xc8>)
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4a15      	ldr	r2, [pc, #84]	@ (8004a24 <prvAddNewTaskToReadyList+0xcc>)
 80049d0:	441a      	add	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3304      	adds	r3, #4
 80049d6:	4619      	mov	r1, r3
 80049d8:	4610      	mov	r0, r2
 80049da:	f7ff fa4d 	bl	8003e78 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049de:	f000 ffcd 	bl	800597c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a18 <prvAddNewTaskToReadyList+0xc0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00e      	beq.n	8004a08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004a14 <prvAddNewTaskToReadyList+0xbc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d207      	bcs.n	8004a08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004a28 <prvAddNewTaskToReadyList+0xd0>)
 80049fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	2000093c 	.word	0x2000093c
 8004a14:	2000083c 	.word	0x2000083c
 8004a18:	20000948 	.word	0x20000948
 8004a1c:	20000958 	.word	0x20000958
 8004a20:	20000944 	.word	0x20000944
 8004a24:	20000840 	.word	0x20000840
 8004a28:	e000ed04 	.word	0xe000ed04

08004a2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d018      	beq.n	8004a70 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a3e:	4b14      	ldr	r3, [pc, #80]	@ (8004a90 <vTaskDelay+0x64>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00b      	beq.n	8004a5e <vTaskDelay+0x32>
	__asm volatile
 8004a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	60bb      	str	r3, [r7, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	e7fd      	b.n	8004a5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a5e:	f000 f86d 	bl	8004b3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a62:	2100      	movs	r1, #0
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fdbf 	bl	80055e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a6a:	f000 f875 	bl	8004b58 <xTaskResumeAll>
 8004a6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d107      	bne.n	8004a86 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004a76:	4b07      	ldr	r3, [pc, #28]	@ (8004a94 <vTaskDelay+0x68>)
 8004a78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000964 	.word	0x20000964
 8004a94:	e000ed04 	.word	0xe000ed04

08004a98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8004b1c <vTaskStartScheduler+0x84>)
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2280      	movs	r2, #128	@ 0x80
 8004aaa:	491d      	ldr	r1, [pc, #116]	@ (8004b20 <vTaskStartScheduler+0x88>)
 8004aac:	481d      	ldr	r0, [pc, #116]	@ (8004b24 <vTaskStartScheduler+0x8c>)
 8004aae:	f7ff fe71 	bl	8004794 <xTaskCreate>
 8004ab2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d11b      	bne.n	8004af2 <vTaskStartScheduler+0x5a>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	60bb      	str	r3, [r7, #8]
}
 8004acc:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ace:	4b16      	ldr	r3, [pc, #88]	@ (8004b28 <vTaskStartScheduler+0x90>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	334c      	adds	r3, #76	@ 0x4c
 8004ad4:	4a15      	ldr	r2, [pc, #84]	@ (8004b2c <vTaskStartScheduler+0x94>)
 8004ad6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ad8:	4b15      	ldr	r3, [pc, #84]	@ (8004b30 <vTaskStartScheduler+0x98>)
 8004ada:	f04f 32ff 	mov.w	r2, #4294967295
 8004ade:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ae0:	4b14      	ldr	r3, [pc, #80]	@ (8004b34 <vTaskStartScheduler+0x9c>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ae6:	4b14      	ldr	r3, [pc, #80]	@ (8004b38 <vTaskStartScheduler+0xa0>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004aec:	f000 fe70 	bl	80057d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004af0:	e00f      	b.n	8004b12 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d10b      	bne.n	8004b12 <vTaskStartScheduler+0x7a>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	607b      	str	r3, [r7, #4]
}
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	e7fd      	b.n	8004b0e <vTaskStartScheduler+0x76>
}
 8004b12:	bf00      	nop
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000960 	.word	0x20000960
 8004b20:	080070d4 	.word	0x080070d4
 8004b24:	080050f1 	.word	0x080050f1
 8004b28:	2000083c 	.word	0x2000083c
 8004b2c:	2000001c 	.word	0x2000001c
 8004b30:	2000095c 	.word	0x2000095c
 8004b34:	20000948 	.word	0x20000948
 8004b38:	20000940 	.word	0x20000940

08004b3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b40:	4b04      	ldr	r3, [pc, #16]	@ (8004b54 <vTaskSuspendAll+0x18>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	4a03      	ldr	r2, [pc, #12]	@ (8004b54 <vTaskSuspendAll+0x18>)
 8004b48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b4a:	bf00      	nop
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	20000964 	.word	0x20000964

08004b58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b66:	4b42      	ldr	r3, [pc, #264]	@ (8004c70 <xTaskResumeAll+0x118>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10b      	bne.n	8004b86 <xTaskResumeAll+0x2e>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	603b      	str	r3, [r7, #0]
}
 8004b80:	bf00      	nop
 8004b82:	bf00      	nop
 8004b84:	e7fd      	b.n	8004b82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b86:	f000 fec7 	bl	8005918 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b8a:	4b39      	ldr	r3, [pc, #228]	@ (8004c70 <xTaskResumeAll+0x118>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	4a37      	ldr	r2, [pc, #220]	@ (8004c70 <xTaskResumeAll+0x118>)
 8004b92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b94:	4b36      	ldr	r3, [pc, #216]	@ (8004c70 <xTaskResumeAll+0x118>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d161      	bne.n	8004c60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b9c:	4b35      	ldr	r3, [pc, #212]	@ (8004c74 <xTaskResumeAll+0x11c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d05d      	beq.n	8004c60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ba4:	e02e      	b.n	8004c04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ba6:	4b34      	ldr	r3, [pc, #208]	@ (8004c78 <xTaskResumeAll+0x120>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3318      	adds	r3, #24
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff f9bd 	bl	8003f32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff f9b8 	bl	8003f32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	4b2c      	ldr	r3, [pc, #176]	@ (8004c7c <xTaskResumeAll+0x124>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c7c <xTaskResumeAll+0x124>)
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4a27      	ldr	r2, [pc, #156]	@ (8004c80 <xTaskResumeAll+0x128>)
 8004be2:	441a      	add	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4619      	mov	r1, r3
 8004bea:	4610      	mov	r0, r2
 8004bec:	f7ff f944 	bl	8003e78 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf4:	4b23      	ldr	r3, [pc, #140]	@ (8004c84 <xTaskResumeAll+0x12c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d302      	bcc.n	8004c04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004bfe:	4b22      	ldr	r3, [pc, #136]	@ (8004c88 <xTaskResumeAll+0x130>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c04:	4b1c      	ldr	r3, [pc, #112]	@ (8004c78 <xTaskResumeAll+0x120>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1cc      	bne.n	8004ba6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c12:	f000 fb09 	bl	8005228 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c16:	4b1d      	ldr	r3, [pc, #116]	@ (8004c8c <xTaskResumeAll+0x134>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d010      	beq.n	8004c44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c22:	f000 f837 	bl	8004c94 <xTaskIncrementTick>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004c2c:	4b16      	ldr	r3, [pc, #88]	@ (8004c88 <xTaskResumeAll+0x130>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f1      	bne.n	8004c22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004c3e:	4b13      	ldr	r3, [pc, #76]	@ (8004c8c <xTaskResumeAll+0x134>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c44:	4b10      	ldr	r3, [pc, #64]	@ (8004c88 <xTaskResumeAll+0x130>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c50:	4b0f      	ldr	r3, [pc, #60]	@ (8004c90 <xTaskResumeAll+0x138>)
 8004c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c60:	f000 fe8c 	bl	800597c <vPortExitCritical>

	return xAlreadyYielded;
 8004c64:	68bb      	ldr	r3, [r7, #8]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000964 	.word	0x20000964
 8004c74:	2000093c 	.word	0x2000093c
 8004c78:	200008fc 	.word	0x200008fc
 8004c7c:	20000944 	.word	0x20000944
 8004c80:	20000840 	.word	0x20000840
 8004c84:	2000083c 	.word	0x2000083c
 8004c88:	20000950 	.word	0x20000950
 8004c8c:	2000094c 	.word	0x2000094c
 8004c90:	e000ed04 	.word	0xe000ed04

08004c94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c9e:	4b4f      	ldr	r3, [pc, #316]	@ (8004ddc <xTaskIncrementTick+0x148>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f040 808f 	bne.w	8004dc6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8004de0 <xTaskIncrementTick+0x14c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3301      	adds	r3, #1
 8004cae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8004de0 <xTaskIncrementTick+0x14c>)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d121      	bne.n	8004d00 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cbc:	4b49      	ldr	r3, [pc, #292]	@ (8004de4 <xTaskIncrementTick+0x150>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00b      	beq.n	8004cde <xTaskIncrementTick+0x4a>
	__asm volatile
 8004cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	603b      	str	r3, [r7, #0]
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	e7fd      	b.n	8004cda <xTaskIncrementTick+0x46>
 8004cde:	4b41      	ldr	r3, [pc, #260]	@ (8004de4 <xTaskIncrementTick+0x150>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	4b40      	ldr	r3, [pc, #256]	@ (8004de8 <xTaskIncrementTick+0x154>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a3e      	ldr	r2, [pc, #248]	@ (8004de4 <xTaskIncrementTick+0x150>)
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	4a3e      	ldr	r2, [pc, #248]	@ (8004de8 <xTaskIncrementTick+0x154>)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8004dec <xTaskIncrementTick+0x158>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8004dec <xTaskIncrementTick+0x158>)
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	f000 fa94 	bl	8005228 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d00:	4b3b      	ldr	r3, [pc, #236]	@ (8004df0 <xTaskIncrementTick+0x15c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d348      	bcc.n	8004d9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d0a:	4b36      	ldr	r3, [pc, #216]	@ (8004de4 <xTaskIncrementTick+0x150>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d14:	4b36      	ldr	r3, [pc, #216]	@ (8004df0 <xTaskIncrementTick+0x15c>)
 8004d16:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1a:	601a      	str	r2, [r3, #0]
					break;
 8004d1c:	e03e      	b.n	8004d9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d1e:	4b31      	ldr	r3, [pc, #196]	@ (8004de4 <xTaskIncrementTick+0x150>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d203      	bcs.n	8004d3e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d36:	4a2e      	ldr	r2, [pc, #184]	@ (8004df0 <xTaskIncrementTick+0x15c>)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d3c:	e02e      	b.n	8004d9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	3304      	adds	r3, #4
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff f8f5 	bl	8003f32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d004      	beq.n	8004d5a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	3318      	adds	r3, #24
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff f8ec 	bl	8003f32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	2201      	movs	r2, #1
 8004d60:	409a      	lsls	r2, r3
 8004d62:	4b24      	ldr	r3, [pc, #144]	@ (8004df4 <xTaskIncrementTick+0x160>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	4a22      	ldr	r2, [pc, #136]	@ (8004df4 <xTaskIncrementTick+0x160>)
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4a1f      	ldr	r2, [pc, #124]	@ (8004df8 <xTaskIncrementTick+0x164>)
 8004d7a:	441a      	add	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4619      	mov	r1, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	f7ff f878 	bl	8003e78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dfc <xTaskIncrementTick+0x168>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d3b9      	bcc.n	8004d0a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004d96:	2301      	movs	r3, #1
 8004d98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d9a:	e7b6      	b.n	8004d0a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d9c:	4b17      	ldr	r3, [pc, #92]	@ (8004dfc <xTaskIncrementTick+0x168>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da2:	4915      	ldr	r1, [pc, #84]	@ (8004df8 <xTaskIncrementTick+0x164>)
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d901      	bls.n	8004db8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004db4:	2301      	movs	r3, #1
 8004db6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004db8:	4b11      	ldr	r3, [pc, #68]	@ (8004e00 <xTaskIncrementTick+0x16c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	e004      	b.n	8004dd0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e04 <xTaskIncrementTick+0x170>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8004e04 <xTaskIncrementTick+0x170>)
 8004dce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004dd0:	697b      	ldr	r3, [r7, #20]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000964 	.word	0x20000964
 8004de0:	20000940 	.word	0x20000940
 8004de4:	200008f4 	.word	0x200008f4
 8004de8:	200008f8 	.word	0x200008f8
 8004dec:	20000954 	.word	0x20000954
 8004df0:	2000095c 	.word	0x2000095c
 8004df4:	20000944 	.word	0x20000944
 8004df8:	20000840 	.word	0x20000840
 8004dfc:	2000083c 	.word	0x2000083c
 8004e00:	20000950 	.word	0x20000950
 8004e04:	2000094c 	.word	0x2000094c

08004e08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8004eb8 <vTaskSwitchContext+0xb0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e16:	4b29      	ldr	r3, [pc, #164]	@ (8004ebc <vTaskSwitchContext+0xb4>)
 8004e18:	2201      	movs	r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e1c:	e045      	b.n	8004eaa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004e1e:	4b27      	ldr	r3, [pc, #156]	@ (8004ebc <vTaskSwitchContext+0xb4>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e24:	4b26      	ldr	r3, [pc, #152]	@ (8004ec0 <vTaskSwitchContext+0xb8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	fab3 f383 	clz	r3, r3
 8004e30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004e32:	7afb      	ldrb	r3, [r7, #11]
 8004e34:	f1c3 031f 	rsb	r3, r3, #31
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	4922      	ldr	r1, [pc, #136]	@ (8004ec4 <vTaskSwitchContext+0xbc>)
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10b      	bne.n	8004e66 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	607b      	str	r3, [r7, #4]
}
 8004e60:	bf00      	nop
 8004e62:	bf00      	nop
 8004e64:	e7fd      	b.n	8004e62 <vTaskSwitchContext+0x5a>
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4a14      	ldr	r2, [pc, #80]	@ (8004ec4 <vTaskSwitchContext+0xbc>)
 8004e72:	4413      	add	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	605a      	str	r2, [r3, #4]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	3308      	adds	r3, #8
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d104      	bne.n	8004e96 <vTaskSwitchContext+0x8e>
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec8 <vTaskSwitchContext+0xc0>)
 8004e9e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ea0:	4b09      	ldr	r3, [pc, #36]	@ (8004ec8 <vTaskSwitchContext+0xc0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	334c      	adds	r3, #76	@ 0x4c
 8004ea6:	4a09      	ldr	r2, [pc, #36]	@ (8004ecc <vTaskSwitchContext+0xc4>)
 8004ea8:	6013      	str	r3, [r2, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	20000964 	.word	0x20000964
 8004ebc:	20000950 	.word	0x20000950
 8004ec0:	20000944 	.word	0x20000944
 8004ec4:	20000840 	.word	0x20000840
 8004ec8:	2000083c 	.word	0x2000083c
 8004ecc:	2000001c 	.word	0x2000001c

08004ed0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10b      	bne.n	8004ef8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	60fb      	str	r3, [r7, #12]
}
 8004ef2:	bf00      	nop
 8004ef4:	bf00      	nop
 8004ef6:	e7fd      	b.n	8004ef4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ef8:	4b07      	ldr	r3, [pc, #28]	@ (8004f18 <vTaskPlaceOnEventList+0x48>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3318      	adds	r3, #24
 8004efe:	4619      	mov	r1, r3
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7fe ffdd 	bl	8003ec0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f06:	2101      	movs	r1, #1
 8004f08:	6838      	ldr	r0, [r7, #0]
 8004f0a:	f000 fb6d 	bl	80055e8 <prvAddCurrentTaskToDelayedList>
}
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	2000083c 	.word	0x2000083c

08004f1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10b      	bne.n	8004f4a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	60fb      	str	r3, [r7, #12]
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	e7fd      	b.n	8004f46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	3318      	adds	r3, #24
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fe ffef 	bl	8003f32 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f54:	4b1d      	ldr	r3, [pc, #116]	@ (8004fcc <xTaskRemoveFromEventList+0xb0>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d11c      	bne.n	8004f96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fe ffe6 	bl	8003f32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	409a      	lsls	r2, r3
 8004f6e:	4b18      	ldr	r3, [pc, #96]	@ (8004fd0 <xTaskRemoveFromEventList+0xb4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	4a16      	ldr	r2, [pc, #88]	@ (8004fd0 <xTaskRemoveFromEventList+0xb4>)
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4a13      	ldr	r2, [pc, #76]	@ (8004fd4 <xTaskRemoveFromEventList+0xb8>)
 8004f86:	441a      	add	r2, r3
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	f7fe ff72 	bl	8003e78 <vListInsertEnd>
 8004f94:	e005      	b.n	8004fa2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	3318      	adds	r3, #24
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	480e      	ldr	r0, [pc, #56]	@ (8004fd8 <xTaskRemoveFromEventList+0xbc>)
 8004f9e:	f7fe ff6b 	bl	8003e78 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8004fdc <xTaskRemoveFromEventList+0xc0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d905      	bls.n	8004fbc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe0 <xTaskRemoveFromEventList+0xc4>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	e001      	b.n	8004fc0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004fc0:	697b      	ldr	r3, [r7, #20]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000964 	.word	0x20000964
 8004fd0:	20000944 	.word	0x20000944
 8004fd4:	20000840 	.word	0x20000840
 8004fd8:	200008fc 	.word	0x200008fc
 8004fdc:	2000083c 	.word	0x2000083c
 8004fe0:	20000950 	.word	0x20000950

08004fe4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004fec:	4b06      	ldr	r3, [pc, #24]	@ (8005008 <vTaskInternalSetTimeOutState+0x24>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ff4:	4b05      	ldr	r3, [pc, #20]	@ (800500c <vTaskInternalSetTimeOutState+0x28>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	605a      	str	r2, [r3, #4]
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	20000954 	.word	0x20000954
 800500c:	20000940 	.word	0x20000940

08005010 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10b      	bne.n	8005038 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	613b      	str	r3, [r7, #16]
}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	e7fd      	b.n	8005034 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10b      	bne.n	8005056 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	60fb      	str	r3, [r7, #12]
}
 8005050:	bf00      	nop
 8005052:	bf00      	nop
 8005054:	e7fd      	b.n	8005052 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005056:	f000 fc5f 	bl	8005918 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800505a:	4b1d      	ldr	r3, [pc, #116]	@ (80050d0 <xTaskCheckForTimeOut+0xc0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005072:	d102      	bne.n	800507a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005074:	2300      	movs	r3, #0
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	e023      	b.n	80050c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b15      	ldr	r3, [pc, #84]	@ (80050d4 <xTaskCheckForTimeOut+0xc4>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d007      	beq.n	8005096 <xTaskCheckForTimeOut+0x86>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	429a      	cmp	r2, r3
 800508e:	d302      	bcc.n	8005096 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005090:	2301      	movs	r3, #1
 8005092:	61fb      	str	r3, [r7, #28]
 8005094:	e015      	b.n	80050c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	429a      	cmp	r2, r3
 800509e:	d20b      	bcs.n	80050b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	1ad2      	subs	r2, r2, r3
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff ff99 	bl	8004fe4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	e004      	b.n	80050c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80050be:	2301      	movs	r3, #1
 80050c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80050c2:	f000 fc5b 	bl	800597c <vPortExitCritical>

	return xReturn;
 80050c6:	69fb      	ldr	r3, [r7, #28]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3720      	adds	r7, #32
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000940 	.word	0x20000940
 80050d4:	20000954 	.word	0x20000954

080050d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80050dc:	4b03      	ldr	r3, [pc, #12]	@ (80050ec <vTaskMissedYield+0x14>)
 80050de:	2201      	movs	r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
}
 80050e2:	bf00      	nop
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	20000950 	.word	0x20000950

080050f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050f8:	f000 f852 	bl	80051a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050fc:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <prvIdleTask+0x28>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d9f9      	bls.n	80050f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005104:	4b05      	ldr	r3, [pc, #20]	@ (800511c <prvIdleTask+0x2c>)
 8005106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005114:	e7f0      	b.n	80050f8 <prvIdleTask+0x8>
 8005116:	bf00      	nop
 8005118:	20000840 	.word	0x20000840
 800511c:	e000ed04 	.word	0xe000ed04

08005120 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005126:	2300      	movs	r3, #0
 8005128:	607b      	str	r3, [r7, #4]
 800512a:	e00c      	b.n	8005146 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4a12      	ldr	r2, [pc, #72]	@ (8005180 <prvInitialiseTaskLists+0x60>)
 8005138:	4413      	add	r3, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f7fe fe6f 	bl	8003e1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3301      	adds	r3, #1
 8005144:	607b      	str	r3, [r7, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b06      	cmp	r3, #6
 800514a:	d9ef      	bls.n	800512c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800514c:	480d      	ldr	r0, [pc, #52]	@ (8005184 <prvInitialiseTaskLists+0x64>)
 800514e:	f7fe fe66 	bl	8003e1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005152:	480d      	ldr	r0, [pc, #52]	@ (8005188 <prvInitialiseTaskLists+0x68>)
 8005154:	f7fe fe63 	bl	8003e1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005158:	480c      	ldr	r0, [pc, #48]	@ (800518c <prvInitialiseTaskLists+0x6c>)
 800515a:	f7fe fe60 	bl	8003e1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800515e:	480c      	ldr	r0, [pc, #48]	@ (8005190 <prvInitialiseTaskLists+0x70>)
 8005160:	f7fe fe5d 	bl	8003e1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005164:	480b      	ldr	r0, [pc, #44]	@ (8005194 <prvInitialiseTaskLists+0x74>)
 8005166:	f7fe fe5a 	bl	8003e1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800516a:	4b0b      	ldr	r3, [pc, #44]	@ (8005198 <prvInitialiseTaskLists+0x78>)
 800516c:	4a05      	ldr	r2, [pc, #20]	@ (8005184 <prvInitialiseTaskLists+0x64>)
 800516e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005170:	4b0a      	ldr	r3, [pc, #40]	@ (800519c <prvInitialiseTaskLists+0x7c>)
 8005172:	4a05      	ldr	r2, [pc, #20]	@ (8005188 <prvInitialiseTaskLists+0x68>)
 8005174:	601a      	str	r2, [r3, #0]
}
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000840 	.word	0x20000840
 8005184:	200008cc 	.word	0x200008cc
 8005188:	200008e0 	.word	0x200008e0
 800518c:	200008fc 	.word	0x200008fc
 8005190:	20000910 	.word	0x20000910
 8005194:	20000928 	.word	0x20000928
 8005198:	200008f4 	.word	0x200008f4
 800519c:	200008f8 	.word	0x200008f8

080051a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051a6:	e019      	b.n	80051dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051a8:	f000 fbb6 	bl	8005918 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ac:	4b10      	ldr	r3, [pc, #64]	@ (80051f0 <prvCheckTasksWaitingTermination+0x50>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3304      	adds	r3, #4
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fe feba 	bl	8003f32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051be:	4b0d      	ldr	r3, [pc, #52]	@ (80051f4 <prvCheckTasksWaitingTermination+0x54>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	4a0b      	ldr	r2, [pc, #44]	@ (80051f4 <prvCheckTasksWaitingTermination+0x54>)
 80051c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051c8:	4b0b      	ldr	r3, [pc, #44]	@ (80051f8 <prvCheckTasksWaitingTermination+0x58>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	4a0a      	ldr	r2, [pc, #40]	@ (80051f8 <prvCheckTasksWaitingTermination+0x58>)
 80051d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80051d2:	f000 fbd3 	bl	800597c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f810 	bl	80051fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051dc:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <prvCheckTasksWaitingTermination+0x58>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e1      	bne.n	80051a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000910 	.word	0x20000910
 80051f4:	2000093c 	.word	0x2000093c
 80051f8:	20000924 	.word	0x20000924

080051fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	334c      	adds	r3, #76	@ 0x4c
 8005208:	4618      	mov	r0, r3
 800520a:	f001 f881 	bl	8006310 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fd2e 	bl	8005c74 <vPortFree>
			vPortFree( pxTCB );
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fd2b 	bl	8005c74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800522e:	4b0c      	ldr	r3, [pc, #48]	@ (8005260 <prvResetNextTaskUnblockTime+0x38>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d104      	bne.n	8005242 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005238:	4b0a      	ldr	r3, [pc, #40]	@ (8005264 <prvResetNextTaskUnblockTime+0x3c>)
 800523a:	f04f 32ff 	mov.w	r2, #4294967295
 800523e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005240:	e008      	b.n	8005254 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005242:	4b07      	ldr	r3, [pc, #28]	@ (8005260 <prvResetNextTaskUnblockTime+0x38>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4a04      	ldr	r2, [pc, #16]	@ (8005264 <prvResetNextTaskUnblockTime+0x3c>)
 8005252:	6013      	str	r3, [r2, #0]
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	200008f4 	.word	0x200008f4
 8005264:	2000095c 	.word	0x2000095c

08005268 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800526e:	4b0b      	ldr	r3, [pc, #44]	@ (800529c <xTaskGetSchedulerState+0x34>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d102      	bne.n	800527c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005276:	2301      	movs	r3, #1
 8005278:	607b      	str	r3, [r7, #4]
 800527a:	e008      	b.n	800528e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800527c:	4b08      	ldr	r3, [pc, #32]	@ (80052a0 <xTaskGetSchedulerState+0x38>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d102      	bne.n	800528a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005284:	2302      	movs	r3, #2
 8005286:	607b      	str	r3, [r7, #4]
 8005288:	e001      	b.n	800528e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800528a:	2300      	movs	r3, #0
 800528c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800528e:	687b      	ldr	r3, [r7, #4]
	}
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	20000948 	.word	0x20000948
 80052a0:	20000964 	.word	0x20000964

080052a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d05e      	beq.n	8005378 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052be:	4b31      	ldr	r3, [pc, #196]	@ (8005384 <xTaskPriorityInherit+0xe0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d24e      	bcs.n	8005366 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	db06      	blt.n	80052de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005384 <xTaskPriorityInherit+0xe0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d6:	f1c3 0207 	rsb	r2, r3, #7
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	6959      	ldr	r1, [r3, #20]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4a26      	ldr	r2, [pc, #152]	@ (8005388 <xTaskPriorityInherit+0xe4>)
 80052f0:	4413      	add	r3, r2
 80052f2:	4299      	cmp	r1, r3
 80052f4:	d12f      	bne.n	8005356 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	3304      	adds	r3, #4
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fe fe19 	bl	8003f32 <uxListRemove>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530a:	2201      	movs	r2, #1
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	43da      	mvns	r2, r3
 8005312:	4b1e      	ldr	r3, [pc, #120]	@ (800538c <xTaskPriorityInherit+0xe8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4013      	ands	r3, r2
 8005318:	4a1c      	ldr	r2, [pc, #112]	@ (800538c <xTaskPriorityInherit+0xe8>)
 800531a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800531c:	4b19      	ldr	r3, [pc, #100]	@ (8005384 <xTaskPriorityInherit+0xe0>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532a:	2201      	movs	r2, #1
 800532c:	409a      	lsls	r2, r3
 800532e:	4b17      	ldr	r3, [pc, #92]	@ (800538c <xTaskPriorityInherit+0xe8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4313      	orrs	r3, r2
 8005334:	4a15      	ldr	r2, [pc, #84]	@ (800538c <xTaskPriorityInherit+0xe8>)
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4a10      	ldr	r2, [pc, #64]	@ (8005388 <xTaskPriorityInherit+0xe4>)
 8005346:	441a      	add	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	3304      	adds	r3, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f7fe fd92 	bl	8003e78 <vListInsertEnd>
 8005354:	e004      	b.n	8005360 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005356:	4b0b      	ldr	r3, [pc, #44]	@ (8005384 <xTaskPriorityInherit+0xe0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005360:	2301      	movs	r3, #1
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	e008      	b.n	8005378 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800536a:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <xTaskPriorityInherit+0xe0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005370:	429a      	cmp	r2, r3
 8005372:	d201      	bcs.n	8005378 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005374:	2301      	movs	r3, #1
 8005376:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005378:	68fb      	ldr	r3, [r7, #12]
	}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	2000083c 	.word	0x2000083c
 8005388:	20000840 	.word	0x20000840
 800538c:	20000944 	.word	0x20000944

08005390 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d070      	beq.n	8005488 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005494 <xTaskPriorityDisinherit+0x104>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d00b      	beq.n	80053c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	60fb      	str	r3, [r7, #12]
}
 80053c2:	bf00      	nop
 80053c4:	bf00      	nop
 80053c6:	e7fd      	b.n	80053c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10b      	bne.n	80053e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	60bb      	str	r3, [r7, #8]
}
 80053e2:	bf00      	nop
 80053e4:	bf00      	nop
 80053e6:	e7fd      	b.n	80053e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ec:	1e5a      	subs	r2, r3, #1
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d044      	beq.n	8005488 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005402:	2b00      	cmp	r3, #0
 8005404:	d140      	bne.n	8005488 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	3304      	adds	r3, #4
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe fd91 	bl	8003f32 <uxListRemove>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d115      	bne.n	8005442 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800541a:	491f      	ldr	r1, [pc, #124]	@ (8005498 <xTaskPriorityDisinherit+0x108>)
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10a      	bne.n	8005442 <xTaskPriorityDisinherit+0xb2>
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005430:	2201      	movs	r2, #1
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	43da      	mvns	r2, r3
 8005438:	4b18      	ldr	r3, [pc, #96]	@ (800549c <xTaskPriorityDisinherit+0x10c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4013      	ands	r3, r2
 800543e:	4a17      	ldr	r2, [pc, #92]	@ (800549c <xTaskPriorityDisinherit+0x10c>)
 8005440:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544e:	f1c3 0207 	rsb	r2, r3, #7
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545a:	2201      	movs	r2, #1
 800545c:	409a      	lsls	r2, r3
 800545e:	4b0f      	ldr	r3, [pc, #60]	@ (800549c <xTaskPriorityDisinherit+0x10c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4313      	orrs	r3, r2
 8005464:	4a0d      	ldr	r2, [pc, #52]	@ (800549c <xTaskPriorityDisinherit+0x10c>)
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4a08      	ldr	r2, [pc, #32]	@ (8005498 <xTaskPriorityDisinherit+0x108>)
 8005476:	441a      	add	r2, r3
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	3304      	adds	r3, #4
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f7fe fcfa 	bl	8003e78 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005484:	2301      	movs	r3, #1
 8005486:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005488:	697b      	ldr	r3, [r7, #20]
	}
 800548a:	4618      	mov	r0, r3
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	2000083c 	.word	0x2000083c
 8005498:	20000840 	.word	0x20000840
 800549c:	20000944 	.word	0x20000944

080054a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80054ae:	2301      	movs	r3, #1
 80054b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d079      	beq.n	80055ac <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10b      	bne.n	80054d8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	60fb      	str	r3, [r7, #12]
}
 80054d2:	bf00      	nop
 80054d4:	bf00      	nop
 80054d6:	e7fd      	b.n	80054d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d902      	bls.n	80054e8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	61fb      	str	r3, [r7, #28]
 80054e6:	e002      	b.n	80054ee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d059      	beq.n	80055ac <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d154      	bne.n	80055ac <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005502:	4b2c      	ldr	r3, [pc, #176]	@ (80055b4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	429a      	cmp	r2, r3
 800550a:	d10b      	bne.n	8005524 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	60bb      	str	r3, [r7, #8]
}
 800551e:	bf00      	nop
 8005520:	bf00      	nop
 8005522:	e7fd      	b.n	8005520 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005528:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	db04      	blt.n	8005542 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f1c3 0207 	rsb	r2, r3, #7
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	6959      	ldr	r1, [r3, #20]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4613      	mov	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4a19      	ldr	r2, [pc, #100]	@ (80055b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005552:	4413      	add	r3, r2
 8005554:	4299      	cmp	r1, r3
 8005556:	d129      	bne.n	80055ac <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	3304      	adds	r3, #4
 800555c:	4618      	mov	r0, r3
 800555e:	f7fe fce8 	bl	8003f32 <uxListRemove>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	2201      	movs	r2, #1
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	43da      	mvns	r2, r3
 8005574:	4b11      	ldr	r3, [pc, #68]	@ (80055bc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4013      	ands	r3, r2
 800557a:	4a10      	ldr	r2, [pc, #64]	@ (80055bc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800557c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005582:	2201      	movs	r2, #1
 8005584:	409a      	lsls	r2, r3
 8005586:	4b0d      	ldr	r3, [pc, #52]	@ (80055bc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4313      	orrs	r3, r2
 800558c:	4a0b      	ldr	r2, [pc, #44]	@ (80055bc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4a06      	ldr	r2, [pc, #24]	@ (80055b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800559e:	441a      	add	r2, r3
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f7fe fc66 	bl	8003e78 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055ac:	bf00      	nop
 80055ae:	3720      	adds	r7, #32
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	2000083c 	.word	0x2000083c
 80055b8:	20000840 	.word	0x20000840
 80055bc:	20000944 	.word	0x20000944

080055c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80055c4:	4b07      	ldr	r3, [pc, #28]	@ (80055e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80055cc:	4b05      	ldr	r3, [pc, #20]	@ (80055e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055d2:	3201      	adds	r2, #1
 80055d4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80055d6:	4b03      	ldr	r3, [pc, #12]	@ (80055e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80055d8:	681b      	ldr	r3, [r3, #0]
	}
 80055da:	4618      	mov	r0, r3
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	2000083c 	.word	0x2000083c

080055e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055f2:	4b29      	ldr	r3, [pc, #164]	@ (8005698 <prvAddCurrentTaskToDelayedList+0xb0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055f8:	4b28      	ldr	r3, [pc, #160]	@ (800569c <prvAddCurrentTaskToDelayedList+0xb4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3304      	adds	r3, #4
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fe fc97 	bl	8003f32 <uxListRemove>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10b      	bne.n	8005622 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800560a:	4b24      	ldr	r3, [pc, #144]	@ (800569c <prvAddCurrentTaskToDelayedList+0xb4>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005610:	2201      	movs	r2, #1
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	43da      	mvns	r2, r3
 8005618:	4b21      	ldr	r3, [pc, #132]	@ (80056a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4013      	ands	r3, r2
 800561e:	4a20      	ldr	r2, [pc, #128]	@ (80056a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005620:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d10a      	bne.n	8005640 <prvAddCurrentTaskToDelayedList+0x58>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005630:	4b1a      	ldr	r3, [pc, #104]	@ (800569c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3304      	adds	r3, #4
 8005636:	4619      	mov	r1, r3
 8005638:	481a      	ldr	r0, [pc, #104]	@ (80056a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800563a:	f7fe fc1d 	bl	8003e78 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800563e:	e026      	b.n	800568e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4413      	add	r3, r2
 8005646:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005648:	4b14      	ldr	r3, [pc, #80]	@ (800569c <prvAddCurrentTaskToDelayedList+0xb4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	429a      	cmp	r2, r3
 8005656:	d209      	bcs.n	800566c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005658:	4b13      	ldr	r3, [pc, #76]	@ (80056a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	4b0f      	ldr	r3, [pc, #60]	@ (800569c <prvAddCurrentTaskToDelayedList+0xb4>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3304      	adds	r3, #4
 8005662:	4619      	mov	r1, r3
 8005664:	4610      	mov	r0, r2
 8005666:	f7fe fc2b 	bl	8003ec0 <vListInsert>
}
 800566a:	e010      	b.n	800568e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800566c:	4b0f      	ldr	r3, [pc, #60]	@ (80056ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	4b0a      	ldr	r3, [pc, #40]	@ (800569c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3304      	adds	r3, #4
 8005676:	4619      	mov	r1, r3
 8005678:	4610      	mov	r0, r2
 800567a:	f7fe fc21 	bl	8003ec0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800567e:	4b0c      	ldr	r3, [pc, #48]	@ (80056b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	429a      	cmp	r2, r3
 8005686:	d202      	bcs.n	800568e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005688:	4a09      	ldr	r2, [pc, #36]	@ (80056b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6013      	str	r3, [r2, #0]
}
 800568e:	bf00      	nop
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000940 	.word	0x20000940
 800569c:	2000083c 	.word	0x2000083c
 80056a0:	20000944 	.word	0x20000944
 80056a4:	20000928 	.word	0x20000928
 80056a8:	200008f8 	.word	0x200008f8
 80056ac:	200008f4 	.word	0x200008f4
 80056b0:	2000095c 	.word	0x2000095c

080056b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	3b04      	subs	r3, #4
 80056c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80056cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3b04      	subs	r3, #4
 80056d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f023 0201 	bic.w	r2, r3, #1
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3b04      	subs	r3, #4
 80056e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056e4:	4a0c      	ldr	r2, [pc, #48]	@ (8005718 <pxPortInitialiseStack+0x64>)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3b14      	subs	r3, #20
 80056ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3b04      	subs	r3, #4
 80056fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f06f 0202 	mvn.w	r2, #2
 8005702:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3b20      	subs	r3, #32
 8005708:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800570a:	68fb      	ldr	r3, [r7, #12]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	0800571d 	.word	0x0800571d

0800571c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005726:	4b13      	ldr	r3, [pc, #76]	@ (8005774 <prvTaskExitError+0x58>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572e:	d00b      	beq.n	8005748 <prvTaskExitError+0x2c>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	60fb      	str	r3, [r7, #12]
}
 8005742:	bf00      	nop
 8005744:	bf00      	nop
 8005746:	e7fd      	b.n	8005744 <prvTaskExitError+0x28>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	60bb      	str	r3, [r7, #8]
}
 800575a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800575c:	bf00      	nop
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0fc      	beq.n	800575e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	2000000c 	.word	0x2000000c
	...

08005780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005780:	4b07      	ldr	r3, [pc, #28]	@ (80057a0 <pxCurrentTCBConst2>)
 8005782:	6819      	ldr	r1, [r3, #0]
 8005784:	6808      	ldr	r0, [r1, #0]
 8005786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578a:	f380 8809 	msr	PSP, r0
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f04f 0000 	mov.w	r0, #0
 8005796:	f380 8811 	msr	BASEPRI, r0
 800579a:	4770      	bx	lr
 800579c:	f3af 8000 	nop.w

080057a0 <pxCurrentTCBConst2>:
 80057a0:	2000083c 	.word	0x2000083c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop

080057a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057a8:	4808      	ldr	r0, [pc, #32]	@ (80057cc <prvPortStartFirstTask+0x24>)
 80057aa:	6800      	ldr	r0, [r0, #0]
 80057ac:	6800      	ldr	r0, [r0, #0]
 80057ae:	f380 8808 	msr	MSP, r0
 80057b2:	f04f 0000 	mov.w	r0, #0
 80057b6:	f380 8814 	msr	CONTROL, r0
 80057ba:	b662      	cpsie	i
 80057bc:	b661      	cpsie	f
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	df00      	svc	0
 80057c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057ca:	bf00      	nop
 80057cc:	e000ed08 	.word	0xe000ed08

080057d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057d6:	4b47      	ldr	r3, [pc, #284]	@ (80058f4 <xPortStartScheduler+0x124>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a47      	ldr	r2, [pc, #284]	@ (80058f8 <xPortStartScheduler+0x128>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d10b      	bne.n	80057f8 <xPortStartScheduler+0x28>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	613b      	str	r3, [r7, #16]
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	e7fd      	b.n	80057f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057f8:	4b3e      	ldr	r3, [pc, #248]	@ (80058f4 <xPortStartScheduler+0x124>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a3f      	ldr	r2, [pc, #252]	@ (80058fc <xPortStartScheduler+0x12c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d10b      	bne.n	800581a <xPortStartScheduler+0x4a>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	60fb      	str	r3, [r7, #12]
}
 8005814:	bf00      	nop
 8005816:	bf00      	nop
 8005818:	e7fd      	b.n	8005816 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800581a:	4b39      	ldr	r3, [pc, #228]	@ (8005900 <xPortStartScheduler+0x130>)
 800581c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	b2db      	uxtb	r3, r3
 8005824:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	22ff      	movs	r2, #255	@ 0xff
 800582a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800583c:	b2da      	uxtb	r2, r3
 800583e:	4b31      	ldr	r3, [pc, #196]	@ (8005904 <xPortStartScheduler+0x134>)
 8005840:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005842:	4b31      	ldr	r3, [pc, #196]	@ (8005908 <xPortStartScheduler+0x138>)
 8005844:	2207      	movs	r2, #7
 8005846:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005848:	e009      	b.n	800585e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800584a:	4b2f      	ldr	r3, [pc, #188]	@ (8005908 <xPortStartScheduler+0x138>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3b01      	subs	r3, #1
 8005850:	4a2d      	ldr	r2, [pc, #180]	@ (8005908 <xPortStartScheduler+0x138>)
 8005852:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	b2db      	uxtb	r3, r3
 800585c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005866:	2b80      	cmp	r3, #128	@ 0x80
 8005868:	d0ef      	beq.n	800584a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800586a:	4b27      	ldr	r3, [pc, #156]	@ (8005908 <xPortStartScheduler+0x138>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f1c3 0307 	rsb	r3, r3, #7
 8005872:	2b04      	cmp	r3, #4
 8005874:	d00b      	beq.n	800588e <xPortStartScheduler+0xbe>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	60bb      	str	r3, [r7, #8]
}
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	e7fd      	b.n	800588a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800588e:	4b1e      	ldr	r3, [pc, #120]	@ (8005908 <xPortStartScheduler+0x138>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	4a1c      	ldr	r2, [pc, #112]	@ (8005908 <xPortStartScheduler+0x138>)
 8005896:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005898:	4b1b      	ldr	r3, [pc, #108]	@ (8005908 <xPortStartScheduler+0x138>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80058a0:	4a19      	ldr	r2, [pc, #100]	@ (8005908 <xPortStartScheduler+0x138>)
 80058a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058ac:	4b17      	ldr	r3, [pc, #92]	@ (800590c <xPortStartScheduler+0x13c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a16      	ldr	r2, [pc, #88]	@ (800590c <xPortStartScheduler+0x13c>)
 80058b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80058b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058b8:	4b14      	ldr	r3, [pc, #80]	@ (800590c <xPortStartScheduler+0x13c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a13      	ldr	r2, [pc, #76]	@ (800590c <xPortStartScheduler+0x13c>)
 80058be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80058c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058c4:	f000 f8da 	bl	8005a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058c8:	4b11      	ldr	r3, [pc, #68]	@ (8005910 <xPortStartScheduler+0x140>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058ce:	f000 f8f9 	bl	8005ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058d2:	4b10      	ldr	r3, [pc, #64]	@ (8005914 <xPortStartScheduler+0x144>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005914 <xPortStartScheduler+0x144>)
 80058d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80058dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058de:	f7ff ff63 	bl	80057a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058e2:	f7ff fa91 	bl	8004e08 <vTaskSwitchContext>
	prvTaskExitError();
 80058e6:	f7ff ff19 	bl	800571c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	e000ed00 	.word	0xe000ed00
 80058f8:	410fc271 	.word	0x410fc271
 80058fc:	410fc270 	.word	0x410fc270
 8005900:	e000e400 	.word	0xe000e400
 8005904:	20000968 	.word	0x20000968
 8005908:	2000096c 	.word	0x2000096c
 800590c:	e000ed20 	.word	0xe000ed20
 8005910:	2000000c 	.word	0x2000000c
 8005914:	e000ef34 	.word	0xe000ef34

08005918 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	607b      	str	r3, [r7, #4]
}
 8005930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005932:	4b10      	ldr	r3, [pc, #64]	@ (8005974 <vPortEnterCritical+0x5c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3301      	adds	r3, #1
 8005938:	4a0e      	ldr	r2, [pc, #56]	@ (8005974 <vPortEnterCritical+0x5c>)
 800593a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800593c:	4b0d      	ldr	r3, [pc, #52]	@ (8005974 <vPortEnterCritical+0x5c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d110      	bne.n	8005966 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005944:	4b0c      	ldr	r3, [pc, #48]	@ (8005978 <vPortEnterCritical+0x60>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <vPortEnterCritical+0x4e>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	603b      	str	r3, [r7, #0]
}
 8005960:	bf00      	nop
 8005962:	bf00      	nop
 8005964:	e7fd      	b.n	8005962 <vPortEnterCritical+0x4a>
	}
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	2000000c 	.word	0x2000000c
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005982:	4b12      	ldr	r3, [pc, #72]	@ (80059cc <vPortExitCritical+0x50>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10b      	bne.n	80059a2 <vPortExitCritical+0x26>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	607b      	str	r3, [r7, #4]
}
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	e7fd      	b.n	800599e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059a2:	4b0a      	ldr	r3, [pc, #40]	@ (80059cc <vPortExitCritical+0x50>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	4a08      	ldr	r2, [pc, #32]	@ (80059cc <vPortExitCritical+0x50>)
 80059aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059ac:	4b07      	ldr	r3, [pc, #28]	@ (80059cc <vPortExitCritical+0x50>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d105      	bne.n	80059c0 <vPortExitCritical+0x44>
 80059b4:	2300      	movs	r3, #0
 80059b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	2000000c 	.word	0x2000000c

080059d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059d0:	f3ef 8009 	mrs	r0, PSP
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	4b15      	ldr	r3, [pc, #84]	@ (8005a30 <pxCurrentTCBConst>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	f01e 0f10 	tst.w	lr, #16
 80059e0:	bf08      	it	eq
 80059e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ea:	6010      	str	r0, [r2, #0]
 80059ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80059f4:	f380 8811 	msr	BASEPRI, r0
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f7ff fa02 	bl	8004e08 <vTaskSwitchContext>
 8005a04:	f04f 0000 	mov.w	r0, #0
 8005a08:	f380 8811 	msr	BASEPRI, r0
 8005a0c:	bc09      	pop	{r0, r3}
 8005a0e:	6819      	ldr	r1, [r3, #0]
 8005a10:	6808      	ldr	r0, [r1, #0]
 8005a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a16:	f01e 0f10 	tst.w	lr, #16
 8005a1a:	bf08      	it	eq
 8005a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a20:	f380 8809 	msr	PSP, r0
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	f3af 8000 	nop.w

08005a30 <pxCurrentTCBConst>:
 8005a30:	2000083c 	.word	0x2000083c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop

08005a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	607b      	str	r3, [r7, #4]
}
 8005a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a52:	f7ff f91f 	bl	8004c94 <xTaskIncrementTick>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a5c:	4b06      	ldr	r3, [pc, #24]	@ (8005a78 <SysTick_Handler+0x40>)
 8005a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	2300      	movs	r3, #0
 8005a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	f383 8811 	msr	BASEPRI, r3
}
 8005a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	e000ed04 	.word	0xe000ed04

08005a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a80:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab0 <vPortSetupTimerInterrupt+0x34>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a86:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab4 <vPortSetupTimerInterrupt+0x38>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab8 <vPortSetupTimerInterrupt+0x3c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a0a      	ldr	r2, [pc, #40]	@ (8005abc <vPortSetupTimerInterrupt+0x40>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	099b      	lsrs	r3, r3, #6
 8005a98:	4a09      	ldr	r2, [pc, #36]	@ (8005ac0 <vPortSetupTimerInterrupt+0x44>)
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a9e:	4b04      	ldr	r3, [pc, #16]	@ (8005ab0 <vPortSetupTimerInterrupt+0x34>)
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	601a      	str	r2, [r3, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	e000e010 	.word	0xe000e010
 8005ab4:	e000e018 	.word	0xe000e018
 8005ab8:	20000000 	.word	0x20000000
 8005abc:	10624dd3 	.word	0x10624dd3
 8005ac0:	e000e014 	.word	0xe000e014

08005ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005ad4 <vPortEnableVFP+0x10>
 8005ac8:	6801      	ldr	r1, [r0, #0]
 8005aca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005ace:	6001      	str	r1, [r0, #0]
 8005ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ad2:	bf00      	nop
 8005ad4:	e000ed88 	.word	0xe000ed88

08005ad8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	@ 0x28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ae4:	f7ff f82a 	bl	8004b3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ae8:	4b5c      	ldr	r3, [pc, #368]	@ (8005c5c <pvPortMalloc+0x184>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005af0:	f000 f924 	bl	8005d3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005af4:	4b5a      	ldr	r3, [pc, #360]	@ (8005c60 <pvPortMalloc+0x188>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f040 8095 	bne.w	8005c2c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01e      	beq.n	8005b46 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005b08:	2208      	movs	r2, #8
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d015      	beq.n	8005b46 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f023 0307 	bic.w	r3, r3, #7
 8005b20:	3308      	adds	r3, #8
 8005b22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00b      	beq.n	8005b46 <pvPortMalloc+0x6e>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	617b      	str	r3, [r7, #20]
}
 8005b40:	bf00      	nop
 8005b42:	bf00      	nop
 8005b44:	e7fd      	b.n	8005b42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d06f      	beq.n	8005c2c <pvPortMalloc+0x154>
 8005b4c:	4b45      	ldr	r3, [pc, #276]	@ (8005c64 <pvPortMalloc+0x18c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d86a      	bhi.n	8005c2c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b56:	4b44      	ldr	r3, [pc, #272]	@ (8005c68 <pvPortMalloc+0x190>)
 8005b58:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b5a:	4b43      	ldr	r3, [pc, #268]	@ (8005c68 <pvPortMalloc+0x190>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b60:	e004      	b.n	8005b6c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d903      	bls.n	8005b7e <pvPortMalloc+0xa6>
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1f1      	bne.n	8005b62 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b7e:	4b37      	ldr	r3, [pc, #220]	@ (8005c5c <pvPortMalloc+0x184>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d051      	beq.n	8005c2c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	4413      	add	r3, r2
 8005b90:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	1ad2      	subs	r2, r2, r3
 8005ba2:	2308      	movs	r3, #8
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d920      	bls.n	8005bec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4413      	add	r3, r2
 8005bb0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00b      	beq.n	8005bd4 <pvPortMalloc+0xfc>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	613b      	str	r3, [r7, #16]
}
 8005bce:	bf00      	nop
 8005bd0:	bf00      	nop
 8005bd2:	e7fd      	b.n	8005bd0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	1ad2      	subs	r2, r2, r3
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005be6:	69b8      	ldr	r0, [r7, #24]
 8005be8:	f000 f90a 	bl	8005e00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005bec:	4b1d      	ldr	r3, [pc, #116]	@ (8005c64 <pvPortMalloc+0x18c>)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8005c64 <pvPortMalloc+0x18c>)
 8005bf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8005c64 <pvPortMalloc+0x18c>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8005c6c <pvPortMalloc+0x194>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d203      	bcs.n	8005c0e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c06:	4b17      	ldr	r3, [pc, #92]	@ (8005c64 <pvPortMalloc+0x18c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a18      	ldr	r2, [pc, #96]	@ (8005c6c <pvPortMalloc+0x194>)
 8005c0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	4b13      	ldr	r3, [pc, #76]	@ (8005c60 <pvPortMalloc+0x188>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	431a      	orrs	r2, r3
 8005c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c22:	4b13      	ldr	r3, [pc, #76]	@ (8005c70 <pvPortMalloc+0x198>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3301      	adds	r3, #1
 8005c28:	4a11      	ldr	r2, [pc, #68]	@ (8005c70 <pvPortMalloc+0x198>)
 8005c2a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c2c:	f7fe ff94 	bl	8004b58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00b      	beq.n	8005c52 <pvPortMalloc+0x17a>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	60fb      	str	r3, [r7, #12]
}
 8005c4c:	bf00      	nop
 8005c4e:	bf00      	nop
 8005c50:	e7fd      	b.n	8005c4e <pvPortMalloc+0x176>
	return pvReturn;
 8005c52:	69fb      	ldr	r3, [r7, #28]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3728      	adds	r7, #40	@ 0x28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20004578 	.word	0x20004578
 8005c60:	2000458c 	.word	0x2000458c
 8005c64:	2000457c 	.word	0x2000457c
 8005c68:	20004570 	.word	0x20004570
 8005c6c:	20004580 	.word	0x20004580
 8005c70:	20004584 	.word	0x20004584

08005c74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d04f      	beq.n	8005d26 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c86:	2308      	movs	r3, #8
 8005c88:	425b      	negs	r3, r3
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	4b25      	ldr	r3, [pc, #148]	@ (8005d30 <vPortFree+0xbc>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10b      	bne.n	8005cba <vPortFree+0x46>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	60fb      	str	r3, [r7, #12]
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop
 8005cb8:	e7fd      	b.n	8005cb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <vPortFree+0x66>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	60bb      	str	r3, [r7, #8]
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop
 8005cd8:	e7fd      	b.n	8005cd6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	4b14      	ldr	r3, [pc, #80]	@ (8005d30 <vPortFree+0xbc>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01e      	beq.n	8005d26 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d11a      	bne.n	8005d26 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8005d30 <vPortFree+0xbc>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	401a      	ands	r2, r3
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d00:	f7fe ff1c 	bl	8004b3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	4b0a      	ldr	r3, [pc, #40]	@ (8005d34 <vPortFree+0xc0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	4a09      	ldr	r2, [pc, #36]	@ (8005d34 <vPortFree+0xc0>)
 8005d10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d12:	6938      	ldr	r0, [r7, #16]
 8005d14:	f000 f874 	bl	8005e00 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d18:	4b07      	ldr	r3, [pc, #28]	@ (8005d38 <vPortFree+0xc4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	4a06      	ldr	r2, [pc, #24]	@ (8005d38 <vPortFree+0xc4>)
 8005d20:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d22:	f7fe ff19 	bl	8004b58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d26:	bf00      	nop
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	2000458c 	.word	0x2000458c
 8005d34:	2000457c 	.word	0x2000457c
 8005d38:	20004588 	.word	0x20004588

08005d3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d42:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005d46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d48:	4b27      	ldr	r3, [pc, #156]	@ (8005de8 <prvHeapInit+0xac>)
 8005d4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00c      	beq.n	8005d70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3307      	adds	r3, #7
 8005d5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0307 	bic.w	r3, r3, #7
 8005d62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8005de8 <prvHeapInit+0xac>)
 8005d6c:	4413      	add	r3, r2
 8005d6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d74:	4a1d      	ldr	r2, [pc, #116]	@ (8005dec <prvHeapInit+0xb0>)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8005dec <prvHeapInit+0xb0>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	4413      	add	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d88:	2208      	movs	r2, #8
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1a9b      	subs	r3, r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 0307 	bic.w	r3, r3, #7
 8005d96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4a15      	ldr	r2, [pc, #84]	@ (8005df0 <prvHeapInit+0xb4>)
 8005d9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d9e:	4b14      	ldr	r3, [pc, #80]	@ (8005df0 <prvHeapInit+0xb4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2200      	movs	r2, #0
 8005da4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005da6:	4b12      	ldr	r3, [pc, #72]	@ (8005df0 <prvHeapInit+0xb4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	1ad2      	subs	r2, r2, r3
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005df0 <prvHeapInit+0xb4>)
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8005df4 <prvHeapInit+0xb8>)
 8005dca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	4a09      	ldr	r2, [pc, #36]	@ (8005df8 <prvHeapInit+0xbc>)
 8005dd2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005dd4:	4b09      	ldr	r3, [pc, #36]	@ (8005dfc <prvHeapInit+0xc0>)
 8005dd6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005dda:	601a      	str	r2, [r3, #0]
}
 8005ddc:	bf00      	nop
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	20000970 	.word	0x20000970
 8005dec:	20004570 	.word	0x20004570
 8005df0:	20004578 	.word	0x20004578
 8005df4:	20004580 	.word	0x20004580
 8005df8:	2000457c 	.word	0x2000457c
 8005dfc:	2000458c 	.word	0x2000458c

08005e00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e08:	4b28      	ldr	r3, [pc, #160]	@ (8005eac <prvInsertBlockIntoFreeList+0xac>)
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	e002      	b.n	8005e14 <prvInsertBlockIntoFreeList+0x14>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d8f7      	bhi.n	8005e0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	4413      	add	r3, r2
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d108      	bne.n	8005e42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	441a      	add	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	441a      	add	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d118      	bne.n	8005e88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4b15      	ldr	r3, [pc, #84]	@ (8005eb0 <prvInsertBlockIntoFreeList+0xb0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d00d      	beq.n	8005e7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	441a      	add	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	e008      	b.n	8005e90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb0 <prvInsertBlockIntoFreeList+0xb0>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	e003      	b.n	8005e90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d002      	beq.n	8005e9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e9e:	bf00      	nop
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	20004570 	.word	0x20004570
 8005eb0:	20004578 	.word	0x20004578

08005eb4 <rand>:
 8005eb4:	4b16      	ldr	r3, [pc, #88]	@ (8005f10 <rand+0x5c>)
 8005eb6:	b510      	push	{r4, lr}
 8005eb8:	681c      	ldr	r4, [r3, #0]
 8005eba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005ebc:	b9b3      	cbnz	r3, 8005eec <rand+0x38>
 8005ebe:	2018      	movs	r0, #24
 8005ec0:	f000 fb56 	bl	8006570 <malloc>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	6320      	str	r0, [r4, #48]	@ 0x30
 8005ec8:	b920      	cbnz	r0, 8005ed4 <rand+0x20>
 8005eca:	4b12      	ldr	r3, [pc, #72]	@ (8005f14 <rand+0x60>)
 8005ecc:	4812      	ldr	r0, [pc, #72]	@ (8005f18 <rand+0x64>)
 8005ece:	2152      	movs	r1, #82	@ 0x52
 8005ed0:	f000 fae6 	bl	80064a0 <__assert_func>
 8005ed4:	4911      	ldr	r1, [pc, #68]	@ (8005f1c <rand+0x68>)
 8005ed6:	4b12      	ldr	r3, [pc, #72]	@ (8005f20 <rand+0x6c>)
 8005ed8:	e9c0 1300 	strd	r1, r3, [r0]
 8005edc:	4b11      	ldr	r3, [pc, #68]	@ (8005f24 <rand+0x70>)
 8005ede:	6083      	str	r3, [r0, #8]
 8005ee0:	230b      	movs	r3, #11
 8005ee2:	8183      	strh	r3, [r0, #12]
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	2001      	movs	r0, #1
 8005ee8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005eec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005eee:	480e      	ldr	r0, [pc, #56]	@ (8005f28 <rand+0x74>)
 8005ef0:	690b      	ldr	r3, [r1, #16]
 8005ef2:	694c      	ldr	r4, [r1, #20]
 8005ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8005f2c <rand+0x78>)
 8005ef6:	4358      	muls	r0, r3
 8005ef8:	fb02 0004 	mla	r0, r2, r4, r0
 8005efc:	fba3 3202 	umull	r3, r2, r3, r2
 8005f00:	3301      	adds	r3, #1
 8005f02:	eb40 0002 	adc.w	r0, r0, r2
 8005f06:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005f0a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005f0e:	bd10      	pop	{r4, pc}
 8005f10:	2000001c 	.word	0x2000001c
 8005f14:	080070f4 	.word	0x080070f4
 8005f18:	0800710b 	.word	0x0800710b
 8005f1c:	abcd330e 	.word	0xabcd330e
 8005f20:	e66d1234 	.word	0xe66d1234
 8005f24:	0005deec 	.word	0x0005deec
 8005f28:	5851f42d 	.word	0x5851f42d
 8005f2c:	4c957f2d 	.word	0x4c957f2d

08005f30 <__sflush_r>:
 8005f30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f38:	0716      	lsls	r6, r2, #28
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	d454      	bmi.n	8005fea <__sflush_r+0xba>
 8005f40:	684b      	ldr	r3, [r1, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	dc02      	bgt.n	8005f4c <__sflush_r+0x1c>
 8005f46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	dd48      	ble.n	8005fde <__sflush_r+0xae>
 8005f4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f4e:	2e00      	cmp	r6, #0
 8005f50:	d045      	beq.n	8005fde <__sflush_r+0xae>
 8005f52:	2300      	movs	r3, #0
 8005f54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f58:	682f      	ldr	r7, [r5, #0]
 8005f5a:	6a21      	ldr	r1, [r4, #32]
 8005f5c:	602b      	str	r3, [r5, #0]
 8005f5e:	d030      	beq.n	8005fc2 <__sflush_r+0x92>
 8005f60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f62:	89a3      	ldrh	r3, [r4, #12]
 8005f64:	0759      	lsls	r1, r3, #29
 8005f66:	d505      	bpl.n	8005f74 <__sflush_r+0x44>
 8005f68:	6863      	ldr	r3, [r4, #4]
 8005f6a:	1ad2      	subs	r2, r2, r3
 8005f6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f6e:	b10b      	cbz	r3, 8005f74 <__sflush_r+0x44>
 8005f70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f72:	1ad2      	subs	r2, r2, r3
 8005f74:	2300      	movs	r3, #0
 8005f76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f78:	6a21      	ldr	r1, [r4, #32]
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	47b0      	blx	r6
 8005f7e:	1c43      	adds	r3, r0, #1
 8005f80:	89a3      	ldrh	r3, [r4, #12]
 8005f82:	d106      	bne.n	8005f92 <__sflush_r+0x62>
 8005f84:	6829      	ldr	r1, [r5, #0]
 8005f86:	291d      	cmp	r1, #29
 8005f88:	d82b      	bhi.n	8005fe2 <__sflush_r+0xb2>
 8005f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8006034 <__sflush_r+0x104>)
 8005f8c:	410a      	asrs	r2, r1
 8005f8e:	07d6      	lsls	r6, r2, #31
 8005f90:	d427      	bmi.n	8005fe2 <__sflush_r+0xb2>
 8005f92:	2200      	movs	r2, #0
 8005f94:	6062      	str	r2, [r4, #4]
 8005f96:	04d9      	lsls	r1, r3, #19
 8005f98:	6922      	ldr	r2, [r4, #16]
 8005f9a:	6022      	str	r2, [r4, #0]
 8005f9c:	d504      	bpl.n	8005fa8 <__sflush_r+0x78>
 8005f9e:	1c42      	adds	r2, r0, #1
 8005fa0:	d101      	bne.n	8005fa6 <__sflush_r+0x76>
 8005fa2:	682b      	ldr	r3, [r5, #0]
 8005fa4:	b903      	cbnz	r3, 8005fa8 <__sflush_r+0x78>
 8005fa6:	6560      	str	r0, [r4, #84]	@ 0x54
 8005fa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005faa:	602f      	str	r7, [r5, #0]
 8005fac:	b1b9      	cbz	r1, 8005fde <__sflush_r+0xae>
 8005fae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fb2:	4299      	cmp	r1, r3
 8005fb4:	d002      	beq.n	8005fbc <__sflush_r+0x8c>
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f000 fa90 	bl	80064dc <_free_r>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fc0:	e00d      	b.n	8005fde <__sflush_r+0xae>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	47b0      	blx	r6
 8005fc8:	4602      	mov	r2, r0
 8005fca:	1c50      	adds	r0, r2, #1
 8005fcc:	d1c9      	bne.n	8005f62 <__sflush_r+0x32>
 8005fce:	682b      	ldr	r3, [r5, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0c6      	beq.n	8005f62 <__sflush_r+0x32>
 8005fd4:	2b1d      	cmp	r3, #29
 8005fd6:	d001      	beq.n	8005fdc <__sflush_r+0xac>
 8005fd8:	2b16      	cmp	r3, #22
 8005fda:	d11e      	bne.n	800601a <__sflush_r+0xea>
 8005fdc:	602f      	str	r7, [r5, #0]
 8005fde:	2000      	movs	r0, #0
 8005fe0:	e022      	b.n	8006028 <__sflush_r+0xf8>
 8005fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fe6:	b21b      	sxth	r3, r3
 8005fe8:	e01b      	b.n	8006022 <__sflush_r+0xf2>
 8005fea:	690f      	ldr	r7, [r1, #16]
 8005fec:	2f00      	cmp	r7, #0
 8005fee:	d0f6      	beq.n	8005fde <__sflush_r+0xae>
 8005ff0:	0793      	lsls	r3, r2, #30
 8005ff2:	680e      	ldr	r6, [r1, #0]
 8005ff4:	bf08      	it	eq
 8005ff6:	694b      	ldreq	r3, [r1, #20]
 8005ff8:	600f      	str	r7, [r1, #0]
 8005ffa:	bf18      	it	ne
 8005ffc:	2300      	movne	r3, #0
 8005ffe:	eba6 0807 	sub.w	r8, r6, r7
 8006002:	608b      	str	r3, [r1, #8]
 8006004:	f1b8 0f00 	cmp.w	r8, #0
 8006008:	dde9      	ble.n	8005fde <__sflush_r+0xae>
 800600a:	6a21      	ldr	r1, [r4, #32]
 800600c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800600e:	4643      	mov	r3, r8
 8006010:	463a      	mov	r2, r7
 8006012:	4628      	mov	r0, r5
 8006014:	47b0      	blx	r6
 8006016:	2800      	cmp	r0, #0
 8006018:	dc08      	bgt.n	800602c <__sflush_r+0xfc>
 800601a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800601e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006022:	81a3      	strh	r3, [r4, #12]
 8006024:	f04f 30ff 	mov.w	r0, #4294967295
 8006028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800602c:	4407      	add	r7, r0
 800602e:	eba8 0800 	sub.w	r8, r8, r0
 8006032:	e7e7      	b.n	8006004 <__sflush_r+0xd4>
 8006034:	dfbffffe 	.word	0xdfbffffe

08006038 <_fflush_r>:
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	690b      	ldr	r3, [r1, #16]
 800603c:	4605      	mov	r5, r0
 800603e:	460c      	mov	r4, r1
 8006040:	b913      	cbnz	r3, 8006048 <_fflush_r+0x10>
 8006042:	2500      	movs	r5, #0
 8006044:	4628      	mov	r0, r5
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	b118      	cbz	r0, 8006052 <_fflush_r+0x1a>
 800604a:	6a03      	ldr	r3, [r0, #32]
 800604c:	b90b      	cbnz	r3, 8006052 <_fflush_r+0x1a>
 800604e:	f000 f8bb 	bl	80061c8 <__sinit>
 8006052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0f3      	beq.n	8006042 <_fflush_r+0xa>
 800605a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800605c:	07d0      	lsls	r0, r2, #31
 800605e:	d404      	bmi.n	800606a <_fflush_r+0x32>
 8006060:	0599      	lsls	r1, r3, #22
 8006062:	d402      	bmi.n	800606a <_fflush_r+0x32>
 8006064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006066:	f000 fa0a 	bl	800647e <__retarget_lock_acquire_recursive>
 800606a:	4628      	mov	r0, r5
 800606c:	4621      	mov	r1, r4
 800606e:	f7ff ff5f 	bl	8005f30 <__sflush_r>
 8006072:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006074:	07da      	lsls	r2, r3, #31
 8006076:	4605      	mov	r5, r0
 8006078:	d4e4      	bmi.n	8006044 <_fflush_r+0xc>
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	059b      	lsls	r3, r3, #22
 800607e:	d4e1      	bmi.n	8006044 <_fflush_r+0xc>
 8006080:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006082:	f000 f9fd 	bl	8006480 <__retarget_lock_release_recursive>
 8006086:	e7dd      	b.n	8006044 <_fflush_r+0xc>

08006088 <fflush>:
 8006088:	4601      	mov	r1, r0
 800608a:	b920      	cbnz	r0, 8006096 <fflush+0xe>
 800608c:	4a04      	ldr	r2, [pc, #16]	@ (80060a0 <fflush+0x18>)
 800608e:	4905      	ldr	r1, [pc, #20]	@ (80060a4 <fflush+0x1c>)
 8006090:	4805      	ldr	r0, [pc, #20]	@ (80060a8 <fflush+0x20>)
 8006092:	f000 b8b1 	b.w	80061f8 <_fwalk_sglue>
 8006096:	4b05      	ldr	r3, [pc, #20]	@ (80060ac <fflush+0x24>)
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	f7ff bfcd 	b.w	8006038 <_fflush_r>
 800609e:	bf00      	nop
 80060a0:	20000010 	.word	0x20000010
 80060a4:	08006039 	.word	0x08006039
 80060a8:	20000020 	.word	0x20000020
 80060ac:	2000001c 	.word	0x2000001c

080060b0 <std>:
 80060b0:	2300      	movs	r3, #0
 80060b2:	b510      	push	{r4, lr}
 80060b4:	4604      	mov	r4, r0
 80060b6:	e9c0 3300 	strd	r3, r3, [r0]
 80060ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060be:	6083      	str	r3, [r0, #8]
 80060c0:	8181      	strh	r1, [r0, #12]
 80060c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80060c4:	81c2      	strh	r2, [r0, #14]
 80060c6:	6183      	str	r3, [r0, #24]
 80060c8:	4619      	mov	r1, r3
 80060ca:	2208      	movs	r2, #8
 80060cc:	305c      	adds	r0, #92	@ 0x5c
 80060ce:	f000 f906 	bl	80062de <memset>
 80060d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006108 <std+0x58>)
 80060d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80060d6:	4b0d      	ldr	r3, [pc, #52]	@ (800610c <std+0x5c>)
 80060d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80060da:	4b0d      	ldr	r3, [pc, #52]	@ (8006110 <std+0x60>)
 80060dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060de:	4b0d      	ldr	r3, [pc, #52]	@ (8006114 <std+0x64>)
 80060e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80060e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006118 <std+0x68>)
 80060e4:	6224      	str	r4, [r4, #32]
 80060e6:	429c      	cmp	r4, r3
 80060e8:	d006      	beq.n	80060f8 <std+0x48>
 80060ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060ee:	4294      	cmp	r4, r2
 80060f0:	d002      	beq.n	80060f8 <std+0x48>
 80060f2:	33d0      	adds	r3, #208	@ 0xd0
 80060f4:	429c      	cmp	r4, r3
 80060f6:	d105      	bne.n	8006104 <std+0x54>
 80060f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006100:	f000 b9bc 	b.w	800647c <__retarget_lock_init_recursive>
 8006104:	bd10      	pop	{r4, pc}
 8006106:	bf00      	nop
 8006108:	08006259 	.word	0x08006259
 800610c:	0800627b 	.word	0x0800627b
 8006110:	080062b3 	.word	0x080062b3
 8006114:	080062d7 	.word	0x080062d7
 8006118:	20004590 	.word	0x20004590

0800611c <stdio_exit_handler>:
 800611c:	4a02      	ldr	r2, [pc, #8]	@ (8006128 <stdio_exit_handler+0xc>)
 800611e:	4903      	ldr	r1, [pc, #12]	@ (800612c <stdio_exit_handler+0x10>)
 8006120:	4803      	ldr	r0, [pc, #12]	@ (8006130 <stdio_exit_handler+0x14>)
 8006122:	f000 b869 	b.w	80061f8 <_fwalk_sglue>
 8006126:	bf00      	nop
 8006128:	20000010 	.word	0x20000010
 800612c:	08006039 	.word	0x08006039
 8006130:	20000020 	.word	0x20000020

08006134 <cleanup_stdio>:
 8006134:	6841      	ldr	r1, [r0, #4]
 8006136:	4b0c      	ldr	r3, [pc, #48]	@ (8006168 <cleanup_stdio+0x34>)
 8006138:	4299      	cmp	r1, r3
 800613a:	b510      	push	{r4, lr}
 800613c:	4604      	mov	r4, r0
 800613e:	d001      	beq.n	8006144 <cleanup_stdio+0x10>
 8006140:	f7ff ff7a 	bl	8006038 <_fflush_r>
 8006144:	68a1      	ldr	r1, [r4, #8]
 8006146:	4b09      	ldr	r3, [pc, #36]	@ (800616c <cleanup_stdio+0x38>)
 8006148:	4299      	cmp	r1, r3
 800614a:	d002      	beq.n	8006152 <cleanup_stdio+0x1e>
 800614c:	4620      	mov	r0, r4
 800614e:	f7ff ff73 	bl	8006038 <_fflush_r>
 8006152:	68e1      	ldr	r1, [r4, #12]
 8006154:	4b06      	ldr	r3, [pc, #24]	@ (8006170 <cleanup_stdio+0x3c>)
 8006156:	4299      	cmp	r1, r3
 8006158:	d004      	beq.n	8006164 <cleanup_stdio+0x30>
 800615a:	4620      	mov	r0, r4
 800615c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006160:	f7ff bf6a 	b.w	8006038 <_fflush_r>
 8006164:	bd10      	pop	{r4, pc}
 8006166:	bf00      	nop
 8006168:	20004590 	.word	0x20004590
 800616c:	200045f8 	.word	0x200045f8
 8006170:	20004660 	.word	0x20004660

08006174 <global_stdio_init.part.0>:
 8006174:	b510      	push	{r4, lr}
 8006176:	4b0b      	ldr	r3, [pc, #44]	@ (80061a4 <global_stdio_init.part.0+0x30>)
 8006178:	4c0b      	ldr	r4, [pc, #44]	@ (80061a8 <global_stdio_init.part.0+0x34>)
 800617a:	4a0c      	ldr	r2, [pc, #48]	@ (80061ac <global_stdio_init.part.0+0x38>)
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	4620      	mov	r0, r4
 8006180:	2200      	movs	r2, #0
 8006182:	2104      	movs	r1, #4
 8006184:	f7ff ff94 	bl	80060b0 <std>
 8006188:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800618c:	2201      	movs	r2, #1
 800618e:	2109      	movs	r1, #9
 8006190:	f7ff ff8e 	bl	80060b0 <std>
 8006194:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006198:	2202      	movs	r2, #2
 800619a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800619e:	2112      	movs	r1, #18
 80061a0:	f7ff bf86 	b.w	80060b0 <std>
 80061a4:	200046c8 	.word	0x200046c8
 80061a8:	20004590 	.word	0x20004590
 80061ac:	0800611d 	.word	0x0800611d

080061b0 <__sfp_lock_acquire>:
 80061b0:	4801      	ldr	r0, [pc, #4]	@ (80061b8 <__sfp_lock_acquire+0x8>)
 80061b2:	f000 b964 	b.w	800647e <__retarget_lock_acquire_recursive>
 80061b6:	bf00      	nop
 80061b8:	200046d1 	.word	0x200046d1

080061bc <__sfp_lock_release>:
 80061bc:	4801      	ldr	r0, [pc, #4]	@ (80061c4 <__sfp_lock_release+0x8>)
 80061be:	f000 b95f 	b.w	8006480 <__retarget_lock_release_recursive>
 80061c2:	bf00      	nop
 80061c4:	200046d1 	.word	0x200046d1

080061c8 <__sinit>:
 80061c8:	b510      	push	{r4, lr}
 80061ca:	4604      	mov	r4, r0
 80061cc:	f7ff fff0 	bl	80061b0 <__sfp_lock_acquire>
 80061d0:	6a23      	ldr	r3, [r4, #32]
 80061d2:	b11b      	cbz	r3, 80061dc <__sinit+0x14>
 80061d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d8:	f7ff bff0 	b.w	80061bc <__sfp_lock_release>
 80061dc:	4b04      	ldr	r3, [pc, #16]	@ (80061f0 <__sinit+0x28>)
 80061de:	6223      	str	r3, [r4, #32]
 80061e0:	4b04      	ldr	r3, [pc, #16]	@ (80061f4 <__sinit+0x2c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1f5      	bne.n	80061d4 <__sinit+0xc>
 80061e8:	f7ff ffc4 	bl	8006174 <global_stdio_init.part.0>
 80061ec:	e7f2      	b.n	80061d4 <__sinit+0xc>
 80061ee:	bf00      	nop
 80061f0:	08006135 	.word	0x08006135
 80061f4:	200046c8 	.word	0x200046c8

080061f8 <_fwalk_sglue>:
 80061f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061fc:	4607      	mov	r7, r0
 80061fe:	4688      	mov	r8, r1
 8006200:	4614      	mov	r4, r2
 8006202:	2600      	movs	r6, #0
 8006204:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006208:	f1b9 0901 	subs.w	r9, r9, #1
 800620c:	d505      	bpl.n	800621a <_fwalk_sglue+0x22>
 800620e:	6824      	ldr	r4, [r4, #0]
 8006210:	2c00      	cmp	r4, #0
 8006212:	d1f7      	bne.n	8006204 <_fwalk_sglue+0xc>
 8006214:	4630      	mov	r0, r6
 8006216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800621a:	89ab      	ldrh	r3, [r5, #12]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d907      	bls.n	8006230 <_fwalk_sglue+0x38>
 8006220:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006224:	3301      	adds	r3, #1
 8006226:	d003      	beq.n	8006230 <_fwalk_sglue+0x38>
 8006228:	4629      	mov	r1, r5
 800622a:	4638      	mov	r0, r7
 800622c:	47c0      	blx	r8
 800622e:	4306      	orrs	r6, r0
 8006230:	3568      	adds	r5, #104	@ 0x68
 8006232:	e7e9      	b.n	8006208 <_fwalk_sglue+0x10>

08006234 <iprintf>:
 8006234:	b40f      	push	{r0, r1, r2, r3}
 8006236:	b507      	push	{r0, r1, r2, lr}
 8006238:	4906      	ldr	r1, [pc, #24]	@ (8006254 <iprintf+0x20>)
 800623a:	ab04      	add	r3, sp, #16
 800623c:	6808      	ldr	r0, [r1, #0]
 800623e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006242:	6881      	ldr	r1, [r0, #8]
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	f000 fa73 	bl	8006730 <_vfiprintf_r>
 800624a:	b003      	add	sp, #12
 800624c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006250:	b004      	add	sp, #16
 8006252:	4770      	bx	lr
 8006254:	2000001c 	.word	0x2000001c

08006258 <__sread>:
 8006258:	b510      	push	{r4, lr}
 800625a:	460c      	mov	r4, r1
 800625c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006260:	f000 f8be 	bl	80063e0 <_read_r>
 8006264:	2800      	cmp	r0, #0
 8006266:	bfab      	itete	ge
 8006268:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800626a:	89a3      	ldrhlt	r3, [r4, #12]
 800626c:	181b      	addge	r3, r3, r0
 800626e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006272:	bfac      	ite	ge
 8006274:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006276:	81a3      	strhlt	r3, [r4, #12]
 8006278:	bd10      	pop	{r4, pc}

0800627a <__swrite>:
 800627a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800627e:	461f      	mov	r7, r3
 8006280:	898b      	ldrh	r3, [r1, #12]
 8006282:	05db      	lsls	r3, r3, #23
 8006284:	4605      	mov	r5, r0
 8006286:	460c      	mov	r4, r1
 8006288:	4616      	mov	r6, r2
 800628a:	d505      	bpl.n	8006298 <__swrite+0x1e>
 800628c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006290:	2302      	movs	r3, #2
 8006292:	2200      	movs	r2, #0
 8006294:	f000 f892 	bl	80063bc <_lseek_r>
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800629e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062a2:	81a3      	strh	r3, [r4, #12]
 80062a4:	4632      	mov	r2, r6
 80062a6:	463b      	mov	r3, r7
 80062a8:	4628      	mov	r0, r5
 80062aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ae:	f000 b8a9 	b.w	8006404 <_write_r>

080062b2 <__sseek>:
 80062b2:	b510      	push	{r4, lr}
 80062b4:	460c      	mov	r4, r1
 80062b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ba:	f000 f87f 	bl	80063bc <_lseek_r>
 80062be:	1c43      	adds	r3, r0, #1
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	bf15      	itete	ne
 80062c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062ce:	81a3      	strheq	r3, [r4, #12]
 80062d0:	bf18      	it	ne
 80062d2:	81a3      	strhne	r3, [r4, #12]
 80062d4:	bd10      	pop	{r4, pc}

080062d6 <__sclose>:
 80062d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062da:	f000 b809 	b.w	80062f0 <_close_r>

080062de <memset>:
 80062de:	4402      	add	r2, r0
 80062e0:	4603      	mov	r3, r0
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d100      	bne.n	80062e8 <memset+0xa>
 80062e6:	4770      	bx	lr
 80062e8:	f803 1b01 	strb.w	r1, [r3], #1
 80062ec:	e7f9      	b.n	80062e2 <memset+0x4>
	...

080062f0 <_close_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4d06      	ldr	r5, [pc, #24]	@ (800630c <_close_r+0x1c>)
 80062f4:	2300      	movs	r3, #0
 80062f6:	4604      	mov	r4, r0
 80062f8:	4608      	mov	r0, r1
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	f7fa feac 	bl	8001058 <_close>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d102      	bne.n	800630a <_close_r+0x1a>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	b103      	cbz	r3, 800630a <_close_r+0x1a>
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	bd38      	pop	{r3, r4, r5, pc}
 800630c:	200046cc 	.word	0x200046cc

08006310 <_reclaim_reent>:
 8006310:	4b29      	ldr	r3, [pc, #164]	@ (80063b8 <_reclaim_reent+0xa8>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4283      	cmp	r3, r0
 8006316:	b570      	push	{r4, r5, r6, lr}
 8006318:	4604      	mov	r4, r0
 800631a:	d04b      	beq.n	80063b4 <_reclaim_reent+0xa4>
 800631c:	69c3      	ldr	r3, [r0, #28]
 800631e:	b1ab      	cbz	r3, 800634c <_reclaim_reent+0x3c>
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	b16b      	cbz	r3, 8006340 <_reclaim_reent+0x30>
 8006324:	2500      	movs	r5, #0
 8006326:	69e3      	ldr	r3, [r4, #28]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	5959      	ldr	r1, [r3, r5]
 800632c:	2900      	cmp	r1, #0
 800632e:	d13b      	bne.n	80063a8 <_reclaim_reent+0x98>
 8006330:	3504      	adds	r5, #4
 8006332:	2d80      	cmp	r5, #128	@ 0x80
 8006334:	d1f7      	bne.n	8006326 <_reclaim_reent+0x16>
 8006336:	69e3      	ldr	r3, [r4, #28]
 8006338:	4620      	mov	r0, r4
 800633a:	68d9      	ldr	r1, [r3, #12]
 800633c:	f000 f8ce 	bl	80064dc <_free_r>
 8006340:	69e3      	ldr	r3, [r4, #28]
 8006342:	6819      	ldr	r1, [r3, #0]
 8006344:	b111      	cbz	r1, 800634c <_reclaim_reent+0x3c>
 8006346:	4620      	mov	r0, r4
 8006348:	f000 f8c8 	bl	80064dc <_free_r>
 800634c:	6961      	ldr	r1, [r4, #20]
 800634e:	b111      	cbz	r1, 8006356 <_reclaim_reent+0x46>
 8006350:	4620      	mov	r0, r4
 8006352:	f000 f8c3 	bl	80064dc <_free_r>
 8006356:	69e1      	ldr	r1, [r4, #28]
 8006358:	b111      	cbz	r1, 8006360 <_reclaim_reent+0x50>
 800635a:	4620      	mov	r0, r4
 800635c:	f000 f8be 	bl	80064dc <_free_r>
 8006360:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006362:	b111      	cbz	r1, 800636a <_reclaim_reent+0x5a>
 8006364:	4620      	mov	r0, r4
 8006366:	f000 f8b9 	bl	80064dc <_free_r>
 800636a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800636c:	b111      	cbz	r1, 8006374 <_reclaim_reent+0x64>
 800636e:	4620      	mov	r0, r4
 8006370:	f000 f8b4 	bl	80064dc <_free_r>
 8006374:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006376:	b111      	cbz	r1, 800637e <_reclaim_reent+0x6e>
 8006378:	4620      	mov	r0, r4
 800637a:	f000 f8af 	bl	80064dc <_free_r>
 800637e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006380:	b111      	cbz	r1, 8006388 <_reclaim_reent+0x78>
 8006382:	4620      	mov	r0, r4
 8006384:	f000 f8aa 	bl	80064dc <_free_r>
 8006388:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800638a:	b111      	cbz	r1, 8006392 <_reclaim_reent+0x82>
 800638c:	4620      	mov	r0, r4
 800638e:	f000 f8a5 	bl	80064dc <_free_r>
 8006392:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006394:	b111      	cbz	r1, 800639c <_reclaim_reent+0x8c>
 8006396:	4620      	mov	r0, r4
 8006398:	f000 f8a0 	bl	80064dc <_free_r>
 800639c:	6a23      	ldr	r3, [r4, #32]
 800639e:	b14b      	cbz	r3, 80063b4 <_reclaim_reent+0xa4>
 80063a0:	4620      	mov	r0, r4
 80063a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063a6:	4718      	bx	r3
 80063a8:	680e      	ldr	r6, [r1, #0]
 80063aa:	4620      	mov	r0, r4
 80063ac:	f000 f896 	bl	80064dc <_free_r>
 80063b0:	4631      	mov	r1, r6
 80063b2:	e7bb      	b.n	800632c <_reclaim_reent+0x1c>
 80063b4:	bd70      	pop	{r4, r5, r6, pc}
 80063b6:	bf00      	nop
 80063b8:	2000001c 	.word	0x2000001c

080063bc <_lseek_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	4d07      	ldr	r5, [pc, #28]	@ (80063dc <_lseek_r+0x20>)
 80063c0:	4604      	mov	r4, r0
 80063c2:	4608      	mov	r0, r1
 80063c4:	4611      	mov	r1, r2
 80063c6:	2200      	movs	r2, #0
 80063c8:	602a      	str	r2, [r5, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	f7fa fe6b 	bl	80010a6 <_lseek>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d102      	bne.n	80063da <_lseek_r+0x1e>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	b103      	cbz	r3, 80063da <_lseek_r+0x1e>
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	bd38      	pop	{r3, r4, r5, pc}
 80063dc:	200046cc 	.word	0x200046cc

080063e0 <_read_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	4d07      	ldr	r5, [pc, #28]	@ (8006400 <_read_r+0x20>)
 80063e4:	4604      	mov	r4, r0
 80063e6:	4608      	mov	r0, r1
 80063e8:	4611      	mov	r1, r2
 80063ea:	2200      	movs	r2, #0
 80063ec:	602a      	str	r2, [r5, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	f7fa fdf9 	bl	8000fe6 <_read>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d102      	bne.n	80063fe <_read_r+0x1e>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	b103      	cbz	r3, 80063fe <_read_r+0x1e>
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	200046cc 	.word	0x200046cc

08006404 <_write_r>:
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	4d07      	ldr	r5, [pc, #28]	@ (8006424 <_write_r+0x20>)
 8006408:	4604      	mov	r4, r0
 800640a:	4608      	mov	r0, r1
 800640c:	4611      	mov	r1, r2
 800640e:	2200      	movs	r2, #0
 8006410:	602a      	str	r2, [r5, #0]
 8006412:	461a      	mov	r2, r3
 8006414:	f7fa fe04 	bl	8001020 <_write>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d102      	bne.n	8006422 <_write_r+0x1e>
 800641c:	682b      	ldr	r3, [r5, #0]
 800641e:	b103      	cbz	r3, 8006422 <_write_r+0x1e>
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	bd38      	pop	{r3, r4, r5, pc}
 8006424:	200046cc 	.word	0x200046cc

08006428 <__errno>:
 8006428:	4b01      	ldr	r3, [pc, #4]	@ (8006430 <__errno+0x8>)
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	2000001c 	.word	0x2000001c

08006434 <__libc_init_array>:
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	4d0d      	ldr	r5, [pc, #52]	@ (800646c <__libc_init_array+0x38>)
 8006438:	4c0d      	ldr	r4, [pc, #52]	@ (8006470 <__libc_init_array+0x3c>)
 800643a:	1b64      	subs	r4, r4, r5
 800643c:	10a4      	asrs	r4, r4, #2
 800643e:	2600      	movs	r6, #0
 8006440:	42a6      	cmp	r6, r4
 8006442:	d109      	bne.n	8006458 <__libc_init_array+0x24>
 8006444:	4d0b      	ldr	r5, [pc, #44]	@ (8006474 <__libc_init_array+0x40>)
 8006446:	4c0c      	ldr	r4, [pc, #48]	@ (8006478 <__libc_init_array+0x44>)
 8006448:	f000 fd9e 	bl	8006f88 <_init>
 800644c:	1b64      	subs	r4, r4, r5
 800644e:	10a4      	asrs	r4, r4, #2
 8006450:	2600      	movs	r6, #0
 8006452:	42a6      	cmp	r6, r4
 8006454:	d105      	bne.n	8006462 <__libc_init_array+0x2e>
 8006456:	bd70      	pop	{r4, r5, r6, pc}
 8006458:	f855 3b04 	ldr.w	r3, [r5], #4
 800645c:	4798      	blx	r3
 800645e:	3601      	adds	r6, #1
 8006460:	e7ee      	b.n	8006440 <__libc_init_array+0xc>
 8006462:	f855 3b04 	ldr.w	r3, [r5], #4
 8006466:	4798      	blx	r3
 8006468:	3601      	adds	r6, #1
 800646a:	e7f2      	b.n	8006452 <__libc_init_array+0x1e>
 800646c:	080071dc 	.word	0x080071dc
 8006470:	080071dc 	.word	0x080071dc
 8006474:	080071dc 	.word	0x080071dc
 8006478:	080071e0 	.word	0x080071e0

0800647c <__retarget_lock_init_recursive>:
 800647c:	4770      	bx	lr

0800647e <__retarget_lock_acquire_recursive>:
 800647e:	4770      	bx	lr

08006480 <__retarget_lock_release_recursive>:
 8006480:	4770      	bx	lr

08006482 <memcpy>:
 8006482:	440a      	add	r2, r1
 8006484:	4291      	cmp	r1, r2
 8006486:	f100 33ff 	add.w	r3, r0, #4294967295
 800648a:	d100      	bne.n	800648e <memcpy+0xc>
 800648c:	4770      	bx	lr
 800648e:	b510      	push	{r4, lr}
 8006490:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006494:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006498:	4291      	cmp	r1, r2
 800649a:	d1f9      	bne.n	8006490 <memcpy+0xe>
 800649c:	bd10      	pop	{r4, pc}
	...

080064a0 <__assert_func>:
 80064a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064a2:	4614      	mov	r4, r2
 80064a4:	461a      	mov	r2, r3
 80064a6:	4b09      	ldr	r3, [pc, #36]	@ (80064cc <__assert_func+0x2c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4605      	mov	r5, r0
 80064ac:	68d8      	ldr	r0, [r3, #12]
 80064ae:	b954      	cbnz	r4, 80064c6 <__assert_func+0x26>
 80064b0:	4b07      	ldr	r3, [pc, #28]	@ (80064d0 <__assert_func+0x30>)
 80064b2:	461c      	mov	r4, r3
 80064b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064b8:	9100      	str	r1, [sp, #0]
 80064ba:	462b      	mov	r3, r5
 80064bc:	4905      	ldr	r1, [pc, #20]	@ (80064d4 <__assert_func+0x34>)
 80064be:	f000 fbdd 	bl	8006c7c <fiprintf>
 80064c2:	f000 fc91 	bl	8006de8 <abort>
 80064c6:	4b04      	ldr	r3, [pc, #16]	@ (80064d8 <__assert_func+0x38>)
 80064c8:	e7f4      	b.n	80064b4 <__assert_func+0x14>
 80064ca:	bf00      	nop
 80064cc:	2000001c 	.word	0x2000001c
 80064d0:	0800719e 	.word	0x0800719e
 80064d4:	08007170 	.word	0x08007170
 80064d8:	08007163 	.word	0x08007163

080064dc <_free_r>:
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	4605      	mov	r5, r0
 80064e0:	2900      	cmp	r1, #0
 80064e2:	d041      	beq.n	8006568 <_free_r+0x8c>
 80064e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064e8:	1f0c      	subs	r4, r1, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	bfb8      	it	lt
 80064ee:	18e4      	addlt	r4, r4, r3
 80064f0:	f000 f8e8 	bl	80066c4 <__malloc_lock>
 80064f4:	4a1d      	ldr	r2, [pc, #116]	@ (800656c <_free_r+0x90>)
 80064f6:	6813      	ldr	r3, [r2, #0]
 80064f8:	b933      	cbnz	r3, 8006508 <_free_r+0x2c>
 80064fa:	6063      	str	r3, [r4, #4]
 80064fc:	6014      	str	r4, [r2, #0]
 80064fe:	4628      	mov	r0, r5
 8006500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006504:	f000 b8e4 	b.w	80066d0 <__malloc_unlock>
 8006508:	42a3      	cmp	r3, r4
 800650a:	d908      	bls.n	800651e <_free_r+0x42>
 800650c:	6820      	ldr	r0, [r4, #0]
 800650e:	1821      	adds	r1, r4, r0
 8006510:	428b      	cmp	r3, r1
 8006512:	bf01      	itttt	eq
 8006514:	6819      	ldreq	r1, [r3, #0]
 8006516:	685b      	ldreq	r3, [r3, #4]
 8006518:	1809      	addeq	r1, r1, r0
 800651a:	6021      	streq	r1, [r4, #0]
 800651c:	e7ed      	b.n	80064fa <_free_r+0x1e>
 800651e:	461a      	mov	r2, r3
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	b10b      	cbz	r3, 8006528 <_free_r+0x4c>
 8006524:	42a3      	cmp	r3, r4
 8006526:	d9fa      	bls.n	800651e <_free_r+0x42>
 8006528:	6811      	ldr	r1, [r2, #0]
 800652a:	1850      	adds	r0, r2, r1
 800652c:	42a0      	cmp	r0, r4
 800652e:	d10b      	bne.n	8006548 <_free_r+0x6c>
 8006530:	6820      	ldr	r0, [r4, #0]
 8006532:	4401      	add	r1, r0
 8006534:	1850      	adds	r0, r2, r1
 8006536:	4283      	cmp	r3, r0
 8006538:	6011      	str	r1, [r2, #0]
 800653a:	d1e0      	bne.n	80064fe <_free_r+0x22>
 800653c:	6818      	ldr	r0, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	6053      	str	r3, [r2, #4]
 8006542:	4408      	add	r0, r1
 8006544:	6010      	str	r0, [r2, #0]
 8006546:	e7da      	b.n	80064fe <_free_r+0x22>
 8006548:	d902      	bls.n	8006550 <_free_r+0x74>
 800654a:	230c      	movs	r3, #12
 800654c:	602b      	str	r3, [r5, #0]
 800654e:	e7d6      	b.n	80064fe <_free_r+0x22>
 8006550:	6820      	ldr	r0, [r4, #0]
 8006552:	1821      	adds	r1, r4, r0
 8006554:	428b      	cmp	r3, r1
 8006556:	bf04      	itt	eq
 8006558:	6819      	ldreq	r1, [r3, #0]
 800655a:	685b      	ldreq	r3, [r3, #4]
 800655c:	6063      	str	r3, [r4, #4]
 800655e:	bf04      	itt	eq
 8006560:	1809      	addeq	r1, r1, r0
 8006562:	6021      	streq	r1, [r4, #0]
 8006564:	6054      	str	r4, [r2, #4]
 8006566:	e7ca      	b.n	80064fe <_free_r+0x22>
 8006568:	bd38      	pop	{r3, r4, r5, pc}
 800656a:	bf00      	nop
 800656c:	200046d8 	.word	0x200046d8

08006570 <malloc>:
 8006570:	4b02      	ldr	r3, [pc, #8]	@ (800657c <malloc+0xc>)
 8006572:	4601      	mov	r1, r0
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	f000 b825 	b.w	80065c4 <_malloc_r>
 800657a:	bf00      	nop
 800657c:	2000001c 	.word	0x2000001c

08006580 <sbrk_aligned>:
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	4e0f      	ldr	r6, [pc, #60]	@ (80065c0 <sbrk_aligned+0x40>)
 8006584:	460c      	mov	r4, r1
 8006586:	6831      	ldr	r1, [r6, #0]
 8006588:	4605      	mov	r5, r0
 800658a:	b911      	cbnz	r1, 8006592 <sbrk_aligned+0x12>
 800658c:	f000 fc1c 	bl	8006dc8 <_sbrk_r>
 8006590:	6030      	str	r0, [r6, #0]
 8006592:	4621      	mov	r1, r4
 8006594:	4628      	mov	r0, r5
 8006596:	f000 fc17 	bl	8006dc8 <_sbrk_r>
 800659a:	1c43      	adds	r3, r0, #1
 800659c:	d103      	bne.n	80065a6 <sbrk_aligned+0x26>
 800659e:	f04f 34ff 	mov.w	r4, #4294967295
 80065a2:	4620      	mov	r0, r4
 80065a4:	bd70      	pop	{r4, r5, r6, pc}
 80065a6:	1cc4      	adds	r4, r0, #3
 80065a8:	f024 0403 	bic.w	r4, r4, #3
 80065ac:	42a0      	cmp	r0, r4
 80065ae:	d0f8      	beq.n	80065a2 <sbrk_aligned+0x22>
 80065b0:	1a21      	subs	r1, r4, r0
 80065b2:	4628      	mov	r0, r5
 80065b4:	f000 fc08 	bl	8006dc8 <_sbrk_r>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d1f2      	bne.n	80065a2 <sbrk_aligned+0x22>
 80065bc:	e7ef      	b.n	800659e <sbrk_aligned+0x1e>
 80065be:	bf00      	nop
 80065c0:	200046d4 	.word	0x200046d4

080065c4 <_malloc_r>:
 80065c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c8:	1ccd      	adds	r5, r1, #3
 80065ca:	f025 0503 	bic.w	r5, r5, #3
 80065ce:	3508      	adds	r5, #8
 80065d0:	2d0c      	cmp	r5, #12
 80065d2:	bf38      	it	cc
 80065d4:	250c      	movcc	r5, #12
 80065d6:	2d00      	cmp	r5, #0
 80065d8:	4606      	mov	r6, r0
 80065da:	db01      	blt.n	80065e0 <_malloc_r+0x1c>
 80065dc:	42a9      	cmp	r1, r5
 80065de:	d904      	bls.n	80065ea <_malloc_r+0x26>
 80065e0:	230c      	movs	r3, #12
 80065e2:	6033      	str	r3, [r6, #0]
 80065e4:	2000      	movs	r0, #0
 80065e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80066c0 <_malloc_r+0xfc>
 80065ee:	f000 f869 	bl	80066c4 <__malloc_lock>
 80065f2:	f8d8 3000 	ldr.w	r3, [r8]
 80065f6:	461c      	mov	r4, r3
 80065f8:	bb44      	cbnz	r4, 800664c <_malloc_r+0x88>
 80065fa:	4629      	mov	r1, r5
 80065fc:	4630      	mov	r0, r6
 80065fe:	f7ff ffbf 	bl	8006580 <sbrk_aligned>
 8006602:	1c43      	adds	r3, r0, #1
 8006604:	4604      	mov	r4, r0
 8006606:	d158      	bne.n	80066ba <_malloc_r+0xf6>
 8006608:	f8d8 4000 	ldr.w	r4, [r8]
 800660c:	4627      	mov	r7, r4
 800660e:	2f00      	cmp	r7, #0
 8006610:	d143      	bne.n	800669a <_malloc_r+0xd6>
 8006612:	2c00      	cmp	r4, #0
 8006614:	d04b      	beq.n	80066ae <_malloc_r+0xea>
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	4639      	mov	r1, r7
 800661a:	4630      	mov	r0, r6
 800661c:	eb04 0903 	add.w	r9, r4, r3
 8006620:	f000 fbd2 	bl	8006dc8 <_sbrk_r>
 8006624:	4581      	cmp	r9, r0
 8006626:	d142      	bne.n	80066ae <_malloc_r+0xea>
 8006628:	6821      	ldr	r1, [r4, #0]
 800662a:	1a6d      	subs	r5, r5, r1
 800662c:	4629      	mov	r1, r5
 800662e:	4630      	mov	r0, r6
 8006630:	f7ff ffa6 	bl	8006580 <sbrk_aligned>
 8006634:	3001      	adds	r0, #1
 8006636:	d03a      	beq.n	80066ae <_malloc_r+0xea>
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	442b      	add	r3, r5
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	f8d8 3000 	ldr.w	r3, [r8]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	bb62      	cbnz	r2, 80066a0 <_malloc_r+0xdc>
 8006646:	f8c8 7000 	str.w	r7, [r8]
 800664a:	e00f      	b.n	800666c <_malloc_r+0xa8>
 800664c:	6822      	ldr	r2, [r4, #0]
 800664e:	1b52      	subs	r2, r2, r5
 8006650:	d420      	bmi.n	8006694 <_malloc_r+0xd0>
 8006652:	2a0b      	cmp	r2, #11
 8006654:	d917      	bls.n	8006686 <_malloc_r+0xc2>
 8006656:	1961      	adds	r1, r4, r5
 8006658:	42a3      	cmp	r3, r4
 800665a:	6025      	str	r5, [r4, #0]
 800665c:	bf18      	it	ne
 800665e:	6059      	strne	r1, [r3, #4]
 8006660:	6863      	ldr	r3, [r4, #4]
 8006662:	bf08      	it	eq
 8006664:	f8c8 1000 	streq.w	r1, [r8]
 8006668:	5162      	str	r2, [r4, r5]
 800666a:	604b      	str	r3, [r1, #4]
 800666c:	4630      	mov	r0, r6
 800666e:	f000 f82f 	bl	80066d0 <__malloc_unlock>
 8006672:	f104 000b 	add.w	r0, r4, #11
 8006676:	1d23      	adds	r3, r4, #4
 8006678:	f020 0007 	bic.w	r0, r0, #7
 800667c:	1ac2      	subs	r2, r0, r3
 800667e:	bf1c      	itt	ne
 8006680:	1a1b      	subne	r3, r3, r0
 8006682:	50a3      	strne	r3, [r4, r2]
 8006684:	e7af      	b.n	80065e6 <_malloc_r+0x22>
 8006686:	6862      	ldr	r2, [r4, #4]
 8006688:	42a3      	cmp	r3, r4
 800668a:	bf0c      	ite	eq
 800668c:	f8c8 2000 	streq.w	r2, [r8]
 8006690:	605a      	strne	r2, [r3, #4]
 8006692:	e7eb      	b.n	800666c <_malloc_r+0xa8>
 8006694:	4623      	mov	r3, r4
 8006696:	6864      	ldr	r4, [r4, #4]
 8006698:	e7ae      	b.n	80065f8 <_malloc_r+0x34>
 800669a:	463c      	mov	r4, r7
 800669c:	687f      	ldr	r7, [r7, #4]
 800669e:	e7b6      	b.n	800660e <_malloc_r+0x4a>
 80066a0:	461a      	mov	r2, r3
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	42a3      	cmp	r3, r4
 80066a6:	d1fb      	bne.n	80066a0 <_malloc_r+0xdc>
 80066a8:	2300      	movs	r3, #0
 80066aa:	6053      	str	r3, [r2, #4]
 80066ac:	e7de      	b.n	800666c <_malloc_r+0xa8>
 80066ae:	230c      	movs	r3, #12
 80066b0:	6033      	str	r3, [r6, #0]
 80066b2:	4630      	mov	r0, r6
 80066b4:	f000 f80c 	bl	80066d0 <__malloc_unlock>
 80066b8:	e794      	b.n	80065e4 <_malloc_r+0x20>
 80066ba:	6005      	str	r5, [r0, #0]
 80066bc:	e7d6      	b.n	800666c <_malloc_r+0xa8>
 80066be:	bf00      	nop
 80066c0:	200046d8 	.word	0x200046d8

080066c4 <__malloc_lock>:
 80066c4:	4801      	ldr	r0, [pc, #4]	@ (80066cc <__malloc_lock+0x8>)
 80066c6:	f7ff beda 	b.w	800647e <__retarget_lock_acquire_recursive>
 80066ca:	bf00      	nop
 80066cc:	200046d0 	.word	0x200046d0

080066d0 <__malloc_unlock>:
 80066d0:	4801      	ldr	r0, [pc, #4]	@ (80066d8 <__malloc_unlock+0x8>)
 80066d2:	f7ff bed5 	b.w	8006480 <__retarget_lock_release_recursive>
 80066d6:	bf00      	nop
 80066d8:	200046d0 	.word	0x200046d0

080066dc <__sfputc_r>:
 80066dc:	6893      	ldr	r3, [r2, #8]
 80066de:	3b01      	subs	r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	b410      	push	{r4}
 80066e4:	6093      	str	r3, [r2, #8]
 80066e6:	da08      	bge.n	80066fa <__sfputc_r+0x1e>
 80066e8:	6994      	ldr	r4, [r2, #24]
 80066ea:	42a3      	cmp	r3, r4
 80066ec:	db01      	blt.n	80066f2 <__sfputc_r+0x16>
 80066ee:	290a      	cmp	r1, #10
 80066f0:	d103      	bne.n	80066fa <__sfputc_r+0x1e>
 80066f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066f6:	f000 bad3 	b.w	8006ca0 <__swbuf_r>
 80066fa:	6813      	ldr	r3, [r2, #0]
 80066fc:	1c58      	adds	r0, r3, #1
 80066fe:	6010      	str	r0, [r2, #0]
 8006700:	7019      	strb	r1, [r3, #0]
 8006702:	4608      	mov	r0, r1
 8006704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006708:	4770      	bx	lr

0800670a <__sfputs_r>:
 800670a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670c:	4606      	mov	r6, r0
 800670e:	460f      	mov	r7, r1
 8006710:	4614      	mov	r4, r2
 8006712:	18d5      	adds	r5, r2, r3
 8006714:	42ac      	cmp	r4, r5
 8006716:	d101      	bne.n	800671c <__sfputs_r+0x12>
 8006718:	2000      	movs	r0, #0
 800671a:	e007      	b.n	800672c <__sfputs_r+0x22>
 800671c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006720:	463a      	mov	r2, r7
 8006722:	4630      	mov	r0, r6
 8006724:	f7ff ffda 	bl	80066dc <__sfputc_r>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d1f3      	bne.n	8006714 <__sfputs_r+0xa>
 800672c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006730 <_vfiprintf_r>:
 8006730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006734:	460d      	mov	r5, r1
 8006736:	b09d      	sub	sp, #116	@ 0x74
 8006738:	4614      	mov	r4, r2
 800673a:	4698      	mov	r8, r3
 800673c:	4606      	mov	r6, r0
 800673e:	b118      	cbz	r0, 8006748 <_vfiprintf_r+0x18>
 8006740:	6a03      	ldr	r3, [r0, #32]
 8006742:	b90b      	cbnz	r3, 8006748 <_vfiprintf_r+0x18>
 8006744:	f7ff fd40 	bl	80061c8 <__sinit>
 8006748:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800674a:	07d9      	lsls	r1, r3, #31
 800674c:	d405      	bmi.n	800675a <_vfiprintf_r+0x2a>
 800674e:	89ab      	ldrh	r3, [r5, #12]
 8006750:	059a      	lsls	r2, r3, #22
 8006752:	d402      	bmi.n	800675a <_vfiprintf_r+0x2a>
 8006754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006756:	f7ff fe92 	bl	800647e <__retarget_lock_acquire_recursive>
 800675a:	89ab      	ldrh	r3, [r5, #12]
 800675c:	071b      	lsls	r3, r3, #28
 800675e:	d501      	bpl.n	8006764 <_vfiprintf_r+0x34>
 8006760:	692b      	ldr	r3, [r5, #16]
 8006762:	b99b      	cbnz	r3, 800678c <_vfiprintf_r+0x5c>
 8006764:	4629      	mov	r1, r5
 8006766:	4630      	mov	r0, r6
 8006768:	f000 fad8 	bl	8006d1c <__swsetup_r>
 800676c:	b170      	cbz	r0, 800678c <_vfiprintf_r+0x5c>
 800676e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006770:	07dc      	lsls	r4, r3, #31
 8006772:	d504      	bpl.n	800677e <_vfiprintf_r+0x4e>
 8006774:	f04f 30ff 	mov.w	r0, #4294967295
 8006778:	b01d      	add	sp, #116	@ 0x74
 800677a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677e:	89ab      	ldrh	r3, [r5, #12]
 8006780:	0598      	lsls	r0, r3, #22
 8006782:	d4f7      	bmi.n	8006774 <_vfiprintf_r+0x44>
 8006784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006786:	f7ff fe7b 	bl	8006480 <__retarget_lock_release_recursive>
 800678a:	e7f3      	b.n	8006774 <_vfiprintf_r+0x44>
 800678c:	2300      	movs	r3, #0
 800678e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006790:	2320      	movs	r3, #32
 8006792:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006796:	f8cd 800c 	str.w	r8, [sp, #12]
 800679a:	2330      	movs	r3, #48	@ 0x30
 800679c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800694c <_vfiprintf_r+0x21c>
 80067a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067a4:	f04f 0901 	mov.w	r9, #1
 80067a8:	4623      	mov	r3, r4
 80067aa:	469a      	mov	sl, r3
 80067ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067b0:	b10a      	cbz	r2, 80067b6 <_vfiprintf_r+0x86>
 80067b2:	2a25      	cmp	r2, #37	@ 0x25
 80067b4:	d1f9      	bne.n	80067aa <_vfiprintf_r+0x7a>
 80067b6:	ebba 0b04 	subs.w	fp, sl, r4
 80067ba:	d00b      	beq.n	80067d4 <_vfiprintf_r+0xa4>
 80067bc:	465b      	mov	r3, fp
 80067be:	4622      	mov	r2, r4
 80067c0:	4629      	mov	r1, r5
 80067c2:	4630      	mov	r0, r6
 80067c4:	f7ff ffa1 	bl	800670a <__sfputs_r>
 80067c8:	3001      	adds	r0, #1
 80067ca:	f000 80a7 	beq.w	800691c <_vfiprintf_r+0x1ec>
 80067ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067d0:	445a      	add	r2, fp
 80067d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80067d4:	f89a 3000 	ldrb.w	r3, [sl]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 809f 	beq.w	800691c <_vfiprintf_r+0x1ec>
 80067de:	2300      	movs	r3, #0
 80067e0:	f04f 32ff 	mov.w	r2, #4294967295
 80067e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067e8:	f10a 0a01 	add.w	sl, sl, #1
 80067ec:	9304      	str	r3, [sp, #16]
 80067ee:	9307      	str	r3, [sp, #28]
 80067f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80067f6:	4654      	mov	r4, sl
 80067f8:	2205      	movs	r2, #5
 80067fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067fe:	4853      	ldr	r0, [pc, #332]	@ (800694c <_vfiprintf_r+0x21c>)
 8006800:	f7f9 fcf6 	bl	80001f0 <memchr>
 8006804:	9a04      	ldr	r2, [sp, #16]
 8006806:	b9d8      	cbnz	r0, 8006840 <_vfiprintf_r+0x110>
 8006808:	06d1      	lsls	r1, r2, #27
 800680a:	bf44      	itt	mi
 800680c:	2320      	movmi	r3, #32
 800680e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006812:	0713      	lsls	r3, r2, #28
 8006814:	bf44      	itt	mi
 8006816:	232b      	movmi	r3, #43	@ 0x2b
 8006818:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800681c:	f89a 3000 	ldrb.w	r3, [sl]
 8006820:	2b2a      	cmp	r3, #42	@ 0x2a
 8006822:	d015      	beq.n	8006850 <_vfiprintf_r+0x120>
 8006824:	9a07      	ldr	r2, [sp, #28]
 8006826:	4654      	mov	r4, sl
 8006828:	2000      	movs	r0, #0
 800682a:	f04f 0c0a 	mov.w	ip, #10
 800682e:	4621      	mov	r1, r4
 8006830:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006834:	3b30      	subs	r3, #48	@ 0x30
 8006836:	2b09      	cmp	r3, #9
 8006838:	d94b      	bls.n	80068d2 <_vfiprintf_r+0x1a2>
 800683a:	b1b0      	cbz	r0, 800686a <_vfiprintf_r+0x13a>
 800683c:	9207      	str	r2, [sp, #28]
 800683e:	e014      	b.n	800686a <_vfiprintf_r+0x13a>
 8006840:	eba0 0308 	sub.w	r3, r0, r8
 8006844:	fa09 f303 	lsl.w	r3, r9, r3
 8006848:	4313      	orrs	r3, r2
 800684a:	9304      	str	r3, [sp, #16]
 800684c:	46a2      	mov	sl, r4
 800684e:	e7d2      	b.n	80067f6 <_vfiprintf_r+0xc6>
 8006850:	9b03      	ldr	r3, [sp, #12]
 8006852:	1d19      	adds	r1, r3, #4
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	9103      	str	r1, [sp, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	bfbb      	ittet	lt
 800685c:	425b      	neglt	r3, r3
 800685e:	f042 0202 	orrlt.w	r2, r2, #2
 8006862:	9307      	strge	r3, [sp, #28]
 8006864:	9307      	strlt	r3, [sp, #28]
 8006866:	bfb8      	it	lt
 8006868:	9204      	strlt	r2, [sp, #16]
 800686a:	7823      	ldrb	r3, [r4, #0]
 800686c:	2b2e      	cmp	r3, #46	@ 0x2e
 800686e:	d10a      	bne.n	8006886 <_vfiprintf_r+0x156>
 8006870:	7863      	ldrb	r3, [r4, #1]
 8006872:	2b2a      	cmp	r3, #42	@ 0x2a
 8006874:	d132      	bne.n	80068dc <_vfiprintf_r+0x1ac>
 8006876:	9b03      	ldr	r3, [sp, #12]
 8006878:	1d1a      	adds	r2, r3, #4
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	9203      	str	r2, [sp, #12]
 800687e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006882:	3402      	adds	r4, #2
 8006884:	9305      	str	r3, [sp, #20]
 8006886:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800695c <_vfiprintf_r+0x22c>
 800688a:	7821      	ldrb	r1, [r4, #0]
 800688c:	2203      	movs	r2, #3
 800688e:	4650      	mov	r0, sl
 8006890:	f7f9 fcae 	bl	80001f0 <memchr>
 8006894:	b138      	cbz	r0, 80068a6 <_vfiprintf_r+0x176>
 8006896:	9b04      	ldr	r3, [sp, #16]
 8006898:	eba0 000a 	sub.w	r0, r0, sl
 800689c:	2240      	movs	r2, #64	@ 0x40
 800689e:	4082      	lsls	r2, r0
 80068a0:	4313      	orrs	r3, r2
 80068a2:	3401      	adds	r4, #1
 80068a4:	9304      	str	r3, [sp, #16]
 80068a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068aa:	4829      	ldr	r0, [pc, #164]	@ (8006950 <_vfiprintf_r+0x220>)
 80068ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068b0:	2206      	movs	r2, #6
 80068b2:	f7f9 fc9d 	bl	80001f0 <memchr>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	d03f      	beq.n	800693a <_vfiprintf_r+0x20a>
 80068ba:	4b26      	ldr	r3, [pc, #152]	@ (8006954 <_vfiprintf_r+0x224>)
 80068bc:	bb1b      	cbnz	r3, 8006906 <_vfiprintf_r+0x1d6>
 80068be:	9b03      	ldr	r3, [sp, #12]
 80068c0:	3307      	adds	r3, #7
 80068c2:	f023 0307 	bic.w	r3, r3, #7
 80068c6:	3308      	adds	r3, #8
 80068c8:	9303      	str	r3, [sp, #12]
 80068ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068cc:	443b      	add	r3, r7
 80068ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80068d0:	e76a      	b.n	80067a8 <_vfiprintf_r+0x78>
 80068d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80068d6:	460c      	mov	r4, r1
 80068d8:	2001      	movs	r0, #1
 80068da:	e7a8      	b.n	800682e <_vfiprintf_r+0xfe>
 80068dc:	2300      	movs	r3, #0
 80068de:	3401      	adds	r4, #1
 80068e0:	9305      	str	r3, [sp, #20]
 80068e2:	4619      	mov	r1, r3
 80068e4:	f04f 0c0a 	mov.w	ip, #10
 80068e8:	4620      	mov	r0, r4
 80068ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068ee:	3a30      	subs	r2, #48	@ 0x30
 80068f0:	2a09      	cmp	r2, #9
 80068f2:	d903      	bls.n	80068fc <_vfiprintf_r+0x1cc>
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0c6      	beq.n	8006886 <_vfiprintf_r+0x156>
 80068f8:	9105      	str	r1, [sp, #20]
 80068fa:	e7c4      	b.n	8006886 <_vfiprintf_r+0x156>
 80068fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006900:	4604      	mov	r4, r0
 8006902:	2301      	movs	r3, #1
 8006904:	e7f0      	b.n	80068e8 <_vfiprintf_r+0x1b8>
 8006906:	ab03      	add	r3, sp, #12
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	462a      	mov	r2, r5
 800690c:	4b12      	ldr	r3, [pc, #72]	@ (8006958 <_vfiprintf_r+0x228>)
 800690e:	a904      	add	r1, sp, #16
 8006910:	4630      	mov	r0, r6
 8006912:	f3af 8000 	nop.w
 8006916:	4607      	mov	r7, r0
 8006918:	1c78      	adds	r0, r7, #1
 800691a:	d1d6      	bne.n	80068ca <_vfiprintf_r+0x19a>
 800691c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800691e:	07d9      	lsls	r1, r3, #31
 8006920:	d405      	bmi.n	800692e <_vfiprintf_r+0x1fe>
 8006922:	89ab      	ldrh	r3, [r5, #12]
 8006924:	059a      	lsls	r2, r3, #22
 8006926:	d402      	bmi.n	800692e <_vfiprintf_r+0x1fe>
 8006928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800692a:	f7ff fda9 	bl	8006480 <__retarget_lock_release_recursive>
 800692e:	89ab      	ldrh	r3, [r5, #12]
 8006930:	065b      	lsls	r3, r3, #25
 8006932:	f53f af1f 	bmi.w	8006774 <_vfiprintf_r+0x44>
 8006936:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006938:	e71e      	b.n	8006778 <_vfiprintf_r+0x48>
 800693a:	ab03      	add	r3, sp, #12
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	462a      	mov	r2, r5
 8006940:	4b05      	ldr	r3, [pc, #20]	@ (8006958 <_vfiprintf_r+0x228>)
 8006942:	a904      	add	r1, sp, #16
 8006944:	4630      	mov	r0, r6
 8006946:	f000 f879 	bl	8006a3c <_printf_i>
 800694a:	e7e4      	b.n	8006916 <_vfiprintf_r+0x1e6>
 800694c:	0800719f 	.word	0x0800719f
 8006950:	080071a9 	.word	0x080071a9
 8006954:	00000000 	.word	0x00000000
 8006958:	0800670b 	.word	0x0800670b
 800695c:	080071a5 	.word	0x080071a5

08006960 <_printf_common>:
 8006960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006964:	4616      	mov	r6, r2
 8006966:	4698      	mov	r8, r3
 8006968:	688a      	ldr	r2, [r1, #8]
 800696a:	690b      	ldr	r3, [r1, #16]
 800696c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006970:	4293      	cmp	r3, r2
 8006972:	bfb8      	it	lt
 8006974:	4613      	movlt	r3, r2
 8006976:	6033      	str	r3, [r6, #0]
 8006978:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800697c:	4607      	mov	r7, r0
 800697e:	460c      	mov	r4, r1
 8006980:	b10a      	cbz	r2, 8006986 <_printf_common+0x26>
 8006982:	3301      	adds	r3, #1
 8006984:	6033      	str	r3, [r6, #0]
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	0699      	lsls	r1, r3, #26
 800698a:	bf42      	ittt	mi
 800698c:	6833      	ldrmi	r3, [r6, #0]
 800698e:	3302      	addmi	r3, #2
 8006990:	6033      	strmi	r3, [r6, #0]
 8006992:	6825      	ldr	r5, [r4, #0]
 8006994:	f015 0506 	ands.w	r5, r5, #6
 8006998:	d106      	bne.n	80069a8 <_printf_common+0x48>
 800699a:	f104 0a19 	add.w	sl, r4, #25
 800699e:	68e3      	ldr	r3, [r4, #12]
 80069a0:	6832      	ldr	r2, [r6, #0]
 80069a2:	1a9b      	subs	r3, r3, r2
 80069a4:	42ab      	cmp	r3, r5
 80069a6:	dc26      	bgt.n	80069f6 <_printf_common+0x96>
 80069a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069ac:	6822      	ldr	r2, [r4, #0]
 80069ae:	3b00      	subs	r3, #0
 80069b0:	bf18      	it	ne
 80069b2:	2301      	movne	r3, #1
 80069b4:	0692      	lsls	r2, r2, #26
 80069b6:	d42b      	bmi.n	8006a10 <_printf_common+0xb0>
 80069b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069bc:	4641      	mov	r1, r8
 80069be:	4638      	mov	r0, r7
 80069c0:	47c8      	blx	r9
 80069c2:	3001      	adds	r0, #1
 80069c4:	d01e      	beq.n	8006a04 <_printf_common+0xa4>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	6922      	ldr	r2, [r4, #16]
 80069ca:	f003 0306 	and.w	r3, r3, #6
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	bf02      	ittt	eq
 80069d2:	68e5      	ldreq	r5, [r4, #12]
 80069d4:	6833      	ldreq	r3, [r6, #0]
 80069d6:	1aed      	subeq	r5, r5, r3
 80069d8:	68a3      	ldr	r3, [r4, #8]
 80069da:	bf0c      	ite	eq
 80069dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069e0:	2500      	movne	r5, #0
 80069e2:	4293      	cmp	r3, r2
 80069e4:	bfc4      	itt	gt
 80069e6:	1a9b      	subgt	r3, r3, r2
 80069e8:	18ed      	addgt	r5, r5, r3
 80069ea:	2600      	movs	r6, #0
 80069ec:	341a      	adds	r4, #26
 80069ee:	42b5      	cmp	r5, r6
 80069f0:	d11a      	bne.n	8006a28 <_printf_common+0xc8>
 80069f2:	2000      	movs	r0, #0
 80069f4:	e008      	b.n	8006a08 <_printf_common+0xa8>
 80069f6:	2301      	movs	r3, #1
 80069f8:	4652      	mov	r2, sl
 80069fa:	4641      	mov	r1, r8
 80069fc:	4638      	mov	r0, r7
 80069fe:	47c8      	blx	r9
 8006a00:	3001      	adds	r0, #1
 8006a02:	d103      	bne.n	8006a0c <_printf_common+0xac>
 8006a04:	f04f 30ff 	mov.w	r0, #4294967295
 8006a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0c:	3501      	adds	r5, #1
 8006a0e:	e7c6      	b.n	800699e <_printf_common+0x3e>
 8006a10:	18e1      	adds	r1, r4, r3
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	2030      	movs	r0, #48	@ 0x30
 8006a16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a1a:	4422      	add	r2, r4
 8006a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a24:	3302      	adds	r3, #2
 8006a26:	e7c7      	b.n	80069b8 <_printf_common+0x58>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	4622      	mov	r2, r4
 8006a2c:	4641      	mov	r1, r8
 8006a2e:	4638      	mov	r0, r7
 8006a30:	47c8      	blx	r9
 8006a32:	3001      	adds	r0, #1
 8006a34:	d0e6      	beq.n	8006a04 <_printf_common+0xa4>
 8006a36:	3601      	adds	r6, #1
 8006a38:	e7d9      	b.n	80069ee <_printf_common+0x8e>
	...

08006a3c <_printf_i>:
 8006a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a40:	7e0f      	ldrb	r7, [r1, #24]
 8006a42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a44:	2f78      	cmp	r7, #120	@ 0x78
 8006a46:	4691      	mov	r9, r2
 8006a48:	4680      	mov	r8, r0
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	469a      	mov	sl, r3
 8006a4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a52:	d807      	bhi.n	8006a64 <_printf_i+0x28>
 8006a54:	2f62      	cmp	r7, #98	@ 0x62
 8006a56:	d80a      	bhi.n	8006a6e <_printf_i+0x32>
 8006a58:	2f00      	cmp	r7, #0
 8006a5a:	f000 80d2 	beq.w	8006c02 <_printf_i+0x1c6>
 8006a5e:	2f58      	cmp	r7, #88	@ 0x58
 8006a60:	f000 80b9 	beq.w	8006bd6 <_printf_i+0x19a>
 8006a64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a6c:	e03a      	b.n	8006ae4 <_printf_i+0xa8>
 8006a6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a72:	2b15      	cmp	r3, #21
 8006a74:	d8f6      	bhi.n	8006a64 <_printf_i+0x28>
 8006a76:	a101      	add	r1, pc, #4	@ (adr r1, 8006a7c <_printf_i+0x40>)
 8006a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a7c:	08006ad5 	.word	0x08006ad5
 8006a80:	08006ae9 	.word	0x08006ae9
 8006a84:	08006a65 	.word	0x08006a65
 8006a88:	08006a65 	.word	0x08006a65
 8006a8c:	08006a65 	.word	0x08006a65
 8006a90:	08006a65 	.word	0x08006a65
 8006a94:	08006ae9 	.word	0x08006ae9
 8006a98:	08006a65 	.word	0x08006a65
 8006a9c:	08006a65 	.word	0x08006a65
 8006aa0:	08006a65 	.word	0x08006a65
 8006aa4:	08006a65 	.word	0x08006a65
 8006aa8:	08006be9 	.word	0x08006be9
 8006aac:	08006b13 	.word	0x08006b13
 8006ab0:	08006ba3 	.word	0x08006ba3
 8006ab4:	08006a65 	.word	0x08006a65
 8006ab8:	08006a65 	.word	0x08006a65
 8006abc:	08006c0b 	.word	0x08006c0b
 8006ac0:	08006a65 	.word	0x08006a65
 8006ac4:	08006b13 	.word	0x08006b13
 8006ac8:	08006a65 	.word	0x08006a65
 8006acc:	08006a65 	.word	0x08006a65
 8006ad0:	08006bab 	.word	0x08006bab
 8006ad4:	6833      	ldr	r3, [r6, #0]
 8006ad6:	1d1a      	adds	r2, r3, #4
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6032      	str	r2, [r6, #0]
 8006adc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ae0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e09d      	b.n	8006c24 <_printf_i+0x1e8>
 8006ae8:	6833      	ldr	r3, [r6, #0]
 8006aea:	6820      	ldr	r0, [r4, #0]
 8006aec:	1d19      	adds	r1, r3, #4
 8006aee:	6031      	str	r1, [r6, #0]
 8006af0:	0606      	lsls	r6, r0, #24
 8006af2:	d501      	bpl.n	8006af8 <_printf_i+0xbc>
 8006af4:	681d      	ldr	r5, [r3, #0]
 8006af6:	e003      	b.n	8006b00 <_printf_i+0xc4>
 8006af8:	0645      	lsls	r5, r0, #25
 8006afa:	d5fb      	bpl.n	8006af4 <_printf_i+0xb8>
 8006afc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b00:	2d00      	cmp	r5, #0
 8006b02:	da03      	bge.n	8006b0c <_printf_i+0xd0>
 8006b04:	232d      	movs	r3, #45	@ 0x2d
 8006b06:	426d      	negs	r5, r5
 8006b08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b0c:	4859      	ldr	r0, [pc, #356]	@ (8006c74 <_printf_i+0x238>)
 8006b0e:	230a      	movs	r3, #10
 8006b10:	e011      	b.n	8006b36 <_printf_i+0xfa>
 8006b12:	6821      	ldr	r1, [r4, #0]
 8006b14:	6833      	ldr	r3, [r6, #0]
 8006b16:	0608      	lsls	r0, r1, #24
 8006b18:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b1c:	d402      	bmi.n	8006b24 <_printf_i+0xe8>
 8006b1e:	0649      	lsls	r1, r1, #25
 8006b20:	bf48      	it	mi
 8006b22:	b2ad      	uxthmi	r5, r5
 8006b24:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b26:	4853      	ldr	r0, [pc, #332]	@ (8006c74 <_printf_i+0x238>)
 8006b28:	6033      	str	r3, [r6, #0]
 8006b2a:	bf14      	ite	ne
 8006b2c:	230a      	movne	r3, #10
 8006b2e:	2308      	moveq	r3, #8
 8006b30:	2100      	movs	r1, #0
 8006b32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b36:	6866      	ldr	r6, [r4, #4]
 8006b38:	60a6      	str	r6, [r4, #8]
 8006b3a:	2e00      	cmp	r6, #0
 8006b3c:	bfa2      	ittt	ge
 8006b3e:	6821      	ldrge	r1, [r4, #0]
 8006b40:	f021 0104 	bicge.w	r1, r1, #4
 8006b44:	6021      	strge	r1, [r4, #0]
 8006b46:	b90d      	cbnz	r5, 8006b4c <_printf_i+0x110>
 8006b48:	2e00      	cmp	r6, #0
 8006b4a:	d04b      	beq.n	8006be4 <_printf_i+0x1a8>
 8006b4c:	4616      	mov	r6, r2
 8006b4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b52:	fb03 5711 	mls	r7, r3, r1, r5
 8006b56:	5dc7      	ldrb	r7, [r0, r7]
 8006b58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b5c:	462f      	mov	r7, r5
 8006b5e:	42bb      	cmp	r3, r7
 8006b60:	460d      	mov	r5, r1
 8006b62:	d9f4      	bls.n	8006b4e <_printf_i+0x112>
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d10b      	bne.n	8006b80 <_printf_i+0x144>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	07df      	lsls	r7, r3, #31
 8006b6c:	d508      	bpl.n	8006b80 <_printf_i+0x144>
 8006b6e:	6923      	ldr	r3, [r4, #16]
 8006b70:	6861      	ldr	r1, [r4, #4]
 8006b72:	4299      	cmp	r1, r3
 8006b74:	bfde      	ittt	le
 8006b76:	2330      	movle	r3, #48	@ 0x30
 8006b78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b80:	1b92      	subs	r2, r2, r6
 8006b82:	6122      	str	r2, [r4, #16]
 8006b84:	f8cd a000 	str.w	sl, [sp]
 8006b88:	464b      	mov	r3, r9
 8006b8a:	aa03      	add	r2, sp, #12
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	4640      	mov	r0, r8
 8006b90:	f7ff fee6 	bl	8006960 <_printf_common>
 8006b94:	3001      	adds	r0, #1
 8006b96:	d14a      	bne.n	8006c2e <_printf_i+0x1f2>
 8006b98:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9c:	b004      	add	sp, #16
 8006b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	f043 0320 	orr.w	r3, r3, #32
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	4833      	ldr	r0, [pc, #204]	@ (8006c78 <_printf_i+0x23c>)
 8006bac:	2778      	movs	r7, #120	@ 0x78
 8006bae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	6831      	ldr	r1, [r6, #0]
 8006bb6:	061f      	lsls	r7, r3, #24
 8006bb8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bbc:	d402      	bmi.n	8006bc4 <_printf_i+0x188>
 8006bbe:	065f      	lsls	r7, r3, #25
 8006bc0:	bf48      	it	mi
 8006bc2:	b2ad      	uxthmi	r5, r5
 8006bc4:	6031      	str	r1, [r6, #0]
 8006bc6:	07d9      	lsls	r1, r3, #31
 8006bc8:	bf44      	itt	mi
 8006bca:	f043 0320 	orrmi.w	r3, r3, #32
 8006bce:	6023      	strmi	r3, [r4, #0]
 8006bd0:	b11d      	cbz	r5, 8006bda <_printf_i+0x19e>
 8006bd2:	2310      	movs	r3, #16
 8006bd4:	e7ac      	b.n	8006b30 <_printf_i+0xf4>
 8006bd6:	4827      	ldr	r0, [pc, #156]	@ (8006c74 <_printf_i+0x238>)
 8006bd8:	e7e9      	b.n	8006bae <_printf_i+0x172>
 8006bda:	6823      	ldr	r3, [r4, #0]
 8006bdc:	f023 0320 	bic.w	r3, r3, #32
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	e7f6      	b.n	8006bd2 <_printf_i+0x196>
 8006be4:	4616      	mov	r6, r2
 8006be6:	e7bd      	b.n	8006b64 <_printf_i+0x128>
 8006be8:	6833      	ldr	r3, [r6, #0]
 8006bea:	6825      	ldr	r5, [r4, #0]
 8006bec:	6961      	ldr	r1, [r4, #20]
 8006bee:	1d18      	adds	r0, r3, #4
 8006bf0:	6030      	str	r0, [r6, #0]
 8006bf2:	062e      	lsls	r6, r5, #24
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	d501      	bpl.n	8006bfc <_printf_i+0x1c0>
 8006bf8:	6019      	str	r1, [r3, #0]
 8006bfa:	e002      	b.n	8006c02 <_printf_i+0x1c6>
 8006bfc:	0668      	lsls	r0, r5, #25
 8006bfe:	d5fb      	bpl.n	8006bf8 <_printf_i+0x1bc>
 8006c00:	8019      	strh	r1, [r3, #0]
 8006c02:	2300      	movs	r3, #0
 8006c04:	6123      	str	r3, [r4, #16]
 8006c06:	4616      	mov	r6, r2
 8006c08:	e7bc      	b.n	8006b84 <_printf_i+0x148>
 8006c0a:	6833      	ldr	r3, [r6, #0]
 8006c0c:	1d1a      	adds	r2, r3, #4
 8006c0e:	6032      	str	r2, [r6, #0]
 8006c10:	681e      	ldr	r6, [r3, #0]
 8006c12:	6862      	ldr	r2, [r4, #4]
 8006c14:	2100      	movs	r1, #0
 8006c16:	4630      	mov	r0, r6
 8006c18:	f7f9 faea 	bl	80001f0 <memchr>
 8006c1c:	b108      	cbz	r0, 8006c22 <_printf_i+0x1e6>
 8006c1e:	1b80      	subs	r0, r0, r6
 8006c20:	6060      	str	r0, [r4, #4]
 8006c22:	6863      	ldr	r3, [r4, #4]
 8006c24:	6123      	str	r3, [r4, #16]
 8006c26:	2300      	movs	r3, #0
 8006c28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c2c:	e7aa      	b.n	8006b84 <_printf_i+0x148>
 8006c2e:	6923      	ldr	r3, [r4, #16]
 8006c30:	4632      	mov	r2, r6
 8006c32:	4649      	mov	r1, r9
 8006c34:	4640      	mov	r0, r8
 8006c36:	47d0      	blx	sl
 8006c38:	3001      	adds	r0, #1
 8006c3a:	d0ad      	beq.n	8006b98 <_printf_i+0x15c>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	079b      	lsls	r3, r3, #30
 8006c40:	d413      	bmi.n	8006c6a <_printf_i+0x22e>
 8006c42:	68e0      	ldr	r0, [r4, #12]
 8006c44:	9b03      	ldr	r3, [sp, #12]
 8006c46:	4298      	cmp	r0, r3
 8006c48:	bfb8      	it	lt
 8006c4a:	4618      	movlt	r0, r3
 8006c4c:	e7a6      	b.n	8006b9c <_printf_i+0x160>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	4632      	mov	r2, r6
 8006c52:	4649      	mov	r1, r9
 8006c54:	4640      	mov	r0, r8
 8006c56:	47d0      	blx	sl
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d09d      	beq.n	8006b98 <_printf_i+0x15c>
 8006c5c:	3501      	adds	r5, #1
 8006c5e:	68e3      	ldr	r3, [r4, #12]
 8006c60:	9903      	ldr	r1, [sp, #12]
 8006c62:	1a5b      	subs	r3, r3, r1
 8006c64:	42ab      	cmp	r3, r5
 8006c66:	dcf2      	bgt.n	8006c4e <_printf_i+0x212>
 8006c68:	e7eb      	b.n	8006c42 <_printf_i+0x206>
 8006c6a:	2500      	movs	r5, #0
 8006c6c:	f104 0619 	add.w	r6, r4, #25
 8006c70:	e7f5      	b.n	8006c5e <_printf_i+0x222>
 8006c72:	bf00      	nop
 8006c74:	080071b0 	.word	0x080071b0
 8006c78:	080071c1 	.word	0x080071c1

08006c7c <fiprintf>:
 8006c7c:	b40e      	push	{r1, r2, r3}
 8006c7e:	b503      	push	{r0, r1, lr}
 8006c80:	4601      	mov	r1, r0
 8006c82:	ab03      	add	r3, sp, #12
 8006c84:	4805      	ldr	r0, [pc, #20]	@ (8006c9c <fiprintf+0x20>)
 8006c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c8a:	6800      	ldr	r0, [r0, #0]
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	f7ff fd4f 	bl	8006730 <_vfiprintf_r>
 8006c92:	b002      	add	sp, #8
 8006c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c98:	b003      	add	sp, #12
 8006c9a:	4770      	bx	lr
 8006c9c:	2000001c 	.word	0x2000001c

08006ca0 <__swbuf_r>:
 8006ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca2:	460e      	mov	r6, r1
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	b118      	cbz	r0, 8006cb2 <__swbuf_r+0x12>
 8006caa:	6a03      	ldr	r3, [r0, #32]
 8006cac:	b90b      	cbnz	r3, 8006cb2 <__swbuf_r+0x12>
 8006cae:	f7ff fa8b 	bl	80061c8 <__sinit>
 8006cb2:	69a3      	ldr	r3, [r4, #24]
 8006cb4:	60a3      	str	r3, [r4, #8]
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	071a      	lsls	r2, r3, #28
 8006cba:	d501      	bpl.n	8006cc0 <__swbuf_r+0x20>
 8006cbc:	6923      	ldr	r3, [r4, #16]
 8006cbe:	b943      	cbnz	r3, 8006cd2 <__swbuf_r+0x32>
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 f82a 	bl	8006d1c <__swsetup_r>
 8006cc8:	b118      	cbz	r0, 8006cd2 <__swbuf_r+0x32>
 8006cca:	f04f 37ff 	mov.w	r7, #4294967295
 8006cce:	4638      	mov	r0, r7
 8006cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	6922      	ldr	r2, [r4, #16]
 8006cd6:	1a98      	subs	r0, r3, r2
 8006cd8:	6963      	ldr	r3, [r4, #20]
 8006cda:	b2f6      	uxtb	r6, r6
 8006cdc:	4283      	cmp	r3, r0
 8006cde:	4637      	mov	r7, r6
 8006ce0:	dc05      	bgt.n	8006cee <__swbuf_r+0x4e>
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	f7ff f9a7 	bl	8006038 <_fflush_r>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d1ed      	bne.n	8006cca <__swbuf_r+0x2a>
 8006cee:	68a3      	ldr	r3, [r4, #8]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	60a3      	str	r3, [r4, #8]
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	6022      	str	r2, [r4, #0]
 8006cfa:	701e      	strb	r6, [r3, #0]
 8006cfc:	6962      	ldr	r2, [r4, #20]
 8006cfe:	1c43      	adds	r3, r0, #1
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d004      	beq.n	8006d0e <__swbuf_r+0x6e>
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	07db      	lsls	r3, r3, #31
 8006d08:	d5e1      	bpl.n	8006cce <__swbuf_r+0x2e>
 8006d0a:	2e0a      	cmp	r6, #10
 8006d0c:	d1df      	bne.n	8006cce <__swbuf_r+0x2e>
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4628      	mov	r0, r5
 8006d12:	f7ff f991 	bl	8006038 <_fflush_r>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d0d9      	beq.n	8006cce <__swbuf_r+0x2e>
 8006d1a:	e7d6      	b.n	8006cca <__swbuf_r+0x2a>

08006d1c <__swsetup_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4b29      	ldr	r3, [pc, #164]	@ (8006dc4 <__swsetup_r+0xa8>)
 8006d20:	4605      	mov	r5, r0
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	460c      	mov	r4, r1
 8006d26:	b118      	cbz	r0, 8006d30 <__swsetup_r+0x14>
 8006d28:	6a03      	ldr	r3, [r0, #32]
 8006d2a:	b90b      	cbnz	r3, 8006d30 <__swsetup_r+0x14>
 8006d2c:	f7ff fa4c 	bl	80061c8 <__sinit>
 8006d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d34:	0719      	lsls	r1, r3, #28
 8006d36:	d422      	bmi.n	8006d7e <__swsetup_r+0x62>
 8006d38:	06da      	lsls	r2, r3, #27
 8006d3a:	d407      	bmi.n	8006d4c <__swsetup_r+0x30>
 8006d3c:	2209      	movs	r2, #9
 8006d3e:	602a      	str	r2, [r5, #0]
 8006d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d44:	81a3      	strh	r3, [r4, #12]
 8006d46:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4a:	e033      	b.n	8006db4 <__swsetup_r+0x98>
 8006d4c:	0758      	lsls	r0, r3, #29
 8006d4e:	d512      	bpl.n	8006d76 <__swsetup_r+0x5a>
 8006d50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d52:	b141      	cbz	r1, 8006d66 <__swsetup_r+0x4a>
 8006d54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d58:	4299      	cmp	r1, r3
 8006d5a:	d002      	beq.n	8006d62 <__swsetup_r+0x46>
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f7ff fbbd 	bl	80064dc <_free_r>
 8006d62:	2300      	movs	r3, #0
 8006d64:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	2300      	movs	r3, #0
 8006d70:	6063      	str	r3, [r4, #4]
 8006d72:	6923      	ldr	r3, [r4, #16]
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	f043 0308 	orr.w	r3, r3, #8
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	6923      	ldr	r3, [r4, #16]
 8006d80:	b94b      	cbnz	r3, 8006d96 <__swsetup_r+0x7a>
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d8c:	d003      	beq.n	8006d96 <__swsetup_r+0x7a>
 8006d8e:	4621      	mov	r1, r4
 8006d90:	4628      	mov	r0, r5
 8006d92:	f000 f856 	bl	8006e42 <__smakebuf_r>
 8006d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9a:	f013 0201 	ands.w	r2, r3, #1
 8006d9e:	d00a      	beq.n	8006db6 <__swsetup_r+0x9a>
 8006da0:	2200      	movs	r2, #0
 8006da2:	60a2      	str	r2, [r4, #8]
 8006da4:	6962      	ldr	r2, [r4, #20]
 8006da6:	4252      	negs	r2, r2
 8006da8:	61a2      	str	r2, [r4, #24]
 8006daa:	6922      	ldr	r2, [r4, #16]
 8006dac:	b942      	cbnz	r2, 8006dc0 <__swsetup_r+0xa4>
 8006dae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006db2:	d1c5      	bne.n	8006d40 <__swsetup_r+0x24>
 8006db4:	bd38      	pop	{r3, r4, r5, pc}
 8006db6:	0799      	lsls	r1, r3, #30
 8006db8:	bf58      	it	pl
 8006dba:	6962      	ldrpl	r2, [r4, #20]
 8006dbc:	60a2      	str	r2, [r4, #8]
 8006dbe:	e7f4      	b.n	8006daa <__swsetup_r+0x8e>
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	e7f7      	b.n	8006db4 <__swsetup_r+0x98>
 8006dc4:	2000001c 	.word	0x2000001c

08006dc8 <_sbrk_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4d06      	ldr	r5, [pc, #24]	@ (8006de4 <_sbrk_r+0x1c>)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	4604      	mov	r4, r0
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	602b      	str	r3, [r5, #0]
 8006dd4:	f7fa f974 	bl	80010c0 <_sbrk>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_sbrk_r+0x1a>
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_sbrk_r+0x1a>
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	200046cc 	.word	0x200046cc

08006de8 <abort>:
 8006de8:	b508      	push	{r3, lr}
 8006dea:	2006      	movs	r0, #6
 8006dec:	f000 f88e 	bl	8006f0c <raise>
 8006df0:	2001      	movs	r0, #1
 8006df2:	f7fa f8ed 	bl	8000fd0 <_exit>

08006df6 <__swhatbuf_r>:
 8006df6:	b570      	push	{r4, r5, r6, lr}
 8006df8:	460c      	mov	r4, r1
 8006dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	b096      	sub	sp, #88	@ 0x58
 8006e02:	4615      	mov	r5, r2
 8006e04:	461e      	mov	r6, r3
 8006e06:	da0d      	bge.n	8006e24 <__swhatbuf_r+0x2e>
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e0e:	f04f 0100 	mov.w	r1, #0
 8006e12:	bf14      	ite	ne
 8006e14:	2340      	movne	r3, #64	@ 0x40
 8006e16:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	6031      	str	r1, [r6, #0]
 8006e1e:	602b      	str	r3, [r5, #0]
 8006e20:	b016      	add	sp, #88	@ 0x58
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
 8006e24:	466a      	mov	r2, sp
 8006e26:	f000 f879 	bl	8006f1c <_fstat_r>
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	dbec      	blt.n	8006e08 <__swhatbuf_r+0x12>
 8006e2e:	9901      	ldr	r1, [sp, #4]
 8006e30:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e34:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e38:	4259      	negs	r1, r3
 8006e3a:	4159      	adcs	r1, r3
 8006e3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e40:	e7eb      	b.n	8006e1a <__swhatbuf_r+0x24>

08006e42 <__smakebuf_r>:
 8006e42:	898b      	ldrh	r3, [r1, #12]
 8006e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e46:	079d      	lsls	r5, r3, #30
 8006e48:	4606      	mov	r6, r0
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	d507      	bpl.n	8006e5e <__smakebuf_r+0x1c>
 8006e4e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e52:	6023      	str	r3, [r4, #0]
 8006e54:	6123      	str	r3, [r4, #16]
 8006e56:	2301      	movs	r3, #1
 8006e58:	6163      	str	r3, [r4, #20]
 8006e5a:	b003      	add	sp, #12
 8006e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e5e:	ab01      	add	r3, sp, #4
 8006e60:	466a      	mov	r2, sp
 8006e62:	f7ff ffc8 	bl	8006df6 <__swhatbuf_r>
 8006e66:	9f00      	ldr	r7, [sp, #0]
 8006e68:	4605      	mov	r5, r0
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	f7ff fba9 	bl	80065c4 <_malloc_r>
 8006e72:	b948      	cbnz	r0, 8006e88 <__smakebuf_r+0x46>
 8006e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e78:	059a      	lsls	r2, r3, #22
 8006e7a:	d4ee      	bmi.n	8006e5a <__smakebuf_r+0x18>
 8006e7c:	f023 0303 	bic.w	r3, r3, #3
 8006e80:	f043 0302 	orr.w	r3, r3, #2
 8006e84:	81a3      	strh	r3, [r4, #12]
 8006e86:	e7e2      	b.n	8006e4e <__smakebuf_r+0xc>
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	6020      	str	r0, [r4, #0]
 8006e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e90:	81a3      	strh	r3, [r4, #12]
 8006e92:	9b01      	ldr	r3, [sp, #4]
 8006e94:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006e98:	b15b      	cbz	r3, 8006eb2 <__smakebuf_r+0x70>
 8006e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f000 f84e 	bl	8006f40 <_isatty_r>
 8006ea4:	b128      	cbz	r0, 8006eb2 <__smakebuf_r+0x70>
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	f023 0303 	bic.w	r3, r3, #3
 8006eac:	f043 0301 	orr.w	r3, r3, #1
 8006eb0:	81a3      	strh	r3, [r4, #12]
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	431d      	orrs	r5, r3
 8006eb6:	81a5      	strh	r5, [r4, #12]
 8006eb8:	e7cf      	b.n	8006e5a <__smakebuf_r+0x18>

08006eba <_raise_r>:
 8006eba:	291f      	cmp	r1, #31
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	d904      	bls.n	8006ece <_raise_r+0x14>
 8006ec4:	2316      	movs	r3, #22
 8006ec6:	6003      	str	r3, [r0, #0]
 8006ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ecc:	bd38      	pop	{r3, r4, r5, pc}
 8006ece:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006ed0:	b112      	cbz	r2, 8006ed8 <_raise_r+0x1e>
 8006ed2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ed6:	b94b      	cbnz	r3, 8006eec <_raise_r+0x32>
 8006ed8:	4628      	mov	r0, r5
 8006eda:	f000 f853 	bl	8006f84 <_getpid_r>
 8006ede:	4622      	mov	r2, r4
 8006ee0:	4601      	mov	r1, r0
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ee8:	f000 b83a 	b.w	8006f60 <_kill_r>
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d00a      	beq.n	8006f06 <_raise_r+0x4c>
 8006ef0:	1c59      	adds	r1, r3, #1
 8006ef2:	d103      	bne.n	8006efc <_raise_r+0x42>
 8006ef4:	2316      	movs	r3, #22
 8006ef6:	6003      	str	r3, [r0, #0]
 8006ef8:	2001      	movs	r0, #1
 8006efa:	e7e7      	b.n	8006ecc <_raise_r+0x12>
 8006efc:	2100      	movs	r1, #0
 8006efe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006f02:	4620      	mov	r0, r4
 8006f04:	4798      	blx	r3
 8006f06:	2000      	movs	r0, #0
 8006f08:	e7e0      	b.n	8006ecc <_raise_r+0x12>
	...

08006f0c <raise>:
 8006f0c:	4b02      	ldr	r3, [pc, #8]	@ (8006f18 <raise+0xc>)
 8006f0e:	4601      	mov	r1, r0
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	f7ff bfd2 	b.w	8006eba <_raise_r>
 8006f16:	bf00      	nop
 8006f18:	2000001c 	.word	0x2000001c

08006f1c <_fstat_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4d07      	ldr	r5, [pc, #28]	@ (8006f3c <_fstat_r+0x20>)
 8006f20:	2300      	movs	r3, #0
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	4611      	mov	r1, r2
 8006f28:	602b      	str	r3, [r5, #0]
 8006f2a:	f7fa f8a1 	bl	8001070 <_fstat>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	d102      	bne.n	8006f38 <_fstat_r+0x1c>
 8006f32:	682b      	ldr	r3, [r5, #0]
 8006f34:	b103      	cbz	r3, 8006f38 <_fstat_r+0x1c>
 8006f36:	6023      	str	r3, [r4, #0]
 8006f38:	bd38      	pop	{r3, r4, r5, pc}
 8006f3a:	bf00      	nop
 8006f3c:	200046cc 	.word	0x200046cc

08006f40 <_isatty_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4d06      	ldr	r5, [pc, #24]	@ (8006f5c <_isatty_r+0x1c>)
 8006f44:	2300      	movs	r3, #0
 8006f46:	4604      	mov	r4, r0
 8006f48:	4608      	mov	r0, r1
 8006f4a:	602b      	str	r3, [r5, #0]
 8006f4c:	f7fa f8a0 	bl	8001090 <_isatty>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_isatty_r+0x1a>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_isatty_r+0x1a>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	200046cc 	.word	0x200046cc

08006f60 <_kill_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4d07      	ldr	r5, [pc, #28]	@ (8006f80 <_kill_r+0x20>)
 8006f64:	2300      	movs	r3, #0
 8006f66:	4604      	mov	r4, r0
 8006f68:	4608      	mov	r0, r1
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	602b      	str	r3, [r5, #0]
 8006f6e:	f7fa f81f 	bl	8000fb0 <_kill>
 8006f72:	1c43      	adds	r3, r0, #1
 8006f74:	d102      	bne.n	8006f7c <_kill_r+0x1c>
 8006f76:	682b      	ldr	r3, [r5, #0]
 8006f78:	b103      	cbz	r3, 8006f7c <_kill_r+0x1c>
 8006f7a:	6023      	str	r3, [r4, #0]
 8006f7c:	bd38      	pop	{r3, r4, r5, pc}
 8006f7e:	bf00      	nop
 8006f80:	200046cc 	.word	0x200046cc

08006f84 <_getpid_r>:
 8006f84:	f7fa b80c 	b.w	8000fa0 <_getpid>

08006f88 <_init>:
 8006f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8a:	bf00      	nop
 8006f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8e:	bc08      	pop	{r3}
 8006f90:	469e      	mov	lr, r3
 8006f92:	4770      	bx	lr

08006f94 <_fini>:
 8006f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f96:	bf00      	nop
 8006f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9a:	bc08      	pop	{r3}
 8006f9c:	469e      	mov	lr, r3
 8006f9e:	4770      	bx	lr
