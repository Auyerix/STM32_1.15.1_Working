
LWIP_TCP_SERVER_CLIENT_NETCONN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017674  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037ec  08017824  08017824  00018824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b010  0801b010  0001d08c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b010  0801b010  0001c010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b018  0801b018  0001d08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b018  0801b018  0001c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b01c  0801b01c  0001c01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0801b020  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001d08c  2**0
                  CONTENTS
 10 .bss          0000f4d0  2000008c  2000008c  0001d08c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000f55c  2000f55c  0001d08c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001d08c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032289  00000000  00000000  0001d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007d08  00000000  00000000  0004f345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002560  00000000  00000000  00057050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d9b  00000000  00000000  000595b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012b42  00000000  00000000  0005b34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00039bf0  00000000  00000000  0006de8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102212  00000000  00000000  000a7a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a9c8f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a35c  00000000  00000000  001a9cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  001b4030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801780c 	.word	0x0801780c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	0801780c 	.word	0x0801780c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f001 f802 	bl	800159c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f818 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f8aa 	bl	80006f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005a0:	f000 f87e 	bl	80006a0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a4:	f004 ff36 	bl	8005414 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a8:	4a05      	ldr	r2, [pc, #20]	@ (80005c0 <main+0x30>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <main+0x34>)
 80005ae:	f004 ff90 	bl	80054d2 <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a04      	ldr	r2, [pc, #16]	@ (80005c8 <main+0x38>)
 80005b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005b8:	f004 ff50 	bl	800545c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <main+0x2c>
 80005c0:	0801adc4 	.word	0x0801adc4
 80005c4:	080008bd 	.word	0x080008bd
 80005c8:	200000f0 	.word	0x200000f0

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	@ 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f016 fa1b 	bl	8016a16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	@ (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	@ (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a21      	ldr	r2, [pc, #132]	@ (800069c <SystemClock_Config+0xd0>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000640:	23a8      	movs	r3, #168	@ 0xa8
 8000642:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000648:	2307      	movs	r3, #7
 800064a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f002 fd0d 	bl	8003070 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800065c:	f000 f960 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2302      	movs	r3, #2
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2105      	movs	r1, #5
 800067e:	4618      	mov	r0, r3
 8000680:	f002 ff6e 	bl	8003560 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068a:	f000 f949 	bl	8000920 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	@ 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_USART3_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <MX_USART3_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_USART3_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_USART3_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_USART3_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <MX_USART3_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_USART3_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <MX_USART3_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_USART3_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	@ (80006ec <MX_USART3_UART_Init+0x4c>)
 80006d8:	f003 fc36 	bl	8003f48 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f91d 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000a8 	.word	0x200000a8
 80006f0:	40004800 	.word	0x40004800

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	@ 0x30
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
 800070e:	4b5b      	ldr	r3, [pc, #364]	@ (800087c <MX_GPIO_Init+0x188>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a5a      	ldr	r2, [pc, #360]	@ (800087c <MX_GPIO_Init+0x188>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b58      	ldr	r3, [pc, #352]	@ (800087c <MX_GPIO_Init+0x188>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	4b54      	ldr	r3, [pc, #336]	@ (800087c <MX_GPIO_Init+0x188>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a53      	ldr	r2, [pc, #332]	@ (800087c <MX_GPIO_Init+0x188>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b51      	ldr	r3, [pc, #324]	@ (800087c <MX_GPIO_Init+0x188>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b4d      	ldr	r3, [pc, #308]	@ (800087c <MX_GPIO_Init+0x188>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a4c      	ldr	r2, [pc, #304]	@ (800087c <MX_GPIO_Init+0x188>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b4a      	ldr	r3, [pc, #296]	@ (800087c <MX_GPIO_Init+0x188>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b46      	ldr	r3, [pc, #280]	@ (800087c <MX_GPIO_Init+0x188>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a45      	ldr	r2, [pc, #276]	@ (800087c <MX_GPIO_Init+0x188>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b43      	ldr	r3, [pc, #268]	@ (800087c <MX_GPIO_Init+0x188>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b3f      	ldr	r3, [pc, #252]	@ (800087c <MX_GPIO_Init+0x188>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a3e      	ldr	r2, [pc, #248]	@ (800087c <MX_GPIO_Init+0x188>)
 8000784:	f043 0308 	orr.w	r3, r3, #8
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b3c      	ldr	r3, [pc, #240]	@ (800087c <MX_GPIO_Init+0x188>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b38      	ldr	r3, [pc, #224]	@ (800087c <MX_GPIO_Init+0x188>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a37      	ldr	r2, [pc, #220]	@ (800087c <MX_GPIO_Init+0x188>)
 80007a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b35      	ldr	r3, [pc, #212]	@ (800087c <MX_GPIO_Init+0x188>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80007b8:	4831      	ldr	r0, [pc, #196]	@ (8000880 <MX_GPIO_Init+0x18c>)
 80007ba:	f002 fc3f 	bl	800303c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2140      	movs	r1, #64	@ 0x40
 80007c2:	4830      	ldr	r0, [pc, #192]	@ (8000884 <MX_GPIO_Init+0x190>)
 80007c4:	f002 fc3a 	bl	800303c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	482a      	ldr	r0, [pc, #168]	@ (8000888 <MX_GPIO_Init+0x194>)
 80007e0:	f002 fa80 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80007e4:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4820      	ldr	r0, [pc, #128]	@ (8000880 <MX_GPIO_Init+0x18c>)
 80007fe:	f002 fa71 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	481a      	ldr	r0, [pc, #104]	@ (8000884 <MX_GPIO_Init+0x190>)
 800081a:	f002 fa63 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800081e:	2380      	movs	r3, #128	@ 0x80
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4814      	ldr	r0, [pc, #80]	@ (8000884 <MX_GPIO_Init+0x190>)
 8000832:	f002 fa57 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000836:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4810      	ldr	r0, [pc, #64]	@ (800088c <MX_GPIO_Init+0x198>)
 800084c:	f002 fa4a 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000850:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000862:	230a      	movs	r3, #10
 8000864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4807      	ldr	r0, [pc, #28]	@ (800088c <MX_GPIO_Init+0x198>)
 800086e:	f002 fa39 	bl	8002ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000872:	bf00      	nop
 8000874:	3730      	adds	r7, #48	@ 0x30
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40020400 	.word	0x40020400
 8000884:	40021800 	.word	0x40021800
 8000888:	40020800 	.word	0x40020800
 800088c:	40020000 	.word	0x40020000

08000890 <SendString>:

/* USER CODE BEGIN 4 */


void SendString(const char *str) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff fca9 	bl	80001f0 <strlen>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	4803      	ldr	r0, [pc, #12]	@ (80008b8 <SendString+0x28>)
 80008aa:	f003 fb9d 	bl	8003fe8 <HAL_UART_Transmit>

}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000a8 	.word	0x200000a8

080008bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80008c4:	f003 ff4c 	bl	8004760 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpserver_init();
 80008c8:	f000 fcaa 	bl	8001220 <tcpserver_init>


  const char *mensaje = "I'm alive!!!\n";
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <StartDefaultTask+0x38>)
 80008ce:	60fb      	str	r3, [r7, #12]
  const char *mensaje_bienvenida = "inicio Modbus TCP Remoto en modo Servidor\n";
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <StartDefaultTask+0x3c>)
 80008d2:	60bb      	str	r3, [r7, #8]

  SendString(mensaje_bienvenida);
 80008d4:	68b8      	ldr	r0, [r7, #8]
 80008d6:	f7ff ffdb 	bl	8000890 <SendString>
  //ITM_SendString(mensaje_bienvenida);

  /* Infinite loop */
  for(;;)
  {
	  SendString(mensaje);
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f7ff ffd8 	bl	8000890 <SendString>
	  osDelay(500);
 80008e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008e4:	f004 fe87 	bl	80055f6 <osDelay>

	  osDelay(1);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f004 fe84 	bl	80055f6 <osDelay>
	  SendString(mensaje);
 80008ee:	bf00      	nop
 80008f0:	e7f3      	b.n	80008da <StartDefaultTask+0x1e>
 80008f2:	bf00      	nop
 80008f4:	08017830 	.word	0x08017830
 80008f8:	08017840 	.word	0x08017840

080008fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a04      	ldr	r2, [pc, #16]	@ (800091c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d101      	bne.n	8000912 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800090e:	f000 fe67 	bl	80015e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40001000 	.word	0x40001000

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <mb_process>:
static uint8_t mb_process_val(uint16_t fn, uint16_t val);

static void mb_mbap_copy(char *mb_repl_buf, char *mb_req_buf);
static uint16_t mb_pdu_calculate_N(uint16_t fn, uint16_t quantity);

uint16_t mb_process(char *mb_repl_buf, char *mb_req_buf, uint16_t req_buf_len) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	4613      	mov	r3, r2
 8000938:	80fb      	strh	r3, [r7, #6]
	memset(mb_repl_buf, '\0', MB_ADU_MAXSIZE);  // clear the buffer
 800093a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800093e:	2100      	movs	r1, #0
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f016 f868 	bl	8016a16 <memset>
	mb_mbap_copy(mb_repl_buf, mb_req_buf);
 8000946:	68b9      	ldr	r1, [r7, #8]
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f000 f8f9 	bl	8000b40 <mb_mbap_copy>
	uint16_t pduLen = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	82fb      	strh	r3, [r7, #22]

	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	3307      	adds	r3, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	757b      	strb	r3, [r7, #21]
	switch (fn) {
 800095a:	7d7b      	ldrb	r3, [r7, #21]
 800095c:	2b10      	cmp	r3, #16
 800095e:	dc1c      	bgt.n	800099a <mb_process+0x6e>
 8000960:	2b0f      	cmp	r3, #15
 8000962:	da23      	bge.n	80009ac <mb_process+0x80>
 8000964:	2b04      	cmp	r3, #4
 8000966:	dc02      	bgt.n	800096e <mb_process+0x42>
 8000968:	2b00      	cmp	r3, #0
 800096a:	dc04      	bgt.n	8000976 <mb_process+0x4a>
 800096c:	e015      	b.n	800099a <mb_process+0x6e>
 800096e:	3b05      	subs	r3, #5
 8000970:	2b01      	cmp	r3, #1
 8000972:	d812      	bhi.n	800099a <mb_process+0x6e>
 8000974:	e008      	b.n	8000988 <mb_process+0x5c>
	case MB_FN_READ_COILS:
	case MB_FN_READ_DISCRETE:
	case MB_FN_READ_HOLDING:
	case MB_FN_READ_INPUT:
		pduLen = mb_process_pdu_read_fn(mb_repl_buf, mb_req_buf, req_buf_len);
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	461a      	mov	r2, r3
 800097a:	68b9      	ldr	r1, [r7, #8]
 800097c:	68f8      	ldr	r0, [r7, #12]
 800097e:	f000 f82b 	bl	80009d8 <mb_process_pdu_read_fn>
 8000982:	4603      	mov	r3, r0
 8000984:	82fb      	strh	r3, [r7, #22]
		break;
 8000986:	e012      	b.n	80009ae <mb_process+0x82>
	case MB_FN_WRITE_S_COIL:
	case MB_FN_WRITE_S_HOLDING:
		pduLen = mb_process_pdu_write_single_fn(mb_repl_buf, mb_req_buf, req_buf_len);
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	461a      	mov	r2, r3
 800098c:	68b9      	ldr	r1, [r7, #8]
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f000 f874 	bl	8000a7c <mb_process_pdu_write_single_fn>
 8000994:	4603      	mov	r3, r0
 8000996:	82fb      	strh	r3, [r7, #22]
		break;
 8000998:	e009      	b.n	80009ae <mb_process+0x82>
	case MB_FN_WRITE_M_COIL:
	case MB_FN_WRITE_M_HOLDING:
		//mb_process_write_fn(mb_repl_buf, mb_req_buf, req_buf_len);
		break;
	default:
		pduLen = mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_FN_UNSUPPORTED);
 800099a:	7d7b      	ldrb	r3, [r7, #21]
 800099c:	2201      	movs	r2, #1
 800099e:	4619      	mov	r1, r3
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f000 f96f 	bl	8000c84 <mb_process_err>
 80009a6:	4603      	mov	r3, r0
 80009a8:	82fb      	strh	r3, [r7, #22]
		break;
 80009aa:	e000      	b.n	80009ae <mb_process+0x82>
		break;
 80009ac:	bf00      	nop
	}

	mb_repl_buf[MB_MBAP_LEN_H] = (pduLen + 1) >> 8;
 80009ae:	8afb      	ldrh	r3, [r7, #22]
 80009b0:	3301      	adds	r3, #1
 80009b2:	121a      	asrs	r2, r3, #8
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3304      	adds	r3, #4
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_LEN_L] = (pduLen + 1) & 0xff;
 80009bc:	8afb      	ldrh	r3, [r7, #22]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3305      	adds	r3, #5
 80009c4:	3201      	adds	r2, #1
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	701a      	strb	r2, [r3, #0]

	return (pduLen + MB_MBAP_SIZE);
 80009ca:	8afb      	ldrh	r3, [r7, #22]
 80009cc:	3307      	adds	r3, #7
 80009ce:	b29b      	uxth	r3, r3
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <mb_process_pdu_read_fn>:

static uint16_t mb_process_pdu_read_fn(char *mb_repl_buf, char *mb_req_buf, uint16_t req_buf_len) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	4613      	mov	r3, r2
 80009e4:	80fb      	strh	r3, [r7, #6]
	uint8_t fn = mb_req_buf[MB_PDU_FN];
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	3307      	adds	r3, #7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	75fb      	strb	r3, [r7, #23]
	uint16_t start_address = mb_req_buf[MB_PDU_R_ST_ADDR_L] + (mb_req_buf[MB_PDU_R_ST_ADDR_H] << 8);
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	3309      	adds	r3, #9
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	3308      	adds	r3, #8
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	021b      	lsls	r3, r3, #8
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	4413      	add	r3, r2
 8000a02:	82bb      	strh	r3, [r7, #20]
	uint16_t quantity = mb_req_buf[MB_PDU_R_QUANTITY_L] + (mb_req_buf[MB_PDU_R_QUANTITY_H] << 8);
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	330b      	adds	r3, #11
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	330a      	adds	r3, #10
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	021b      	lsls	r3, r3, #8
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	4413      	add	r3, r2
 8000a18:	827b      	strh	r3, [r7, #18]

	if (mb_process_start_address(fn, start_address, quantity) != MB_EXCEPTION_OK) {
 8000a1a:	7dfb      	ldrb	r3, [r7, #23]
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	8a7a      	ldrh	r2, [r7, #18]
 8000a20:	8ab9      	ldrh	r1, [r7, #20]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f8b0 	bl	8000b88 <mb_process_start_address>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d007      	beq.n	8000a3e <mb_process_pdu_read_fn+0x66>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_ADDR);
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
 8000a30:	2202      	movs	r2, #2
 8000a32:	4619      	mov	r1, r3
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f000 f925 	bl	8000c84 <mb_process_err>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	e01a      	b.n	8000a74 <mb_process_pdu_read_fn+0x9c>
	} else { // form PDU content
		mb_repl_buf[MB_PDU_FN] = fn;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3307      	adds	r3, #7
 8000a42:	7dfa      	ldrb	r2, [r7, #23]
 8000a44:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_REPL_N] = mb_pdu_calculate_N(fn, quantity);
 8000a46:	7dfb      	ldrb	r3, [r7, #23]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	8a7a      	ldrh	r2, [r7, #18]
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f933 	bl	8000cba <mb_pdu_calculate_N>
 8000a54:	4603      	mov	r3, r0
 8000a56:	461a      	mov	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3308      	adds	r3, #8
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	701a      	strb	r2, [r3, #0]
//			read_inputs(mb_req_buf, start_address, quantity);
//			break;
//		}

	}
	return mb_pdu_calculate_N(fn, quantity) + 2; // returns PDU size where +2 are N and fn
 8000a60:	7dfb      	ldrb	r3, [r7, #23]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	8a7a      	ldrh	r2, [r7, #18]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 f926 	bl	8000cba <mb_pdu_calculate_N>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	3302      	adds	r3, #2
 8000a72:	b29b      	uxth	r3, r3
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <mb_process_pdu_write_single_fn>:

static uint16_t mb_process_pdu_write_single_fn(char *mb_repl_buf, char *mb_req_buf, uint16_t req_buf_len) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	4613      	mov	r3, r2
 8000a88:	80fb      	strh	r3, [r7, #6]
	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	3307      	adds	r3, #7
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	75fb      	strb	r3, [r7, #23]
	uint16_t address = mb_req_buf[MB_PDU_W_REG_ADDR_L] + (mb_req_buf[MB_PDU_W_REG_ADDR_H] << 8);
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	3309      	adds	r3, #9
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	3308      	adds	r3, #8
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	021b      	lsls	r3, r3, #8
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	82bb      	strh	r3, [r7, #20]
	uint16_t valToWrite = mb_req_buf[MB_PDU_W_REG_VAL_L] + (mb_req_buf[MB_PDU_W_REG_VAL_H] << 8);
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	330b      	adds	r3, #11
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	330a      	adds	r3, #10
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	021b      	lsls	r3, r3, #8
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	4413      	add	r3, r2
 8000abc:	827b      	strh	r3, [r7, #18]

	if (mb_process_start_address(fn, address, 1) != MB_EXCEPTION_OK) {
 8000abe:	7dfb      	ldrb	r3, [r7, #23]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	8ab9      	ldrh	r1, [r7, #20]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f85e 	bl	8000b88 <mb_process_start_address>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d007      	beq.n	8000ae2 <mb_process_pdu_write_single_fn+0x66>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_ADDR);
 8000ad2:	7dfb      	ldrb	r3, [r7, #23]
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f000 f8d3 	bl	8000c84 <mb_process_err>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	e02a      	b.n	8000b38 <mb_process_pdu_write_single_fn+0xbc>
	} else if (mb_process_val(fn, valToWrite) != MB_EXCEPTION_OK) {
 8000ae2:	7dfb      	ldrb	r3, [r7, #23]
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	8a7a      	ldrh	r2, [r7, #18]
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f8ac 	bl	8000c48 <mb_process_val>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d007      	beq.n	8000b06 <mb_process_pdu_write_single_fn+0x8a>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_VAL);
 8000af6:	7dfb      	ldrb	r3, [r7, #23]
 8000af8:	2203      	movs	r2, #3
 8000afa:	4619      	mov	r1, r3
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f000 f8c1 	bl	8000c84 <mb_process_err>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e018      	b.n	8000b38 <mb_process_pdu_write_single_fn+0xbc>
	} else { // form PDU content
		mb_repl_buf[MB_PDU_FN] = fn;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	3307      	adds	r3, #7
 8000b0a:	7dfa      	ldrb	r2, [r7, #23]
 8000b0c:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_ADDR_H] = mb_req_buf[MB_PDU_W_REG_ADDR_H];
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	3308      	adds	r3, #8
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	7a12      	ldrb	r2, [r2, #8]
 8000b16:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_ADDR_L] = mb_req_buf[MB_PDU_W_REG_ADDR_L];
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	3309      	adds	r3, #9
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	7a52      	ldrb	r2, [r2, #9]
 8000b20:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_VAL_H] = mb_req_buf[MB_PDU_W_REG_VAL_H];
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	330a      	adds	r3, #10
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	7a92      	ldrb	r2, [r2, #10]
 8000b2a:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_VAL_L] = mb_req_buf[MB_PDU_W_REG_VAL_L];
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	330b      	adds	r3, #11
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	7ad2      	ldrb	r2, [r2, #11]
 8000b34:	701a      	strb	r2, [r3, #0]

//		if(fn == MB_FN_WRITE_S_COIL) write_single_coil(address, valToWrite);
//		if(fn == MB_FN_WRITE_S_HOLDING) write_single_holding(address, valToWrite);
	}
	return 5; // PDU size for write single XXX command
 8000b36:	2305      	movs	r3, #5
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <mb_mbap_copy>:

static void mb_mbap_copy(char *mb_repl_buf, char *mb_req_buf) {
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
	mb_repl_buf[MB_MBAP_TRANSACTION_ID_H] = mb_req_buf[MB_MBAP_TRANSACTION_ID_H];
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	781a      	ldrb	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_TRANSACTION_ID_L] = mb_req_buf[MB_MBAP_TRANSACTION_ID_L];
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3301      	adds	r3, #1
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	7852      	ldrb	r2, [r2, #1]
 8000b5a:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_PROTOCOL_ID_H] = mb_req_buf[MB_MBAP_PROTOCOL_ID_H];
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3302      	adds	r3, #2
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	7892      	ldrb	r2, [r2, #2]
 8000b64:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_PROTOCOL_ID_L] = mb_req_buf[MB_MBAP_PROTOCOL_ID_L];
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3303      	adds	r3, #3
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	78d2      	ldrb	r2, [r2, #3]
 8000b6e:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_CLIENT_ID] = mb_req_buf[MB_MBAP_CLIENT_ID];
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3306      	adds	r3, #6
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	7992      	ldrb	r2, [r2, #6]
 8000b78:	701a      	strb	r2, [r3, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <mb_process_start_address>:

static uint8_t mb_process_start_address(uint16_t fn, uint16_t start_address, uint16_t quantity) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	80fb      	strh	r3, [r7, #6]
 8000b92:	460b      	mov	r3, r1
 8000b94:	80bb      	strh	r3, [r7, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	807b      	strh	r3, [r7, #2]
	uint8_t exception_code = MB_EXCEPTION_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
	switch (fn) {
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	2b05      	cmp	r3, #5
 8000ba4:	d849      	bhi.n	8000c3a <mb_process_start_address+0xb2>
 8000ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bac <mb_process_start_address+0x24>)
 8000ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bac:	08000bc5 	.word	0x08000bc5
 8000bb0:	08000bd5 	.word	0x08000bd5
 8000bb4:	08000be5 	.word	0x08000be5
 8000bb8:	08000bf5 	.word	0x08000bf5
 8000bbc:	08000c05 	.word	0x08000c05
 8000bc0:	08000c15 	.word	0x08000c15
	case MB_FN_READ_COILS:
		if ((start_address + quantity) > MB_COILS_Q)
 8000bc4:	88ba      	ldrh	r2, [r7, #4]
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	4413      	add	r3, r2
 8000bca:	2bff      	cmp	r3, #255	@ 0xff
 8000bcc:	dd2a      	ble.n	8000c24 <mb_process_start_address+0x9c>
			exception_code = 2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	73fb      	strb	r3, [r7, #15]
		break;
 8000bd2:	e027      	b.n	8000c24 <mb_process_start_address+0x9c>
	case MB_FN_READ_DISCRETE:
		if ((start_address + quantity) > MB_DISCRETE_Q)
 8000bd4:	88ba      	ldrh	r2, [r7, #4]
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	4413      	add	r3, r2
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	dd24      	ble.n	8000c28 <mb_process_start_address+0xa0>
			exception_code = 2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	73fb      	strb	r3, [r7, #15]
		break;
 8000be2:	e021      	b.n	8000c28 <mb_process_start_address+0xa0>
	case MB_FN_READ_HOLDING:
		if ((start_address + quantity) > MB_HOLDING_Q)
 8000be4:	88ba      	ldrh	r2, [r7, #4]
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	4413      	add	r3, r2
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	dd1e      	ble.n	8000c2c <mb_process_start_address+0xa4>
			exception_code = 2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	73fb      	strb	r3, [r7, #15]
		break;
 8000bf2:	e01b      	b.n	8000c2c <mb_process_start_address+0xa4>
	case MB_FN_READ_INPUT:
		if ((start_address + quantity) > MB_INPUT_Q)
 8000bf4:	88ba      	ldrh	r2, [r7, #4]
 8000bf6:	887b      	ldrh	r3, [r7, #2]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	dd18      	ble.n	8000c30 <mb_process_start_address+0xa8>
			exception_code = 2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	73fb      	strb	r3, [r7, #15]
		break;
 8000c02:	e015      	b.n	8000c30 <mb_process_start_address+0xa8>

	case MB_FN_WRITE_S_COIL:
		if ((start_address + quantity) > MB_COILS_Q)
 8000c04:	88ba      	ldrh	r2, [r7, #4]
 8000c06:	887b      	ldrh	r3, [r7, #2]
 8000c08:	4413      	add	r3, r2
 8000c0a:	2bff      	cmp	r3, #255	@ 0xff
 8000c0c:	dd12      	ble.n	8000c34 <mb_process_start_address+0xac>
			exception_code = 2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	73fb      	strb	r3, [r7, #15]
		break;
 8000c12:	e00f      	b.n	8000c34 <mb_process_start_address+0xac>
	case MB_FN_WRITE_S_HOLDING:
		if ((start_address + quantity) > MB_HOLDING_Q)
 8000c14:	88ba      	ldrh	r2, [r7, #4]
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	4413      	add	r3, r2
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	dd0c      	ble.n	8000c38 <mb_process_start_address+0xb0>
			exception_code = 2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	73fb      	strb	r3, [r7, #15]
		break;
 8000c22:	e009      	b.n	8000c38 <mb_process_start_address+0xb0>
		break;
 8000c24:	bf00      	nop
 8000c26:	e008      	b.n	8000c3a <mb_process_start_address+0xb2>
		break;
 8000c28:	bf00      	nop
 8000c2a:	e006      	b.n	8000c3a <mb_process_start_address+0xb2>
		break;
 8000c2c:	bf00      	nop
 8000c2e:	e004      	b.n	8000c3a <mb_process_start_address+0xb2>
		break;
 8000c30:	bf00      	nop
 8000c32:	e002      	b.n	8000c3a <mb_process_start_address+0xb2>
		break;
 8000c34:	bf00      	nop
 8000c36:	e000      	b.n	8000c3a <mb_process_start_address+0xb2>
		break;
 8000c38:	bf00      	nop
	}
	return exception_code;
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <mb_process_val>:

static uint8_t mb_process_val(uint16_t fn, uint16_t val) {
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	80fb      	strh	r3, [r7, #6]
 8000c54:	4613      	mov	r3, r2
 8000c56:	80bb      	strh	r3, [r7, #4]
	uint8_t exception_code = MB_EXCEPTION_OK;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
	switch (fn) {
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	2b05      	cmp	r3, #5
 8000c60:	d109      	bne.n	8000c76 <mb_process_val+0x2e>
	case MB_FN_WRITE_S_COIL:
		if ((val != 0xFF00) && (val != 0x0000))
 8000c62:	88bb      	ldrh	r3, [r7, #4]
 8000c64:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 8000c68:	d004      	beq.n	8000c74 <mb_process_val+0x2c>
 8000c6a:	88bb      	ldrh	r3, [r7, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <mb_process_val+0x2c>
			exception_code = 3;
 8000c70:	2303      	movs	r3, #3
 8000c72:	73fb      	strb	r3, [r7, #15]
		break;
 8000c74:	bf00      	nop
	}
	return exception_code;
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <mb_process_err>:

static uint16_t mb_process_err(char *mb_repl_buf, uint8_t fn, uint16_t exceptionCode) {
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
 8000c90:	4613      	mov	r3, r2
 8000c92:	803b      	strh	r3, [r7, #0]
	mb_repl_buf[MB_PDU_FN] = fn | 0x80;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3307      	adds	r3, #7
 8000c98:	78fa      	ldrb	r2, [r7, #3]
 8000c9a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_PDU_EXCEPTION_CODE] = exceptionCode;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3308      	adds	r3, #8
 8000ca6:	883a      	ldrh	r2, [r7, #0]
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	701a      	strb	r2, [r3, #0]
	return 2;
 8000cac:	2302      	movs	r3, #2
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <mb_pdu_calculate_N>:

static uint16_t mb_pdu_calculate_N(uint16_t fn, uint16_t quantity) {
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	460a      	mov	r2, r1
 8000cc4:	80fb      	strh	r3, [r7, #6]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	80bb      	strh	r3, [r7, #4]
	switch (fn) {
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	dc02      	bgt.n	8000cd6 <mb_pdu_calculate_N+0x1c>
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	dc04      	bgt.n	8000cde <mb_pdu_calculate_N+0x24>
 8000cd4:	e017      	b.n	8000d06 <mb_pdu_calculate_N+0x4c>
 8000cd6:	3b03      	subs	r3, #3
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d814      	bhi.n	8000d06 <mb_pdu_calculate_N+0x4c>
 8000cdc:	e00f      	b.n	8000cfe <mb_pdu_calculate_N+0x44>
	case MB_FN_READ_COILS:
	case MB_FN_READ_DISCRETE:
		if (quantity % 8 != 0)
 8000cde:	88bb      	ldrh	r3, [r7, #4]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d005      	beq.n	8000cf6 <mb_pdu_calculate_N+0x3c>
			return ((quantity / 8) + 1);
 8000cea:	88bb      	ldrh	r3, [r7, #4]
 8000cec:	08db      	lsrs	r3, r3, #3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	e008      	b.n	8000d08 <mb_pdu_calculate_N+0x4e>
		else
			return (quantity / 8);
 8000cf6:	88bb      	ldrh	r3, [r7, #4]
 8000cf8:	08db      	lsrs	r3, r3, #3
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	e004      	b.n	8000d08 <mb_pdu_calculate_N+0x4e>
		break;
	case MB_FN_READ_HOLDING:
	case MB_FN_READ_INPUT:
		return quantity * 2;
 8000cfe:	88bb      	ldrh	r3, [r7, #4]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	e000      	b.n	8000d08 <mb_pdu_calculate_N+0x4e>
		break;
	default:
		return 0;
 8000d06:	2300      	movs	r3, #0
	}
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <HAL_MspInit+0x54>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	4a11      	ldr	r2, [pc, #68]	@ (8000d68 <HAL_MspInit+0x54>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <HAL_MspInit+0x54>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <HAL_MspInit+0x54>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <HAL_MspInit+0x54>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <HAL_MspInit+0x54>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	210f      	movs	r1, #15
 8000d56:	f06f 0001 	mvn.w	r0, #1
 8000d5a:	f000 fd3d 	bl	80017d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	@ 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a19      	ldr	r2, [pc, #100]	@ (8000df0 <HAL_UART_MspInit+0x84>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d12c      	bne.n	8000de8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <HAL_UART_MspInit+0x88>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	4a17      	ldr	r2, [pc, #92]	@ (8000df4 <HAL_UART_MspInit+0x88>)
 8000d98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <HAL_UART_MspInit+0x88>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <HAL_UART_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a10      	ldr	r2, [pc, #64]	@ (8000df4 <HAL_UART_MspInit+0x88>)
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <HAL_UART_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dc6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dd8:	2307      	movs	r3, #7
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <HAL_UART_MspInit+0x8c>)
 8000de4:	f001 ff7e 	bl	8002ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	@ 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40004800 	.word	0x40004800
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020c00 	.word	0x40020c00

08000dfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08e      	sub	sp, #56	@ 0x38
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	4b33      	ldr	r3, [pc, #204]	@ (8000ee0 <HAL_InitTick+0xe4>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e14:	4a32      	ldr	r2, [pc, #200]	@ (8000ee0 <HAL_InitTick+0xe4>)
 8000e16:	f043 0310 	orr.w	r3, r3, #16
 8000e1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1c:	4b30      	ldr	r3, [pc, #192]	@ (8000ee0 <HAL_InitTick+0xe4>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e28:	f107 0210 	add.w	r2, r7, #16
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 fdb4 	bl	80039a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e38:	6a3b      	ldr	r3, [r7, #32]
 8000e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d103      	bne.n	8000e4a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e42:	f002 fd85 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8000e46:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e48:	e004      	b.n	8000e54 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e4a:	f002 fd81 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e56:	4a23      	ldr	r2, [pc, #140]	@ (8000ee4 <HAL_InitTick+0xe8>)
 8000e58:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5c:	0c9b      	lsrs	r3, r3, #18
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e62:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <HAL_InitTick+0xec>)
 8000e64:	4a21      	ldr	r2, [pc, #132]	@ (8000eec <HAL_InitTick+0xf0>)
 8000e66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <HAL_InitTick+0xec>)
 8000e6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e6e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e70:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee8 <HAL_InitTick+0xec>)
 8000e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e74:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <HAL_InitTick+0xec>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee8 <HAL_InitTick+0xec>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e82:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <HAL_InitTick+0xec>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e88:	4817      	ldr	r0, [pc, #92]	@ (8000ee8 <HAL_InitTick+0xec>)
 8000e8a:	f002 fdbb 	bl	8003a04 <HAL_TIM_Base_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d11b      	bne.n	8000ed4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e9c:	4812      	ldr	r0, [pc, #72]	@ (8000ee8 <HAL_InitTick+0xec>)
 8000e9e:	f002 fe0b 	bl	8003ab8 <HAL_TIM_Base_Start_IT>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ea8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d111      	bne.n	8000ed4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eb0:	2036      	movs	r0, #54	@ 0x36
 8000eb2:	f000 fcad 	bl	8001810 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d808      	bhi.n	8000ece <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	2036      	movs	r0, #54	@ 0x36
 8000ec2:	f000 fc89 	bl	80017d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <HAL_InitTick+0xf4>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	e002      	b.n	8000ed4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ed4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3738      	adds	r7, #56	@ 0x38
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	431bde83 	.word	0x431bde83
 8000ee8:	200000f4 	.word	0x200000f4
 8000eec:	40001000 	.word	0x40001000
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <NMI_Handler+0x4>

08000efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f30:	4802      	ldr	r0, [pc, #8]	@ (8000f3c <TIM6_DAC_IRQHandler+0x10>)
 8000f32:	f002 fe31 	bl	8003b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200000f4 	.word	0x200000f4

08000f40 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <ETH_IRQHandler+0x10>)
 8000f46:	f000 fff7 	bl	8001f38 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20004e9c 	.word	0x20004e9c

08000f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return 1;
 8000f58:	2301      	movs	r3, #1
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <_kill>:

int _kill(int pid, int sig)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f6e:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <_kill+0x20>)
 8000f70:	2216      	movs	r2, #22
 8000f72:	601a      	str	r2, [r3, #0]
  return -1;
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	2000f54c 	.word	0x2000f54c

08000f88 <_exit>:

void _exit (int status)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ffe5 	bl	8000f64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f9a:	bf00      	nop
 8000f9c:	e7fd      	b.n	8000f9a <_exit+0x12>

08000f9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	e00a      	b.n	8000fc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb0:	f3af 8000 	nop.w
 8000fb4:	4601      	mov	r1, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	60ba      	str	r2, [r7, #8]
 8000fbc:	b2ca      	uxtb	r2, r1
 8000fbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	dbf0      	blt.n	8000fb0 <_read+0x12>
  }

  return len;
 8000fce:	687b      	ldr	r3, [r7, #4]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	e009      	b.n	8000ffe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	1c5a      	adds	r2, r3, #1
 8000fee:	60ba      	str	r2, [r7, #8]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	dbf1      	blt.n	8000fea <_write+0x12>
  }
  return len;
 8001006:	687b      	ldr	r3, [r7, #4]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_close>:

int _close(int file)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001038:	605a      	str	r2, [r3, #4]
  return 0;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_isatty>:

int _isatty(int file)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001050:	2301      	movs	r3, #1
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800105e:	b480      	push	{r7}
 8001060:	b085      	sub	sp, #20
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001080:	4a14      	ldr	r2, [pc, #80]	@ (80010d4 <_sbrk+0x5c>)
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <_sbrk+0x60>)
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800108c:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <_sbrk+0x64>)
 8001096:	4a12      	ldr	r2, [pc, #72]	@ (80010e0 <_sbrk+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d205      	bcs.n	80010b4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <_sbrk+0x6c>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e009      	b.n	80010c8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b4:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ba:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a06      	ldr	r2, [pc, #24]	@ (80010dc <_sbrk+0x64>)
 80010c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	20030000 	.word	0x20030000
 80010d8:	00000400 	.word	0x00000400
 80010dc:	2000013c 	.word	0x2000013c
 80010e0:	2000f560 	.word	0x2000f560
 80010e4:	2000f54c 	.word	0x2000f54c

080010e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <SystemInit+0x20>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f2:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <SystemInit+0x20>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <tcp_thread>:
char mb_req_buf[MB_ADU_MAXSIZE];
char mb_repl_buf[MB_ADU_MAXSIZE];

static void copyString(char* dest, char* src, unsigned num);

static void tcp_thread(void *arg) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af02      	add	r7, sp, #8
 8001112:	6078      	str	r0, [r7, #4]
	err_t err, accept_err;
	conn = netconn_new(NETCONN_TCP);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2010      	movs	r0, #16
 800111a:	f008 f86b 	bl	80091f4 <netconn_new_with_proto_and_callback>
 800111e:	4603      	mov	r3, r0
 8001120:	4a39      	ldr	r2, [pc, #228]	@ (8001208 <tcp_thread+0xfc>)
 8001122:	6013      	str	r3, [r2, #0]
	if (conn != NULL) {
 8001124:	4b38      	ldr	r3, [pc, #224]	@ (8001208 <tcp_thread+0xfc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d068      	beq.n	80011fe <tcp_thread+0xf2>
		err = netconn_bind(conn, IP_ADDR_ANY, MB_TCP_PORT);
 800112c:	4b36      	ldr	r3, [pc, #216]	@ (8001208 <tcp_thread+0xfc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8001134:	4935      	ldr	r1, [pc, #212]	@ (800120c <tcp_thread+0x100>)
 8001136:	4618      	mov	r0, r3
 8001138:	f008 f916 	bl	8009368 <netconn_bind>
 800113c:	4603      	mov	r3, r0
 800113e:	73fb      	strb	r3, [r7, #15]
		if (err == ERR_OK) {
 8001140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d155      	bne.n	80011f4 <tcp_thread+0xe8>
			netconn_listen(conn);
 8001148:	4b2f      	ldr	r3, [pc, #188]	@ (8001208 <tcp_thread+0xfc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	21ff      	movs	r1, #255	@ 0xff
 800114e:	4618      	mov	r0, r3
 8001150:	f008 f942 	bl	80093d8 <netconn_listen_with_backlog>
			while (1) {
				accept_err = netconn_accept(conn, &newconn);
 8001154:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <tcp_thread+0xfc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	492d      	ldr	r1, [pc, #180]	@ (8001210 <tcp_thread+0x104>)
 800115a:	4618      	mov	r0, r3
 800115c:	f008 f968 	bl	8009430 <netconn_accept>
 8001160:	4603      	mov	r3, r0
 8001162:	73bb      	strb	r3, [r7, #14]
				if (accept_err == ERR_OK) {
 8001164:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f3      	bne.n	8001154 <tcp_thread+0x48>
					while (netconn_recv(newconn, &netbuf) == ERR_OK) {
 800116c:	e02e      	b.n	80011cc <tcp_thread+0xc0>
						do {
							copyString(mb_req_buf, netbuf->p->payload, netbuf->p->len); // get the message from the client
 800116e:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <tcp_thread+0x108>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6859      	ldr	r1, [r3, #4]
 8001176:	4b27      	ldr	r3, [pc, #156]	@ (8001214 <tcp_thread+0x108>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	895b      	ldrh	r3, [r3, #10]
 800117e:	461a      	mov	r2, r3
 8001180:	4825      	ldr	r0, [pc, #148]	@ (8001218 <tcp_thread+0x10c>)
 8001182:	f000 f861 	bl	8001248 <copyString>
							uint16_t buf_len = netbuf->p->len;
 8001186:	4b23      	ldr	r3, [pc, #140]	@ (8001214 <tcp_thread+0x108>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	895b      	ldrh	r3, [r3, #10]
 800118e:	81bb      	strh	r3, [r7, #12]
							buf_len = mb_process(mb_repl_buf, mb_req_buf, buf_len); // process the data
 8001190:	89bb      	ldrh	r3, [r7, #12]
 8001192:	461a      	mov	r2, r3
 8001194:	4920      	ldr	r1, [pc, #128]	@ (8001218 <tcp_thread+0x10c>)
 8001196:	4821      	ldr	r0, [pc, #132]	@ (800121c <tcp_thread+0x110>)
 8001198:	f7ff fbc8 	bl	800092c <mb_process>
 800119c:	4603      	mov	r3, r0
 800119e:	81bb      	strh	r3, [r7, #12]
							netconn_write(newconn, mb_repl_buf, buf_len, NETCONN_COPY); // send the message back to the client
 80011a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001210 <tcp_thread+0x104>)
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	89ba      	ldrh	r2, [r7, #12]
 80011a6:	2300      	movs	r3, #0
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	491b      	ldr	r1, [pc, #108]	@ (800121c <tcp_thread+0x110>)
 80011ae:	f008 fbc1 	bl	8009934 <netconn_write_partly>
						} while (netbuf_next(netbuf) > 0);
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <tcp_thread+0x108>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f00a f8dc 	bl	800b374 <netbuf_next>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	dcd5      	bgt.n	800116e <tcp_thread+0x62>
						netbuf_delete(netbuf);
 80011c2:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <tcp_thread+0x108>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00a f8b4 	bl	800b334 <netbuf_delete>
					while (netconn_recv(newconn, &netbuf) == ERR_OK) {
 80011cc:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <tcp_thread+0x104>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4910      	ldr	r1, [pc, #64]	@ (8001214 <tcp_thread+0x108>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f008 fb34 	bl	8009840 <netconn_recv>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0c7      	beq.n	800116e <tcp_thread+0x62>
					}
					netconn_close(newconn);
 80011de:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <tcp_thread+0x104>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f008 fca8 	bl	8009b38 <netconn_close>
					netconn_delete(newconn);
 80011e8:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <tcp_thread+0x104>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f008 f89f 	bl	8009330 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 80011f2:	e7af      	b.n	8001154 <tcp_thread+0x48>
				}
			}
		} else {
			netconn_delete(conn);
 80011f4:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <tcp_thread+0xfc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f008 f899 	bl	8009330 <netconn_delete>
		}
	}
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000140 	.word	0x20000140
 800120c:	0801af20 	.word	0x0801af20
 8001210:	20000144 	.word	0x20000144
 8001214:	20000148 	.word	0x20000148
 8001218:	2000014c 	.word	0x2000014c
 800121c:	20000250 	.word	0x20000250

08001220 <tcpserver_init>:

void tcpserver_init(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af02      	add	r7, sp, #8
	sys_thread_new("tcp_thread", tcp_thread, NULL, 8*DEFAULT_THREAD_STACKSIZE,
 8001226:	2318      	movs	r3, #24
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800122e:	2200      	movs	r2, #0
 8001230:	4903      	ldr	r1, [pc, #12]	@ (8001240 <tcpserver_init+0x20>)
 8001232:	4804      	ldr	r0, [pc, #16]	@ (8001244 <tcpserver_init+0x24>)
 8001234:	f015 fa4c 	bl	80166d0 <sys_thread_new>
			osPriorityNormal);
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	0800110d 	.word	0x0800110d
 8001244:	0801786c 	.word	0x0801786c

08001248 <copyString>:

static void copyString(char* dest, char* src, unsigned num){
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
	for(unsigned i = 0; i != num; ++i){
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	e00a      	b.n	8001270 <copyString+0x28>
		dest[i] = src[i];
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	441a      	add	r2, r3
 8001260:	68f9      	ldr	r1, [r7, #12]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	440b      	add	r3, r1
 8001266:	7812      	ldrb	r2, [r2, #0]
 8001268:	701a      	strb	r2, [r3, #0]
	for(unsigned i = 0; i != num; ++i){
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	429a      	cmp	r2, r3
 8001276:	d1f0      	bne.n	800125a <copyString+0x12>
	}
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	371c      	adds	r7, #28
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800128c:	f7ff ff2c 	bl	80010e8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001292:	490d      	ldr	r1, [pc, #52]	@ (80012c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001294:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a8:	4c0a      	ldr	r4, [pc, #40]	@ (80012d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f015 fc53 	bl	8016b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ba:	f7ff f969 	bl	8000590 <main>
  bx  lr    
 80012be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80012cc:	0801b020 	.word	0x0801b020
  ldr r2, =_sbss
 80012d0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80012d4:	2000f55c 	.word	0x2000f55c

080012d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC_IRQHandler>

080012da <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <LAN8742_RegisterBusIO+0x28>
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <LAN8742_RegisterBusIO+0x28>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <LAN8742_RegisterBusIO+0x28>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d102      	bne.n	8001308 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e014      	b.n	8001332 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d17c      	bne.n	8001458 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2220      	movs	r2, #32
 8001370:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e01c      	b.n	80013b2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	f107 0208 	add.w	r2, r7, #8
 8001380:	2112      	movs	r1, #18
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	4798      	blx	r3
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	da03      	bge.n	8001394 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800138c:	f06f 0304 	mvn.w	r3, #4
 8001390:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001392:	e00b      	b.n	80013ac <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	d105      	bne.n	80013ac <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
         break;
 80013aa:	e005      	b.n	80013b8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3301      	adds	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2b1f      	cmp	r3, #31
 80013b6:	d9df      	bls.n	8001378 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b1f      	cmp	r3, #31
 80013be:	d902      	bls.n	80013c6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80013c0:	f06f 0302 	mvn.w	r3, #2
 80013c4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d145      	bne.n	8001458 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6810      	ldr	r0, [r2, #0]
 80013d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013d8:	2100      	movs	r1, #0
 80013da:	4798      	blx	r3
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db37      	blt.n	8001452 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6810      	ldr	r0, [r2, #0]
 80013ea:	f107 0208 	add.w	r2, r7, #8
 80013ee:	2100      	movs	r1, #0
 80013f0:	4798      	blx	r3
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db28      	blt.n	800144a <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4798      	blx	r3
 80013fe:	4603      	mov	r3, r0
 8001400:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001402:	e01c      	b.n	800143e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4798      	blx	r3
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001416:	d80e      	bhi.n	8001436 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6810      	ldr	r0, [r2, #0]
 8001420:	f107 0208 	add.w	r2, r7, #8
 8001424:	2100      	movs	r1, #0
 8001426:	4798      	blx	r3
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	da07      	bge.n	800143e <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 800142e:	f06f 0304 	mvn.w	r3, #4
 8001432:	613b      	str	r3, [r7, #16]
                 break;
 8001434:	e010      	b.n	8001458 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001436:	f06f 0301 	mvn.w	r3, #1
 800143a:	613b      	str	r3, [r7, #16]
               break;
 800143c:	e00c      	b.n	8001458 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1dd      	bne.n	8001404 <LAN8742_Init+0xc6>
 8001448:	e006      	b.n	8001458 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800144a:	f06f 0304 	mvn.w	r3, #4
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	e002      	b.n	8001458 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001452:	f06f 0303 	mvn.w	r3, #3
 8001456:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d112      	bne.n	8001484 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	4798      	blx	r3
 8001464:	4603      	mov	r3, r0
 8001466:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001468:	bf00      	nop
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	4798      	blx	r3
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800147c:	d9f5      	bls.n	800146a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001484:	693b      	ldr	r3, [r7, #16]
 }
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6810      	ldr	r0, [r2, #0]
 80014a2:	f107 020c 	add.w	r2, r7, #12
 80014a6:	2101      	movs	r1, #1
 80014a8:	4798      	blx	r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	da02      	bge.n	80014b6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014b0:	f06f 0304 	mvn.w	r3, #4
 80014b4:	e06e      	b.n	8001594 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6810      	ldr	r0, [r2, #0]
 80014be:	f107 020c 	add.w	r2, r7, #12
 80014c2:	2101      	movs	r1, #1
 80014c4:	4798      	blx	r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	da02      	bge.n	80014d2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014cc:	f06f 0304 	mvn.w	r3, #4
 80014d0:	e060      	b.n	8001594 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80014dc:	2301      	movs	r3, #1
 80014de:	e059      	b.n	8001594 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6810      	ldr	r0, [r2, #0]
 80014e8:	f107 020c 	add.w	r2, r7, #12
 80014ec:	2100      	movs	r1, #0
 80014ee:	4798      	blx	r3
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da02      	bge.n	80014fc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014f6:	f06f 0304 	mvn.w	r3, #4
 80014fa:	e04b      	b.n	8001594 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d11b      	bne.n	800153e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <LAN8742_GetLinkState+0x90>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800151a:	2302      	movs	r3, #2
 800151c:	e03a      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001528:	2303      	movs	r3, #3
 800152a:	e033      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001536:	2304      	movs	r3, #4
 8001538:	e02c      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800153a:	2305      	movs	r3, #5
 800153c:	e02a      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6810      	ldr	r0, [r2, #0]
 8001546:	f107 020c 	add.w	r2, r7, #12
 800154a:	211f      	movs	r1, #31
 800154c:	4798      	blx	r3
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	da02      	bge.n	800155a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001554:	f06f 0304 	mvn.w	r3, #4
 8001558:	e01c      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001564:	2306      	movs	r3, #6
 8001566:	e015      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 031c 	and.w	r3, r3, #28
 800156e:	2b18      	cmp	r3, #24
 8001570:	d101      	bne.n	8001576 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001572:	2302      	movs	r3, #2
 8001574:	e00e      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f003 031c 	and.w	r3, r3, #28
 800157c:	2b08      	cmp	r3, #8
 800157e:	d101      	bne.n	8001584 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001580:	2303      	movs	r3, #3
 8001582:	e007      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 031c 	and.w	r3, r3, #28
 800158a:	2b14      	cmp	r3, #20
 800158c:	d101      	bne.n	8001592 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800158e:	2304      	movs	r3, #4
 8001590:	e000      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001592:	2305      	movs	r3, #5
    }
  }
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a0:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0d      	ldr	r2, [pc, #52]	@ (80015dc <HAL_Init+0x40>)
 80015a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015ac:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0a      	ldr	r2, [pc, #40]	@ (80015dc <HAL_Init+0x40>)
 80015b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a07      	ldr	r2, [pc, #28]	@ (80015dc <HAL_Init+0x40>)
 80015be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 f8fc 	bl	80017c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ca:	200f      	movs	r0, #15
 80015cc:	f7ff fc16 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d0:	f7ff fba0 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023c00 	.word	0x40023c00

080015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000008 	.word	0x20000008
 8001604:	20000354 	.word	0x20000354

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000354 	.word	0x20000354

08001620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ffee 	bl	8001608 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001638:	d005      	beq.n	8001646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163a:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <HAL_Delay+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001646:	bf00      	nop
 8001648:	f7ff ffde 	bl	8001608 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f7      	bhi.n	8001648 <HAL_Delay+0x28>
  {
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000008 	.word	0x20000008

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	@ (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	@ (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4907      	ldr	r1, [pc, #28]	@ (8001704 <__NVIC_EnableIRQ+0x38>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	@ (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	@ (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	@ 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	@ 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ff4c 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ea:	f7ff ff61 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 80017ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	68b9      	ldr	r1, [r7, #8]
 80017f4:	6978      	ldr	r0, [r7, #20]
 80017f6:	f7ff ffb1 	bl	800175c <NVIC_EncodePriority>
 80017fa:	4602      	mov	r2, r0
 80017fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001800:	4611      	mov	r1, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff80 	bl	8001708 <__NVIC_SetPriority>
}
 8001808:	bf00      	nop
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff54 	bl	80016cc <__NVIC_EnableIRQ>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e06c      	b.n	8001918 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001844:	2b00      	cmp	r3, #0
 8001846:	d106      	bne.n	8001856 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2223      	movs	r2, #35	@ 0x23
 800184c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f003 fb75 	bl	8004f40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b31      	ldr	r3, [pc, #196]	@ (8001920 <HAL_ETH_Init+0xf4>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	4a30      	ldr	r2, [pc, #192]	@ (8001920 <HAL_ETH_Init+0xf4>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001864:	6453      	str	r3, [r2, #68]	@ 0x44
 8001866:	4b2e      	ldr	r3, [pc, #184]	@ (8001920 <HAL_ETH_Init+0xf4>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001872:	4b2c      	ldr	r3, [pc, #176]	@ (8001924 <HAL_ETH_Init+0xf8>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4a2b      	ldr	r2, [pc, #172]	@ (8001924 <HAL_ETH_Init+0xf8>)
 8001878:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800187c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800187e:	4b29      	ldr	r3, [pc, #164]	@ (8001924 <HAL_ETH_Init+0xf8>)
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	4927      	ldr	r1, [pc, #156]	@ (8001924 <HAL_ETH_Init+0xf8>)
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800188c:	4b25      	ldr	r3, [pc, #148]	@ (8001924 <HAL_ETH_Init+0xf8>)
 800188e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018a8:	f7ff feae 	bl	8001608 <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018ae:	e011      	b.n	80018d4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018b0:	f7ff feaa 	bl	8001608 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018be:	d909      	bls.n	80018d4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2204      	movs	r2, #4
 80018c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	22e0      	movs	r2, #224	@ 0xe0
 80018cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e021      	b.n	8001918 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1e4      	bne.n	80018b0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 ff56 	bl	8002798 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 fffd 	bl	80028ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f001 f853 	bl	800299e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	461a      	mov	r2, r3
 80018fe:	2100      	movs	r1, #0
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 ffbb 	bl	800287c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2210      	movs	r2, #16
 8001912:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40023800 	.word	0x40023800
 8001924:	40013800 	.word	0x40013800

08001928 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001936:	2b10      	cmp	r3, #16
 8001938:	d17f      	bne.n	8001a3a <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2223      	movs	r2, #35	@ 0x23
 800193e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001956:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001968:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800196c:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001980:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2204      	movs	r2, #4
 8001988:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f9f8 	bl	8001d80 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0208 	orr.w	r2, r2, #8
 800199e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019a8:	2001      	movs	r0, #1
 80019aa:	f7ff fe39 	bl	8001620 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0204 	orr.w	r2, r2, #4
 80019c4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f7ff fe26 	bl	8001620 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 fd7c 	bl	80024da <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019f8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a10:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8001a24:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8001a28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a2c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2223      	movs	r2, #35	@ 0x23
 8001a32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e000      	b.n	8001a3c <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
  }
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a52:	2b23      	cmp	r3, #35	@ 0x23
 8001a54:	d170      	bne.n	8001b38 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2223      	movs	r2, #35	@ 0x23
 8001a5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8001a70:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8001a74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a78:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001a8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a90:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	f023 0302 	bic.w	r3, r3, #2
 8001aa4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001aa8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0204 	bic.w	r2, r2, #4
 8001ab8:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f7ff fdac 	bl	8001620 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fd02 	bl	80024da <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0208 	bic.w	r2, r2, #8
 8001ae4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff fd96 	bl	8001620 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e00e      	b.n	8001b20 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	3212      	adds	r2, #18
 8001b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d9ed      	bls.n	8001b02 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2210      	movs	r2, #16
 8001b30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	e000      	b.n	8001b3a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
  }
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b58:	f043 0201 	orr.w	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e045      	b.n	8001bf2 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b6c:	2b23      	cmp	r3, #35	@ 0x23
 8001b6e:	d13f      	bne.n	8001bf0 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 ff7b 	bl	8002a78 <ETH_Prepare_Tx_Descriptors>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d009      	beq.n	8001b9c <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b8e:	f043 0202 	orr.w	r2, r3, #2
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e02a      	b.n	8001bf2 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b9c:	f3bf 8f4f 	dsb	sy
}
 8001ba0:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d904      	bls.n	8001bbe <HAL_ETH_Transmit_IT+0x7c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb8:	1f1a      	subs	r2, r3, #4
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00d      	beq.n	8001bec <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2304      	movs	r3, #4
 8001bdc:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001be6:	461a      	mov	r2, r3
 8001be8:	2300      	movs	r3, #0
 8001bea:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e000      	b.n	8001bf2 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
  }
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b088      	sub	sp, #32
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c18:	f043 0201 	orr.w	r2, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0a8      	b.n	8001d78 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c2c:	2b23      	cmp	r3, #35	@ 0x23
 8001c2e:	d001      	beq.n	8001c34 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0a1      	b.n	8001d78 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c38:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	3212      	adds	r2, #18
 8001c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c44:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c4a:	f1c3 0304 	rsb	r3, r3, #4
 8001c4e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c50:	e06a      	b.n	8001d28 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d007      	beq.n	8001c6e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	69da      	ldr	r2, [r3, #28]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d103      	bne.n	8001c82 <HAL_ETH_ReadData+0x88>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d040      	beq.n	8001d04 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00c      	beq.n	8001cc6 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0c1b      	lsrs	r3, r3, #16
 8001cb2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001cb6:	3b04      	subs	r3, #4
 8001cb8:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001cde:	461a      	mov	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	f003 fb06 	bl	80052f4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	441a      	add	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	3301      	adds	r3, #1
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d902      	bls.n	8001d16 <HAL_ETH_ReadData+0x11c>
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	3b04      	subs	r3, #4
 8001d14:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	3212      	adds	r2, #18
 8001d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d20:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	3301      	adds	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db06      	blt.n	8001d3e <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d202      	bcs.n	8001d3e <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d089      	beq.n	8001c52 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	441a      	add	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f814 	bl	8001d80 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d108      	bne.n	8001d76 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e000      	b.n	8001d78 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d94:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	3212      	adds	r2, #18
 8001d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001da6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001da8:	e03d      	b.n	8001e26 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d112      	bne.n	8001dd8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 fa6c 	bl	8005294 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	74fb      	strb	r3, [r7, #19]
 8001dc6:	e007      	b.n	8001dd8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001dd8:	7cfb      	ldrb	r3, [r7, #19]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d023      	beq.n	8001e26 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d103      	bne.n	8001dee <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	4a24      	ldr	r2, [pc, #144]	@ (8001e7c <ETH_UpdateDescriptor+0xfc>)
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	e003      	b.n	8001df6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8001df4:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3301      	adds	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d902      	bls.n	8001e14 <ETH_UpdateDescriptor+0x94>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b04      	subs	r3, #4
 8001e12:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69fa      	ldr	r2, [r7, #28]
 8001e18:	3212      	adds	r2, #18
 8001e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1e:	617b      	str	r3, [r7, #20]
      desccount--;
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <ETH_UpdateDescriptor+0xb2>
 8001e2c:	7cfb      	ldrb	r3, [r7, #19]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1bb      	bne.n	8001daa <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d01a      	beq.n	8001e72 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001e46:	f3bf 8f5f 	dmb	sy
}
 8001e4a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6919      	ldr	r1, [r3, #16]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	18ca      	adds	r2, r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e64:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001e72:	bf00      	nop
 8001e74:	3720      	adds	r7, #32
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	80004600 	.word	0x80004600

08001e80 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3318      	adds	r3, #24
 8001e8c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e92:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e98:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001e9e:	e03f      	b.n	8001f20 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001ec8:	7bbb      	ldrb	r3, [r7, #14]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d028      	beq.n	8001f20 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68d9      	ldr	r1, [r3, #12]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	440b      	add	r3, r1
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	db1b      	blt.n	8001f1c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fa3f 	bl	8005374 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	3304      	adds	r3, #4
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	2200      	movs	r2, #0
 8001f02:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	3301      	adds	r3, #1
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f1a:	e001      	b.n	8001f20 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_ETH_ReleaseTxPacket+0xac>
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1b9      	bne.n	8001ea0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4e:	2b40      	cmp	r3, #64	@ 0x40
 8001f50:	d112      	bne.n	8001f78 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f60:	2b40      	cmp	r3, #64	@ 0x40
 8001f62:	d109      	bne.n	8001f78 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b50      	ldr	r3, [pc, #320]	@ (80020b0 <HAL_ETH_IRQHandler+0x178>)
 8001f70:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f002 fd40 	bl	80049f8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d113      	bne.n	8001fb2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d10a      	bne.n	8001fb2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001faa:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f002 fd33 	bl	8004a18 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fc4:	d14c      	bne.n	8002060 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fd8:	d142      	bne.n	8002060 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe0:	f043 0208 	orr.w	r2, r3, #8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ff8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ffc:	d11a      	bne.n	8002034 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	4b2a      	ldr	r3, [pc, #168]	@ (80020b4 <HAL_ETH_IRQHandler+0x17c>)
 800200a:	4013      	ands	r3, r2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002024:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002028:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	22e0      	movs	r2, #224	@ 0xe0
 800202e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002032:	e012      	b.n	800205a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002042:	4013      	ands	r3, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002052:	461a      	mov	r2, r3
 8002054:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002058:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f002 fcec 	bl	8004a38 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b08      	cmp	r3, #8
 800206c:	d10e      	bne.n	800208c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002074:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f81c 	bl	80020bc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800208c:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_ETH_IRQHandler+0x180>)
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002098:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <HAL_ETH_IRQHandler+0x180>)
 800209a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800209e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f815 	bl	80020d0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	00010040 	.word	0x00010040
 80020b4:	007e2000 	.word	0x007e2000
 80020b8:	40013c00 	.word	0x40013c00

080020bc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 031c 	and.w	r3, r3, #28
 8002100:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	02db      	lsls	r3, r3, #11
 8002106:	b29b      	uxth	r3, r3
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	019b      	lsls	r3, r3, #6
 8002112:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f023 0302 	bic.w	r3, r3, #2
 8002122:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002134:	f7ff fa68 	bl	8001608 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800213a:	e00d      	b.n	8002158 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800213c:	f7ff fa64 	bl	8001608 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800214a:	d301      	bcc.n	8002150 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e010      	b.n	8002172 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1ec      	bne.n	800213c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	b29b      	uxth	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f003 031c 	and.w	r3, r3, #28
 8002196:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	02db      	lsls	r3, r3, #11
 800219c:	b29b      	uxth	r3, r3
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	019b      	lsls	r3, r3, #6
 80021a8:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021d4:	f7ff fa18 	bl	8001608 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021da:	e00d      	b.n	80021f8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80021dc:	f7ff fa14 	bl	8001608 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ea:	d301      	bcc.n	80021f0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e009      	b.n	8002204 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ec      	bne.n	80021dc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0d9      	b.n	80023d4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf14      	ite	ne
 800222e:	2301      	movne	r3, #1
 8002230:	2300      	moveq	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf14      	ite	ne
 8002274:	2301      	movne	r3, #1
 8002276:	2300      	moveq	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf0c      	ite	eq
 800228e:	2301      	moveq	r3, #1
 8002290:	2300      	movne	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bf0c      	ite	eq
 80022de:	2301      	moveq	r3, #1
 80022e0:	2300      	movne	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230e:	2b00      	cmp	r3, #0
 8002310:	bf14      	ite	ne
 8002312:	2301      	movne	r3, #1
 8002314:	2300      	moveq	r3, #0
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002336:	2b00      	cmp	r3, #0
 8002338:	bf14      	ite	ne
 800233a:	2301      	movne	r3, #1
 800233c:	2300      	moveq	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	0c1b      	lsrs	r3, r3, #16
 8002394:	b29a      	uxth	r2, r3
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	bf14      	ite	ne
 80023a8:	2301      	movne	r3, #1
 80023aa:	2300      	moveq	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bf14      	ite	ne
 80023c4:	2301      	movne	r3, #1
 80023c6:	2300      	moveq	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e00b      	b.n	800240c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d105      	bne.n	800240a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80023fe:	6839      	ldr	r1, [r7, #0]
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f88f 	bl	8002524 <ETH_SetMACConfig>

    return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e000      	b.n	800240c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
  }
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f023 031c 	bic.w	r3, r3, #28
 800242a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800242c:	f001 fa84 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8002430:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4a1d      	ldr	r2, [pc, #116]	@ (80024ac <HAL_ETH_SetMDIOClockRange+0x98>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d908      	bls.n	800244c <HAL_ETH_SetMDIOClockRange+0x38>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	4a1c      	ldr	r2, [pc, #112]	@ (80024b0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d804      	bhi.n	800244c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f043 0308 	orr.w	r3, r3, #8
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	e027      	b.n	800249c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4a18      	ldr	r2, [pc, #96]	@ (80024b0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d908      	bls.n	8002466 <HAL_ETH_SetMDIOClockRange+0x52>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4a17      	ldr	r2, [pc, #92]	@ (80024b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d204      	bcs.n	8002466 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f043 030c 	orr.w	r3, r3, #12
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	e01a      	b.n	800249c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d303      	bcc.n	8002476 <HAL_ETH_SetMDIOClockRange+0x62>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4a11      	ldr	r2, [pc, #68]	@ (80024b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d911      	bls.n	800249a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	4a0f      	ldr	r2, [pc, #60]	@ (80024b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d908      	bls.n	8002490 <HAL_ETH_SetMDIOClockRange+0x7c>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4a0e      	ldr	r2, [pc, #56]	@ (80024bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d804      	bhi.n	8002490 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f043 0304 	orr.w	r3, r3, #4
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e005      	b.n	800249c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f043 0310 	orr.w	r3, r3, #16
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	e000      	b.n	800249c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800249a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	611a      	str	r2, [r3, #16]
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	01312cff 	.word	0x01312cff
 80024b0:	02160ebf 	.word	0x02160ebf
 80024b4:	03938700 	.word	0x03938700
 80024b8:	05f5e0ff 	.word	0x05f5e0ff
 80024bc:	08f0d17f 	.word	0x08f0d17f

080024c0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024fc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800250a:	2001      	movs	r0, #1
 800250c:	f7ff f888 	bl	8001620 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800251a:	6193      	str	r3, [r2, #24]
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4b51      	ldr	r3, [pc, #324]	@ (8002680 <ETH_SetMACConfig+0x15c>)
 800253a:	4013      	ands	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	7c1b      	ldrb	r3, [r3, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d102      	bne.n	800254c <ETH_SetMACConfig+0x28>
 8002546:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800254a:	e000      	b.n	800254e <ETH_SetMACConfig+0x2a>
 800254c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	7c5b      	ldrb	r3, [r3, #17]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <ETH_SetMACConfig+0x38>
 8002556:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800255a:	e000      	b.n	800255e <ETH_SetMACConfig+0x3a>
 800255c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800255e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002564:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	7fdb      	ldrb	r3, [r3, #31]
 800256a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800256c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002572:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	7f92      	ldrb	r2, [r2, #30]
 8002578:	2a00      	cmp	r2, #0
 800257a:	d102      	bne.n	8002582 <ETH_SetMACConfig+0x5e>
 800257c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002580:	e000      	b.n	8002584 <ETH_SetMACConfig+0x60>
 8002582:	2200      	movs	r2, #0
                        macconf->Speed |
 8002584:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	7f1b      	ldrb	r3, [r3, #28]
 800258a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800258c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002592:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	791b      	ldrb	r3, [r3, #4]
 8002598:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800259a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	f892 2020 	ldrb.w	r2, [r2, #32]
 80025a2:	2a00      	cmp	r2, #0
 80025a4:	d102      	bne.n	80025ac <ETH_SetMACConfig+0x88>
 80025a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025aa:	e000      	b.n	80025ae <ETH_SetMACConfig+0x8a>
 80025ac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	7bdb      	ldrb	r3, [r3, #15]
 80025b4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80025b6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80025bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025c4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025c6:	4313      	orrs	r3, r2
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025de:	2001      	movs	r0, #1
 80025e0:	f7ff f81e 	bl	8001620 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80025fa:	4013      	ands	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002602:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800260a:	2a00      	cmp	r2, #0
 800260c:	d101      	bne.n	8002612 <ETH_SetMACConfig+0xee>
 800260e:	2280      	movs	r2, #128	@ 0x80
 8002610:	e000      	b.n	8002614 <ETH_SetMACConfig+0xf0>
 8002612:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002614:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800261a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002622:	2a01      	cmp	r2, #1
 8002624:	d101      	bne.n	800262a <ETH_SetMACConfig+0x106>
 8002626:	2208      	movs	r2, #8
 8002628:	e000      	b.n	800262c <ETH_SetMACConfig+0x108>
 800262a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800262c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002634:	2a01      	cmp	r2, #1
 8002636:	d101      	bne.n	800263c <ETH_SetMACConfig+0x118>
 8002638:	2204      	movs	r2, #4
 800263a:	e000      	b.n	800263e <ETH_SetMACConfig+0x11a>
 800263c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800263e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002646:	2a01      	cmp	r2, #1
 8002648:	d101      	bne.n	800264e <ETH_SetMACConfig+0x12a>
 800264a:	2202      	movs	r2, #2
 800264c:	e000      	b.n	8002650 <ETH_SetMACConfig+0x12c>
 800264e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002650:	4313      	orrs	r3, r2
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002668:	2001      	movs	r0, #1
 800266a:	f7fe ffd9 	bl	8001620 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	619a      	str	r2, [r3, #24]
}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	ff20810f 	.word	0xff20810f

08002684 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <ETH_SetDMAConfig+0x110>)
 800269e:	4013      	ands	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	7b1b      	ldrb	r3, [r3, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d102      	bne.n	80026b0 <ETH_SetDMAConfig+0x2c>
 80026aa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80026ae:	e000      	b.n	80026b2 <ETH_SetDMAConfig+0x2e>
 80026b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	7b5b      	ldrb	r3, [r3, #13]
 80026b6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026b8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	7f52      	ldrb	r2, [r2, #29]
 80026be:	2a00      	cmp	r2, #0
 80026c0:	d102      	bne.n	80026c8 <ETH_SetDMAConfig+0x44>
 80026c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80026c6:	e000      	b.n	80026ca <ETH_SetDMAConfig+0x46>
 80026c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80026ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	7b9b      	ldrb	r3, [r3, #14]
 80026d0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026d2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	7f1b      	ldrb	r3, [r3, #28]
 80026de:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80026e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	7f9b      	ldrb	r3, [r3, #30]
 80026e6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80026e8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80026ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026f6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026f8:	4313      	orrs	r3, r2
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002708:	461a      	mov	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800271a:	2001      	movs	r0, #1
 800271c:	f7fe ff80 	bl	8001620 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002728:	461a      	mov	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	791b      	ldrb	r3, [r3, #4]
 8002732:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002738:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800273e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002744:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800274c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800274e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002754:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002756:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800275c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002766:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800276a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002778:	2001      	movs	r0, #1
 800277a:	f7fe ff51 	bl	8001620 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6013      	str	r3, [r2, #0]
}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	f8de3f23 	.word	0xf8de3f23

08002798 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0a6      	sub	sp, #152	@ 0x98
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80027a0:	2301      	movs	r3, #1
 80027a2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80027a6:	2301      	movs	r3, #1
 80027a8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80027ac:	2300      	movs	r3, #0
 80027ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80027bc:	2300      	movs	r3, #0
 80027be:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80027c2:	2301      	movs	r3, #1
 80027c4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027d4:	2300      	movs	r3, #0
 80027d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80027fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002800:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002804:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002806:	2300      	movs	r3, #0
 8002808:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800280c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002810:	4619      	mov	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff fe86 	bl	8002524 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002818:	2301      	movs	r3, #1
 800281a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800281c:	2301      	movs	r3, #1
 800281e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002820:	2301      	movs	r3, #1
 8002822:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002826:	2301      	movs	r3, #1
 8002828:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800282e:	2300      	movs	r3, #0
 8002830:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800283a:	2300      	movs	r3, #0
 800283c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800283e:	2301      	movs	r3, #1
 8002840:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002844:	2301      	movs	r3, #1
 8002846:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002848:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800284c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800284e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002852:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002854:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002858:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800285a:	2301      	movs	r3, #1
 800285c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002860:	2300      	movs	r3, #0
 8002862:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002864:	2300      	movs	r3, #0
 8002866:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002868:	f107 0308 	add.w	r3, r7, #8
 800286c:	4619      	mov	r1, r3
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ff08 	bl	8002684 <ETH_SetDMAConfig>
}
 8002874:	bf00      	nop
 8002876:	3798      	adds	r7, #152	@ 0x98
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3305      	adds	r3, #5
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	3204      	adds	r2, #4
 8002894:	7812      	ldrb	r2, [r2, #0]
 8002896:	4313      	orrs	r3, r2
 8002898:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	4b11      	ldr	r3, [pc, #68]	@ (80028e4 <ETH_MACAddressConfig+0x68>)
 800289e:	4413      	add	r3, r2
 80028a0:	461a      	mov	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3303      	adds	r3, #3
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	061a      	lsls	r2, r3, #24
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3302      	adds	r3, #2
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	041b      	lsls	r3, r3, #16
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3301      	adds	r3, #1
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	4313      	orrs	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	7812      	ldrb	r2, [r2, #0]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <ETH_MACAddressConfig+0x6c>)
 80028ce:	4413      	add	r3, r2
 80028d0:	461a      	mov	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	6013      	str	r3, [r2, #0]
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40028040 	.word	0x40028040
 80028e8:	40028044 	.word	0x40028044

080028ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	e03e      	b.n	8002978 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68d9      	ldr	r1, [r3, #12]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	440b      	add	r3, r1
 800290a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2200      	movs	r2, #0
 8002916:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2200      	movs	r2, #0
 8002922:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002924:	68b9      	ldr	r1, [r7, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	3206      	adds	r2, #6
 800292c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d80c      	bhi.n	800295c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68d9      	ldr	r1, [r3, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	440b      	add	r3, r1
 8002954:	461a      	mov	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	e004      	b.n	8002966 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	461a      	mov	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3301      	adds	r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b03      	cmp	r3, #3
 800297c:	d9bd      	bls.n	80028fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002990:	611a      	str	r2, [r3, #16]
}
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800299e:	b480      	push	{r7}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	e046      	b.n	8002a3a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6919      	ldr	r1, [r3, #16]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2200      	movs	r2, #0
 80029c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2200      	movs	r2, #0
 80029da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2200      	movs	r2, #0
 80029e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80029e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 80029f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	3212      	adds	r2, #18
 8002a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d80c      	bhi.n	8002a2a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6919      	ldr	r1, [r3, #16]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	461a      	mov	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	60da      	str	r2, [r3, #12]
 8002a28:	e004      	b.n	8002a34 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3301      	adds	r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d9b5      	bls.n	80029ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a6a:	60da      	str	r2, [r3, #12]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b08d      	sub	sp, #52	@ 0x34
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	3318      	adds	r3, #24
 8002a88:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002aba:	d007      	beq.n	8002acc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002acc:	2302      	movs	r3, #2
 8002ace:	e103      	b.n	8002cd8 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002ae8:	f023 031f 	bic.w	r3, r3, #31
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	6852      	ldr	r2, [r2, #4]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b56:	f3bf 8f5f 	dmb	sy
}
 8002b5a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002b68:	e084      	b.n	8002c74 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d006      	beq.n	8002b8a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	e005      	b.n	8002b96 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b98:	3301      	adds	r3, #1
 8002b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d902      	bls.n	8002ba8 <ETH_Prepare_Tx_Descriptors+0x130>
 8002ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba4:	3b04      	subs	r3, #4
 8002ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bca:	d007      	beq.n	8002bdc <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d029      	beq.n	8002c30 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bee:	e019      	b.n	8002c24 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002bf0:	f3bf 8f5f 	dmb	sy
}
 8002bf4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c04:	3301      	adds	r3, #1
 8002c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d902      	bls.n	8002c14 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c10:	3b04      	subs	r3, #4
 8002c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c20:	3301      	adds	r3, #1
 8002c22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d3e1      	bcc.n	8002bf0 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e053      	b.n	8002cd8 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	3301      	adds	r3, #1
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002c4e:	f023 031f 	bic.w	r3, r3, #31
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	6852      	ldr	r2, [r2, #4]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c62:	f3bf 8f5f 	dmb	sy
}
 8002c66:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f47f af76 	bne.w	8002b6a <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d006      	beq.n	8002c92 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e005      	b.n	8002c9e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cae:	6979      	ldr	r1, [r7, #20]
 8002cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cbe:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc0:	b672      	cpsid	i
}
 8002cc2:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	4413      	add	r3, r2
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002cd2:	b662      	cpsie	i
}
 8002cd4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3734      	adds	r7, #52	@ 0x34
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	@ 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	e177      	b.n	8002ff0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d00:	2201      	movs	r2, #1
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	f040 8166 	bne.w	8002fea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d005      	beq.n	8002d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d130      	bne.n	8002d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	2203      	movs	r2, #3
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 0201 	and.w	r2, r3, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d017      	beq.n	8002dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	2203      	movs	r2, #3
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d123      	bne.n	8002e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	08da      	lsrs	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3208      	adds	r2, #8
 8002de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	220f      	movs	r2, #15
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	08da      	lsrs	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3208      	adds	r2, #8
 8002e22:	69b9      	ldr	r1, [r7, #24]
 8002e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 0203 	and.w	r2, r3, #3
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80c0 	beq.w	8002fea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	4b66      	ldr	r3, [pc, #408]	@ (8003008 <HAL_GPIO_Init+0x324>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e72:	4a65      	ldr	r2, [pc, #404]	@ (8003008 <HAL_GPIO_Init+0x324>)
 8002e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e7a:	4b63      	ldr	r3, [pc, #396]	@ (8003008 <HAL_GPIO_Init+0x324>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e86:	4a61      	ldr	r2, [pc, #388]	@ (800300c <HAL_GPIO_Init+0x328>)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	220f      	movs	r2, #15
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a58      	ldr	r2, [pc, #352]	@ (8003010 <HAL_GPIO_Init+0x32c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d037      	beq.n	8002f22 <HAL_GPIO_Init+0x23e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a57      	ldr	r2, [pc, #348]	@ (8003014 <HAL_GPIO_Init+0x330>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d031      	beq.n	8002f1e <HAL_GPIO_Init+0x23a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a56      	ldr	r2, [pc, #344]	@ (8003018 <HAL_GPIO_Init+0x334>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d02b      	beq.n	8002f1a <HAL_GPIO_Init+0x236>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a55      	ldr	r2, [pc, #340]	@ (800301c <HAL_GPIO_Init+0x338>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d025      	beq.n	8002f16 <HAL_GPIO_Init+0x232>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a54      	ldr	r2, [pc, #336]	@ (8003020 <HAL_GPIO_Init+0x33c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01f      	beq.n	8002f12 <HAL_GPIO_Init+0x22e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a53      	ldr	r2, [pc, #332]	@ (8003024 <HAL_GPIO_Init+0x340>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d019      	beq.n	8002f0e <HAL_GPIO_Init+0x22a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a52      	ldr	r2, [pc, #328]	@ (8003028 <HAL_GPIO_Init+0x344>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d013      	beq.n	8002f0a <HAL_GPIO_Init+0x226>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a51      	ldr	r2, [pc, #324]	@ (800302c <HAL_GPIO_Init+0x348>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00d      	beq.n	8002f06 <HAL_GPIO_Init+0x222>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a50      	ldr	r2, [pc, #320]	@ (8003030 <HAL_GPIO_Init+0x34c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d007      	beq.n	8002f02 <HAL_GPIO_Init+0x21e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4f      	ldr	r2, [pc, #316]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d101      	bne.n	8002efe <HAL_GPIO_Init+0x21a>
 8002efa:	2309      	movs	r3, #9
 8002efc:	e012      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002efe:	230a      	movs	r3, #10
 8002f00:	e010      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f02:	2308      	movs	r3, #8
 8002f04:	e00e      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f06:	2307      	movs	r3, #7
 8002f08:	e00c      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f0a:	2306      	movs	r3, #6
 8002f0c:	e00a      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f0e:	2305      	movs	r3, #5
 8002f10:	e008      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f12:	2304      	movs	r3, #4
 8002f14:	e006      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f16:	2303      	movs	r3, #3
 8002f18:	e004      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e002      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_GPIO_Init+0x240>
 8002f22:	2300      	movs	r3, #0
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	f002 0203 	and.w	r2, r2, #3
 8002f2a:	0092      	lsls	r2, r2, #2
 8002f2c:	4093      	lsls	r3, r2
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f34:	4935      	ldr	r1, [pc, #212]	@ (800300c <HAL_GPIO_Init+0x328>)
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	089b      	lsrs	r3, r3, #2
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f42:	4b3d      	ldr	r3, [pc, #244]	@ (8003038 <HAL_GPIO_Init+0x354>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f66:	4a34      	ldr	r2, [pc, #208]	@ (8003038 <HAL_GPIO_Init+0x354>)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f6c:	4b32      	ldr	r3, [pc, #200]	@ (8003038 <HAL_GPIO_Init+0x354>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f90:	4a29      	ldr	r2, [pc, #164]	@ (8003038 <HAL_GPIO_Init+0x354>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f96:	4b28      	ldr	r3, [pc, #160]	@ (8003038 <HAL_GPIO_Init+0x354>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fba:	4a1f      	ldr	r2, [pc, #124]	@ (8003038 <HAL_GPIO_Init+0x354>)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <HAL_GPIO_Init+0x354>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fe4:	4a14      	ldr	r2, [pc, #80]	@ (8003038 <HAL_GPIO_Init+0x354>)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	3301      	adds	r3, #1
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	2b0f      	cmp	r3, #15
 8002ff4:	f67f ae84 	bls.w	8002d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	3724      	adds	r7, #36	@ 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
 800300c:	40013800 	.word	0x40013800
 8003010:	40020000 	.word	0x40020000
 8003014:	40020400 	.word	0x40020400
 8003018:	40020800 	.word	0x40020800
 800301c:	40020c00 	.word	0x40020c00
 8003020:	40021000 	.word	0x40021000
 8003024:	40021400 	.word	0x40021400
 8003028:	40021800 	.word	0x40021800
 800302c:	40021c00 	.word	0x40021c00
 8003030:	40022000 	.word	0x40022000
 8003034:	40022400 	.word	0x40022400
 8003038:	40013c00 	.word	0x40013c00

0800303c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]
 8003048:	4613      	mov	r3, r2
 800304a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800304c:	787b      	ldrb	r3, [r7, #1]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003052:	887a      	ldrh	r2, [r7, #2]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003058:	e003      	b.n	8003062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800305a:	887b      	ldrh	r3, [r7, #2]
 800305c:	041a      	lsls	r2, r3, #16
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	619a      	str	r2, [r3, #24]
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e267      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d075      	beq.n	800317a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800308e:	4b88      	ldr	r3, [pc, #544]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b04      	cmp	r3, #4
 8003098:	d00c      	beq.n	80030b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309a:	4b85      	ldr	r3, [pc, #532]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d112      	bne.n	80030cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a6:	4b82      	ldr	r3, [pc, #520]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030b2:	d10b      	bne.n	80030cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	4b7e      	ldr	r3, [pc, #504]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d05b      	beq.n	8003178 <HAL_RCC_OscConfig+0x108>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d157      	bne.n	8003178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e242      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d4:	d106      	bne.n	80030e4 <HAL_RCC_OscConfig+0x74>
 80030d6:	4b76      	ldr	r3, [pc, #472]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a75      	ldr	r2, [pc, #468]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 80030dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	e01d      	b.n	8003120 <HAL_RCC_OscConfig+0xb0>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0x98>
 80030ee:	4b70      	ldr	r3, [pc, #448]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a6f      	ldr	r2, [pc, #444]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 80030f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b6d      	ldr	r3, [pc, #436]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a6c      	ldr	r2, [pc, #432]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e00b      	b.n	8003120 <HAL_RCC_OscConfig+0xb0>
 8003108:	4b69      	ldr	r3, [pc, #420]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a68      	ldr	r2, [pc, #416]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 800310e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4b66      	ldr	r3, [pc, #408]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a65      	ldr	r2, [pc, #404]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 800311a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800311e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d013      	beq.n	8003150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe fa6e 	bl	8001608 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003130:	f7fe fa6a 	bl	8001608 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	@ 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e207      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b5b      	ldr	r3, [pc, #364]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0xc0>
 800314e:	e014      	b.n	800317a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7fe fa5a 	bl	8001608 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003158:	f7fe fa56 	bl	8001608 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	@ 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e1f3      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316a:	4b51      	ldr	r3, [pc, #324]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0xe8>
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d063      	beq.n	800324e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003186:	4b4a      	ldr	r3, [pc, #296]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003192:	4b47      	ldr	r3, [pc, #284]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800319a:	2b08      	cmp	r3, #8
 800319c:	d11c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800319e:	4b44      	ldr	r3, [pc, #272]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d116      	bne.n	80031d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031aa:	4b41      	ldr	r3, [pc, #260]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_RCC_OscConfig+0x152>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d001      	beq.n	80031c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e1c7      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c2:	4b3b      	ldr	r3, [pc, #236]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4937      	ldr	r1, [pc, #220]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d6:	e03a      	b.n	800324e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d020      	beq.n	8003222 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e0:	4b34      	ldr	r3, [pc, #208]	@ (80032b4 <HAL_RCC_OscConfig+0x244>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e6:	f7fe fa0f 	bl	8001608 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ee:	f7fe fa0b 	bl	8001608 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e1a8      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003200:	4b2b      	ldr	r3, [pc, #172]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320c:	4b28      	ldr	r3, [pc, #160]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4925      	ldr	r1, [pc, #148]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 800321c:	4313      	orrs	r3, r2
 800321e:	600b      	str	r3, [r1, #0]
 8003220:	e015      	b.n	800324e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003222:	4b24      	ldr	r3, [pc, #144]	@ (80032b4 <HAL_RCC_OscConfig+0x244>)
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7fe f9ee 	bl	8001608 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003230:	f7fe f9ea 	bl	8001608 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e187      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003242:	4b1b      	ldr	r3, [pc, #108]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d036      	beq.n	80032c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d016      	beq.n	8003290 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003262:	4b15      	ldr	r3, [pc, #84]	@ (80032b8 <HAL_RCC_OscConfig+0x248>)
 8003264:	2201      	movs	r2, #1
 8003266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fe f9ce 	bl	8001608 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003270:	f7fe f9ca 	bl	8001608 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e167      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003282:	4b0b      	ldr	r3, [pc, #44]	@ (80032b0 <HAL_RCC_OscConfig+0x240>)
 8003284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x200>
 800328e:	e01b      	b.n	80032c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <HAL_RCC_OscConfig+0x248>)
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003296:	f7fe f9b7 	bl	8001608 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329c:	e00e      	b.n	80032bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329e:	f7fe f9b3 	bl	8001608 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d907      	bls.n	80032bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e150      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
 80032b0:	40023800 	.word	0x40023800
 80032b4:	42470000 	.word	0x42470000
 80032b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032bc:	4b88      	ldr	r3, [pc, #544]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 80032be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1ea      	bne.n	800329e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 8097 	beq.w	8003404 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d6:	2300      	movs	r3, #0
 80032d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032da:	4b81      	ldr	r3, [pc, #516]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10f      	bne.n	8003306 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	4b7d      	ldr	r3, [pc, #500]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	4a7c      	ldr	r2, [pc, #496]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 80032f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032f6:	4b7a      	ldr	r3, [pc, #488]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003302:	2301      	movs	r3, #1
 8003304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003306:	4b77      	ldr	r3, [pc, #476]	@ (80034e4 <HAL_RCC_OscConfig+0x474>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d118      	bne.n	8003344 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003312:	4b74      	ldr	r3, [pc, #464]	@ (80034e4 <HAL_RCC_OscConfig+0x474>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a73      	ldr	r2, [pc, #460]	@ (80034e4 <HAL_RCC_OscConfig+0x474>)
 8003318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800331c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331e:	f7fe f973 	bl	8001608 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003326:	f7fe f96f 	bl	8001608 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e10c      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003338:	4b6a      	ldr	r3, [pc, #424]	@ (80034e4 <HAL_RCC_OscConfig+0x474>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d106      	bne.n	800335a <HAL_RCC_OscConfig+0x2ea>
 800334c:	4b64      	ldr	r3, [pc, #400]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003350:	4a63      	ldr	r2, [pc, #396]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	@ 0x70
 8003358:	e01c      	b.n	8003394 <HAL_RCC_OscConfig+0x324>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b05      	cmp	r3, #5
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x30c>
 8003362:	4b5f      	ldr	r3, [pc, #380]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003366:	4a5e      	ldr	r2, [pc, #376]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 8003368:	f043 0304 	orr.w	r3, r3, #4
 800336c:	6713      	str	r3, [r2, #112]	@ 0x70
 800336e:	4b5c      	ldr	r3, [pc, #368]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003372:	4a5b      	ldr	r2, [pc, #364]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	6713      	str	r3, [r2, #112]	@ 0x70
 800337a:	e00b      	b.n	8003394 <HAL_RCC_OscConfig+0x324>
 800337c:	4b58      	ldr	r3, [pc, #352]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003380:	4a57      	ldr	r2, [pc, #348]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 8003382:	f023 0301 	bic.w	r3, r3, #1
 8003386:	6713      	str	r3, [r2, #112]	@ 0x70
 8003388:	4b55      	ldr	r3, [pc, #340]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338c:	4a54      	ldr	r2, [pc, #336]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 800338e:	f023 0304 	bic.w	r3, r3, #4
 8003392:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d015      	beq.n	80033c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7fe f934 	bl	8001608 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a2:	e00a      	b.n	80033ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a4:	f7fe f930 	bl	8001608 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e0cb      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ba:	4b49      	ldr	r3, [pc, #292]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0ee      	beq.n	80033a4 <HAL_RCC_OscConfig+0x334>
 80033c6:	e014      	b.n	80033f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c8:	f7fe f91e 	bl	8001608 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d0:	f7fe f91a 	bl	8001608 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e0b5      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e6:	4b3e      	ldr	r3, [pc, #248]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1ee      	bne.n	80033d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f8:	4b39      	ldr	r3, [pc, #228]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	4a38      	ldr	r2, [pc, #224]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 80033fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003402:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80a1 	beq.w	8003550 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800340e:	4b34      	ldr	r3, [pc, #208]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b08      	cmp	r3, #8
 8003418:	d05c      	beq.n	80034d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d141      	bne.n	80034a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003422:	4b31      	ldr	r3, [pc, #196]	@ (80034e8 <HAL_RCC_OscConfig+0x478>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fe f8ee 	bl	8001608 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003430:	f7fe f8ea 	bl	8001608 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e087      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003442:	4b27      	ldr	r3, [pc, #156]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69da      	ldr	r2, [r3, #28]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	019b      	lsls	r3, r3, #6
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003464:	085b      	lsrs	r3, r3, #1
 8003466:	3b01      	subs	r3, #1
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	491b      	ldr	r1, [pc, #108]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003478:	4b1b      	ldr	r3, [pc, #108]	@ (80034e8 <HAL_RCC_OscConfig+0x478>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347e:	f7fe f8c3 	bl	8001608 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003486:	f7fe f8bf 	bl	8001608 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e05c      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003498:	4b11      	ldr	r3, [pc, #68]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x416>
 80034a4:	e054      	b.n	8003550 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a6:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <HAL_RCC_OscConfig+0x478>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe f8ac 	bl	8001608 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b4:	f7fe f8a8 	bl	8001608 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e045      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c6:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <HAL_RCC_OscConfig+0x470>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x444>
 80034d2:	e03d      	b.n	8003550 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d107      	bne.n	80034ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e038      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40007000 	.word	0x40007000
 80034e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034ec:	4b1b      	ldr	r3, [pc, #108]	@ (800355c <HAL_RCC_OscConfig+0x4ec>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d028      	beq.n	800354c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003504:	429a      	cmp	r2, r3
 8003506:	d121      	bne.n	800354c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d11a      	bne.n	800354c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800351c:	4013      	ands	r3, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003524:	4293      	cmp	r3, r2
 8003526:	d111      	bne.n	800354c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	3b01      	subs	r3, #1
 8003536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d107      	bne.n	800354c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800

08003560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0cc      	b.n	800370e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003574:	4b68      	ldr	r3, [pc, #416]	@ (8003718 <HAL_RCC_ClockConfig+0x1b8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d90c      	bls.n	800359c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4b65      	ldr	r3, [pc, #404]	@ (8003718 <HAL_RCC_ClockConfig+0x1b8>)
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800358a:	4b63      	ldr	r3, [pc, #396]	@ (8003718 <HAL_RCC_ClockConfig+0x1b8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0b8      	b.n	800370e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d020      	beq.n	80035ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035b4:	4b59      	ldr	r3, [pc, #356]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a58      	ldr	r2, [pc, #352]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035cc:	4b53      	ldr	r3, [pc, #332]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4a52      	ldr	r2, [pc, #328]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d8:	4b50      	ldr	r3, [pc, #320]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	494d      	ldr	r1, [pc, #308]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d044      	beq.n	8003680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	4b47      	ldr	r3, [pc, #284]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d119      	bne.n	800363e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e07f      	b.n	800370e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d003      	beq.n	800361e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800361a:	2b03      	cmp	r3, #3
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361e:	4b3f      	ldr	r3, [pc, #252]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e06f      	b.n	800370e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362e:	4b3b      	ldr	r3, [pc, #236]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e067      	b.n	800370e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363e:	4b37      	ldr	r3, [pc, #220]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f023 0203 	bic.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	4934      	ldr	r1, [pc, #208]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	4313      	orrs	r3, r2
 800364e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003650:	f7fd ffda 	bl	8001608 <HAL_GetTick>
 8003654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	e00a      	b.n	800366e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003658:	f7fd ffd6 	bl	8001608 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e04f      	b.n	800370e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	4b2b      	ldr	r3, [pc, #172]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 020c 	and.w	r2, r3, #12
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	429a      	cmp	r2, r3
 800367e:	d1eb      	bne.n	8003658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003680:	4b25      	ldr	r3, [pc, #148]	@ (8003718 <HAL_RCC_ClockConfig+0x1b8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d20c      	bcs.n	80036a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b22      	ldr	r3, [pc, #136]	@ (8003718 <HAL_RCC_ClockConfig+0x1b8>)
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003696:	4b20      	ldr	r3, [pc, #128]	@ (8003718 <HAL_RCC_ClockConfig+0x1b8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e032      	b.n	800370e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b4:	4b19      	ldr	r3, [pc, #100]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4916      	ldr	r1, [pc, #88]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d009      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036d2:	4b12      	ldr	r3, [pc, #72]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	490e      	ldr	r1, [pc, #56]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036e6:	f000 f821 	bl	800372c <HAL_RCC_GetSysClockFreq>
 80036ea:	4602      	mov	r2, r0
 80036ec:	4b0b      	ldr	r3, [pc, #44]	@ (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	490a      	ldr	r1, [pc, #40]	@ (8003720 <HAL_RCC_ClockConfig+0x1c0>)
 80036f8:	5ccb      	ldrb	r3, [r1, r3]
 80036fa:	fa22 f303 	lsr.w	r3, r2, r3
 80036fe:	4a09      	ldr	r2, [pc, #36]	@ (8003724 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003702:	4b09      	ldr	r3, [pc, #36]	@ (8003728 <HAL_RCC_ClockConfig+0x1c8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd fb78 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40023c00 	.word	0x40023c00
 800371c:	40023800 	.word	0x40023800
 8003720:	0801ade8 	.word	0x0801ade8
 8003724:	20000000 	.word	0x20000000
 8003728:	20000004 	.word	0x20000004

0800372c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800372c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003730:	b094      	sub	sp, #80	@ 0x50
 8003732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	647b      	str	r3, [r7, #68]	@ 0x44
 8003738:	2300      	movs	r3, #0
 800373a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800373c:	2300      	movs	r3, #0
 800373e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003744:	4b79      	ldr	r3, [pc, #484]	@ (800392c <HAL_RCC_GetSysClockFreq+0x200>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b08      	cmp	r3, #8
 800374e:	d00d      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0x40>
 8003750:	2b08      	cmp	r3, #8
 8003752:	f200 80e1 	bhi.w	8003918 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0x34>
 800375a:	2b04      	cmp	r3, #4
 800375c:	d003      	beq.n	8003766 <HAL_RCC_GetSysClockFreq+0x3a>
 800375e:	e0db      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003760:	4b73      	ldr	r3, [pc, #460]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x204>)
 8003762:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003764:	e0db      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003766:	4b73      	ldr	r3, [pc, #460]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x208>)
 8003768:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800376a:	e0d8      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800376c:	4b6f      	ldr	r3, [pc, #444]	@ (800392c <HAL_RCC_GetSysClockFreq+0x200>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003774:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003776:	4b6d      	ldr	r3, [pc, #436]	@ (800392c <HAL_RCC_GetSysClockFreq+0x200>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d063      	beq.n	800384a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003782:	4b6a      	ldr	r3, [pc, #424]	@ (800392c <HAL_RCC_GetSysClockFreq+0x200>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	099b      	lsrs	r3, r3, #6
 8003788:	2200      	movs	r2, #0
 800378a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800378c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800378e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003794:	633b      	str	r3, [r7, #48]	@ 0x30
 8003796:	2300      	movs	r3, #0
 8003798:	637b      	str	r3, [r7, #52]	@ 0x34
 800379a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800379e:	4622      	mov	r2, r4
 80037a0:	462b      	mov	r3, r5
 80037a2:	f04f 0000 	mov.w	r0, #0
 80037a6:	f04f 0100 	mov.w	r1, #0
 80037aa:	0159      	lsls	r1, r3, #5
 80037ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b0:	0150      	lsls	r0, r2, #5
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4621      	mov	r1, r4
 80037b8:	1a51      	subs	r1, r2, r1
 80037ba:	6139      	str	r1, [r7, #16]
 80037bc:	4629      	mov	r1, r5
 80037be:	eb63 0301 	sbc.w	r3, r3, r1
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037d0:	4659      	mov	r1, fp
 80037d2:	018b      	lsls	r3, r1, #6
 80037d4:	4651      	mov	r1, sl
 80037d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037da:	4651      	mov	r1, sl
 80037dc:	018a      	lsls	r2, r1, #6
 80037de:	4651      	mov	r1, sl
 80037e0:	ebb2 0801 	subs.w	r8, r2, r1
 80037e4:	4659      	mov	r1, fp
 80037e6:	eb63 0901 	sbc.w	r9, r3, r1
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037fe:	4690      	mov	r8, r2
 8003800:	4699      	mov	r9, r3
 8003802:	4623      	mov	r3, r4
 8003804:	eb18 0303 	adds.w	r3, r8, r3
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	462b      	mov	r3, r5
 800380c:	eb49 0303 	adc.w	r3, r9, r3
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800381e:	4629      	mov	r1, r5
 8003820:	024b      	lsls	r3, r1, #9
 8003822:	4621      	mov	r1, r4
 8003824:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003828:	4621      	mov	r1, r4
 800382a:	024a      	lsls	r2, r1, #9
 800382c:	4610      	mov	r0, r2
 800382e:	4619      	mov	r1, r3
 8003830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003832:	2200      	movs	r2, #0
 8003834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003836:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003838:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800383c:	f7fc fd30 	bl	80002a0 <__aeabi_uldivmod>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4613      	mov	r3, r2
 8003846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003848:	e058      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384a:	4b38      	ldr	r3, [pc, #224]	@ (800392c <HAL_RCC_GetSysClockFreq+0x200>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	099b      	lsrs	r3, r3, #6
 8003850:	2200      	movs	r2, #0
 8003852:	4618      	mov	r0, r3
 8003854:	4611      	mov	r1, r2
 8003856:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800385a:	623b      	str	r3, [r7, #32]
 800385c:	2300      	movs	r3, #0
 800385e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003860:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003864:	4642      	mov	r2, r8
 8003866:	464b      	mov	r3, r9
 8003868:	f04f 0000 	mov.w	r0, #0
 800386c:	f04f 0100 	mov.w	r1, #0
 8003870:	0159      	lsls	r1, r3, #5
 8003872:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003876:	0150      	lsls	r0, r2, #5
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4641      	mov	r1, r8
 800387e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003882:	4649      	mov	r1, r9
 8003884:	eb63 0b01 	sbc.w	fp, r3, r1
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003894:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003898:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800389c:	ebb2 040a 	subs.w	r4, r2, sl
 80038a0:	eb63 050b 	sbc.w	r5, r3, fp
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	00eb      	lsls	r3, r5, #3
 80038ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038b2:	00e2      	lsls	r2, r4, #3
 80038b4:	4614      	mov	r4, r2
 80038b6:	461d      	mov	r5, r3
 80038b8:	4643      	mov	r3, r8
 80038ba:	18e3      	adds	r3, r4, r3
 80038bc:	603b      	str	r3, [r7, #0]
 80038be:	464b      	mov	r3, r9
 80038c0:	eb45 0303 	adc.w	r3, r5, r3
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038d2:	4629      	mov	r1, r5
 80038d4:	028b      	lsls	r3, r1, #10
 80038d6:	4621      	mov	r1, r4
 80038d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038dc:	4621      	mov	r1, r4
 80038de:	028a      	lsls	r2, r1, #10
 80038e0:	4610      	mov	r0, r2
 80038e2:	4619      	mov	r1, r3
 80038e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038e6:	2200      	movs	r2, #0
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	61fa      	str	r2, [r7, #28]
 80038ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038f0:	f7fc fcd6 	bl	80002a0 <__aeabi_uldivmod>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4613      	mov	r3, r2
 80038fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038fc:	4b0b      	ldr	r3, [pc, #44]	@ (800392c <HAL_RCC_GetSysClockFreq+0x200>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	0c1b      	lsrs	r3, r3, #16
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	3301      	adds	r3, #1
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800390c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800390e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003910:	fbb2 f3f3 	udiv	r3, r2, r3
 8003914:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003916:	e002      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003918:	4b05      	ldr	r3, [pc, #20]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x204>)
 800391a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800391c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800391e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003920:	4618      	mov	r0, r3
 8003922:	3750      	adds	r7, #80	@ 0x50
 8003924:	46bd      	mov	sp, r7
 8003926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800392a:	bf00      	nop
 800392c:	40023800 	.word	0x40023800
 8003930:	00f42400 	.word	0x00f42400
 8003934:	007a1200 	.word	0x007a1200

08003938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800393c:	4b03      	ldr	r3, [pc, #12]	@ (800394c <HAL_RCC_GetHCLKFreq+0x14>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000000 	.word	0x20000000

08003950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003954:	f7ff fff0 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	0a9b      	lsrs	r3, r3, #10
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	4903      	ldr	r1, [pc, #12]	@ (8003974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800396c:	4618      	mov	r0, r3
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40023800 	.word	0x40023800
 8003974:	0801adf8 	.word	0x0801adf8

08003978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800397c:	f7ff ffdc 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	4b05      	ldr	r3, [pc, #20]	@ (8003998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	0b5b      	lsrs	r3, r3, #13
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	4903      	ldr	r1, [pc, #12]	@ (800399c <HAL_RCC_GetPCLK2Freq+0x24>)
 800398e:	5ccb      	ldrb	r3, [r1, r3]
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003994:	4618      	mov	r0, r3
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40023800 	.word	0x40023800
 800399c:	0801adf8 	.word	0x0801adf8

080039a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	220f      	movs	r2, #15
 80039ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039b0:	4b12      	ldr	r3, [pc, #72]	@ (80039fc <HAL_RCC_GetClockConfig+0x5c>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 0203 	and.w	r2, r3, #3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039bc:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <HAL_RCC_GetClockConfig+0x5c>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039c8:	4b0c      	ldr	r3, [pc, #48]	@ (80039fc <HAL_RCC_GetClockConfig+0x5c>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039d4:	4b09      	ldr	r3, [pc, #36]	@ (80039fc <HAL_RCC_GetClockConfig+0x5c>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	08db      	lsrs	r3, r3, #3
 80039da:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039e2:	4b07      	ldr	r3, [pc, #28]	@ (8003a00 <HAL_RCC_GetClockConfig+0x60>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 020f 	and.w	r2, r3, #15
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	601a      	str	r2, [r3, #0]
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40023c00 	.word	0x40023c00

08003a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e041      	b.n	8003a9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f839 	bl	8003aa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f000 f9c0 	bl	8003dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d001      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e04e      	b.n	8003b6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a23      	ldr	r2, [pc, #140]	@ (8003b7c <HAL_TIM_Base_Start_IT+0xc4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d022      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x80>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003afa:	d01d      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x80>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1f      	ldr	r2, [pc, #124]	@ (8003b80 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d018      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x80>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b84 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d013      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x80>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1c      	ldr	r2, [pc, #112]	@ (8003b88 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00e      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x80>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003b8c <HAL_TIM_Base_Start_IT+0xd4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x80>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a19      	ldr	r2, [pc, #100]	@ (8003b90 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x80>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a18      	ldr	r2, [pc, #96]	@ (8003b94 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d111      	bne.n	8003b5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d010      	beq.n	8003b6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5a:	e007      	b.n	8003b6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40010000 	.word	0x40010000
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40000800 	.word	0x40000800
 8003b88:	40000c00 	.word	0x40000c00
 8003b8c:	40010400 	.word	0x40010400
 8003b90:	40014000 	.word	0x40014000
 8003b94:	40001800 	.word	0x40001800

08003b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d020      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01b      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0202 	mvn.w	r2, #2
 8003bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f8d2 	bl	8003d8c <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f8c4 	bl	8003d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f8d5 	bl	8003da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d020      	beq.n	8003c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01b      	beq.n	8003c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0204 	mvn.w	r2, #4
 8003c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f8ac 	bl	8003d8c <HAL_TIM_IC_CaptureCallback>
 8003c34:	e005      	b.n	8003c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f89e 	bl	8003d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f8af 	bl	8003da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d020      	beq.n	8003c94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01b      	beq.n	8003c94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0208 	mvn.w	r2, #8
 8003c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2204      	movs	r2, #4
 8003c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f886 	bl	8003d8c <HAL_TIM_IC_CaptureCallback>
 8003c80:	e005      	b.n	8003c8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f878 	bl	8003d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f889 	bl	8003da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d020      	beq.n	8003ce0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01b      	beq.n	8003ce0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0210 	mvn.w	r2, #16
 8003cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f860 	bl	8003d8c <HAL_TIM_IC_CaptureCallback>
 8003ccc:	e005      	b.n	8003cda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f852 	bl	8003d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f863 	bl	8003da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00c      	beq.n	8003d04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0201 	mvn.w	r2, #1
 8003cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fc fdfc 	bl	80008fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00c      	beq.n	8003d28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f906 	bl	8003f34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00c      	beq.n	8003d4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d007      	beq.n	8003d4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f834 	bl	8003db4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00c      	beq.n	8003d70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0220 	mvn.w	r2, #32
 8003d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f8d8 	bl	8003f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d70:	bf00      	nop
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a46      	ldr	r2, [pc, #280]	@ (8003ef4 <TIM_Base_SetConfig+0x12c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d013      	beq.n	8003e08 <TIM_Base_SetConfig+0x40>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de6:	d00f      	beq.n	8003e08 <TIM_Base_SetConfig+0x40>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a43      	ldr	r2, [pc, #268]	@ (8003ef8 <TIM_Base_SetConfig+0x130>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00b      	beq.n	8003e08 <TIM_Base_SetConfig+0x40>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a42      	ldr	r2, [pc, #264]	@ (8003efc <TIM_Base_SetConfig+0x134>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d007      	beq.n	8003e08 <TIM_Base_SetConfig+0x40>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a41      	ldr	r2, [pc, #260]	@ (8003f00 <TIM_Base_SetConfig+0x138>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d003      	beq.n	8003e08 <TIM_Base_SetConfig+0x40>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a40      	ldr	r2, [pc, #256]	@ (8003f04 <TIM_Base_SetConfig+0x13c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d108      	bne.n	8003e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a35      	ldr	r2, [pc, #212]	@ (8003ef4 <TIM_Base_SetConfig+0x12c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d02b      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e28:	d027      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a32      	ldr	r2, [pc, #200]	@ (8003ef8 <TIM_Base_SetConfig+0x130>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d023      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a31      	ldr	r2, [pc, #196]	@ (8003efc <TIM_Base_SetConfig+0x134>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01f      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a30      	ldr	r2, [pc, #192]	@ (8003f00 <TIM_Base_SetConfig+0x138>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d01b      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a2f      	ldr	r2, [pc, #188]	@ (8003f04 <TIM_Base_SetConfig+0x13c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d017      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003f08 <TIM_Base_SetConfig+0x140>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a2d      	ldr	r2, [pc, #180]	@ (8003f0c <TIM_Base_SetConfig+0x144>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00f      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a2c      	ldr	r2, [pc, #176]	@ (8003f10 <TIM_Base_SetConfig+0x148>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00b      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a2b      	ldr	r2, [pc, #172]	@ (8003f14 <TIM_Base_SetConfig+0x14c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d007      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8003f18 <TIM_Base_SetConfig+0x150>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d003      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a29      	ldr	r2, [pc, #164]	@ (8003f1c <TIM_Base_SetConfig+0x154>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d108      	bne.n	8003e8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a10      	ldr	r2, [pc, #64]	@ (8003ef4 <TIM_Base_SetConfig+0x12c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <TIM_Base_SetConfig+0xf8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a12      	ldr	r2, [pc, #72]	@ (8003f04 <TIM_Base_SetConfig+0x13c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d103      	bne.n	8003ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d105      	bne.n	8003ee6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f023 0201 	bic.w	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	611a      	str	r2, [r3, #16]
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40010000 	.word	0x40010000
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40000800 	.word	0x40000800
 8003f00:	40000c00 	.word	0x40000c00
 8003f04:	40010400 	.word	0x40010400
 8003f08:	40014000 	.word	0x40014000
 8003f0c:	40014400 	.word	0x40014400
 8003f10:	40014800 	.word	0x40014800
 8003f14:	40001800 	.word	0x40001800
 8003f18:	40001c00 	.word	0x40001c00
 8003f1c:	40002000 	.word	0x40002000

08003f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e042      	b.n	8003fe0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fc fefc 	bl	8000d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2224      	movs	r2, #36	@ 0x24
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f973 	bl	8004278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	@ 0x28
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b20      	cmp	r3, #32
 8004006:	d175      	bne.n	80040f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_UART_Transmit+0x2c>
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e06e      	b.n	80040f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2221      	movs	r2, #33	@ 0x21
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004026:	f7fd faef 	bl	8001608 <HAL_GetTick>
 800402a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	88fa      	ldrh	r2, [r7, #6]
 8004030:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	88fa      	ldrh	r2, [r7, #6]
 8004036:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004040:	d108      	bne.n	8004054 <HAL_UART_Transmit+0x6c>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d104      	bne.n	8004054 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	e003      	b.n	800405c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004058:	2300      	movs	r3, #0
 800405a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800405c:	e02e      	b.n	80040bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	2180      	movs	r1, #128	@ 0x80
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f848 	bl	80040fe <UART_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e03a      	b.n	80040f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10b      	bne.n	800409e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004094:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	3302      	adds	r3, #2
 800409a:	61bb      	str	r3, [r7, #24]
 800409c:	e007      	b.n	80040ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	781a      	ldrb	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	3301      	adds	r3, #1
 80040ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1cb      	bne.n	800405e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2200      	movs	r2, #0
 80040ce:	2140      	movs	r1, #64	@ 0x40
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f814 	bl	80040fe <UART_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e006      	b.n	80040f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e000      	b.n	80040f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
  }
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b086      	sub	sp, #24
 8004102:	af00      	add	r7, sp, #0
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	603b      	str	r3, [r7, #0]
 800410a:	4613      	mov	r3, r2
 800410c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410e:	e03b      	b.n	8004188 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004116:	d037      	beq.n	8004188 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004118:	f7fd fa76 	bl	8001608 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	6a3a      	ldr	r2, [r7, #32]
 8004124:	429a      	cmp	r2, r3
 8004126:	d302      	bcc.n	800412e <UART_WaitOnFlagUntilTimeout+0x30>
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e03a      	b.n	80041a8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d023      	beq.n	8004188 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b80      	cmp	r3, #128	@ 0x80
 8004144:	d020      	beq.n	8004188 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b40      	cmp	r3, #64	@ 0x40
 800414a:	d01d      	beq.n	8004188 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b08      	cmp	r3, #8
 8004158:	d116      	bne.n	8004188 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f81d 	bl	80041b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2208      	movs	r2, #8
 800417a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e00f      	b.n	80041a8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	4013      	ands	r3, r2
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	429a      	cmp	r2, r3
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d0b4      	beq.n	8004110 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b095      	sub	sp, #84	@ 0x54
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	330c      	adds	r3, #12
 80041be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80041da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e5      	bne.n	80041b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3314      	adds	r3, #20
 80041f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3314      	adds	r3, #20
 800420a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800420c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800420e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e5      	bne.n	80041ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004224:	2b01      	cmp	r3, #1
 8004226:	d119      	bne.n	800425c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	330c      	adds	r3, #12
 800422e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	60bb      	str	r3, [r7, #8]
   return(result);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f023 0310 	bic.w	r3, r3, #16
 800423e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	330c      	adds	r3, #12
 8004246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004248:	61ba      	str	r2, [r7, #24]
 800424a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6979      	ldr	r1, [r7, #20]
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	613b      	str	r3, [r7, #16]
   return(result);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e5      	bne.n	8004228 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800426a:	bf00      	nop
 800426c:	3754      	adds	r7, #84	@ 0x54
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800427c:	b0c0      	sub	sp, #256	@ 0x100
 800427e:	af00      	add	r7, sp, #0
 8004280:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004294:	68d9      	ldr	r1, [r3, #12]
 8004296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	ea40 0301 	orr.w	r3, r0, r1
 80042a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042d0:	f021 010c 	bic.w	r1, r1, #12
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042de:	430b      	orrs	r3, r1
 80042e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f2:	6999      	ldr	r1, [r3, #24]
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	ea40 0301 	orr.w	r3, r0, r1
 80042fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	4b8f      	ldr	r3, [pc, #572]	@ (8004544 <UART_SetConfig+0x2cc>)
 8004308:	429a      	cmp	r2, r3
 800430a:	d005      	beq.n	8004318 <UART_SetConfig+0xa0>
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	4b8d      	ldr	r3, [pc, #564]	@ (8004548 <UART_SetConfig+0x2d0>)
 8004314:	429a      	cmp	r2, r3
 8004316:	d104      	bne.n	8004322 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004318:	f7ff fb2e 	bl	8003978 <HAL_RCC_GetPCLK2Freq>
 800431c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004320:	e003      	b.n	800432a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004322:	f7ff fb15 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8004326:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800432a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004334:	f040 810c 	bne.w	8004550 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800433c:	2200      	movs	r2, #0
 800433e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004342:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004346:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800434a:	4622      	mov	r2, r4
 800434c:	462b      	mov	r3, r5
 800434e:	1891      	adds	r1, r2, r2
 8004350:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004352:	415b      	adcs	r3, r3
 8004354:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004356:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800435a:	4621      	mov	r1, r4
 800435c:	eb12 0801 	adds.w	r8, r2, r1
 8004360:	4629      	mov	r1, r5
 8004362:	eb43 0901 	adc.w	r9, r3, r1
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800437a:	4690      	mov	r8, r2
 800437c:	4699      	mov	r9, r3
 800437e:	4623      	mov	r3, r4
 8004380:	eb18 0303 	adds.w	r3, r8, r3
 8004384:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004388:	462b      	mov	r3, r5
 800438a:	eb49 0303 	adc.w	r3, r9, r3
 800438e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800439e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043a6:	460b      	mov	r3, r1
 80043a8:	18db      	adds	r3, r3, r3
 80043aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80043ac:	4613      	mov	r3, r2
 80043ae:	eb42 0303 	adc.w	r3, r2, r3
 80043b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80043b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043bc:	f7fb ff70 	bl	80002a0 <__aeabi_uldivmod>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4b61      	ldr	r3, [pc, #388]	@ (800454c <UART_SetConfig+0x2d4>)
 80043c6:	fba3 2302 	umull	r2, r3, r3, r2
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	011c      	lsls	r4, r3, #4
 80043ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043e0:	4642      	mov	r2, r8
 80043e2:	464b      	mov	r3, r9
 80043e4:	1891      	adds	r1, r2, r2
 80043e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043e8:	415b      	adcs	r3, r3
 80043ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043f0:	4641      	mov	r1, r8
 80043f2:	eb12 0a01 	adds.w	sl, r2, r1
 80043f6:	4649      	mov	r1, r9
 80043f8:	eb43 0b01 	adc.w	fp, r3, r1
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004408:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800440c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004410:	4692      	mov	sl, r2
 8004412:	469b      	mov	fp, r3
 8004414:	4643      	mov	r3, r8
 8004416:	eb1a 0303 	adds.w	r3, sl, r3
 800441a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800441e:	464b      	mov	r3, r9
 8004420:	eb4b 0303 	adc.w	r3, fp, r3
 8004424:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004434:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004438:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800443c:	460b      	mov	r3, r1
 800443e:	18db      	adds	r3, r3, r3
 8004440:	643b      	str	r3, [r7, #64]	@ 0x40
 8004442:	4613      	mov	r3, r2
 8004444:	eb42 0303 	adc.w	r3, r2, r3
 8004448:	647b      	str	r3, [r7, #68]	@ 0x44
 800444a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800444e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004452:	f7fb ff25 	bl	80002a0 <__aeabi_uldivmod>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	4611      	mov	r1, r2
 800445c:	4b3b      	ldr	r3, [pc, #236]	@ (800454c <UART_SetConfig+0x2d4>)
 800445e:	fba3 2301 	umull	r2, r3, r3, r1
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	2264      	movs	r2, #100	@ 0x64
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	1acb      	subs	r3, r1, r3
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004472:	4b36      	ldr	r3, [pc, #216]	@ (800454c <UART_SetConfig+0x2d4>)
 8004474:	fba3 2302 	umull	r2, r3, r3, r2
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004480:	441c      	add	r4, r3
 8004482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004486:	2200      	movs	r2, #0
 8004488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800448c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004490:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004494:	4642      	mov	r2, r8
 8004496:	464b      	mov	r3, r9
 8004498:	1891      	adds	r1, r2, r2
 800449a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800449c:	415b      	adcs	r3, r3
 800449e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044a4:	4641      	mov	r1, r8
 80044a6:	1851      	adds	r1, r2, r1
 80044a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80044aa:	4649      	mov	r1, r9
 80044ac:	414b      	adcs	r3, r1
 80044ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044bc:	4659      	mov	r1, fp
 80044be:	00cb      	lsls	r3, r1, #3
 80044c0:	4651      	mov	r1, sl
 80044c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044c6:	4651      	mov	r1, sl
 80044c8:	00ca      	lsls	r2, r1, #3
 80044ca:	4610      	mov	r0, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	4603      	mov	r3, r0
 80044d0:	4642      	mov	r2, r8
 80044d2:	189b      	adds	r3, r3, r2
 80044d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044d8:	464b      	mov	r3, r9
 80044da:	460a      	mov	r2, r1
 80044dc:	eb42 0303 	adc.w	r3, r2, r3
 80044e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044f8:	460b      	mov	r3, r1
 80044fa:	18db      	adds	r3, r3, r3
 80044fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044fe:	4613      	mov	r3, r2
 8004500:	eb42 0303 	adc.w	r3, r2, r3
 8004504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004506:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800450a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800450e:	f7fb fec7 	bl	80002a0 <__aeabi_uldivmod>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4b0d      	ldr	r3, [pc, #52]	@ (800454c <UART_SetConfig+0x2d4>)
 8004518:	fba3 1302 	umull	r1, r3, r3, r2
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	2164      	movs	r1, #100	@ 0x64
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	3332      	adds	r3, #50	@ 0x32
 800452a:	4a08      	ldr	r2, [pc, #32]	@ (800454c <UART_SetConfig+0x2d4>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	095b      	lsrs	r3, r3, #5
 8004532:	f003 0207 	and.w	r2, r3, #7
 8004536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4422      	add	r2, r4
 800453e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004540:	e106      	b.n	8004750 <UART_SetConfig+0x4d8>
 8004542:	bf00      	nop
 8004544:	40011000 	.word	0x40011000
 8004548:	40011400 	.word	0x40011400
 800454c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004554:	2200      	movs	r2, #0
 8004556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800455a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800455e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004562:	4642      	mov	r2, r8
 8004564:	464b      	mov	r3, r9
 8004566:	1891      	adds	r1, r2, r2
 8004568:	6239      	str	r1, [r7, #32]
 800456a:	415b      	adcs	r3, r3
 800456c:	627b      	str	r3, [r7, #36]	@ 0x24
 800456e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004572:	4641      	mov	r1, r8
 8004574:	1854      	adds	r4, r2, r1
 8004576:	4649      	mov	r1, r9
 8004578:	eb43 0501 	adc.w	r5, r3, r1
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	00eb      	lsls	r3, r5, #3
 8004586:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800458a:	00e2      	lsls	r2, r4, #3
 800458c:	4614      	mov	r4, r2
 800458e:	461d      	mov	r5, r3
 8004590:	4643      	mov	r3, r8
 8004592:	18e3      	adds	r3, r4, r3
 8004594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004598:	464b      	mov	r3, r9
 800459a:	eb45 0303 	adc.w	r3, r5, r3
 800459e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045be:	4629      	mov	r1, r5
 80045c0:	008b      	lsls	r3, r1, #2
 80045c2:	4621      	mov	r1, r4
 80045c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c8:	4621      	mov	r1, r4
 80045ca:	008a      	lsls	r2, r1, #2
 80045cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045d0:	f7fb fe66 	bl	80002a0 <__aeabi_uldivmod>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4b60      	ldr	r3, [pc, #384]	@ (800475c <UART_SetConfig+0x4e4>)
 80045da:	fba3 2302 	umull	r2, r3, r3, r2
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	011c      	lsls	r4, r3, #4
 80045e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	1891      	adds	r1, r2, r2
 80045fa:	61b9      	str	r1, [r7, #24]
 80045fc:	415b      	adcs	r3, r3
 80045fe:	61fb      	str	r3, [r7, #28]
 8004600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004604:	4641      	mov	r1, r8
 8004606:	1851      	adds	r1, r2, r1
 8004608:	6139      	str	r1, [r7, #16]
 800460a:	4649      	mov	r1, r9
 800460c:	414b      	adcs	r3, r1
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800461c:	4659      	mov	r1, fp
 800461e:	00cb      	lsls	r3, r1, #3
 8004620:	4651      	mov	r1, sl
 8004622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004626:	4651      	mov	r1, sl
 8004628:	00ca      	lsls	r2, r1, #3
 800462a:	4610      	mov	r0, r2
 800462c:	4619      	mov	r1, r3
 800462e:	4603      	mov	r3, r0
 8004630:	4642      	mov	r2, r8
 8004632:	189b      	adds	r3, r3, r2
 8004634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004638:	464b      	mov	r3, r9
 800463a:	460a      	mov	r2, r1
 800463c:	eb42 0303 	adc.w	r3, r2, r3
 8004640:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800464e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800465c:	4649      	mov	r1, r9
 800465e:	008b      	lsls	r3, r1, #2
 8004660:	4641      	mov	r1, r8
 8004662:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004666:	4641      	mov	r1, r8
 8004668:	008a      	lsls	r2, r1, #2
 800466a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800466e:	f7fb fe17 	bl	80002a0 <__aeabi_uldivmod>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4611      	mov	r1, r2
 8004678:	4b38      	ldr	r3, [pc, #224]	@ (800475c <UART_SetConfig+0x4e4>)
 800467a:	fba3 2301 	umull	r2, r3, r3, r1
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	2264      	movs	r2, #100	@ 0x64
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	1acb      	subs	r3, r1, r3
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	3332      	adds	r3, #50	@ 0x32
 800468c:	4a33      	ldr	r2, [pc, #204]	@ (800475c <UART_SetConfig+0x4e4>)
 800468e:	fba2 2303 	umull	r2, r3, r2, r3
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004698:	441c      	add	r4, r3
 800469a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800469e:	2200      	movs	r2, #0
 80046a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80046a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80046a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046a8:	4642      	mov	r2, r8
 80046aa:	464b      	mov	r3, r9
 80046ac:	1891      	adds	r1, r2, r2
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	415b      	adcs	r3, r3
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b8:	4641      	mov	r1, r8
 80046ba:	1851      	adds	r1, r2, r1
 80046bc:	6039      	str	r1, [r7, #0]
 80046be:	4649      	mov	r1, r9
 80046c0:	414b      	adcs	r3, r1
 80046c2:	607b      	str	r3, [r7, #4]
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046d0:	4659      	mov	r1, fp
 80046d2:	00cb      	lsls	r3, r1, #3
 80046d4:	4651      	mov	r1, sl
 80046d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046da:	4651      	mov	r1, sl
 80046dc:	00ca      	lsls	r2, r1, #3
 80046de:	4610      	mov	r0, r2
 80046e0:	4619      	mov	r1, r3
 80046e2:	4603      	mov	r3, r0
 80046e4:	4642      	mov	r2, r8
 80046e6:	189b      	adds	r3, r3, r2
 80046e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046ea:	464b      	mov	r3, r9
 80046ec:	460a      	mov	r2, r1
 80046ee:	eb42 0303 	adc.w	r3, r2, r3
 80046f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80046fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800470c:	4649      	mov	r1, r9
 800470e:	008b      	lsls	r3, r1, #2
 8004710:	4641      	mov	r1, r8
 8004712:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004716:	4641      	mov	r1, r8
 8004718:	008a      	lsls	r2, r1, #2
 800471a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800471e:	f7fb fdbf 	bl	80002a0 <__aeabi_uldivmod>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4b0d      	ldr	r3, [pc, #52]	@ (800475c <UART_SetConfig+0x4e4>)
 8004728:	fba3 1302 	umull	r1, r3, r3, r2
 800472c:	095b      	lsrs	r3, r3, #5
 800472e:	2164      	movs	r1, #100	@ 0x64
 8004730:	fb01 f303 	mul.w	r3, r1, r3
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	3332      	adds	r3, #50	@ 0x32
 800473a:	4a08      	ldr	r2, [pc, #32]	@ (800475c <UART_SetConfig+0x4e4>)
 800473c:	fba2 2303 	umull	r2, r3, r2, r3
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	f003 020f 	and.w	r2, r3, #15
 8004746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4422      	add	r2, r4
 800474e:	609a      	str	r2, [r3, #8]
}
 8004750:	bf00      	nop
 8004752:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004756:	46bd      	mov	sp, r7
 8004758:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800475c:	51eb851f 	.word	0x51eb851f

08004760 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004766:	4b92      	ldr	r3, [pc, #584]	@ (80049b0 <MX_LWIP_Init+0x250>)
 8004768:	22c0      	movs	r2, #192	@ 0xc0
 800476a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800476c:	4b90      	ldr	r3, [pc, #576]	@ (80049b0 <MX_LWIP_Init+0x250>)
 800476e:	22a8      	movs	r2, #168	@ 0xa8
 8004770:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004772:	4b8f      	ldr	r3, [pc, #572]	@ (80049b0 <MX_LWIP_Init+0x250>)
 8004774:	2201      	movs	r2, #1
 8004776:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 130;
 8004778:	4b8d      	ldr	r3, [pc, #564]	@ (80049b0 <MX_LWIP_Init+0x250>)
 800477a:	2282      	movs	r2, #130	@ 0x82
 800477c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800477e:	4b8d      	ldr	r3, [pc, #564]	@ (80049b4 <MX_LWIP_Init+0x254>)
 8004780:	22ff      	movs	r2, #255	@ 0xff
 8004782:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004784:	4b8b      	ldr	r3, [pc, #556]	@ (80049b4 <MX_LWIP_Init+0x254>)
 8004786:	22ff      	movs	r2, #255	@ 0xff
 8004788:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800478a:	4b8a      	ldr	r3, [pc, #552]	@ (80049b4 <MX_LWIP_Init+0x254>)
 800478c:	22ff      	movs	r2, #255	@ 0xff
 800478e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004790:	4b88      	ldr	r3, [pc, #544]	@ (80049b4 <MX_LWIP_Init+0x254>)
 8004792:	2200      	movs	r2, #0
 8004794:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004796:	4b88      	ldr	r3, [pc, #544]	@ (80049b8 <MX_LWIP_Init+0x258>)
 8004798:	22c0      	movs	r2, #192	@ 0xc0
 800479a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800479c:	4b86      	ldr	r3, [pc, #536]	@ (80049b8 <MX_LWIP_Init+0x258>)
 800479e:	22a8      	movs	r2, #168	@ 0xa8
 80047a0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80047a2:	4b85      	ldr	r3, [pc, #532]	@ (80049b8 <MX_LWIP_Init+0x258>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80047a8:	4b83      	ldr	r3, [pc, #524]	@ (80049b8 <MX_LWIP_Init+0x258>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80047ae:	2100      	movs	r1, #0
 80047b0:	2000      	movs	r0, #0
 80047b2:	f006 ff7d 	bl	800b6b0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80047b6:	4b7e      	ldr	r3, [pc, #504]	@ (80049b0 <MX_LWIP_Init+0x250>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	061a      	lsls	r2, r3, #24
 80047bc:	4b7c      	ldr	r3, [pc, #496]	@ (80049b0 <MX_LWIP_Init+0x250>)
 80047be:	785b      	ldrb	r3, [r3, #1]
 80047c0:	041b      	lsls	r3, r3, #16
 80047c2:	431a      	orrs	r2, r3
 80047c4:	4b7a      	ldr	r3, [pc, #488]	@ (80049b0 <MX_LWIP_Init+0x250>)
 80047c6:	789b      	ldrb	r3, [r3, #2]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	4313      	orrs	r3, r2
 80047cc:	4a78      	ldr	r2, [pc, #480]	@ (80049b0 <MX_LWIP_Init+0x250>)
 80047ce:	78d2      	ldrb	r2, [r2, #3]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	061a      	lsls	r2, r3, #24
 80047d4:	4b76      	ldr	r3, [pc, #472]	@ (80049b0 <MX_LWIP_Init+0x250>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	0619      	lsls	r1, r3, #24
 80047da:	4b75      	ldr	r3, [pc, #468]	@ (80049b0 <MX_LWIP_Init+0x250>)
 80047dc:	785b      	ldrb	r3, [r3, #1]
 80047de:	041b      	lsls	r3, r3, #16
 80047e0:	4319      	orrs	r1, r3
 80047e2:	4b73      	ldr	r3, [pc, #460]	@ (80049b0 <MX_LWIP_Init+0x250>)
 80047e4:	789b      	ldrb	r3, [r3, #2]
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	430b      	orrs	r3, r1
 80047ea:	4971      	ldr	r1, [pc, #452]	@ (80049b0 <MX_LWIP_Init+0x250>)
 80047ec:	78c9      	ldrb	r1, [r1, #3]
 80047ee:	430b      	orrs	r3, r1
 80047f0:	021b      	lsls	r3, r3, #8
 80047f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80047f6:	431a      	orrs	r2, r3
 80047f8:	4b6d      	ldr	r3, [pc, #436]	@ (80049b0 <MX_LWIP_Init+0x250>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	0619      	lsls	r1, r3, #24
 80047fe:	4b6c      	ldr	r3, [pc, #432]	@ (80049b0 <MX_LWIP_Init+0x250>)
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	041b      	lsls	r3, r3, #16
 8004804:	4319      	orrs	r1, r3
 8004806:	4b6a      	ldr	r3, [pc, #424]	@ (80049b0 <MX_LWIP_Init+0x250>)
 8004808:	789b      	ldrb	r3, [r3, #2]
 800480a:	021b      	lsls	r3, r3, #8
 800480c:	430b      	orrs	r3, r1
 800480e:	4968      	ldr	r1, [pc, #416]	@ (80049b0 <MX_LWIP_Init+0x250>)
 8004810:	78c9      	ldrb	r1, [r1, #3]
 8004812:	430b      	orrs	r3, r1
 8004814:	0a1b      	lsrs	r3, r3, #8
 8004816:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800481a:	431a      	orrs	r2, r3
 800481c:	4b64      	ldr	r3, [pc, #400]	@ (80049b0 <MX_LWIP_Init+0x250>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	0619      	lsls	r1, r3, #24
 8004822:	4b63      	ldr	r3, [pc, #396]	@ (80049b0 <MX_LWIP_Init+0x250>)
 8004824:	785b      	ldrb	r3, [r3, #1]
 8004826:	041b      	lsls	r3, r3, #16
 8004828:	4319      	orrs	r1, r3
 800482a:	4b61      	ldr	r3, [pc, #388]	@ (80049b0 <MX_LWIP_Init+0x250>)
 800482c:	789b      	ldrb	r3, [r3, #2]
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	430b      	orrs	r3, r1
 8004832:	495f      	ldr	r1, [pc, #380]	@ (80049b0 <MX_LWIP_Init+0x250>)
 8004834:	78c9      	ldrb	r1, [r1, #3]
 8004836:	430b      	orrs	r3, r1
 8004838:	0e1b      	lsrs	r3, r3, #24
 800483a:	4313      	orrs	r3, r2
 800483c:	4a5f      	ldr	r2, [pc, #380]	@ (80049bc <MX_LWIP_Init+0x25c>)
 800483e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004840:	4b5c      	ldr	r3, [pc, #368]	@ (80049b4 <MX_LWIP_Init+0x254>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	061a      	lsls	r2, r3, #24
 8004846:	4b5b      	ldr	r3, [pc, #364]	@ (80049b4 <MX_LWIP_Init+0x254>)
 8004848:	785b      	ldrb	r3, [r3, #1]
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	431a      	orrs	r2, r3
 800484e:	4b59      	ldr	r3, [pc, #356]	@ (80049b4 <MX_LWIP_Init+0x254>)
 8004850:	789b      	ldrb	r3, [r3, #2]
 8004852:	021b      	lsls	r3, r3, #8
 8004854:	4313      	orrs	r3, r2
 8004856:	4a57      	ldr	r2, [pc, #348]	@ (80049b4 <MX_LWIP_Init+0x254>)
 8004858:	78d2      	ldrb	r2, [r2, #3]
 800485a:	4313      	orrs	r3, r2
 800485c:	061a      	lsls	r2, r3, #24
 800485e:	4b55      	ldr	r3, [pc, #340]	@ (80049b4 <MX_LWIP_Init+0x254>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	0619      	lsls	r1, r3, #24
 8004864:	4b53      	ldr	r3, [pc, #332]	@ (80049b4 <MX_LWIP_Init+0x254>)
 8004866:	785b      	ldrb	r3, [r3, #1]
 8004868:	041b      	lsls	r3, r3, #16
 800486a:	4319      	orrs	r1, r3
 800486c:	4b51      	ldr	r3, [pc, #324]	@ (80049b4 <MX_LWIP_Init+0x254>)
 800486e:	789b      	ldrb	r3, [r3, #2]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	430b      	orrs	r3, r1
 8004874:	494f      	ldr	r1, [pc, #316]	@ (80049b4 <MX_LWIP_Init+0x254>)
 8004876:	78c9      	ldrb	r1, [r1, #3]
 8004878:	430b      	orrs	r3, r1
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004880:	431a      	orrs	r2, r3
 8004882:	4b4c      	ldr	r3, [pc, #304]	@ (80049b4 <MX_LWIP_Init+0x254>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	0619      	lsls	r1, r3, #24
 8004888:	4b4a      	ldr	r3, [pc, #296]	@ (80049b4 <MX_LWIP_Init+0x254>)
 800488a:	785b      	ldrb	r3, [r3, #1]
 800488c:	041b      	lsls	r3, r3, #16
 800488e:	4319      	orrs	r1, r3
 8004890:	4b48      	ldr	r3, [pc, #288]	@ (80049b4 <MX_LWIP_Init+0x254>)
 8004892:	789b      	ldrb	r3, [r3, #2]
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	430b      	orrs	r3, r1
 8004898:	4946      	ldr	r1, [pc, #280]	@ (80049b4 <MX_LWIP_Init+0x254>)
 800489a:	78c9      	ldrb	r1, [r1, #3]
 800489c:	430b      	orrs	r3, r1
 800489e:	0a1b      	lsrs	r3, r3, #8
 80048a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80048a4:	431a      	orrs	r2, r3
 80048a6:	4b43      	ldr	r3, [pc, #268]	@ (80049b4 <MX_LWIP_Init+0x254>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	0619      	lsls	r1, r3, #24
 80048ac:	4b41      	ldr	r3, [pc, #260]	@ (80049b4 <MX_LWIP_Init+0x254>)
 80048ae:	785b      	ldrb	r3, [r3, #1]
 80048b0:	041b      	lsls	r3, r3, #16
 80048b2:	4319      	orrs	r1, r3
 80048b4:	4b3f      	ldr	r3, [pc, #252]	@ (80049b4 <MX_LWIP_Init+0x254>)
 80048b6:	789b      	ldrb	r3, [r3, #2]
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	430b      	orrs	r3, r1
 80048bc:	493d      	ldr	r1, [pc, #244]	@ (80049b4 <MX_LWIP_Init+0x254>)
 80048be:	78c9      	ldrb	r1, [r1, #3]
 80048c0:	430b      	orrs	r3, r1
 80048c2:	0e1b      	lsrs	r3, r3, #24
 80048c4:	4313      	orrs	r3, r2
 80048c6:	4a3e      	ldr	r2, [pc, #248]	@ (80049c0 <MX_LWIP_Init+0x260>)
 80048c8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80048ca:	4b3b      	ldr	r3, [pc, #236]	@ (80049b8 <MX_LWIP_Init+0x258>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	061a      	lsls	r2, r3, #24
 80048d0:	4b39      	ldr	r3, [pc, #228]	@ (80049b8 <MX_LWIP_Init+0x258>)
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	431a      	orrs	r2, r3
 80048d8:	4b37      	ldr	r3, [pc, #220]	@ (80049b8 <MX_LWIP_Init+0x258>)
 80048da:	789b      	ldrb	r3, [r3, #2]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	4313      	orrs	r3, r2
 80048e0:	4a35      	ldr	r2, [pc, #212]	@ (80049b8 <MX_LWIP_Init+0x258>)
 80048e2:	78d2      	ldrb	r2, [r2, #3]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	061a      	lsls	r2, r3, #24
 80048e8:	4b33      	ldr	r3, [pc, #204]	@ (80049b8 <MX_LWIP_Init+0x258>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	0619      	lsls	r1, r3, #24
 80048ee:	4b32      	ldr	r3, [pc, #200]	@ (80049b8 <MX_LWIP_Init+0x258>)
 80048f0:	785b      	ldrb	r3, [r3, #1]
 80048f2:	041b      	lsls	r3, r3, #16
 80048f4:	4319      	orrs	r1, r3
 80048f6:	4b30      	ldr	r3, [pc, #192]	@ (80049b8 <MX_LWIP_Init+0x258>)
 80048f8:	789b      	ldrb	r3, [r3, #2]
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	430b      	orrs	r3, r1
 80048fe:	492e      	ldr	r1, [pc, #184]	@ (80049b8 <MX_LWIP_Init+0x258>)
 8004900:	78c9      	ldrb	r1, [r1, #3]
 8004902:	430b      	orrs	r3, r1
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800490a:	431a      	orrs	r2, r3
 800490c:	4b2a      	ldr	r3, [pc, #168]	@ (80049b8 <MX_LWIP_Init+0x258>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	0619      	lsls	r1, r3, #24
 8004912:	4b29      	ldr	r3, [pc, #164]	@ (80049b8 <MX_LWIP_Init+0x258>)
 8004914:	785b      	ldrb	r3, [r3, #1]
 8004916:	041b      	lsls	r3, r3, #16
 8004918:	4319      	orrs	r1, r3
 800491a:	4b27      	ldr	r3, [pc, #156]	@ (80049b8 <MX_LWIP_Init+0x258>)
 800491c:	789b      	ldrb	r3, [r3, #2]
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	430b      	orrs	r3, r1
 8004922:	4925      	ldr	r1, [pc, #148]	@ (80049b8 <MX_LWIP_Init+0x258>)
 8004924:	78c9      	ldrb	r1, [r1, #3]
 8004926:	430b      	orrs	r3, r1
 8004928:	0a1b      	lsrs	r3, r3, #8
 800492a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800492e:	431a      	orrs	r2, r3
 8004930:	4b21      	ldr	r3, [pc, #132]	@ (80049b8 <MX_LWIP_Init+0x258>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	0619      	lsls	r1, r3, #24
 8004936:	4b20      	ldr	r3, [pc, #128]	@ (80049b8 <MX_LWIP_Init+0x258>)
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	041b      	lsls	r3, r3, #16
 800493c:	4319      	orrs	r1, r3
 800493e:	4b1e      	ldr	r3, [pc, #120]	@ (80049b8 <MX_LWIP_Init+0x258>)
 8004940:	789b      	ldrb	r3, [r3, #2]
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	430b      	orrs	r3, r1
 8004946:	491c      	ldr	r1, [pc, #112]	@ (80049b8 <MX_LWIP_Init+0x258>)
 8004948:	78c9      	ldrb	r1, [r1, #3]
 800494a:	430b      	orrs	r3, r1
 800494c:	0e1b      	lsrs	r3, r3, #24
 800494e:	4313      	orrs	r3, r2
 8004950:	4a1c      	ldr	r2, [pc, #112]	@ (80049c4 <MX_LWIP_Init+0x264>)
 8004952:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004954:	4b1c      	ldr	r3, [pc, #112]	@ (80049c8 <MX_LWIP_Init+0x268>)
 8004956:	9302      	str	r3, [sp, #8]
 8004958:	4b1c      	ldr	r3, [pc, #112]	@ (80049cc <MX_LWIP_Init+0x26c>)
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	2300      	movs	r3, #0
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	4b18      	ldr	r3, [pc, #96]	@ (80049c4 <MX_LWIP_Init+0x264>)
 8004962:	4a17      	ldr	r2, [pc, #92]	@ (80049c0 <MX_LWIP_Init+0x260>)
 8004964:	4915      	ldr	r1, [pc, #84]	@ (80049bc <MX_LWIP_Init+0x25c>)
 8004966:	481a      	ldr	r0, [pc, #104]	@ (80049d0 <MX_LWIP_Init+0x270>)
 8004968:	f007 fc6c 	bl	800c244 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800496c:	4818      	ldr	r0, [pc, #96]	@ (80049d0 <MX_LWIP_Init+0x270>)
 800496e:	f007 fe1b 	bl	800c5a8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004972:	4817      	ldr	r0, [pc, #92]	@ (80049d0 <MX_LWIP_Init+0x270>)
 8004974:	f007 fe28 	bl	800c5c8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004978:	4916      	ldr	r1, [pc, #88]	@ (80049d4 <MX_LWIP_Init+0x274>)
 800497a:	4815      	ldr	r0, [pc, #84]	@ (80049d0 <MX_LWIP_Init+0x270>)
 800497c:	f007 ff26 	bl	800c7cc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004980:	2224      	movs	r2, #36	@ 0x24
 8004982:	2100      	movs	r1, #0
 8004984:	4814      	ldr	r0, [pc, #80]	@ (80049d8 <MX_LWIP_Init+0x278>)
 8004986:	f012 f846 	bl	8016a16 <memset>
  attributes.name = "EthLink";
 800498a:	4b13      	ldr	r3, [pc, #76]	@ (80049d8 <MX_LWIP_Init+0x278>)
 800498c:	4a13      	ldr	r2, [pc, #76]	@ (80049dc <MX_LWIP_Init+0x27c>)
 800498e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004990:	4b11      	ldr	r3, [pc, #68]	@ (80049d8 <MX_LWIP_Init+0x278>)
 8004992:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004996:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004998:	4b0f      	ldr	r3, [pc, #60]	@ (80049d8 <MX_LWIP_Init+0x278>)
 800499a:	2210      	movs	r2, #16
 800499c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800499e:	4a0e      	ldr	r2, [pc, #56]	@ (80049d8 <MX_LWIP_Init+0x278>)
 80049a0:	490b      	ldr	r1, [pc, #44]	@ (80049d0 <MX_LWIP_Init+0x270>)
 80049a2:	480f      	ldr	r0, [pc, #60]	@ (80049e0 <MX_LWIP_Init+0x280>)
 80049a4:	f000 fd95 	bl	80054d2 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80049a8:	bf00      	nop
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000398 	.word	0x20000398
 80049b4:	2000039c 	.word	0x2000039c
 80049b8:	200003a0 	.word	0x200003a0
 80049bc:	2000038c 	.word	0x2000038c
 80049c0:	20000390 	.word	0x20000390
 80049c4:	20000394 	.word	0x20000394
 80049c8:	0800b5c1 	.word	0x0800b5c1
 80049cc:	08004e95 	.word	0x08004e95
 80049d0:	20000358 	.word	0x20000358
 80049d4:	080049e5 	.word	0x080049e5
 80049d8:	200003a4 	.word	0x200003a4
 80049dc:	08017878 	.word	0x08017878
 80049e0:	08005179 	.word	0x08005179

080049e4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004a00:	4b04      	ldr	r3, [pc, #16]	@ (8004a14 <HAL_ETH_RxCpltCallback+0x1c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fffb 	bl	8005a00 <osSemaphoreRelease>
}
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20004e94 	.word	0x20004e94

08004a18 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004a20:	4b04      	ldr	r3, [pc, #16]	@ (8004a34 <HAL_ETH_TxCpltCallback+0x1c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 ffeb 	bl	8005a00 <osSemaphoreRelease>
}
 8004a2a:	bf00      	nop
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20004e98 	.word	0x20004e98

08004a38 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7fd fd3d 	bl	80024c0 <HAL_ETH_GetDMAError>
 8004a46:	4603      	mov	r3, r0
 8004a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a4c:	2b80      	cmp	r3, #128	@ 0x80
 8004a4e:	d104      	bne.n	8004a5a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004a50:	4b04      	ldr	r3, [pc, #16]	@ (8004a64 <HAL_ETH_ErrorCallback+0x2c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 ffd3 	bl	8005a00 <osSemaphoreRelease>
  }
}
 8004a5a:	bf00      	nop
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20004e94 	.word	0x20004e94

08004a68 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b0aa      	sub	sp, #168	@ 0xa8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004a76:	2300      	movs	r3, #0
 8004a78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8004a82:	f107 0310 	add.w	r3, r7, #16
 8004a86:	2264      	movs	r2, #100	@ 0x64
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f011 ffc3 	bl	8016a16 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004a90:	4b85      	ldr	r3, [pc, #532]	@ (8004ca8 <low_level_init+0x240>)
 8004a92:	4a86      	ldr	r2, [pc, #536]	@ (8004cac <low_level_init+0x244>)
 8004a94:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004a96:	2300      	movs	r3, #0
 8004a98:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004a9a:	2380      	movs	r3, #128	@ 0x80
 8004a9c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004a9e:	23e1      	movs	r3, #225	@ 0xe1
 8004aa0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004aae:	4a7e      	ldr	r2, [pc, #504]	@ (8004ca8 <low_level_init+0x240>)
 8004ab0:	f107 0308 	add.w	r3, r7, #8
 8004ab4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004ab6:	4b7c      	ldr	r3, [pc, #496]	@ (8004ca8 <low_level_init+0x240>)
 8004ab8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004abc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004abe:	4b7a      	ldr	r3, [pc, #488]	@ (8004ca8 <low_level_init+0x240>)
 8004ac0:	4a7b      	ldr	r2, [pc, #492]	@ (8004cb0 <low_level_init+0x248>)
 8004ac2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004ac4:	4b78      	ldr	r3, [pc, #480]	@ (8004ca8 <low_level_init+0x240>)
 8004ac6:	4a7b      	ldr	r2, [pc, #492]	@ (8004cb4 <low_level_init+0x24c>)
 8004ac8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004aca:	4b77      	ldr	r3, [pc, #476]	@ (8004ca8 <low_level_init+0x240>)
 8004acc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004ad0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004ad2:	4875      	ldr	r0, [pc, #468]	@ (8004ca8 <low_level_init+0x240>)
 8004ad4:	f7fc feaa 	bl	800182c <HAL_ETH_Init>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004ade:	2238      	movs	r2, #56	@ 0x38
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	4875      	ldr	r0, [pc, #468]	@ (8004cb8 <low_level_init+0x250>)
 8004ae4:	f011 ff97 	bl	8016a16 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004ae8:	4b73      	ldr	r3, [pc, #460]	@ (8004cb8 <low_level_init+0x250>)
 8004aea:	2221      	movs	r2, #33	@ 0x21
 8004aec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004aee:	4b72      	ldr	r3, [pc, #456]	@ (8004cb8 <low_level_init+0x250>)
 8004af0:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8004af4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004af6:	4b70      	ldr	r3, [pc, #448]	@ (8004cb8 <low_level_init+0x250>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004afc:	486f      	ldr	r0, [pc, #444]	@ (8004cbc <low_level_init+0x254>)
 8004afe:	f007 fa5b 	bl	800bfb8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2206      	movs	r2, #6
 8004b06:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004b0a:	4b67      	ldr	r3, [pc, #412]	@ (8004ca8 <low_level_init+0x240>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	781a      	ldrb	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004b16:	4b64      	ldr	r3, [pc, #400]	@ (8004ca8 <low_level_init+0x240>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	785a      	ldrb	r2, [r3, #1]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004b22:	4b61      	ldr	r3, [pc, #388]	@ (8004ca8 <low_level_init+0x240>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	789a      	ldrb	r2, [r3, #2]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004b2e:	4b5e      	ldr	r3, [pc, #376]	@ (8004ca8 <low_level_init+0x240>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	78da      	ldrb	r2, [r3, #3]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004b3a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ca8 <low_level_init+0x240>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	791a      	ldrb	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004b46:	4b58      	ldr	r3, [pc, #352]	@ (8004ca8 <low_level_init+0x240>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	795a      	ldrb	r2, [r3, #5]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004b58:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004b60:	f043 030a 	orr.w	r3, r3, #10
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2100      	movs	r1, #0
 8004b70:	2001      	movs	r0, #1
 8004b72:	f000 fe69 	bl	8005848 <osSemaphoreNew>
 8004b76:	4603      	mov	r3, r0
 8004b78:	4a51      	ldr	r2, [pc, #324]	@ (8004cc0 <low_level_init+0x258>)
 8004b7a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2100      	movs	r1, #0
 8004b80:	2001      	movs	r0, #1
 8004b82:	f000 fe61 	bl	8005848 <osSemaphoreNew>
 8004b86:	4603      	mov	r3, r0
 8004b88:	4a4e      	ldr	r2, [pc, #312]	@ (8004cc4 <low_level_init+0x25c>)
 8004b8a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004b8c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004b90:	2224      	movs	r2, #36	@ 0x24
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f011 ff3e 	bl	8016a16 <memset>
  attributes.name = "EthIf";
 8004b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8004cc8 <low_level_init+0x260>)
 8004b9c:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004b9e:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004ba2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8004ba6:	2330      	movs	r3, #48	@ 0x30
 8004ba8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004bac:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	4845      	ldr	r0, [pc, #276]	@ (8004ccc <low_level_init+0x264>)
 8004bb6:	f000 fc8c 	bl	80054d2 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004bba:	4945      	ldr	r1, [pc, #276]	@ (8004cd0 <low_level_init+0x268>)
 8004bbc:	4845      	ldr	r0, [pc, #276]	@ (8004cd4 <low_level_init+0x26c>)
 8004bbe:	f7fc fb8c 	bl	80012da <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004bc2:	4844      	ldr	r0, [pc, #272]	@ (8004cd4 <low_level_init+0x26c>)
 8004bc4:	f7fc fbbb 	bl	800133e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004bc8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d164      	bne.n	8004c9a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004bd0:	4840      	ldr	r0, [pc, #256]	@ (8004cd4 <low_level_init+0x26c>)
 8004bd2:	f7fc fc5c 	bl	800148e <LAN8742_GetLinkState>
 8004bd6:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004bda:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	dc06      	bgt.n	8004bf0 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f007 fdc2 	bl	800c76c <netif_set_link_down>
      netif_set_down(netif);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f007 fd59 	bl	800c6a0 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004bee:	e056      	b.n	8004c9e <low_level_init+0x236>
      switch (PHYLinkState)
 8004bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bf4:	3b02      	subs	r3, #2
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d82a      	bhi.n	8004c50 <low_level_init+0x1e8>
 8004bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8004c00 <low_level_init+0x198>)
 8004bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c00:	08004c11 	.word	0x08004c11
 8004c04:	08004c23 	.word	0x08004c23
 8004c08:	08004c33 	.word	0x08004c33
 8004c0c:	08004c43 	.word	0x08004c43
        duplex = ETH_FULLDUPLEX_MODE;
 8004c10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004c18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004c20:	e01f      	b.n	8004c62 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004c22:	2300      	movs	r3, #0
 8004c24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004c28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004c30:	e017      	b.n	8004c62 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004c32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004c40:	e00f      	b.n	8004c62 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004c4e:	e008      	b.n	8004c62 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004c50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004c58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004c60:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004c62:	f107 0310 	add.w	r3, r7, #16
 8004c66:	4619      	mov	r1, r3
 8004c68:	480f      	ldr	r0, [pc, #60]	@ (8004ca8 <low_level_init+0x240>)
 8004c6a:	f7fd facf 	bl	800220c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004c6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c72:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8004c74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004c7a:	f107 0310 	add.w	r3, r7, #16
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4809      	ldr	r0, [pc, #36]	@ (8004ca8 <low_level_init+0x240>)
 8004c82:	f7fd fbad 	bl	80023e0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004c86:	4808      	ldr	r0, [pc, #32]	@ (8004ca8 <low_level_init+0x240>)
 8004c88:	f7fc fe4e 	bl	8001928 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f007 fc9b 	bl	800c5c8 <netif_set_up>
    netif_set_link_up(netif);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f007 fd36 	bl	800c704 <netif_set_link_up>
}
 8004c98:	e001      	b.n	8004c9e <low_level_init+0x236>
    Error_Handler();
 8004c9a:	f7fb fe41 	bl	8000920 <Error_Handler>
}
 8004c9e:	bf00      	nop
 8004ca0:	37a8      	adds	r7, #168	@ 0xa8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20004e9c 	.word	0x20004e9c
 8004cac:	40028000 	.word	0x40028000
 8004cb0:	20004df4 	.word	0x20004df4
 8004cb4:	20004d54 	.word	0x20004d54
 8004cb8:	20004f4c 	.word	0x20004f4c
 8004cbc:	0801ae00 	.word	0x0801ae00
 8004cc0:	20004e94 	.word	0x20004e94
 8004cc4:	20004e98 	.word	0x20004e98
 8004cc8:	08017880 	.word	0x08017880
 8004ccc:	08004e41 	.word	0x08004e41
 8004cd0:	2000000c 	.word	0x2000000c
 8004cd4:	20004f84 	.word	0x20004f84

08004cd8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b092      	sub	sp, #72	@ 0x48
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004cf0:	f107 030c 	add.w	r3, r7, #12
 8004cf4:	2230      	movs	r2, #48	@ 0x30
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f011 fe8c 	bl	8016a16 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004cfe:	f107 030c 	add.w	r3, r7, #12
 8004d02:	2230      	movs	r2, #48	@ 0x30
 8004d04:	2100      	movs	r1, #0
 8004d06:	4618      	mov	r0, r3
 8004d08:	f011 fe85 	bl	8016a16 <memset>

  for(q = p; q != NULL; q = q->next)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d10:	e045      	b.n	8004d9e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d902      	bls.n	8004d1e <low_level_output+0x46>
      return ERR_IF;
 8004d18:	f06f 030b 	mvn.w	r3, #11
 8004d1c:	e06c      	b.n	8004df8 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8004d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d20:	6859      	ldr	r1, [r3, #4]
 8004d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d24:	4613      	mov	r3, r2
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	3348      	adds	r3, #72	@ 0x48
 8004d2e:	443b      	add	r3, r7
 8004d30:	3b3c      	subs	r3, #60	@ 0x3c
 8004d32:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d36:	895b      	ldrh	r3, [r3, #10]
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	3348      	adds	r3, #72	@ 0x48
 8004d46:	443b      	add	r3, r7
 8004d48:	3b38      	subs	r3, #56	@ 0x38
 8004d4a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d011      	beq.n	8004d76 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004d52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d54:	1e5a      	subs	r2, r3, #1
 8004d56:	f107 000c 	add.w	r0, r7, #12
 8004d5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	440b      	add	r3, r1
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	18c1      	adds	r1, r0, r3
 8004d66:	4613      	mov	r3, r2
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	3348      	adds	r3, #72	@ 0x48
 8004d70:	443b      	add	r3, r7
 8004d72:	3b34      	subs	r3, #52	@ 0x34
 8004d74:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004d7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d80:	4613      	mov	r3, r2
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	3348      	adds	r3, #72	@ 0x48
 8004d8a:	443b      	add	r3, r7
 8004d8c:	3b34      	subs	r3, #52	@ 0x34
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004d92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d94:	3301      	adds	r3, #1
 8004d96:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004d98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1b6      	bne.n	8004d12 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	891b      	ldrh	r3, [r3, #8]
 8004da8:	461a      	mov	r2, r3
 8004daa:	4b15      	ldr	r3, [pc, #84]	@ (8004e00 <low_level_output+0x128>)
 8004dac:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004dae:	4a14      	ldr	r2, [pc, #80]	@ (8004e00 <low_level_output+0x128>)
 8004db0:	f107 030c 	add.w	r3, r7, #12
 8004db4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004db6:	4a12      	ldr	r2, [pc, #72]	@ (8004e00 <low_level_output+0x128>)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8004dbc:	6838      	ldr	r0, [r7, #0]
 8004dbe:	f008 f959 	bl	800d074 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8004dc2:	490f      	ldr	r1, [pc, #60]	@ (8004e00 <low_level_output+0x128>)
 8004dc4:	480f      	ldr	r0, [pc, #60]	@ (8004e04 <low_level_output+0x12c>)
 8004dc6:	f7fc febc 	bl	8001b42 <HAL_ETH_Transmit_IT>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10e      	bne.n	8004dee <low_level_output+0x116>
    while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004dd0:	bf00      	nop
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e08 <low_level_output+0x130>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f04f 31ff 	mov.w	r1, #4294967295
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fdbe 	bl	800595c <osSemaphoreAcquire>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f5      	bne.n	8004dd2 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8004de6:	4807      	ldr	r0, [pc, #28]	@ (8004e04 <low_level_output+0x12c>)
 8004de8:	f7fd f84a 	bl	8001e80 <HAL_ETH_ReleaseTxPacket>
 8004dec:	e002      	b.n	8004df4 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8004dee:	6838      	ldr	r0, [r7, #0]
 8004df0:	f008 f89a 	bl	800cf28 <pbuf_free>
  }

  return errval;
 8004df4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3748      	adds	r7, #72	@ 0x48
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20004f4c 	.word	0x20004f4c
 8004e04:	20004e9c 	.word	0x20004e9c
 8004e08:	20004e98 	.word	0x20004e98

08004e0c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004e18:	4b07      	ldr	r3, [pc, #28]	@ (8004e38 <low_level_input+0x2c>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d105      	bne.n	8004e2c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004e20:	f107 030c 	add.w	r3, r7, #12
 8004e24:	4619      	mov	r1, r3
 8004e26:	4805      	ldr	r0, [pc, #20]	@ (8004e3c <low_level_input+0x30>)
 8004e28:	f7fc fee7 	bl	8001bfa <HAL_ETH_ReadData>
  }

  return p;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20004d50 	.word	0x20004d50
 8004e3c:	20004e9c 	.word	0x20004e9c

08004e40 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004e50:	4b0f      	ldr	r3, [pc, #60]	@ (8004e90 <ethernetif_input+0x50>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f04f 31ff 	mov.w	r1, #4294967295
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fd7f 	bl	800595c <osSemaphoreAcquire>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1f5      	bne.n	8004e50 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004e64:	68b8      	ldr	r0, [r7, #8]
 8004e66:	f7ff ffd1 	bl	8004e0c <low_level_input>
 8004e6a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	4798      	blx	r3
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f008 f850 	bl	800cf28 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1ea      	bne.n	8004e64 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004e8e:	e7df      	b.n	8004e50 <ethernetif_input+0x10>
 8004e90:	20004e94 	.word	0x20004e94

08004e94 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <ethernetif_init+0x1c>
 8004ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8004edc <ethernetif_init+0x48>)
 8004ea4:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8004ea8:	490d      	ldr	r1, [pc, #52]	@ (8004ee0 <ethernetif_init+0x4c>)
 8004eaa:	480e      	ldr	r0, [pc, #56]	@ (8004ee4 <ethernetif_init+0x50>)
 8004eac:	f011 fd4e 	bl	801694c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2273      	movs	r2, #115	@ 0x73
 8004eb4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2274      	movs	r2, #116	@ 0x74
 8004ebc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a09      	ldr	r2, [pc, #36]	@ (8004ee8 <ethernetif_init+0x54>)
 8004ec4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a08      	ldr	r2, [pc, #32]	@ (8004eec <ethernetif_init+0x58>)
 8004eca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff fdcb 	bl	8004a68 <low_level_init>

  return ERR_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	08017888 	.word	0x08017888
 8004ee0:	080178a4 	.word	0x080178a4
 8004ee4:	080178b4 	.word	0x080178b4
 8004ee8:	080146ed 	.word	0x080146ed
 8004eec:	08004cd9 	.word	0x08004cd9

08004ef0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004efc:	68f9      	ldr	r1, [r7, #12]
 8004efe:	4809      	ldr	r0, [pc, #36]	@ (8004f24 <pbuf_free_custom+0x34>)
 8004f00:	f007 f94a 	bl	800c198 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004f04:	4b08      	ldr	r3, [pc, #32]	@ (8004f28 <pbuf_free_custom+0x38>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d107      	bne.n	8004f1c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004f0c:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <pbuf_free_custom+0x38>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004f12:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <pbuf_free_custom+0x3c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fd72 	bl	8005a00 <osSemaphoreRelease>
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	0801ae00 	.word	0x0801ae00
 8004f28:	20004d50 	.word	0x20004d50
 8004f2c:	20004e94 	.word	0x20004e94

08004f30 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004f34:	f7fc fb68 	bl	8001608 <HAL_GetTick>
 8004f38:	4603      	mov	r3, r0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08e      	sub	sp, #56	@ 0x38
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	605a      	str	r2, [r3, #4]
 8004f52:	609a      	str	r2, [r3, #8]
 8004f54:	60da      	str	r2, [r3, #12]
 8004f56:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a59      	ldr	r2, [pc, #356]	@ (80050c4 <HAL_ETH_MspInit+0x184>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	f040 80ac 	bne.w	80050bc <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004f64:	2300      	movs	r3, #0
 8004f66:	623b      	str	r3, [r7, #32]
 8004f68:	4b57      	ldr	r3, [pc, #348]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6c:	4a56      	ldr	r2, [pc, #344]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004f6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f72:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f74:	4b54      	ldr	r3, [pc, #336]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f7c:	623b      	str	r3, [r7, #32]
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	2300      	movs	r3, #0
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	4b50      	ldr	r3, [pc, #320]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f88:	4a4f      	ldr	r2, [pc, #316]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004f8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f90:	4b4d      	ldr	r3, [pc, #308]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61bb      	str	r3, [r7, #24]
 8004fa0:	4b49      	ldr	r3, [pc, #292]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa4:	4a48      	ldr	r2, [pc, #288]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004fa6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004faa:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fac:	4b46      	ldr	r3, [pc, #280]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fb4:	61bb      	str	r3, [r7, #24]
 8004fb6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	4b42      	ldr	r3, [pc, #264]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc0:	4a41      	ldr	r2, [pc, #260]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004fc2:	f043 0304 	orr.w	r3, r3, #4
 8004fc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	613b      	str	r3, [r7, #16]
 8004fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fdc:	4a3a      	ldr	r2, [pc, #232]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fe4:	4b38      	ldr	r3, [pc, #224]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	4b34      	ldr	r3, [pc, #208]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff8:	4a33      	ldr	r2, [pc, #204]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8004ffa:	f043 0302 	orr.w	r3, r3, #2
 8004ffe:	6313      	str	r3, [r2, #48]	@ 0x30
 8005000:	4b31      	ldr	r3, [pc, #196]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8005002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800500c:	2300      	movs	r3, #0
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	4b2d      	ldr	r3, [pc, #180]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005014:	4a2c      	ldr	r2, [pc, #176]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 8005016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800501a:	6313      	str	r3, [r2, #48]	@ 0x30
 800501c:	4b2a      	ldr	r3, [pc, #168]	@ (80050c8 <HAL_ETH_MspInit+0x188>)
 800501e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005028:	2332      	movs	r3, #50	@ 0x32
 800502a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502c:	2302      	movs	r3, #2
 800502e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005030:	2300      	movs	r3, #0
 8005032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005034:	2303      	movs	r3, #3
 8005036:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005038:	230b      	movs	r3, #11
 800503a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800503c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005040:	4619      	mov	r1, r3
 8005042:	4822      	ldr	r0, [pc, #136]	@ (80050cc <HAL_ETH_MspInit+0x18c>)
 8005044:	f7fd fe4e 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005048:	2386      	movs	r3, #134	@ 0x86
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800504c:	2302      	movs	r3, #2
 800504e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005050:	2300      	movs	r3, #0
 8005052:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005054:	2303      	movs	r3, #3
 8005056:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005058:	230b      	movs	r3, #11
 800505a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800505c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005060:	4619      	mov	r1, r3
 8005062:	481b      	ldr	r0, [pc, #108]	@ (80050d0 <HAL_ETH_MspInit+0x190>)
 8005064:	f7fd fe3e 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005068:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506e:	2302      	movs	r3, #2
 8005070:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005072:	2300      	movs	r3, #0
 8005074:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005076:	2303      	movs	r3, #3
 8005078:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800507a:	230b      	movs	r3, #11
 800507c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800507e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005082:	4619      	mov	r1, r3
 8005084:	4813      	ldr	r0, [pc, #76]	@ (80050d4 <HAL_ETH_MspInit+0x194>)
 8005086:	f7fd fe2d 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800508a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005090:	2302      	movs	r3, #2
 8005092:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005094:	2300      	movs	r3, #0
 8005096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005098:	2303      	movs	r3, #3
 800509a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800509c:	230b      	movs	r3, #11
 800509e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80050a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050a4:	4619      	mov	r1, r3
 80050a6:	480c      	ldr	r0, [pc, #48]	@ (80050d8 <HAL_ETH_MspInit+0x198>)
 80050a8:	f7fd fe1c 	bl	8002ce4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80050ac:	2200      	movs	r2, #0
 80050ae:	2105      	movs	r1, #5
 80050b0:	203d      	movs	r0, #61	@ 0x3d
 80050b2:	f7fc fb91 	bl	80017d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80050b6:	203d      	movs	r0, #61	@ 0x3d
 80050b8:	f7fc fbaa 	bl	8001810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80050bc:	bf00      	nop
 80050be:	3738      	adds	r7, #56	@ 0x38
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40028000 	.word	0x40028000
 80050c8:	40023800 	.word	0x40023800
 80050cc:	40020800 	.word	0x40020800
 80050d0:	40020000 	.word	0x40020000
 80050d4:	40020400 	.word	0x40020400
 80050d8:	40021800 	.word	0x40021800

080050dc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80050e0:	4802      	ldr	r0, [pc, #8]	@ (80050ec <ETH_PHY_IO_Init+0x10>)
 80050e2:	f7fd f997 	bl	8002414 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	20004e9c 	.word	0x20004e9c

080050f0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  return 0;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	68f9      	ldr	r1, [r7, #12]
 8005112:	4807      	ldr	r0, [pc, #28]	@ (8005130 <ETH_PHY_IO_ReadReg+0x30>)
 8005114:	f7fc ffe6 	bl	80020e4 <HAL_ETH_ReadPHYRegister>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800511e:	f04f 33ff 	mov.w	r3, #4294967295
 8005122:	e000      	b.n	8005126 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20004e9c 	.word	0x20004e9c

08005134 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	68f9      	ldr	r1, [r7, #12]
 8005146:	4807      	ldr	r0, [pc, #28]	@ (8005164 <ETH_PHY_IO_WriteReg+0x30>)
 8005148:	f7fd f817 	bl	800217a <HAL_ETH_WritePHYRegister>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005152:	f04f 33ff 	mov.w	r3, #4294967295
 8005156:	e000      	b.n	800515a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20004e9c 	.word	0x20004e9c

08005168 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800516c:	f7fc fa4c 	bl	8001608 <HAL_GetTick>
 8005170:	4603      	mov	r3, r0
}
 8005172:	4618      	mov	r0, r3
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b0a0      	sub	sp, #128	@ 0x80
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005180:	f107 0308 	add.w	r3, r7, #8
 8005184:	2264      	movs	r2, #100	@ 0x64
 8005186:	2100      	movs	r1, #0
 8005188:	4618      	mov	r0, r3
 800518a:	f011 fc44 	bl	8016a16 <memset>
  int32_t PHYLinkState = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005196:	2300      	movs	r3, #0
 8005198:	67bb      	str	r3, [r7, #120]	@ 0x78
 800519a:	2300      	movs	r3, #0
 800519c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80051a2:	483a      	ldr	r0, [pc, #232]	@ (800528c <ethernet_link_thread+0x114>)
 80051a4:	f7fc f973 	bl	800148e <LAN8742_GetLinkState>
 80051a8:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80051aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80051b0:	089b      	lsrs	r3, r3, #2
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00c      	beq.n	80051d6 <ethernet_link_thread+0x5e>
 80051bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051be:	2b01      	cmp	r3, #1
 80051c0:	dc09      	bgt.n	80051d6 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80051c2:	4833      	ldr	r0, [pc, #204]	@ (8005290 <ethernet_link_thread+0x118>)
 80051c4:	f7fc fc3e 	bl	8001a44 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80051c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80051ca:	f007 fa69 	bl	800c6a0 <netif_set_down>
    netif_set_link_down(netif);
 80051ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80051d0:	f007 facc 	bl	800c76c <netif_set_link_down>
 80051d4:	e055      	b.n	8005282 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80051d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d14e      	bne.n	8005282 <ethernet_link_thread+0x10a>
 80051e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	dd4b      	ble.n	8005282 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80051ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051ec:	3b02      	subs	r3, #2
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d82a      	bhi.n	8005248 <ethernet_link_thread+0xd0>
 80051f2:	a201      	add	r2, pc, #4	@ (adr r2, 80051f8 <ethernet_link_thread+0x80>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	08005209 	.word	0x08005209
 80051fc:	0800521b 	.word	0x0800521b
 8005200:	0800522b 	.word	0x0800522b
 8005204:	0800523b 	.word	0x0800523b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005208:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800520c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800520e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005212:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005214:	2301      	movs	r3, #1
 8005216:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005218:	e017      	b.n	800524a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800521a:	2300      	movs	r3, #0
 800521c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800521e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005222:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005224:	2301      	movs	r3, #1
 8005226:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005228:	e00f      	b.n	800524a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800522a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800522e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005230:	2300      	movs	r3, #0
 8005232:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005234:	2301      	movs	r3, #1
 8005236:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005238:	e007      	b.n	800524a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800523a:	2300      	movs	r3, #0
 800523c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800523e:	2300      	movs	r3, #0
 8005240:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005242:	2301      	movs	r3, #1
 8005244:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005246:	e000      	b.n	800524a <ethernet_link_thread+0xd2>
    default:
      break;
 8005248:	bf00      	nop
    }

    if(linkchanged)
 800524a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800524c:	2b00      	cmp	r3, #0
 800524e:	d018      	beq.n	8005282 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005250:	f107 0308 	add.w	r3, r7, #8
 8005254:	4619      	mov	r1, r3
 8005256:	480e      	ldr	r0, [pc, #56]	@ (8005290 <ethernet_link_thread+0x118>)
 8005258:	f7fc ffd8 	bl	800220c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800525c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800525e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005260:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005262:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005264:	f107 0308 	add.w	r3, r7, #8
 8005268:	4619      	mov	r1, r3
 800526a:	4809      	ldr	r0, [pc, #36]	@ (8005290 <ethernet_link_thread+0x118>)
 800526c:	f7fd f8b8 	bl	80023e0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005270:	4807      	ldr	r0, [pc, #28]	@ (8005290 <ethernet_link_thread+0x118>)
 8005272:	f7fc fb59 	bl	8001928 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005276:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005278:	f007 f9a6 	bl	800c5c8 <netif_set_up>
      netif_set_link_up(netif);
 800527c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800527e:	f007 fa41 	bl	800c704 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005282:	2064      	movs	r0, #100	@ 0x64
 8005284:	f000 f9b7 	bl	80055f6 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005288:	e78b      	b.n	80051a2 <ethernet_link_thread+0x2a>
 800528a:	bf00      	nop
 800528c:	20004f84 	.word	0x20004f84
 8005290:	20004e9c 	.word	0x20004e9c

08005294 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af02      	add	r7, sp, #8
 800529a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800529c:	4812      	ldr	r0, [pc, #72]	@ (80052e8 <HAL_ETH_RxAllocateCallback+0x54>)
 800529e:	f006 ff07 	bl	800c0b0 <memp_malloc_pool>
 80052a2:	60f8      	str	r0, [r7, #12]
  if (p)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d014      	beq.n	80052d4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f103 0220 	add.w	r2, r3, #32
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4a0d      	ldr	r2, [pc, #52]	@ (80052ec <HAL_ETH_RxAllocateCallback+0x58>)
 80052b8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80052c2:	9201      	str	r2, [sp, #4]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2241      	movs	r2, #65	@ 0x41
 80052ca:	2100      	movs	r1, #0
 80052cc:	2000      	movs	r0, #0
 80052ce:	f007 fc71 	bl	800cbb4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80052d2:	e005      	b.n	80052e0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80052d4:	4b06      	ldr	r3, [pc, #24]	@ (80052f0 <HAL_ETH_RxAllocateCallback+0x5c>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	0801ae00 	.word	0x0801ae00
 80052ec:	08004ef1 	.word	0x08004ef1
 80052f0:	20004d50 	.word	0x20004d50

080052f4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b089      	sub	sp, #36	@ 0x24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800530a:	2300      	movs	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3b20      	subs	r3, #32
 8005312:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	2200      	movs	r2, #0
 800531e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	887a      	ldrh	r2, [r7, #2]
 8005324:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d103      	bne.n	8005336 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	e003      	b.n	800533e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	e009      	b.n	8005360 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	891a      	ldrh	r2, [r3, #8]
 8005350:	887b      	ldrh	r3, [r7, #2]
 8005352:	4413      	add	r3, r2
 8005354:	b29a      	uxth	r2, r3
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f2      	bne.n	800534c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005366:	bf00      	nop
 8005368:	bf00      	nop
 800536a:	3724      	adds	r7, #36	@ 0x24
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f007 fdd3 	bl	800cf28 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005382:	bf00      	nop
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <__NVIC_SetPriority>:
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	6039      	str	r1, [r7, #0]
 8005396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539c:	2b00      	cmp	r3, #0
 800539e:	db0a      	blt.n	80053b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	490c      	ldr	r1, [pc, #48]	@ (80053d8 <__NVIC_SetPriority+0x4c>)
 80053a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053aa:	0112      	lsls	r2, r2, #4
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	440b      	add	r3, r1
 80053b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80053b4:	e00a      	b.n	80053cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	4908      	ldr	r1, [pc, #32]	@ (80053dc <__NVIC_SetPriority+0x50>)
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	3b04      	subs	r3, #4
 80053c4:	0112      	lsls	r2, r2, #4
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	440b      	add	r3, r1
 80053ca:	761a      	strb	r2, [r3, #24]
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	e000e100 	.word	0xe000e100
 80053dc:	e000ed00 	.word	0xe000ed00

080053e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80053e4:	4b05      	ldr	r3, [pc, #20]	@ (80053fc <SysTick_Handler+0x1c>)
 80053e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80053e8:	f002 fd6c 	bl	8007ec4 <xTaskGetSchedulerState>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d001      	beq.n	80053f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80053f2:	f003 fc61 	bl	8008cb8 <xPortSysTickHandler>
  }
}
 80053f6:	bf00      	nop
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	e000e010 	.word	0xe000e010

08005400 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005404:	2100      	movs	r1, #0
 8005406:	f06f 0004 	mvn.w	r0, #4
 800540a:	f7ff ffbf 	bl	800538c <__NVIC_SetPriority>
#endif
}
 800540e:	bf00      	nop
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800541a:	f3ef 8305 	mrs	r3, IPSR
 800541e:	603b      	str	r3, [r7, #0]
  return(result);
 8005420:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005426:	f06f 0305 	mvn.w	r3, #5
 800542a:	607b      	str	r3, [r7, #4]
 800542c:	e00c      	b.n	8005448 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800542e:	4b0a      	ldr	r3, [pc, #40]	@ (8005458 <osKernelInitialize+0x44>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d105      	bne.n	8005442 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005436:	4b08      	ldr	r3, [pc, #32]	@ (8005458 <osKernelInitialize+0x44>)
 8005438:	2201      	movs	r2, #1
 800543a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800543c:	2300      	movs	r3, #0
 800543e:	607b      	str	r3, [r7, #4]
 8005440:	e002      	b.n	8005448 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005442:	f04f 33ff 	mov.w	r3, #4294967295
 8005446:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005448:	687b      	ldr	r3, [r7, #4]
}
 800544a:	4618      	mov	r0, r3
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20004fa4 	.word	0x20004fa4

0800545c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005462:	f3ef 8305 	mrs	r3, IPSR
 8005466:	603b      	str	r3, [r7, #0]
  return(result);
 8005468:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <osKernelStart+0x1a>
    stat = osErrorISR;
 800546e:	f06f 0305 	mvn.w	r3, #5
 8005472:	607b      	str	r3, [r7, #4]
 8005474:	e010      	b.n	8005498 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005476:	4b0b      	ldr	r3, [pc, #44]	@ (80054a4 <osKernelStart+0x48>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d109      	bne.n	8005492 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800547e:	f7ff ffbf 	bl	8005400 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005482:	4b08      	ldr	r3, [pc, #32]	@ (80054a4 <osKernelStart+0x48>)
 8005484:	2202      	movs	r2, #2
 8005486:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005488:	f002 f896 	bl	80075b8 <vTaskStartScheduler>
      stat = osOK;
 800548c:	2300      	movs	r3, #0
 800548e:	607b      	str	r3, [r7, #4]
 8005490:	e002      	b.n	8005498 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005492:	f04f 33ff 	mov.w	r3, #4294967295
 8005496:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005498:	687b      	ldr	r3, [r7, #4]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20004fa4 	.word	0x20004fa4

080054a8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ae:	f3ef 8305 	mrs	r3, IPSR
 80054b2:	603b      	str	r3, [r7, #0]
  return(result);
 80054b4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80054ba:	f002 f9a9 	bl	8007810 <xTaskGetTickCountFromISR>
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	e002      	b.n	80054c8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80054c2:	f002 f995 	bl	80077f0 <xTaskGetTickCount>
 80054c6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80054c8:	687b      	ldr	r3, [r7, #4]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b08e      	sub	sp, #56	@ 0x38
 80054d6:	af04      	add	r7, sp, #16
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054e2:	f3ef 8305 	mrs	r3, IPSR
 80054e6:	617b      	str	r3, [r7, #20]
  return(result);
 80054e8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d17e      	bne.n	80055ec <osThreadNew+0x11a>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d07b      	beq.n	80055ec <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80054f4:	2380      	movs	r3, #128	@ 0x80
 80054f6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80054f8:	2318      	movs	r3, #24
 80054fa:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80054fc:	2300      	movs	r3, #0
 80054fe:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005500:	f04f 33ff 	mov.w	r3, #4294967295
 8005504:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d045      	beq.n	8005598 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <osThreadNew+0x48>
        name = attr->name;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d008      	beq.n	8005540 <osThreadNew+0x6e>
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	2b38      	cmp	r3, #56	@ 0x38
 8005532:	d805      	bhi.n	8005540 <osThreadNew+0x6e>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <osThreadNew+0x72>
        return (NULL);
 8005540:	2300      	movs	r3, #0
 8005542:	e054      	b.n	80055ee <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	089b      	lsrs	r3, r3, #2
 8005552:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00e      	beq.n	800557a <osThreadNew+0xa8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	2ba7      	cmp	r3, #167	@ 0xa7
 8005562:	d90a      	bls.n	800557a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005568:	2b00      	cmp	r3, #0
 800556a:	d006      	beq.n	800557a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <osThreadNew+0xa8>
        mem = 1;
 8005574:	2301      	movs	r3, #1
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	e010      	b.n	800559c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10c      	bne.n	800559c <osThreadNew+0xca>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d108      	bne.n	800559c <osThreadNew+0xca>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d104      	bne.n	800559c <osThreadNew+0xca>
          mem = 0;
 8005592:	2300      	movs	r3, #0
 8005594:	61bb      	str	r3, [r7, #24]
 8005596:	e001      	b.n	800559c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d110      	bne.n	80055c4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055aa:	9202      	str	r2, [sp, #8]
 80055ac:	9301      	str	r3, [sp, #4]
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	6a3a      	ldr	r2, [r7, #32]
 80055b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f001 fe09 	bl	80071d0 <xTaskCreateStatic>
 80055be:	4603      	mov	r3, r0
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	e013      	b.n	80055ec <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d110      	bne.n	80055ec <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	f107 0310 	add.w	r3, r7, #16
 80055d2:	9301      	str	r3, [sp, #4]
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f001 fe57 	bl	8007290 <xTaskCreate>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d001      	beq.n	80055ec <osThreadNew+0x11a>
            hTask = NULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055ec:	693b      	ldr	r3, [r7, #16]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3728      	adds	r7, #40	@ 0x28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055fe:	f3ef 8305 	mrs	r3, IPSR
 8005602:	60bb      	str	r3, [r7, #8]
  return(result);
 8005604:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <osDelay+0x1c>
    stat = osErrorISR;
 800560a:	f06f 0305 	mvn.w	r3, #5
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	e007      	b.n	8005622 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <osDelay+0x2c>
      vTaskDelay(ticks);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f001 ff95 	bl	800754c <vTaskDelay>
    }
  }

  return (stat);
 8005622:	68fb      	ldr	r3, [r7, #12]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005638:	f3ef 8305 	mrs	r3, IPSR
 800563c:	60bb      	str	r3, [r7, #8]
  return(result);
 800563e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005640:	2b00      	cmp	r3, #0
 8005642:	d174      	bne.n	800572e <osMutexNew+0x102>
    if (attr != NULL) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <osMutexNew+0x26>
      type = attr->attr_bits;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	e001      	b.n	8005656 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <osMutexNew+0x3a>
      rmtx = 1U;
 8005660:	2301      	movs	r3, #1
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	e001      	b.n	800566a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	2b00      	cmp	r3, #0
 8005672:	d15c      	bne.n	800572e <osMutexNew+0x102>
      mem = -1;
 8005674:	f04f 33ff 	mov.w	r3, #4294967295
 8005678:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d015      	beq.n	80056ac <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d006      	beq.n	8005696 <osMutexNew+0x6a>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	2b4f      	cmp	r3, #79	@ 0x4f
 800568e:	d902      	bls.n	8005696 <osMutexNew+0x6a>
          mem = 1;
 8005690:	2301      	movs	r3, #1
 8005692:	613b      	str	r3, [r7, #16]
 8005694:	e00c      	b.n	80056b0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d108      	bne.n	80056b0 <osMutexNew+0x84>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d104      	bne.n	80056b0 <osMutexNew+0x84>
            mem = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	e001      	b.n	80056b0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80056ac:	2300      	movs	r3, #0
 80056ae:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d112      	bne.n	80056dc <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d007      	beq.n	80056cc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	4619      	mov	r1, r3
 80056c2:	2004      	movs	r0, #4
 80056c4:	f000 fdd9 	bl	800627a <xQueueCreateMutexStatic>
 80056c8:	61f8      	str	r0, [r7, #28]
 80056ca:	e016      	b.n	80056fa <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	4619      	mov	r1, r3
 80056d2:	2001      	movs	r0, #1
 80056d4:	f000 fdd1 	bl	800627a <xQueueCreateMutexStatic>
 80056d8:	61f8      	str	r0, [r7, #28]
 80056da:	e00e      	b.n	80056fa <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10b      	bne.n	80056fa <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80056e8:	2004      	movs	r0, #4
 80056ea:	f000 fdae 	bl	800624a <xQueueCreateMutex>
 80056ee:	61f8      	str	r0, [r7, #28]
 80056f0:	e003      	b.n	80056fa <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80056f2:	2001      	movs	r0, #1
 80056f4:	f000 fda9 	bl	800624a <xQueueCreateMutex>
 80056f8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00c      	beq.n	800571a <osMutexNew+0xee>
        if (attr != NULL) {
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <osMutexNew+0xe2>
          name = attr->name;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	e001      	b.n	8005712 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005712:	68f9      	ldr	r1, [r7, #12]
 8005714:	69f8      	ldr	r0, [r7, #28]
 8005716:	f001 fcd3 	bl	80070c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d006      	beq.n	800572e <osMutexNew+0x102>
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800572e:	69fb      	ldr	r3, [r7, #28]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3720      	adds	r7, #32
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f023 0301 	bic.w	r3, r3, #1
 8005748:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005756:	f3ef 8305 	mrs	r3, IPSR
 800575a:	60bb      	str	r3, [r7, #8]
  return(result);
 800575c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005762:	f06f 0305 	mvn.w	r3, #5
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	e02c      	b.n	80057c4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d103      	bne.n	8005778 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005770:	f06f 0303 	mvn.w	r3, #3
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	e025      	b.n	80057c4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d011      	beq.n	80057a2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6938      	ldr	r0, [r7, #16]
 8005782:	f000 fdca 	bl	800631a <xQueueTakeMutexRecursive>
 8005786:	4603      	mov	r3, r0
 8005788:	2b01      	cmp	r3, #1
 800578a:	d01b      	beq.n	80057c4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005792:	f06f 0301 	mvn.w	r3, #1
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	e014      	b.n	80057c4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800579a:	f06f 0302 	mvn.w	r3, #2
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	e010      	b.n	80057c4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80057a2:	6839      	ldr	r1, [r7, #0]
 80057a4:	6938      	ldr	r0, [r7, #16]
 80057a6:	f001 f96f 	bl	8006a88 <xQueueSemaphoreTake>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d009      	beq.n	80057c4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80057b6:	f06f 0301 	mvn.w	r3, #1
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e002      	b.n	80057c4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80057be:	f06f 0302 	mvn.w	r3, #2
 80057c2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80057c4:	697b      	ldr	r3, [r7, #20]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b086      	sub	sp, #24
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057ea:	f3ef 8305 	mrs	r3, IPSR
 80057ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80057f0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <osMutexRelease+0x30>
    stat = osErrorISR;
 80057f6:	f06f 0305 	mvn.w	r3, #5
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	e01f      	b.n	800583e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d103      	bne.n	800580c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005804:	f06f 0303 	mvn.w	r3, #3
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	e018      	b.n	800583e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d009      	beq.n	8005826 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005812:	6938      	ldr	r0, [r7, #16]
 8005814:	f000 fd4c 	bl	80062b0 <xQueueGiveMutexRecursive>
 8005818:	4603      	mov	r3, r0
 800581a:	2b01      	cmp	r3, #1
 800581c:	d00f      	beq.n	800583e <osMutexRelease+0x70>
        stat = osErrorResource;
 800581e:	f06f 0302 	mvn.w	r3, #2
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	e00b      	b.n	800583e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005826:	2300      	movs	r3, #0
 8005828:	2200      	movs	r2, #0
 800582a:	2100      	movs	r1, #0
 800582c:	6938      	ldr	r0, [r7, #16]
 800582e:	f000 fe19 	bl	8006464 <xQueueGenericSend>
 8005832:	4603      	mov	r3, r0
 8005834:	2b01      	cmp	r3, #1
 8005836:	d002      	beq.n	800583e <osMutexRelease+0x70>
        stat = osErrorResource;
 8005838:	f06f 0302 	mvn.w	r3, #2
 800583c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800583e:	697b      	ldr	r3, [r7, #20]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005848:	b580      	push	{r7, lr}
 800584a:	b08a      	sub	sp, #40	@ 0x28
 800584c:	af02      	add	r7, sp, #8
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005854:	2300      	movs	r3, #0
 8005856:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005858:	f3ef 8305 	mrs	r3, IPSR
 800585c:	613b      	str	r3, [r7, #16]
  return(result);
 800585e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005860:	2b00      	cmp	r3, #0
 8005862:	d175      	bne.n	8005950 <osSemaphoreNew+0x108>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d072      	beq.n	8005950 <osSemaphoreNew+0x108>
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	429a      	cmp	r2, r3
 8005870:	d86e      	bhi.n	8005950 <osSemaphoreNew+0x108>
    mem = -1;
 8005872:	f04f 33ff 	mov.w	r3, #4294967295
 8005876:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d015      	beq.n	80058aa <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d006      	beq.n	8005894 <osSemaphoreNew+0x4c>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	2b4f      	cmp	r3, #79	@ 0x4f
 800588c:	d902      	bls.n	8005894 <osSemaphoreNew+0x4c>
        mem = 1;
 800588e:	2301      	movs	r3, #1
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	e00c      	b.n	80058ae <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d108      	bne.n	80058ae <osSemaphoreNew+0x66>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d104      	bne.n	80058ae <osSemaphoreNew+0x66>
          mem = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	61bb      	str	r3, [r7, #24]
 80058a8:	e001      	b.n	80058ae <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b4:	d04c      	beq.n	8005950 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d128      	bne.n	800590e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d10a      	bne.n	80058d8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	2203      	movs	r2, #3
 80058c8:	9200      	str	r2, [sp, #0]
 80058ca:	2200      	movs	r2, #0
 80058cc:	2100      	movs	r1, #0
 80058ce:	2001      	movs	r0, #1
 80058d0:	f000 fbc6 	bl	8006060 <xQueueGenericCreateStatic>
 80058d4:	61f8      	str	r0, [r7, #28]
 80058d6:	e005      	b.n	80058e4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80058d8:	2203      	movs	r2, #3
 80058da:	2100      	movs	r1, #0
 80058dc:	2001      	movs	r0, #1
 80058de:	f000 fc3c 	bl	800615a <xQueueGenericCreate>
 80058e2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d022      	beq.n	8005930 <osSemaphoreNew+0xe8>
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01f      	beq.n	8005930 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80058f0:	2300      	movs	r3, #0
 80058f2:	2200      	movs	r2, #0
 80058f4:	2100      	movs	r1, #0
 80058f6:	69f8      	ldr	r0, [r7, #28]
 80058f8:	f000 fdb4 	bl	8006464 <xQueueGenericSend>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d016      	beq.n	8005930 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005902:	69f8      	ldr	r0, [r7, #28]
 8005904:	f001 fa90 	bl	8006e28 <vQueueDelete>
            hSemaphore = NULL;
 8005908:	2300      	movs	r3, #0
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	e010      	b.n	8005930 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d108      	bne.n	8005926 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	461a      	mov	r2, r3
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 fd33 	bl	8006388 <xQueueCreateCountingSemaphoreStatic>
 8005922:	61f8      	str	r0, [r7, #28]
 8005924:	e004      	b.n	8005930 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 fd66 	bl	80063fa <xQueueCreateCountingSemaphore>
 800592e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00c      	beq.n	8005950 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <osSemaphoreNew+0xfc>
          name = attr->name;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	e001      	b.n	8005948 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005944:	2300      	movs	r3, #0
 8005946:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005948:	6979      	ldr	r1, [r7, #20]
 800594a:	69f8      	ldr	r0, [r7, #28]
 800594c:	f001 fbb8 	bl	80070c0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005950:	69fb      	ldr	r3, [r7, #28]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3720      	adds	r7, #32
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d103      	bne.n	800597c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005974:	f06f 0303 	mvn.w	r3, #3
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e039      	b.n	80059f0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800597c:	f3ef 8305 	mrs	r3, IPSR
 8005980:	60fb      	str	r3, [r7, #12]
  return(result);
 8005982:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005984:	2b00      	cmp	r3, #0
 8005986:	d022      	beq.n	80059ce <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800598e:	f06f 0303 	mvn.w	r3, #3
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	e02c      	b.n	80059f0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005996:	2300      	movs	r3, #0
 8005998:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800599a:	f107 0308 	add.w	r3, r7, #8
 800599e:	461a      	mov	r2, r3
 80059a0:	2100      	movs	r1, #0
 80059a2:	6938      	ldr	r0, [r7, #16]
 80059a4:	f001 f980 	bl	8006ca8 <xQueueReceiveFromISR>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d003      	beq.n	80059b6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80059ae:	f06f 0302 	mvn.w	r3, #2
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	e01c      	b.n	80059f0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d019      	beq.n	80059f0 <osSemaphoreAcquire+0x94>
 80059bc:	4b0f      	ldr	r3, [pc, #60]	@ (80059fc <osSemaphoreAcquire+0xa0>)
 80059be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	e010      	b.n	80059f0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	6938      	ldr	r0, [r7, #16]
 80059d2:	f001 f859 	bl	8006a88 <xQueueSemaphoreTake>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d009      	beq.n	80059f0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80059e2:	f06f 0301 	mvn.w	r3, #1
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	e002      	b.n	80059f0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80059ea:	f06f 0302 	mvn.w	r3, #2
 80059ee:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80059f0:	697b      	ldr	r3, [r7, #20]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	e000ed04 	.word	0xe000ed04

08005a00 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d103      	bne.n	8005a1e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005a16:	f06f 0303 	mvn.w	r3, #3
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	e02c      	b.n	8005a78 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a1e:	f3ef 8305 	mrs	r3, IPSR
 8005a22:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a24:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d01a      	beq.n	8005a60 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005a2e:	f107 0308 	add.w	r3, r7, #8
 8005a32:	4619      	mov	r1, r3
 8005a34:	6938      	ldr	r0, [r7, #16]
 8005a36:	f000 feb5 	bl	80067a4 <xQueueGiveFromISR>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d003      	beq.n	8005a48 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005a40:	f06f 0302 	mvn.w	r3, #2
 8005a44:	617b      	str	r3, [r7, #20]
 8005a46:	e017      	b.n	8005a78 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d014      	beq.n	8005a78 <osSemaphoreRelease+0x78>
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a84 <osSemaphoreRelease+0x84>)
 8005a50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	e00b      	b.n	8005a78 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005a60:	2300      	movs	r3, #0
 8005a62:	2200      	movs	r2, #0
 8005a64:	2100      	movs	r1, #0
 8005a66:	6938      	ldr	r0, [r7, #16]
 8005a68:	f000 fcfc 	bl	8006464 <xQueueGenericSend>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d002      	beq.n	8005a78 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005a72:	f06f 0302 	mvn.w	r3, #2
 8005a76:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005a78:	697b      	ldr	r3, [r7, #20]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	e000ed04 	.word	0xe000ed04

08005a88 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a94:	f3ef 8305 	mrs	r3, IPSR
 8005a98:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8005aa0:	f06f 0305 	mvn.w	r3, #5
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	e00e      	b.n	8005ac6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d103      	bne.n	8005ab6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8005aae:	f06f 0303 	mvn.w	r3, #3
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	e007      	b.n	8005ac6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005ab6:	6938      	ldr	r0, [r7, #16]
 8005ab8:	f001 fb2c 	bl	8007114 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8005ac0:	6938      	ldr	r0, [r7, #16]
 8005ac2:	f001 f9b1 	bl	8006e28 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005ac6:	697b      	ldr	r3, [r7, #20]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	@ 0x28
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ae0:	f3ef 8305 	mrs	r3, IPSR
 8005ae4:	613b      	str	r3, [r7, #16]
  return(result);
 8005ae6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d15f      	bne.n	8005bac <osMessageQueueNew+0xdc>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d05c      	beq.n	8005bac <osMessageQueueNew+0xdc>
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d059      	beq.n	8005bac <osMessageQueueNew+0xdc>
    mem = -1;
 8005af8:	f04f 33ff 	mov.w	r3, #4294967295
 8005afc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d029      	beq.n	8005b58 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d012      	beq.n	8005b32 <osMessageQueueNew+0x62>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	2b4f      	cmp	r3, #79	@ 0x4f
 8005b12:	d90e      	bls.n	8005b32 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	695a      	ldr	r2, [r3, #20]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	fb01 f303 	mul.w	r3, r1, r3
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d302      	bcc.n	8005b32 <osMessageQueueNew+0x62>
        mem = 1;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	61bb      	str	r3, [r7, #24]
 8005b30:	e014      	b.n	8005b5c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d110      	bne.n	8005b5c <osMessageQueueNew+0x8c>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10c      	bne.n	8005b5c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d108      	bne.n	8005b5c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d104      	bne.n	8005b5c <osMessageQueueNew+0x8c>
          mem = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	61bb      	str	r3, [r7, #24]
 8005b56:	e001      	b.n	8005b5c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d10b      	bne.n	8005b7a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691a      	ldr	r2, [r3, #16]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	9100      	str	r1, [sp, #0]
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 fa75 	bl	8006060 <xQueueGenericCreateStatic>
 8005b76:	61f8      	str	r0, [r7, #28]
 8005b78:	e008      	b.n	8005b8c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d105      	bne.n	8005b8c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005b80:	2200      	movs	r2, #0
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 fae8 	bl	800615a <xQueueGenericCreate>
 8005b8a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00c      	beq.n	8005bac <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	e001      	b.n	8005ba4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005ba4:	6979      	ldr	r1, [r7, #20]
 8005ba6:	69f8      	ldr	r0, [r7, #28]
 8005ba8:	f001 fa8a 	bl	80070c0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005bac:	69fb      	ldr	r3, [r7, #28]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3720      	adds	r7, #32
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bd0:	f3ef 8305 	mrs	r3, IPSR
 8005bd4:	617b      	str	r3, [r7, #20]
  return(result);
 8005bd6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d028      	beq.n	8005c2e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d005      	beq.n	8005bee <osMessageQueuePut+0x36>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <osMessageQueuePut+0x36>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005bee:	f06f 0303 	mvn.w	r3, #3
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	e038      	b.n	8005c68 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005bfa:	f107 0210 	add.w	r2, r7, #16
 8005bfe:	2300      	movs	r3, #0
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	69b8      	ldr	r0, [r7, #24]
 8005c04:	f000 fd30 	bl	8006668 <xQueueGenericSendFromISR>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d003      	beq.n	8005c16 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005c0e:	f06f 0302 	mvn.w	r3, #2
 8005c12:	61fb      	str	r3, [r7, #28]
 8005c14:	e028      	b.n	8005c68 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d025      	beq.n	8005c68 <osMessageQueuePut+0xb0>
 8005c1c:	4b15      	ldr	r3, [pc, #84]	@ (8005c74 <osMessageQueuePut+0xbc>)
 8005c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	e01c      	b.n	8005c68 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <osMessageQueuePut+0x82>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d103      	bne.n	8005c42 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005c3a:	f06f 0303 	mvn.w	r3, #3
 8005c3e:	61fb      	str	r3, [r7, #28]
 8005c40:	e012      	b.n	8005c68 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c42:	2300      	movs	r3, #0
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	69b8      	ldr	r0, [r7, #24]
 8005c4a:	f000 fc0b 	bl	8006464 <xQueueGenericSend>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d009      	beq.n	8005c68 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005c5a:	f06f 0301 	mvn.w	r3, #1
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	e002      	b.n	8005c68 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005c62:	f06f 0302 	mvn.w	r3, #2
 8005c66:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c68:	69fb      	ldr	r3, [r7, #28]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	e000ed04 	.word	0xe000ed04

08005c78 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c8e:	f3ef 8305 	mrs	r3, IPSR
 8005c92:	617b      	str	r3, [r7, #20]
  return(result);
 8005c94:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d028      	beq.n	8005cec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <osMessageQueueGet+0x34>
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <osMessageQueueGet+0x34>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005cac:	f06f 0303 	mvn.w	r3, #3
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	e037      	b.n	8005d24 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005cb8:	f107 0310 	add.w	r3, r7, #16
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	68b9      	ldr	r1, [r7, #8]
 8005cc0:	69b8      	ldr	r0, [r7, #24]
 8005cc2:	f000 fff1 	bl	8006ca8 <xQueueReceiveFromISR>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d003      	beq.n	8005cd4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005ccc:	f06f 0302 	mvn.w	r3, #2
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	e027      	b.n	8005d24 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d024      	beq.n	8005d24 <osMessageQueueGet+0xac>
 8005cda:	4b15      	ldr	r3, [pc, #84]	@ (8005d30 <osMessageQueueGet+0xb8>)
 8005cdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	e01b      	b.n	8005d24 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <osMessageQueueGet+0x80>
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d103      	bne.n	8005d00 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005cf8:	f06f 0303 	mvn.w	r3, #3
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	e011      	b.n	8005d24 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	69b8      	ldr	r0, [r7, #24]
 8005d06:	f000 fddd 	bl	80068c4 <xQueueReceive>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d009      	beq.n	8005d24 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005d16:	f06f 0301 	mvn.w	r3, #1
 8005d1a:	61fb      	str	r3, [r7, #28]
 8005d1c:	e002      	b.n	8005d24 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005d1e:	f06f 0302 	mvn.w	r3, #2
 8005d22:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005d24:	69fb      	ldr	r3, [r7, #28]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3720      	adds	r7, #32
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	e000ed04 	.word	0xe000ed04

08005d34 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d102      	bne.n	8005d4c <osMessageQueueGetCount+0x18>
    count = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	e00e      	b.n	8005d6a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d4c:	f3ef 8305 	mrs	r3, IPSR
 8005d50:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d52:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d004      	beq.n	8005d62 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005d58:	6938      	ldr	r0, [r7, #16]
 8005d5a:	f001 f846 	bl	8006dea <uxQueueMessagesWaitingFromISR>
 8005d5e:	6178      	str	r0, [r7, #20]
 8005d60:	e003      	b.n	8005d6a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005d62:	6938      	ldr	r0, [r7, #16]
 8005d64:	f001 f822 	bl	8006dac <uxQueueMessagesWaiting>
 8005d68:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8005d6a:	697b      	ldr	r3, [r7, #20]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d80:	f3ef 8305 	mrs	r3, IPSR
 8005d84:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d86:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8005d8c:	f06f 0305 	mvn.w	r3, #5
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	e00e      	b.n	8005db2 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d103      	bne.n	8005da2 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 8005d9a:	f06f 0303 	mvn.w	r3, #3
 8005d9e:	617b      	str	r3, [r7, #20]
 8005da0:	e007      	b.n	8005db2 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8005da2:	6938      	ldr	r0, [r7, #16]
 8005da4:	f001 f9b6 	bl	8007114 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8005dac:	6938      	ldr	r0, [r7, #16]
 8005dae:	f001 f83b 	bl	8006e28 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005db2:	697b      	ldr	r3, [r7, #20]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4a07      	ldr	r2, [pc, #28]	@ (8005de8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005dcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	4a06      	ldr	r2, [pc, #24]	@ (8005dec <vApplicationGetIdleTaskMemory+0x30>)
 8005dd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2280      	movs	r2, #128	@ 0x80
 8005dd8:	601a      	str	r2, [r3, #0]
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20004fa8 	.word	0x20004fa8
 8005dec:	20005050 	.word	0x20005050

08005df0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4a07      	ldr	r2, [pc, #28]	@ (8005e1c <vApplicationGetTimerTaskMemory+0x2c>)
 8005e00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	4a06      	ldr	r2, [pc, #24]	@ (8005e20 <vApplicationGetTimerTaskMemory+0x30>)
 8005e06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e0e:	601a      	str	r2, [r3, #0]
}
 8005e10:	bf00      	nop
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	20005250 	.word	0x20005250
 8005e20:	200052f8 	.word	0x200052f8

08005e24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f103 0208 	add.w	r2, r3, #8
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f103 0208 	add.w	r2, r3, #8
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f103 0208 	add.w	r2, r3, #8
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b085      	sub	sp, #20
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	601a      	str	r2, [r3, #0]
}
 8005eba:	bf00      	nop
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005edc:	d103      	bne.n	8005ee6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	e00c      	b.n	8005f00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3308      	adds	r3, #8
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	e002      	b.n	8005ef4 <vListInsert+0x2e>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d2f6      	bcs.n	8005eee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	601a      	str	r2, [r3, #0]
}
 8005f2c:	bf00      	nop
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6892      	ldr	r2, [r2, #8]
 8005f4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6852      	ldr	r2, [r2, #4]
 8005f58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d103      	bne.n	8005f6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	1e5a      	subs	r2, r3, #1
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10b      	bne.n	8005fb8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005fb2:	bf00      	nop
 8005fb4:	bf00      	nop
 8005fb6:	e7fd      	b.n	8005fb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005fb8:	f002 fdee 	bl	8008b98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc4:	68f9      	ldr	r1, [r7, #12]
 8005fc6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005fc8:	fb01 f303 	mul.w	r3, r1, r3
 8005fcc:	441a      	add	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	68f9      	ldr	r1, [r7, #12]
 8005fec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005fee:	fb01 f303 	mul.w	r3, r1, r3
 8005ff2:	441a      	add	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	22ff      	movs	r2, #255	@ 0xff
 8005ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	22ff      	movs	r2, #255	@ 0xff
 8006004:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d114      	bne.n	8006038 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d01a      	beq.n	800604c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3310      	adds	r3, #16
 800601a:	4618      	mov	r0, r3
 800601c:	f001 fd7c 	bl	8007b18 <xTaskRemoveFromEventList>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d012      	beq.n	800604c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006026:	4b0d      	ldr	r3, [pc, #52]	@ (800605c <xQueueGenericReset+0xd0>)
 8006028:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	e009      	b.n	800604c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	3310      	adds	r3, #16
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff fef1 	bl	8005e24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3324      	adds	r3, #36	@ 0x24
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff feec 	bl	8005e24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800604c:	f002 fdd6 	bl	8008bfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006050:	2301      	movs	r3, #1
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	e000ed04 	.word	0xe000ed04

08006060 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006060:	b580      	push	{r7, lr}
 8006062:	b08e      	sub	sp, #56	@ 0x38
 8006064:	af02      	add	r7, sp, #8
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10b      	bne.n	800608c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006086:	bf00      	nop
 8006088:	bf00      	nop
 800608a:	e7fd      	b.n	8006088 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10b      	bne.n	80060aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop
 80060a8:	e7fd      	b.n	80060a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <xQueueGenericCreateStatic+0x56>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <xQueueGenericCreateStatic+0x5a>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <xQueueGenericCreateStatic+0x5c>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10b      	bne.n	80060d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	623b      	str	r3, [r7, #32]
}
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	e7fd      	b.n	80060d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <xQueueGenericCreateStatic+0x84>
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <xQueueGenericCreateStatic+0x88>
 80060e4:	2301      	movs	r3, #1
 80060e6:	e000      	b.n	80060ea <xQueueGenericCreateStatic+0x8a>
 80060e8:	2300      	movs	r3, #0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10b      	bne.n	8006106 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	61fb      	str	r3, [r7, #28]
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	e7fd      	b.n	8006102 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006106:	2350      	movs	r3, #80	@ 0x50
 8006108:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b50      	cmp	r3, #80	@ 0x50
 800610e:	d00b      	beq.n	8006128 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	61bb      	str	r3, [r7, #24]
}
 8006122:	bf00      	nop
 8006124:	bf00      	nop
 8006126:	e7fd      	b.n	8006124 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006128:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800612e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00d      	beq.n	8006150 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800613c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	4613      	mov	r3, r2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	68b9      	ldr	r1, [r7, #8]
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 f840 	bl	80061d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006152:	4618      	mov	r0, r3
 8006154:	3730      	adds	r7, #48	@ 0x30
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800615a:	b580      	push	{r7, lr}
 800615c:	b08a      	sub	sp, #40	@ 0x28
 800615e:	af02      	add	r7, sp, #8
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	4613      	mov	r3, r2
 8006166:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10b      	bne.n	8006186 <xQueueGenericCreate+0x2c>
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	613b      	str	r3, [r7, #16]
}
 8006180:	bf00      	nop
 8006182:	bf00      	nop
 8006184:	e7fd      	b.n	8006182 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	fb02 f303 	mul.w	r3, r2, r3
 800618e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	3350      	adds	r3, #80	@ 0x50
 8006194:	4618      	mov	r0, r3
 8006196:	f002 fe21 	bl	8008ddc <pvPortMalloc>
 800619a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d011      	beq.n	80061c6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	3350      	adds	r3, #80	@ 0x50
 80061aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061b4:	79fa      	ldrb	r2, [r7, #7]
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	4613      	mov	r3, r2
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	68b9      	ldr	r1, [r7, #8]
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 f805 	bl	80061d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061c6:	69bb      	ldr	r3, [r7, #24]
	}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3720      	adds	r7, #32
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d103      	bne.n	80061ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e002      	b.n	80061f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061fe:	2101      	movs	r1, #1
 8006200:	69b8      	ldr	r0, [r7, #24]
 8006202:	f7ff fec3 	bl	8005f8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	78fa      	ldrb	r2, [r7, #3]
 800620a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006216:	b580      	push	{r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00e      	beq.n	8006242 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006236:	2300      	movs	r3, #0
 8006238:	2200      	movs	r2, #0
 800623a:	2100      	movs	r1, #0
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f911 	bl	8006464 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800624a:	b580      	push	{r7, lr}
 800624c:	b086      	sub	sp, #24
 800624e:	af00      	add	r7, sp, #0
 8006250:	4603      	mov	r3, r0
 8006252:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006254:	2301      	movs	r3, #1
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	2300      	movs	r3, #0
 800625a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	461a      	mov	r2, r3
 8006260:	6939      	ldr	r1, [r7, #16]
 8006262:	6978      	ldr	r0, [r7, #20]
 8006264:	f7ff ff79 	bl	800615a <xQueueGenericCreate>
 8006268:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff ffd3 	bl	8006216 <prvInitialiseMutex>

		return xNewQueue;
 8006270:	68fb      	ldr	r3, [r7, #12]
	}
 8006272:	4618      	mov	r0, r3
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800627a:	b580      	push	{r7, lr}
 800627c:	b088      	sub	sp, #32
 800627e:	af02      	add	r7, sp, #8
 8006280:	4603      	mov	r3, r0
 8006282:	6039      	str	r1, [r7, #0]
 8006284:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006286:	2301      	movs	r3, #1
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	2300      	movs	r3, #0
 800628c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2200      	movs	r2, #0
 8006296:	6939      	ldr	r1, [r7, #16]
 8006298:	6978      	ldr	r0, [r7, #20]
 800629a:	f7ff fee1 	bl	8006060 <xQueueGenericCreateStatic>
 800629e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f7ff ffb8 	bl	8006216 <prvInitialiseMutex>

		return xNewQueue;
 80062a6:	68fb      	ldr	r3, [r7, #12]
	}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80062b0:	b590      	push	{r4, r7, lr}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10b      	bne.n	80062da <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	60fb      	str	r3, [r7, #12]
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop
 80062d8:	e7fd      	b.n	80062d6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	689c      	ldr	r4, [r3, #8]
 80062de:	f001 fde1 	bl	8007ea4 <xTaskGetCurrentTaskHandle>
 80062e2:	4603      	mov	r3, r0
 80062e4:	429c      	cmp	r4, r3
 80062e6:	d111      	bne.n	800630c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	1e5a      	subs	r2, r3, #1
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d105      	bne.n	8006306 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80062fa:	2300      	movs	r3, #0
 80062fc:	2200      	movs	r2, #0
 80062fe:	2100      	movs	r1, #0
 8006300:	6938      	ldr	r0, [r7, #16]
 8006302:	f000 f8af 	bl	8006464 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006306:	2301      	movs	r3, #1
 8006308:	617b      	str	r3, [r7, #20]
 800630a:	e001      	b.n	8006310 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800630c:	2300      	movs	r3, #0
 800630e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006310:	697b      	ldr	r3, [r7, #20]
	}
 8006312:	4618      	mov	r0, r3
 8006314:	371c      	adds	r7, #28
 8006316:	46bd      	mov	sp, r7
 8006318:	bd90      	pop	{r4, r7, pc}

0800631a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800631a:	b590      	push	{r4, r7, lr}
 800631c:	b087      	sub	sp, #28
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10b      	bne.n	8006346 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	60fb      	str	r3, [r7, #12]
}
 8006340:	bf00      	nop
 8006342:	bf00      	nop
 8006344:	e7fd      	b.n	8006342 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	689c      	ldr	r4, [r3, #8]
 800634a:	f001 fdab 	bl	8007ea4 <xTaskGetCurrentTaskHandle>
 800634e:	4603      	mov	r3, r0
 8006350:	429c      	cmp	r4, r3
 8006352:	d107      	bne.n	8006364 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800635e:	2301      	movs	r3, #1
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	e00c      	b.n	800637e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6938      	ldr	r0, [r7, #16]
 8006368:	f000 fb8e 	bl	8006a88 <xQueueSemaphoreTake>
 800636c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d004      	beq.n	800637e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800637e:	697b      	ldr	r3, [r7, #20]
	}
 8006380:	4618      	mov	r0, r3
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	bd90      	pop	{r4, r7, pc}

08006388 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08a      	sub	sp, #40	@ 0x28
 800638c:	af02      	add	r7, sp, #8
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10b      	bne.n	80063b2 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	61bb      	str	r3, [r7, #24]
}
 80063ac:	bf00      	nop
 80063ae:	bf00      	nop
 80063b0:	e7fd      	b.n	80063ae <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d90b      	bls.n	80063d2 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	617b      	str	r3, [r7, #20]
}
 80063cc:	bf00      	nop
 80063ce:	bf00      	nop
 80063d0:	e7fd      	b.n	80063ce <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80063d2:	2302      	movs	r3, #2
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	2100      	movs	r1, #0
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f7ff fe3f 	bl	8006060 <xQueueGenericCreateStatic>
 80063e2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80063f0:	69fb      	ldr	r3, [r7, #28]
	}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3720      	adds	r7, #32
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b086      	sub	sp, #24
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10b      	bne.n	8006422 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	613b      	str	r3, [r7, #16]
}
 800641c:	bf00      	nop
 800641e:	bf00      	nop
 8006420:	e7fd      	b.n	800641e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	429a      	cmp	r2, r3
 8006428:	d90b      	bls.n	8006442 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	60fb      	str	r3, [r7, #12]
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	e7fd      	b.n	800643e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006442:	2202      	movs	r2, #2
 8006444:	2100      	movs	r1, #0
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff fe87 	bl	800615a <xQueueGenericCreate>
 800644c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800645a:	697b      	ldr	r3, [r7, #20]
	}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08e      	sub	sp, #56	@ 0x38
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006472:	2300      	movs	r3, #0
 8006474:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800647a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10b      	bne.n	8006498 <xQueueGenericSend+0x34>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006492:	bf00      	nop
 8006494:	bf00      	nop
 8006496:	e7fd      	b.n	8006494 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d103      	bne.n	80064a6 <xQueueGenericSend+0x42>
 800649e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <xQueueGenericSend+0x46>
 80064a6:	2301      	movs	r3, #1
 80064a8:	e000      	b.n	80064ac <xQueueGenericSend+0x48>
 80064aa:	2300      	movs	r3, #0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10b      	bne.n	80064c8 <xQueueGenericSend+0x64>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80064c2:	bf00      	nop
 80064c4:	bf00      	nop
 80064c6:	e7fd      	b.n	80064c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d103      	bne.n	80064d6 <xQueueGenericSend+0x72>
 80064ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <xQueueGenericSend+0x76>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <xQueueGenericSend+0x78>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10b      	bne.n	80064f8 <xQueueGenericSend+0x94>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	623b      	str	r3, [r7, #32]
}
 80064f2:	bf00      	nop
 80064f4:	bf00      	nop
 80064f6:	e7fd      	b.n	80064f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064f8:	f001 fce4 	bl	8007ec4 <xTaskGetSchedulerState>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <xQueueGenericSend+0xa4>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <xQueueGenericSend+0xa8>
 8006508:	2301      	movs	r3, #1
 800650a:	e000      	b.n	800650e <xQueueGenericSend+0xaa>
 800650c:	2300      	movs	r3, #0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10b      	bne.n	800652a <xQueueGenericSend+0xc6>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	61fb      	str	r3, [r7, #28]
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	e7fd      	b.n	8006526 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800652a:	f002 fb35 	bl	8008b98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800652e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006530:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006536:	429a      	cmp	r2, r3
 8006538:	d302      	bcc.n	8006540 <xQueueGenericSend+0xdc>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b02      	cmp	r3, #2
 800653e:	d129      	bne.n	8006594 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006546:	f000 fcab 	bl	8006ea0 <prvCopyDataToQueue>
 800654a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800654c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006550:	2b00      	cmp	r3, #0
 8006552:	d010      	beq.n	8006576 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006556:	3324      	adds	r3, #36	@ 0x24
 8006558:	4618      	mov	r0, r3
 800655a:	f001 fadd 	bl	8007b18 <xTaskRemoveFromEventList>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d013      	beq.n	800658c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006564:	4b3f      	ldr	r3, [pc, #252]	@ (8006664 <xQueueGenericSend+0x200>)
 8006566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	e00a      	b.n	800658c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d007      	beq.n	800658c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800657c:	4b39      	ldr	r3, [pc, #228]	@ (8006664 <xQueueGenericSend+0x200>)
 800657e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800658c:	f002 fb36 	bl	8008bfc <vPortExitCritical>
				return pdPASS;
 8006590:	2301      	movs	r3, #1
 8006592:	e063      	b.n	800665c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d103      	bne.n	80065a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800659a:	f002 fb2f 	bl	8008bfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	e05c      	b.n	800665c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d106      	bne.n	80065b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065a8:	f107 0314 	add.w	r3, r7, #20
 80065ac:	4618      	mov	r0, r3
 80065ae:	f001 fb17 	bl	8007be0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065b2:	2301      	movs	r3, #1
 80065b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065b6:	f002 fb21 	bl	8008bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065ba:	f001 f86d 	bl	8007698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065be:	f002 faeb 	bl	8008b98 <vPortEnterCritical>
 80065c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065c8:	b25b      	sxtb	r3, r3
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d103      	bne.n	80065d8 <xQueueGenericSend+0x174>
 80065d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065de:	b25b      	sxtb	r3, r3
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e4:	d103      	bne.n	80065ee <xQueueGenericSend+0x18a>
 80065e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065ee:	f002 fb05 	bl	8008bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065f2:	1d3a      	adds	r2, r7, #4
 80065f4:	f107 0314 	add.w	r3, r7, #20
 80065f8:	4611      	mov	r1, r2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 fb06 	bl	8007c0c <xTaskCheckForTimeOut>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d124      	bne.n	8006650 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006606:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006608:	f000 fd42 	bl	8007090 <prvIsQueueFull>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d018      	beq.n	8006644 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	3310      	adds	r3, #16
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	4611      	mov	r1, r2
 800661a:	4618      	mov	r0, r3
 800661c:	f001 fa2a 	bl	8007a74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006620:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006622:	f000 fccd 	bl	8006fc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006626:	f001 f845 	bl	80076b4 <xTaskResumeAll>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	f47f af7c 	bne.w	800652a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006632:	4b0c      	ldr	r3, [pc, #48]	@ (8006664 <xQueueGenericSend+0x200>)
 8006634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	e772      	b.n	800652a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006644:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006646:	f000 fcbb 	bl	8006fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800664a:	f001 f833 	bl	80076b4 <xTaskResumeAll>
 800664e:	e76c      	b.n	800652a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006650:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006652:	f000 fcb5 	bl	8006fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006656:	f001 f82d 	bl	80076b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800665a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800665c:	4618      	mov	r0, r3
 800665e:	3738      	adds	r7, #56	@ 0x38
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	e000ed04 	.word	0xe000ed04

08006668 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b090      	sub	sp, #64	@ 0x40
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800667a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10b      	bne.n	8006698 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006692:	bf00      	nop
 8006694:	bf00      	nop
 8006696:	e7fd      	b.n	8006694 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d103      	bne.n	80066a6 <xQueueGenericSendFromISR+0x3e>
 800669e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <xQueueGenericSendFromISR+0x42>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e000      	b.n	80066ac <xQueueGenericSendFromISR+0x44>
 80066aa:	2300      	movs	r3, #0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10b      	bne.n	80066c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80066c2:	bf00      	nop
 80066c4:	bf00      	nop
 80066c6:	e7fd      	b.n	80066c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d103      	bne.n	80066d6 <xQueueGenericSendFromISR+0x6e>
 80066ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <xQueueGenericSendFromISR+0x72>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <xQueueGenericSendFromISR+0x74>
 80066da:	2300      	movs	r3, #0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10b      	bne.n	80066f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	623b      	str	r3, [r7, #32]
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	e7fd      	b.n	80066f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066f8:	f002 fb2e 	bl	8008d58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80066fc:	f3ef 8211 	mrs	r2, BASEPRI
 8006700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	61fa      	str	r2, [r7, #28]
 8006712:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006714:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006716:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800671c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006720:	429a      	cmp	r2, r3
 8006722:	d302      	bcc.n	800672a <xQueueGenericSendFromISR+0xc2>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b02      	cmp	r3, #2
 8006728:	d12f      	bne.n	800678a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006730:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006738:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006740:	f000 fbae 	bl	8006ea0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006744:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674c:	d112      	bne.n	8006774 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800674e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006752:	2b00      	cmp	r3, #0
 8006754:	d016      	beq.n	8006784 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006758:	3324      	adds	r3, #36	@ 0x24
 800675a:	4618      	mov	r0, r3
 800675c:	f001 f9dc 	bl	8007b18 <xTaskRemoveFromEventList>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00e      	beq.n	8006784 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00b      	beq.n	8006784 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	e007      	b.n	8006784 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006774:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006778:	3301      	adds	r3, #1
 800677a:	b2db      	uxtb	r3, r3
 800677c:	b25a      	sxtb	r2, r3
 800677e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006784:	2301      	movs	r3, #1
 8006786:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006788:	e001      	b.n	800678e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800678a:	2300      	movs	r3, #0
 800678c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800678e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006790:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006798:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800679a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800679c:	4618      	mov	r0, r3
 800679e:	3740      	adds	r7, #64	@ 0x40
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08e      	sub	sp, #56	@ 0x38
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80067b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10b      	bne.n	80067d0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	623b      	str	r3, [r7, #32]
}
 80067ca:	bf00      	nop
 80067cc:	bf00      	nop
 80067ce:	e7fd      	b.n	80067cc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80067d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00b      	beq.n	80067f0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	61fb      	str	r3, [r7, #28]
}
 80067ea:	bf00      	nop
 80067ec:	bf00      	nop
 80067ee:	e7fd      	b.n	80067ec <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80067f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d103      	bne.n	8006800 <xQueueGiveFromISR+0x5c>
 80067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <xQueueGiveFromISR+0x60>
 8006800:	2301      	movs	r3, #1
 8006802:	e000      	b.n	8006806 <xQueueGiveFromISR+0x62>
 8006804:	2300      	movs	r3, #0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10b      	bne.n	8006822 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	61bb      	str	r3, [r7, #24]
}
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	e7fd      	b.n	800681e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006822:	f002 fa99 	bl	8008d58 <vPortValidateInterruptPriority>
	__asm volatile
 8006826:	f3ef 8211 	mrs	r2, BASEPRI
 800682a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	617a      	str	r2, [r7, #20]
 800683c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800683e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006840:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006846:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800684c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800684e:	429a      	cmp	r2, r3
 8006850:	d22b      	bcs.n	80068aa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800685c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006862:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006864:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686c:	d112      	bne.n	8006894 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800686e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006872:	2b00      	cmp	r3, #0
 8006874:	d016      	beq.n	80068a4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006878:	3324      	adds	r3, #36	@ 0x24
 800687a:	4618      	mov	r0, r3
 800687c:	f001 f94c 	bl	8007b18 <xTaskRemoveFromEventList>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00e      	beq.n	80068a4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00b      	beq.n	80068a4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2201      	movs	r2, #1
 8006890:	601a      	str	r2, [r3, #0]
 8006892:	e007      	b.n	80068a4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006898:	3301      	adds	r3, #1
 800689a:	b2db      	uxtb	r3, r3
 800689c:	b25a      	sxtb	r2, r3
 800689e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80068a4:	2301      	movs	r3, #1
 80068a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a8:	e001      	b.n	80068ae <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f383 8811 	msr	BASEPRI, r3
}
 80068b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3738      	adds	r7, #56	@ 0x38
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b08c      	sub	sp, #48	@ 0x30
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80068d0:	2300      	movs	r3, #0
 80068d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80068d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10b      	bne.n	80068f6 <xQueueReceive+0x32>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	623b      	str	r3, [r7, #32]
}
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	e7fd      	b.n	80068f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d103      	bne.n	8006904 <xQueueReceive+0x40>
 80068fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <xQueueReceive+0x44>
 8006904:	2301      	movs	r3, #1
 8006906:	e000      	b.n	800690a <xQueueReceive+0x46>
 8006908:	2300      	movs	r3, #0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10b      	bne.n	8006926 <xQueueReceive+0x62>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	61fb      	str	r3, [r7, #28]
}
 8006920:	bf00      	nop
 8006922:	bf00      	nop
 8006924:	e7fd      	b.n	8006922 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006926:	f001 facd 	bl	8007ec4 <xTaskGetSchedulerState>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d102      	bne.n	8006936 <xQueueReceive+0x72>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <xQueueReceive+0x76>
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <xQueueReceive+0x78>
 800693a:	2300      	movs	r3, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10b      	bne.n	8006958 <xQueueReceive+0x94>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	61bb      	str	r3, [r7, #24]
}
 8006952:	bf00      	nop
 8006954:	bf00      	nop
 8006956:	e7fd      	b.n	8006954 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006958:	f002 f91e 	bl	8008b98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800695c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006960:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006964:	2b00      	cmp	r3, #0
 8006966:	d01f      	beq.n	80069a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006968:	68b9      	ldr	r1, [r7, #8]
 800696a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800696c:	f000 fb02 	bl	8006f74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006972:	1e5a      	subs	r2, r3, #1
 8006974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006976:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00f      	beq.n	80069a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006982:	3310      	adds	r3, #16
 8006984:	4618      	mov	r0, r3
 8006986:	f001 f8c7 	bl	8007b18 <xTaskRemoveFromEventList>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d007      	beq.n	80069a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006990:	4b3c      	ldr	r3, [pc, #240]	@ (8006a84 <xQueueReceive+0x1c0>)
 8006992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80069a0:	f002 f92c 	bl	8008bfc <vPortExitCritical>
				return pdPASS;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e069      	b.n	8006a7c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d103      	bne.n	80069b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069ae:	f002 f925 	bl	8008bfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80069b2:	2300      	movs	r3, #0
 80069b4:	e062      	b.n	8006a7c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d106      	bne.n	80069ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069bc:	f107 0310 	add.w	r3, r7, #16
 80069c0:	4618      	mov	r0, r3
 80069c2:	f001 f90d 	bl	8007be0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069c6:	2301      	movs	r3, #1
 80069c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069ca:	f002 f917 	bl	8008bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069ce:	f000 fe63 	bl	8007698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069d2:	f002 f8e1 	bl	8008b98 <vPortEnterCritical>
 80069d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069dc:	b25b      	sxtb	r3, r3
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e2:	d103      	bne.n	80069ec <xQueueReceive+0x128>
 80069e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069f2:	b25b      	sxtb	r3, r3
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d103      	bne.n	8006a02 <xQueueReceive+0x13e>
 80069fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a02:	f002 f8fb 	bl	8008bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a06:	1d3a      	adds	r2, r7, #4
 8006a08:	f107 0310 	add.w	r3, r7, #16
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f001 f8fc 	bl	8007c0c <xTaskCheckForTimeOut>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d123      	bne.n	8006a62 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a1c:	f000 fb22 	bl	8007064 <prvIsQueueEmpty>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d017      	beq.n	8006a56 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a28:	3324      	adds	r3, #36	@ 0x24
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 f820 	bl	8007a74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a36:	f000 fac3 	bl	8006fc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a3a:	f000 fe3b 	bl	80076b4 <xTaskResumeAll>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d189      	bne.n	8006958 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006a44:	4b0f      	ldr	r3, [pc, #60]	@ (8006a84 <xQueueReceive+0x1c0>)
 8006a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	e780      	b.n	8006958 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a58:	f000 fab2 	bl	8006fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a5c:	f000 fe2a 	bl	80076b4 <xTaskResumeAll>
 8006a60:	e77a      	b.n	8006958 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a64:	f000 faac 	bl	8006fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a68:	f000 fe24 	bl	80076b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a6e:	f000 faf9 	bl	8007064 <prvIsQueueEmpty>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f43f af6f 	beq.w	8006958 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3730      	adds	r7, #48	@ 0x30
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	e000ed04 	.word	0xe000ed04

08006a88 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08e      	sub	sp, #56	@ 0x38
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a92:	2300      	movs	r3, #0
 8006a94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10b      	bne.n	8006abc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	623b      	str	r3, [r7, #32]
}
 8006ab6:	bf00      	nop
 8006ab8:	bf00      	nop
 8006aba:	e7fd      	b.n	8006ab8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00b      	beq.n	8006adc <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	61fb      	str	r3, [r7, #28]
}
 8006ad6:	bf00      	nop
 8006ad8:	bf00      	nop
 8006ada:	e7fd      	b.n	8006ad8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006adc:	f001 f9f2 	bl	8007ec4 <xTaskGetSchedulerState>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d102      	bne.n	8006aec <xQueueSemaphoreTake+0x64>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <xQueueSemaphoreTake+0x68>
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <xQueueSemaphoreTake+0x6a>
 8006af0:	2300      	movs	r3, #0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10b      	bne.n	8006b0e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	61bb      	str	r3, [r7, #24]
}
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	e7fd      	b.n	8006b0a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b0e:	f002 f843 	bl	8008b98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b16:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d024      	beq.n	8006b68 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b20:	1e5a      	subs	r2, r3, #1
 8006b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b24:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d104      	bne.n	8006b38 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006b2e:	f001 fb43 	bl	80081b8 <pvTaskIncrementMutexHeldCount>
 8006b32:	4602      	mov	r2, r0
 8006b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b36:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00f      	beq.n	8006b60 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b42:	3310      	adds	r3, #16
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 ffe7 	bl	8007b18 <xTaskRemoveFromEventList>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d007      	beq.n	8006b60 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b50:	4b54      	ldr	r3, [pc, #336]	@ (8006ca4 <xQueueSemaphoreTake+0x21c>)
 8006b52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b60:	f002 f84c 	bl	8008bfc <vPortExitCritical>
				return pdPASS;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e098      	b.n	8006c9a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d112      	bne.n	8006b94 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	617b      	str	r3, [r7, #20]
}
 8006b86:	bf00      	nop
 8006b88:	bf00      	nop
 8006b8a:	e7fd      	b.n	8006b88 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006b8c:	f002 f836 	bl	8008bfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e082      	b.n	8006c9a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b9a:	f107 030c 	add.w	r3, r7, #12
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f001 f81e 	bl	8007be0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ba8:	f002 f828 	bl	8008bfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bac:	f000 fd74 	bl	8007698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bb0:	f001 fff2 	bl	8008b98 <vPortEnterCritical>
 8006bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bba:	b25b      	sxtb	r3, r3
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc0:	d103      	bne.n	8006bca <xQueueSemaphoreTake+0x142>
 8006bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bd0:	b25b      	sxtb	r3, r3
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd6:	d103      	bne.n	8006be0 <xQueueSemaphoreTake+0x158>
 8006bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006be0:	f002 f80c 	bl	8008bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006be4:	463a      	mov	r2, r7
 8006be6:	f107 030c 	add.w	r3, r7, #12
 8006bea:	4611      	mov	r1, r2
 8006bec:	4618      	mov	r0, r3
 8006bee:	f001 f80d 	bl	8007c0c <xTaskCheckForTimeOut>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d132      	bne.n	8006c5e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bfa:	f000 fa33 	bl	8007064 <prvIsQueueEmpty>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d026      	beq.n	8006c52 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d109      	bne.n	8006c20 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006c0c:	f001 ffc4 	bl	8008b98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f001 f973 	bl	8007f00 <xTaskPriorityInherit>
 8006c1a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006c1c:	f001 ffee 	bl	8008bfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c22:	3324      	adds	r3, #36	@ 0x24
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	4611      	mov	r1, r2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 ff23 	bl	8007a74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c30:	f000 f9c6 	bl	8006fc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c34:	f000 fd3e 	bl	80076b4 <xTaskResumeAll>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f47f af67 	bne.w	8006b0e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006c40:	4b18      	ldr	r3, [pc, #96]	@ (8006ca4 <xQueueSemaphoreTake+0x21c>)
 8006c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	e75d      	b.n	8006b0e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006c52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c54:	f000 f9b4 	bl	8006fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c58:	f000 fd2c 	bl	80076b4 <xTaskResumeAll>
 8006c5c:	e757      	b.n	8006b0e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006c5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c60:	f000 f9ae 	bl	8006fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c64:	f000 fd26 	bl	80076b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c6a:	f000 f9fb 	bl	8007064 <prvIsQueueEmpty>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f43f af4c 	beq.w	8006b0e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00d      	beq.n	8006c98 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006c7c:	f001 ff8c 	bl	8008b98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006c80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c82:	f000 f8f5 	bl	8006e70 <prvGetDisinheritPriorityAfterTimeout>
 8006c86:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f001 fa0e 	bl	80080b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006c94:	f001 ffb2 	bl	8008bfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3738      	adds	r7, #56	@ 0x38
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	e000ed04 	.word	0xe000ed04

08006ca8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08e      	sub	sp, #56	@ 0x38
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10b      	bne.n	8006cd6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	623b      	str	r3, [r7, #32]
}
 8006cd0:	bf00      	nop
 8006cd2:	bf00      	nop
 8006cd4:	e7fd      	b.n	8006cd2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d103      	bne.n	8006ce4 <xQueueReceiveFromISR+0x3c>
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <xQueueReceiveFromISR+0x40>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e000      	b.n	8006cea <xQueueReceiveFromISR+0x42>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10b      	bne.n	8006d06 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	61fb      	str	r3, [r7, #28]
}
 8006d00:	bf00      	nop
 8006d02:	bf00      	nop
 8006d04:	e7fd      	b.n	8006d02 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d06:	f002 f827 	bl	8008d58 <vPortValidateInterruptPriority>
	__asm volatile
 8006d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8006d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	61ba      	str	r2, [r7, #24]
 8006d20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006d22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d02f      	beq.n	8006d92 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d3c:	68b9      	ldr	r1, [r7, #8]
 8006d3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d40:	f000 f918 	bl	8006f74 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d46:	1e5a      	subs	r2, r3, #1
 8006d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006d4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d54:	d112      	bne.n	8006d7c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d016      	beq.n	8006d8c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d60:	3310      	adds	r3, #16
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fed8 	bl	8007b18 <xTaskRemoveFromEventList>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00e      	beq.n	8006d8c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00b      	beq.n	8006d8c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	e007      	b.n	8006d8c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d80:	3301      	adds	r3, #1
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	b25a      	sxtb	r2, r3
 8006d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d90:	e001      	b.n	8006d96 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f383 8811 	msr	BASEPRI, r3
}
 8006da0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3738      	adds	r7, #56	@ 0x38
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10b      	bne.n	8006dd2 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	60bb      	str	r3, [r7, #8]
}
 8006dcc:	bf00      	nop
 8006dce:	bf00      	nop
 8006dd0:	e7fd      	b.n	8006dce <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006dd2:	f001 fee1 	bl	8008b98 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dda:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006ddc:	f001 ff0e 	bl	8008bfc <vPortExitCritical>

	return uxReturn;
 8006de0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006dea:	b480      	push	{r7}
 8006dec:	b087      	sub	sp, #28
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10b      	bne.n	8006e14 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60fb      	str	r3, [r7, #12]
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	e7fd      	b.n	8006e10 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e18:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006e1a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	371c      	adds	r7, #28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10b      	bne.n	8006e52 <vQueueDelete+0x2a>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	60bb      	str	r3, [r7, #8]
}
 8006e4c:	bf00      	nop
 8006e4e:	bf00      	nop
 8006e50:	e7fd      	b.n	8006e4e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f95e 	bl	8007114 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d102      	bne.n	8006e68 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f002 f888 	bl	8008f78 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006e68:	bf00      	nop
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d006      	beq.n	8006e8e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	e001      	b.n	8006e92 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006e92:	68fb      	ldr	r3, [r7, #12]
	}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006eac:	2300      	movs	r3, #0
 8006eae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10d      	bne.n	8006eda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d14d      	bne.n	8006f62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f001 f880 	bl	8007fd0 <xTaskPriorityDisinherit>
 8006ed0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	609a      	str	r2, [r3, #8]
 8006ed8:	e043      	b.n	8006f62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d119      	bne.n	8006f14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6858      	ldr	r0, [r3, #4]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee8:	461a      	mov	r2, r3
 8006eea:	68b9      	ldr	r1, [r7, #8]
 8006eec:	f00f fe5f 	bl	8016bae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef8:	441a      	add	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d32b      	bcc.n	8006f62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	605a      	str	r2, [r3, #4]
 8006f12:	e026      	b.n	8006f62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	68d8      	ldr	r0, [r3, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	68b9      	ldr	r1, [r7, #8]
 8006f20:	f00f fe45 	bl	8016bae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	68da      	ldr	r2, [r3, #12]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2c:	425b      	negs	r3, r3
 8006f2e:	441a      	add	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	68da      	ldr	r2, [r3, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d207      	bcs.n	8006f50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f48:	425b      	negs	r3, r3
 8006f4a:	441a      	add	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d105      	bne.n	8006f62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006f6a:	697b      	ldr	r3, [r7, #20]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d018      	beq.n	8006fb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8e:	441a      	add	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d303      	bcc.n	8006fa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68d9      	ldr	r1, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6838      	ldr	r0, [r7, #0]
 8006fb4:	f00f fdfb 	bl	8016bae <memcpy>
	}
}
 8006fb8:	bf00      	nop
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fc8:	f001 fde6 	bl	8008b98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fd4:	e011      	b.n	8006ffa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d012      	beq.n	8007004 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	3324      	adds	r3, #36	@ 0x24
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fd98 	bl	8007b18 <xTaskRemoveFromEventList>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006fee:	f000 fe71 	bl	8007cd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	dce9      	bgt.n	8006fd6 <prvUnlockQueue+0x16>
 8007002:	e000      	b.n	8007006 <prvUnlockQueue+0x46>
					break;
 8007004:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	22ff      	movs	r2, #255	@ 0xff
 800700a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800700e:	f001 fdf5 	bl	8008bfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007012:	f001 fdc1 	bl	8008b98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800701c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800701e:	e011      	b.n	8007044 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d012      	beq.n	800704e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	3310      	adds	r3, #16
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fd73 	bl	8007b18 <xTaskRemoveFromEventList>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007038:	f000 fe4c 	bl	8007cd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	3b01      	subs	r3, #1
 8007040:	b2db      	uxtb	r3, r3
 8007042:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007048:	2b00      	cmp	r3, #0
 800704a:	dce9      	bgt.n	8007020 <prvUnlockQueue+0x60>
 800704c:	e000      	b.n	8007050 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800704e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	22ff      	movs	r2, #255	@ 0xff
 8007054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007058:	f001 fdd0 	bl	8008bfc <vPortExitCritical>
}
 800705c:	bf00      	nop
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800706c:	f001 fd94 	bl	8008b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007074:	2b00      	cmp	r3, #0
 8007076:	d102      	bne.n	800707e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007078:	2301      	movs	r3, #1
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	e001      	b.n	8007082 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007082:	f001 fdbb 	bl	8008bfc <vPortExitCritical>

	return xReturn;
 8007086:	68fb      	ldr	r3, [r7, #12]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007098:	f001 fd7e 	bl	8008b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d102      	bne.n	80070ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070a8:	2301      	movs	r3, #1
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	e001      	b.n	80070b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070ae:	2300      	movs	r3, #0
 80070b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070b2:	f001 fda3 	bl	8008bfc <vPortExitCritical>

	return xReturn;
 80070b6:	68fb      	ldr	r3, [r7, #12]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	e014      	b.n	80070fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070d0:	4a0f      	ldr	r2, [pc, #60]	@ (8007110 <vQueueAddToRegistry+0x50>)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10b      	bne.n	80070f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070dc:	490c      	ldr	r1, [pc, #48]	@ (8007110 <vQueueAddToRegistry+0x50>)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007110 <vQueueAddToRegistry+0x50>)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	4413      	add	r3, r2
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070f2:	e006      	b.n	8007102 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3301      	adds	r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2b07      	cmp	r3, #7
 80070fe:	d9e7      	bls.n	80070d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	200056f8 	.word	0x200056f8

08007114 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	e016      	b.n	8007150 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007122:	4a10      	ldr	r2, [pc, #64]	@ (8007164 <vQueueUnregisterQueue+0x50>)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	4413      	add	r3, r2
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	429a      	cmp	r2, r3
 8007130:	d10b      	bne.n	800714a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007132:	4a0c      	ldr	r2, [pc, #48]	@ (8007164 <vQueueUnregisterQueue+0x50>)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2100      	movs	r1, #0
 8007138:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800713c:	4a09      	ldr	r2, [pc, #36]	@ (8007164 <vQueueUnregisterQueue+0x50>)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	00db      	lsls	r3, r3, #3
 8007142:	4413      	add	r3, r2
 8007144:	2200      	movs	r2, #0
 8007146:	605a      	str	r2, [r3, #4]
				break;
 8007148:	e006      	b.n	8007158 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3301      	adds	r3, #1
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b07      	cmp	r3, #7
 8007154:	d9e5      	bls.n	8007122 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007156:	bf00      	nop
 8007158:	bf00      	nop
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	200056f8 	.word	0x200056f8

08007168 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007178:	f001 fd0e 	bl	8008b98 <vPortEnterCritical>
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007182:	b25b      	sxtb	r3, r3
 8007184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007188:	d103      	bne.n	8007192 <vQueueWaitForMessageRestricted+0x2a>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007198:	b25b      	sxtb	r3, r3
 800719a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719e:	d103      	bne.n	80071a8 <vQueueWaitForMessageRestricted+0x40>
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071a8:	f001 fd28 	bl	8008bfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d106      	bne.n	80071c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	3324      	adds	r3, #36	@ 0x24
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	68b9      	ldr	r1, [r7, #8]
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fc7f 	bl	8007ac0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071c2:	6978      	ldr	r0, [r7, #20]
 80071c4:	f7ff fefc 	bl	8006fc0 <prvUnlockQueue>
	}
 80071c8:	bf00      	nop
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08e      	sub	sp, #56	@ 0x38
 80071d4:	af04      	add	r7, sp, #16
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10b      	bne.n	80071fc <xTaskCreateStatic+0x2c>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	623b      	str	r3, [r7, #32]
}
 80071f6:	bf00      	nop
 80071f8:	bf00      	nop
 80071fa:	e7fd      	b.n	80071f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10b      	bne.n	800721a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	61fb      	str	r3, [r7, #28]
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	e7fd      	b.n	8007216 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800721a:	23a8      	movs	r3, #168	@ 0xa8
 800721c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2ba8      	cmp	r3, #168	@ 0xa8
 8007222:	d00b      	beq.n	800723c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	61bb      	str	r3, [r7, #24]
}
 8007236:	bf00      	nop
 8007238:	bf00      	nop
 800723a:	e7fd      	b.n	8007238 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800723c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800723e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01e      	beq.n	8007282 <xTaskCreateStatic+0xb2>
 8007244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007246:	2b00      	cmp	r3, #0
 8007248:	d01b      	beq.n	8007282 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800724a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007250:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007252:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	2202      	movs	r2, #2
 8007258:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800725c:	2300      	movs	r3, #0
 800725e:	9303      	str	r3, [sp, #12]
 8007260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007262:	9302      	str	r3, [sp, #8]
 8007264:	f107 0314 	add.w	r3, r7, #20
 8007268:	9301      	str	r3, [sp, #4]
 800726a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 f851 	bl	800731c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800727a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800727c:	f000 f8f6 	bl	800746c <prvAddNewTaskToReadyList>
 8007280:	e001      	b.n	8007286 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007282:	2300      	movs	r3, #0
 8007284:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007286:	697b      	ldr	r3, [r7, #20]
	}
 8007288:	4618      	mov	r0, r3
 800728a:	3728      	adds	r7, #40	@ 0x28
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08c      	sub	sp, #48	@ 0x30
 8007294:	af04      	add	r7, sp, #16
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	4613      	mov	r3, r2
 800729e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072a0:	88fb      	ldrh	r3, [r7, #6]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4618      	mov	r0, r3
 80072a6:	f001 fd99 	bl	8008ddc <pvPortMalloc>
 80072aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00e      	beq.n	80072d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072b2:	20a8      	movs	r0, #168	@ 0xa8
 80072b4:	f001 fd92 	bl	8008ddc <pvPortMalloc>
 80072b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80072c6:	e005      	b.n	80072d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072c8:	6978      	ldr	r0, [r7, #20]
 80072ca:	f001 fe55 	bl	8008f78 <vPortFree>
 80072ce:	e001      	b.n	80072d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d017      	beq.n	800730a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072e2:	88fa      	ldrh	r2, [r7, #6]
 80072e4:	2300      	movs	r3, #0
 80072e6:	9303      	str	r3, [sp, #12]
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	9302      	str	r3, [sp, #8]
 80072ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ee:	9301      	str	r3, [sp, #4]
 80072f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	68b9      	ldr	r1, [r7, #8]
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f80f 	bl	800731c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072fe:	69f8      	ldr	r0, [r7, #28]
 8007300:	f000 f8b4 	bl	800746c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007304:	2301      	movs	r3, #1
 8007306:	61bb      	str	r3, [r7, #24]
 8007308:	e002      	b.n	8007310 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800730a:	f04f 33ff 	mov.w	r3, #4294967295
 800730e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007310:	69bb      	ldr	r3, [r7, #24]
	}
 8007312:	4618      	mov	r0, r3
 8007314:	3720      	adds	r7, #32
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b088      	sub	sp, #32
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
 8007328:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	461a      	mov	r2, r3
 8007334:	21a5      	movs	r1, #165	@ 0xa5
 8007336:	f00f fb6e 	bl	8016a16 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800733a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007344:	3b01      	subs	r3, #1
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	f023 0307 	bic.w	r3, r3, #7
 8007352:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00b      	beq.n	8007376 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	617b      	str	r3, [r7, #20]
}
 8007370:	bf00      	nop
 8007372:	bf00      	nop
 8007374:	e7fd      	b.n	8007372 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01f      	beq.n	80073bc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800737c:	2300      	movs	r3, #0
 800737e:	61fb      	str	r3, [r7, #28]
 8007380:	e012      	b.n	80073a8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	4413      	add	r3, r2
 8007388:	7819      	ldrb	r1, [r3, #0]
 800738a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	4413      	add	r3, r2
 8007390:	3334      	adds	r3, #52	@ 0x34
 8007392:	460a      	mov	r2, r1
 8007394:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	4413      	add	r3, r2
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d006      	beq.n	80073b0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	3301      	adds	r3, #1
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	2b0f      	cmp	r3, #15
 80073ac:	d9e9      	bls.n	8007382 <prvInitialiseNewTask+0x66>
 80073ae:	e000      	b.n	80073b2 <prvInitialiseNewTask+0x96>
			{
				break;
 80073b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073ba:	e003      	b.n	80073c4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c6:	2b37      	cmp	r3, #55	@ 0x37
 80073c8:	d901      	bls.n	80073ce <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073ca:	2337      	movs	r3, #55	@ 0x37
 80073cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073d8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073dc:	2200      	movs	r2, #0
 80073de:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e2:	3304      	adds	r3, #4
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fe fd3d 	bl	8005e64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ec:	3318      	adds	r3, #24
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fe fd38 	bl	8005e64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007402:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007408:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800740a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740c:	2200      	movs	r2, #0
 800740e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007414:	2200      	movs	r2, #0
 8007416:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800741a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741c:	3354      	adds	r3, #84	@ 0x54
 800741e:	224c      	movs	r2, #76	@ 0x4c
 8007420:	2100      	movs	r1, #0
 8007422:	4618      	mov	r0, r3
 8007424:	f00f faf7 	bl	8016a16 <memset>
 8007428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742a:	4a0d      	ldr	r2, [pc, #52]	@ (8007460 <prvInitialiseNewTask+0x144>)
 800742c:	659a      	str	r2, [r3, #88]	@ 0x58
 800742e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007430:	4a0c      	ldr	r2, [pc, #48]	@ (8007464 <prvInitialiseNewTask+0x148>)
 8007432:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007436:	4a0c      	ldr	r2, [pc, #48]	@ (8007468 <prvInitialiseNewTask+0x14c>)
 8007438:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	68f9      	ldr	r1, [r7, #12]
 800743e:	69b8      	ldr	r0, [r7, #24]
 8007440:	f001 fa7c 	bl	800893c <pxPortInitialiseStack>
 8007444:	4602      	mov	r2, r0
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800744a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007456:	bf00      	nop
 8007458:	3720      	adds	r7, #32
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	2000f410 	.word	0x2000f410
 8007464:	2000f478 	.word	0x2000f478
 8007468:	2000f4e0 	.word	0x2000f4e0

0800746c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007474:	f001 fb90 	bl	8008b98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007478:	4b2d      	ldr	r3, [pc, #180]	@ (8007530 <prvAddNewTaskToReadyList+0xc4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3301      	adds	r3, #1
 800747e:	4a2c      	ldr	r2, [pc, #176]	@ (8007530 <prvAddNewTaskToReadyList+0xc4>)
 8007480:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007482:	4b2c      	ldr	r3, [pc, #176]	@ (8007534 <prvAddNewTaskToReadyList+0xc8>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d109      	bne.n	800749e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800748a:	4a2a      	ldr	r2, [pc, #168]	@ (8007534 <prvAddNewTaskToReadyList+0xc8>)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007490:	4b27      	ldr	r3, [pc, #156]	@ (8007530 <prvAddNewTaskToReadyList+0xc4>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d110      	bne.n	80074ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007498:	f000 fc40 	bl	8007d1c <prvInitialiseTaskLists>
 800749c:	e00d      	b.n	80074ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800749e:	4b26      	ldr	r3, [pc, #152]	@ (8007538 <prvAddNewTaskToReadyList+0xcc>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d109      	bne.n	80074ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074a6:	4b23      	ldr	r3, [pc, #140]	@ (8007534 <prvAddNewTaskToReadyList+0xc8>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d802      	bhi.n	80074ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074b4:	4a1f      	ldr	r2, [pc, #124]	@ (8007534 <prvAddNewTaskToReadyList+0xc8>)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074ba:	4b20      	ldr	r3, [pc, #128]	@ (800753c <prvAddNewTaskToReadyList+0xd0>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3301      	adds	r3, #1
 80074c0:	4a1e      	ldr	r2, [pc, #120]	@ (800753c <prvAddNewTaskToReadyList+0xd0>)
 80074c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074c4:	4b1d      	ldr	r3, [pc, #116]	@ (800753c <prvAddNewTaskToReadyList+0xd0>)
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007540 <prvAddNewTaskToReadyList+0xd4>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d903      	bls.n	80074e0 <prvAddNewTaskToReadyList+0x74>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074dc:	4a18      	ldr	r2, [pc, #96]	@ (8007540 <prvAddNewTaskToReadyList+0xd4>)
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e4:	4613      	mov	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4a15      	ldr	r2, [pc, #84]	@ (8007544 <prvAddNewTaskToReadyList+0xd8>)
 80074ee:	441a      	add	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3304      	adds	r3, #4
 80074f4:	4619      	mov	r1, r3
 80074f6:	4610      	mov	r0, r2
 80074f8:	f7fe fcc1 	bl	8005e7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074fc:	f001 fb7e 	bl	8008bfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007500:	4b0d      	ldr	r3, [pc, #52]	@ (8007538 <prvAddNewTaskToReadyList+0xcc>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00e      	beq.n	8007526 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007508:	4b0a      	ldr	r3, [pc, #40]	@ (8007534 <prvAddNewTaskToReadyList+0xc8>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007512:	429a      	cmp	r2, r3
 8007514:	d207      	bcs.n	8007526 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007516:	4b0c      	ldr	r3, [pc, #48]	@ (8007548 <prvAddNewTaskToReadyList+0xdc>)
 8007518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20005c0c 	.word	0x20005c0c
 8007534:	20005738 	.word	0x20005738
 8007538:	20005c18 	.word	0x20005c18
 800753c:	20005c28 	.word	0x20005c28
 8007540:	20005c14 	.word	0x20005c14
 8007544:	2000573c 	.word	0x2000573c
 8007548:	e000ed04 	.word	0xe000ed04

0800754c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007554:	2300      	movs	r3, #0
 8007556:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d018      	beq.n	8007590 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800755e:	4b14      	ldr	r3, [pc, #80]	@ (80075b0 <vTaskDelay+0x64>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00b      	beq.n	800757e <vTaskDelay+0x32>
	__asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	60bb      	str	r3, [r7, #8]
}
 8007578:	bf00      	nop
 800757a:	bf00      	nop
 800757c:	e7fd      	b.n	800757a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800757e:	f000 f88b 	bl	8007698 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007582:	2100      	movs	r1, #0
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fe2b 	bl	80081e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800758a:	f000 f893 	bl	80076b4 <xTaskResumeAll>
 800758e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d107      	bne.n	80075a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007596:	4b07      	ldr	r3, [pc, #28]	@ (80075b4 <vTaskDelay+0x68>)
 8007598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075a6:	bf00      	nop
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20005c34 	.word	0x20005c34
 80075b4:	e000ed04 	.word	0xe000ed04

080075b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08a      	sub	sp, #40	@ 0x28
 80075bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80075be:	2300      	movs	r3, #0
 80075c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075c6:	463a      	mov	r2, r7
 80075c8:	1d39      	adds	r1, r7, #4
 80075ca:	f107 0308 	add.w	r3, r7, #8
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fe fbf4 	bl	8005dbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	9202      	str	r2, [sp, #8]
 80075dc:	9301      	str	r3, [sp, #4]
 80075de:	2300      	movs	r3, #0
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	2300      	movs	r3, #0
 80075e4:	460a      	mov	r2, r1
 80075e6:	4924      	ldr	r1, [pc, #144]	@ (8007678 <vTaskStartScheduler+0xc0>)
 80075e8:	4824      	ldr	r0, [pc, #144]	@ (800767c <vTaskStartScheduler+0xc4>)
 80075ea:	f7ff fdf1 	bl	80071d0 <xTaskCreateStatic>
 80075ee:	4603      	mov	r3, r0
 80075f0:	4a23      	ldr	r2, [pc, #140]	@ (8007680 <vTaskStartScheduler+0xc8>)
 80075f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075f4:	4b22      	ldr	r3, [pc, #136]	@ (8007680 <vTaskStartScheduler+0xc8>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075fc:	2301      	movs	r3, #1
 80075fe:	617b      	str	r3, [r7, #20]
 8007600:	e001      	b.n	8007606 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007602:	2300      	movs	r3, #0
 8007604:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d102      	bne.n	8007612 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800760c:	f000 fe3c 	bl	8008288 <xTimerCreateTimerTask>
 8007610:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d11b      	bne.n	8007650 <vTaskStartScheduler+0x98>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	613b      	str	r3, [r7, #16]
}
 800762a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800762c:	4b15      	ldr	r3, [pc, #84]	@ (8007684 <vTaskStartScheduler+0xcc>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3354      	adds	r3, #84	@ 0x54
 8007632:	4a15      	ldr	r2, [pc, #84]	@ (8007688 <vTaskStartScheduler+0xd0>)
 8007634:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007636:	4b15      	ldr	r3, [pc, #84]	@ (800768c <vTaskStartScheduler+0xd4>)
 8007638:	f04f 32ff 	mov.w	r2, #4294967295
 800763c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800763e:	4b14      	ldr	r3, [pc, #80]	@ (8007690 <vTaskStartScheduler+0xd8>)
 8007640:	2201      	movs	r2, #1
 8007642:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007644:	4b13      	ldr	r3, [pc, #76]	@ (8007694 <vTaskStartScheduler+0xdc>)
 8007646:	2200      	movs	r2, #0
 8007648:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800764a:	f001 fa01 	bl	8008a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800764e:	e00f      	b.n	8007670 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007656:	d10b      	bne.n	8007670 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	60fb      	str	r3, [r7, #12]
}
 800766a:	bf00      	nop
 800766c:	bf00      	nop
 800766e:	e7fd      	b.n	800766c <vTaskStartScheduler+0xb4>
}
 8007670:	bf00      	nop
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	080178dc 	.word	0x080178dc
 800767c:	08007ced 	.word	0x08007ced
 8007680:	20005c30 	.word	0x20005c30
 8007684:	20005738 	.word	0x20005738
 8007688:	2000003c 	.word	0x2000003c
 800768c:	20005c2c 	.word	0x20005c2c
 8007690:	20005c18 	.word	0x20005c18
 8007694:	20005c10 	.word	0x20005c10

08007698 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800769c:	4b04      	ldr	r3, [pc, #16]	@ (80076b0 <vTaskSuspendAll+0x18>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3301      	adds	r3, #1
 80076a2:	4a03      	ldr	r2, [pc, #12]	@ (80076b0 <vTaskSuspendAll+0x18>)
 80076a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80076a6:	bf00      	nop
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	20005c34 	.word	0x20005c34

080076b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076be:	2300      	movs	r3, #0
 80076c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076c2:	4b42      	ldr	r3, [pc, #264]	@ (80077cc <xTaskResumeAll+0x118>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10b      	bne.n	80076e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	603b      	str	r3, [r7, #0]
}
 80076dc:	bf00      	nop
 80076de:	bf00      	nop
 80076e0:	e7fd      	b.n	80076de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076e2:	f001 fa59 	bl	8008b98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076e6:	4b39      	ldr	r3, [pc, #228]	@ (80077cc <xTaskResumeAll+0x118>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	4a37      	ldr	r2, [pc, #220]	@ (80077cc <xTaskResumeAll+0x118>)
 80076ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076f0:	4b36      	ldr	r3, [pc, #216]	@ (80077cc <xTaskResumeAll+0x118>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d162      	bne.n	80077be <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076f8:	4b35      	ldr	r3, [pc, #212]	@ (80077d0 <xTaskResumeAll+0x11c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d05e      	beq.n	80077be <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007700:	e02f      	b.n	8007762 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007702:	4b34      	ldr	r3, [pc, #208]	@ (80077d4 <xTaskResumeAll+0x120>)
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3318      	adds	r3, #24
 800770e:	4618      	mov	r0, r3
 8007710:	f7fe fc12 	bl	8005f38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	3304      	adds	r3, #4
 8007718:	4618      	mov	r0, r3
 800771a:	f7fe fc0d 	bl	8005f38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007722:	4b2d      	ldr	r3, [pc, #180]	@ (80077d8 <xTaskResumeAll+0x124>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d903      	bls.n	8007732 <xTaskResumeAll+0x7e>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772e:	4a2a      	ldr	r2, [pc, #168]	@ (80077d8 <xTaskResumeAll+0x124>)
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007736:	4613      	mov	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4a27      	ldr	r2, [pc, #156]	@ (80077dc <xTaskResumeAll+0x128>)
 8007740:	441a      	add	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3304      	adds	r3, #4
 8007746:	4619      	mov	r1, r3
 8007748:	4610      	mov	r0, r2
 800774a:	f7fe fb98 	bl	8005e7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007752:	4b23      	ldr	r3, [pc, #140]	@ (80077e0 <xTaskResumeAll+0x12c>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007758:	429a      	cmp	r2, r3
 800775a:	d302      	bcc.n	8007762 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800775c:	4b21      	ldr	r3, [pc, #132]	@ (80077e4 <xTaskResumeAll+0x130>)
 800775e:	2201      	movs	r2, #1
 8007760:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007762:	4b1c      	ldr	r3, [pc, #112]	@ (80077d4 <xTaskResumeAll+0x120>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1cb      	bne.n	8007702 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007770:	f000 fb78 	bl	8007e64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007774:	4b1c      	ldr	r3, [pc, #112]	@ (80077e8 <xTaskResumeAll+0x134>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d010      	beq.n	80077a2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007780:	f000 f858 	bl	8007834 <xTaskIncrementTick>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800778a:	4b16      	ldr	r3, [pc, #88]	@ (80077e4 <xTaskResumeAll+0x130>)
 800778c:	2201      	movs	r2, #1
 800778e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3b01      	subs	r3, #1
 8007794:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1f1      	bne.n	8007780 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800779c:	4b12      	ldr	r3, [pc, #72]	@ (80077e8 <xTaskResumeAll+0x134>)
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077a2:	4b10      	ldr	r3, [pc, #64]	@ (80077e4 <xTaskResumeAll+0x130>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077aa:	2301      	movs	r3, #1
 80077ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077ae:	4b0f      	ldr	r3, [pc, #60]	@ (80077ec <xTaskResumeAll+0x138>)
 80077b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077be:	f001 fa1d 	bl	8008bfc <vPortExitCritical>

	return xAlreadyYielded;
 80077c2:	68bb      	ldr	r3, [r7, #8]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	20005c34 	.word	0x20005c34
 80077d0:	20005c0c 	.word	0x20005c0c
 80077d4:	20005bcc 	.word	0x20005bcc
 80077d8:	20005c14 	.word	0x20005c14
 80077dc:	2000573c 	.word	0x2000573c
 80077e0:	20005738 	.word	0x20005738
 80077e4:	20005c20 	.word	0x20005c20
 80077e8:	20005c1c 	.word	0x20005c1c
 80077ec:	e000ed04 	.word	0xe000ed04

080077f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80077f6:	4b05      	ldr	r3, [pc, #20]	@ (800780c <xTaskGetTickCount+0x1c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80077fc:	687b      	ldr	r3, [r7, #4]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	20005c10 	.word	0x20005c10

08007810 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007816:	f001 fa9f 	bl	8008d58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800781a:	2300      	movs	r3, #0
 800781c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800781e:	4b04      	ldr	r3, [pc, #16]	@ (8007830 <xTaskGetTickCountFromISR+0x20>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007824:	683b      	ldr	r3, [r7, #0]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20005c10 	.word	0x20005c10

08007834 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800783a:	2300      	movs	r3, #0
 800783c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800783e:	4b4f      	ldr	r3, [pc, #316]	@ (800797c <xTaskIncrementTick+0x148>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	f040 8090 	bne.w	8007968 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007848:	4b4d      	ldr	r3, [pc, #308]	@ (8007980 <xTaskIncrementTick+0x14c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007850:	4a4b      	ldr	r2, [pc, #300]	@ (8007980 <xTaskIncrementTick+0x14c>)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d121      	bne.n	80078a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800785c:	4b49      	ldr	r3, [pc, #292]	@ (8007984 <xTaskIncrementTick+0x150>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00b      	beq.n	800787e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	603b      	str	r3, [r7, #0]
}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	e7fd      	b.n	800787a <xTaskIncrementTick+0x46>
 800787e:	4b41      	ldr	r3, [pc, #260]	@ (8007984 <xTaskIncrementTick+0x150>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	4b40      	ldr	r3, [pc, #256]	@ (8007988 <xTaskIncrementTick+0x154>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a3e      	ldr	r2, [pc, #248]	@ (8007984 <xTaskIncrementTick+0x150>)
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	4a3e      	ldr	r2, [pc, #248]	@ (8007988 <xTaskIncrementTick+0x154>)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	4b3e      	ldr	r3, [pc, #248]	@ (800798c <xTaskIncrementTick+0x158>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3301      	adds	r3, #1
 8007898:	4a3c      	ldr	r2, [pc, #240]	@ (800798c <xTaskIncrementTick+0x158>)
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	f000 fae2 	bl	8007e64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007990 <xTaskIncrementTick+0x15c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d349      	bcc.n	800793e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078aa:	4b36      	ldr	r3, [pc, #216]	@ (8007984 <xTaskIncrementTick+0x150>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d104      	bne.n	80078be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078b4:	4b36      	ldr	r3, [pc, #216]	@ (8007990 <xTaskIncrementTick+0x15c>)
 80078b6:	f04f 32ff 	mov.w	r2, #4294967295
 80078ba:	601a      	str	r2, [r3, #0]
					break;
 80078bc:	e03f      	b.n	800793e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078be:	4b31      	ldr	r3, [pc, #196]	@ (8007984 <xTaskIncrementTick+0x150>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d203      	bcs.n	80078de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078d6:	4a2e      	ldr	r2, [pc, #184]	@ (8007990 <xTaskIncrementTick+0x15c>)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078dc:	e02f      	b.n	800793e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	3304      	adds	r3, #4
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fe fb28 	bl	8005f38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d004      	beq.n	80078fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	3318      	adds	r3, #24
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fe fb1f 	bl	8005f38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078fe:	4b25      	ldr	r3, [pc, #148]	@ (8007994 <xTaskIncrementTick+0x160>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d903      	bls.n	800790e <xTaskIncrementTick+0xda>
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790a:	4a22      	ldr	r2, [pc, #136]	@ (8007994 <xTaskIncrementTick+0x160>)
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007912:	4613      	mov	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4a1f      	ldr	r2, [pc, #124]	@ (8007998 <xTaskIncrementTick+0x164>)
 800791c:	441a      	add	r2, r3
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	3304      	adds	r3, #4
 8007922:	4619      	mov	r1, r3
 8007924:	4610      	mov	r0, r2
 8007926:	f7fe faaa 	bl	8005e7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800792e:	4b1b      	ldr	r3, [pc, #108]	@ (800799c <xTaskIncrementTick+0x168>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007934:	429a      	cmp	r2, r3
 8007936:	d3b8      	bcc.n	80078aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007938:	2301      	movs	r3, #1
 800793a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800793c:	e7b5      	b.n	80078aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800793e:	4b17      	ldr	r3, [pc, #92]	@ (800799c <xTaskIncrementTick+0x168>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007944:	4914      	ldr	r1, [pc, #80]	@ (8007998 <xTaskIncrementTick+0x164>)
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	440b      	add	r3, r1
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d901      	bls.n	800795a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007956:	2301      	movs	r3, #1
 8007958:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800795a:	4b11      	ldr	r3, [pc, #68]	@ (80079a0 <xTaskIncrementTick+0x16c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d007      	beq.n	8007972 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007962:	2301      	movs	r3, #1
 8007964:	617b      	str	r3, [r7, #20]
 8007966:	e004      	b.n	8007972 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007968:	4b0e      	ldr	r3, [pc, #56]	@ (80079a4 <xTaskIncrementTick+0x170>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3301      	adds	r3, #1
 800796e:	4a0d      	ldr	r2, [pc, #52]	@ (80079a4 <xTaskIncrementTick+0x170>)
 8007970:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007972:	697b      	ldr	r3, [r7, #20]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20005c34 	.word	0x20005c34
 8007980:	20005c10 	.word	0x20005c10
 8007984:	20005bc4 	.word	0x20005bc4
 8007988:	20005bc8 	.word	0x20005bc8
 800798c:	20005c24 	.word	0x20005c24
 8007990:	20005c2c 	.word	0x20005c2c
 8007994:	20005c14 	.word	0x20005c14
 8007998:	2000573c 	.word	0x2000573c
 800799c:	20005738 	.word	0x20005738
 80079a0:	20005c20 	.word	0x20005c20
 80079a4:	20005c1c 	.word	0x20005c1c

080079a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079ae:	4b2b      	ldr	r3, [pc, #172]	@ (8007a5c <vTaskSwitchContext+0xb4>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079b6:	4b2a      	ldr	r3, [pc, #168]	@ (8007a60 <vTaskSwitchContext+0xb8>)
 80079b8:	2201      	movs	r2, #1
 80079ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079bc:	e047      	b.n	8007a4e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80079be:	4b28      	ldr	r3, [pc, #160]	@ (8007a60 <vTaskSwitchContext+0xb8>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079c4:	4b27      	ldr	r3, [pc, #156]	@ (8007a64 <vTaskSwitchContext+0xbc>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	e011      	b.n	80079f0 <vTaskSwitchContext+0x48>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10b      	bne.n	80079ea <vTaskSwitchContext+0x42>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	607b      	str	r3, [r7, #4]
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop
 80079e8:	e7fd      	b.n	80079e6 <vTaskSwitchContext+0x3e>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	491d      	ldr	r1, [pc, #116]	@ (8007a68 <vTaskSwitchContext+0xc0>)
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	4613      	mov	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	440b      	add	r3, r1
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0e3      	beq.n	80079cc <vTaskSwitchContext+0x24>
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4a16      	ldr	r2, [pc, #88]	@ (8007a68 <vTaskSwitchContext+0xc0>)
 8007a10:	4413      	add	r3, r2
 8007a12:	60bb      	str	r3, [r7, #8]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	605a      	str	r2, [r3, #4]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	3308      	adds	r3, #8
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d104      	bne.n	8007a34 <vTaskSwitchContext+0x8c>
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	605a      	str	r2, [r3, #4]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a6c <vTaskSwitchContext+0xc4>)
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	4a09      	ldr	r2, [pc, #36]	@ (8007a64 <vTaskSwitchContext+0xbc>)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a44:	4b09      	ldr	r3, [pc, #36]	@ (8007a6c <vTaskSwitchContext+0xc4>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3354      	adds	r3, #84	@ 0x54
 8007a4a:	4a09      	ldr	r2, [pc, #36]	@ (8007a70 <vTaskSwitchContext+0xc8>)
 8007a4c:	6013      	str	r3, [r2, #0]
}
 8007a4e:	bf00      	nop
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	20005c34 	.word	0x20005c34
 8007a60:	20005c20 	.word	0x20005c20
 8007a64:	20005c14 	.word	0x20005c14
 8007a68:	2000573c 	.word	0x2000573c
 8007a6c:	20005738 	.word	0x20005738
 8007a70:	2000003c 	.word	0x2000003c

08007a74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10b      	bne.n	8007a9c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	60fb      	str	r3, [r7, #12]
}
 8007a96:	bf00      	nop
 8007a98:	bf00      	nop
 8007a9a:	e7fd      	b.n	8007a98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a9c:	4b07      	ldr	r3, [pc, #28]	@ (8007abc <vTaskPlaceOnEventList+0x48>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3318      	adds	r3, #24
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7fe fa0e 	bl	8005ec6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007aaa:	2101      	movs	r1, #1
 8007aac:	6838      	ldr	r0, [r7, #0]
 8007aae:	f000 fb97 	bl	80081e0 <prvAddCurrentTaskToDelayedList>
}
 8007ab2:	bf00      	nop
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20005738 	.word	0x20005738

08007ac0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10b      	bne.n	8007aea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	617b      	str	r3, [r7, #20]
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop
 8007ae8:	e7fd      	b.n	8007ae6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007aea:	4b0a      	ldr	r3, [pc, #40]	@ (8007b14 <vTaskPlaceOnEventListRestricted+0x54>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3318      	adds	r3, #24
 8007af0:	4619      	mov	r1, r3
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f7fe f9c3 	bl	8005e7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007afe:	f04f 33ff 	mov.w	r3, #4294967295
 8007b02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	68b8      	ldr	r0, [r7, #8]
 8007b08:	f000 fb6a 	bl	80081e0 <prvAddCurrentTaskToDelayedList>
	}
 8007b0c:	bf00      	nop
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	20005738 	.word	0x20005738

08007b18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10b      	bne.n	8007b46 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	60fb      	str	r3, [r7, #12]
}
 8007b40:	bf00      	nop
 8007b42:	bf00      	nop
 8007b44:	e7fd      	b.n	8007b42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	3318      	adds	r3, #24
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fe f9f4 	bl	8005f38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b50:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc8 <xTaskRemoveFromEventList+0xb0>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d11d      	bne.n	8007b94 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fe f9eb 	bl	8005f38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b66:	4b19      	ldr	r3, [pc, #100]	@ (8007bcc <xTaskRemoveFromEventList+0xb4>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d903      	bls.n	8007b76 <xTaskRemoveFromEventList+0x5e>
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b72:	4a16      	ldr	r2, [pc, #88]	@ (8007bcc <xTaskRemoveFromEventList+0xb4>)
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4a13      	ldr	r2, [pc, #76]	@ (8007bd0 <xTaskRemoveFromEventList+0xb8>)
 8007b84:	441a      	add	r2, r3
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	3304      	adds	r3, #4
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	f7fe f976 	bl	8005e7e <vListInsertEnd>
 8007b92:	e005      	b.n	8007ba0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	3318      	adds	r3, #24
 8007b98:	4619      	mov	r1, r3
 8007b9a:	480e      	ldr	r0, [pc, #56]	@ (8007bd4 <xTaskRemoveFromEventList+0xbc>)
 8007b9c:	f7fe f96f 	bl	8005e7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd8 <xTaskRemoveFromEventList+0xc0>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d905      	bls.n	8007bba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bdc <xTaskRemoveFromEventList+0xc4>)
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	e001      	b.n	8007bbe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007bbe:	697b      	ldr	r3, [r7, #20]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	20005c34 	.word	0x20005c34
 8007bcc:	20005c14 	.word	0x20005c14
 8007bd0:	2000573c 	.word	0x2000573c
 8007bd4:	20005bcc 	.word	0x20005bcc
 8007bd8:	20005738 	.word	0x20005738
 8007bdc:	20005c20 	.word	0x20005c20

08007be0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007be8:	4b06      	ldr	r3, [pc, #24]	@ (8007c04 <vTaskInternalSetTimeOutState+0x24>)
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bf0:	4b05      	ldr	r3, [pc, #20]	@ (8007c08 <vTaskInternalSetTimeOutState+0x28>)
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	605a      	str	r2, [r3, #4]
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	20005c24 	.word	0x20005c24
 8007c08:	20005c10 	.word	0x20005c10

08007c0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10b      	bne.n	8007c34 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	613b      	str	r3, [r7, #16]
}
 8007c2e:	bf00      	nop
 8007c30:	bf00      	nop
 8007c32:	e7fd      	b.n	8007c30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10b      	bne.n	8007c52 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	60fb      	str	r3, [r7, #12]
}
 8007c4c:	bf00      	nop
 8007c4e:	bf00      	nop
 8007c50:	e7fd      	b.n	8007c4e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007c52:	f000 ffa1 	bl	8008b98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c56:	4b1d      	ldr	r3, [pc, #116]	@ (8007ccc <xTaskCheckForTimeOut+0xc0>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6e:	d102      	bne.n	8007c76 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	61fb      	str	r3, [r7, #28]
 8007c74:	e023      	b.n	8007cbe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	4b15      	ldr	r3, [pc, #84]	@ (8007cd0 <xTaskCheckForTimeOut+0xc4>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d007      	beq.n	8007c92 <xTaskCheckForTimeOut+0x86>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d302      	bcc.n	8007c92 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	61fb      	str	r3, [r7, #28]
 8007c90:	e015      	b.n	8007cbe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d20b      	bcs.n	8007cb4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	1ad2      	subs	r2, r2, r3
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff ff99 	bl	8007be0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	61fb      	str	r3, [r7, #28]
 8007cb2:	e004      	b.n	8007cbe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cbe:	f000 ff9d 	bl	8008bfc <vPortExitCritical>

	return xReturn;
 8007cc2:	69fb      	ldr	r3, [r7, #28]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3720      	adds	r7, #32
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	20005c10 	.word	0x20005c10
 8007cd0:	20005c24 	.word	0x20005c24

08007cd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007cd8:	4b03      	ldr	r3, [pc, #12]	@ (8007ce8 <vTaskMissedYield+0x14>)
 8007cda:	2201      	movs	r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]
}
 8007cde:	bf00      	nop
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	20005c20 	.word	0x20005c20

08007cec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007cf4:	f000 f852 	bl	8007d9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cf8:	4b06      	ldr	r3, [pc, #24]	@ (8007d14 <prvIdleTask+0x28>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d9f9      	bls.n	8007cf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d00:	4b05      	ldr	r3, [pc, #20]	@ (8007d18 <prvIdleTask+0x2c>)
 8007d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d10:	e7f0      	b.n	8007cf4 <prvIdleTask+0x8>
 8007d12:	bf00      	nop
 8007d14:	2000573c 	.word	0x2000573c
 8007d18:	e000ed04 	.word	0xe000ed04

08007d1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d22:	2300      	movs	r3, #0
 8007d24:	607b      	str	r3, [r7, #4]
 8007d26:	e00c      	b.n	8007d42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4a12      	ldr	r2, [pc, #72]	@ (8007d7c <prvInitialiseTaskLists+0x60>)
 8007d34:	4413      	add	r3, r2
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe f874 	bl	8005e24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	607b      	str	r3, [r7, #4]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b37      	cmp	r3, #55	@ 0x37
 8007d46:	d9ef      	bls.n	8007d28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d48:	480d      	ldr	r0, [pc, #52]	@ (8007d80 <prvInitialiseTaskLists+0x64>)
 8007d4a:	f7fe f86b 	bl	8005e24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d4e:	480d      	ldr	r0, [pc, #52]	@ (8007d84 <prvInitialiseTaskLists+0x68>)
 8007d50:	f7fe f868 	bl	8005e24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d54:	480c      	ldr	r0, [pc, #48]	@ (8007d88 <prvInitialiseTaskLists+0x6c>)
 8007d56:	f7fe f865 	bl	8005e24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d5a:	480c      	ldr	r0, [pc, #48]	@ (8007d8c <prvInitialiseTaskLists+0x70>)
 8007d5c:	f7fe f862 	bl	8005e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d60:	480b      	ldr	r0, [pc, #44]	@ (8007d90 <prvInitialiseTaskLists+0x74>)
 8007d62:	f7fe f85f 	bl	8005e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d66:	4b0b      	ldr	r3, [pc, #44]	@ (8007d94 <prvInitialiseTaskLists+0x78>)
 8007d68:	4a05      	ldr	r2, [pc, #20]	@ (8007d80 <prvInitialiseTaskLists+0x64>)
 8007d6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d98 <prvInitialiseTaskLists+0x7c>)
 8007d6e:	4a05      	ldr	r2, [pc, #20]	@ (8007d84 <prvInitialiseTaskLists+0x68>)
 8007d70:	601a      	str	r2, [r3, #0]
}
 8007d72:	bf00      	nop
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	2000573c 	.word	0x2000573c
 8007d80:	20005b9c 	.word	0x20005b9c
 8007d84:	20005bb0 	.word	0x20005bb0
 8007d88:	20005bcc 	.word	0x20005bcc
 8007d8c:	20005be0 	.word	0x20005be0
 8007d90:	20005bf8 	.word	0x20005bf8
 8007d94:	20005bc4 	.word	0x20005bc4
 8007d98:	20005bc8 	.word	0x20005bc8

08007d9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007da2:	e019      	b.n	8007dd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007da4:	f000 fef8 	bl	8008b98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007da8:	4b10      	ldr	r3, [pc, #64]	@ (8007dec <prvCheckTasksWaitingTermination+0x50>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3304      	adds	r3, #4
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fe f8bf 	bl	8005f38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007dba:	4b0d      	ldr	r3, [pc, #52]	@ (8007df0 <prvCheckTasksWaitingTermination+0x54>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8007df0 <prvCheckTasksWaitingTermination+0x54>)
 8007dc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8007df4 <prvCheckTasksWaitingTermination+0x58>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	4a0a      	ldr	r2, [pc, #40]	@ (8007df4 <prvCheckTasksWaitingTermination+0x58>)
 8007dcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007dce:	f000 ff15 	bl	8008bfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f810 	bl	8007df8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dd8:	4b06      	ldr	r3, [pc, #24]	@ (8007df4 <prvCheckTasksWaitingTermination+0x58>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1e1      	bne.n	8007da4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007de0:	bf00      	nop
 8007de2:	bf00      	nop
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	20005be0 	.word	0x20005be0
 8007df0:	20005c0c 	.word	0x20005c0c
 8007df4:	20005bf4 	.word	0x20005bf4

08007df8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3354      	adds	r3, #84	@ 0x54
 8007e04:	4618      	mov	r0, r3
 8007e06:	f00e fe1f 	bl	8016a48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d108      	bne.n	8007e26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f001 f8ad 	bl	8008f78 <vPortFree>
				vPortFree( pxTCB );
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f001 f8aa 	bl	8008f78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e24:	e019      	b.n	8007e5a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d103      	bne.n	8007e38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 f8a1 	bl	8008f78 <vPortFree>
	}
 8007e36:	e010      	b.n	8007e5a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d00b      	beq.n	8007e5a <prvDeleteTCB+0x62>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	60fb      	str	r3, [r7, #12]
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	e7fd      	b.n	8007e56 <prvDeleteTCB+0x5e>
	}
 8007e5a:	bf00      	nop
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e9c <prvResetNextTaskUnblockTime+0x38>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e74:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8007e76:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e7c:	e008      	b.n	8007e90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e7e:	4b07      	ldr	r3, [pc, #28]	@ (8007e9c <prvResetNextTaskUnblockTime+0x38>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	4a04      	ldr	r2, [pc, #16]	@ (8007ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8007e8e:	6013      	str	r3, [r2, #0]
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	20005bc4 	.word	0x20005bc4
 8007ea0:	20005c2c 	.word	0x20005c2c

08007ea4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007eaa:	4b05      	ldr	r3, [pc, #20]	@ (8007ec0 <xTaskGetCurrentTaskHandle+0x1c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007eb0:	687b      	ldr	r3, [r7, #4]
	}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	20005738 	.word	0x20005738

08007ec4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007eca:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef8 <xTaskGetSchedulerState+0x34>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d102      	bne.n	8007ed8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	607b      	str	r3, [r7, #4]
 8007ed6:	e008      	b.n	8007eea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ed8:	4b08      	ldr	r3, [pc, #32]	@ (8007efc <xTaskGetSchedulerState+0x38>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d102      	bne.n	8007ee6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	607b      	str	r3, [r7, #4]
 8007ee4:	e001      	b.n	8007eea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007eea:	687b      	ldr	r3, [r7, #4]
	}
 8007eec:	4618      	mov	r0, r3
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	20005c18 	.word	0x20005c18
 8007efc:	20005c34 	.word	0x20005c34

08007f00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d051      	beq.n	8007fba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8007fc4 <xTaskPriorityInherit+0xc4>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d241      	bcs.n	8007fa8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	db06      	blt.n	8007f3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f2c:	4b25      	ldr	r3, [pc, #148]	@ (8007fc4 <xTaskPriorityInherit+0xc4>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f32:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	6959      	ldr	r1, [r3, #20]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8007fc8 <xTaskPriorityInherit+0xc8>)
 8007f4c:	4413      	add	r3, r2
 8007f4e:	4299      	cmp	r1, r3
 8007f50:	d122      	bne.n	8007f98 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	3304      	adds	r3, #4
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fd ffee 	bl	8005f38 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f5c:	4b19      	ldr	r3, [pc, #100]	@ (8007fc4 <xTaskPriorityInherit+0xc4>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f6a:	4b18      	ldr	r3, [pc, #96]	@ (8007fcc <xTaskPriorityInherit+0xcc>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d903      	bls.n	8007f7a <xTaskPriorityInherit+0x7a>
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f76:	4a15      	ldr	r2, [pc, #84]	@ (8007fcc <xTaskPriorityInherit+0xcc>)
 8007f78:	6013      	str	r3, [r2, #0]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f7e:	4613      	mov	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4a10      	ldr	r2, [pc, #64]	@ (8007fc8 <xTaskPriorityInherit+0xc8>)
 8007f88:	441a      	add	r2, r3
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4610      	mov	r0, r2
 8007f92:	f7fd ff74 	bl	8005e7e <vListInsertEnd>
 8007f96:	e004      	b.n	8007fa2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f98:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc4 <xTaskPriorityInherit+0xc4>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	e008      	b.n	8007fba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fac:	4b05      	ldr	r3, [pc, #20]	@ (8007fc4 <xTaskPriorityInherit+0xc4>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d201      	bcs.n	8007fba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fba:	68fb      	ldr	r3, [r7, #12]
	}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	20005738 	.word	0x20005738
 8007fc8:	2000573c 	.word	0x2000573c
 8007fcc:	20005c14 	.word	0x20005c14

08007fd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d058      	beq.n	8008098 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80080a4 <xTaskPriorityDisinherit+0xd4>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d00b      	beq.n	8008008 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	60fb      	str	r3, [r7, #12]
}
 8008002:	bf00      	nop
 8008004:	bf00      	nop
 8008006:	e7fd      	b.n	8008004 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10b      	bne.n	8008028 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	60bb      	str	r3, [r7, #8]
}
 8008022:	bf00      	nop
 8008024:	bf00      	nop
 8008026:	e7fd      	b.n	8008024 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800802c:	1e5a      	subs	r2, r3, #1
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800803a:	429a      	cmp	r2, r3
 800803c:	d02c      	beq.n	8008098 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008042:	2b00      	cmp	r3, #0
 8008044:	d128      	bne.n	8008098 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	3304      	adds	r3, #4
 800804a:	4618      	mov	r0, r3
 800804c:	f7fd ff74 	bl	8005f38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008068:	4b0f      	ldr	r3, [pc, #60]	@ (80080a8 <xTaskPriorityDisinherit+0xd8>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	429a      	cmp	r2, r3
 800806e:	d903      	bls.n	8008078 <xTaskPriorityDisinherit+0xa8>
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008074:	4a0c      	ldr	r2, [pc, #48]	@ (80080a8 <xTaskPriorityDisinherit+0xd8>)
 8008076:	6013      	str	r3, [r2, #0]
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800807c:	4613      	mov	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4a09      	ldr	r2, [pc, #36]	@ (80080ac <xTaskPriorityDisinherit+0xdc>)
 8008086:	441a      	add	r2, r3
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	3304      	adds	r3, #4
 800808c:	4619      	mov	r1, r3
 800808e:	4610      	mov	r0, r2
 8008090:	f7fd fef5 	bl	8005e7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008094:	2301      	movs	r3, #1
 8008096:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008098:	697b      	ldr	r3, [r7, #20]
	}
 800809a:	4618      	mov	r0, r3
 800809c:	3718      	adds	r7, #24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20005738 	.word	0x20005738
 80080a8:	20005c14 	.word	0x20005c14
 80080ac:	2000573c 	.word	0x2000573c

080080b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80080be:	2301      	movs	r3, #1
 80080c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d06c      	beq.n	80081a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10b      	bne.n	80080e8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	60fb      	str	r3, [r7, #12]
}
 80080e2:	bf00      	nop
 80080e4:	bf00      	nop
 80080e6:	e7fd      	b.n	80080e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d902      	bls.n	80080f8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	61fb      	str	r3, [r7, #28]
 80080f6:	e002      	b.n	80080fe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080fc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008102:	69fa      	ldr	r2, [r7, #28]
 8008104:	429a      	cmp	r2, r3
 8008106:	d04c      	beq.n	80081a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	429a      	cmp	r2, r3
 8008110:	d147      	bne.n	80081a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008112:	4b26      	ldr	r3, [pc, #152]	@ (80081ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	429a      	cmp	r2, r3
 800811a:	d10b      	bne.n	8008134 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	60bb      	str	r3, [r7, #8]
}
 800812e:	bf00      	nop
 8008130:	bf00      	nop
 8008132:	e7fd      	b.n	8008130 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008138:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	69fa      	ldr	r2, [r7, #28]
 800813e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	2b00      	cmp	r3, #0
 8008146:	db04      	blt.n	8008152 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	6959      	ldr	r1, [r3, #20]
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	4613      	mov	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4a13      	ldr	r2, [pc, #76]	@ (80081b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008162:	4413      	add	r3, r2
 8008164:	4299      	cmp	r1, r3
 8008166:	d11c      	bne.n	80081a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	3304      	adds	r3, #4
 800816c:	4618      	mov	r0, r3
 800816e:	f7fd fee3 	bl	8005f38 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008176:	4b0f      	ldr	r3, [pc, #60]	@ (80081b4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	429a      	cmp	r2, r3
 800817c:	d903      	bls.n	8008186 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008182:	4a0c      	ldr	r2, [pc, #48]	@ (80081b4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800818a:	4613      	mov	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4a07      	ldr	r2, [pc, #28]	@ (80081b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008194:	441a      	add	r2, r3
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	3304      	adds	r3, #4
 800819a:	4619      	mov	r1, r3
 800819c:	4610      	mov	r0, r2
 800819e:	f7fd fe6e 	bl	8005e7e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081a2:	bf00      	nop
 80081a4:	3720      	adds	r7, #32
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20005738 	.word	0x20005738
 80081b0:	2000573c 	.word	0x2000573c
 80081b4:	20005c14 	.word	0x20005c14

080081b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80081bc:	4b07      	ldr	r3, [pc, #28]	@ (80081dc <pvTaskIncrementMutexHeldCount+0x24>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d004      	beq.n	80081ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80081c4:	4b05      	ldr	r3, [pc, #20]	@ (80081dc <pvTaskIncrementMutexHeldCount+0x24>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081ca:	3201      	adds	r2, #1
 80081cc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80081ce:	4b03      	ldr	r3, [pc, #12]	@ (80081dc <pvTaskIncrementMutexHeldCount+0x24>)
 80081d0:	681b      	ldr	r3, [r3, #0]
	}
 80081d2:	4618      	mov	r0, r3
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	20005738 	.word	0x20005738

080081e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081ea:	4b21      	ldr	r3, [pc, #132]	@ (8008270 <prvAddCurrentTaskToDelayedList+0x90>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081f0:	4b20      	ldr	r3, [pc, #128]	@ (8008274 <prvAddCurrentTaskToDelayedList+0x94>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3304      	adds	r3, #4
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fd fe9e 	bl	8005f38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008202:	d10a      	bne.n	800821a <prvAddCurrentTaskToDelayedList+0x3a>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d007      	beq.n	800821a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800820a:	4b1a      	ldr	r3, [pc, #104]	@ (8008274 <prvAddCurrentTaskToDelayedList+0x94>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3304      	adds	r3, #4
 8008210:	4619      	mov	r1, r3
 8008212:	4819      	ldr	r0, [pc, #100]	@ (8008278 <prvAddCurrentTaskToDelayedList+0x98>)
 8008214:	f7fd fe33 	bl	8005e7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008218:	e026      	b.n	8008268 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4413      	add	r3, r2
 8008220:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008222:	4b14      	ldr	r3, [pc, #80]	@ (8008274 <prvAddCurrentTaskToDelayedList+0x94>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	429a      	cmp	r2, r3
 8008230:	d209      	bcs.n	8008246 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008232:	4b12      	ldr	r3, [pc, #72]	@ (800827c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4b0f      	ldr	r3, [pc, #60]	@ (8008274 <prvAddCurrentTaskToDelayedList+0x94>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3304      	adds	r3, #4
 800823c:	4619      	mov	r1, r3
 800823e:	4610      	mov	r0, r2
 8008240:	f7fd fe41 	bl	8005ec6 <vListInsert>
}
 8008244:	e010      	b.n	8008268 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008246:	4b0e      	ldr	r3, [pc, #56]	@ (8008280 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	4b0a      	ldr	r3, [pc, #40]	@ (8008274 <prvAddCurrentTaskToDelayedList+0x94>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3304      	adds	r3, #4
 8008250:	4619      	mov	r1, r3
 8008252:	4610      	mov	r0, r2
 8008254:	f7fd fe37 	bl	8005ec6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008258:	4b0a      	ldr	r3, [pc, #40]	@ (8008284 <prvAddCurrentTaskToDelayedList+0xa4>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	429a      	cmp	r2, r3
 8008260:	d202      	bcs.n	8008268 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008262:	4a08      	ldr	r2, [pc, #32]	@ (8008284 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	6013      	str	r3, [r2, #0]
}
 8008268:	bf00      	nop
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	20005c10 	.word	0x20005c10
 8008274:	20005738 	.word	0x20005738
 8008278:	20005bf8 	.word	0x20005bf8
 800827c:	20005bc8 	.word	0x20005bc8
 8008280:	20005bc4 	.word	0x20005bc4
 8008284:	20005c2c 	.word	0x20005c2c

08008288 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08a      	sub	sp, #40	@ 0x28
 800828c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800828e:	2300      	movs	r3, #0
 8008290:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008292:	f000 fb13 	bl	80088bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008296:	4b1d      	ldr	r3, [pc, #116]	@ (800830c <xTimerCreateTimerTask+0x84>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d021      	beq.n	80082e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800829e:	2300      	movs	r3, #0
 80082a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082a6:	1d3a      	adds	r2, r7, #4
 80082a8:	f107 0108 	add.w	r1, r7, #8
 80082ac:	f107 030c 	add.w	r3, r7, #12
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fd fd9d 	bl	8005df0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	9202      	str	r2, [sp, #8]
 80082be:	9301      	str	r3, [sp, #4]
 80082c0:	2302      	movs	r3, #2
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	2300      	movs	r3, #0
 80082c6:	460a      	mov	r2, r1
 80082c8:	4911      	ldr	r1, [pc, #68]	@ (8008310 <xTimerCreateTimerTask+0x88>)
 80082ca:	4812      	ldr	r0, [pc, #72]	@ (8008314 <xTimerCreateTimerTask+0x8c>)
 80082cc:	f7fe ff80 	bl	80071d0 <xTaskCreateStatic>
 80082d0:	4603      	mov	r3, r0
 80082d2:	4a11      	ldr	r2, [pc, #68]	@ (8008318 <xTimerCreateTimerTask+0x90>)
 80082d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082d6:	4b10      	ldr	r3, [pc, #64]	@ (8008318 <xTimerCreateTimerTask+0x90>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082de:	2301      	movs	r3, #1
 80082e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10b      	bne.n	8008300 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	613b      	str	r3, [r7, #16]
}
 80082fa:	bf00      	nop
 80082fc:	bf00      	nop
 80082fe:	e7fd      	b.n	80082fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008300:	697b      	ldr	r3, [r7, #20]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	20005c68 	.word	0x20005c68
 8008310:	080178e4 	.word	0x080178e4
 8008314:	08008455 	.word	0x08008455
 8008318:	20005c6c 	.word	0x20005c6c

0800831c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b08a      	sub	sp, #40	@ 0x28
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800832a:	2300      	movs	r3, #0
 800832c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10b      	bne.n	800834c <xTimerGenericCommand+0x30>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	623b      	str	r3, [r7, #32]
}
 8008346:	bf00      	nop
 8008348:	bf00      	nop
 800834a:	e7fd      	b.n	8008348 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800834c:	4b19      	ldr	r3, [pc, #100]	@ (80083b4 <xTimerGenericCommand+0x98>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d02a      	beq.n	80083aa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	2b05      	cmp	r3, #5
 8008364:	dc18      	bgt.n	8008398 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008366:	f7ff fdad 	bl	8007ec4 <xTaskGetSchedulerState>
 800836a:	4603      	mov	r3, r0
 800836c:	2b02      	cmp	r3, #2
 800836e:	d109      	bne.n	8008384 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008370:	4b10      	ldr	r3, [pc, #64]	@ (80083b4 <xTimerGenericCommand+0x98>)
 8008372:	6818      	ldr	r0, [r3, #0]
 8008374:	f107 0110 	add.w	r1, r7, #16
 8008378:	2300      	movs	r3, #0
 800837a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800837c:	f7fe f872 	bl	8006464 <xQueueGenericSend>
 8008380:	6278      	str	r0, [r7, #36]	@ 0x24
 8008382:	e012      	b.n	80083aa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008384:	4b0b      	ldr	r3, [pc, #44]	@ (80083b4 <xTimerGenericCommand+0x98>)
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	f107 0110 	add.w	r1, r7, #16
 800838c:	2300      	movs	r3, #0
 800838e:	2200      	movs	r2, #0
 8008390:	f7fe f868 	bl	8006464 <xQueueGenericSend>
 8008394:	6278      	str	r0, [r7, #36]	@ 0x24
 8008396:	e008      	b.n	80083aa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008398:	4b06      	ldr	r3, [pc, #24]	@ (80083b4 <xTimerGenericCommand+0x98>)
 800839a:	6818      	ldr	r0, [r3, #0]
 800839c:	f107 0110 	add.w	r1, r7, #16
 80083a0:	2300      	movs	r3, #0
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	f7fe f960 	bl	8006668 <xQueueGenericSendFromISR>
 80083a8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3728      	adds	r7, #40	@ 0x28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	20005c68 	.word	0x20005c68

080083b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af02      	add	r7, sp, #8
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083c2:	4b23      	ldr	r3, [pc, #140]	@ (8008450 <prvProcessExpiredTimer+0x98>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	3304      	adds	r3, #4
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fd fdb1 	bl	8005f38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d023      	beq.n	800842c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	699a      	ldr	r2, [r3, #24]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	18d1      	adds	r1, r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	6978      	ldr	r0, [r7, #20]
 80083f2:	f000 f8d5 	bl	80085a0 <prvInsertTimerInActiveList>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d020      	beq.n	800843e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083fc:	2300      	movs	r3, #0
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	2300      	movs	r3, #0
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	2100      	movs	r1, #0
 8008406:	6978      	ldr	r0, [r7, #20]
 8008408:	f7ff ff88 	bl	800831c <xTimerGenericCommand>
 800840c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d114      	bne.n	800843e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	60fb      	str	r3, [r7, #12]
}
 8008426:	bf00      	nop
 8008428:	bf00      	nop
 800842a:	e7fd      	b.n	8008428 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008432:	f023 0301 	bic.w	r3, r3, #1
 8008436:	b2da      	uxtb	r2, r3
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	6978      	ldr	r0, [r7, #20]
 8008444:	4798      	blx	r3
}
 8008446:	bf00      	nop
 8008448:	3718      	adds	r7, #24
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	20005c60 	.word	0x20005c60

08008454 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800845c:	f107 0308 	add.w	r3, r7, #8
 8008460:	4618      	mov	r0, r3
 8008462:	f000 f859 	bl	8008518 <prvGetNextExpireTime>
 8008466:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	4619      	mov	r1, r3
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 f805 	bl	800847c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008472:	f000 f8d7 	bl	8008624 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008476:	bf00      	nop
 8008478:	e7f0      	b.n	800845c <prvTimerTask+0x8>
	...

0800847c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008486:	f7ff f907 	bl	8007698 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800848a:	f107 0308 	add.w	r3, r7, #8
 800848e:	4618      	mov	r0, r3
 8008490:	f000 f866 	bl	8008560 <prvSampleTimeNow>
 8008494:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d130      	bne.n	80084fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10a      	bne.n	80084b8 <prvProcessTimerOrBlockTask+0x3c>
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d806      	bhi.n	80084b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084aa:	f7ff f903 	bl	80076b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084ae:	68f9      	ldr	r1, [r7, #12]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff ff81 	bl	80083b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084b6:	e024      	b.n	8008502 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d008      	beq.n	80084d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084be:	4b13      	ldr	r3, [pc, #76]	@ (800850c <prvProcessTimerOrBlockTask+0x90>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <prvProcessTimerOrBlockTask+0x50>
 80084c8:	2301      	movs	r3, #1
 80084ca:	e000      	b.n	80084ce <prvProcessTimerOrBlockTask+0x52>
 80084cc:	2300      	movs	r3, #0
 80084ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008510 <prvProcessTimerOrBlockTask+0x94>)
 80084d2:	6818      	ldr	r0, [r3, #0]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	4619      	mov	r1, r3
 80084de:	f7fe fe43 	bl	8007168 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80084e2:	f7ff f8e7 	bl	80076b4 <xTaskResumeAll>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10a      	bne.n	8008502 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084ec:	4b09      	ldr	r3, [pc, #36]	@ (8008514 <prvProcessTimerOrBlockTask+0x98>)
 80084ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	f3bf 8f6f 	isb	sy
}
 80084fc:	e001      	b.n	8008502 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80084fe:	f7ff f8d9 	bl	80076b4 <xTaskResumeAll>
}
 8008502:	bf00      	nop
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	20005c64 	.word	0x20005c64
 8008510:	20005c68 	.word	0x20005c68
 8008514:	e000ed04 	.word	0xe000ed04

08008518 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008520:	4b0e      	ldr	r3, [pc, #56]	@ (800855c <prvGetNextExpireTime+0x44>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <prvGetNextExpireTime+0x16>
 800852a:	2201      	movs	r2, #1
 800852c:	e000      	b.n	8008530 <prvGetNextExpireTime+0x18>
 800852e:	2200      	movs	r2, #0
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d105      	bne.n	8008548 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800853c:	4b07      	ldr	r3, [pc, #28]	@ (800855c <prvGetNextExpireTime+0x44>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	60fb      	str	r3, [r7, #12]
 8008546:	e001      	b.n	800854c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008548:	2300      	movs	r3, #0
 800854a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800854c:	68fb      	ldr	r3, [r7, #12]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	20005c60 	.word	0x20005c60

08008560 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008568:	f7ff f942 	bl	80077f0 <xTaskGetTickCount>
 800856c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800856e:	4b0b      	ldr	r3, [pc, #44]	@ (800859c <prvSampleTimeNow+0x3c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	429a      	cmp	r2, r3
 8008576:	d205      	bcs.n	8008584 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008578:	f000 f93a 	bl	80087f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	601a      	str	r2, [r3, #0]
 8008582:	e002      	b.n	800858a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800858a:	4a04      	ldr	r2, [pc, #16]	@ (800859c <prvSampleTimeNow+0x3c>)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008590:	68fb      	ldr	r3, [r7, #12]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20005c70 	.word	0x20005c70

080085a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085ae:	2300      	movs	r3, #0
 80085b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085be:	68ba      	ldr	r2, [r7, #8]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d812      	bhi.n	80085ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	1ad2      	subs	r2, r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d302      	bcc.n	80085da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085d4:	2301      	movs	r3, #1
 80085d6:	617b      	str	r3, [r7, #20]
 80085d8:	e01b      	b.n	8008612 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085da:	4b10      	ldr	r3, [pc, #64]	@ (800861c <prvInsertTimerInActiveList+0x7c>)
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	3304      	adds	r3, #4
 80085e2:	4619      	mov	r1, r3
 80085e4:	4610      	mov	r0, r2
 80085e6:	f7fd fc6e 	bl	8005ec6 <vListInsert>
 80085ea:	e012      	b.n	8008612 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d206      	bcs.n	8008602 <prvInsertTimerInActiveList+0x62>
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d302      	bcc.n	8008602 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80085fc:	2301      	movs	r3, #1
 80085fe:	617b      	str	r3, [r7, #20]
 8008600:	e007      	b.n	8008612 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008602:	4b07      	ldr	r3, [pc, #28]	@ (8008620 <prvInsertTimerInActiveList+0x80>)
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	3304      	adds	r3, #4
 800860a:	4619      	mov	r1, r3
 800860c:	4610      	mov	r0, r2
 800860e:	f7fd fc5a 	bl	8005ec6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008612:	697b      	ldr	r3, [r7, #20]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3718      	adds	r7, #24
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	20005c64 	.word	0x20005c64
 8008620:	20005c60 	.word	0x20005c60

08008624 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b08e      	sub	sp, #56	@ 0x38
 8008628:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800862a:	e0ce      	b.n	80087ca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	da19      	bge.n	8008666 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008632:	1d3b      	adds	r3, r7, #4
 8008634:	3304      	adds	r3, #4
 8008636:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10b      	bne.n	8008656 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	61fb      	str	r3, [r7, #28]
}
 8008650:	bf00      	nop
 8008652:	bf00      	nop
 8008654:	e7fd      	b.n	8008652 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800865c:	6850      	ldr	r0, [r2, #4]
 800865e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008660:	6892      	ldr	r2, [r2, #8]
 8008662:	4611      	mov	r1, r2
 8008664:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	f2c0 80ae 	blt.w	80087ca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d004      	beq.n	8008684 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800867a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867c:	3304      	adds	r3, #4
 800867e:	4618      	mov	r0, r3
 8008680:	f7fd fc5a 	bl	8005f38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008684:	463b      	mov	r3, r7
 8008686:	4618      	mov	r0, r3
 8008688:	f7ff ff6a 	bl	8008560 <prvSampleTimeNow>
 800868c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b09      	cmp	r3, #9
 8008692:	f200 8097 	bhi.w	80087c4 <prvProcessReceivedCommands+0x1a0>
 8008696:	a201      	add	r2, pc, #4	@ (adr r2, 800869c <prvProcessReceivedCommands+0x78>)
 8008698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869c:	080086c5 	.word	0x080086c5
 80086a0:	080086c5 	.word	0x080086c5
 80086a4:	080086c5 	.word	0x080086c5
 80086a8:	0800873b 	.word	0x0800873b
 80086ac:	0800874f 	.word	0x0800874f
 80086b0:	0800879b 	.word	0x0800879b
 80086b4:	080086c5 	.word	0x080086c5
 80086b8:	080086c5 	.word	0x080086c5
 80086bc:	0800873b 	.word	0x0800873b
 80086c0:	0800874f 	.word	0x0800874f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086ca:	f043 0301 	orr.w	r3, r3, #1
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	18d1      	adds	r1, r2, r3
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086e4:	f7ff ff5c 	bl	80085a0 <prvInsertTimerInActiveList>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d06c      	beq.n	80087c8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	2b00      	cmp	r3, #0
 8008702:	d061      	beq.n	80087c8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	441a      	add	r2, r3
 800870c:	2300      	movs	r3, #0
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	2300      	movs	r3, #0
 8008712:	2100      	movs	r1, #0
 8008714:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008716:	f7ff fe01 	bl	800831c <xTimerGenericCommand>
 800871a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d152      	bne.n	80087c8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	61bb      	str	r3, [r7, #24]
}
 8008734:	bf00      	nop
 8008736:	bf00      	nop
 8008738:	e7fd      	b.n	8008736 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800873a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008740:	f023 0301 	bic.w	r3, r3, #1
 8008744:	b2da      	uxtb	r2, r3
 8008746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008748:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800874c:	e03d      	b.n	80087ca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800874e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008750:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008754:	f043 0301 	orr.w	r3, r3, #1
 8008758:	b2da      	uxtb	r2, r3
 800875a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008764:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10b      	bne.n	8008786 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	617b      	str	r3, [r7, #20]
}
 8008780:	bf00      	nop
 8008782:	bf00      	nop
 8008784:	e7fd      	b.n	8008782 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008788:	699a      	ldr	r2, [r3, #24]
 800878a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878c:	18d1      	adds	r1, r2, r3
 800878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008794:	f7ff ff04 	bl	80085a0 <prvInsertTimerInActiveList>
					break;
 8008798:	e017      	b.n	80087ca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800879a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d103      	bne.n	80087b0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80087a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087aa:	f000 fbe5 	bl	8008f78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087ae:	e00c      	b.n	80087ca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087b6:	f023 0301 	bic.w	r3, r3, #1
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80087c2:	e002      	b.n	80087ca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80087c4:	bf00      	nop
 80087c6:	e000      	b.n	80087ca <prvProcessReceivedCommands+0x1a6>
					break;
 80087c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087ca:	4b08      	ldr	r3, [pc, #32]	@ (80087ec <prvProcessReceivedCommands+0x1c8>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	1d39      	adds	r1, r7, #4
 80087d0:	2200      	movs	r2, #0
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fe f876 	bl	80068c4 <xQueueReceive>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f47f af26 	bne.w	800862c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80087e0:	bf00      	nop
 80087e2:	bf00      	nop
 80087e4:	3730      	adds	r7, #48	@ 0x30
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20005c68 	.word	0x20005c68

080087f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b088      	sub	sp, #32
 80087f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087f6:	e049      	b.n	800888c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087f8:	4b2e      	ldr	r3, [pc, #184]	@ (80088b4 <prvSwitchTimerLists+0xc4>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008802:	4b2c      	ldr	r3, [pc, #176]	@ (80088b4 <prvSwitchTimerLists+0xc4>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3304      	adds	r3, #4
 8008810:	4618      	mov	r0, r3
 8008812:	f7fd fb91 	bl	8005f38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008824:	f003 0304 	and.w	r3, r3, #4
 8008828:	2b00      	cmp	r3, #0
 800882a:	d02f      	beq.n	800888c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	4413      	add	r3, r2
 8008834:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	429a      	cmp	r2, r3
 800883c:	d90e      	bls.n	800885c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800884a:	4b1a      	ldr	r3, [pc, #104]	@ (80088b4 <prvSwitchTimerLists+0xc4>)
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	3304      	adds	r3, #4
 8008852:	4619      	mov	r1, r3
 8008854:	4610      	mov	r0, r2
 8008856:	f7fd fb36 	bl	8005ec6 <vListInsert>
 800885a:	e017      	b.n	800888c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800885c:	2300      	movs	r3, #0
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	2300      	movs	r3, #0
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	2100      	movs	r1, #0
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f7ff fd58 	bl	800831c <xTimerGenericCommand>
 800886c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10b      	bne.n	800888c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	603b      	str	r3, [r7, #0]
}
 8008886:	bf00      	nop
 8008888:	bf00      	nop
 800888a:	e7fd      	b.n	8008888 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800888c:	4b09      	ldr	r3, [pc, #36]	@ (80088b4 <prvSwitchTimerLists+0xc4>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1b0      	bne.n	80087f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008896:	4b07      	ldr	r3, [pc, #28]	@ (80088b4 <prvSwitchTimerLists+0xc4>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800889c:	4b06      	ldr	r3, [pc, #24]	@ (80088b8 <prvSwitchTimerLists+0xc8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a04      	ldr	r2, [pc, #16]	@ (80088b4 <prvSwitchTimerLists+0xc4>)
 80088a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088a4:	4a04      	ldr	r2, [pc, #16]	@ (80088b8 <prvSwitchTimerLists+0xc8>)
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	6013      	str	r3, [r2, #0]
}
 80088aa:	bf00      	nop
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	20005c60 	.word	0x20005c60
 80088b8:	20005c64 	.word	0x20005c64

080088bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088c2:	f000 f969 	bl	8008b98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088c6:	4b15      	ldr	r3, [pc, #84]	@ (800891c <prvCheckForValidListAndQueue+0x60>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d120      	bne.n	8008910 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088ce:	4814      	ldr	r0, [pc, #80]	@ (8008920 <prvCheckForValidListAndQueue+0x64>)
 80088d0:	f7fd faa8 	bl	8005e24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088d4:	4813      	ldr	r0, [pc, #76]	@ (8008924 <prvCheckForValidListAndQueue+0x68>)
 80088d6:	f7fd faa5 	bl	8005e24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088da:	4b13      	ldr	r3, [pc, #76]	@ (8008928 <prvCheckForValidListAndQueue+0x6c>)
 80088dc:	4a10      	ldr	r2, [pc, #64]	@ (8008920 <prvCheckForValidListAndQueue+0x64>)
 80088de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088e0:	4b12      	ldr	r3, [pc, #72]	@ (800892c <prvCheckForValidListAndQueue+0x70>)
 80088e2:	4a10      	ldr	r2, [pc, #64]	@ (8008924 <prvCheckForValidListAndQueue+0x68>)
 80088e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088e6:	2300      	movs	r3, #0
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	4b11      	ldr	r3, [pc, #68]	@ (8008930 <prvCheckForValidListAndQueue+0x74>)
 80088ec:	4a11      	ldr	r2, [pc, #68]	@ (8008934 <prvCheckForValidListAndQueue+0x78>)
 80088ee:	2110      	movs	r1, #16
 80088f0:	200a      	movs	r0, #10
 80088f2:	f7fd fbb5 	bl	8006060 <xQueueGenericCreateStatic>
 80088f6:	4603      	mov	r3, r0
 80088f8:	4a08      	ldr	r2, [pc, #32]	@ (800891c <prvCheckForValidListAndQueue+0x60>)
 80088fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088fc:	4b07      	ldr	r3, [pc, #28]	@ (800891c <prvCheckForValidListAndQueue+0x60>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008904:	4b05      	ldr	r3, [pc, #20]	@ (800891c <prvCheckForValidListAndQueue+0x60>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	490b      	ldr	r1, [pc, #44]	@ (8008938 <prvCheckForValidListAndQueue+0x7c>)
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe fbd8 	bl	80070c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008910:	f000 f974 	bl	8008bfc <vPortExitCritical>
}
 8008914:	bf00      	nop
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	20005c68 	.word	0x20005c68
 8008920:	20005c38 	.word	0x20005c38
 8008924:	20005c4c 	.word	0x20005c4c
 8008928:	20005c60 	.word	0x20005c60
 800892c:	20005c64 	.word	0x20005c64
 8008930:	20005d14 	.word	0x20005d14
 8008934:	20005c74 	.word	0x20005c74
 8008938:	080178ec 	.word	0x080178ec

0800893c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3b04      	subs	r3, #4
 800894c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3b04      	subs	r3, #4
 800895a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	f023 0201 	bic.w	r2, r3, #1
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3b04      	subs	r3, #4
 800896a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800896c:	4a0c      	ldr	r2, [pc, #48]	@ (80089a0 <pxPortInitialiseStack+0x64>)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3b14      	subs	r3, #20
 8008976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3b04      	subs	r3, #4
 8008982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f06f 0202 	mvn.w	r2, #2
 800898a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3b20      	subs	r3, #32
 8008990:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008992:	68fb      	ldr	r3, [r7, #12]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	080089a5 	.word	0x080089a5

080089a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089ae:	4b13      	ldr	r3, [pc, #76]	@ (80089fc <prvTaskExitError+0x58>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b6:	d00b      	beq.n	80089d0 <prvTaskExitError+0x2c>
	__asm volatile
 80089b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	60fb      	str	r3, [r7, #12]
}
 80089ca:	bf00      	nop
 80089cc:	bf00      	nop
 80089ce:	e7fd      	b.n	80089cc <prvTaskExitError+0x28>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	60bb      	str	r3, [r7, #8]
}
 80089e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089e4:	bf00      	nop
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d0fc      	beq.n	80089e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089ec:	bf00      	nop
 80089ee:	bf00      	nop
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	20000020 	.word	0x20000020

08008a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a00:	4b07      	ldr	r3, [pc, #28]	@ (8008a20 <pxCurrentTCBConst2>)
 8008a02:	6819      	ldr	r1, [r3, #0]
 8008a04:	6808      	ldr	r0, [r1, #0]
 8008a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0a:	f380 8809 	msr	PSP, r0
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f04f 0000 	mov.w	r0, #0
 8008a16:	f380 8811 	msr	BASEPRI, r0
 8008a1a:	4770      	bx	lr
 8008a1c:	f3af 8000 	nop.w

08008a20 <pxCurrentTCBConst2>:
 8008a20:	20005738 	.word	0x20005738
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a24:	bf00      	nop
 8008a26:	bf00      	nop

08008a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a28:	4808      	ldr	r0, [pc, #32]	@ (8008a4c <prvPortStartFirstTask+0x24>)
 8008a2a:	6800      	ldr	r0, [r0, #0]
 8008a2c:	6800      	ldr	r0, [r0, #0]
 8008a2e:	f380 8808 	msr	MSP, r0
 8008a32:	f04f 0000 	mov.w	r0, #0
 8008a36:	f380 8814 	msr	CONTROL, r0
 8008a3a:	b662      	cpsie	i
 8008a3c:	b661      	cpsie	f
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	df00      	svc	0
 8008a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a4a:	bf00      	nop
 8008a4c:	e000ed08 	.word	0xe000ed08

08008a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a56:	4b47      	ldr	r3, [pc, #284]	@ (8008b74 <xPortStartScheduler+0x124>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a47      	ldr	r2, [pc, #284]	@ (8008b78 <xPortStartScheduler+0x128>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d10b      	bne.n	8008a78 <xPortStartScheduler+0x28>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	613b      	str	r3, [r7, #16]
}
 8008a72:	bf00      	nop
 8008a74:	bf00      	nop
 8008a76:	e7fd      	b.n	8008a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a78:	4b3e      	ldr	r3, [pc, #248]	@ (8008b74 <xPortStartScheduler+0x124>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a3f      	ldr	r2, [pc, #252]	@ (8008b7c <xPortStartScheduler+0x12c>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d10b      	bne.n	8008a9a <xPortStartScheduler+0x4a>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	60fb      	str	r3, [r7, #12]
}
 8008a94:	bf00      	nop
 8008a96:	bf00      	nop
 8008a98:	e7fd      	b.n	8008a96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a9a:	4b39      	ldr	r3, [pc, #228]	@ (8008b80 <xPortStartScheduler+0x130>)
 8008a9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	22ff      	movs	r2, #255	@ 0xff
 8008aaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ab4:	78fb      	ldrb	r3, [r7, #3]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008abc:	b2da      	uxtb	r2, r3
 8008abe:	4b31      	ldr	r3, [pc, #196]	@ (8008b84 <xPortStartScheduler+0x134>)
 8008ac0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ac2:	4b31      	ldr	r3, [pc, #196]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008ac4:	2207      	movs	r2, #7
 8008ac6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ac8:	e009      	b.n	8008ade <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008aca:	4b2f      	ldr	r3, [pc, #188]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008ad2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ade:	78fb      	ldrb	r3, [r7, #3]
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ae6:	2b80      	cmp	r3, #128	@ 0x80
 8008ae8:	d0ef      	beq.n	8008aca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008aea:	4b27      	ldr	r3, [pc, #156]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f1c3 0307 	rsb	r3, r3, #7
 8008af2:	2b04      	cmp	r3, #4
 8008af4:	d00b      	beq.n	8008b0e <xPortStartScheduler+0xbe>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	60bb      	str	r3, [r7, #8]
}
 8008b08:	bf00      	nop
 8008b0a:	bf00      	nop
 8008b0c:	e7fd      	b.n	8008b0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	021b      	lsls	r3, r3, #8
 8008b14:	4a1c      	ldr	r2, [pc, #112]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008b16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b18:	4b1b      	ldr	r3, [pc, #108]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b20:	4a19      	ldr	r2, [pc, #100]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008b22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b2c:	4b17      	ldr	r3, [pc, #92]	@ (8008b8c <xPortStartScheduler+0x13c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a16      	ldr	r2, [pc, #88]	@ (8008b8c <xPortStartScheduler+0x13c>)
 8008b32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b38:	4b14      	ldr	r3, [pc, #80]	@ (8008b8c <xPortStartScheduler+0x13c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a13      	ldr	r2, [pc, #76]	@ (8008b8c <xPortStartScheduler+0x13c>)
 8008b3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008b42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b44:	f000 f8da 	bl	8008cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b48:	4b11      	ldr	r3, [pc, #68]	@ (8008b90 <xPortStartScheduler+0x140>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b4e:	f000 f8f9 	bl	8008d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b52:	4b10      	ldr	r3, [pc, #64]	@ (8008b94 <xPortStartScheduler+0x144>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a0f      	ldr	r2, [pc, #60]	@ (8008b94 <xPortStartScheduler+0x144>)
 8008b58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008b5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b5e:	f7ff ff63 	bl	8008a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b62:	f7fe ff21 	bl	80079a8 <vTaskSwitchContext>
	prvTaskExitError();
 8008b66:	f7ff ff1d 	bl	80089a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	e000ed00 	.word	0xe000ed00
 8008b78:	410fc271 	.word	0x410fc271
 8008b7c:	410fc270 	.word	0x410fc270
 8008b80:	e000e400 	.word	0xe000e400
 8008b84:	20005d64 	.word	0x20005d64
 8008b88:	20005d68 	.word	0x20005d68
 8008b8c:	e000ed20 	.word	0xe000ed20
 8008b90:	20000020 	.word	0x20000020
 8008b94:	e000ef34 	.word	0xe000ef34

08008b98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	607b      	str	r3, [r7, #4]
}
 8008bb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bb2:	4b10      	ldr	r3, [pc, #64]	@ (8008bf4 <vPortEnterCritical+0x5c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8008bf4 <vPortEnterCritical+0x5c>)
 8008bba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf4 <vPortEnterCritical+0x5c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d110      	bne.n	8008be6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf8 <vPortEnterCritical+0x60>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00b      	beq.n	8008be6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	603b      	str	r3, [r7, #0]
}
 8008be0:	bf00      	nop
 8008be2:	bf00      	nop
 8008be4:	e7fd      	b.n	8008be2 <vPortEnterCritical+0x4a>
	}
}
 8008be6:	bf00      	nop
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	20000020 	.word	0x20000020
 8008bf8:	e000ed04 	.word	0xe000ed04

08008bfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c02:	4b12      	ldr	r3, [pc, #72]	@ (8008c4c <vPortExitCritical+0x50>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10b      	bne.n	8008c22 <vPortExitCritical+0x26>
	__asm volatile
 8008c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	607b      	str	r3, [r7, #4]
}
 8008c1c:	bf00      	nop
 8008c1e:	bf00      	nop
 8008c20:	e7fd      	b.n	8008c1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c22:	4b0a      	ldr	r3, [pc, #40]	@ (8008c4c <vPortExitCritical+0x50>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3b01      	subs	r3, #1
 8008c28:	4a08      	ldr	r2, [pc, #32]	@ (8008c4c <vPortExitCritical+0x50>)
 8008c2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c2c:	4b07      	ldr	r3, [pc, #28]	@ (8008c4c <vPortExitCritical+0x50>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d105      	bne.n	8008c40 <vPortExitCritical+0x44>
 8008c34:	2300      	movs	r3, #0
 8008c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	f383 8811 	msr	BASEPRI, r3
}
 8008c3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	20000020 	.word	0x20000020

08008c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c50:	f3ef 8009 	mrs	r0, PSP
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	4b15      	ldr	r3, [pc, #84]	@ (8008cb0 <pxCurrentTCBConst>)
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	f01e 0f10 	tst.w	lr, #16
 8008c60:	bf08      	it	eq
 8008c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6a:	6010      	str	r0, [r2, #0]
 8008c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c74:	f380 8811 	msr	BASEPRI, r0
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f7fe fe92 	bl	80079a8 <vTaskSwitchContext>
 8008c84:	f04f 0000 	mov.w	r0, #0
 8008c88:	f380 8811 	msr	BASEPRI, r0
 8008c8c:	bc09      	pop	{r0, r3}
 8008c8e:	6819      	ldr	r1, [r3, #0]
 8008c90:	6808      	ldr	r0, [r1, #0]
 8008c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c96:	f01e 0f10 	tst.w	lr, #16
 8008c9a:	bf08      	it	eq
 8008c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ca0:	f380 8809 	msr	PSP, r0
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	f3af 8000 	nop.w

08008cb0 <pxCurrentTCBConst>:
 8008cb0:	20005738 	.word	0x20005738
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop

08008cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	607b      	str	r3, [r7, #4]
}
 8008cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008cd2:	f7fe fdaf 	bl	8007834 <xTaskIncrementTick>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d003      	beq.n	8008ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cdc:	4b06      	ldr	r3, [pc, #24]	@ (8008cf8 <xPortSysTickHandler+0x40>)
 8008cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	f383 8811 	msr	BASEPRI, r3
}
 8008cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cf0:	bf00      	nop
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	e000ed04 	.word	0xe000ed04

08008cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d00:	4b0b      	ldr	r3, [pc, #44]	@ (8008d30 <vPortSetupTimerInterrupt+0x34>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d06:	4b0b      	ldr	r3, [pc, #44]	@ (8008d34 <vPortSetupTimerInterrupt+0x38>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d38 <vPortSetupTimerInterrupt+0x3c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a0a      	ldr	r2, [pc, #40]	@ (8008d3c <vPortSetupTimerInterrupt+0x40>)
 8008d12:	fba2 2303 	umull	r2, r3, r2, r3
 8008d16:	099b      	lsrs	r3, r3, #6
 8008d18:	4a09      	ldr	r2, [pc, #36]	@ (8008d40 <vPortSetupTimerInterrupt+0x44>)
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d1e:	4b04      	ldr	r3, [pc, #16]	@ (8008d30 <vPortSetupTimerInterrupt+0x34>)
 8008d20:	2207      	movs	r2, #7
 8008d22:	601a      	str	r2, [r3, #0]
}
 8008d24:	bf00      	nop
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	e000e010 	.word	0xe000e010
 8008d34:	e000e018 	.word	0xe000e018
 8008d38:	20000000 	.word	0x20000000
 8008d3c:	10624dd3 	.word	0x10624dd3
 8008d40:	e000e014 	.word	0xe000e014

08008d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008d54 <vPortEnableVFP+0x10>
 8008d48:	6801      	ldr	r1, [r0, #0]
 8008d4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008d4e:	6001      	str	r1, [r0, #0]
 8008d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d52:	bf00      	nop
 8008d54:	e000ed88 	.word	0xe000ed88

08008d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d5e:	f3ef 8305 	mrs	r3, IPSR
 8008d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2b0f      	cmp	r3, #15
 8008d68:	d915      	bls.n	8008d96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d6a:	4a18      	ldr	r2, [pc, #96]	@ (8008dcc <vPortValidateInterruptPriority+0x74>)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4413      	add	r3, r2
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d74:	4b16      	ldr	r3, [pc, #88]	@ (8008dd0 <vPortValidateInterruptPriority+0x78>)
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	7afa      	ldrb	r2, [r7, #11]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d20b      	bcs.n	8008d96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	607b      	str	r3, [r7, #4]
}
 8008d90:	bf00      	nop
 8008d92:	bf00      	nop
 8008d94:	e7fd      	b.n	8008d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d96:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd4 <vPortValidateInterruptPriority+0x7c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8008dd8 <vPortValidateInterruptPriority+0x80>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d90b      	bls.n	8008dbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008daa:	f383 8811 	msr	BASEPRI, r3
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	f3bf 8f4f 	dsb	sy
 8008db6:	603b      	str	r3, [r7, #0]
}
 8008db8:	bf00      	nop
 8008dba:	bf00      	nop
 8008dbc:	e7fd      	b.n	8008dba <vPortValidateInterruptPriority+0x62>
	}
 8008dbe:	bf00      	nop
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	e000e3f0 	.word	0xe000e3f0
 8008dd0:	20005d64 	.word	0x20005d64
 8008dd4:	e000ed0c 	.word	0xe000ed0c
 8008dd8:	20005d68 	.word	0x20005d68

08008ddc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08a      	sub	sp, #40	@ 0x28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008de4:	2300      	movs	r3, #0
 8008de6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008de8:	f7fe fc56 	bl	8007698 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008dec:	4b5c      	ldr	r3, [pc, #368]	@ (8008f60 <pvPortMalloc+0x184>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008df4:	f000 f924 	bl	8009040 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008df8:	4b5a      	ldr	r3, [pc, #360]	@ (8008f64 <pvPortMalloc+0x188>)
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4013      	ands	r3, r2
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f040 8095 	bne.w	8008f30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01e      	beq.n	8008e4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e0c:	2208      	movs	r2, #8
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4413      	add	r3, r2
 8008e12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f003 0307 	and.w	r3, r3, #7
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d015      	beq.n	8008e4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f023 0307 	bic.w	r3, r3, #7
 8008e24:	3308      	adds	r3, #8
 8008e26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f003 0307 	and.w	r3, r3, #7
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00b      	beq.n	8008e4a <pvPortMalloc+0x6e>
	__asm volatile
 8008e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	617b      	str	r3, [r7, #20]
}
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop
 8008e48:	e7fd      	b.n	8008e46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d06f      	beq.n	8008f30 <pvPortMalloc+0x154>
 8008e50:	4b45      	ldr	r3, [pc, #276]	@ (8008f68 <pvPortMalloc+0x18c>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d86a      	bhi.n	8008f30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e5a:	4b44      	ldr	r3, [pc, #272]	@ (8008f6c <pvPortMalloc+0x190>)
 8008e5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e5e:	4b43      	ldr	r3, [pc, #268]	@ (8008f6c <pvPortMalloc+0x190>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e64:	e004      	b.n	8008e70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d903      	bls.n	8008e82 <pvPortMalloc+0xa6>
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1f1      	bne.n	8008e66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e82:	4b37      	ldr	r3, [pc, #220]	@ (8008f60 <pvPortMalloc+0x184>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d051      	beq.n	8008f30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2208      	movs	r2, #8
 8008e92:	4413      	add	r3, r2
 8008e94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	1ad2      	subs	r2, r2, r3
 8008ea6:	2308      	movs	r3, #8
 8008ea8:	005b      	lsls	r3, r3, #1
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d920      	bls.n	8008ef0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	f003 0307 	and.w	r3, r3, #7
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00b      	beq.n	8008ed8 <pvPortMalloc+0xfc>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	613b      	str	r3, [r7, #16]
}
 8008ed2:	bf00      	nop
 8008ed4:	bf00      	nop
 8008ed6:	e7fd      	b.n	8008ed4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	1ad2      	subs	r2, r2, r3
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008eea:	69b8      	ldr	r0, [r7, #24]
 8008eec:	f000 f90a 	bl	8009104 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8008f68 <pvPortMalloc+0x18c>)
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	4a1b      	ldr	r2, [pc, #108]	@ (8008f68 <pvPortMalloc+0x18c>)
 8008efc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008efe:	4b1a      	ldr	r3, [pc, #104]	@ (8008f68 <pvPortMalloc+0x18c>)
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	4b1b      	ldr	r3, [pc, #108]	@ (8008f70 <pvPortMalloc+0x194>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d203      	bcs.n	8008f12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f0a:	4b17      	ldr	r3, [pc, #92]	@ (8008f68 <pvPortMalloc+0x18c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a18      	ldr	r2, [pc, #96]	@ (8008f70 <pvPortMalloc+0x194>)
 8008f10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	4b13      	ldr	r3, [pc, #76]	@ (8008f64 <pvPortMalloc+0x188>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	431a      	orrs	r2, r3
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f26:	4b13      	ldr	r3, [pc, #76]	@ (8008f74 <pvPortMalloc+0x198>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	4a11      	ldr	r2, [pc, #68]	@ (8008f74 <pvPortMalloc+0x198>)
 8008f2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f30:	f7fe fbc0 	bl	80076b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	f003 0307 	and.w	r3, r3, #7
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00b      	beq.n	8008f56 <pvPortMalloc+0x17a>
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	60fb      	str	r3, [r7, #12]
}
 8008f50:	bf00      	nop
 8008f52:	bf00      	nop
 8008f54:	e7fd      	b.n	8008f52 <pvPortMalloc+0x176>
	return pvReturn;
 8008f56:	69fb      	ldr	r3, [r7, #28]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3728      	adds	r7, #40	@ 0x28
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20009974 	.word	0x20009974
 8008f64:	20009988 	.word	0x20009988
 8008f68:	20009978 	.word	0x20009978
 8008f6c:	2000996c 	.word	0x2000996c
 8008f70:	2000997c 	.word	0x2000997c
 8008f74:	20009980 	.word	0x20009980

08008f78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d04f      	beq.n	800902a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f8a:	2308      	movs	r3, #8
 8008f8c:	425b      	negs	r3, r3
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	4413      	add	r3, r2
 8008f92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	4b25      	ldr	r3, [pc, #148]	@ (8009034 <vPortFree+0xbc>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10b      	bne.n	8008fbe <vPortFree+0x46>
	__asm volatile
 8008fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	60fb      	str	r3, [r7, #12]
}
 8008fb8:	bf00      	nop
 8008fba:	bf00      	nop
 8008fbc:	e7fd      	b.n	8008fba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00b      	beq.n	8008fde <vPortFree+0x66>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	60bb      	str	r3, [r7, #8]
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	e7fd      	b.n	8008fda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	4b14      	ldr	r3, [pc, #80]	@ (8009034 <vPortFree+0xbc>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01e      	beq.n	800902a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d11a      	bne.n	800902a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8009034 <vPortFree+0xbc>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	43db      	mvns	r3, r3
 8008ffe:	401a      	ands	r2, r3
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009004:	f7fe fb48 	bl	8007698 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	4b0a      	ldr	r3, [pc, #40]	@ (8009038 <vPortFree+0xc0>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4413      	add	r3, r2
 8009012:	4a09      	ldr	r2, [pc, #36]	@ (8009038 <vPortFree+0xc0>)
 8009014:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009016:	6938      	ldr	r0, [r7, #16]
 8009018:	f000 f874 	bl	8009104 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800901c:	4b07      	ldr	r3, [pc, #28]	@ (800903c <vPortFree+0xc4>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3301      	adds	r3, #1
 8009022:	4a06      	ldr	r2, [pc, #24]	@ (800903c <vPortFree+0xc4>)
 8009024:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009026:	f7fe fb45 	bl	80076b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800902a:	bf00      	nop
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20009988 	.word	0x20009988
 8009038:	20009978 	.word	0x20009978
 800903c:	20009984 	.word	0x20009984

08009040 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009046:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800904a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800904c:	4b27      	ldr	r3, [pc, #156]	@ (80090ec <prvHeapInit+0xac>)
 800904e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00c      	beq.n	8009074 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	3307      	adds	r3, #7
 800905e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f023 0307 	bic.w	r3, r3, #7
 8009066:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	4a1f      	ldr	r2, [pc, #124]	@ (80090ec <prvHeapInit+0xac>)
 8009070:	4413      	add	r3, r2
 8009072:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009078:	4a1d      	ldr	r2, [pc, #116]	@ (80090f0 <prvHeapInit+0xb0>)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800907e:	4b1c      	ldr	r3, [pc, #112]	@ (80090f0 <prvHeapInit+0xb0>)
 8009080:	2200      	movs	r2, #0
 8009082:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	4413      	add	r3, r2
 800908a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800908c:	2208      	movs	r2, #8
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	1a9b      	subs	r3, r3, r2
 8009092:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f023 0307 	bic.w	r3, r3, #7
 800909a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4a15      	ldr	r2, [pc, #84]	@ (80090f4 <prvHeapInit+0xb4>)
 80090a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090a2:	4b14      	ldr	r3, [pc, #80]	@ (80090f4 <prvHeapInit+0xb4>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2200      	movs	r2, #0
 80090a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090aa:	4b12      	ldr	r3, [pc, #72]	@ (80090f4 <prvHeapInit+0xb4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2200      	movs	r2, #0
 80090b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	1ad2      	subs	r2, r2, r3
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090c0:	4b0c      	ldr	r3, [pc, #48]	@ (80090f4 <prvHeapInit+0xb4>)
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	4a0a      	ldr	r2, [pc, #40]	@ (80090f8 <prvHeapInit+0xb8>)
 80090ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	4a09      	ldr	r2, [pc, #36]	@ (80090fc <prvHeapInit+0xbc>)
 80090d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090d8:	4b09      	ldr	r3, [pc, #36]	@ (8009100 <prvHeapInit+0xc0>)
 80090da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80090de:	601a      	str	r2, [r3, #0]
}
 80090e0:	bf00      	nop
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	20005d6c 	.word	0x20005d6c
 80090f0:	2000996c 	.word	0x2000996c
 80090f4:	20009974 	.word	0x20009974
 80090f8:	2000997c 	.word	0x2000997c
 80090fc:	20009978 	.word	0x20009978
 8009100:	20009988 	.word	0x20009988

08009104 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800910c:	4b28      	ldr	r3, [pc, #160]	@ (80091b0 <prvInsertBlockIntoFreeList+0xac>)
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	e002      	b.n	8009118 <prvInsertBlockIntoFreeList+0x14>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	429a      	cmp	r2, r3
 8009120:	d8f7      	bhi.n	8009112 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	4413      	add	r3, r2
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	429a      	cmp	r2, r3
 8009132:	d108      	bne.n	8009146 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	441a      	add	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	441a      	add	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	429a      	cmp	r2, r3
 8009158:	d118      	bne.n	800918c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	4b15      	ldr	r3, [pc, #84]	@ (80091b4 <prvInsertBlockIntoFreeList+0xb0>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	429a      	cmp	r2, r3
 8009164:	d00d      	beq.n	8009182 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	441a      	add	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	601a      	str	r2, [r3, #0]
 8009180:	e008      	b.n	8009194 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009182:	4b0c      	ldr	r3, [pc, #48]	@ (80091b4 <prvInsertBlockIntoFreeList+0xb0>)
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	e003      	b.n	8009194 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	429a      	cmp	r2, r3
 800919a:	d002      	beq.n	80091a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091a2:	bf00      	nop
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	2000996c 	.word	0x2000996c
 80091b4:	20009974 	.word	0x20009974

080091b8 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	330c      	adds	r3, #12
 80091c8:	461a      	mov	r2, r3
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f002 fa59 	bl	800b684 <tcpip_send_msg_wait_sem>
 80091d2:	4603      	mov	r3, r0
 80091d4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80091d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d103      	bne.n	80091e6 <netconn_apimsg+0x2e>
    return apimsg->err;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80091e4:	e001      	b.n	80091ea <netconn_apimsg+0x32>
  }
  return err;
 80091e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08c      	sub	sp, #48	@ 0x30
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	4603      	mov	r3, r0
 80091fc:	603a      	str	r2, [r7, #0]
 80091fe:	71fb      	strb	r3, [r7, #7]
 8009200:	460b      	mov	r3, r1
 8009202:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009204:	79fb      	ldrb	r3, [r7, #7]
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	4618      	mov	r0, r3
 800920a:	f001 f923 	bl	800a454 <netconn_alloc>
 800920e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8009210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009212:	2b00      	cmp	r3, #0
 8009214:	d054      	beq.n	80092c0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009216:	79bb      	ldrb	r3, [r7, #6]
 8009218:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800921a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800921c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800921e:	f107 0308 	add.w	r3, r7, #8
 8009222:	4619      	mov	r1, r3
 8009224:	4829      	ldr	r0, [pc, #164]	@ (80092cc <netconn_new_with_proto_and_callback+0xd8>)
 8009226:	f7ff ffc7 	bl	80091b8 <netconn_apimsg>
 800922a:	4603      	mov	r3, r0
 800922c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8009230:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8009234:	2b00      	cmp	r3, #0
 8009236:	d043      	beq.n	80092c0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d005      	beq.n	800924c <netconn_new_with_proto_and_callback+0x58>
 8009240:	4b23      	ldr	r3, [pc, #140]	@ (80092d0 <netconn_new_with_proto_and_callback+0xdc>)
 8009242:	22a3      	movs	r2, #163	@ 0xa3
 8009244:	4923      	ldr	r1, [pc, #140]	@ (80092d4 <netconn_new_with_proto_and_callback+0xe0>)
 8009246:	4824      	ldr	r0, [pc, #144]	@ (80092d8 <netconn_new_with_proto_and_callback+0xe4>)
 8009248:	f00d fb80 	bl	801694c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800924c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800924e:	3310      	adds	r3, #16
 8009250:	4618      	mov	r0, r3
 8009252:	f00d f953 	bl	80164fc <sys_mbox_valid>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d105      	bne.n	8009268 <netconn_new_with_proto_and_callback+0x74>
 800925c:	4b1c      	ldr	r3, [pc, #112]	@ (80092d0 <netconn_new_with_proto_and_callback+0xdc>)
 800925e:	22a4      	movs	r2, #164	@ 0xa4
 8009260:	491e      	ldr	r1, [pc, #120]	@ (80092dc <netconn_new_with_proto_and_callback+0xe8>)
 8009262:	481d      	ldr	r0, [pc, #116]	@ (80092d8 <netconn_new_with_proto_and_callback+0xe4>)
 8009264:	f00d fb72 	bl	801694c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800926a:	3314      	adds	r3, #20
 800926c:	4618      	mov	r0, r3
 800926e:	f00d f945 	bl	80164fc <sys_mbox_valid>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d005      	beq.n	8009284 <netconn_new_with_proto_and_callback+0x90>
 8009278:	4b15      	ldr	r3, [pc, #84]	@ (80092d0 <netconn_new_with_proto_and_callback+0xdc>)
 800927a:	22a6      	movs	r2, #166	@ 0xa6
 800927c:	4918      	ldr	r1, [pc, #96]	@ (80092e0 <netconn_new_with_proto_and_callback+0xec>)
 800927e:	4816      	ldr	r0, [pc, #88]	@ (80092d8 <netconn_new_with_proto_and_callback+0xe4>)
 8009280:	f00d fb64 	bl	801694c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009286:	330c      	adds	r3, #12
 8009288:	4618      	mov	r0, r3
 800928a:	f00d f9c5 	bl	8016618 <sys_sem_valid>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d105      	bne.n	80092a0 <netconn_new_with_proto_and_callback+0xac>
 8009294:	4b0e      	ldr	r3, [pc, #56]	@ (80092d0 <netconn_new_with_proto_and_callback+0xdc>)
 8009296:	22a9      	movs	r2, #169	@ 0xa9
 8009298:	4912      	ldr	r1, [pc, #72]	@ (80092e4 <netconn_new_with_proto_and_callback+0xf0>)
 800929a:	480f      	ldr	r0, [pc, #60]	@ (80092d8 <netconn_new_with_proto_and_callback+0xe4>)
 800929c:	f00d fb56 	bl	801694c <iprintf>
      sys_sem_free(&conn->op_completed);
 80092a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a2:	330c      	adds	r3, #12
 80092a4:	4618      	mov	r0, r3
 80092a6:	f00d f9aa 	bl	80165fe <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80092aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ac:	3310      	adds	r3, #16
 80092ae:	4618      	mov	r0, r3
 80092b0:	f00d f8b0 	bl	8016414 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80092b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092b6:	2007      	movs	r0, #7
 80092b8:	f002 ff92 	bl	800c1e0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80092bc:	2300      	movs	r3, #0
 80092be:	e000      	b.n	80092c2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80092c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3730      	adds	r7, #48	@ 0x30
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	0800a429 	.word	0x0800a429
 80092d0:	080178f4 	.word	0x080178f4
 80092d4:	08017928 	.word	0x08017928
 80092d8:	0801794c 	.word	0x0801794c
 80092dc:	08017974 	.word	0x08017974
 80092e0:	0801798c 	.word	0x0801798c
 80092e4:	080179b0 	.word	0x080179b0

080092e8 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08c      	sub	sp, #48	@ 0x30
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d101      	bne.n	80092fa <netconn_prepare_delete+0x12>
    return ERR_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	e014      	b.n	8009324 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80092fe:	2329      	movs	r3, #41	@ 0x29
 8009300:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009302:	f107 030c 	add.w	r3, r7, #12
 8009306:	4619      	mov	r1, r3
 8009308:	4808      	ldr	r0, [pc, #32]	@ (800932c <netconn_prepare_delete+0x44>)
 800930a:	f7ff ff55 	bl	80091b8 <netconn_apimsg>
 800930e:	4603      	mov	r3, r0
 8009310:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009314:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <netconn_prepare_delete+0x3a>
    return err;
 800931c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009320:	e000      	b.n	8009324 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3730      	adds	r7, #48	@ 0x30
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	0800a995 	.word	0x0800a995

08009330 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <netconn_delete+0x12>
    return ERR_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	e00d      	b.n	800935e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff ffd0 	bl	80092e8 <netconn_prepare_delete>
 8009348:	4603      	mov	r3, r0
 800934a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800934c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d102      	bne.n	800935a <netconn_delete+0x2a>
    netconn_free(conn);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 f8eb 	bl	800a530 <netconn_free>
  }
  return err;
 800935a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b08e      	sub	sp, #56	@ 0x38
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	4613      	mov	r3, r2
 8009374:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d109      	bne.n	8009390 <netconn_bind+0x28>
 800937c:	4b11      	ldr	r3, [pc, #68]	@ (80093c4 <netconn_bind+0x5c>)
 800937e:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8009382:	4911      	ldr	r1, [pc, #68]	@ (80093c8 <netconn_bind+0x60>)
 8009384:	4811      	ldr	r0, [pc, #68]	@ (80093cc <netconn_bind+0x64>)
 8009386:	f00d fae1 	bl	801694c <iprintf>
 800938a:	f06f 030f 	mvn.w	r3, #15
 800938e:	e015      	b.n	80093bc <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8009396:	4b0e      	ldr	r3, [pc, #56]	@ (80093d0 <netconn_bind+0x68>)
 8009398:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80093a2:	88fb      	ldrh	r3, [r7, #6]
 80093a4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80093a6:	f107 0314 	add.w	r3, r7, #20
 80093aa:	4619      	mov	r1, r3
 80093ac:	4809      	ldr	r0, [pc, #36]	@ (80093d4 <netconn_bind+0x6c>)
 80093ae:	f7ff ff03 	bl	80091b8 <netconn_apimsg>
 80093b2:	4603      	mov	r3, r0
 80093b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80093b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3738      	adds	r7, #56	@ 0x38
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	080178f4 	.word	0x080178f4
 80093c8:	08017a2c 	.word	0x08017a2c
 80093cc:	0801794c 	.word	0x0801794c
 80093d0:	0801af20 	.word	0x0801af20
 80093d4:	0800ab5d 	.word	0x0800ab5d

080093d8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b08c      	sub	sp, #48	@ 0x30
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	460b      	mov	r3, r1
 80093e2:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d109      	bne.n	80093fe <netconn_listen_with_backlog+0x26>
 80093ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009420 <netconn_listen_with_backlog+0x48>)
 80093ec:	f240 12bb 	movw	r2, #443	@ 0x1bb
 80093f0:	490c      	ldr	r1, [pc, #48]	@ (8009424 <netconn_listen_with_backlog+0x4c>)
 80093f2:	480d      	ldr	r0, [pc, #52]	@ (8009428 <netconn_listen_with_backlog+0x50>)
 80093f4:	f00d faaa 	bl	801694c <iprintf>
 80093f8:	f06f 030f 	mvn.w	r3, #15
 80093fc:	e00c      	b.n	8009418 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8009402:	f107 030c 	add.w	r3, r7, #12
 8009406:	4619      	mov	r1, r3
 8009408:	4808      	ldr	r0, [pc, #32]	@ (800942c <netconn_listen_with_backlog+0x54>)
 800940a:	f7ff fed5 	bl	80091b8 <netconn_apimsg>
 800940e:	4603      	mov	r3, r0
 8009410:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009414:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009418:	4618      	mov	r0, r3
 800941a:	3730      	adds	r7, #48	@ 0x30
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	080178f4 	.word	0x080178f4
 8009424:	08017aac 	.word	0x08017aac
 8009428:	0801794c 	.word	0x0801794c
 800942c:	0800abd1 	.word	0x0800abd1

08009430 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d109      	bne.n	8009454 <netconn_accept+0x24>
 8009440:	4b3d      	ldr	r3, [pc, #244]	@ (8009538 <netconn_accept+0x108>)
 8009442:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8009446:	493d      	ldr	r1, [pc, #244]	@ (800953c <netconn_accept+0x10c>)
 8009448:	483d      	ldr	r0, [pc, #244]	@ (8009540 <netconn_accept+0x110>)
 800944a:	f00d fa7f 	bl	801694c <iprintf>
 800944e:	f06f 030f 	mvn.w	r3, #15
 8009452:	e06c      	b.n	800952e <netconn_accept+0xfe>
  *new_conn = NULL;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	2200      	movs	r2, #0
 8009458:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d109      	bne.n	8009474 <netconn_accept+0x44>
 8009460:	4b35      	ldr	r3, [pc, #212]	@ (8009538 <netconn_accept+0x108>)
 8009462:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8009466:	4937      	ldr	r1, [pc, #220]	@ (8009544 <netconn_accept+0x114>)
 8009468:	4835      	ldr	r0, [pc, #212]	@ (8009540 <netconn_accept+0x110>)
 800946a:	f00d fa6f 	bl	801694c <iprintf>
 800946e:	f06f 030f 	mvn.w	r3, #15
 8009472:	e05c      	b.n	800952e <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fb6c 	bl	8009b52 <netconn_err>
 800947a:	4603      	mov	r3, r0
 800947c:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800947e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d002      	beq.n	800948c <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8009486:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800948a:	e050      	b.n	800952e <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	3314      	adds	r3, #20
 8009490:	4618      	mov	r0, r3
 8009492:	f00d f833 	bl	80164fc <sys_mbox_valid>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d005      	beq.n	80094a8 <netconn_accept+0x78>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	7f1b      	ldrb	r3, [r3, #28]
 80094a0:	f003 0301 	and.w	r3, r3, #1
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80094a8:	f06f 030e 	mvn.w	r3, #14
 80094ac:	e03f      	b.n	800952e <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	7f1b      	ldrb	r3, [r3, #28]
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00e      	beq.n	80094d8 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	3314      	adds	r3, #20
 80094be:	f107 020c 	add.w	r2, r7, #12
 80094c2:	4611      	mov	r1, r2
 80094c4:	4618      	mov	r0, r3
 80094c6:	f00d f802 	bl	80164ce <sys_arch_mbox_tryfetch>
 80094ca:	4603      	mov	r3, r0
 80094cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d0:	d10a      	bne.n	80094e8 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80094d2:	f06f 0306 	mvn.w	r3, #6
 80094d6:	e02a      	b.n	800952e <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	3314      	adds	r3, #20
 80094dc:	f107 010c 	add.w	r1, r7, #12
 80094e0:	2200      	movs	r2, #0
 80094e2:	4618      	mov	r0, r3
 80094e4:	f00c ffc2 	bl	801646c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <netconn_accept+0xcc>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f4:	2200      	movs	r2, #0
 80094f6:	2101      	movs	r1, #1
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f107 0213 	add.w	r2, r7, #19
 8009502:	4611      	mov	r1, r2
 8009504:	4618      	mov	r0, r3
 8009506:	f000 fb75 	bl	8009bf4 <lwip_netconn_is_err_msg>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d002      	beq.n	8009516 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8009510:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009514:	e00b      	b.n	800952e <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d102      	bne.n	8009522 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800951c:	f06f 030e 	mvn.w	r3, #14
 8009520:	e005      	b.n	800952e <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800952c:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800952e:	4618      	mov	r0, r3
 8009530:	3718      	adds	r7, #24
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	080178f4 	.word	0x080178f4
 800953c:	08017acc 	.word	0x08017acc
 8009540:	0801794c 	.word	0x0801794c
 8009544:	08017aec 	.word	0x08017aec

08009548 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b088      	sub	sp, #32
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	4613      	mov	r3, r2
 8009554:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8009556:	2300      	movs	r3, #0
 8009558:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d109      	bne.n	8009574 <netconn_recv_data+0x2c>
 8009560:	4b58      	ldr	r3, [pc, #352]	@ (80096c4 <netconn_recv_data+0x17c>)
 8009562:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8009566:	4958      	ldr	r1, [pc, #352]	@ (80096c8 <netconn_recv_data+0x180>)
 8009568:	4858      	ldr	r0, [pc, #352]	@ (80096cc <netconn_recv_data+0x184>)
 800956a:	f00d f9ef 	bl	801694c <iprintf>
 800956e:	f06f 030f 	mvn.w	r3, #15
 8009572:	e0a2      	b.n	80096ba <netconn_recv_data+0x172>
  *new_buf = NULL;
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	2200      	movs	r2, #0
 8009578:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d109      	bne.n	8009594 <netconn_recv_data+0x4c>
 8009580:	4b50      	ldr	r3, [pc, #320]	@ (80096c4 <netconn_recv_data+0x17c>)
 8009582:	f240 224a 	movw	r2, #586	@ 0x24a
 8009586:	4952      	ldr	r1, [pc, #328]	@ (80096d0 <netconn_recv_data+0x188>)
 8009588:	4850      	ldr	r0, [pc, #320]	@ (80096cc <netconn_recv_data+0x184>)
 800958a:	f00d f9df 	bl	801694c <iprintf>
 800958e:	f06f 030f 	mvn.w	r3, #15
 8009592:	e092      	b.n	80096ba <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	3310      	adds	r3, #16
 8009598:	4618      	mov	r0, r3
 800959a:	f00c ffaf 	bl	80164fc <sys_mbox_valid>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10e      	bne.n	80095c2 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f000 fad4 	bl	8009b52 <netconn_err>
 80095aa:	4603      	mov	r3, r0
 80095ac:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80095ae:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d002      	beq.n	80095bc <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80095b6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80095ba:	e07e      	b.n	80096ba <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80095bc:	f06f 030a 	mvn.w	r3, #10
 80095c0:	e07b      	b.n	80096ba <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	7f1b      	ldrb	r3, [r3, #28]
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10f      	bne.n	80095ee <netconn_recv_data+0xa6>
 80095ce:	79fb      	ldrb	r3, [r7, #7]
 80095d0:	f003 0304 	and.w	r3, r3, #4
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10a      	bne.n	80095ee <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	7f1b      	ldrb	r3, [r3, #28]
 80095dc:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d104      	bne.n	80095ee <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d023      	beq.n	8009636 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3310      	adds	r3, #16
 80095f2:	f107 0218 	add.w	r2, r7, #24
 80095f6:	4611      	mov	r1, r2
 80095f8:	4618      	mov	r0, r3
 80095fa:	f00c ff68 	bl	80164ce <sys_arch_mbox_tryfetch>
 80095fe:	4603      	mov	r3, r0
 8009600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009604:	d11f      	bne.n	8009646 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f000 faa3 	bl	8009b52 <netconn_err>
 800960c:	4603      	mov	r3, r0
 800960e:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009610:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009618:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800961c:	e04d      	b.n	80096ba <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	7f1b      	ldrb	r3, [r3, #28]
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	2b00      	cmp	r3, #0
 8009628:	d002      	beq.n	8009630 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800962a:	f06f 030a 	mvn.w	r3, #10
 800962e:	e044      	b.n	80096ba <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009630:	f06f 0306 	mvn.w	r3, #6
 8009634:	e041      	b.n	80096ba <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	3310      	adds	r3, #16
 800963a:	f107 0118 	add.w	r1, r7, #24
 800963e:	2200      	movs	r2, #0
 8009640:	4618      	mov	r0, r3
 8009642:	f00c ff13 	bl	801646c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800964e:	2b10      	cmp	r3, #16
 8009650:	d117      	bne.n	8009682 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	f107 0217 	add.w	r2, r7, #23
 8009658:	4611      	mov	r1, r2
 800965a:	4618      	mov	r0, r3
 800965c:	f000 faca 	bl	8009bf4 <lwip_netconn_is_err_msg>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d009      	beq.n	800967a <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8009666:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800966a:	f113 0f0f 	cmn.w	r3, #15
 800966e:	d101      	bne.n	8009674 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	e022      	b.n	80096ba <netconn_recv_data+0x172>
      }
      return err;
 8009674:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009678:	e01f      	b.n	80096ba <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	891b      	ldrh	r3, [r3, #8]
 800967e:	83fb      	strh	r3, [r7, #30]
 8009680:	e00d      	b.n	800969e <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d106      	bne.n	8009696 <netconn_recv_data+0x14e>
 8009688:	4b0e      	ldr	r3, [pc, #56]	@ (80096c4 <netconn_recv_data+0x17c>)
 800968a:	f240 2291 	movw	r2, #657	@ 0x291
 800968e:	4911      	ldr	r1, [pc, #68]	@ (80096d4 <netconn_recv_data+0x18c>)
 8009690:	480e      	ldr	r0, [pc, #56]	@ (80096cc <netconn_recv_data+0x184>)
 8009692:	f00d f95b 	bl	801694c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	891b      	ldrh	r3, [r3, #8]
 800969c:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d005      	beq.n	80096b2 <netconn_recv_data+0x16a>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096aa:	8bfa      	ldrh	r2, [r7, #30]
 80096ac:	2101      	movs	r1, #1
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80096b2:	69ba      	ldr	r2, [r7, #24]
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3720      	adds	r7, #32
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	080178f4 	.word	0x080178f4
 80096c8:	08017b0c 	.word	0x08017b0c
 80096cc:	0801794c 	.word	0x0801794c
 80096d0:	08017b2c 	.word	0x08017b2c
 80096d4:	08017b48 	.word	0x08017b48

080096d8 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d005      	beq.n	80096f6 <netconn_tcp_recvd_msg+0x1e>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096f2:	2b10      	cmp	r3, #16
 80096f4:	d009      	beq.n	800970a <netconn_tcp_recvd_msg+0x32>
 80096f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009728 <netconn_tcp_recvd_msg+0x50>)
 80096f8:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80096fc:	490b      	ldr	r1, [pc, #44]	@ (800972c <netconn_tcp_recvd_msg+0x54>)
 80096fe:	480c      	ldr	r0, [pc, #48]	@ (8009730 <netconn_tcp_recvd_msg+0x58>)
 8009700:	f00d f924 	bl	801694c <iprintf>
 8009704:	f06f 030f 	mvn.w	r3, #15
 8009708:	e00a      	b.n	8009720 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	4806      	ldr	r0, [pc, #24]	@ (8009734 <netconn_tcp_recvd_msg+0x5c>)
 800971a:	f7ff fd4d 	bl	80091b8 <netconn_apimsg>
 800971e:	4603      	mov	r3, r0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	080178f4 	.word	0x080178f4
 800972c:	08017b54 	.word	0x08017b54
 8009730:	0801794c 	.word	0x0801794c
 8009734:	0800ad01 	.word	0x0800ad01

08009738 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b090      	sub	sp, #64	@ 0x40
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	4613      	mov	r3, r2
 8009744:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3310      	adds	r3, #16
 800974a:	4618      	mov	r0, r3
 800974c:	f00c fed6 	bl	80164fc <sys_mbox_valid>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d102      	bne.n	800975c <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8009756:	f06f 030a 	mvn.w	r3, #10
 800975a:	e06d      	b.n	8009838 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	7f1b      	ldrb	r3, [r3, #28]
 8009760:	b25b      	sxtb	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	da07      	bge.n	8009776 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	7f1b      	ldrb	r3, [r3, #28]
 800976a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800976e:	b2da      	uxtb	r2, r3
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009774:	e039      	b.n	80097ea <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009776:	79fb      	ldrb	r3, [r7, #7]
 8009778:	461a      	mov	r2, r3
 800977a:	68b9      	ldr	r1, [r7, #8]
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f7ff fee3 	bl	8009548 <netconn_recv_data>
 8009782:	4603      	mov	r3, r0
 8009784:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8009788:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800978c:	2b00      	cmp	r3, #0
 800978e:	d002      	beq.n	8009796 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009790:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009794:	e050      	b.n	8009838 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	f003 0308 	and.w	r3, r3, #8
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10e      	bne.n	80097c4 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80097a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d002      	beq.n	80097b2 <netconn_recv_data_tcp+0x7a>
 80097ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ae:	891b      	ldrh	r3, [r3, #8]
 80097b0:	e000      	b.n	80097b4 <netconn_recv_data_tcp+0x7c>
 80097b2:	2301      	movs	r3, #1
 80097b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80097b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80097b8:	f107 0214 	add.w	r2, r7, #20
 80097bc:	4619      	mov	r1, r3
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f7ff ff8a 	bl	80096d8 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80097c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d134      	bne.n	8009834 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80097ca:	79fb      	ldrb	r3, [r7, #7]
 80097cc:	f003 0310 	and.w	r3, r3, #16
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d009      	beq.n	80097e8 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	7f1b      	ldrb	r3, [r3, #28]
 80097d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80097e2:	f06f 0306 	mvn.w	r3, #6
 80097e6:	e027      	b.n	8009838 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80097e8:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d005      	beq.n	80097fe <netconn_recv_data_tcp+0xc6>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097f6:	2200      	movs	r2, #0
 80097f8:	2101      	movs	r1, #1
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10f      	bne.n	8009826 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f000 f9a3 	bl	8009b52 <netconn_err>
 800980c:	4603      	mov	r3, r0
 800980e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8009812:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <netconn_recv_data_tcp+0xe8>
          return err;
 800981a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800981e:	e00b      	b.n	8009838 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009820:	f06f 030d 	mvn.w	r3, #13
 8009824:	e008      	b.n	8009838 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009826:	2101      	movs	r1, #1
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f000 f955 	bl	8009ad8 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800982e:	f06f 030e 	mvn.w	r3, #14
 8009832:	e001      	b.n	8009838 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009834:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8009838:	4618      	mov	r0, r3
 800983a:	3740      	adds	r7, #64	@ 0x40
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800984a:	2300      	movs	r3, #0
 800984c:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d109      	bne.n	8009868 <netconn_recv+0x28>
 8009854:	4b32      	ldr	r3, [pc, #200]	@ (8009920 <netconn_recv+0xe0>)
 8009856:	f240 3263 	movw	r2, #867	@ 0x363
 800985a:	4932      	ldr	r1, [pc, #200]	@ (8009924 <netconn_recv+0xe4>)
 800985c:	4832      	ldr	r0, [pc, #200]	@ (8009928 <netconn_recv+0xe8>)
 800985e:	f00d f875 	bl	801694c <iprintf>
 8009862:	f06f 030f 	mvn.w	r3, #15
 8009866:	e056      	b.n	8009916 <netconn_recv+0xd6>
  *new_buf = NULL;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	2200      	movs	r2, #0
 800986c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d109      	bne.n	8009888 <netconn_recv+0x48>
 8009874:	4b2a      	ldr	r3, [pc, #168]	@ (8009920 <netconn_recv+0xe0>)
 8009876:	f240 3265 	movw	r2, #869	@ 0x365
 800987a:	492c      	ldr	r1, [pc, #176]	@ (800992c <netconn_recv+0xec>)
 800987c:	482a      	ldr	r0, [pc, #168]	@ (8009928 <netconn_recv+0xe8>)
 800987e:	f00d f865 	bl	801694c <iprintf>
 8009882:	f06f 030f 	mvn.w	r3, #15
 8009886:	e046      	b.n	8009916 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009890:	2b10      	cmp	r3, #16
 8009892:	d13a      	bne.n	800990a <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009894:	2300      	movs	r3, #0
 8009896:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009898:	2006      	movs	r0, #6
 800989a:	f002 fc2b 	bl	800c0f4 <memp_malloc>
 800989e:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d102      	bne.n	80098ac <netconn_recv+0x6c>
      return ERR_MEM;
 80098a6:	f04f 33ff 	mov.w	r3, #4294967295
 80098aa:	e034      	b.n	8009916 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80098ac:	f107 030c 	add.w	r3, r7, #12
 80098b0:	2200      	movs	r2, #0
 80098b2:	4619      	mov	r1, r3
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f7ff ff3f 	bl	8009738 <netconn_recv_data_tcp>
 80098ba:	4603      	mov	r3, r0
 80098bc:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80098be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d006      	beq.n	80098d4 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80098c6:	6979      	ldr	r1, [r7, #20]
 80098c8:	2006      	movs	r0, #6
 80098ca:	f002 fc89 	bl	800c1e0 <memp_free>
      return err;
 80098ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80098d2:	e020      	b.n	8009916 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d106      	bne.n	80098e8 <netconn_recv+0xa8>
 80098da:	4b11      	ldr	r3, [pc, #68]	@ (8009920 <netconn_recv+0xe0>)
 80098dc:	f240 3279 	movw	r2, #889	@ 0x379
 80098e0:	4913      	ldr	r1, [pc, #76]	@ (8009930 <netconn_recv+0xf0>)
 80098e2:	4811      	ldr	r0, [pc, #68]	@ (8009928 <netconn_recv+0xe8>)
 80098e4:	f00d f832 	bl	801694c <iprintf>

    buf->p = p;
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	2200      	movs	r2, #0
 80098f8:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	2200      	movs	r2, #0
 80098fe:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	e005      	b.n	8009916 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800990a:	2200      	movs	r2, #0
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f7ff fe1a 	bl	8009548 <netconn_recv_data>
 8009914:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8009916:	4618      	mov	r0, r3
 8009918:	3718      	adds	r7, #24
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	080178f4 	.word	0x080178f4
 8009924:	08017b0c 	.word	0x08017b0c
 8009928:	0801794c 	.word	0x0801794c
 800992c:	08017b2c 	.word	0x08017b2c
 8009930:	08017ba4 	.word	0x08017ba4

08009934 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b088      	sub	sp, #32
 8009938:	af02      	add	r7, sp, #8
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800994a:	78fa      	ldrb	r2, [r7, #3]
 800994c:	f107 0110 	add.w	r1, r7, #16
 8009950:	6a3b      	ldr	r3, [r7, #32]
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	4613      	mov	r3, r2
 8009956:	2201      	movs	r2, #1
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 f805 	bl	8009968 <netconn_write_vectors_partly>
 800995e:	4603      	mov	r3, r0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b092      	sub	sp, #72	@ 0x48
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	4611      	mov	r1, r2
 8009974:	461a      	mov	r2, r3
 8009976:	460b      	mov	r3, r1
 8009978:	80fb      	strh	r3, [r7, #6]
 800997a:	4613      	mov	r3, r2
 800997c:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d109      	bne.n	8009998 <netconn_write_vectors_partly+0x30>
 8009984:	4b4e      	ldr	r3, [pc, #312]	@ (8009ac0 <netconn_write_vectors_partly+0x158>)
 8009986:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800998a:	494e      	ldr	r1, [pc, #312]	@ (8009ac4 <netconn_write_vectors_partly+0x15c>)
 800998c:	484e      	ldr	r0, [pc, #312]	@ (8009ac8 <netconn_write_vectors_partly+0x160>)
 800998e:	f00c ffdd 	bl	801694c <iprintf>
 8009992:	f06f 030f 	mvn.w	r3, #15
 8009996:	e08e      	b.n	8009ab6 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80099a0:	2b10      	cmp	r3, #16
 80099a2:	d009      	beq.n	80099b8 <netconn_write_vectors_partly+0x50>
 80099a4:	4b46      	ldr	r3, [pc, #280]	@ (8009ac0 <netconn_write_vectors_partly+0x158>)
 80099a6:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 80099aa:	4948      	ldr	r1, [pc, #288]	@ (8009acc <netconn_write_vectors_partly+0x164>)
 80099ac:	4846      	ldr	r0, [pc, #280]	@ (8009ac8 <netconn_write_vectors_partly+0x160>)
 80099ae:	f00c ffcd 	bl	801694c <iprintf>
 80099b2:	f06f 0305 	mvn.w	r3, #5
 80099b6:	e07e      	b.n	8009ab6 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	7f1b      	ldrb	r3, [r3, #28]
 80099bc:	f003 0302 	and.w	r3, r3, #2
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d104      	bne.n	80099ce <netconn_write_vectors_partly+0x66>
 80099c4:	797b      	ldrb	r3, [r7, #5]
 80099c6:	f003 0304 	and.w	r3, r3, #4
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <netconn_write_vectors_partly+0x6a>
 80099ce:	2301      	movs	r3, #1
 80099d0:	e000      	b.n	80099d4 <netconn_write_vectors_partly+0x6c>
 80099d2:	2300      	movs	r3, #0
 80099d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80099d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d005      	beq.n	80099ec <netconn_write_vectors_partly+0x84>
 80099e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d102      	bne.n	80099ec <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80099e6:	f06f 0305 	mvn.w	r3, #5
 80099ea:	e064      	b.n	8009ab6 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80099ec:	2300      	movs	r3, #0
 80099ee:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 80099f0:	2300      	movs	r3, #0
 80099f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80099f4:	e015      	b.n	8009a22 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80099f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099f8:	00db      	lsls	r3, r3, #3
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	4413      	add	r3, r2
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a02:	4413      	add	r3, r2
 8009a04:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8009a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a08:	00db      	lsls	r3, r3, #3
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d202      	bcs.n	8009a1c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009a16:	f06f 0305 	mvn.w	r3, #5
 8009a1a:	e04c      	b.n	8009ab6 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a1e:	3301      	adds	r3, #1
 8009a20:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a22:	88fb      	ldrh	r3, [r7, #6]
 8009a24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a26:	429a      	cmp	r2, r3
 8009a28:	dbe5      	blt.n	80099f6 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009a2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	e040      	b.n	8009ab6 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	da0a      	bge.n	8009a50 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d102      	bne.n	8009a46 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009a40:	f06f 0305 	mvn.w	r3, #5
 8009a44:	e037      	b.n	8009ab6 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009a46:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8009a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a4e:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009a58:	88fb      	ldrh	r3, [r7, #6]
 8009a5a:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009a60:	797b      	ldrb	r3, [r7, #5]
 8009a62:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009a66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009a6e:	f107 0314 	add.w	r3, r7, #20
 8009a72:	4619      	mov	r1, r3
 8009a74:	4816      	ldr	r0, [pc, #88]	@ (8009ad0 <netconn_write_vectors_partly+0x168>)
 8009a76:	f7ff fb9f 	bl	80091b8 <netconn_apimsg>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8009a80:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d114      	bne.n	8009ab2 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d002      	beq.n	8009a94 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009a8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a92:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009a94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10a      	bne.n	8009ab2 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d006      	beq.n	8009ab2 <netconn_write_vectors_partly+0x14a>
 8009aa4:	4b06      	ldr	r3, [pc, #24]	@ (8009ac0 <netconn_write_vectors_partly+0x158>)
 8009aa6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009aaa:	490a      	ldr	r1, [pc, #40]	@ (8009ad4 <netconn_write_vectors_partly+0x16c>)
 8009aac:	4806      	ldr	r0, [pc, #24]	@ (8009ac8 <netconn_write_vectors_partly+0x160>)
 8009aae:	f00c ff4d 	bl	801694c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009ab2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3748      	adds	r7, #72	@ 0x48
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	080178f4 	.word	0x080178f4
 8009ac4:	08017bcc 	.word	0x08017bcc
 8009ac8:	0801794c 	.word	0x0801794c
 8009acc:	08017be8 	.word	0x08017be8
 8009ad0:	0800b105 	.word	0x0800b105
 8009ad4:	08017c0c 	.word	0x08017c0c

08009ad8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b08c      	sub	sp, #48	@ 0x30
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d109      	bne.n	8009afe <netconn_close_shutdown+0x26>
 8009aea:	4b0f      	ldr	r3, [pc, #60]	@ (8009b28 <netconn_close_shutdown+0x50>)
 8009aec:	f240 4247 	movw	r2, #1095	@ 0x447
 8009af0:	490e      	ldr	r1, [pc, #56]	@ (8009b2c <netconn_close_shutdown+0x54>)
 8009af2:	480f      	ldr	r0, [pc, #60]	@ (8009b30 <netconn_close_shutdown+0x58>)
 8009af4:	f00c ff2a 	bl	801694c <iprintf>
 8009af8:	f06f 030f 	mvn.w	r3, #15
 8009afc:	e010      	b.n	8009b20 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009b02:	78fb      	ldrb	r3, [r7, #3]
 8009b04:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009b06:	2329      	movs	r3, #41	@ 0x29
 8009b08:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009b0a:	f107 030c 	add.w	r3, r7, #12
 8009b0e:	4619      	mov	r1, r3
 8009b10:	4808      	ldr	r0, [pc, #32]	@ (8009b34 <netconn_close_shutdown+0x5c>)
 8009b12:	f7ff fb51 	bl	80091b8 <netconn_apimsg>
 8009b16:	4603      	mov	r3, r0
 8009b18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009b1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3730      	adds	r7, #48	@ 0x30
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	080178f4 	.word	0x080178f4
 8009b2c:	08017c30 	.word	0x08017c30
 8009b30:	0801794c 	.word	0x0801794c
 8009b34:	0800b21d 	.word	0x0800b21d

08009b38 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009b40:	2103      	movs	r1, #3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7ff ffc8 	bl	8009ad8 <netconn_close_shutdown>
 8009b48:	4603      	mov	r3, r0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b084      	sub	sp, #16
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <netconn_err+0x12>
    return ERR_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	e00d      	b.n	8009b80 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009b64:	f00c fdd4 	bl	8016710 <sys_arch_protect>
 8009b68:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	7a1b      	ldrb	r3, [r3, #8]
 8009b6e:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f00c fdd8 	bl	801672c <sys_arch_unprotect>
  return err;
 8009b7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b96:	f113 0f0d 	cmn.w	r3, #13
 8009b9a:	d009      	beq.n	8009bb0 <lwip_netconn_err_to_msg+0x28>
 8009b9c:	f113 0f0d 	cmn.w	r3, #13
 8009ba0:	dc0c      	bgt.n	8009bbc <lwip_netconn_err_to_msg+0x34>
 8009ba2:	f113 0f0f 	cmn.w	r3, #15
 8009ba6:	d007      	beq.n	8009bb8 <lwip_netconn_err_to_msg+0x30>
 8009ba8:	f113 0f0e 	cmn.w	r3, #14
 8009bac:	d002      	beq.n	8009bb4 <lwip_netconn_err_to_msg+0x2c>
 8009bae:	e005      	b.n	8009bbc <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8009bdc <lwip_netconn_err_to_msg+0x54>)
 8009bb2:	e00e      	b.n	8009bd2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8009be0 <lwip_netconn_err_to_msg+0x58>)
 8009bb6:	e00c      	b.n	8009bd2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8009be4 <lwip_netconn_err_to_msg+0x5c>)
 8009bba:	e00a      	b.n	8009bd2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d005      	beq.n	8009bd0 <lwip_netconn_err_to_msg+0x48>
 8009bc4:	4b08      	ldr	r3, [pc, #32]	@ (8009be8 <lwip_netconn_err_to_msg+0x60>)
 8009bc6:	227d      	movs	r2, #125	@ 0x7d
 8009bc8:	4908      	ldr	r1, [pc, #32]	@ (8009bec <lwip_netconn_err_to_msg+0x64>)
 8009bca:	4809      	ldr	r0, [pc, #36]	@ (8009bf0 <lwip_netconn_err_to_msg+0x68>)
 8009bcc:	f00c febe 	bl	801694c <iprintf>
      return NULL;
 8009bd0:	2300      	movs	r3, #0
  }
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	0801ae0c 	.word	0x0801ae0c
 8009be0:	0801ae0d 	.word	0x0801ae0d
 8009be4:	0801ae0e 	.word	0x0801ae0e
 8009be8:	08017c4c 	.word	0x08017c4c
 8009bec:	08017c80 	.word	0x08017c80
 8009bf0:	08017c90 	.word	0x08017c90

08009bf4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d105      	bne.n	8009c10 <lwip_netconn_is_err_msg+0x1c>
 8009c04:	4b12      	ldr	r3, [pc, #72]	@ (8009c50 <lwip_netconn_is_err_msg+0x5c>)
 8009c06:	2285      	movs	r2, #133	@ 0x85
 8009c08:	4912      	ldr	r1, [pc, #72]	@ (8009c54 <lwip_netconn_is_err_msg+0x60>)
 8009c0a:	4813      	ldr	r0, [pc, #76]	@ (8009c58 <lwip_netconn_is_err_msg+0x64>)
 8009c0c:	f00c fe9e 	bl	801694c <iprintf>

  if (msg == &netconn_aborted) {
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a12      	ldr	r2, [pc, #72]	@ (8009c5c <lwip_netconn_is_err_msg+0x68>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d104      	bne.n	8009c22 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	22f3      	movs	r2, #243	@ 0xf3
 8009c1c:	701a      	strb	r2, [r3, #0]
    return 1;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e012      	b.n	8009c48 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a0e      	ldr	r2, [pc, #56]	@ (8009c60 <lwip_netconn_is_err_msg+0x6c>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d104      	bne.n	8009c34 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	22f2      	movs	r2, #242	@ 0xf2
 8009c2e:	701a      	strb	r2, [r3, #0]
    return 1;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e009      	b.n	8009c48 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a0b      	ldr	r2, [pc, #44]	@ (8009c64 <lwip_netconn_is_err_msg+0x70>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d104      	bne.n	8009c46 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	22f1      	movs	r2, #241	@ 0xf1
 8009c40:	701a      	strb	r2, [r3, #0]
    return 1;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e000      	b.n	8009c48 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	08017c4c 	.word	0x08017c4c
 8009c54:	08017cb8 	.word	0x08017cb8
 8009c58:	08017c90 	.word	0x08017c90
 8009c5c:	0801ae0c 	.word	0x0801ae0c
 8009c60:	0801ae0d 	.word	0x0801ae0d
 8009c64:	0801ae0e 	.word	0x0801ae0e

08009c68 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b088      	sub	sp, #32
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
 8009c74:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d105      	bne.n	8009c88 <recv_udp+0x20>
 8009c7c:	4b34      	ldr	r3, [pc, #208]	@ (8009d50 <recv_udp+0xe8>)
 8009c7e:	22e5      	movs	r2, #229	@ 0xe5
 8009c80:	4934      	ldr	r1, [pc, #208]	@ (8009d54 <recv_udp+0xec>)
 8009c82:	4835      	ldr	r0, [pc, #212]	@ (8009d58 <recv_udp+0xf0>)
 8009c84:	f00c fe62 	bl	801694c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d105      	bne.n	8009c9a <recv_udp+0x32>
 8009c8e:	4b30      	ldr	r3, [pc, #192]	@ (8009d50 <recv_udp+0xe8>)
 8009c90:	22e6      	movs	r2, #230	@ 0xe6
 8009c92:	4932      	ldr	r1, [pc, #200]	@ (8009d5c <recv_udp+0xf4>)
 8009c94:	4830      	ldr	r0, [pc, #192]	@ (8009d58 <recv_udp+0xf0>)
 8009c96:	f00c fe59 	bl	801694c <iprintf>
  conn = (struct netconn *)arg;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d103      	bne.n	8009cac <recv_udp+0x44>
    pbuf_free(p);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f003 f93f 	bl	800cf28 <pbuf_free>
    return;
 8009caa:	e04d      	b.n	8009d48 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	68ba      	ldr	r2, [r7, #8]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d005      	beq.n	8009cc2 <recv_udp+0x5a>
 8009cb6:	4b26      	ldr	r3, [pc, #152]	@ (8009d50 <recv_udp+0xe8>)
 8009cb8:	22ee      	movs	r2, #238	@ 0xee
 8009cba:	4929      	ldr	r1, [pc, #164]	@ (8009d60 <recv_udp+0xf8>)
 8009cbc:	4826      	ldr	r0, [pc, #152]	@ (8009d58 <recv_udp+0xf0>)
 8009cbe:	f00c fe45 	bl	801694c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	3310      	adds	r3, #16
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f00c fc18 	bl	80164fc <sys_mbox_valid>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d103      	bne.n	8009cda <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f003 f928 	bl	800cf28 <pbuf_free>
    return;
 8009cd8:	e036      	b.n	8009d48 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009cda:	2006      	movs	r0, #6
 8009cdc:	f002 fa0a 	bl	800c0f4 <memp_malloc>
 8009ce0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d103      	bne.n	8009cf0 <recv_udp+0x88>
    pbuf_free(p);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f003 f91d 	bl	800cf28 <pbuf_free>
    return;
 8009cee:	e02b      	b.n	8009d48 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d002      	beq.n	8009d08 <recv_udp+0xa0>
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	e000      	b.n	8009d0a <recv_udp+0xa2>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	69ba      	ldr	r2, [r7, #24]
 8009d0c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009d12:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	891b      	ldrh	r3, [r3, #8]
 8009d18:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	3310      	adds	r3, #16
 8009d1e:	69b9      	ldr	r1, [r7, #24]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f00c fb89 	bl	8016438 <sys_mbox_trypost>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009d2c:	69b8      	ldr	r0, [r7, #24]
 8009d2e:	f001 fb01 	bl	800b334 <netbuf_delete>
    return;
 8009d32:	e009      	b.n	8009d48 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d005      	beq.n	8009d48 <recv_udp+0xe0>
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d40:	8afa      	ldrh	r2, [r7, #22]
 8009d42:	2100      	movs	r1, #0
 8009d44:	69f8      	ldr	r0, [r7, #28]
 8009d46:	4798      	blx	r3
  }
}
 8009d48:	3720      	adds	r7, #32
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	08017c4c 	.word	0x08017c4c
 8009d54:	08017cc4 	.word	0x08017cc4
 8009d58:	08017c90 	.word	0x08017c90
 8009d5c:	08017ce8 	.word	0x08017ce8
 8009d60:	08017d08 	.word	0x08017d08

08009d64 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b088      	sub	sp, #32
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
 8009d70:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d106      	bne.n	8009d86 <recv_tcp+0x22>
 8009d78:	4b36      	ldr	r3, [pc, #216]	@ (8009e54 <recv_tcp+0xf0>)
 8009d7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009d7e:	4936      	ldr	r1, [pc, #216]	@ (8009e58 <recv_tcp+0xf4>)
 8009d80:	4836      	ldr	r0, [pc, #216]	@ (8009e5c <recv_tcp+0xf8>)
 8009d82:	f00c fde3 	bl	801694c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d106      	bne.n	8009d9a <recv_tcp+0x36>
 8009d8c:	4b31      	ldr	r3, [pc, #196]	@ (8009e54 <recv_tcp+0xf0>)
 8009d8e:	f240 122d 	movw	r2, #301	@ 0x12d
 8009d92:	4933      	ldr	r1, [pc, #204]	@ (8009e60 <recv_tcp+0xfc>)
 8009d94:	4831      	ldr	r0, [pc, #196]	@ (8009e5c <recv_tcp+0xf8>)
 8009d96:	f00c fdd9 	bl	801694c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d006      	beq.n	8009db0 <recv_tcp+0x4c>
 8009da2:	4b2c      	ldr	r3, [pc, #176]	@ (8009e54 <recv_tcp+0xf0>)
 8009da4:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8009da8:	492e      	ldr	r1, [pc, #184]	@ (8009e64 <recv_tcp+0x100>)
 8009daa:	482c      	ldr	r0, [pc, #176]	@ (8009e5c <recv_tcp+0xf8>)
 8009dac:	f00c fdce 	bl	801694c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d102      	bne.n	8009dc0 <recv_tcp+0x5c>
    return ERR_VAL;
 8009dba:	f06f 0305 	mvn.w	r3, #5
 8009dbe:	e045      	b.n	8009e4c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d006      	beq.n	8009dd8 <recv_tcp+0x74>
 8009dca:	4b22      	ldr	r3, [pc, #136]	@ (8009e54 <recv_tcp+0xf0>)
 8009dcc:	f240 1235 	movw	r2, #309	@ 0x135
 8009dd0:	4925      	ldr	r1, [pc, #148]	@ (8009e68 <recv_tcp+0x104>)
 8009dd2:	4822      	ldr	r0, [pc, #136]	@ (8009e5c <recv_tcp+0xf8>)
 8009dd4:	f00c fdba 	bl	801694c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	3310      	adds	r3, #16
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f00c fb8d 	bl	80164fc <sys_mbox_valid>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10d      	bne.n	8009e04 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d008      	beq.n	8009e00 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	891b      	ldrh	r3, [r3, #8]
 8009df2:	4619      	mov	r1, r3
 8009df4:	68b8      	ldr	r0, [r7, #8]
 8009df6:	f004 f84f 	bl	800de98 <tcp_recved>
      pbuf_free(p);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f003 f894 	bl	800cf28 <pbuf_free>
    }
    return ERR_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	e023      	b.n	8009e4c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d005      	beq.n	8009e16 <recv_tcp+0xb2>
    msg = p;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	891b      	ldrh	r3, [r3, #8]
 8009e12:	83fb      	strh	r3, [r7, #30]
 8009e14:	e003      	b.n	8009e1e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009e16:	4b15      	ldr	r3, [pc, #84]	@ (8009e6c <recv_tcp+0x108>)
 8009e18:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	3310      	adds	r3, #16
 8009e22:	69b9      	ldr	r1, [r7, #24]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f00c fb07 	bl	8016438 <sys_mbox_trypost>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d002      	beq.n	8009e36 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009e30:	f04f 33ff 	mov.w	r3, #4294967295
 8009e34:	e00a      	b.n	8009e4c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d005      	beq.n	8009e4a <recv_tcp+0xe6>
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e42:	8bfa      	ldrh	r2, [r7, #30]
 8009e44:	2100      	movs	r1, #0
 8009e46:	6978      	ldr	r0, [r7, #20]
 8009e48:	4798      	blx	r3
  }

  return ERR_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3720      	adds	r7, #32
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	08017c4c 	.word	0x08017c4c
 8009e58:	08017d28 	.word	0x08017d28
 8009e5c:	08017c90 	.word	0x08017c90
 8009e60:	08017d4c 	.word	0x08017d4c
 8009e64:	08017d6c 	.word	0x08017d6c
 8009e68:	08017d84 	.word	0x08017d84
 8009e6c:	0801ae0e 	.word	0x0801ae0e

08009e70 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d106      	bne.n	8009e92 <poll_tcp+0x22>
 8009e84:	4b29      	ldr	r3, [pc, #164]	@ (8009f2c <poll_tcp+0xbc>)
 8009e86:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8009e8a:	4929      	ldr	r1, [pc, #164]	@ (8009f30 <poll_tcp+0xc0>)
 8009e8c:	4829      	ldr	r0, [pc, #164]	@ (8009f34 <poll_tcp+0xc4>)
 8009e8e:	f00c fd5d 	bl	801694c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	785b      	ldrb	r3, [r3, #1]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d104      	bne.n	8009ea4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009e9a:	2101      	movs	r1, #1
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f000 ff65 	bl	800ad6c <lwip_netconn_do_writemore>
 8009ea2:	e016      	b.n	8009ed2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	785b      	ldrb	r3, [r3, #1]
 8009ea8:	2b04      	cmp	r3, #4
 8009eaa:	d112      	bne.n	8009ed2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00a      	beq.n	8009eca <poll_tcp+0x5a>
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6a1b      	ldr	r3, [r3, #32]
 8009eb8:	7a5b      	ldrb	r3, [r3, #9]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d005      	beq.n	8009eca <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	7a5a      	ldrb	r2, [r3, #9]
 8009ec4:	3a01      	subs	r2, #1
 8009ec6:	b2d2      	uxtb	r2, r2
 8009ec8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009eca:	2101      	movs	r1, #1
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f000 fbf7 	bl	800a6c0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	7f1b      	ldrb	r3, [r3, #28]
 8009ed6:	f003 0310 	and.w	r3, r3, #16
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d021      	beq.n	8009f22 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d01d      	beq.n	8009f22 <poll_tcp+0xb2>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009eee:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009ef2:	d316      	bcc.n	8009f22 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009efc:	2b04      	cmp	r3, #4
 8009efe:	d810      	bhi.n	8009f22 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	7f1b      	ldrb	r3, [r3, #28]
 8009f04:	f023 0310 	bic.w	r3, r3, #16
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d005      	beq.n	8009f22 <poll_tcp+0xb2>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	2102      	movs	r1, #2
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	08017c4c 	.word	0x08017c4c
 8009f30:	08017da4 	.word	0x08017da4
 8009f34:	08017c90 	.word	0x08017c90

08009f38 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	4613      	mov	r3, r2
 8009f44:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d106      	bne.n	8009f5e <sent_tcp+0x26>
 8009f50:	4b20      	ldr	r3, [pc, #128]	@ (8009fd4 <sent_tcp+0x9c>)
 8009f52:	f240 1293 	movw	r2, #403	@ 0x193
 8009f56:	4920      	ldr	r1, [pc, #128]	@ (8009fd8 <sent_tcp+0xa0>)
 8009f58:	4820      	ldr	r0, [pc, #128]	@ (8009fdc <sent_tcp+0xa4>)
 8009f5a:	f00c fcf7 	bl	801694c <iprintf>

  if (conn) {
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d032      	beq.n	8009fca <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	785b      	ldrb	r3, [r3, #1]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d104      	bne.n	8009f76 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009f6c:	2101      	movs	r1, #1
 8009f6e:	6978      	ldr	r0, [r7, #20]
 8009f70:	f000 fefc 	bl	800ad6c <lwip_netconn_do_writemore>
 8009f74:	e007      	b.n	8009f86 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	785b      	ldrb	r3, [r3, #1]
 8009f7a:	2b04      	cmp	r3, #4
 8009f7c:	d103      	bne.n	8009f86 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009f7e:	2101      	movs	r1, #1
 8009f80:	6978      	ldr	r0, [r7, #20]
 8009f82:	f000 fb9d 	bl	800a6c0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d01d      	beq.n	8009fca <sent_tcp+0x92>
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009f96:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009f9a:	d316      	bcc.n	8009fca <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009fa4:	2b04      	cmp	r3, #4
 8009fa6:	d810      	bhi.n	8009fca <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	7f1b      	ldrb	r3, [r3, #28]
 8009fac:	f023 0310 	bic.w	r3, r3, #16
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d005      	beq.n	8009fca <sent_tcp+0x92>
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc2:	88fa      	ldrh	r2, [r7, #6]
 8009fc4:	2102      	movs	r1, #2
 8009fc6:	6978      	ldr	r0, [r7, #20]
 8009fc8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	08017c4c 	.word	0x08017c4c
 8009fd8:	08017da4 	.word	0x08017da4
 8009fdc:	08017c90 	.word	0x08017c90

08009fe0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b088      	sub	sp, #32
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d106      	bne.n	800a004 <err_tcp+0x24>
 8009ff6:	4b5f      	ldr	r3, [pc, #380]	@ (800a174 <err_tcp+0x194>)
 8009ff8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8009ffc:	495e      	ldr	r1, [pc, #376]	@ (800a178 <err_tcp+0x198>)
 8009ffe:	485f      	ldr	r0, [pc, #380]	@ (800a17c <err_tcp+0x19c>)
 800a000:	f00c fca4 	bl	801694c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a004:	f00c fb84 	bl	8016710 <sys_arch_protect>
 800a008:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	2200      	movs	r2, #0
 800a00e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	78fa      	ldrb	r2, [r7, #3]
 800a014:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	7f1b      	ldrb	r3, [r3, #28]
 800a01a:	f043 0301 	orr.w	r3, r3, #1
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	785b      	ldrb	r3, [r3, #1]
 800a028:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	2200      	movs	r2, #0
 800a02e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a030:	69b8      	ldr	r0, [r7, #24]
 800a032:	f00c fb7b 	bl	801672c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d005      	beq.n	800a04a <err_tcp+0x6a>
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a042:	2200      	movs	r2, #0
 800a044:	2104      	movs	r1, #4
 800a046:	69f8      	ldr	r0, [r7, #28]
 800a048:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d005      	beq.n	800a05e <err_tcp+0x7e>
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a056:	2200      	movs	r2, #0
 800a058:	2100      	movs	r1, #0
 800a05a:	69f8      	ldr	r0, [r7, #28]
 800a05c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a062:	2b00      	cmp	r3, #0
 800a064:	d005      	beq.n	800a072 <err_tcp+0x92>
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a06a:	2200      	movs	r2, #0
 800a06c:	2102      	movs	r1, #2
 800a06e:	69f8      	ldr	r0, [r7, #28]
 800a070:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a076:	4618      	mov	r0, r3
 800a078:	f7ff fd86 	bl	8009b88 <lwip_netconn_err_to_msg>
 800a07c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	3310      	adds	r3, #16
 800a082:	4618      	mov	r0, r3
 800a084:	f00c fa3a 	bl	80164fc <sys_mbox_valid>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d005      	beq.n	800a09a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	3310      	adds	r3, #16
 800a092:	6939      	ldr	r1, [r7, #16]
 800a094:	4618      	mov	r0, r3
 800a096:	f00c f9cf 	bl	8016438 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	3314      	adds	r3, #20
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f00c fa2c 	bl	80164fc <sys_mbox_valid>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d005      	beq.n	800a0b6 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	3314      	adds	r3, #20
 800a0ae:	6939      	ldr	r1, [r7, #16]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f00c f9c1 	bl	8016438 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a0b6:	7dfb      	ldrb	r3, [r7, #23]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d005      	beq.n	800a0c8 <err_tcp+0xe8>
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	d002      	beq.n	800a0c8 <err_tcp+0xe8>
 800a0c2:	7dfb      	ldrb	r3, [r7, #23]
 800a0c4:	2b03      	cmp	r3, #3
 800a0c6:	d143      	bne.n	800a150 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	7f1b      	ldrb	r3, [r3, #28]
 800a0cc:	f003 0304 	and.w	r3, r3, #4
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	bf14      	ite	ne
 800a0d4:	2301      	movne	r3, #1
 800a0d6:	2300      	moveq	r3, #0
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	7f1b      	ldrb	r3, [r3, #28]
 800a0e0:	f023 0304 	bic.w	r3, r3, #4
 800a0e4:	b2da      	uxtb	r2, r3
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d13b      	bne.n	800a168 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	6a1b      	ldr	r3, [r3, #32]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d106      	bne.n	800a106 <err_tcp+0x126>
 800a0f8:	4b1e      	ldr	r3, [pc, #120]	@ (800a174 <err_tcp+0x194>)
 800a0fa:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a0fe:	4920      	ldr	r1, [pc, #128]	@ (800a180 <err_tcp+0x1a0>)
 800a100:	481e      	ldr	r0, [pc, #120]	@ (800a17c <err_tcp+0x19c>)
 800a102:	f00c fc23 	bl	801694c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a106:	7dfb      	ldrb	r3, [r7, #23]
 800a108:	2b04      	cmp	r3, #4
 800a10a:	d104      	bne.n	800a116 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	2200      	movs	r2, #0
 800a112:	711a      	strb	r2, [r3, #4]
 800a114:	e003      	b.n	800a11e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	78fa      	ldrb	r2, [r7, #3]
 800a11c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	6a1b      	ldr	r3, [r3, #32]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	330c      	adds	r3, #12
 800a126:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a128:	68b8      	ldr	r0, [r7, #8]
 800a12a:	f00c fa75 	bl	8016618 <sys_sem_valid>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d106      	bne.n	800a142 <err_tcp+0x162>
 800a134:	4b0f      	ldr	r3, [pc, #60]	@ (800a174 <err_tcp+0x194>)
 800a136:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800a13a:	4912      	ldr	r1, [pc, #72]	@ (800a184 <err_tcp+0x1a4>)
 800a13c:	480f      	ldr	r0, [pc, #60]	@ (800a17c <err_tcp+0x19c>)
 800a13e:	f00c fc05 	bl	801694c <iprintf>
      conn->current_msg = NULL;
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	2200      	movs	r2, #0
 800a146:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a148:	68b8      	ldr	r0, [r7, #8]
 800a14a:	f00c fa4b 	bl	80165e4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a14e:	e00b      	b.n	800a168 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	6a1b      	ldr	r3, [r3, #32]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d008      	beq.n	800a16a <err_tcp+0x18a>
 800a158:	4b06      	ldr	r3, [pc, #24]	@ (800a174 <err_tcp+0x194>)
 800a15a:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800a15e:	490a      	ldr	r1, [pc, #40]	@ (800a188 <err_tcp+0x1a8>)
 800a160:	4806      	ldr	r0, [pc, #24]	@ (800a17c <err_tcp+0x19c>)
 800a162:	f00c fbf3 	bl	801694c <iprintf>
  }
}
 800a166:	e000      	b.n	800a16a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a168:	bf00      	nop
}
 800a16a:	bf00      	nop
 800a16c:	3720      	adds	r7, #32
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	08017c4c 	.word	0x08017c4c
 800a178:	08017da4 	.word	0x08017da4
 800a17c:	08017c90 	.word	0x08017c90
 800a180:	08017db4 	.word	0x08017db4
 800a184:	08017dd0 	.word	0x08017dd0
 800a188:	08017dec 	.word	0x08017dec

0800a18c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a19a:	6879      	ldr	r1, [r7, #4]
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f004 fd43 	bl	800ec28 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a1a2:	490a      	ldr	r1, [pc, #40]	@ (800a1cc <setup_tcp+0x40>)
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f004 fd51 	bl	800ec4c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a1aa:	4909      	ldr	r1, [pc, #36]	@ (800a1d0 <setup_tcp+0x44>)
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f004 fd6f 	bl	800ec90 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	4907      	ldr	r1, [pc, #28]	@ (800a1d4 <setup_tcp+0x48>)
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f004 fdc6 	bl	800ed48 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a1bc:	4906      	ldr	r1, [pc, #24]	@ (800a1d8 <setup_tcp+0x4c>)
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f004 fd88 	bl	800ecd4 <tcp_err>
}
 800a1c4:	bf00      	nop
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	08009d65 	.word	0x08009d65
 800a1d0:	08009f39 	.word	0x08009f39
 800a1d4:	08009e71 	.word	0x08009e71
 800a1d8:	08009fe1 	.word	0x08009fe1

0800a1dc <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800a1dc:	b590      	push	{r4, r7, lr}
 800a1de:	b089      	sub	sp, #36	@ 0x24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d102      	bne.n	800a1fa <accept_function+0x1e>
    return ERR_VAL;
 800a1f4:	f06f 0305 	mvn.w	r3, #5
 800a1f8:	e0a1      	b.n	800a33e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	3314      	adds	r3, #20
 800a1fe:	4618      	mov	r0, r3
 800a200:	f00c f97c 	bl	80164fc <sys_mbox_valid>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d102      	bne.n	800a210 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800a20a:	f06f 0305 	mvn.w	r3, #5
 800a20e:	e096      	b.n	800a33e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d11b      	bne.n	800a24e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	f103 0414 	add.w	r4, r3, #20
 800a21c:	f06f 000c 	mvn.w	r0, #12
 800a220:	f7ff fcb2 	bl	8009b88 <lwip_netconn_err_to_msg>
 800a224:	4603      	mov	r3, r0
 800a226:	4619      	mov	r1, r3
 800a228:	4620      	mov	r0, r4
 800a22a:	f00c f905 	bl	8016438 <sys_mbox_trypost>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d109      	bne.n	800a248 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d005      	beq.n	800a248 <accept_function+0x6c>
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a240:	2200      	movs	r2, #0
 800a242:	2100      	movs	r1, #0
 800a244:	69f8      	ldr	r0, [r7, #28]
 800a246:	4798      	blx	r3
    }
    return ERR_VAL;
 800a248:	f06f 0305 	mvn.w	r3, #5
 800a24c:	e077      	b.n	800a33e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800a24e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d006      	beq.n	800a264 <accept_function+0x88>
 800a256:	4b3c      	ldr	r3, [pc, #240]	@ (800a348 <accept_function+0x16c>)
 800a258:	f240 222a 	movw	r2, #554	@ 0x22a
 800a25c:	493b      	ldr	r1, [pc, #236]	@ (800a34c <accept_function+0x170>)
 800a25e:	483c      	ldr	r0, [pc, #240]	@ (800a350 <accept_function+0x174>)
 800a260:	f00c fb74 	bl	801694c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	781a      	ldrb	r2, [r3, #0]
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a26c:	4619      	mov	r1, r3
 800a26e:	4610      	mov	r0, r2
 800a270:	f000 f8f0 	bl	800a454 <netconn_alloc>
 800a274:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d11b      	bne.n	800a2b4 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	f103 0414 	add.w	r4, r3, #20
 800a282:	f06f 000c 	mvn.w	r0, #12
 800a286:	f7ff fc7f 	bl	8009b88 <lwip_netconn_err_to_msg>
 800a28a:	4603      	mov	r3, r0
 800a28c:	4619      	mov	r1, r3
 800a28e:	4620      	mov	r0, r4
 800a290:	f00c f8d2 	bl	8016438 <sys_mbox_trypost>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d109      	bne.n	800a2ae <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d005      	beq.n	800a2ae <accept_function+0xd2>
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	69f8      	ldr	r0, [r7, #28]
 800a2ac:	4798      	blx	r3
    }
    return ERR_MEM;
 800a2ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b2:	e044      	b.n	800a33e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800a2ba:	69b8      	ldr	r0, [r7, #24]
 800a2bc:	f7ff ff66 	bl	800a18c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	3314      	adds	r3, #20
 800a2c4:	69b9      	ldr	r1, [r7, #24]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f00c f8b6 	bl	8016438 <sys_mbox_trypost>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d02a      	beq.n	800a328 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800a2d8:	2100      	movs	r1, #0
 800a2da:	6978      	ldr	r0, [r7, #20]
 800a2dc:	f004 fca4 	bl	800ec28 <tcp_arg>
    tcp_recv(pcb, NULL);
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	6978      	ldr	r0, [r7, #20]
 800a2e4:	f004 fcb2 	bl	800ec4c <tcp_recv>
    tcp_sent(pcb, NULL);
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	6978      	ldr	r0, [r7, #20]
 800a2ec:	f004 fcd0 	bl	800ec90 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	6978      	ldr	r0, [r7, #20]
 800a2f6:	f004 fd27 	bl	800ed48 <tcp_poll>
    tcp_err(pcb, NULL);
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	6978      	ldr	r0, [r7, #20]
 800a2fe:	f004 fce9 	bl	800ecd4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	2200      	movs	r2, #0
 800a306:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	3310      	adds	r3, #16
 800a30c:	4618      	mov	r0, r3
 800a30e:	f00c f881 	bl	8016414 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	3310      	adds	r3, #16
 800a316:	4618      	mov	r0, r3
 800a318:	f00c f901 	bl	801651e <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a31c:	69b8      	ldr	r0, [r7, #24]
 800a31e:	f000 f907 	bl	800a530 <netconn_free>
    return ERR_MEM;
 800a322:	f04f 33ff 	mov.w	r3, #4294967295
 800a326:	e00a      	b.n	800a33e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d005      	beq.n	800a33c <accept_function+0x160>
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a334:	2200      	movs	r2, #0
 800a336:	2100      	movs	r1, #0
 800a338:	69f8      	ldr	r0, [r7, #28]
 800a33a:	4798      	blx	r3
  }

  return ERR_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3724      	adds	r7, #36	@ 0x24
 800a342:	46bd      	mov	sp, r7
 800a344:	bd90      	pop	{r4, r7, pc}
 800a346:	bf00      	nop
 800a348:	08017c4c 	.word	0x08017c4c
 800a34c:	08017e08 	.word	0x08017e08
 800a350:	08017c90 	.word	0x08017c90

0800a354 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a354:	b590      	push	{r4, r7, lr}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a35c:	2300      	movs	r3, #0
 800a35e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d006      	beq.n	800a378 <pcb_new+0x24>
 800a36a:	4b2b      	ldr	r3, [pc, #172]	@ (800a418 <pcb_new+0xc4>)
 800a36c:	f240 2265 	movw	r2, #613	@ 0x265
 800a370:	492a      	ldr	r1, [pc, #168]	@ (800a41c <pcb_new+0xc8>)
 800a372:	482b      	ldr	r0, [pc, #172]	@ (800a420 <pcb_new+0xcc>)
 800a374:	f00c faea 	bl	801694c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a382:	2b10      	cmp	r3, #16
 800a384:	d022      	beq.n	800a3cc <pcb_new+0x78>
 800a386:	2b20      	cmp	r3, #32
 800a388:	d133      	bne.n	800a3f2 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681c      	ldr	r4, [r3, #0]
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
 800a390:	4618      	mov	r0, r3
 800a392:	f009 fd22 	bl	8013dda <udp_new_ip_type>
 800a396:	4603      	mov	r3, r0
 800a398:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d02a      	beq.n	800a3fa <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	2b22      	cmp	r3, #34	@ 0x22
 800a3ac:	d104      	bne.n	800a3b8 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6858      	ldr	r0, [r3, #4]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	4917      	ldr	r1, [pc, #92]	@ (800a424 <pcb_new+0xd0>)
 800a3c6:	f009 fc8f 	bl	8013ce8 <udp_recv>
      }
      break;
 800a3ca:	e016      	b.n	800a3fa <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681c      	ldr	r4, [r3, #0]
 800a3d0:	7bfb      	ldrb	r3, [r7, #15]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f004 fc1a 	bl	800ec0c <tcp_new_ip_type>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00b      	beq.n	800a3fe <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7ff fece 	bl	800a18c <setup_tcp>
      }
      break;
 800a3f0:	e005      	b.n	800a3fe <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	22fa      	movs	r2, #250	@ 0xfa
 800a3f6:	711a      	strb	r2, [r3, #4]
      return;
 800a3f8:	e00a      	b.n	800a410 <pcb_new+0xbc>
      break;
 800a3fa:	bf00      	nop
 800a3fc:	e000      	b.n	800a400 <pcb_new+0xac>
      break;
 800a3fe:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d102      	bne.n	800a410 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	22ff      	movs	r2, #255	@ 0xff
 800a40e:	711a      	strb	r2, [r3, #4]
  }
}
 800a410:	3714      	adds	r7, #20
 800a412:	46bd      	mov	sp, r7
 800a414:	bd90      	pop	{r4, r7, pc}
 800a416:	bf00      	nop
 800a418:	08017c4c 	.word	0x08017c4c
 800a41c:	08017e30 	.word	0x08017e30
 800a420:	08017c90 	.word	0x08017c90
 800a424:	08009c69 	.word	0x08009c69

0800a428 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d102      	bne.n	800a44a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f7ff ff85 	bl	800a354 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a44a:	bf00      	nop
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
	...

0800a454 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b086      	sub	sp, #24
 800a458:	af00      	add	r7, sp, #0
 800a45a:	4603      	mov	r3, r0
 800a45c:	6039      	str	r1, [r7, #0]
 800a45e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a460:	2300      	movs	r3, #0
 800a462:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a464:	2007      	movs	r0, #7
 800a466:	f001 fe45 	bl	800c0f4 <memp_malloc>
 800a46a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d101      	bne.n	800a476 <netconn_alloc+0x22>
    return NULL;
 800a472:	2300      	movs	r3, #0
 800a474:	e052      	b.n	800a51c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	79fa      	ldrb	r2, [r7, #7]
 800a480:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a488:	79fb      	ldrb	r3, [r7, #7]
 800a48a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a48e:	2b10      	cmp	r3, #16
 800a490:	d004      	beq.n	800a49c <netconn_alloc+0x48>
 800a492:	2b20      	cmp	r3, #32
 800a494:	d105      	bne.n	800a4a2 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a496:	2306      	movs	r3, #6
 800a498:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a49a:	e00a      	b.n	800a4b2 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a49c:	2306      	movs	r3, #6
 800a49e:	617b      	str	r3, [r7, #20]
      break;
 800a4a0:	e007      	b.n	800a4b2 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a4a2:	4b20      	ldr	r3, [pc, #128]	@ (800a524 <netconn_alloc+0xd0>)
 800a4a4:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800a4a8:	491f      	ldr	r1, [pc, #124]	@ (800a528 <netconn_alloc+0xd4>)
 800a4aa:	4820      	ldr	r0, [pc, #128]	@ (800a52c <netconn_alloc+0xd8>)
 800a4ac:	f00c fa4e 	bl	801694c <iprintf>
      goto free_and_return;
 800a4b0:	e02f      	b.n	800a512 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3310      	adds	r3, #16
 800a4b6:	6979      	ldr	r1, [r7, #20]
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f00b ff91 	bl	80163e0 <sys_mbox_new>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d125      	bne.n	800a510 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	330c      	adds	r3, #12
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f00c f834 	bl	8016538 <sys_sem_new>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d005      	beq.n	800a4e2 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	3310      	adds	r3, #16
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f00b ff9a 	bl	8016414 <sys_mbox_free>
    goto free_and_return;
 800a4e0:	e017      	b.n	800a512 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	3314      	adds	r3, #20
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f00c f819 	bl	801651e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	683a      	ldr	r2, [r7, #0]
 800a4fe:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	7cfa      	ldrb	r2, [r7, #19]
 800a50a:	771a      	strb	r2, [r3, #28]
  return conn;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	e005      	b.n	800a51c <netconn_alloc+0xc8>
    goto free_and_return;
 800a510:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a512:	68f9      	ldr	r1, [r7, #12]
 800a514:	2007      	movs	r0, #7
 800a516:	f001 fe63 	bl	800c1e0 <memp_free>
  return NULL;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3718      	adds	r7, #24
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	08017c4c 	.word	0x08017c4c
 800a528:	08017e50 	.word	0x08017e50
 800a52c:	08017c90 	.word	0x08017c90

0800a530 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d006      	beq.n	800a54e <netconn_free+0x1e>
 800a540:	4b1b      	ldr	r3, [pc, #108]	@ (800a5b0 <netconn_free+0x80>)
 800a542:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a546:	491b      	ldr	r1, [pc, #108]	@ (800a5b4 <netconn_free+0x84>)
 800a548:	481b      	ldr	r0, [pc, #108]	@ (800a5b8 <netconn_free+0x88>)
 800a54a:	f00c f9ff 	bl	801694c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	3310      	adds	r3, #16
 800a552:	4618      	mov	r0, r3
 800a554:	f00b ffd2 	bl	80164fc <sys_mbox_valid>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d006      	beq.n	800a56c <netconn_free+0x3c>
 800a55e:	4b14      	ldr	r3, [pc, #80]	@ (800a5b0 <netconn_free+0x80>)
 800a560:	f240 3223 	movw	r2, #803	@ 0x323
 800a564:	4915      	ldr	r1, [pc, #84]	@ (800a5bc <netconn_free+0x8c>)
 800a566:	4814      	ldr	r0, [pc, #80]	@ (800a5b8 <netconn_free+0x88>)
 800a568:	f00c f9f0 	bl	801694c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	3314      	adds	r3, #20
 800a570:	4618      	mov	r0, r3
 800a572:	f00b ffc3 	bl	80164fc <sys_mbox_valid>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d006      	beq.n	800a58a <netconn_free+0x5a>
 800a57c:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b0 <netconn_free+0x80>)
 800a57e:	f240 3226 	movw	r2, #806	@ 0x326
 800a582:	490f      	ldr	r1, [pc, #60]	@ (800a5c0 <netconn_free+0x90>)
 800a584:	480c      	ldr	r0, [pc, #48]	@ (800a5b8 <netconn_free+0x88>)
 800a586:	f00c f9e1 	bl	801694c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	330c      	adds	r3, #12
 800a58e:	4618      	mov	r0, r3
 800a590:	f00c f835 	bl	80165fe <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	330c      	adds	r3, #12
 800a598:	4618      	mov	r0, r3
 800a59a:	f00c f84e 	bl	801663a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a59e:	6879      	ldr	r1, [r7, #4]
 800a5a0:	2007      	movs	r0, #7
 800a5a2:	f001 fe1d 	bl	800c1e0 <memp_free>
}
 800a5a6:	bf00      	nop
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	08017c4c 	.word	0x08017c4c
 800a5b4:	08017e78 	.word	0x08017e78
 800a5b8:	08017c90 	.word	0x08017c90
 800a5bc:	08017ea8 	.word	0x08017ea8
 800a5c0:	08017ee4 	.word	0x08017ee4

0800a5c4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	3310      	adds	r3, #16
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f00b ff93 	bl	80164fc <sys_mbox_valid>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d02f      	beq.n	800a63c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a5dc:	e018      	b.n	800a610 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5e6:	2b10      	cmp	r3, #16
 800a5e8:	d10e      	bne.n	800a608 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	f107 020f 	add.w	r2, r7, #15
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7ff fafe 	bl	8009bf4 <lwip_netconn_is_err_msg>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d108      	bne.n	800a610 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	4618      	mov	r0, r3
 800a602:	f002 fc91 	bl	800cf28 <pbuf_free>
 800a606:	e003      	b.n	800a610 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 fe92 	bl	800b334 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	3310      	adds	r3, #16
 800a614:	f107 0210 	add.w	r2, r7, #16
 800a618:	4611      	mov	r1, r2
 800a61a:	4618      	mov	r0, r3
 800a61c:	f00b ff57 	bl	80164ce <sys_arch_mbox_tryfetch>
 800a620:	4603      	mov	r3, r0
 800a622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a626:	d1da      	bne.n	800a5de <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	3310      	adds	r3, #16
 800a62c:	4618      	mov	r0, r3
 800a62e:	f00b fef1 	bl	8016414 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	3310      	adds	r3, #16
 800a636:	4618      	mov	r0, r3
 800a638:	f00b ff71 	bl	801651e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	3314      	adds	r3, #20
 800a640:	4618      	mov	r0, r3
 800a642:	f00b ff5b 	bl	80164fc <sys_mbox_valid>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d034      	beq.n	800a6b6 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a64c:	e01d      	b.n	800a68a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	f107 020e 	add.w	r2, r7, #14
 800a654:	4611      	mov	r1, r2
 800a656:	4618      	mov	r0, r3
 800a658:	f7ff facc 	bl	8009bf4 <lwip_netconn_is_err_msg>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d113      	bne.n	800a68a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a666:	6978      	ldr	r0, [r7, #20]
 800a668:	f7ff ffac 	bl	800a5c4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d007      	beq.n	800a684 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	4618      	mov	r0, r3
 800a67a:	f003 fa45 	bl	800db08 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	2200      	movs	r2, #0
 800a682:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a684:	6978      	ldr	r0, [r7, #20]
 800a686:	f7ff ff53 	bl	800a530 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	3314      	adds	r3, #20
 800a68e:	f107 0210 	add.w	r2, r7, #16
 800a692:	4611      	mov	r1, r2
 800a694:	4618      	mov	r0, r3
 800a696:	f00b ff1a 	bl	80164ce <sys_arch_mbox_tryfetch>
 800a69a:	4603      	mov	r3, r0
 800a69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a0:	d1d5      	bne.n	800a64e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3314      	adds	r3, #20
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f00b feb4 	bl	8016414 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	3314      	adds	r3, #20
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f00b ff34 	bl	801651e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a6b6:	bf00      	nop
 800a6b8:	3718      	adds	r7, #24
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
	...

0800a6c0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d106      	bne.n	800a6e4 <lwip_netconn_do_close_internal+0x24>
 800a6d6:	4b87      	ldr	r3, [pc, #540]	@ (800a8f4 <lwip_netconn_do_close_internal+0x234>)
 800a6d8:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800a6dc:	4986      	ldr	r1, [pc, #536]	@ (800a8f8 <lwip_netconn_do_close_internal+0x238>)
 800a6de:	4887      	ldr	r0, [pc, #540]	@ (800a8fc <lwip_netconn_do_close_internal+0x23c>)
 800a6e0:	f00c f934 	bl	801694c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a6ec:	2b10      	cmp	r3, #16
 800a6ee:	d006      	beq.n	800a6fe <lwip_netconn_do_close_internal+0x3e>
 800a6f0:	4b80      	ldr	r3, [pc, #512]	@ (800a8f4 <lwip_netconn_do_close_internal+0x234>)
 800a6f2:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800a6f6:	4982      	ldr	r1, [pc, #520]	@ (800a900 <lwip_netconn_do_close_internal+0x240>)
 800a6f8:	4880      	ldr	r0, [pc, #512]	@ (800a8fc <lwip_netconn_do_close_internal+0x23c>)
 800a6fa:	f00c f927 	bl	801694c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	785b      	ldrb	r3, [r3, #1]
 800a702:	2b04      	cmp	r3, #4
 800a704:	d006      	beq.n	800a714 <lwip_netconn_do_close_internal+0x54>
 800a706:	4b7b      	ldr	r3, [pc, #492]	@ (800a8f4 <lwip_netconn_do_close_internal+0x234>)
 800a708:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800a70c:	497d      	ldr	r1, [pc, #500]	@ (800a904 <lwip_netconn_do_close_internal+0x244>)
 800a70e:	487b      	ldr	r0, [pc, #492]	@ (800a8fc <lwip_netconn_do_close_internal+0x23c>)
 800a710:	f00c f91c 	bl	801694c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d106      	bne.n	800a72a <lwip_netconn_do_close_internal+0x6a>
 800a71c:	4b75      	ldr	r3, [pc, #468]	@ (800a8f4 <lwip_netconn_do_close_internal+0x234>)
 800a71e:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800a722:	4979      	ldr	r1, [pc, #484]	@ (800a908 <lwip_netconn_do_close_internal+0x248>)
 800a724:	4875      	ldr	r0, [pc, #468]	@ (800a8fc <lwip_netconn_do_close_internal+0x23c>)
 800a726:	f00c f911 	bl	801694c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d106      	bne.n	800a740 <lwip_netconn_do_close_internal+0x80>
 800a732:	4b70      	ldr	r3, [pc, #448]	@ (800a8f4 <lwip_netconn_do_close_internal+0x234>)
 800a734:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a738:	4974      	ldr	r1, [pc, #464]	@ (800a90c <lwip_netconn_do_close_internal+0x24c>)
 800a73a:	4870      	ldr	r0, [pc, #448]	@ (800a8fc <lwip_netconn_do_close_internal+0x23c>)
 800a73c:	f00c f906 	bl	801694c <iprintf>

  tpcb = conn->pcb.tcp;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	7a1b      	ldrb	r3, [r3, #8]
 800a74c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a756:	7bfb      	ldrb	r3, [r7, #15]
 800a758:	f003 0302 	and.w	r3, r3, #2
 800a75c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
 800a760:	2b03      	cmp	r3, #3
 800a762:	d102      	bne.n	800a76a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a764:	2301      	movs	r3, #1
 800a766:	75bb      	strb	r3, [r7, #22]
 800a768:	e01f      	b.n	800a7aa <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a76a:	7bbb      	ldrb	r3, [r7, #14]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00e      	beq.n	800a78e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a774:	2b05      	cmp	r3, #5
 800a776:	d007      	beq.n	800a788 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a77c:	2b06      	cmp	r3, #6
 800a77e:	d003      	beq.n	800a788 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a784:	2b08      	cmp	r3, #8
 800a786:	d102      	bne.n	800a78e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a788:	2301      	movs	r3, #1
 800a78a:	75bb      	strb	r3, [r7, #22]
 800a78c:	e00d      	b.n	800a7aa <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a78e:	7b7b      	ldrb	r3, [r7, #13]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d008      	beq.n	800a7a6 <lwip_netconn_do_close_internal+0xe6>
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	8b5b      	ldrh	r3, [r3, #26]
 800a798:	f003 0310 	and.w	r3, r3, #16
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d002      	beq.n	800a7a6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	75bb      	strb	r3, [r7, #22]
 800a7a4:	e001      	b.n	800a7aa <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a7aa:	7dbb      	ldrb	r3, [r7, #22]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d003      	beq.n	800a7b8 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	6938      	ldr	r0, [r7, #16]
 800a7b4:	f004 fa38 	bl	800ec28 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	7d1b      	ldrb	r3, [r3, #20]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d104      	bne.n	800a7ca <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	6938      	ldr	r0, [r7, #16]
 800a7c4:	f004 faa8 	bl	800ed18 <tcp_accept>
 800a7c8:	e01d      	b.n	800a806 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a7ca:	7bbb      	ldrb	r3, [r7, #14]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d007      	beq.n	800a7e0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	6938      	ldr	r0, [r7, #16]
 800a7d4:	f004 fa3a 	bl	800ec4c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a7d8:	2100      	movs	r1, #0
 800a7da:	6938      	ldr	r0, [r7, #16]
 800a7dc:	f004 fa9c 	bl	800ed18 <tcp_accept>
    }
    if (shut_tx) {
 800a7e0:	7b7b      	ldrb	r3, [r7, #13]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d003      	beq.n	800a7ee <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	6938      	ldr	r0, [r7, #16]
 800a7ea:	f004 fa51 	bl	800ec90 <tcp_sent>
    }
    if (shut_close) {
 800a7ee:	7dbb      	ldrb	r3, [r7, #22]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d008      	beq.n	800a806 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	6938      	ldr	r0, [r7, #16]
 800a7fa:	f004 faa5 	bl	800ed48 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a7fe:	2100      	movs	r1, #0
 800a800:	6938      	ldr	r0, [r7, #16]
 800a802:	f004 fa67 	bl	800ecd4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a806:	7dbb      	ldrb	r3, [r7, #22]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d005      	beq.n	800a818 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a80c:	6938      	ldr	r0, [r7, #16]
 800a80e:	f003 f835 	bl	800d87c <tcp_close>
 800a812:	4603      	mov	r3, r0
 800a814:	75fb      	strb	r3, [r7, #23]
 800a816:	e007      	b.n	800a828 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a818:	7bbb      	ldrb	r3, [r7, #14]
 800a81a:	7b7a      	ldrb	r2, [r7, #13]
 800a81c:	4619      	mov	r1, r3
 800a81e:	6938      	ldr	r0, [r7, #16]
 800a820:	f003 f858 	bl	800d8d4 <tcp_shutdown>
 800a824:	4603      	mov	r3, r0
 800a826:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a828:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d102      	bne.n	800a836 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a830:	2301      	movs	r3, #1
 800a832:	757b      	strb	r3, [r7, #21]
 800a834:	e016      	b.n	800a864 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a836:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83e:	d10f      	bne.n	800a860 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a1b      	ldr	r3, [r3, #32]
 800a844:	7a5b      	ldrb	r3, [r3, #9]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10c      	bne.n	800a864 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a84a:	2301      	movs	r3, #1
 800a84c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a84e:	7dbb      	ldrb	r3, [r7, #22]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d007      	beq.n	800a864 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a854:	6938      	ldr	r0, [r7, #16]
 800a856:	f003 f957 	bl	800db08 <tcp_abort>
          err = ERR_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	75fb      	strb	r3, [r7, #23]
 800a85e:	e001      	b.n	800a864 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a860:	2301      	movs	r3, #1
 800a862:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a864:	7d7b      	ldrb	r3, [r7, #21]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d052      	beq.n	800a910 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a1b      	ldr	r3, [r3, #32]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	330c      	adds	r3, #12
 800a872:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a1b      	ldr	r3, [r3, #32]
 800a878:	7dfa      	ldrb	r2, [r7, #23]
 800a87a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a888:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d129      	bne.n	800a8e4 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a890:	7dbb      	ldrb	r3, [r7, #22]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00c      	beq.n	800a8b0 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d005      	beq.n	800a8b0 <lwip_netconn_do_close_internal+0x1f0>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	2104      	movs	r1, #4
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	4798      	blx	r3
      }
      if (shut_rx) {
 800a8b0:	7bbb      	ldrb	r3, [r7, #14]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d009      	beq.n	800a8ca <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d005      	beq.n	800a8ca <lwip_netconn_do_close_internal+0x20a>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	4798      	blx	r3
      }
      if (shut_tx) {
 800a8ca:	7b7b      	ldrb	r3, [r7, #13]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d009      	beq.n	800a8e4 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d005      	beq.n	800a8e4 <lwip_netconn_do_close_internal+0x224>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8dc:	2200      	movs	r2, #0
 800a8de:	2102      	movs	r1, #2
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a8e4:	78fb      	ldrb	r3, [r7, #3]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d002      	beq.n	800a8f0 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a8ea:	68b8      	ldr	r0, [r7, #8]
 800a8ec:	f00b fe7a 	bl	80165e4 <sys_sem_signal>
    }
    return ERR_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	e03c      	b.n	800a96e <lwip_netconn_do_close_internal+0x2ae>
 800a8f4:	08017c4c 	.word	0x08017c4c
 800a8f8:	08017f20 	.word	0x08017f20
 800a8fc:	08017c90 	.word	0x08017c90
 800a900:	08017f30 	.word	0x08017f30
 800a904:	08017f50 	.word	0x08017f50
 800a908:	08017f74 	.word	0x08017f74
 800a90c:	08017db4 	.word	0x08017db4
  }
  if (!close_finished) {
 800a910:	7d7b      	ldrb	r3, [r7, #21]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d11e      	bne.n	800a954 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	7d1b      	ldrb	r3, [r3, #20]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d106      	bne.n	800a92c <lwip_netconn_do_close_internal+0x26c>
 800a91e:	4b16      	ldr	r3, [pc, #88]	@ (800a978 <lwip_netconn_do_close_internal+0x2b8>)
 800a920:	f240 4241 	movw	r2, #1089	@ 0x441
 800a924:	4915      	ldr	r1, [pc, #84]	@ (800a97c <lwip_netconn_do_close_internal+0x2bc>)
 800a926:	4816      	ldr	r0, [pc, #88]	@ (800a980 <lwip_netconn_do_close_internal+0x2c0>)
 800a928:	f00c f810 	bl	801694c <iprintf>
    if (shut_tx) {
 800a92c:	7b7b      	ldrb	r3, [r7, #13]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d003      	beq.n	800a93a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800a932:	4914      	ldr	r1, [pc, #80]	@ (800a984 <lwip_netconn_do_close_internal+0x2c4>)
 800a934:	6938      	ldr	r0, [r7, #16]
 800a936:	f004 f9ab 	bl	800ec90 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a93a:	2201      	movs	r2, #1
 800a93c:	4912      	ldr	r1, [pc, #72]	@ (800a988 <lwip_netconn_do_close_internal+0x2c8>)
 800a93e:	6938      	ldr	r0, [r7, #16]
 800a940:	f004 fa02 	bl	800ed48 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a944:	4911      	ldr	r1, [pc, #68]	@ (800a98c <lwip_netconn_do_close_internal+0x2cc>)
 800a946:	6938      	ldr	r0, [r7, #16]
 800a948:	f004 f9c4 	bl	800ecd4 <tcp_err>
    tcp_arg(tpcb, conn);
 800a94c:	6879      	ldr	r1, [r7, #4]
 800a94e:	6938      	ldr	r0, [r7, #16]
 800a950:	f004 f96a 	bl	800ec28 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a954:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d106      	bne.n	800a96a <lwip_netconn_do_close_internal+0x2aa>
 800a95c:	4b06      	ldr	r3, [pc, #24]	@ (800a978 <lwip_netconn_do_close_internal+0x2b8>)
 800a95e:	f240 424d 	movw	r2, #1101	@ 0x44d
 800a962:	490b      	ldr	r1, [pc, #44]	@ (800a990 <lwip_netconn_do_close_internal+0x2d0>)
 800a964:	4806      	ldr	r0, [pc, #24]	@ (800a980 <lwip_netconn_do_close_internal+0x2c0>)
 800a966:	f00b fff1 	bl	801694c <iprintf>
  return err;
 800a96a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3718      	adds	r7, #24
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	08017c4c 	.word	0x08017c4c
 800a97c:	08017f88 	.word	0x08017f88
 800a980:	08017c90 	.word	0x08017c90
 800a984:	08009f39 	.word	0x08009f39
 800a988:	08009e71 	.word	0x08009e71
 800a98c:	08009fe1 	.word	0x08009fe1
 800a990:	08017fac 	.word	0x08017fac

0800a994 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	785b      	ldrb	r3, [r3, #1]
 800a9a6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a9a8:	7afb      	ldrb	r3, [r7, #11]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00d      	beq.n	800a9ca <lwip_netconn_do_delconn+0x36>
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a9b8:	2b10      	cmp	r3, #16
 800a9ba:	d006      	beq.n	800a9ca <lwip_netconn_do_delconn+0x36>
 800a9bc:	4b60      	ldr	r3, [pc, #384]	@ (800ab40 <lwip_netconn_do_delconn+0x1ac>)
 800a9be:	f240 425e 	movw	r2, #1118	@ 0x45e
 800a9c2:	4960      	ldr	r1, [pc, #384]	@ (800ab44 <lwip_netconn_do_delconn+0x1b0>)
 800a9c4:	4860      	ldr	r0, [pc, #384]	@ (800ab48 <lwip_netconn_do_delconn+0x1b4>)
 800a9c6:	f00b ffc1 	bl	801694c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a9ca:	7afb      	ldrb	r3, [r7, #11]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d005      	beq.n	800a9dc <lwip_netconn_do_delconn+0x48>
 800a9d0:	7afb      	ldrb	r3, [r7, #11]
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d002      	beq.n	800a9dc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a9d6:	7afb      	ldrb	r3, [r7, #11]
 800a9d8:	2b03      	cmp	r3, #3
 800a9da:	d109      	bne.n	800a9f0 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a9dc:	7afb      	ldrb	r3, [r7, #11]
 800a9de:	2b03      	cmp	r3, #3
 800a9e0:	d10a      	bne.n	800a9f8 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	7f1b      	ldrb	r3, [r3, #28]
 800a9e8:	f003 0304 	and.w	r3, r3, #4
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d103      	bne.n	800a9f8 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	22fb      	movs	r2, #251	@ 0xfb
 800a9f4:	711a      	strb	r2, [r3, #4]
 800a9f6:	e097      	b.n	800ab28 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a9f8:	7afb      	ldrb	r3, [r7, #11]
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d10d      	bne.n	800aa1a <lwip_netconn_do_delconn+0x86>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	7f1b      	ldrb	r3, [r3, #28]
 800aa04:	f003 0304 	and.w	r3, r3, #4
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d106      	bne.n	800aa1a <lwip_netconn_do_delconn+0x86>
 800aa0c:	4b4c      	ldr	r3, [pc, #304]	@ (800ab40 <lwip_netconn_do_delconn+0x1ac>)
 800aa0e:	f240 427a 	movw	r2, #1146	@ 0x47a
 800aa12:	494e      	ldr	r1, [pc, #312]	@ (800ab4c <lwip_netconn_do_delconn+0x1b8>)
 800aa14:	484c      	ldr	r0, [pc, #304]	@ (800ab48 <lwip_netconn_do_delconn+0x1b4>)
 800aa16:	f00b ff99 	bl	801694c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7ff fdcd 	bl	800a5c4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d05f      	beq.n	800aaf4 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aa3e:	2b10      	cmp	r3, #16
 800aa40:	d00d      	beq.n	800aa5e <lwip_netconn_do_delconn+0xca>
 800aa42:	2b20      	cmp	r3, #32
 800aa44:	d151      	bne.n	800aaea <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f009 f966 	bl	8013d28 <udp_remove>
          break;
 800aa5c:	e046      	b.n	800aaec <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	6a1b      	ldr	r3, [r3, #32]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d006      	beq.n	800aa76 <lwip_netconn_do_delconn+0xe2>
 800aa68:	4b35      	ldr	r3, [pc, #212]	@ (800ab40 <lwip_netconn_do_delconn+0x1ac>)
 800aa6a:	f240 4294 	movw	r2, #1172	@ 0x494
 800aa6e:	4938      	ldr	r1, [pc, #224]	@ (800ab50 <lwip_netconn_do_delconn+0x1bc>)
 800aa70:	4835      	ldr	r0, [pc, #212]	@ (800ab48 <lwip_netconn_do_delconn+0x1b4>)
 800aa72:	f00b ff6b 	bl	801694c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2204      	movs	r2, #4
 800aa7c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2203      	movs	r2, #3
 800aa82:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2100      	movs	r1, #0
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7ff fe14 	bl	800a6c0 <lwip_netconn_do_close_internal>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d04b      	beq.n	800ab36 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	785b      	ldrb	r3, [r3, #1]
 800aaa4:	2b04      	cmp	r3, #4
 800aaa6:	d006      	beq.n	800aab6 <lwip_netconn_do_delconn+0x122>
 800aaa8:	4b25      	ldr	r3, [pc, #148]	@ (800ab40 <lwip_netconn_do_delconn+0x1ac>)
 800aaaa:	f240 429a 	movw	r2, #1178	@ 0x49a
 800aaae:	4929      	ldr	r1, [pc, #164]	@ (800ab54 <lwip_netconn_do_delconn+0x1c0>)
 800aab0:	4825      	ldr	r0, [pc, #148]	@ (800ab48 <lwip_netconn_do_delconn+0x1b4>)
 800aab2:	f00b ff4b 	bl	801694c <iprintf>
            UNLOCK_TCPIP_CORE();
 800aab6:	4828      	ldr	r0, [pc, #160]	@ (800ab58 <lwip_netconn_do_delconn+0x1c4>)
 800aab8:	f00b fdfd 	bl	80166b6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	330c      	adds	r3, #12
 800aac2:	2100      	movs	r1, #0
 800aac4:	4618      	mov	r0, r3
 800aac6:	f00b fd5c 	bl	8016582 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800aaca:	4823      	ldr	r0, [pc, #140]	@ (800ab58 <lwip_netconn_do_delconn+0x1c4>)
 800aacc:	f00b fde4 	bl	8016698 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	785b      	ldrb	r3, [r3, #1]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d02d      	beq.n	800ab36 <lwip_netconn_do_delconn+0x1a2>
 800aada:	4b19      	ldr	r3, [pc, #100]	@ (800ab40 <lwip_netconn_do_delconn+0x1ac>)
 800aadc:	f240 429e 	movw	r2, #1182	@ 0x49e
 800aae0:	491c      	ldr	r1, [pc, #112]	@ (800ab54 <lwip_netconn_do_delconn+0x1c0>)
 800aae2:	4819      	ldr	r0, [pc, #100]	@ (800ab48 <lwip_netconn_do_delconn+0x1b4>)
 800aae4:	f00b ff32 	bl	801694c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800aae8:	e025      	b.n	800ab36 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800aaea:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d007      	beq.n	800ab0e <lwip_netconn_do_delconn+0x17a>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	6810      	ldr	r0, [r2, #0]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d007      	beq.n	800ab28 <lwip_netconn_do_delconn+0x194>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	6810      	ldr	r0, [r2, #0]
 800ab22:	2200      	movs	r2, #0
 800ab24:	2102      	movs	r1, #2
 800ab26:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	330c      	adds	r3, #12
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f00b fd72 	bl	8016618 <sys_sem_valid>
 800ab34:	e000      	b.n	800ab38 <lwip_netconn_do_delconn+0x1a4>
          return;
 800ab36:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	08017c4c 	.word	0x08017c4c
 800ab44:	08017fbc 	.word	0x08017fbc
 800ab48:	08017c90 	.word	0x08017c90
 800ab4c:	08017fd0 	.word	0x08017fd0
 800ab50:	08017ff0 	.word	0x08017ff0
 800ab54:	0801800c 	.word	0x0801800c
 800ab58:	20009998 	.word	0x20009998

0800ab5c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d025      	beq.n	800abbe <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ab7c:	2b10      	cmp	r3, #16
 800ab7e:	d00e      	beq.n	800ab9e <lwip_netconn_do_bind+0x42>
 800ab80:	2b20      	cmp	r3, #32
 800ab82:	d119      	bne.n	800abb8 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	6858      	ldr	r0, [r3, #4]
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	6899      	ldr	r1, [r3, #8]
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	899b      	ldrh	r3, [r3, #12]
 800ab92:	461a      	mov	r2, r3
 800ab94:	f009 f820 	bl	8013bd8 <udp_bind>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	73fb      	strb	r3, [r7, #15]
        break;
 800ab9c:	e011      	b.n	800abc2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	6858      	ldr	r0, [r3, #4]
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	6899      	ldr	r1, [r3, #8]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	899b      	ldrh	r3, [r3, #12]
 800abac:	461a      	mov	r2, r3
 800abae:	f002 ffb7 	bl	800db20 <tcp_bind>
 800abb2:	4603      	mov	r3, r0
 800abb4:	73fb      	strb	r3, [r7, #15]
        break;
 800abb6:	e004      	b.n	800abc2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800abb8:	23fa      	movs	r3, #250	@ 0xfa
 800abba:	73fb      	strb	r3, [r7, #15]
        break;
 800abbc:	e001      	b.n	800abc2 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800abbe:	23fa      	movs	r3, #250	@ 0xfa
 800abc0:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	7bfa      	ldrb	r2, [r7, #15]
 800abc6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800abc8:	bf00      	nop
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d07f      	beq.n	800ace6 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800abf0:	2b10      	cmp	r3, #16
 800abf2:	d175      	bne.n	800ace0 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	785b      	ldrb	r3, [r3, #1]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d165      	bne.n	800acca <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	7d1b      	ldrb	r3, [r3, #20]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d002      	beq.n	800ac10 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800ac0a:	23fa      	movs	r3, #250	@ 0xfa
 800ac0c:	72fb      	strb	r3, [r7, #11]
 800ac0e:	e06c      	b.n	800acea <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800ac10:	23ff      	movs	r3, #255	@ 0xff
 800ac12:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	f107 020b 	add.w	r2, r7, #11
 800ac1e:	7cf9      	ldrb	r1, [r7, #19]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f003 f835 	bl	800dc90 <tcp_listen_with_backlog_and_err>
 800ac26:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d05d      	beq.n	800acea <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	3310      	adds	r3, #16
 800ac34:	4618      	mov	r0, r3
 800ac36:	f00b fc61 	bl	80164fc <sys_mbox_valid>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00b      	beq.n	800ac58 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	3310      	adds	r3, #16
 800ac46:	4618      	mov	r0, r3
 800ac48:	f00b fbe4 	bl	8016414 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	3310      	adds	r3, #16
 800ac52:	4618      	mov	r0, r3
 800ac54:	f00b fc63 	bl	801651e <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3314      	adds	r3, #20
 800ac62:	4618      	mov	r0, r3
 800ac64:	f00b fc4a 	bl	80164fc <sys_mbox_valid>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d108      	bne.n	800ac80 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	3314      	adds	r3, #20
 800ac74:	2106      	movs	r1, #6
 800ac76:	4618      	mov	r0, r3
 800ac78:	f00b fbb2 	bl	80163e0 <sys_mbox_new>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800ac80:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d118      	bne.n	800acba <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2202      	movs	r2, #2
 800ac8e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4619      	mov	r1, r3
 800aca4:	4610      	mov	r0, r2
 800aca6:	f003 ffbf 	bl	800ec28 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	4912      	ldr	r1, [pc, #72]	@ (800acfc <lwip_netconn_do_listen+0x12c>)
 800acb2:	4618      	mov	r0, r3
 800acb4:	f004 f830 	bl	800ed18 <tcp_accept>
 800acb8:	e017      	b.n	800acea <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f002 fdde 	bl	800d87c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2200      	movs	r2, #0
 800acc6:	605a      	str	r2, [r3, #4]
 800acc8:	e00f      	b.n	800acea <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	785b      	ldrb	r3, [r3, #1]
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d102      	bne.n	800acda <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800acd4:	2300      	movs	r3, #0
 800acd6:	72fb      	strb	r3, [r7, #11]
 800acd8:	e007      	b.n	800acea <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800acda:	23f5      	movs	r3, #245	@ 0xf5
 800acdc:	72fb      	strb	r3, [r7, #11]
 800acde:	e004      	b.n	800acea <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800ace0:	23f0      	movs	r3, #240	@ 0xf0
 800ace2:	72fb      	strb	r3, [r7, #11]
 800ace4:	e001      	b.n	800acea <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800ace6:	23f5      	movs	r3, #245	@ 0xf5
 800ace8:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800acea:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800acf2:	bf00      	nop
 800acf4:	3718      	adds	r7, #24
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	0800a1dd 	.word	0x0800a1dd

0800ad00 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d022      	beq.n	800ad62 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ad26:	2b10      	cmp	r3, #16
 800ad28:	d11b      	bne.n	800ad62 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad36:	d202      	bcs.n	800ad3e <lwip_netconn_do_recv+0x3e>
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	e001      	b.n	800ad42 <lwip_netconn_do_recv+0x42>
 800ad3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ad42:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	89fa      	ldrh	r2, [r7, #14]
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f003 f8a2 	bl	800de98 <tcp_recved>
        remaining -= recved;
 800ad54:	89fb      	ldrh	r3, [r7, #14]
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1e6      	bne.n	800ad30 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ad62:	bf00      	nop
 800ad64:	3718      	adds	r7, #24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
	...

0800ad6c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b088      	sub	sp, #32
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	460b      	mov	r3, r1
 800ad76:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d106      	bne.n	800ad90 <lwip_netconn_do_writemore+0x24>
 800ad82:	4b96      	ldr	r3, [pc, #600]	@ (800afdc <lwip_netconn_do_writemore+0x270>)
 800ad84:	f240 6273 	movw	r2, #1651	@ 0x673
 800ad88:	4995      	ldr	r1, [pc, #596]	@ (800afe0 <lwip_netconn_do_writemore+0x274>)
 800ad8a:	4896      	ldr	r0, [pc, #600]	@ (800afe4 <lwip_netconn_do_writemore+0x278>)
 800ad8c:	f00b fdde 	bl	801694c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	785b      	ldrb	r3, [r3, #1]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d006      	beq.n	800ada6 <lwip_netconn_do_writemore+0x3a>
 800ad98:	4b90      	ldr	r3, [pc, #576]	@ (800afdc <lwip_netconn_do_writemore+0x270>)
 800ad9a:	f240 6274 	movw	r2, #1652	@ 0x674
 800ad9e:	4992      	ldr	r1, [pc, #584]	@ (800afe8 <lwip_netconn_do_writemore+0x27c>)
 800ada0:	4890      	ldr	r0, [pc, #576]	@ (800afe4 <lwip_netconn_do_writemore+0x278>)
 800ada2:	f00b fdd3 	bl	801694c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a1b      	ldr	r3, [r3, #32]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d106      	bne.n	800adbc <lwip_netconn_do_writemore+0x50>
 800adae:	4b8b      	ldr	r3, [pc, #556]	@ (800afdc <lwip_netconn_do_writemore+0x270>)
 800adb0:	f240 6275 	movw	r2, #1653	@ 0x675
 800adb4:	498d      	ldr	r1, [pc, #564]	@ (800afec <lwip_netconn_do_writemore+0x280>)
 800adb6:	488b      	ldr	r0, [pc, #556]	@ (800afe4 <lwip_netconn_do_writemore+0x278>)
 800adb8:	f00b fdc8 	bl	801694c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d106      	bne.n	800add2 <lwip_netconn_do_writemore+0x66>
 800adc4:	4b85      	ldr	r3, [pc, #532]	@ (800afdc <lwip_netconn_do_writemore+0x270>)
 800adc6:	f240 6276 	movw	r2, #1654	@ 0x676
 800adca:	4989      	ldr	r1, [pc, #548]	@ (800aff0 <lwip_netconn_do_writemore+0x284>)
 800adcc:	4885      	ldr	r0, [pc, #532]	@ (800afe4 <lwip_netconn_do_writemore+0x278>)
 800adce:	f00b fdbd 	bl	801694c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a1b      	ldr	r3, [r3, #32]
 800add6:	699a      	ldr	r2, [r3, #24]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a1b      	ldr	r3, [r3, #32]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d306      	bcc.n	800adf0 <lwip_netconn_do_writemore+0x84>
 800ade2:	4b7e      	ldr	r3, [pc, #504]	@ (800afdc <lwip_netconn_do_writemore+0x270>)
 800ade4:	f240 6277 	movw	r2, #1655	@ 0x677
 800ade8:	4982      	ldr	r1, [pc, #520]	@ (800aff4 <lwip_netconn_do_writemore+0x288>)
 800adea:	487e      	ldr	r0, [pc, #504]	@ (800afe4 <lwip_netconn_do_writemore+0x278>)
 800adec:	f00b fdae 	bl	801694c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a1b      	ldr	r3, [r3, #32]
 800adf4:	899b      	ldrh	r3, [r3, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d106      	bne.n	800ae08 <lwip_netconn_do_writemore+0x9c>
 800adfa:	4b78      	ldr	r3, [pc, #480]	@ (800afdc <lwip_netconn_do_writemore+0x270>)
 800adfc:	f240 6279 	movw	r2, #1657	@ 0x679
 800ae00:	497d      	ldr	r1, [pc, #500]	@ (800aff8 <lwip_netconn_do_writemore+0x28c>)
 800ae02:	4878      	ldr	r0, [pc, #480]	@ (800afe4 <lwip_netconn_do_writemore+0x278>)
 800ae04:	f00b fda2 	bl	801694c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a1b      	ldr	r3, [r3, #32]
 800ae0c:	7f1b      	ldrb	r3, [r3, #28]
 800ae0e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	7f1b      	ldrb	r3, [r3, #28]
 800ae14:	f003 0302 	and.w	r3, r3, #2
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d104      	bne.n	800ae26 <lwip_netconn_do_writemore+0xba>
 800ae1c:	7ebb      	ldrb	r3, [r7, #26]
 800ae1e:	f003 0304 	and.w	r3, r3, #4
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d001      	beq.n	800ae2a <lwip_netconn_do_writemore+0xbe>
 800ae26:	2301      	movs	r3, #1
 800ae28:	e000      	b.n	800ae2c <lwip_netconn_do_writemore+0xc0>
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a1b      	ldr	r3, [r3, #32]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	685a      	ldr	r2, [r3, #4]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a1b      	ldr	r3, [r3, #32]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae58:	d307      	bcc.n	800ae6a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800ae5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae5e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ae60:	7ebb      	ldrb	r3, [r7, #26]
 800ae62:	f043 0302 	orr.w	r3, r3, #2
 800ae66:	76bb      	strb	r3, [r7, #26]
 800ae68:	e001      	b.n	800ae6e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ae76:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800ae78:	89fa      	ldrh	r2, [r7, #14]
 800ae7a:	8bbb      	ldrh	r3, [r7, #28]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d216      	bcs.n	800aeae <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800ae80:	89fb      	ldrh	r3, [r7, #14]
 800ae82:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800ae84:	7e3b      	ldrb	r3, [r7, #24]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00d      	beq.n	800aea6 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ae8a:	8bbb      	ldrh	r3, [r7, #28]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10e      	bne.n	800aeae <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	699b      	ldr	r3, [r3, #24]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d102      	bne.n	800aea0 <lwip_netconn_do_writemore+0x134>
 800ae9a:	f06f 0306 	mvn.w	r3, #6
 800ae9e:	e000      	b.n	800aea2 <lwip_netconn_do_writemore+0x136>
 800aea0:	2300      	movs	r3, #0
 800aea2:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800aea4:	e07d      	b.n	800afa2 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800aea6:	7ebb      	ldrb	r3, [r7, #26]
 800aea8:	f043 0302 	orr.w	r3, r3, #2
 800aeac:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a1b      	ldr	r3, [r3, #32]
 800aeb2:	691a      	ldr	r2, [r3, #16]
 800aeb4:	8bbb      	ldrh	r3, [r7, #28]
 800aeb6:	441a      	add	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a1b      	ldr	r3, [r3, #32]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d906      	bls.n	800aed2 <lwip_netconn_do_writemore+0x166>
 800aec4:	4b45      	ldr	r3, [pc, #276]	@ (800afdc <lwip_netconn_do_writemore+0x270>)
 800aec6:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800aeca:	494c      	ldr	r1, [pc, #304]	@ (800affc <lwip_netconn_do_writemore+0x290>)
 800aecc:	4845      	ldr	r0, [pc, #276]	@ (800afe4 <lwip_netconn_do_writemore+0x278>)
 800aece:	f00b fd3d 	bl	801694c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aed2:	8bbb      	ldrh	r3, [r7, #28]
 800aed4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d103      	bne.n	800aee4 <lwip_netconn_do_writemore+0x178>
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aee2:	d209      	bcs.n	800aef8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aee8:	8bba      	ldrh	r2, [r7, #28]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d10b      	bne.n	800af06 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a1b      	ldr	r3, [r3, #32]
 800aef2:	899b      	ldrh	r3, [r3, #12]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d906      	bls.n	800af06 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800aef8:	2301      	movs	r3, #1
 800aefa:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800aefc:	7ebb      	ldrb	r3, [r7, #26]
 800aefe:	f043 0302 	orr.w	r3, r3, #2
 800af02:	76bb      	strb	r3, [r7, #26]
 800af04:	e001      	b.n	800af0a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800af06:	2300      	movs	r3, #0
 800af08:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6858      	ldr	r0, [r3, #4]
 800af0e:	7ebb      	ldrb	r3, [r7, #26]
 800af10:	8bba      	ldrh	r2, [r7, #28]
 800af12:	6979      	ldr	r1, [r7, #20]
 800af14:	f006 fdc4 	bl	8011aa0 <tcp_write>
 800af18:	4603      	mov	r3, r0
 800af1a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800af1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d12c      	bne.n	800af7e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a1b      	ldr	r3, [r3, #32]
 800af28:	6999      	ldr	r1, [r3, #24]
 800af2a:	8bba      	ldrh	r2, [r7, #28]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a1b      	ldr	r3, [r3, #32]
 800af30:	440a      	add	r2, r1
 800af32:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a1b      	ldr	r3, [r3, #32]
 800af38:	6919      	ldr	r1, [r3, #16]
 800af3a:	8bba      	ldrh	r2, [r7, #28]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a1b      	ldr	r3, [r3, #32]
 800af40:	440a      	add	r2, r1
 800af42:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a1b      	ldr	r3, [r3, #32]
 800af48:	691a      	ldr	r2, [r3, #16]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	429a      	cmp	r2, r3
 800af54:	d113      	bne.n	800af7e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a1b      	ldr	r3, [r3, #32]
 800af5a:	899a      	ldrh	r2, [r3, #12]
 800af5c:	3a01      	subs	r2, #1
 800af5e:	b292      	uxth	r2, r2
 800af60:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a1b      	ldr	r3, [r3, #32]
 800af66:	899b      	ldrh	r3, [r3, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d008      	beq.n	800af7e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6a1b      	ldr	r3, [r3, #32]
 800af70:	689a      	ldr	r2, [r3, #8]
 800af72:	3208      	adds	r2, #8
 800af74:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	2200      	movs	r2, #0
 800af7c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800af7e:	7e7b      	ldrb	r3, [r7, #25]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d004      	beq.n	800af8e <lwip_netconn_do_writemore+0x222>
 800af84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f43f af50 	beq.w	800ae2e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800af8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d004      	beq.n	800afa0 <lwip_netconn_do_writemore+0x234>
 800af96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af9e:	d146      	bne.n	800b02e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800afa0:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800afa2:	7e3b      	ldrb	r3, [r7, #24]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d02b      	beq.n	800b000 <lwip_netconn_do_writemore+0x294>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a1b      	ldr	r3, [r3, #32]
 800afac:	699a      	ldr	r2, [r3, #24]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a1b      	ldr	r3, [r3, #32]
 800afb2:	695b      	ldr	r3, [r3, #20]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d223      	bcs.n	800b000 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d005      	beq.n	800afcc <lwip_netconn_do_writemore+0x260>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afc4:	2200      	movs	r2, #0
 800afc6:	2103      	movs	r1, #3
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	7f1b      	ldrb	r3, [r3, #28]
 800afd0:	f043 0310 	orr.w	r3, r3, #16
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	771a      	strb	r2, [r3, #28]
 800afda:	e028      	b.n	800b02e <lwip_netconn_do_writemore+0x2c2>
 800afdc:	08017c4c 	.word	0x08017c4c
 800afe0:	08017da4 	.word	0x08017da4
 800afe4:	08017c90 	.word	0x08017c90
 800afe8:	080180ac 	.word	0x080180ac
 800afec:	08017db4 	.word	0x08017db4
 800aff0:	080180cc 	.word	0x080180cc
 800aff4:	080180e4 	.word	0x080180e4
 800aff8:	08018124 	.word	0x08018124
 800affc:	0801814c 	.word	0x0801814c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b008:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800b00c:	d305      	bcc.n	800b01a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b016:	2b04      	cmp	r3, #4
 800b018:	d909      	bls.n	800b02e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d005      	beq.n	800b02e <lwip_netconn_do_writemore+0x2c2>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b026:	2200      	movs	r2, #0
 800b028:	2103      	movs	r1, #3
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b02e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d11d      	bne.n	800b072 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a1b      	ldr	r3, [r3, #32]
 800b03a:	699a      	ldr	r2, [r3, #24]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a1b      	ldr	r3, [r3, #32]
 800b040:	695b      	ldr	r3, [r3, #20]
 800b042:	429a      	cmp	r2, r3
 800b044:	d002      	beq.n	800b04c <lwip_netconn_do_writemore+0x2e0>
 800b046:	7e3b      	ldrb	r3, [r7, #24]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b04c:	2301      	movs	r3, #1
 800b04e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	4618      	mov	r0, r3
 800b056:	f007 fb0d 	bl	8012674 <tcp_output>
 800b05a:	4603      	mov	r3, r0
 800b05c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b05e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b062:	f113 0f04 	cmn.w	r3, #4
 800b066:	d12c      	bne.n	800b0c2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b068:	7b3b      	ldrb	r3, [r7, #12]
 800b06a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b06c:	2301      	movs	r3, #1
 800b06e:	76fb      	strb	r3, [r7, #27]
 800b070:	e027      	b.n	800b0c2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b072:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b07a:	d120      	bne.n	800b0be <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	4618      	mov	r0, r3
 800b082:	f007 faf7 	bl	8012674 <tcp_output>
 800b086:	4603      	mov	r3, r0
 800b088:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b08a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b08e:	f113 0f04 	cmn.w	r3, #4
 800b092:	d104      	bne.n	800b09e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b094:	7b7b      	ldrb	r3, [r7, #13]
 800b096:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b098:	2301      	movs	r3, #1
 800b09a:	76fb      	strb	r3, [r7, #27]
 800b09c:	e011      	b.n	800b0c2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b09e:	7e3b      	ldrb	r3, [r7, #24]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d00e      	beq.n	800b0c2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a1b      	ldr	r3, [r3, #32]
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d102      	bne.n	800b0b4 <lwip_netconn_do_writemore+0x348>
 800b0ae:	f06f 0306 	mvn.w	r3, #6
 800b0b2:	e000      	b.n	800b0b6 <lwip_netconn_do_writemore+0x34a>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	76fb      	strb	r3, [r7, #27]
 800b0bc:	e001      	b.n	800b0c2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b0c2:	7efb      	ldrb	r3, [r7, #27]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d015      	beq.n	800b0f4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6a1b      	ldr	r3, [r3, #32]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	330c      	adds	r3, #12
 800b0d0:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	7ffa      	ldrb	r2, [r7, #31]
 800b0d8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b0e6:	78fb      	ldrb	r3, [r7, #3]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d006      	beq.n	800b0fa <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b0ec:	68b8      	ldr	r0, [r7, #8]
 800b0ee:	f00b fa79 	bl	80165e4 <sys_sem_signal>
 800b0f2:	e002      	b.n	800b0fa <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b0f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0f8:	e000      	b.n	800b0fc <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3720      	adds	r7, #32
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4618      	mov	r0, r3
 800b116:	f7fe fd1c 	bl	8009b52 <netconn_err>
 800b11a:	4603      	mov	r3, r0
 800b11c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b11e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d166      	bne.n	800b1f4 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b130:	2b10      	cmp	r3, #16
 800b132:	d15d      	bne.n	800b1f0 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	785b      	ldrb	r3, [r3, #1]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d002      	beq.n	800b144 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b13e:	23fb      	movs	r3, #251	@ 0xfb
 800b140:	73fb      	strb	r3, [r7, #15]
 800b142:	e057      	b.n	800b1f4 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d04d      	beq.n	800b1ea <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2201      	movs	r2, #1
 800b154:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	6a1b      	ldr	r3, [r3, #32]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d006      	beq.n	800b16e <lwip_netconn_do_write+0x6a>
 800b160:	4b28      	ldr	r3, [pc, #160]	@ (800b204 <lwip_netconn_do_write+0x100>)
 800b162:	f240 7223 	movw	r2, #1827	@ 0x723
 800b166:	4928      	ldr	r1, [pc, #160]	@ (800b208 <lwip_netconn_do_write+0x104>)
 800b168:	4828      	ldr	r0, [pc, #160]	@ (800b20c <lwip_netconn_do_write+0x108>)
 800b16a:	f00b fbef 	bl	801694c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	695b      	ldr	r3, [r3, #20]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d106      	bne.n	800b184 <lwip_netconn_do_write+0x80>
 800b176:	4b23      	ldr	r3, [pc, #140]	@ (800b204 <lwip_netconn_do_write+0x100>)
 800b178:	f240 7224 	movw	r2, #1828	@ 0x724
 800b17c:	4924      	ldr	r1, [pc, #144]	@ (800b210 <lwip_netconn_do_write+0x10c>)
 800b17e:	4823      	ldr	r0, [pc, #140]	@ (800b20c <lwip_netconn_do_write+0x108>)
 800b180:	f00b fbe4 	bl	801694c <iprintf>
        msg->conn->current_msg = msg;
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2100      	movs	r1, #0
 800b192:	4618      	mov	r0, r3
 800b194:	f7ff fdea 	bl	800ad6c <lwip_netconn_do_writemore>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d02e      	beq.n	800b1fc <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	785b      	ldrb	r3, [r3, #1]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d006      	beq.n	800b1b6 <lwip_netconn_do_write+0xb2>
 800b1a8:	4b16      	ldr	r3, [pc, #88]	@ (800b204 <lwip_netconn_do_write+0x100>)
 800b1aa:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800b1ae:	4919      	ldr	r1, [pc, #100]	@ (800b214 <lwip_netconn_do_write+0x110>)
 800b1b0:	4816      	ldr	r0, [pc, #88]	@ (800b20c <lwip_netconn_do_write+0x108>)
 800b1b2:	f00b fbcb 	bl	801694c <iprintf>
          UNLOCK_TCPIP_CORE();
 800b1b6:	4818      	ldr	r0, [pc, #96]	@ (800b218 <lwip_netconn_do_write+0x114>)
 800b1b8:	f00b fa7d 	bl	80166b6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	330c      	adds	r3, #12
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f00b f9dc 	bl	8016582 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b1ca:	4813      	ldr	r0, [pc, #76]	@ (800b218 <lwip_netconn_do_write+0x114>)
 800b1cc:	f00b fa64 	bl	8016698 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	785b      	ldrb	r3, [r3, #1]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d110      	bne.n	800b1fc <lwip_netconn_do_write+0xf8>
 800b1da:	4b0a      	ldr	r3, [pc, #40]	@ (800b204 <lwip_netconn_do_write+0x100>)
 800b1dc:	f240 722c 	movw	r2, #1836	@ 0x72c
 800b1e0:	490c      	ldr	r1, [pc, #48]	@ (800b214 <lwip_netconn_do_write+0x110>)
 800b1e2:	480a      	ldr	r0, [pc, #40]	@ (800b20c <lwip_netconn_do_write+0x108>)
 800b1e4:	f00b fbb2 	bl	801694c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b1e8:	e008      	b.n	800b1fc <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b1ea:	23f5      	movs	r3, #245	@ 0xf5
 800b1ec:	73fb      	strb	r3, [r7, #15]
 800b1ee:	e001      	b.n	800b1f4 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b1f0:	23fa      	movs	r3, #250	@ 0xfa
 800b1f2:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	7bfa      	ldrb	r2, [r7, #15]
 800b1f8:	711a      	strb	r2, [r3, #4]
 800b1fa:	e000      	b.n	800b1fe <lwip_netconn_do_write+0xfa>
        return;
 800b1fc:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b1fe:	3710      	adds	r7, #16
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	08017c4c 	.word	0x08017c4c
 800b208:	08017ff0 	.word	0x08017ff0
 800b20c:	08017c90 	.word	0x08017c90
 800b210:	08018178 	.word	0x08018178
 800b214:	0801800c 	.word	0x0801800c
 800b218:	20009998 	.word	0x20009998

0800b21c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	785b      	ldrb	r3, [r3, #1]
 800b22e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d069      	beq.n	800b30e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b244:	2b10      	cmp	r3, #16
 800b246:	d162      	bne.n	800b30e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b24c:	2b03      	cmp	r3, #3
 800b24e:	d002      	beq.n	800b256 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b250:	7afb      	ldrb	r3, [r7, #11]
 800b252:	2b02      	cmp	r3, #2
 800b254:	d05b      	beq.n	800b30e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b256:	7afb      	ldrb	r3, [r7, #11]
 800b258:	2b03      	cmp	r3, #3
 800b25a:	d103      	bne.n	800b264 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	22f5      	movs	r2, #245	@ 0xf5
 800b260:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b262:	e059      	b.n	800b318 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b264:	7afb      	ldrb	r3, [r7, #11]
 800b266:	2b01      	cmp	r3, #1
 800b268:	d103      	bne.n	800b272 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	22fb      	movs	r2, #251	@ 0xfb
 800b26e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b270:	e052      	b.n	800b318 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	7a1b      	ldrb	r3, [r3, #8]
 800b276:	f003 0301 	and.w	r3, r3, #1
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d004      	beq.n	800b288 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4618      	mov	r0, r3
 800b284:	f7ff f99e 	bl	800a5c4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6a1b      	ldr	r3, [r3, #32]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d006      	beq.n	800b2a0 <lwip_netconn_do_close+0x84>
 800b292:	4b23      	ldr	r3, [pc, #140]	@ (800b320 <lwip_netconn_do_close+0x104>)
 800b294:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800b298:	4922      	ldr	r1, [pc, #136]	@ (800b324 <lwip_netconn_do_close+0x108>)
 800b29a:	4823      	ldr	r0, [pc, #140]	@ (800b328 <lwip_netconn_do_close+0x10c>)
 800b29c:	f00b fb56 	bl	801694c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2204      	movs	r2, #4
 800b2a6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7ff fa02 	bl	800a6c0 <lwip_netconn_do_close_internal>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d029      	beq.n	800b316 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	785b      	ldrb	r3, [r3, #1]
 800b2c8:	2b04      	cmp	r3, #4
 800b2ca:	d006      	beq.n	800b2da <lwip_netconn_do_close+0xbe>
 800b2cc:	4b14      	ldr	r3, [pc, #80]	@ (800b320 <lwip_netconn_do_close+0x104>)
 800b2ce:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800b2d2:	4916      	ldr	r1, [pc, #88]	@ (800b32c <lwip_netconn_do_close+0x110>)
 800b2d4:	4814      	ldr	r0, [pc, #80]	@ (800b328 <lwip_netconn_do_close+0x10c>)
 800b2d6:	f00b fb39 	bl	801694c <iprintf>
        UNLOCK_TCPIP_CORE();
 800b2da:	4815      	ldr	r0, [pc, #84]	@ (800b330 <lwip_netconn_do_close+0x114>)
 800b2dc:	f00b f9eb 	bl	80166b6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	330c      	adds	r3, #12
 800b2e6:	2100      	movs	r1, #0
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f00b f94a 	bl	8016582 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b2ee:	4810      	ldr	r0, [pc, #64]	@ (800b330 <lwip_netconn_do_close+0x114>)
 800b2f0:	f00b f9d2 	bl	8016698 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	785b      	ldrb	r3, [r3, #1]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00b      	beq.n	800b316 <lwip_netconn_do_close+0xfa>
 800b2fe:	4b08      	ldr	r3, [pc, #32]	@ (800b320 <lwip_netconn_do_close+0x104>)
 800b300:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800b304:	4909      	ldr	r1, [pc, #36]	@ (800b32c <lwip_netconn_do_close+0x110>)
 800b306:	4808      	ldr	r0, [pc, #32]	@ (800b328 <lwip_netconn_do_close+0x10c>)
 800b308:	f00b fb20 	bl	801694c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b30c:	e003      	b.n	800b316 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	22f5      	movs	r2, #245	@ 0xf5
 800b312:	711a      	strb	r2, [r3, #4]
 800b314:	e000      	b.n	800b318 <lwip_netconn_do_close+0xfc>
      return;
 800b316:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	08017c4c 	.word	0x08017c4c
 800b324:	08017ff0 	.word	0x08017ff0
 800b328:	08017c90 	.word	0x08017c90
 800b32c:	0801800c 	.word	0x0801800c
 800b330:	20009998 	.word	0x20009998

0800b334 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d013      	beq.n	800b36a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00b      	beq.n	800b362 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4618      	mov	r0, r3
 800b350:	f001 fdea 	bl	800cf28 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	605a      	str	r2, [r3, #4]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b362:	6879      	ldr	r1, [r7, #4]
 800b364:	2006      	movs	r0, #6
 800b366:	f000 ff3b 	bl	800c1e0 <memp_free>
  }
}
 800b36a:	bf00      	nop
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d108      	bne.n	800b394 <netbuf_next+0x20>
 800b382:	4b11      	ldr	r3, [pc, #68]	@ (800b3c8 <netbuf_next+0x54>)
 800b384:	22e0      	movs	r2, #224	@ 0xe0
 800b386:	4911      	ldr	r1, [pc, #68]	@ (800b3cc <netbuf_next+0x58>)
 800b388:	4811      	ldr	r0, [pc, #68]	@ (800b3d0 <netbuf_next+0x5c>)
 800b38a:	f00b fadf 	bl	801694c <iprintf>
 800b38e:	f04f 33ff 	mov.w	r3, #4294967295
 800b392:	e014      	b.n	800b3be <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d102      	bne.n	800b3a4 <netbuf_next+0x30>
    return -1;
 800b39e:	f04f 33ff 	mov.w	r3, #4294967295
 800b3a2:	e00c      	b.n	800b3be <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d101      	bne.n	800b3bc <netbuf_next+0x48>
    return 1;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e000      	b.n	800b3be <netbuf_next+0x4a>
  }
  return 0;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	080181a4 	.word	0x080181a4
 800b3cc:	08018304 	.word	0x08018304
 800b3d0:	080181f4 	.word	0x080181f4

0800b3d4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b3de:	f008 fa01 	bl	80137e4 <sys_timeouts_sleeptime>
 800b3e2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ea:	d10b      	bne.n	800b404 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b3ec:	4813      	ldr	r0, [pc, #76]	@ (800b43c <tcpip_timeouts_mbox_fetch+0x68>)
 800b3ee:	f00b f962 	bl	80166b6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	6839      	ldr	r1, [r7, #0]
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f00b f838 	bl	801646c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b3fc:	480f      	ldr	r0, [pc, #60]	@ (800b43c <tcpip_timeouts_mbox_fetch+0x68>)
 800b3fe:	f00b f94b 	bl	8016698 <sys_mutex_lock>
    return;
 800b402:	e018      	b.n	800b436 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d102      	bne.n	800b410 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b40a:	f008 f9b1 	bl	8013770 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b40e:	e7e6      	b.n	800b3de <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b410:	480a      	ldr	r0, [pc, #40]	@ (800b43c <tcpip_timeouts_mbox_fetch+0x68>)
 800b412:	f00b f950 	bl	80166b6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	6839      	ldr	r1, [r7, #0]
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f00b f826 	bl	801646c <sys_arch_mbox_fetch>
 800b420:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b422:	4806      	ldr	r0, [pc, #24]	@ (800b43c <tcpip_timeouts_mbox_fetch+0x68>)
 800b424:	f00b f938 	bl	8016698 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b42e:	d102      	bne.n	800b436 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b430:	f008 f99e 	bl	8013770 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b434:	e7d3      	b.n	800b3de <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b436:	3710      	adds	r7, #16
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	20009998 	.word	0x20009998

0800b440 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b448:	4810      	ldr	r0, [pc, #64]	@ (800b48c <tcpip_thread+0x4c>)
 800b44a:	f00b f925 	bl	8016698 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b44e:	4b10      	ldr	r3, [pc, #64]	@ (800b490 <tcpip_thread+0x50>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d005      	beq.n	800b462 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b456:	4b0e      	ldr	r3, [pc, #56]	@ (800b490 <tcpip_thread+0x50>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a0e      	ldr	r2, [pc, #56]	@ (800b494 <tcpip_thread+0x54>)
 800b45c:	6812      	ldr	r2, [r2, #0]
 800b45e:	4610      	mov	r0, r2
 800b460:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b462:	f107 030c 	add.w	r3, r7, #12
 800b466:	4619      	mov	r1, r3
 800b468:	480b      	ldr	r0, [pc, #44]	@ (800b498 <tcpip_thread+0x58>)
 800b46a:	f7ff ffb3 	bl	800b3d4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d106      	bne.n	800b482 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b474:	4b09      	ldr	r3, [pc, #36]	@ (800b49c <tcpip_thread+0x5c>)
 800b476:	2291      	movs	r2, #145	@ 0x91
 800b478:	4909      	ldr	r1, [pc, #36]	@ (800b4a0 <tcpip_thread+0x60>)
 800b47a:	480a      	ldr	r0, [pc, #40]	@ (800b4a4 <tcpip_thread+0x64>)
 800b47c:	f00b fa66 	bl	801694c <iprintf>
      continue;
 800b480:	e003      	b.n	800b48a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	4618      	mov	r0, r3
 800b486:	f000 f80f 	bl	800b4a8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b48a:	e7ea      	b.n	800b462 <tcpip_thread+0x22>
 800b48c:	20009998 	.word	0x20009998
 800b490:	2000998c 	.word	0x2000998c
 800b494:	20009990 	.word	0x20009990
 800b498:	20009994 	.word	0x20009994
 800b49c:	0801833c 	.word	0x0801833c
 800b4a0:	0801836c 	.word	0x0801836c
 800b4a4:	0801838c 	.word	0x0801838c

0800b4a8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	d026      	beq.n	800b506 <tcpip_thread_handle_msg+0x5e>
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	dc2b      	bgt.n	800b514 <tcpip_thread_handle_msg+0x6c>
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <tcpip_thread_handle_msg+0x1e>
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d015      	beq.n	800b4f0 <tcpip_thread_handle_msg+0x48>
 800b4c4:	e026      	b.n	800b514 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	6850      	ldr	r0, [r2, #4]
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	6892      	ldr	r2, [r2, #8]
 800b4d2:	4611      	mov	r1, r2
 800b4d4:	4798      	blx	r3
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d004      	beq.n	800b4e6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f001 fd21 	bl	800cf28 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b4e6:	6879      	ldr	r1, [r7, #4]
 800b4e8:	2009      	movs	r0, #9
 800b4ea:	f000 fe79 	bl	800c1e0 <memp_free>
      break;
 800b4ee:	e018      	b.n	800b522 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	6892      	ldr	r2, [r2, #8]
 800b4f8:	4610      	mov	r0, r2
 800b4fa:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b4fc:	6879      	ldr	r1, [r7, #4]
 800b4fe:	2008      	movs	r0, #8
 800b500:	f000 fe6e 	bl	800c1e0 <memp_free>
      break;
 800b504:	e00d      	b.n	800b522 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	6892      	ldr	r2, [r2, #8]
 800b50e:	4610      	mov	r0, r2
 800b510:	4798      	blx	r3
      break;
 800b512:	e006      	b.n	800b522 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b514:	4b05      	ldr	r3, [pc, #20]	@ (800b52c <tcpip_thread_handle_msg+0x84>)
 800b516:	22cf      	movs	r2, #207	@ 0xcf
 800b518:	4905      	ldr	r1, [pc, #20]	@ (800b530 <tcpip_thread_handle_msg+0x88>)
 800b51a:	4806      	ldr	r0, [pc, #24]	@ (800b534 <tcpip_thread_handle_msg+0x8c>)
 800b51c:	f00b fa16 	bl	801694c <iprintf>
      break;
 800b520:	bf00      	nop
  }
}
 800b522:	bf00      	nop
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	0801833c 	.word	0x0801833c
 800b530:	0801836c 	.word	0x0801836c
 800b534:	0801838c 	.word	0x0801838c

0800b538 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b086      	sub	sp, #24
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b544:	481a      	ldr	r0, [pc, #104]	@ (800b5b0 <tcpip_inpkt+0x78>)
 800b546:	f00a ffd9 	bl	80164fc <sys_mbox_valid>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d105      	bne.n	800b55c <tcpip_inpkt+0x24>
 800b550:	4b18      	ldr	r3, [pc, #96]	@ (800b5b4 <tcpip_inpkt+0x7c>)
 800b552:	22fc      	movs	r2, #252	@ 0xfc
 800b554:	4918      	ldr	r1, [pc, #96]	@ (800b5b8 <tcpip_inpkt+0x80>)
 800b556:	4819      	ldr	r0, [pc, #100]	@ (800b5bc <tcpip_inpkt+0x84>)
 800b558:	f00b f9f8 	bl	801694c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b55c:	2009      	movs	r0, #9
 800b55e:	f000 fdc9 	bl	800c0f4 <memp_malloc>
 800b562:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d102      	bne.n	800b570 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b56a:	f04f 33ff 	mov.w	r3, #4294967295
 800b56e:	e01a      	b.n	800b5a6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	2200      	movs	r2, #0
 800b574:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b588:	6979      	ldr	r1, [r7, #20]
 800b58a:	4809      	ldr	r0, [pc, #36]	@ (800b5b0 <tcpip_inpkt+0x78>)
 800b58c:	f00a ff54 	bl	8016438 <sys_mbox_trypost>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d006      	beq.n	800b5a4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b596:	6979      	ldr	r1, [r7, #20]
 800b598:	2009      	movs	r0, #9
 800b59a:	f000 fe21 	bl	800c1e0 <memp_free>
    return ERR_MEM;
 800b59e:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a2:	e000      	b.n	800b5a6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b5a4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3718      	adds	r7, #24
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	20009994 	.word	0x20009994
 800b5b4:	0801833c 	.word	0x0801833c
 800b5b8:	080183b4 	.word	0x080183b4
 800b5bc:	0801838c 	.word	0x0801838c

0800b5c0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b5d0:	f003 0318 	and.w	r3, r3, #24
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d006      	beq.n	800b5e6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b5d8:	4a08      	ldr	r2, [pc, #32]	@ (800b5fc <tcpip_input+0x3c>)
 800b5da:	6839      	ldr	r1, [r7, #0]
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7ff ffab 	bl	800b538 <tcpip_inpkt>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	e005      	b.n	800b5f2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b5e6:	4a06      	ldr	r2, [pc, #24]	@ (800b600 <tcpip_input+0x40>)
 800b5e8:	6839      	ldr	r1, [r7, #0]
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7ff ffa4 	bl	800b538 <tcpip_inpkt>
 800b5f0:	4603      	mov	r3, r0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	08016235 	.word	0x08016235
 800b600:	0801513d 	.word	0x0801513d

0800b604 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b60e:	4819      	ldr	r0, [pc, #100]	@ (800b674 <tcpip_try_callback+0x70>)
 800b610:	f00a ff74 	bl	80164fc <sys_mbox_valid>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d106      	bne.n	800b628 <tcpip_try_callback+0x24>
 800b61a:	4b17      	ldr	r3, [pc, #92]	@ (800b678 <tcpip_try_callback+0x74>)
 800b61c:	f240 125d 	movw	r2, #349	@ 0x15d
 800b620:	4916      	ldr	r1, [pc, #88]	@ (800b67c <tcpip_try_callback+0x78>)
 800b622:	4817      	ldr	r0, [pc, #92]	@ (800b680 <tcpip_try_callback+0x7c>)
 800b624:	f00b f992 	bl	801694c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b628:	2008      	movs	r0, #8
 800b62a:	f000 fd63 	bl	800c0f4 <memp_malloc>
 800b62e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d102      	bne.n	800b63c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b636:	f04f 33ff 	mov.w	r3, #4294967295
 800b63a:	e017      	b.n	800b66c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2201      	movs	r2, #1
 800b640:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	683a      	ldr	r2, [r7, #0]
 800b64c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b64e:	68f9      	ldr	r1, [r7, #12]
 800b650:	4808      	ldr	r0, [pc, #32]	@ (800b674 <tcpip_try_callback+0x70>)
 800b652:	f00a fef1 	bl	8016438 <sys_mbox_trypost>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d006      	beq.n	800b66a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b65c:	68f9      	ldr	r1, [r7, #12]
 800b65e:	2008      	movs	r0, #8
 800b660:	f000 fdbe 	bl	800c1e0 <memp_free>
    return ERR_MEM;
 800b664:	f04f 33ff 	mov.w	r3, #4294967295
 800b668:	e000      	b.n	800b66c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3710      	adds	r7, #16
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	20009994 	.word	0x20009994
 800b678:	0801833c 	.word	0x0801833c
 800b67c:	080183b4 	.word	0x080183b4
 800b680:	0801838c 	.word	0x0801838c

0800b684 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b690:	4806      	ldr	r0, [pc, #24]	@ (800b6ac <tcpip_send_msg_wait_sem+0x28>)
 800b692:	f00b f801 	bl	8016698 <sys_mutex_lock>
  fn(apimsg);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	68b8      	ldr	r0, [r7, #8]
 800b69a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b69c:	4803      	ldr	r0, [pc, #12]	@ (800b6ac <tcpip_send_msg_wait_sem+0x28>)
 800b69e:	f00b f80a 	bl	80166b6 <sys_mutex_unlock>
  return ERR_OK;
 800b6a2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	20009998 	.word	0x20009998

0800b6b0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af02      	add	r7, sp, #8
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b6ba:	f000 f871 	bl	800b7a0 <lwip_init>

  tcpip_init_done = initfunc;
 800b6be:	4a17      	ldr	r2, [pc, #92]	@ (800b71c <tcpip_init+0x6c>)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b6c4:	4a16      	ldr	r2, [pc, #88]	@ (800b720 <tcpip_init+0x70>)
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b6ca:	2106      	movs	r1, #6
 800b6cc:	4815      	ldr	r0, [pc, #84]	@ (800b724 <tcpip_init+0x74>)
 800b6ce:	f00a fe87 	bl	80163e0 <sys_mbox_new>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d006      	beq.n	800b6e6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b6d8:	4b13      	ldr	r3, [pc, #76]	@ (800b728 <tcpip_init+0x78>)
 800b6da:	f240 2261 	movw	r2, #609	@ 0x261
 800b6de:	4913      	ldr	r1, [pc, #76]	@ (800b72c <tcpip_init+0x7c>)
 800b6e0:	4813      	ldr	r0, [pc, #76]	@ (800b730 <tcpip_init+0x80>)
 800b6e2:	f00b f933 	bl	801694c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b6e6:	4813      	ldr	r0, [pc, #76]	@ (800b734 <tcpip_init+0x84>)
 800b6e8:	f00a ffc0 	bl	801666c <sys_mutex_new>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d006      	beq.n	800b700 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b6f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b728 <tcpip_init+0x78>)
 800b6f4:	f240 2265 	movw	r2, #613	@ 0x265
 800b6f8:	490f      	ldr	r1, [pc, #60]	@ (800b738 <tcpip_init+0x88>)
 800b6fa:	480d      	ldr	r0, [pc, #52]	@ (800b730 <tcpip_init+0x80>)
 800b6fc:	f00b f926 	bl	801694c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b700:	2318      	movs	r3, #24
 800b702:	9300      	str	r3, [sp, #0]
 800b704:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b708:	2200      	movs	r2, #0
 800b70a:	490c      	ldr	r1, [pc, #48]	@ (800b73c <tcpip_init+0x8c>)
 800b70c:	480c      	ldr	r0, [pc, #48]	@ (800b740 <tcpip_init+0x90>)
 800b70e:	f00a ffdf 	bl	80166d0 <sys_thread_new>
}
 800b712:	bf00      	nop
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	2000998c 	.word	0x2000998c
 800b720:	20009990 	.word	0x20009990
 800b724:	20009994 	.word	0x20009994
 800b728:	0801833c 	.word	0x0801833c
 800b72c:	080183c4 	.word	0x080183c4
 800b730:	0801838c 	.word	0x0801838c
 800b734:	20009998 	.word	0x20009998
 800b738:	080183e8 	.word	0x080183e8
 800b73c:	0800b441 	.word	0x0800b441
 800b740:	0801840c 	.word	0x0801840c

0800b744 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	4603      	mov	r3, r0
 800b74c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b74e:	88fb      	ldrh	r3, [r7, #6]
 800b750:	021b      	lsls	r3, r3, #8
 800b752:	b21a      	sxth	r2, r3
 800b754:	88fb      	ldrh	r3, [r7, #6]
 800b756:	0a1b      	lsrs	r3, r3, #8
 800b758:	b29b      	uxth	r3, r3
 800b75a:	b21b      	sxth	r3, r3
 800b75c:	4313      	orrs	r3, r2
 800b75e:	b21b      	sxth	r3, r3
 800b760:	b29b      	uxth	r3, r3
}
 800b762:	4618      	mov	r0, r3
 800b764:	370c      	adds	r7, #12
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr

0800b76e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b76e:	b480      	push	{r7}
 800b770:	b083      	sub	sp, #12
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	061a      	lsls	r2, r3, #24
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	021b      	lsls	r3, r3, #8
 800b77e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b782:	431a      	orrs	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	0a1b      	lsrs	r3, r3, #8
 800b788:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b78c:	431a      	orrs	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	0e1b      	lsrs	r3, r3, #24
 800b792:	4313      	orrs	r3, r2
}
 800b794:	4618      	mov	r0, r3
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr

0800b7a0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b7aa:	f00a ff53 	bl	8016654 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b7ae:	f000 f8d5 	bl	800b95c <mem_init>
  memp_init();
 800b7b2:	f000 fc31 	bl	800c018 <memp_init>
  pbuf_init();
  netif_init();
 800b7b6:	f000 fd3d 	bl	800c234 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b7ba:	f008 f84b 	bl	8013854 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b7be:	f001 fe4d 	bl	800d45c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b7c2:	f007 ff8d 	bl	80136e0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b7c6:	bf00      	nop
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
	...

0800b7d0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b7da:	4b05      	ldr	r3, [pc, #20]	@ (800b7f0 <ptr_to_mem+0x20>)
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	88fb      	ldrh	r3, [r7, #6]
 800b7e0:	4413      	add	r3, r2
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	370c      	adds	r7, #12
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	2000c1c8 	.word	0x2000c1c8

0800b7f4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b7fc:	4b05      	ldr	r3, [pc, #20]	@ (800b814 <mem_to_ptr+0x20>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	1ad3      	subs	r3, r2, r3
 800b804:	b29b      	uxth	r3, r3
}
 800b806:	4618      	mov	r0, r3
 800b808:	370c      	adds	r7, #12
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop
 800b814:	2000c1c8 	.word	0x2000c1c8

0800b818 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b818:	b590      	push	{r4, r7, lr}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b820:	4b45      	ldr	r3, [pc, #276]	@ (800b938 <plug_holes+0x120>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	429a      	cmp	r2, r3
 800b828:	d206      	bcs.n	800b838 <plug_holes+0x20>
 800b82a:	4b44      	ldr	r3, [pc, #272]	@ (800b93c <plug_holes+0x124>)
 800b82c:	f240 12df 	movw	r2, #479	@ 0x1df
 800b830:	4943      	ldr	r1, [pc, #268]	@ (800b940 <plug_holes+0x128>)
 800b832:	4844      	ldr	r0, [pc, #272]	@ (800b944 <plug_holes+0x12c>)
 800b834:	f00b f88a 	bl	801694c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b838:	4b43      	ldr	r3, [pc, #268]	@ (800b948 <plug_holes+0x130>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d306      	bcc.n	800b850 <plug_holes+0x38>
 800b842:	4b3e      	ldr	r3, [pc, #248]	@ (800b93c <plug_holes+0x124>)
 800b844:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b848:	4940      	ldr	r1, [pc, #256]	@ (800b94c <plug_holes+0x134>)
 800b84a:	483e      	ldr	r0, [pc, #248]	@ (800b944 <plug_holes+0x12c>)
 800b84c:	f00b f87e 	bl	801694c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	791b      	ldrb	r3, [r3, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d006      	beq.n	800b866 <plug_holes+0x4e>
 800b858:	4b38      	ldr	r3, [pc, #224]	@ (800b93c <plug_holes+0x124>)
 800b85a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b85e:	493c      	ldr	r1, [pc, #240]	@ (800b950 <plug_holes+0x138>)
 800b860:	4838      	ldr	r0, [pc, #224]	@ (800b944 <plug_holes+0x12c>)
 800b862:	f00b f873 	bl	801694c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b86e:	d906      	bls.n	800b87e <plug_holes+0x66>
 800b870:	4b32      	ldr	r3, [pc, #200]	@ (800b93c <plug_holes+0x124>)
 800b872:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b876:	4937      	ldr	r1, [pc, #220]	@ (800b954 <plug_holes+0x13c>)
 800b878:	4832      	ldr	r0, [pc, #200]	@ (800b944 <plug_holes+0x12c>)
 800b87a:	f00b f867 	bl	801694c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	881b      	ldrh	r3, [r3, #0]
 800b882:	4618      	mov	r0, r3
 800b884:	f7ff ffa4 	bl	800b7d0 <ptr_to_mem>
 800b888:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d024      	beq.n	800b8dc <plug_holes+0xc4>
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	791b      	ldrb	r3, [r3, #4]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d120      	bne.n	800b8dc <plug_holes+0xc4>
 800b89a:	4b2b      	ldr	r3, [pc, #172]	@ (800b948 <plug_holes+0x130>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d01b      	beq.n	800b8dc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b8a4:	4b2c      	ldr	r3, [pc, #176]	@ (800b958 <plug_holes+0x140>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d102      	bne.n	800b8b4 <plug_holes+0x9c>
      lfree = mem;
 800b8ae:	4a2a      	ldr	r2, [pc, #168]	@ (800b958 <plug_holes+0x140>)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	881a      	ldrh	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	881b      	ldrh	r3, [r3, #0]
 800b8c0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b8c4:	d00a      	beq.n	800b8dc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	881b      	ldrh	r3, [r3, #0]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7ff ff80 	bl	800b7d0 <ptr_to_mem>
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f7ff ff8e 	bl	800b7f4 <mem_to_ptr>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	885b      	ldrh	r3, [r3, #2]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7ff ff75 	bl	800b7d0 <ptr_to_mem>
 800b8e6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d01f      	beq.n	800b930 <plug_holes+0x118>
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	791b      	ldrb	r3, [r3, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d11b      	bne.n	800b930 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b8f8:	4b17      	ldr	r3, [pc, #92]	@ (800b958 <plug_holes+0x140>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d102      	bne.n	800b908 <plug_holes+0xf0>
      lfree = pmem;
 800b902:	4a15      	ldr	r2, [pc, #84]	@ (800b958 <plug_holes+0x140>)
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	881a      	ldrh	r2, [r3, #0]
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	881b      	ldrh	r3, [r3, #0]
 800b914:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b918:	d00a      	beq.n	800b930 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	4618      	mov	r0, r3
 800b920:	f7ff ff56 	bl	800b7d0 <ptr_to_mem>
 800b924:	4604      	mov	r4, r0
 800b926:	68b8      	ldr	r0, [r7, #8]
 800b928:	f7ff ff64 	bl	800b7f4 <mem_to_ptr>
 800b92c:	4603      	mov	r3, r0
 800b92e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b930:	bf00      	nop
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	bd90      	pop	{r4, r7, pc}
 800b938:	2000c1c8 	.word	0x2000c1c8
 800b93c:	0801841c 	.word	0x0801841c
 800b940:	0801844c 	.word	0x0801844c
 800b944:	08018464 	.word	0x08018464
 800b948:	2000c1cc 	.word	0x2000c1cc
 800b94c:	0801848c 	.word	0x0801848c
 800b950:	080184a8 	.word	0x080184a8
 800b954:	080184c4 	.word	0x080184c4
 800b958:	2000c1d4 	.word	0x2000c1d4

0800b95c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b962:	4b1f      	ldr	r3, [pc, #124]	@ (800b9e0 <mem_init+0x84>)
 800b964:	3303      	adds	r3, #3
 800b966:	f023 0303 	bic.w	r3, r3, #3
 800b96a:	461a      	mov	r2, r3
 800b96c:	4b1d      	ldr	r3, [pc, #116]	@ (800b9e4 <mem_init+0x88>)
 800b96e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b970:	4b1c      	ldr	r3, [pc, #112]	@ (800b9e4 <mem_init+0x88>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b97c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b98a:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800b98e:	f7ff ff1f 	bl	800b7d0 <ptr_to_mem>
 800b992:	4603      	mov	r3, r0
 800b994:	4a14      	ldr	r2, [pc, #80]	@ (800b9e8 <mem_init+0x8c>)
 800b996:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b998:	4b13      	ldr	r3, [pc, #76]	@ (800b9e8 <mem_init+0x8c>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2201      	movs	r2, #1
 800b99e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b9a0:	4b11      	ldr	r3, [pc, #68]	@ (800b9e8 <mem_init+0x8c>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b9a8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b9aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b9e8 <mem_init+0x8c>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b9b2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b9b4:	4b0b      	ldr	r3, [pc, #44]	@ (800b9e4 <mem_init+0x88>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a0c      	ldr	r2, [pc, #48]	@ (800b9ec <mem_init+0x90>)
 800b9ba:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b9bc:	480c      	ldr	r0, [pc, #48]	@ (800b9f0 <mem_init+0x94>)
 800b9be:	f00a fe55 	bl	801666c <sys_mutex_new>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d006      	beq.n	800b9d6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b9c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b9f4 <mem_init+0x98>)
 800b9ca:	f240 221f 	movw	r2, #543	@ 0x21f
 800b9ce:	490a      	ldr	r1, [pc, #40]	@ (800b9f8 <mem_init+0x9c>)
 800b9d0:	480a      	ldr	r0, [pc, #40]	@ (800b9fc <mem_init+0xa0>)
 800b9d2:	f00a ffbb 	bl	801694c <iprintf>
  }
}
 800b9d6:	bf00      	nop
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	200099b4 	.word	0x200099b4
 800b9e4:	2000c1c8 	.word	0x2000c1c8
 800b9e8:	2000c1cc 	.word	0x2000c1cc
 800b9ec:	2000c1d4 	.word	0x2000c1d4
 800b9f0:	2000c1d0 	.word	0x2000c1d0
 800b9f4:	0801841c 	.word	0x0801841c
 800b9f8:	080184f0 	.word	0x080184f0
 800b9fc:	08018464 	.word	0x08018464

0800ba00 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b086      	sub	sp, #24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f7ff fef3 	bl	800b7f4 <mem_to_ptr>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	881b      	ldrh	r3, [r3, #0]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7ff feda 	bl	800b7d0 <ptr_to_mem>
 800ba1c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	885b      	ldrh	r3, [r3, #2]
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7ff fed4 	bl	800b7d0 <ptr_to_mem>
 800ba28:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	881b      	ldrh	r3, [r3, #0]
 800ba2e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ba32:	d818      	bhi.n	800ba66 <mem_link_valid+0x66>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	885b      	ldrh	r3, [r3, #2]
 800ba38:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ba3c:	d813      	bhi.n	800ba66 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ba42:	8afa      	ldrh	r2, [r7, #22]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d004      	beq.n	800ba52 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	881b      	ldrh	r3, [r3, #0]
 800ba4c:	8afa      	ldrh	r2, [r7, #22]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d109      	bne.n	800ba66 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ba52:	4b08      	ldr	r3, [pc, #32]	@ (800ba74 <mem_link_valid+0x74>)
 800ba54:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba56:	693a      	ldr	r2, [r7, #16]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d006      	beq.n	800ba6a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	885b      	ldrh	r3, [r3, #2]
 800ba60:	8afa      	ldrh	r2, [r7, #22]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d001      	beq.n	800ba6a <mem_link_valid+0x6a>
    return 0;
 800ba66:	2300      	movs	r3, #0
 800ba68:	e000      	b.n	800ba6c <mem_link_valid+0x6c>
  }
  return 1;
 800ba6a:	2301      	movs	r3, #1
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	2000c1cc 	.word	0x2000c1cc

0800ba78 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b088      	sub	sp, #32
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d070      	beq.n	800bb68 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f003 0303 	and.w	r3, r3, #3
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00d      	beq.n	800baac <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ba90:	4b37      	ldr	r3, [pc, #220]	@ (800bb70 <mem_free+0xf8>)
 800ba92:	f240 2273 	movw	r2, #627	@ 0x273
 800ba96:	4937      	ldr	r1, [pc, #220]	@ (800bb74 <mem_free+0xfc>)
 800ba98:	4837      	ldr	r0, [pc, #220]	@ (800bb78 <mem_free+0x100>)
 800ba9a:	f00a ff57 	bl	801694c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba9e:	f00a fe37 	bl	8016710 <sys_arch_protect>
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f00a fe41 	bl	801672c <sys_arch_unprotect>
    return;
 800baaa:	e05e      	b.n	800bb6a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	3b08      	subs	r3, #8
 800bab0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bab2:	4b32      	ldr	r3, [pc, #200]	@ (800bb7c <mem_free+0x104>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	69fa      	ldr	r2, [r7, #28]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d306      	bcc.n	800baca <mem_free+0x52>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f103 020c 	add.w	r2, r3, #12
 800bac2:	4b2f      	ldr	r3, [pc, #188]	@ (800bb80 <mem_free+0x108>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d90d      	bls.n	800bae6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800baca:	4b29      	ldr	r3, [pc, #164]	@ (800bb70 <mem_free+0xf8>)
 800bacc:	f240 227f 	movw	r2, #639	@ 0x27f
 800bad0:	492c      	ldr	r1, [pc, #176]	@ (800bb84 <mem_free+0x10c>)
 800bad2:	4829      	ldr	r0, [pc, #164]	@ (800bb78 <mem_free+0x100>)
 800bad4:	f00a ff3a 	bl	801694c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bad8:	f00a fe1a 	bl	8016710 <sys_arch_protect>
 800badc:	6138      	str	r0, [r7, #16]
 800bade:	6938      	ldr	r0, [r7, #16]
 800bae0:	f00a fe24 	bl	801672c <sys_arch_unprotect>
    return;
 800bae4:	e041      	b.n	800bb6a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bae6:	4828      	ldr	r0, [pc, #160]	@ (800bb88 <mem_free+0x110>)
 800bae8:	f00a fdd6 	bl	8016698 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	791b      	ldrb	r3, [r3, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d110      	bne.n	800bb16 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800baf4:	4b1e      	ldr	r3, [pc, #120]	@ (800bb70 <mem_free+0xf8>)
 800baf6:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800bafa:	4924      	ldr	r1, [pc, #144]	@ (800bb8c <mem_free+0x114>)
 800bafc:	481e      	ldr	r0, [pc, #120]	@ (800bb78 <mem_free+0x100>)
 800bafe:	f00a ff25 	bl	801694c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bb02:	4821      	ldr	r0, [pc, #132]	@ (800bb88 <mem_free+0x110>)
 800bb04:	f00a fdd7 	bl	80166b6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb08:	f00a fe02 	bl	8016710 <sys_arch_protect>
 800bb0c:	6178      	str	r0, [r7, #20]
 800bb0e:	6978      	ldr	r0, [r7, #20]
 800bb10:	f00a fe0c 	bl	801672c <sys_arch_unprotect>
    return;
 800bb14:	e029      	b.n	800bb6a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bb16:	69f8      	ldr	r0, [r7, #28]
 800bb18:	f7ff ff72 	bl	800ba00 <mem_link_valid>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d110      	bne.n	800bb44 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bb22:	4b13      	ldr	r3, [pc, #76]	@ (800bb70 <mem_free+0xf8>)
 800bb24:	f240 2295 	movw	r2, #661	@ 0x295
 800bb28:	4919      	ldr	r1, [pc, #100]	@ (800bb90 <mem_free+0x118>)
 800bb2a:	4813      	ldr	r0, [pc, #76]	@ (800bb78 <mem_free+0x100>)
 800bb2c:	f00a ff0e 	bl	801694c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bb30:	4815      	ldr	r0, [pc, #84]	@ (800bb88 <mem_free+0x110>)
 800bb32:	f00a fdc0 	bl	80166b6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb36:	f00a fdeb 	bl	8016710 <sys_arch_protect>
 800bb3a:	61b8      	str	r0, [r7, #24]
 800bb3c:	69b8      	ldr	r0, [r7, #24]
 800bb3e:	f00a fdf5 	bl	801672c <sys_arch_unprotect>
    return;
 800bb42:	e012      	b.n	800bb6a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	2200      	movs	r2, #0
 800bb48:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bb4a:	4b12      	ldr	r3, [pc, #72]	@ (800bb94 <mem_free+0x11c>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	69fa      	ldr	r2, [r7, #28]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d202      	bcs.n	800bb5a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bb54:	4a0f      	ldr	r2, [pc, #60]	@ (800bb94 <mem_free+0x11c>)
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bb5a:	69f8      	ldr	r0, [r7, #28]
 800bb5c:	f7ff fe5c 	bl	800b818 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bb60:	4809      	ldr	r0, [pc, #36]	@ (800bb88 <mem_free+0x110>)
 800bb62:	f00a fda8 	bl	80166b6 <sys_mutex_unlock>
 800bb66:	e000      	b.n	800bb6a <mem_free+0xf2>
    return;
 800bb68:	bf00      	nop
}
 800bb6a:	3720      	adds	r7, #32
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	0801841c 	.word	0x0801841c
 800bb74:	0801850c 	.word	0x0801850c
 800bb78:	08018464 	.word	0x08018464
 800bb7c:	2000c1c8 	.word	0x2000c1c8
 800bb80:	2000c1cc 	.word	0x2000c1cc
 800bb84:	08018530 	.word	0x08018530
 800bb88:	2000c1d0 	.word	0x2000c1d0
 800bb8c:	0801854c 	.word	0x0801854c
 800bb90:	08018574 	.word	0x08018574
 800bb94:	2000c1d4 	.word	0x2000c1d4

0800bb98 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b088      	sub	sp, #32
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	460b      	mov	r3, r1
 800bba2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bba4:	887b      	ldrh	r3, [r7, #2]
 800bba6:	3303      	adds	r3, #3
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	f023 0303 	bic.w	r3, r3, #3
 800bbae:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bbb0:	8bfb      	ldrh	r3, [r7, #30]
 800bbb2:	2b0b      	cmp	r3, #11
 800bbb4:	d801      	bhi.n	800bbba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bbb6:	230c      	movs	r3, #12
 800bbb8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bbba:	8bfb      	ldrh	r3, [r7, #30]
 800bbbc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bbc0:	d803      	bhi.n	800bbca <mem_trim+0x32>
 800bbc2:	8bfa      	ldrh	r2, [r7, #30]
 800bbc4:	887b      	ldrh	r3, [r7, #2]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d201      	bcs.n	800bbce <mem_trim+0x36>
    return NULL;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	e0d8      	b.n	800bd80 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bbce:	4b6e      	ldr	r3, [pc, #440]	@ (800bd88 <mem_trim+0x1f0>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d304      	bcc.n	800bbe2 <mem_trim+0x4a>
 800bbd8:	4b6c      	ldr	r3, [pc, #432]	@ (800bd8c <mem_trim+0x1f4>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d306      	bcc.n	800bbf0 <mem_trim+0x58>
 800bbe2:	4b6b      	ldr	r3, [pc, #428]	@ (800bd90 <mem_trim+0x1f8>)
 800bbe4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800bbe8:	496a      	ldr	r1, [pc, #424]	@ (800bd94 <mem_trim+0x1fc>)
 800bbea:	486b      	ldr	r0, [pc, #428]	@ (800bd98 <mem_trim+0x200>)
 800bbec:	f00a feae 	bl	801694c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bbf0:	4b65      	ldr	r3, [pc, #404]	@ (800bd88 <mem_trim+0x1f0>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d304      	bcc.n	800bc04 <mem_trim+0x6c>
 800bbfa:	4b64      	ldr	r3, [pc, #400]	@ (800bd8c <mem_trim+0x1f4>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d307      	bcc.n	800bc14 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc04:	f00a fd84 	bl	8016710 <sys_arch_protect>
 800bc08:	60b8      	str	r0, [r7, #8]
 800bc0a:	68b8      	ldr	r0, [r7, #8]
 800bc0c:	f00a fd8e 	bl	801672c <sys_arch_unprotect>
    return rmem;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	e0b5      	b.n	800bd80 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	3b08      	subs	r3, #8
 800bc18:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bc1a:	69b8      	ldr	r0, [r7, #24]
 800bc1c:	f7ff fdea 	bl	800b7f4 <mem_to_ptr>
 800bc20:	4603      	mov	r3, r0
 800bc22:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	881a      	ldrh	r2, [r3, #0]
 800bc28:	8afb      	ldrh	r3, [r7, #22]
 800bc2a:	1ad3      	subs	r3, r2, r3
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	3b08      	subs	r3, #8
 800bc30:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bc32:	8bfa      	ldrh	r2, [r7, #30]
 800bc34:	8abb      	ldrh	r3, [r7, #20]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d906      	bls.n	800bc48 <mem_trim+0xb0>
 800bc3a:	4b55      	ldr	r3, [pc, #340]	@ (800bd90 <mem_trim+0x1f8>)
 800bc3c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800bc40:	4956      	ldr	r1, [pc, #344]	@ (800bd9c <mem_trim+0x204>)
 800bc42:	4855      	ldr	r0, [pc, #340]	@ (800bd98 <mem_trim+0x200>)
 800bc44:	f00a fe82 	bl	801694c <iprintf>
  if (newsize > size) {
 800bc48:	8bfa      	ldrh	r2, [r7, #30]
 800bc4a:	8abb      	ldrh	r3, [r7, #20]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d901      	bls.n	800bc54 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bc50:	2300      	movs	r3, #0
 800bc52:	e095      	b.n	800bd80 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bc54:	8bfa      	ldrh	r2, [r7, #30]
 800bc56:	8abb      	ldrh	r3, [r7, #20]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d101      	bne.n	800bc60 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	e08f      	b.n	800bd80 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bc60:	484f      	ldr	r0, [pc, #316]	@ (800bda0 <mem_trim+0x208>)
 800bc62:	f00a fd19 	bl	8016698 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	881b      	ldrh	r3, [r3, #0]
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7ff fdb0 	bl	800b7d0 <ptr_to_mem>
 800bc70:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	791b      	ldrb	r3, [r3, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d13f      	bne.n	800bcfa <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	881b      	ldrh	r3, [r3, #0]
 800bc7e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bc82:	d106      	bne.n	800bc92 <mem_trim+0xfa>
 800bc84:	4b42      	ldr	r3, [pc, #264]	@ (800bd90 <mem_trim+0x1f8>)
 800bc86:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800bc8a:	4946      	ldr	r1, [pc, #280]	@ (800bda4 <mem_trim+0x20c>)
 800bc8c:	4842      	ldr	r0, [pc, #264]	@ (800bd98 <mem_trim+0x200>)
 800bc8e:	f00a fe5d 	bl	801694c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	881b      	ldrh	r3, [r3, #0]
 800bc96:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bc98:	8afa      	ldrh	r2, [r7, #22]
 800bc9a:	8bfb      	ldrh	r3, [r7, #30]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	3308      	adds	r3, #8
 800bca2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bca4:	4b40      	ldr	r3, [pc, #256]	@ (800bda8 <mem_trim+0x210>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	693a      	ldr	r2, [r7, #16]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d106      	bne.n	800bcbc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bcae:	89fb      	ldrh	r3, [r7, #14]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7ff fd8d 	bl	800b7d0 <ptr_to_mem>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	4a3b      	ldr	r2, [pc, #236]	@ (800bda8 <mem_trim+0x210>)
 800bcba:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bcbc:	89fb      	ldrh	r3, [r7, #14]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7ff fd86 	bl	800b7d0 <ptr_to_mem>
 800bcc4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	89ba      	ldrh	r2, [r7, #12]
 800bcd0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	8afa      	ldrh	r2, [r7, #22]
 800bcd6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	89fa      	ldrh	r2, [r7, #14]
 800bcdc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	881b      	ldrh	r3, [r3, #0]
 800bce2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bce6:	d047      	beq.n	800bd78 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	881b      	ldrh	r3, [r3, #0]
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7ff fd6f 	bl	800b7d0 <ptr_to_mem>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	89fb      	ldrh	r3, [r7, #14]
 800bcf6:	8053      	strh	r3, [r2, #2]
 800bcf8:	e03e      	b.n	800bd78 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bcfa:	8bfb      	ldrh	r3, [r7, #30]
 800bcfc:	f103 0214 	add.w	r2, r3, #20
 800bd00:	8abb      	ldrh	r3, [r7, #20]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d838      	bhi.n	800bd78 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bd06:	8afa      	ldrh	r2, [r7, #22]
 800bd08:	8bfb      	ldrh	r3, [r7, #30]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	3308      	adds	r3, #8
 800bd10:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	881b      	ldrh	r3, [r3, #0]
 800bd16:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bd1a:	d106      	bne.n	800bd2a <mem_trim+0x192>
 800bd1c:	4b1c      	ldr	r3, [pc, #112]	@ (800bd90 <mem_trim+0x1f8>)
 800bd1e:	f240 3216 	movw	r2, #790	@ 0x316
 800bd22:	4920      	ldr	r1, [pc, #128]	@ (800bda4 <mem_trim+0x20c>)
 800bd24:	481c      	ldr	r0, [pc, #112]	@ (800bd98 <mem_trim+0x200>)
 800bd26:	f00a fe11 	bl	801694c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bd2a:	89fb      	ldrh	r3, [r7, #14]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff fd4f 	bl	800b7d0 <ptr_to_mem>
 800bd32:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bd34:	4b1c      	ldr	r3, [pc, #112]	@ (800bda8 <mem_trim+0x210>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	693a      	ldr	r2, [r7, #16]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d202      	bcs.n	800bd44 <mem_trim+0x1ac>
      lfree = mem2;
 800bd3e:	4a1a      	ldr	r2, [pc, #104]	@ (800bda8 <mem_trim+0x210>)
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	2200      	movs	r2, #0
 800bd48:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	881a      	ldrh	r2, [r3, #0]
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	8afa      	ldrh	r2, [r7, #22]
 800bd56:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	89fa      	ldrh	r2, [r7, #14]
 800bd5c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	881b      	ldrh	r3, [r3, #0]
 800bd62:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bd66:	d007      	beq.n	800bd78 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	881b      	ldrh	r3, [r3, #0]
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7ff fd2f 	bl	800b7d0 <ptr_to_mem>
 800bd72:	4602      	mov	r2, r0
 800bd74:	89fb      	ldrh	r3, [r7, #14]
 800bd76:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bd78:	4809      	ldr	r0, [pc, #36]	@ (800bda0 <mem_trim+0x208>)
 800bd7a:	f00a fc9c 	bl	80166b6 <sys_mutex_unlock>
  return rmem;
 800bd7e:	687b      	ldr	r3, [r7, #4]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3720      	adds	r7, #32
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	2000c1c8 	.word	0x2000c1c8
 800bd8c:	2000c1cc 	.word	0x2000c1cc
 800bd90:	0801841c 	.word	0x0801841c
 800bd94:	080185a8 	.word	0x080185a8
 800bd98:	08018464 	.word	0x08018464
 800bd9c:	080185c0 	.word	0x080185c0
 800bda0:	2000c1d0 	.word	0x2000c1d0
 800bda4:	080185e0 	.word	0x080185e0
 800bda8:	2000c1d4 	.word	0x2000c1d4

0800bdac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b088      	sub	sp, #32
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bdb6:	88fb      	ldrh	r3, [r7, #6]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d101      	bne.n	800bdc0 <mem_malloc+0x14>
    return NULL;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	e0e2      	b.n	800bf86 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bdc0:	88fb      	ldrh	r3, [r7, #6]
 800bdc2:	3303      	adds	r3, #3
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	f023 0303 	bic.w	r3, r3, #3
 800bdca:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bdcc:	8bbb      	ldrh	r3, [r7, #28]
 800bdce:	2b0b      	cmp	r3, #11
 800bdd0:	d801      	bhi.n	800bdd6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bdd2:	230c      	movs	r3, #12
 800bdd4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bdd6:	8bbb      	ldrh	r3, [r7, #28]
 800bdd8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bddc:	d803      	bhi.n	800bde6 <mem_malloc+0x3a>
 800bdde:	8bba      	ldrh	r2, [r7, #28]
 800bde0:	88fb      	ldrh	r3, [r7, #6]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d201      	bcs.n	800bdea <mem_malloc+0x3e>
    return NULL;
 800bde6:	2300      	movs	r3, #0
 800bde8:	e0cd      	b.n	800bf86 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bdea:	4869      	ldr	r0, [pc, #420]	@ (800bf90 <mem_malloc+0x1e4>)
 800bdec:	f00a fc54 	bl	8016698 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bdf0:	4b68      	ldr	r3, [pc, #416]	@ (800bf94 <mem_malloc+0x1e8>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7ff fcfd 	bl	800b7f4 <mem_to_ptr>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	83fb      	strh	r3, [r7, #30]
 800bdfe:	e0b7      	b.n	800bf70 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800be00:	8bfb      	ldrh	r3, [r7, #30]
 800be02:	4618      	mov	r0, r3
 800be04:	f7ff fce4 	bl	800b7d0 <ptr_to_mem>
 800be08:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	791b      	ldrb	r3, [r3, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	f040 80a7 	bne.w	800bf62 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	881b      	ldrh	r3, [r3, #0]
 800be18:	461a      	mov	r2, r3
 800be1a:	8bfb      	ldrh	r3, [r7, #30]
 800be1c:	1ad3      	subs	r3, r2, r3
 800be1e:	f1a3 0208 	sub.w	r2, r3, #8
 800be22:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800be24:	429a      	cmp	r2, r3
 800be26:	f0c0 809c 	bcc.w	800bf62 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	881b      	ldrh	r3, [r3, #0]
 800be2e:	461a      	mov	r2, r3
 800be30:	8bfb      	ldrh	r3, [r7, #30]
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	f1a3 0208 	sub.w	r2, r3, #8
 800be38:	8bbb      	ldrh	r3, [r7, #28]
 800be3a:	3314      	adds	r3, #20
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d333      	bcc.n	800bea8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800be40:	8bfa      	ldrh	r2, [r7, #30]
 800be42:	8bbb      	ldrh	r3, [r7, #28]
 800be44:	4413      	add	r3, r2
 800be46:	b29b      	uxth	r3, r3
 800be48:	3308      	adds	r3, #8
 800be4a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800be4c:	8a7b      	ldrh	r3, [r7, #18]
 800be4e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800be52:	d106      	bne.n	800be62 <mem_malloc+0xb6>
 800be54:	4b50      	ldr	r3, [pc, #320]	@ (800bf98 <mem_malloc+0x1ec>)
 800be56:	f240 3287 	movw	r2, #903	@ 0x387
 800be5a:	4950      	ldr	r1, [pc, #320]	@ (800bf9c <mem_malloc+0x1f0>)
 800be5c:	4850      	ldr	r0, [pc, #320]	@ (800bfa0 <mem_malloc+0x1f4>)
 800be5e:	f00a fd75 	bl	801694c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800be62:	8a7b      	ldrh	r3, [r7, #18]
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff fcb3 	bl	800b7d0 <ptr_to_mem>
 800be6a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	881a      	ldrh	r2, [r3, #0]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	8bfa      	ldrh	r2, [r7, #30]
 800be7e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	8a7a      	ldrh	r2, [r7, #18]
 800be84:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	2201      	movs	r2, #1
 800be8a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	881b      	ldrh	r3, [r3, #0]
 800be90:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800be94:	d00b      	beq.n	800beae <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	881b      	ldrh	r3, [r3, #0]
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7ff fc98 	bl	800b7d0 <ptr_to_mem>
 800bea0:	4602      	mov	r2, r0
 800bea2:	8a7b      	ldrh	r3, [r7, #18]
 800bea4:	8053      	strh	r3, [r2, #2]
 800bea6:	e002      	b.n	800beae <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	2201      	movs	r2, #1
 800beac:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800beae:	4b39      	ldr	r3, [pc, #228]	@ (800bf94 <mem_malloc+0x1e8>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	697a      	ldr	r2, [r7, #20]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d127      	bne.n	800bf08 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800beb8:	4b36      	ldr	r3, [pc, #216]	@ (800bf94 <mem_malloc+0x1e8>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bebe:	e005      	b.n	800becc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	881b      	ldrh	r3, [r3, #0]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7ff fc83 	bl	800b7d0 <ptr_to_mem>
 800beca:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	791b      	ldrb	r3, [r3, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d004      	beq.n	800bede <mem_malloc+0x132>
 800bed4:	4b33      	ldr	r3, [pc, #204]	@ (800bfa4 <mem_malloc+0x1f8>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	69ba      	ldr	r2, [r7, #24]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d1f0      	bne.n	800bec0 <mem_malloc+0x114>
          }
          lfree = cur;
 800bede:	4a2d      	ldr	r2, [pc, #180]	@ (800bf94 <mem_malloc+0x1e8>)
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bee4:	4b2b      	ldr	r3, [pc, #172]	@ (800bf94 <mem_malloc+0x1e8>)
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	4b2e      	ldr	r3, [pc, #184]	@ (800bfa4 <mem_malloc+0x1f8>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	429a      	cmp	r2, r3
 800beee:	d00b      	beq.n	800bf08 <mem_malloc+0x15c>
 800bef0:	4b28      	ldr	r3, [pc, #160]	@ (800bf94 <mem_malloc+0x1e8>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	791b      	ldrb	r3, [r3, #4]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d006      	beq.n	800bf08 <mem_malloc+0x15c>
 800befa:	4b27      	ldr	r3, [pc, #156]	@ (800bf98 <mem_malloc+0x1ec>)
 800befc:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800bf00:	4929      	ldr	r1, [pc, #164]	@ (800bfa8 <mem_malloc+0x1fc>)
 800bf02:	4827      	ldr	r0, [pc, #156]	@ (800bfa0 <mem_malloc+0x1f4>)
 800bf04:	f00a fd22 	bl	801694c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bf08:	4821      	ldr	r0, [pc, #132]	@ (800bf90 <mem_malloc+0x1e4>)
 800bf0a:	f00a fbd4 	bl	80166b6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bf0e:	8bba      	ldrh	r2, [r7, #28]
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	4413      	add	r3, r2
 800bf14:	3308      	adds	r3, #8
 800bf16:	4a23      	ldr	r2, [pc, #140]	@ (800bfa4 <mem_malloc+0x1f8>)
 800bf18:	6812      	ldr	r2, [r2, #0]
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d906      	bls.n	800bf2c <mem_malloc+0x180>
 800bf1e:	4b1e      	ldr	r3, [pc, #120]	@ (800bf98 <mem_malloc+0x1ec>)
 800bf20:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800bf24:	4921      	ldr	r1, [pc, #132]	@ (800bfac <mem_malloc+0x200>)
 800bf26:	481e      	ldr	r0, [pc, #120]	@ (800bfa0 <mem_malloc+0x1f4>)
 800bf28:	f00a fd10 	bl	801694c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	f003 0303 	and.w	r3, r3, #3
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d006      	beq.n	800bf44 <mem_malloc+0x198>
 800bf36:	4b18      	ldr	r3, [pc, #96]	@ (800bf98 <mem_malloc+0x1ec>)
 800bf38:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800bf3c:	491c      	ldr	r1, [pc, #112]	@ (800bfb0 <mem_malloc+0x204>)
 800bf3e:	4818      	ldr	r0, [pc, #96]	@ (800bfa0 <mem_malloc+0x1f4>)
 800bf40:	f00a fd04 	bl	801694c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	f003 0303 	and.w	r3, r3, #3
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d006      	beq.n	800bf5c <mem_malloc+0x1b0>
 800bf4e:	4b12      	ldr	r3, [pc, #72]	@ (800bf98 <mem_malloc+0x1ec>)
 800bf50:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800bf54:	4917      	ldr	r1, [pc, #92]	@ (800bfb4 <mem_malloc+0x208>)
 800bf56:	4812      	ldr	r0, [pc, #72]	@ (800bfa0 <mem_malloc+0x1f4>)
 800bf58:	f00a fcf8 	bl	801694c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	3308      	adds	r3, #8
 800bf60:	e011      	b.n	800bf86 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bf62:	8bfb      	ldrh	r3, [r7, #30]
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7ff fc33 	bl	800b7d0 <ptr_to_mem>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	881b      	ldrh	r3, [r3, #0]
 800bf6e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bf70:	8bfa      	ldrh	r2, [r7, #30]
 800bf72:	8bbb      	ldrh	r3, [r7, #28]
 800bf74:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	f4ff af41 	bcc.w	800be00 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bf7e:	4804      	ldr	r0, [pc, #16]	@ (800bf90 <mem_malloc+0x1e4>)
 800bf80:	f00a fb99 	bl	80166b6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3720      	adds	r7, #32
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	2000c1d0 	.word	0x2000c1d0
 800bf94:	2000c1d4 	.word	0x2000c1d4
 800bf98:	0801841c 	.word	0x0801841c
 800bf9c:	080185e0 	.word	0x080185e0
 800bfa0:	08018464 	.word	0x08018464
 800bfa4:	2000c1cc 	.word	0x2000c1cc
 800bfa8:	080185f4 	.word	0x080185f4
 800bfac:	08018610 	.word	0x08018610
 800bfb0:	08018640 	.word	0x08018640
 800bfb4:	08018670 	.word	0x08018670

0800bfb8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	3303      	adds	r3, #3
 800bfce:	f023 0303 	bic.w	r3, r3, #3
 800bfd2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	60fb      	str	r3, [r7, #12]
 800bfd8:	e011      	b.n	800bffe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	881b      	ldrh	r3, [r3, #0]
 800bff0:	461a      	mov	r2, r3
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	4413      	add	r3, r2
 800bff6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	3301      	adds	r3, #1
 800bffc:	60fb      	str	r3, [r7, #12]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	885b      	ldrh	r3, [r3, #2]
 800c002:	461a      	mov	r2, r3
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	4293      	cmp	r3, r2
 800c008:	dbe7      	blt.n	800bfda <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c00a:	bf00      	nop
 800c00c:	bf00      	nop
 800c00e:	3714      	adds	r7, #20
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c01e:	2300      	movs	r3, #0
 800c020:	80fb      	strh	r3, [r7, #6]
 800c022:	e009      	b.n	800c038 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c024:	88fb      	ldrh	r3, [r7, #6]
 800c026:	4a08      	ldr	r2, [pc, #32]	@ (800c048 <memp_init+0x30>)
 800c028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7ff ffc3 	bl	800bfb8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c032:	88fb      	ldrh	r3, [r7, #6]
 800c034:	3301      	adds	r3, #1
 800c036:	80fb      	strh	r3, [r7, #6]
 800c038:	88fb      	ldrh	r3, [r7, #6]
 800c03a:	2b0c      	cmp	r3, #12
 800c03c:	d9f2      	bls.n	800c024 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c03e:	bf00      	nop
 800c040:	bf00      	nop
 800c042:	3708      	adds	r7, #8
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	0801aeac 	.word	0x0801aeac

0800c04c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c054:	f00a fb5c 	bl	8016710 <sys_arch_protect>
 800c058:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d015      	beq.n	800c094 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	6812      	ldr	r2, [r2, #0]
 800c070:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	f003 0303 	and.w	r3, r3, #3
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d006      	beq.n	800c08a <do_memp_malloc_pool+0x3e>
 800c07c:	4b09      	ldr	r3, [pc, #36]	@ (800c0a4 <do_memp_malloc_pool+0x58>)
 800c07e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800c082:	4909      	ldr	r1, [pc, #36]	@ (800c0a8 <do_memp_malloc_pool+0x5c>)
 800c084:	4809      	ldr	r0, [pc, #36]	@ (800c0ac <do_memp_malloc_pool+0x60>)
 800c086:	f00a fc61 	bl	801694c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f00a fb4e 	bl	801672c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	e003      	b.n	800c09c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f00a fb49 	bl	801672c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	08018694 	.word	0x08018694
 800c0a8:	080186c4 	.word	0x080186c4
 800c0ac:	080186e8 	.word	0x080186e8

0800c0b0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d106      	bne.n	800c0cc <memp_malloc_pool+0x1c>
 800c0be:	4b0a      	ldr	r3, [pc, #40]	@ (800c0e8 <memp_malloc_pool+0x38>)
 800c0c0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800c0c4:	4909      	ldr	r1, [pc, #36]	@ (800c0ec <memp_malloc_pool+0x3c>)
 800c0c6:	480a      	ldr	r0, [pc, #40]	@ (800c0f0 <memp_malloc_pool+0x40>)
 800c0c8:	f00a fc40 	bl	801694c <iprintf>
  if (desc == NULL) {
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d101      	bne.n	800c0d6 <memp_malloc_pool+0x26>
    return NULL;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	e003      	b.n	800c0de <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7ff ffb8 	bl	800c04c <do_memp_malloc_pool>
 800c0dc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	08018694 	.word	0x08018694
 800c0ec:	08018710 	.word	0x08018710
 800c0f0:	080186e8 	.word	0x080186e8

0800c0f4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c0fe:	79fb      	ldrb	r3, [r7, #7]
 800c100:	2b0c      	cmp	r3, #12
 800c102:	d908      	bls.n	800c116 <memp_malloc+0x22>
 800c104:	4b0a      	ldr	r3, [pc, #40]	@ (800c130 <memp_malloc+0x3c>)
 800c106:	f240 1257 	movw	r2, #343	@ 0x157
 800c10a:	490a      	ldr	r1, [pc, #40]	@ (800c134 <memp_malloc+0x40>)
 800c10c:	480a      	ldr	r0, [pc, #40]	@ (800c138 <memp_malloc+0x44>)
 800c10e:	f00a fc1d 	bl	801694c <iprintf>
 800c112:	2300      	movs	r3, #0
 800c114:	e008      	b.n	800c128 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c116:	79fb      	ldrb	r3, [r7, #7]
 800c118:	4a08      	ldr	r2, [pc, #32]	@ (800c13c <memp_malloc+0x48>)
 800c11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c11e:	4618      	mov	r0, r3
 800c120:	f7ff ff94 	bl	800c04c <do_memp_malloc_pool>
 800c124:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c126:	68fb      	ldr	r3, [r7, #12]
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	08018694 	.word	0x08018694
 800c134:	08018724 	.word	0x08018724
 800c138:	080186e8 	.word	0x080186e8
 800c13c:	0801aeac 	.word	0x0801aeac

0800c140 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	f003 0303 	and.w	r3, r3, #3
 800c150:	2b00      	cmp	r3, #0
 800c152:	d006      	beq.n	800c162 <do_memp_free_pool+0x22>
 800c154:	4b0d      	ldr	r3, [pc, #52]	@ (800c18c <do_memp_free_pool+0x4c>)
 800c156:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c15a:	490d      	ldr	r1, [pc, #52]	@ (800c190 <do_memp_free_pool+0x50>)
 800c15c:	480d      	ldr	r0, [pc, #52]	@ (800c194 <do_memp_free_pool+0x54>)
 800c15e:	f00a fbf5 	bl	801694c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c166:	f00a fad3 	bl	8016710 <sys_arch_protect>
 800c16a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	68fa      	ldr	r2, [r7, #12]
 800c17c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c17e:	68b8      	ldr	r0, [r7, #8]
 800c180:	f00a fad4 	bl	801672c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c184:	bf00      	nop
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	08018694 	.word	0x08018694
 800c190:	08018744 	.word	0x08018744
 800c194:	080186e8 	.word	0x080186e8

0800c198 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d106      	bne.n	800c1b6 <memp_free_pool+0x1e>
 800c1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c1d4 <memp_free_pool+0x3c>)
 800c1aa:	f240 1295 	movw	r2, #405	@ 0x195
 800c1ae:	490a      	ldr	r1, [pc, #40]	@ (800c1d8 <memp_free_pool+0x40>)
 800c1b0:	480a      	ldr	r0, [pc, #40]	@ (800c1dc <memp_free_pool+0x44>)
 800c1b2:	f00a fbcb 	bl	801694c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d007      	beq.n	800c1cc <memp_free_pool+0x34>
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d004      	beq.n	800c1cc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c1c2:	6839      	ldr	r1, [r7, #0]
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f7ff ffbb 	bl	800c140 <do_memp_free_pool>
 800c1ca:	e000      	b.n	800c1ce <memp_free_pool+0x36>
    return;
 800c1cc:	bf00      	nop
}
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	08018694 	.word	0x08018694
 800c1d8:	08018710 	.word	0x08018710
 800c1dc:	080186e8 	.word	0x080186e8

0800c1e0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	6039      	str	r1, [r7, #0]
 800c1ea:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c1ec:	79fb      	ldrb	r3, [r7, #7]
 800c1ee:	2b0c      	cmp	r3, #12
 800c1f0:	d907      	bls.n	800c202 <memp_free+0x22>
 800c1f2:	4b0c      	ldr	r3, [pc, #48]	@ (800c224 <memp_free+0x44>)
 800c1f4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c1f8:	490b      	ldr	r1, [pc, #44]	@ (800c228 <memp_free+0x48>)
 800c1fa:	480c      	ldr	r0, [pc, #48]	@ (800c22c <memp_free+0x4c>)
 800c1fc:	f00a fba6 	bl	801694c <iprintf>
 800c200:	e00c      	b.n	800c21c <memp_free+0x3c>

  if (mem == NULL) {
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d008      	beq.n	800c21a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c208:	79fb      	ldrb	r3, [r7, #7]
 800c20a:	4a09      	ldr	r2, [pc, #36]	@ (800c230 <memp_free+0x50>)
 800c20c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c210:	6839      	ldr	r1, [r7, #0]
 800c212:	4618      	mov	r0, r3
 800c214:	f7ff ff94 	bl	800c140 <do_memp_free_pool>
 800c218:	e000      	b.n	800c21c <memp_free+0x3c>
    return;
 800c21a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c21c:	3708      	adds	r7, #8
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	08018694 	.word	0x08018694
 800c228:	08018764 	.word	0x08018764
 800c22c:	080186e8 	.word	0x080186e8
 800c230:	0801aeac 	.word	0x0801aeac

0800c234 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c234:	b480      	push	{r7}
 800c236:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c238:	bf00      	nop
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr
	...

0800c244 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b086      	sub	sp, #24
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
 800c250:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d108      	bne.n	800c26a <netif_add+0x26>
 800c258:	4b57      	ldr	r3, [pc, #348]	@ (800c3b8 <netif_add+0x174>)
 800c25a:	f240 1227 	movw	r2, #295	@ 0x127
 800c25e:	4957      	ldr	r1, [pc, #348]	@ (800c3bc <netif_add+0x178>)
 800c260:	4857      	ldr	r0, [pc, #348]	@ (800c3c0 <netif_add+0x17c>)
 800c262:	f00a fb73 	bl	801694c <iprintf>
 800c266:	2300      	movs	r3, #0
 800c268:	e0a2      	b.n	800c3b0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d108      	bne.n	800c282 <netif_add+0x3e>
 800c270:	4b51      	ldr	r3, [pc, #324]	@ (800c3b8 <netif_add+0x174>)
 800c272:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c276:	4953      	ldr	r1, [pc, #332]	@ (800c3c4 <netif_add+0x180>)
 800c278:	4851      	ldr	r0, [pc, #324]	@ (800c3c0 <netif_add+0x17c>)
 800c27a:	f00a fb67 	bl	801694c <iprintf>
 800c27e:	2300      	movs	r3, #0
 800c280:	e096      	b.n	800c3b0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d101      	bne.n	800c28c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c288:	4b4f      	ldr	r3, [pc, #316]	@ (800c3c8 <netif_add+0x184>)
 800c28a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d101      	bne.n	800c296 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c292:	4b4d      	ldr	r3, [pc, #308]	@ (800c3c8 <netif_add+0x184>)
 800c294:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d101      	bne.n	800c2a0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c29c:	4b4a      	ldr	r3, [pc, #296]	@ (800c3c8 <netif_add+0x184>)
 800c29e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	4a45      	ldr	r2, [pc, #276]	@ (800c3cc <netif_add+0x188>)
 800c2b6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6a3a      	ldr	r2, [r7, #32]
 800c2d0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c2d2:	4b3f      	ldr	r3, [pc, #252]	@ (800c3d0 <netif_add+0x18c>)
 800c2d4:	781a      	ldrb	r2, [r3, #0]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2e0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	68b9      	ldr	r1, [r7, #8]
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f000 f913 	bl	800c514 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f0:	68f8      	ldr	r0, [r7, #12]
 800c2f2:	4798      	blx	r3
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d001      	beq.n	800c2fe <netif_add+0xba>
    return NULL;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	e058      	b.n	800c3b0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c304:	2bff      	cmp	r3, #255	@ 0xff
 800c306:	d103      	bne.n	800c310 <netif_add+0xcc>
        netif->num = 0;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2200      	movs	r2, #0
 800c30c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800c310:	2300      	movs	r3, #0
 800c312:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c314:	4b2f      	ldr	r3, [pc, #188]	@ (800c3d4 <netif_add+0x190>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	617b      	str	r3, [r7, #20]
 800c31a:	e02b      	b.n	800c374 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c31c:	697a      	ldr	r2, [r7, #20]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	429a      	cmp	r2, r3
 800c322:	d106      	bne.n	800c332 <netif_add+0xee>
 800c324:	4b24      	ldr	r3, [pc, #144]	@ (800c3b8 <netif_add+0x174>)
 800c326:	f240 128b 	movw	r2, #395	@ 0x18b
 800c32a:	492b      	ldr	r1, [pc, #172]	@ (800c3d8 <netif_add+0x194>)
 800c32c:	4824      	ldr	r0, [pc, #144]	@ (800c3c0 <netif_add+0x17c>)
 800c32e:	f00a fb0d 	bl	801694c <iprintf>
        num_netifs++;
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	3301      	adds	r3, #1
 800c336:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	2bff      	cmp	r3, #255	@ 0xff
 800c33c:	dd06      	ble.n	800c34c <netif_add+0x108>
 800c33e:	4b1e      	ldr	r3, [pc, #120]	@ (800c3b8 <netif_add+0x174>)
 800c340:	f240 128d 	movw	r2, #397	@ 0x18d
 800c344:	4925      	ldr	r1, [pc, #148]	@ (800c3dc <netif_add+0x198>)
 800c346:	481e      	ldr	r0, [pc, #120]	@ (800c3c0 <netif_add+0x17c>)
 800c348:	f00a fb00 	bl	801694c <iprintf>
        if (netif2->num == netif->num) {
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c358:	429a      	cmp	r2, r3
 800c35a:	d108      	bne.n	800c36e <netif_add+0x12a>
          netif->num++;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c362:	3301      	adds	r3, #1
 800c364:	b2da      	uxtb	r2, r3
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800c36c:	e005      	b.n	800c37a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	617b      	str	r3, [r7, #20]
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d1d0      	bne.n	800c31c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1be      	bne.n	800c2fe <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c386:	2bfe      	cmp	r3, #254	@ 0xfe
 800c388:	d103      	bne.n	800c392 <netif_add+0x14e>
    netif_num = 0;
 800c38a:	4b11      	ldr	r3, [pc, #68]	@ (800c3d0 <netif_add+0x18c>)
 800c38c:	2200      	movs	r2, #0
 800c38e:	701a      	strb	r2, [r3, #0]
 800c390:	e006      	b.n	800c3a0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c398:	3301      	adds	r3, #1
 800c39a:	b2da      	uxtb	r2, r3
 800c39c:	4b0c      	ldr	r3, [pc, #48]	@ (800c3d0 <netif_add+0x18c>)
 800c39e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c3a0:	4b0c      	ldr	r3, [pc, #48]	@ (800c3d4 <netif_add+0x190>)
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c3a8:	4a0a      	ldr	r2, [pc, #40]	@ (800c3d4 <netif_add+0x190>)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3718      	adds	r7, #24
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	08018780 	.word	0x08018780
 800c3bc:	08018814 	.word	0x08018814
 800c3c0:	080187d0 	.word	0x080187d0
 800c3c4:	08018830 	.word	0x08018830
 800c3c8:	0801af20 	.word	0x0801af20
 800c3cc:	0800c7ef 	.word	0x0800c7ef
 800c3d0:	2000f2ac 	.word	0x2000f2ac
 800c3d4:	2000f2a4 	.word	0x2000f2a4
 800c3d8:	08018854 	.word	0x08018854
 800c3dc:	08018868 	.word	0x08018868

0800c3e0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c3ea:	6839      	ldr	r1, [r7, #0]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f002 fe51 	bl	800f094 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c3f2:	6839      	ldr	r1, [r7, #0]
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f007 fcfd 	bl	8013df4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c3fa:	bf00      	nop
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
	...

0800c404 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b086      	sub	sp, #24
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d106      	bne.n	800c424 <netif_do_set_ipaddr+0x20>
 800c416:	4b1d      	ldr	r3, [pc, #116]	@ (800c48c <netif_do_set_ipaddr+0x88>)
 800c418:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800c41c:	491c      	ldr	r1, [pc, #112]	@ (800c490 <netif_do_set_ipaddr+0x8c>)
 800c41e:	481d      	ldr	r0, [pc, #116]	@ (800c494 <netif_do_set_ipaddr+0x90>)
 800c420:	f00a fa94 	bl	801694c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d106      	bne.n	800c438 <netif_do_set_ipaddr+0x34>
 800c42a:	4b18      	ldr	r3, [pc, #96]	@ (800c48c <netif_do_set_ipaddr+0x88>)
 800c42c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800c430:	4917      	ldr	r1, [pc, #92]	@ (800c490 <netif_do_set_ipaddr+0x8c>)
 800c432:	4818      	ldr	r0, [pc, #96]	@ (800c494 <netif_do_set_ipaddr+0x90>)
 800c434:	f00a fa8a 	bl	801694c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	3304      	adds	r3, #4
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	429a      	cmp	r2, r3
 800c444:	d01c      	beq.n	800c480 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	3304      	adds	r3, #4
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c456:	f107 0314 	add.w	r3, r7, #20
 800c45a:	4619      	mov	r1, r3
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f7ff ffbf 	bl	800c3e0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d002      	beq.n	800c46e <netif_do_set_ipaddr+0x6a>
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	e000      	b.n	800c470 <netif_do_set_ipaddr+0x6c>
 800c46e:	2300      	movs	r3, #0
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c474:	2101      	movs	r1, #1
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	f000 f8d2 	bl	800c620 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c47c:	2301      	movs	r3, #1
 800c47e:	e000      	b.n	800c482 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3718      	adds	r7, #24
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	08018780 	.word	0x08018780
 800c490:	08018898 	.word	0x08018898
 800c494:	080187d0 	.word	0x080187d0

0800c498 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	681a      	ldr	r2, [r3, #0]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	3308      	adds	r3, #8
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d00a      	beq.n	800c4c8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d002      	beq.n	800c4be <netif_do_set_netmask+0x26>
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	e000      	b.n	800c4c0 <netif_do_set_netmask+0x28>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	e000      	b.n	800c4ca <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c4c8:	2300      	movs	r3, #0
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3714      	adds	r7, #20
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr

0800c4d6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c4d6:	b480      	push	{r7}
 800c4d8:	b085      	sub	sp, #20
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	60f8      	str	r0, [r7, #12]
 800c4de:	60b9      	str	r1, [r7, #8]
 800c4e0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	330c      	adds	r3, #12
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d00a      	beq.n	800c506 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d002      	beq.n	800c4fc <netif_do_set_gw+0x26>
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	e000      	b.n	800c4fe <netif_do_set_gw+0x28>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c502:	2301      	movs	r3, #1
 800c504:	e000      	b.n	800c508 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c506:	2300      	movs	r3, #0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3714      	adds	r7, #20
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b088      	sub	sp, #32
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
 800c520:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c522:	2300      	movs	r3, #0
 800c524:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c526:	2300      	movs	r3, #0
 800c528:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d101      	bne.n	800c534 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c530:	4b1c      	ldr	r3, [pc, #112]	@ (800c5a4 <netif_set_addr+0x90>)
 800c532:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d101      	bne.n	800c53e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c53a:	4b1a      	ldr	r3, [pc, #104]	@ (800c5a4 <netif_set_addr+0x90>)
 800c53c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d101      	bne.n	800c548 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c544:	4b17      	ldr	r3, [pc, #92]	@ (800c5a4 <netif_set_addr+0x90>)
 800c546:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d003      	beq.n	800c556 <netif_set_addr+0x42>
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d101      	bne.n	800c55a <netif_set_addr+0x46>
 800c556:	2301      	movs	r3, #1
 800c558:	e000      	b.n	800c55c <netif_set_addr+0x48>
 800c55a:	2300      	movs	r3, #0
 800c55c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d006      	beq.n	800c572 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c564:	f107 0310 	add.w	r3, r7, #16
 800c568:	461a      	mov	r2, r3
 800c56a:	68b9      	ldr	r1, [r7, #8]
 800c56c:	68f8      	ldr	r0, [r7, #12]
 800c56e:	f7ff ff49 	bl	800c404 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c572:	69fa      	ldr	r2, [r7, #28]
 800c574:	6879      	ldr	r1, [r7, #4]
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f7ff ff8e 	bl	800c498 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c57c:	69ba      	ldr	r2, [r7, #24]
 800c57e:	6839      	ldr	r1, [r7, #0]
 800c580:	68f8      	ldr	r0, [r7, #12]
 800c582:	f7ff ffa8 	bl	800c4d6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d106      	bne.n	800c59a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c58c:	f107 0310 	add.w	r3, r7, #16
 800c590:	461a      	mov	r2, r3
 800c592:	68b9      	ldr	r1, [r7, #8]
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f7ff ff35 	bl	800c404 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c59a:	bf00      	nop
 800c59c:	3720      	adds	r7, #32
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	0801af20 	.word	0x0801af20

0800c5a8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c5b0:	4a04      	ldr	r2, [pc, #16]	@ (800c5c4 <netif_set_default+0x1c>)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c5b6:	bf00      	nop
 800c5b8:	370c      	adds	r7, #12
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	2000f2a8 	.word	0x2000f2a8

0800c5c8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d107      	bne.n	800c5e6 <netif_set_up+0x1e>
 800c5d6:	4b0f      	ldr	r3, [pc, #60]	@ (800c614 <netif_set_up+0x4c>)
 800c5d8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800c5dc:	490e      	ldr	r1, [pc, #56]	@ (800c618 <netif_set_up+0x50>)
 800c5de:	480f      	ldr	r0, [pc, #60]	@ (800c61c <netif_set_up+0x54>)
 800c5e0:	f00a f9b4 	bl	801694c <iprintf>
 800c5e4:	e013      	b.n	800c60e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c5ec:	f003 0301 	and.w	r3, r3, #1
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d10c      	bne.n	800c60e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c5fa:	f043 0301 	orr.w	r3, r3, #1
 800c5fe:	b2da      	uxtb	r2, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c606:	2103      	movs	r1, #3
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 f809 	bl	800c620 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	08018780 	.word	0x08018780
 800c618:	08018908 	.word	0x08018908
 800c61c:	080187d0 	.word	0x080187d0

0800c620 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	460b      	mov	r3, r1
 800c62a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d106      	bne.n	800c640 <netif_issue_reports+0x20>
 800c632:	4b18      	ldr	r3, [pc, #96]	@ (800c694 <netif_issue_reports+0x74>)
 800c634:	f240 326d 	movw	r2, #877	@ 0x36d
 800c638:	4917      	ldr	r1, [pc, #92]	@ (800c698 <netif_issue_reports+0x78>)
 800c63a:	4818      	ldr	r0, [pc, #96]	@ (800c69c <netif_issue_reports+0x7c>)
 800c63c:	f00a f986 	bl	801694c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c646:	f003 0304 	and.w	r3, r3, #4
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d01e      	beq.n	800c68c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c654:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d017      	beq.n	800c68c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c65c:	78fb      	ldrb	r3, [r7, #3]
 800c65e:	f003 0301 	and.w	r3, r3, #1
 800c662:	2b00      	cmp	r3, #0
 800c664:	d013      	beq.n	800c68e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	3304      	adds	r3, #4
 800c66a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00e      	beq.n	800c68e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c676:	f003 0308 	and.w	r3, r3, #8
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d007      	beq.n	800c68e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	3304      	adds	r3, #4
 800c682:	4619      	mov	r1, r3
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f008 fb1f 	bl	8014cc8 <etharp_request>
 800c68a:	e000      	b.n	800c68e <netif_issue_reports+0x6e>
    return;
 800c68c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	08018780 	.word	0x08018780
 800c698:	08018924 	.word	0x08018924
 800c69c:	080187d0 	.word	0x080187d0

0800c6a0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d107      	bne.n	800c6be <netif_set_down+0x1e>
 800c6ae:	4b12      	ldr	r3, [pc, #72]	@ (800c6f8 <netif_set_down+0x58>)
 800c6b0:	f240 329b 	movw	r2, #923	@ 0x39b
 800c6b4:	4911      	ldr	r1, [pc, #68]	@ (800c6fc <netif_set_down+0x5c>)
 800c6b6:	4812      	ldr	r0, [pc, #72]	@ (800c700 <netif_set_down+0x60>)
 800c6b8:	f00a f948 	bl	801694c <iprintf>
 800c6bc:	e019      	b.n	800c6f2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c6c4:	f003 0301 	and.w	r3, r3, #1
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d012      	beq.n	800c6f2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c6d2:	f023 0301 	bic.w	r3, r3, #1
 800c6d6:	b2da      	uxtb	r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c6e4:	f003 0308 	and.w	r3, r3, #8
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d002      	beq.n	800c6f2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f007 fea9 	bl	8014444 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	08018780 	.word	0x08018780
 800c6fc:	08018948 	.word	0x08018948
 800c700:	080187d0 	.word	0x080187d0

0800c704 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d107      	bne.n	800c722 <netif_set_link_up+0x1e>
 800c712:	4b13      	ldr	r3, [pc, #76]	@ (800c760 <netif_set_link_up+0x5c>)
 800c714:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c718:	4912      	ldr	r1, [pc, #72]	@ (800c764 <netif_set_link_up+0x60>)
 800c71a:	4813      	ldr	r0, [pc, #76]	@ (800c768 <netif_set_link_up+0x64>)
 800c71c:	f00a f916 	bl	801694c <iprintf>
 800c720:	e01b      	b.n	800c75a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c728:	f003 0304 	and.w	r3, r3, #4
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d114      	bne.n	800c75a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c736:	f043 0304 	orr.w	r3, r3, #4
 800c73a:	b2da      	uxtb	r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c742:	2103      	movs	r1, #3
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f7ff ff6b 	bl	800c620 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	69db      	ldr	r3, [r3, #28]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d003      	beq.n	800c75a <netif_set_link_up+0x56>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	69db      	ldr	r3, [r3, #28]
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	08018780 	.word	0x08018780
 800c764:	08018968 	.word	0x08018968
 800c768:	080187d0 	.word	0x080187d0

0800c76c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d107      	bne.n	800c78a <netif_set_link_down+0x1e>
 800c77a:	4b11      	ldr	r3, [pc, #68]	@ (800c7c0 <netif_set_link_down+0x54>)
 800c77c:	f240 4206 	movw	r2, #1030	@ 0x406
 800c780:	4910      	ldr	r1, [pc, #64]	@ (800c7c4 <netif_set_link_down+0x58>)
 800c782:	4811      	ldr	r0, [pc, #68]	@ (800c7c8 <netif_set_link_down+0x5c>)
 800c784:	f00a f8e2 	bl	801694c <iprintf>
 800c788:	e017      	b.n	800c7ba <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c790:	f003 0304 	and.w	r3, r3, #4
 800c794:	2b00      	cmp	r3, #0
 800c796:	d010      	beq.n	800c7ba <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c79e:	f023 0304 	bic.w	r3, r3, #4
 800c7a2:	b2da      	uxtb	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	69db      	ldr	r3, [r3, #28]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d003      	beq.n	800c7ba <netif_set_link_down+0x4e>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	69db      	ldr	r3, [r3, #28]
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	08018780 	.word	0x08018780
 800c7c4:	0801898c 	.word	0x0801898c
 800c7c8:	080187d0 	.word	0x080187d0

0800c7cc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d002      	beq.n	800c7e2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	61da      	str	r2, [r3, #28]
  }
}
 800c7e2:	bf00      	nop
 800c7e4:	370c      	adds	r7, #12
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr

0800c7ee <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c7ee:	b480      	push	{r7}
 800c7f0:	b085      	sub	sp, #20
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	60f8      	str	r0, [r7, #12]
 800c7f6:	60b9      	str	r1, [r7, #8]
 800c7f8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c7fa:	f06f 030b 	mvn.w	r3, #11
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3714      	adds	r7, #20
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr
	...

0800c80c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b085      	sub	sp, #20
 800c810:	af00      	add	r7, sp, #0
 800c812:	4603      	mov	r3, r0
 800c814:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c816:	79fb      	ldrb	r3, [r7, #7]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d013      	beq.n	800c844 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c81c:	4b0d      	ldr	r3, [pc, #52]	@ (800c854 <netif_get_by_index+0x48>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	60fb      	str	r3, [r7, #12]
 800c822:	e00c      	b.n	800c83e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c82a:	3301      	adds	r3, #1
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	79fa      	ldrb	r2, [r7, #7]
 800c830:	429a      	cmp	r2, r3
 800c832:	d101      	bne.n	800c838 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	e006      	b.n	800c846 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	60fb      	str	r3, [r7, #12]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d1ef      	bne.n	800c824 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3714      	adds	r7, #20
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	2000f2a4 	.word	0x2000f2a4

0800c858 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c85e:	f009 ff57 	bl	8016710 <sys_arch_protect>
 800c862:	6038      	str	r0, [r7, #0]
 800c864:	4b0d      	ldr	r3, [pc, #52]	@ (800c89c <pbuf_free_ooseq+0x44>)
 800c866:	2200      	movs	r2, #0
 800c868:	701a      	strb	r2, [r3, #0]
 800c86a:	6838      	ldr	r0, [r7, #0]
 800c86c:	f009 ff5e 	bl	801672c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c870:	4b0b      	ldr	r3, [pc, #44]	@ (800c8a0 <pbuf_free_ooseq+0x48>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	607b      	str	r3, [r7, #4]
 800c876:	e00a      	b.n	800c88e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d003      	beq.n	800c888 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f002 fc45 	bl	800f110 <tcp_free_ooseq>
      return;
 800c886:	e005      	b.n	800c894 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	607b      	str	r3, [r7, #4]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d1f1      	bne.n	800c878 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c894:	3708      	adds	r7, #8
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	2000f2ad 	.word	0x2000f2ad
 800c8a0:	2000f2bc 	.word	0x2000f2bc

0800c8a4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c8ac:	f7ff ffd4 	bl	800c858 <pbuf_free_ooseq>
}
 800c8b0:	bf00      	nop
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c8be:	f009 ff27 	bl	8016710 <sys_arch_protect>
 800c8c2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c8c4:	4b0f      	ldr	r3, [pc, #60]	@ (800c904 <pbuf_pool_is_empty+0x4c>)
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c8ca:	4b0e      	ldr	r3, [pc, #56]	@ (800c904 <pbuf_pool_is_empty+0x4c>)
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f009 ff2b 	bl	801672c <sys_arch_unprotect>

  if (!queued) {
 800c8d6:	78fb      	ldrb	r3, [r7, #3]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d10f      	bne.n	800c8fc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c8dc:	2100      	movs	r1, #0
 800c8de:	480a      	ldr	r0, [pc, #40]	@ (800c908 <pbuf_pool_is_empty+0x50>)
 800c8e0:	f7fe fe90 	bl	800b604 <tcpip_try_callback>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d008      	beq.n	800c8fc <pbuf_pool_is_empty+0x44>
 800c8ea:	f009 ff11 	bl	8016710 <sys_arch_protect>
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	4b04      	ldr	r3, [pc, #16]	@ (800c904 <pbuf_pool_is_empty+0x4c>)
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	701a      	strb	r2, [r3, #0]
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f009 ff18 	bl	801672c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c8fc:	bf00      	nop
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	2000f2ad 	.word	0x2000f2ad
 800c908:	0800c8a5 	.word	0x0800c8a5

0800c90c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	4611      	mov	r1, r2
 800c918:	461a      	mov	r2, r3
 800c91a:	460b      	mov	r3, r1
 800c91c:	80fb      	strh	r3, [r7, #6]
 800c91e:	4613      	mov	r3, r2
 800c920:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2200      	movs	r2, #0
 800c926:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	88fa      	ldrh	r2, [r7, #6]
 800c932:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	88ba      	ldrh	r2, [r7, #4]
 800c938:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c93a:	8b3b      	ldrh	r3, [r7, #24]
 800c93c:	b2da      	uxtb	r2, r3
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	7f3a      	ldrb	r2, [r7, #28]
 800c946:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2201      	movs	r2, #1
 800c94c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2200      	movs	r2, #0
 800c952:	73da      	strb	r2, [r3, #15]
}
 800c954:	bf00      	nop
 800c956:	3714      	adds	r7, #20
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b08c      	sub	sp, #48	@ 0x30
 800c964:	af02      	add	r7, sp, #8
 800c966:	4603      	mov	r3, r0
 800c968:	71fb      	strb	r3, [r7, #7]
 800c96a:	460b      	mov	r3, r1
 800c96c:	80bb      	strh	r3, [r7, #4]
 800c96e:	4613      	mov	r3, r2
 800c970:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c972:	79fb      	ldrb	r3, [r7, #7]
 800c974:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c976:	887b      	ldrh	r3, [r7, #2]
 800c978:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c97c:	d07f      	beq.n	800ca7e <pbuf_alloc+0x11e>
 800c97e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c982:	f300 80c8 	bgt.w	800cb16 <pbuf_alloc+0x1b6>
 800c986:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c98a:	d010      	beq.n	800c9ae <pbuf_alloc+0x4e>
 800c98c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c990:	f300 80c1 	bgt.w	800cb16 <pbuf_alloc+0x1b6>
 800c994:	2b01      	cmp	r3, #1
 800c996:	d002      	beq.n	800c99e <pbuf_alloc+0x3e>
 800c998:	2b41      	cmp	r3, #65	@ 0x41
 800c99a:	f040 80bc 	bne.w	800cb16 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c99e:	887a      	ldrh	r2, [r7, #2]
 800c9a0:	88bb      	ldrh	r3, [r7, #4]
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	f000 f8d1 	bl	800cb4c <pbuf_alloc_reference>
 800c9aa:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800c9ac:	e0bd      	b.n	800cb2a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c9b6:	88bb      	ldrh	r3, [r7, #4]
 800c9b8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c9ba:	200c      	movs	r0, #12
 800c9bc:	f7ff fb9a 	bl	800c0f4 <memp_malloc>
 800c9c0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d109      	bne.n	800c9dc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c9c8:	f7ff ff76 	bl	800c8b8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d002      	beq.n	800c9d8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c9d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c9d4:	f000 faa8 	bl	800cf28 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	e0a7      	b.n	800cb2c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c9dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c9de:	3303      	adds	r3, #3
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	f023 0303 	bic.w	r3, r3, #3
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	8b7a      	ldrh	r2, [r7, #26]
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	bf28      	it	cs
 800c9f4:	4613      	movcs	r3, r2
 800c9f6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c9f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c9fa:	3310      	adds	r3, #16
 800c9fc:	693a      	ldr	r2, [r7, #16]
 800c9fe:	4413      	add	r3, r2
 800ca00:	3303      	adds	r3, #3
 800ca02:	f023 0303 	bic.w	r3, r3, #3
 800ca06:	4618      	mov	r0, r3
 800ca08:	89f9      	ldrh	r1, [r7, #14]
 800ca0a:	8b7a      	ldrh	r2, [r7, #26]
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	9301      	str	r3, [sp, #4]
 800ca10:	887b      	ldrh	r3, [r7, #2]
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	460b      	mov	r3, r1
 800ca16:	4601      	mov	r1, r0
 800ca18:	6938      	ldr	r0, [r7, #16]
 800ca1a:	f7ff ff77 	bl	800c90c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	f003 0303 	and.w	r3, r3, #3
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d006      	beq.n	800ca38 <pbuf_alloc+0xd8>
 800ca2a:	4b42      	ldr	r3, [pc, #264]	@ (800cb34 <pbuf_alloc+0x1d4>)
 800ca2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca30:	4941      	ldr	r1, [pc, #260]	@ (800cb38 <pbuf_alloc+0x1d8>)
 800ca32:	4842      	ldr	r0, [pc, #264]	@ (800cb3c <pbuf_alloc+0x1dc>)
 800ca34:	f009 ff8a 	bl	801694c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ca38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ca3a:	3303      	adds	r3, #3
 800ca3c:	f023 0303 	bic.w	r3, r3, #3
 800ca40:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800ca44:	d106      	bne.n	800ca54 <pbuf_alloc+0xf4>
 800ca46:	4b3b      	ldr	r3, [pc, #236]	@ (800cb34 <pbuf_alloc+0x1d4>)
 800ca48:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800ca4c:	493c      	ldr	r1, [pc, #240]	@ (800cb40 <pbuf_alloc+0x1e0>)
 800ca4e:	483b      	ldr	r0, [pc, #236]	@ (800cb3c <pbuf_alloc+0x1dc>)
 800ca50:	f009 ff7c 	bl	801694c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ca54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d102      	bne.n	800ca60 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca5e:	e002      	b.n	800ca66 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	693a      	ldr	r2, [r7, #16]
 800ca64:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ca6a:	8b7a      	ldrh	r2, [r7, #26]
 800ca6c:	89fb      	ldrh	r3, [r7, #14]
 800ca6e:	1ad3      	subs	r3, r2, r3
 800ca70:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ca72:	2300      	movs	r3, #0
 800ca74:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800ca76:	8b7b      	ldrh	r3, [r7, #26]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d19e      	bne.n	800c9ba <pbuf_alloc+0x5a>
      break;
 800ca7c:	e055      	b.n	800cb2a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ca7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ca80:	3303      	adds	r3, #3
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	f023 0303 	bic.w	r3, r3, #3
 800ca88:	b29a      	uxth	r2, r3
 800ca8a:	88bb      	ldrh	r3, [r7, #4]
 800ca8c:	3303      	adds	r3, #3
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	f023 0303 	bic.w	r3, r3, #3
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	4413      	add	r3, r2
 800ca98:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ca9a:	8b3b      	ldrh	r3, [r7, #24]
 800ca9c:	3310      	adds	r3, #16
 800ca9e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800caa0:	8b3a      	ldrh	r2, [r7, #24]
 800caa2:	88bb      	ldrh	r3, [r7, #4]
 800caa4:	3303      	adds	r3, #3
 800caa6:	f023 0303 	bic.w	r3, r3, #3
 800caaa:	429a      	cmp	r2, r3
 800caac:	d306      	bcc.n	800cabc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800caae:	8afa      	ldrh	r2, [r7, #22]
 800cab0:	88bb      	ldrh	r3, [r7, #4]
 800cab2:	3303      	adds	r3, #3
 800cab4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cab8:	429a      	cmp	r2, r3
 800caba:	d201      	bcs.n	800cac0 <pbuf_alloc+0x160>
        return NULL;
 800cabc:	2300      	movs	r3, #0
 800cabe:	e035      	b.n	800cb2c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cac0:	8afb      	ldrh	r3, [r7, #22]
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7ff f972 	bl	800bdac <mem_malloc>
 800cac8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800caca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d101      	bne.n	800cad4 <pbuf_alloc+0x174>
        return NULL;
 800cad0:	2300      	movs	r3, #0
 800cad2:	e02b      	b.n	800cb2c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cad4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cad6:	3310      	adds	r3, #16
 800cad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cada:	4413      	add	r3, r2
 800cadc:	3303      	adds	r3, #3
 800cade:	f023 0303 	bic.w	r3, r3, #3
 800cae2:	4618      	mov	r0, r3
 800cae4:	88b9      	ldrh	r1, [r7, #4]
 800cae6:	88ba      	ldrh	r2, [r7, #4]
 800cae8:	2300      	movs	r3, #0
 800caea:	9301      	str	r3, [sp, #4]
 800caec:	887b      	ldrh	r3, [r7, #2]
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	460b      	mov	r3, r1
 800caf2:	4601      	mov	r1, r0
 800caf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800caf6:	f7ff ff09 	bl	800c90c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	f003 0303 	and.w	r3, r3, #3
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d010      	beq.n	800cb28 <pbuf_alloc+0x1c8>
 800cb06:	4b0b      	ldr	r3, [pc, #44]	@ (800cb34 <pbuf_alloc+0x1d4>)
 800cb08:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800cb0c:	490d      	ldr	r1, [pc, #52]	@ (800cb44 <pbuf_alloc+0x1e4>)
 800cb0e:	480b      	ldr	r0, [pc, #44]	@ (800cb3c <pbuf_alloc+0x1dc>)
 800cb10:	f009 ff1c 	bl	801694c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cb14:	e008      	b.n	800cb28 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cb16:	4b07      	ldr	r3, [pc, #28]	@ (800cb34 <pbuf_alloc+0x1d4>)
 800cb18:	f240 1227 	movw	r2, #295	@ 0x127
 800cb1c:	490a      	ldr	r1, [pc, #40]	@ (800cb48 <pbuf_alloc+0x1e8>)
 800cb1e:	4807      	ldr	r0, [pc, #28]	@ (800cb3c <pbuf_alloc+0x1dc>)
 800cb20:	f009 ff14 	bl	801694c <iprintf>
      return NULL;
 800cb24:	2300      	movs	r3, #0
 800cb26:	e001      	b.n	800cb2c <pbuf_alloc+0x1cc>
      break;
 800cb28:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3728      	adds	r7, #40	@ 0x28
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	080189b0 	.word	0x080189b0
 800cb38:	080189e0 	.word	0x080189e0
 800cb3c:	08018a10 	.word	0x08018a10
 800cb40:	08018a38 	.word	0x08018a38
 800cb44:	08018a6c 	.word	0x08018a6c
 800cb48:	08018a98 	.word	0x08018a98

0800cb4c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b086      	sub	sp, #24
 800cb50:	af02      	add	r7, sp, #8
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	460b      	mov	r3, r1
 800cb56:	807b      	strh	r3, [r7, #2]
 800cb58:	4613      	mov	r3, r2
 800cb5a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cb5c:	883b      	ldrh	r3, [r7, #0]
 800cb5e:	2b41      	cmp	r3, #65	@ 0x41
 800cb60:	d009      	beq.n	800cb76 <pbuf_alloc_reference+0x2a>
 800cb62:	883b      	ldrh	r3, [r7, #0]
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d006      	beq.n	800cb76 <pbuf_alloc_reference+0x2a>
 800cb68:	4b0f      	ldr	r3, [pc, #60]	@ (800cba8 <pbuf_alloc_reference+0x5c>)
 800cb6a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800cb6e:	490f      	ldr	r1, [pc, #60]	@ (800cbac <pbuf_alloc_reference+0x60>)
 800cb70:	480f      	ldr	r0, [pc, #60]	@ (800cbb0 <pbuf_alloc_reference+0x64>)
 800cb72:	f009 feeb 	bl	801694c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cb76:	200b      	movs	r0, #11
 800cb78:	f7ff fabc 	bl	800c0f4 <memp_malloc>
 800cb7c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d101      	bne.n	800cb88 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cb84:	2300      	movs	r3, #0
 800cb86:	e00b      	b.n	800cba0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cb88:	8879      	ldrh	r1, [r7, #2]
 800cb8a:	887a      	ldrh	r2, [r7, #2]
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	9301      	str	r3, [sp, #4]
 800cb90:	883b      	ldrh	r3, [r7, #0]
 800cb92:	9300      	str	r3, [sp, #0]
 800cb94:	460b      	mov	r3, r1
 800cb96:	6879      	ldr	r1, [r7, #4]
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f7ff feb7 	bl	800c90c <pbuf_init_alloced_pbuf>
  return p;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3710      	adds	r7, #16
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	080189b0 	.word	0x080189b0
 800cbac:	08018ab4 	.word	0x08018ab4
 800cbb0:	08018a10 	.word	0x08018a10

0800cbb4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b088      	sub	sp, #32
 800cbb8:	af02      	add	r7, sp, #8
 800cbba:	607b      	str	r3, [r7, #4]
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	73fb      	strb	r3, [r7, #15]
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	81bb      	strh	r3, [r7, #12]
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
 800cbca:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cbcc:	8a7b      	ldrh	r3, [r7, #18]
 800cbce:	3303      	adds	r3, #3
 800cbd0:	f023 0203 	bic.w	r2, r3, #3
 800cbd4:	89bb      	ldrh	r3, [r7, #12]
 800cbd6:	441a      	add	r2, r3
 800cbd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d901      	bls.n	800cbe2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	e018      	b.n	800cc14 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cbe2:	6a3b      	ldr	r3, [r7, #32]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d007      	beq.n	800cbf8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cbe8:	8a7b      	ldrh	r3, [r7, #18]
 800cbea:	3303      	adds	r3, #3
 800cbec:	f023 0303 	bic.w	r3, r3, #3
 800cbf0:	6a3a      	ldr	r2, [r7, #32]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	617b      	str	r3, [r7, #20]
 800cbf6:	e001      	b.n	800cbfc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	89b9      	ldrh	r1, [r7, #12]
 800cc00:	89ba      	ldrh	r2, [r7, #12]
 800cc02:	2302      	movs	r3, #2
 800cc04:	9301      	str	r3, [sp, #4]
 800cc06:	897b      	ldrh	r3, [r7, #10]
 800cc08:	9300      	str	r3, [sp, #0]
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	6979      	ldr	r1, [r7, #20]
 800cc0e:	f7ff fe7d 	bl	800c90c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cc12:	687b      	ldr	r3, [r7, #4]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3718      	adds	r7, #24
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	460b      	mov	r3, r1
 800cc26:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d106      	bne.n	800cc3c <pbuf_realloc+0x20>
 800cc2e:	4b3a      	ldr	r3, [pc, #232]	@ (800cd18 <pbuf_realloc+0xfc>)
 800cc30:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800cc34:	4939      	ldr	r1, [pc, #228]	@ (800cd1c <pbuf_realloc+0x100>)
 800cc36:	483a      	ldr	r0, [pc, #232]	@ (800cd20 <pbuf_realloc+0x104>)
 800cc38:	f009 fe88 	bl	801694c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	891b      	ldrh	r3, [r3, #8]
 800cc40:	887a      	ldrh	r2, [r7, #2]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d263      	bcs.n	800cd0e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	891a      	ldrh	r2, [r3, #8]
 800cc4a:	887b      	ldrh	r3, [r7, #2]
 800cc4c:	1ad3      	subs	r3, r2, r3
 800cc4e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cc50:	887b      	ldrh	r3, [r7, #2]
 800cc52:	817b      	strh	r3, [r7, #10]
  q = p;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cc58:	e018      	b.n	800cc8c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	895b      	ldrh	r3, [r3, #10]
 800cc5e:	897a      	ldrh	r2, [r7, #10]
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	891a      	ldrh	r2, [r3, #8]
 800cc68:	893b      	ldrh	r3, [r7, #8]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	b29a      	uxth	r2, r3
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d106      	bne.n	800cc8c <pbuf_realloc+0x70>
 800cc7e:	4b26      	ldr	r3, [pc, #152]	@ (800cd18 <pbuf_realloc+0xfc>)
 800cc80:	f240 12af 	movw	r2, #431	@ 0x1af
 800cc84:	4927      	ldr	r1, [pc, #156]	@ (800cd24 <pbuf_realloc+0x108>)
 800cc86:	4826      	ldr	r0, [pc, #152]	@ (800cd20 <pbuf_realloc+0x104>)
 800cc88:	f009 fe60 	bl	801694c <iprintf>
  while (rem_len > q->len) {
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	895b      	ldrh	r3, [r3, #10]
 800cc90:	897a      	ldrh	r2, [r7, #10]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d8e1      	bhi.n	800cc5a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	7b1b      	ldrb	r3, [r3, #12]
 800cc9a:	f003 030f 	and.w	r3, r3, #15
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d121      	bne.n	800cce6 <pbuf_realloc+0xca>
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	895b      	ldrh	r3, [r3, #10]
 800cca6:	897a      	ldrh	r2, [r7, #10]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d01c      	beq.n	800cce6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	7b5b      	ldrb	r3, [r3, #13]
 800ccb0:	f003 0302 	and.w	r3, r3, #2
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d116      	bne.n	800cce6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	685a      	ldr	r2, [r3, #4]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	897b      	ldrh	r3, [r7, #10]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	4619      	mov	r1, r3
 800ccca:	68f8      	ldr	r0, [r7, #12]
 800cccc:	f7fe ff64 	bl	800bb98 <mem_trim>
 800ccd0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d106      	bne.n	800cce6 <pbuf_realloc+0xca>
 800ccd8:	4b0f      	ldr	r3, [pc, #60]	@ (800cd18 <pbuf_realloc+0xfc>)
 800ccda:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800ccde:	4912      	ldr	r1, [pc, #72]	@ (800cd28 <pbuf_realloc+0x10c>)
 800cce0:	480f      	ldr	r0, [pc, #60]	@ (800cd20 <pbuf_realloc+0x104>)
 800cce2:	f009 fe33 	bl	801694c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	897a      	ldrh	r2, [r7, #10]
 800ccea:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	895a      	ldrh	r2, [r3, #10]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d004      	beq.n	800cd06 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 f911 	bl	800cf28 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	601a      	str	r2, [r3, #0]
 800cd0c:	e000      	b.n	800cd10 <pbuf_realloc+0xf4>
    return;
 800cd0e:	bf00      	nop

}
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	080189b0 	.word	0x080189b0
 800cd1c:	08018ac8 	.word	0x08018ac8
 800cd20:	08018a10 	.word	0x08018a10
 800cd24:	08018ae0 	.word	0x08018ae0
 800cd28:	08018af8 	.word	0x08018af8

0800cd2c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b086      	sub	sp, #24
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	4613      	mov	r3, r2
 800cd38:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d106      	bne.n	800cd4e <pbuf_add_header_impl+0x22>
 800cd40:	4b2b      	ldr	r3, [pc, #172]	@ (800cdf0 <pbuf_add_header_impl+0xc4>)
 800cd42:	f240 12df 	movw	r2, #479	@ 0x1df
 800cd46:	492b      	ldr	r1, [pc, #172]	@ (800cdf4 <pbuf_add_header_impl+0xc8>)
 800cd48:	482b      	ldr	r0, [pc, #172]	@ (800cdf8 <pbuf_add_header_impl+0xcc>)
 800cd4a:	f009 fdff 	bl	801694c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d003      	beq.n	800cd5c <pbuf_add_header_impl+0x30>
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd5a:	d301      	bcc.n	800cd60 <pbuf_add_header_impl+0x34>
    return 1;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e043      	b.n	800cde8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <pbuf_add_header_impl+0x3e>
    return 0;
 800cd66:	2300      	movs	r3, #0
 800cd68:	e03e      	b.n	800cde8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	891a      	ldrh	r2, [r3, #8]
 800cd72:	8a7b      	ldrh	r3, [r7, #18]
 800cd74:	4413      	add	r3, r2
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	8a7a      	ldrh	r2, [r7, #18]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d901      	bls.n	800cd82 <pbuf_add_header_impl+0x56>
    return 1;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e032      	b.n	800cde8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	7b1b      	ldrb	r3, [r3, #12]
 800cd86:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cd88:	8a3b      	ldrh	r3, [r7, #16]
 800cd8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d00c      	beq.n	800cdac <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	685a      	ldr	r2, [r3, #4]
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	425b      	negs	r3, r3
 800cd9a:	4413      	add	r3, r2
 800cd9c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	3310      	adds	r3, #16
 800cda2:	697a      	ldr	r2, [r7, #20]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d20d      	bcs.n	800cdc4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	e01d      	b.n	800cde8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cdac:	79fb      	ldrb	r3, [r7, #7]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d006      	beq.n	800cdc0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	685a      	ldr	r2, [r3, #4]
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	425b      	negs	r3, r3
 800cdba:	4413      	add	r3, r2
 800cdbc:	617b      	str	r3, [r7, #20]
 800cdbe:	e001      	b.n	800cdc4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e011      	b.n	800cde8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	697a      	ldr	r2, [r7, #20]
 800cdc8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	895a      	ldrh	r2, [r3, #10]
 800cdce:	8a7b      	ldrh	r3, [r7, #18]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	b29a      	uxth	r2, r3
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	891a      	ldrh	r2, [r3, #8]
 800cddc:	8a7b      	ldrh	r3, [r7, #18]
 800cdde:	4413      	add	r3, r2
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	811a      	strh	r2, [r3, #8]


  return 0;
 800cde6:	2300      	movs	r3, #0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3718      	adds	r7, #24
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	080189b0 	.word	0x080189b0
 800cdf4:	08018b14 	.word	0x08018b14
 800cdf8:	08018a10 	.word	0x08018a10

0800cdfc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ce06:	2200      	movs	r2, #0
 800ce08:	6839      	ldr	r1, [r7, #0]
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f7ff ff8e 	bl	800cd2c <pbuf_add_header_impl>
 800ce10:	4603      	mov	r3, r0
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3708      	adds	r7, #8
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
	...

0800ce1c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d106      	bne.n	800ce3a <pbuf_remove_header+0x1e>
 800ce2c:	4b20      	ldr	r3, [pc, #128]	@ (800ceb0 <pbuf_remove_header+0x94>)
 800ce2e:	f240 224b 	movw	r2, #587	@ 0x24b
 800ce32:	4920      	ldr	r1, [pc, #128]	@ (800ceb4 <pbuf_remove_header+0x98>)
 800ce34:	4820      	ldr	r0, [pc, #128]	@ (800ceb8 <pbuf_remove_header+0x9c>)
 800ce36:	f009 fd89 	bl	801694c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d003      	beq.n	800ce48 <pbuf_remove_header+0x2c>
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce46:	d301      	bcc.n	800ce4c <pbuf_remove_header+0x30>
    return 1;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e02c      	b.n	800cea6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <pbuf_remove_header+0x3a>
    return 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	e027      	b.n	800cea6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	895b      	ldrh	r3, [r3, #10]
 800ce5e:	89fa      	ldrh	r2, [r7, #14]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d908      	bls.n	800ce76 <pbuf_remove_header+0x5a>
 800ce64:	4b12      	ldr	r3, [pc, #72]	@ (800ceb0 <pbuf_remove_header+0x94>)
 800ce66:	f240 2255 	movw	r2, #597	@ 0x255
 800ce6a:	4914      	ldr	r1, [pc, #80]	@ (800cebc <pbuf_remove_header+0xa0>)
 800ce6c:	4812      	ldr	r0, [pc, #72]	@ (800ceb8 <pbuf_remove_header+0x9c>)
 800ce6e:	f009 fd6d 	bl	801694c <iprintf>
 800ce72:	2301      	movs	r3, #1
 800ce74:	e017      	b.n	800cea6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	685a      	ldr	r2, [r3, #4]
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	441a      	add	r2, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	895a      	ldrh	r2, [r3, #10]
 800ce8c:	89fb      	ldrh	r3, [r7, #14]
 800ce8e:	1ad3      	subs	r3, r2, r3
 800ce90:	b29a      	uxth	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	891a      	ldrh	r2, [r3, #8]
 800ce9a:	89fb      	ldrh	r3, [r7, #14]
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	b29a      	uxth	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	080189b0 	.word	0x080189b0
 800ceb4:	08018b14 	.word	0x08018b14
 800ceb8:	08018a10 	.word	0x08018a10
 800cebc:	08018b20 	.word	0x08018b20

0800cec0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	807b      	strh	r3, [r7, #2]
 800cecc:	4613      	mov	r3, r2
 800cece:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ced0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	da08      	bge.n	800ceea <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ced8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cedc:	425b      	negs	r3, r3
 800cede:	4619      	mov	r1, r3
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f7ff ff9b 	bl	800ce1c <pbuf_remove_header>
 800cee6:	4603      	mov	r3, r0
 800cee8:	e007      	b.n	800cefa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ceea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ceee:	787a      	ldrb	r2, [r7, #1]
 800cef0:	4619      	mov	r1, r3
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f7ff ff1a 	bl	800cd2c <pbuf_add_header_impl>
 800cef8:	4603      	mov	r3, r0
  }
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3708      	adds	r7, #8
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cf02:	b580      	push	{r7, lr}
 800cf04:	b082      	sub	sp, #8
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cf0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf12:	2201      	movs	r2, #1
 800cf14:	4619      	mov	r1, r3
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f7ff ffd2 	bl	800cec0 <pbuf_header_impl>
 800cf1c:	4603      	mov	r3, r0
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
	...

0800cf28 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b088      	sub	sp, #32
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10b      	bne.n	800cf4e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d106      	bne.n	800cf4a <pbuf_free+0x22>
 800cf3c:	4b3b      	ldr	r3, [pc, #236]	@ (800d02c <pbuf_free+0x104>)
 800cf3e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800cf42:	493b      	ldr	r1, [pc, #236]	@ (800d030 <pbuf_free+0x108>)
 800cf44:	483b      	ldr	r0, [pc, #236]	@ (800d034 <pbuf_free+0x10c>)
 800cf46:	f009 fd01 	bl	801694c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	e069      	b.n	800d022 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cf52:	e062      	b.n	800d01a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cf54:	f009 fbdc 	bl	8016710 <sys_arch_protect>
 800cf58:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	7b9b      	ldrb	r3, [r3, #14]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d106      	bne.n	800cf70 <pbuf_free+0x48>
 800cf62:	4b32      	ldr	r3, [pc, #200]	@ (800d02c <pbuf_free+0x104>)
 800cf64:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800cf68:	4933      	ldr	r1, [pc, #204]	@ (800d038 <pbuf_free+0x110>)
 800cf6a:	4832      	ldr	r0, [pc, #200]	@ (800d034 <pbuf_free+0x10c>)
 800cf6c:	f009 fcee 	bl	801694c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	7b9b      	ldrb	r3, [r3, #14]
 800cf74:	3b01      	subs	r3, #1
 800cf76:	b2da      	uxtb	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	739a      	strb	r2, [r3, #14]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	7b9b      	ldrb	r3, [r3, #14]
 800cf80:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cf82:	69b8      	ldr	r0, [r7, #24]
 800cf84:	f009 fbd2 	bl	801672c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cf88:	7dfb      	ldrb	r3, [r7, #23]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d143      	bne.n	800d016 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	7b1b      	ldrb	r3, [r3, #12]
 800cf98:	f003 030f 	and.w	r3, r3, #15
 800cf9c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	7b5b      	ldrb	r3, [r3, #13]
 800cfa2:	f003 0302 	and.w	r3, r3, #2
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d011      	beq.n	800cfce <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	691b      	ldr	r3, [r3, #16]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d106      	bne.n	800cfc4 <pbuf_free+0x9c>
 800cfb6:	4b1d      	ldr	r3, [pc, #116]	@ (800d02c <pbuf_free+0x104>)
 800cfb8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800cfbc:	491f      	ldr	r1, [pc, #124]	@ (800d03c <pbuf_free+0x114>)
 800cfbe:	481d      	ldr	r0, [pc, #116]	@ (800d034 <pbuf_free+0x10c>)
 800cfc0:	f009 fcc4 	bl	801694c <iprintf>
        pc->custom_free_function(p);
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	691b      	ldr	r3, [r3, #16]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	4798      	blx	r3
 800cfcc:	e01d      	b.n	800d00a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cfce:	7bfb      	ldrb	r3, [r7, #15]
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	d104      	bne.n	800cfde <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800cfd4:	6879      	ldr	r1, [r7, #4]
 800cfd6:	200c      	movs	r0, #12
 800cfd8:	f7ff f902 	bl	800c1e0 <memp_free>
 800cfdc:	e015      	b.n	800d00a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cfde:	7bfb      	ldrb	r3, [r7, #15]
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d104      	bne.n	800cfee <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800cfe4:	6879      	ldr	r1, [r7, #4]
 800cfe6:	200b      	movs	r0, #11
 800cfe8:	f7ff f8fa 	bl	800c1e0 <memp_free>
 800cfec:	e00d      	b.n	800d00a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cfee:	7bfb      	ldrb	r3, [r7, #15]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d103      	bne.n	800cffc <pbuf_free+0xd4>
          mem_free(p);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f7fe fd3f 	bl	800ba78 <mem_free>
 800cffa:	e006      	b.n	800d00a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cffc:	4b0b      	ldr	r3, [pc, #44]	@ (800d02c <pbuf_free+0x104>)
 800cffe:	f240 320f 	movw	r2, #783	@ 0x30f
 800d002:	490f      	ldr	r1, [pc, #60]	@ (800d040 <pbuf_free+0x118>)
 800d004:	480b      	ldr	r0, [pc, #44]	@ (800d034 <pbuf_free+0x10c>)
 800d006:	f009 fca1 	bl	801694c <iprintf>
        }
      }
      count++;
 800d00a:	7ffb      	ldrb	r3, [r7, #31]
 800d00c:	3301      	adds	r3, #1
 800d00e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	607b      	str	r3, [r7, #4]
 800d014:	e001      	b.n	800d01a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d016:	2300      	movs	r3, #0
 800d018:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d199      	bne.n	800cf54 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d020:	7ffb      	ldrb	r3, [r7, #31]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3720      	adds	r7, #32
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	080189b0 	.word	0x080189b0
 800d030:	08018b14 	.word	0x08018b14
 800d034:	08018a10 	.word	0x08018a10
 800d038:	08018b40 	.word	0x08018b40
 800d03c:	08018b58 	.word	0x08018b58
 800d040:	08018b7c 	.word	0x08018b7c

0800d044 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d044:	b480      	push	{r7}
 800d046:	b085      	sub	sp, #20
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d04c:	2300      	movs	r3, #0
 800d04e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d050:	e005      	b.n	800d05e <pbuf_clen+0x1a>
    ++len;
 800d052:	89fb      	ldrh	r3, [r7, #14]
 800d054:	3301      	adds	r3, #1
 800d056:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d1f6      	bne.n	800d052 <pbuf_clen+0xe>
  }
  return len;
 800d064:	89fb      	ldrh	r3, [r7, #14]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3714      	adds	r7, #20
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
	...

0800d074 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d016      	beq.n	800d0b0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d082:	f009 fb45 	bl	8016710 <sys_arch_protect>
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	7b9b      	ldrb	r3, [r3, #14]
 800d08c:	3301      	adds	r3, #1
 800d08e:	b2da      	uxtb	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	739a      	strb	r2, [r3, #14]
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f009 fb49 	bl	801672c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	7b9b      	ldrb	r3, [r3, #14]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d106      	bne.n	800d0b0 <pbuf_ref+0x3c>
 800d0a2:	4b05      	ldr	r3, [pc, #20]	@ (800d0b8 <pbuf_ref+0x44>)
 800d0a4:	f240 3242 	movw	r2, #834	@ 0x342
 800d0a8:	4904      	ldr	r1, [pc, #16]	@ (800d0bc <pbuf_ref+0x48>)
 800d0aa:	4805      	ldr	r0, [pc, #20]	@ (800d0c0 <pbuf_ref+0x4c>)
 800d0ac:	f009 fc4e 	bl	801694c <iprintf>
  }
}
 800d0b0:	bf00      	nop
 800d0b2:	3710      	adds	r7, #16
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	080189b0 	.word	0x080189b0
 800d0bc:	08018b90 	.word	0x08018b90
 800d0c0:	08018a10 	.word	0x08018a10

0800d0c4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b084      	sub	sp, #16
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d002      	beq.n	800d0da <pbuf_cat+0x16>
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d107      	bne.n	800d0ea <pbuf_cat+0x26>
 800d0da:	4b20      	ldr	r3, [pc, #128]	@ (800d15c <pbuf_cat+0x98>)
 800d0dc:	f240 3259 	movw	r2, #857	@ 0x359
 800d0e0:	491f      	ldr	r1, [pc, #124]	@ (800d160 <pbuf_cat+0x9c>)
 800d0e2:	4820      	ldr	r0, [pc, #128]	@ (800d164 <pbuf_cat+0xa0>)
 800d0e4:	f009 fc32 	bl	801694c <iprintf>
 800d0e8:	e034      	b.n	800d154 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	60fb      	str	r3, [r7, #12]
 800d0ee:	e00a      	b.n	800d106 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	891a      	ldrh	r2, [r3, #8]
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	891b      	ldrh	r3, [r3, #8]
 800d0f8:	4413      	add	r3, r2
 800d0fa:	b29a      	uxth	r2, r3
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	60fb      	str	r3, [r7, #12]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d1f0      	bne.n	800d0f0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	891a      	ldrh	r2, [r3, #8]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	895b      	ldrh	r3, [r3, #10]
 800d116:	429a      	cmp	r2, r3
 800d118:	d006      	beq.n	800d128 <pbuf_cat+0x64>
 800d11a:	4b10      	ldr	r3, [pc, #64]	@ (800d15c <pbuf_cat+0x98>)
 800d11c:	f240 3262 	movw	r2, #866	@ 0x362
 800d120:	4911      	ldr	r1, [pc, #68]	@ (800d168 <pbuf_cat+0xa4>)
 800d122:	4810      	ldr	r0, [pc, #64]	@ (800d164 <pbuf_cat+0xa0>)
 800d124:	f009 fc12 	bl	801694c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d006      	beq.n	800d13e <pbuf_cat+0x7a>
 800d130:	4b0a      	ldr	r3, [pc, #40]	@ (800d15c <pbuf_cat+0x98>)
 800d132:	f240 3263 	movw	r2, #867	@ 0x363
 800d136:	490d      	ldr	r1, [pc, #52]	@ (800d16c <pbuf_cat+0xa8>)
 800d138:	480a      	ldr	r0, [pc, #40]	@ (800d164 <pbuf_cat+0xa0>)
 800d13a:	f009 fc07 	bl	801694c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	891a      	ldrh	r2, [r3, #8]
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	891b      	ldrh	r3, [r3, #8]
 800d146:	4413      	add	r3, r2
 800d148:	b29a      	uxth	r2, r3
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	683a      	ldr	r2, [r7, #0]
 800d152:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	080189b0 	.word	0x080189b0
 800d160:	08018ba4 	.word	0x08018ba4
 800d164:	08018a10 	.word	0x08018a10
 800d168:	08018bdc 	.word	0x08018bdc
 800d16c:	08018c0c 	.word	0x08018c0c

0800d170 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d17a:	2300      	movs	r3, #0
 800d17c:	617b      	str	r3, [r7, #20]
 800d17e:	2300      	movs	r3, #0
 800d180:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d008      	beq.n	800d19a <pbuf_copy+0x2a>
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d005      	beq.n	800d19a <pbuf_copy+0x2a>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	891a      	ldrh	r2, [r3, #8]
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	891b      	ldrh	r3, [r3, #8]
 800d196:	429a      	cmp	r2, r3
 800d198:	d209      	bcs.n	800d1ae <pbuf_copy+0x3e>
 800d19a:	4b57      	ldr	r3, [pc, #348]	@ (800d2f8 <pbuf_copy+0x188>)
 800d19c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800d1a0:	4956      	ldr	r1, [pc, #344]	@ (800d2fc <pbuf_copy+0x18c>)
 800d1a2:	4857      	ldr	r0, [pc, #348]	@ (800d300 <pbuf_copy+0x190>)
 800d1a4:	f009 fbd2 	bl	801694c <iprintf>
 800d1a8:	f06f 030f 	mvn.w	r3, #15
 800d1ac:	e09f      	b.n	800d2ee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	895b      	ldrh	r3, [r3, #10]
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	1ad2      	subs	r2, r2, r3
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	895b      	ldrh	r3, [r3, #10]
 800d1bc:	4619      	mov	r1, r3
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	1acb      	subs	r3, r1, r3
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d306      	bcc.n	800d1d4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	895b      	ldrh	r3, [r3, #10]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	1ad3      	subs	r3, r2, r3
 800d1d0:	60fb      	str	r3, [r7, #12]
 800d1d2:	e005      	b.n	800d1e0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	895b      	ldrh	r3, [r3, #10]
 800d1d8:	461a      	mov	r2, r3
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	1ad3      	subs	r3, r2, r3
 800d1de:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	685a      	ldr	r2, [r3, #4]
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	18d0      	adds	r0, r2, r3
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	685a      	ldr	r2, [r3, #4]
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	4413      	add	r3, r2
 800d1f0:	68fa      	ldr	r2, [r7, #12]
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	f009 fcdb 	bl	8016bae <memcpy>
    offset_to += len;
 800d1f8:	697a      	ldr	r2, [r7, #20]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d200:	693a      	ldr	r2, [r7, #16]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	4413      	add	r3, r2
 800d206:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	895b      	ldrh	r3, [r3, #10]
 800d20c:	461a      	mov	r2, r3
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	4293      	cmp	r3, r2
 800d212:	d906      	bls.n	800d222 <pbuf_copy+0xb2>
 800d214:	4b38      	ldr	r3, [pc, #224]	@ (800d2f8 <pbuf_copy+0x188>)
 800d216:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800d21a:	493a      	ldr	r1, [pc, #232]	@ (800d304 <pbuf_copy+0x194>)
 800d21c:	4838      	ldr	r0, [pc, #224]	@ (800d300 <pbuf_copy+0x190>)
 800d21e:	f009 fb95 	bl	801694c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	895b      	ldrh	r3, [r3, #10]
 800d226:	461a      	mov	r2, r3
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d906      	bls.n	800d23c <pbuf_copy+0xcc>
 800d22e:	4b32      	ldr	r3, [pc, #200]	@ (800d2f8 <pbuf_copy+0x188>)
 800d230:	f240 32da 	movw	r2, #986	@ 0x3da
 800d234:	4934      	ldr	r1, [pc, #208]	@ (800d308 <pbuf_copy+0x198>)
 800d236:	4832      	ldr	r0, [pc, #200]	@ (800d300 <pbuf_copy+0x190>)
 800d238:	f009 fb88 	bl	801694c <iprintf>
    if (offset_from >= p_from->len) {
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	895b      	ldrh	r3, [r3, #10]
 800d240:	461a      	mov	r2, r3
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	4293      	cmp	r3, r2
 800d246:	d304      	bcc.n	800d252 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d248:	2300      	movs	r3, #0
 800d24a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	895b      	ldrh	r3, [r3, #10]
 800d256:	461a      	mov	r2, r3
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d114      	bne.n	800d288 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d25e:	2300      	movs	r3, #0
 800d260:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d10c      	bne.n	800d288 <pbuf_copy+0x118>
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d009      	beq.n	800d288 <pbuf_copy+0x118>
 800d274:	4b20      	ldr	r3, [pc, #128]	@ (800d2f8 <pbuf_copy+0x188>)
 800d276:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800d27a:	4924      	ldr	r1, [pc, #144]	@ (800d30c <pbuf_copy+0x19c>)
 800d27c:	4820      	ldr	r0, [pc, #128]	@ (800d300 <pbuf_copy+0x190>)
 800d27e:	f009 fb65 	bl	801694c <iprintf>
 800d282:	f06f 030f 	mvn.w	r3, #15
 800d286:	e032      	b.n	800d2ee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d013      	beq.n	800d2b6 <pbuf_copy+0x146>
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	895a      	ldrh	r2, [r3, #10]
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	891b      	ldrh	r3, [r3, #8]
 800d296:	429a      	cmp	r2, r3
 800d298:	d10d      	bne.n	800d2b6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d009      	beq.n	800d2b6 <pbuf_copy+0x146>
 800d2a2:	4b15      	ldr	r3, [pc, #84]	@ (800d2f8 <pbuf_copy+0x188>)
 800d2a4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d2a8:	4919      	ldr	r1, [pc, #100]	@ (800d310 <pbuf_copy+0x1a0>)
 800d2aa:	4815      	ldr	r0, [pc, #84]	@ (800d300 <pbuf_copy+0x190>)
 800d2ac:	f009 fb4e 	bl	801694c <iprintf>
 800d2b0:	f06f 0305 	mvn.w	r3, #5
 800d2b4:	e01b      	b.n	800d2ee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d013      	beq.n	800d2e4 <pbuf_copy+0x174>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	895a      	ldrh	r2, [r3, #10]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	891b      	ldrh	r3, [r3, #8]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d10d      	bne.n	800d2e4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d009      	beq.n	800d2e4 <pbuf_copy+0x174>
 800d2d0:	4b09      	ldr	r3, [pc, #36]	@ (800d2f8 <pbuf_copy+0x188>)
 800d2d2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800d2d6:	490e      	ldr	r1, [pc, #56]	@ (800d310 <pbuf_copy+0x1a0>)
 800d2d8:	4809      	ldr	r0, [pc, #36]	@ (800d300 <pbuf_copy+0x190>)
 800d2da:	f009 fb37 	bl	801694c <iprintf>
 800d2de:	f06f 0305 	mvn.w	r3, #5
 800d2e2:	e004      	b.n	800d2ee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f47f af61 	bne.w	800d1ae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3718      	adds	r7, #24
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	080189b0 	.word	0x080189b0
 800d2fc:	08018c58 	.word	0x08018c58
 800d300:	08018a10 	.word	0x08018a10
 800d304:	08018c88 	.word	0x08018c88
 800d308:	08018ca0 	.word	0x08018ca0
 800d30c:	08018cbc 	.word	0x08018cbc
 800d310:	08018ccc 	.word	0x08018ccc

0800d314 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b088      	sub	sp, #32
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	4611      	mov	r1, r2
 800d320:	461a      	mov	r2, r3
 800d322:	460b      	mov	r3, r1
 800d324:	80fb      	strh	r3, [r7, #6]
 800d326:	4613      	mov	r3, r2
 800d328:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d32a:	2300      	movs	r3, #0
 800d32c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d32e:	2300      	movs	r3, #0
 800d330:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d108      	bne.n	800d34a <pbuf_copy_partial+0x36>
 800d338:	4b2b      	ldr	r3, [pc, #172]	@ (800d3e8 <pbuf_copy_partial+0xd4>)
 800d33a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d33e:	492b      	ldr	r1, [pc, #172]	@ (800d3ec <pbuf_copy_partial+0xd8>)
 800d340:	482b      	ldr	r0, [pc, #172]	@ (800d3f0 <pbuf_copy_partial+0xdc>)
 800d342:	f009 fb03 	bl	801694c <iprintf>
 800d346:	2300      	movs	r3, #0
 800d348:	e04a      	b.n	800d3e0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d108      	bne.n	800d362 <pbuf_copy_partial+0x4e>
 800d350:	4b25      	ldr	r3, [pc, #148]	@ (800d3e8 <pbuf_copy_partial+0xd4>)
 800d352:	f240 420b 	movw	r2, #1035	@ 0x40b
 800d356:	4927      	ldr	r1, [pc, #156]	@ (800d3f4 <pbuf_copy_partial+0xe0>)
 800d358:	4825      	ldr	r0, [pc, #148]	@ (800d3f0 <pbuf_copy_partial+0xdc>)
 800d35a:	f009 faf7 	bl	801694c <iprintf>
 800d35e:	2300      	movs	r3, #0
 800d360:	e03e      	b.n	800d3e0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	61fb      	str	r3, [r7, #28]
 800d366:	e034      	b.n	800d3d2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d368:	88bb      	ldrh	r3, [r7, #4]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d00a      	beq.n	800d384 <pbuf_copy_partial+0x70>
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	895b      	ldrh	r3, [r3, #10]
 800d372:	88ba      	ldrh	r2, [r7, #4]
 800d374:	429a      	cmp	r2, r3
 800d376:	d305      	bcc.n	800d384 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	895b      	ldrh	r3, [r3, #10]
 800d37c:	88ba      	ldrh	r2, [r7, #4]
 800d37e:	1ad3      	subs	r3, r2, r3
 800d380:	80bb      	strh	r3, [r7, #4]
 800d382:	e023      	b.n	800d3cc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	895a      	ldrh	r2, [r3, #10]
 800d388:	88bb      	ldrh	r3, [r7, #4]
 800d38a:	1ad3      	subs	r3, r2, r3
 800d38c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d38e:	8b3a      	ldrh	r2, [r7, #24]
 800d390:	88fb      	ldrh	r3, [r7, #6]
 800d392:	429a      	cmp	r2, r3
 800d394:	d901      	bls.n	800d39a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d396:	88fb      	ldrh	r3, [r7, #6]
 800d398:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d39a:	8b7b      	ldrh	r3, [r7, #26]
 800d39c:	68ba      	ldr	r2, [r7, #8]
 800d39e:	18d0      	adds	r0, r2, r3
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	685a      	ldr	r2, [r3, #4]
 800d3a4:	88bb      	ldrh	r3, [r7, #4]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	8b3a      	ldrh	r2, [r7, #24]
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	f009 fbff 	bl	8016bae <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d3b0:	8afa      	ldrh	r2, [r7, #22]
 800d3b2:	8b3b      	ldrh	r3, [r7, #24]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d3b8:	8b7a      	ldrh	r2, [r7, #26]
 800d3ba:	8b3b      	ldrh	r3, [r7, #24]
 800d3bc:	4413      	add	r3, r2
 800d3be:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d3c0:	88fa      	ldrh	r2, [r7, #6]
 800d3c2:	8b3b      	ldrh	r3, [r7, #24]
 800d3c4:	1ad3      	subs	r3, r2, r3
 800d3c6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	61fb      	str	r3, [r7, #28]
 800d3d2:	88fb      	ldrh	r3, [r7, #6]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d002      	beq.n	800d3de <pbuf_copy_partial+0xca>
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d1c4      	bne.n	800d368 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d3de:	8afb      	ldrh	r3, [r7, #22]
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3720      	adds	r7, #32
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}
 800d3e8:	080189b0 	.word	0x080189b0
 800d3ec:	08018cf8 	.word	0x08018cf8
 800d3f0:	08018a10 	.word	0x08018a10
 800d3f4:	08018d18 	.word	0x08018d18

0800d3f8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	4603      	mov	r3, r0
 800d400:	603a      	str	r2, [r7, #0]
 800d402:	71fb      	strb	r3, [r7, #7]
 800d404:	460b      	mov	r3, r1
 800d406:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	8919      	ldrh	r1, [r3, #8]
 800d40c:	88ba      	ldrh	r2, [r7, #4]
 800d40e:	79fb      	ldrb	r3, [r7, #7]
 800d410:	4618      	mov	r0, r3
 800d412:	f7ff faa5 	bl	800c960 <pbuf_alloc>
 800d416:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d101      	bne.n	800d422 <pbuf_clone+0x2a>
    return NULL;
 800d41e:	2300      	movs	r3, #0
 800d420:	e011      	b.n	800d446 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d422:	6839      	ldr	r1, [r7, #0]
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f7ff fea3 	bl	800d170 <pbuf_copy>
 800d42a:	4603      	mov	r3, r0
 800d42c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d42e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d006      	beq.n	800d444 <pbuf_clone+0x4c>
 800d436:	4b06      	ldr	r3, [pc, #24]	@ (800d450 <pbuf_clone+0x58>)
 800d438:	f240 5224 	movw	r2, #1316	@ 0x524
 800d43c:	4905      	ldr	r1, [pc, #20]	@ (800d454 <pbuf_clone+0x5c>)
 800d43e:	4806      	ldr	r0, [pc, #24]	@ (800d458 <pbuf_clone+0x60>)
 800d440:	f009 fa84 	bl	801694c <iprintf>
  return q;
 800d444:	68fb      	ldr	r3, [r7, #12]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	080189b0 	.word	0x080189b0
 800d454:	08018e24 	.word	0x08018e24
 800d458:	08018a10 	.word	0x08018a10

0800d45c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d460:	f009 f974 	bl	801674c <rand>
 800d464:	4603      	mov	r3, r0
 800d466:	b29b      	uxth	r3, r3
 800d468:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d472:	b29a      	uxth	r2, r3
 800d474:	4b01      	ldr	r3, [pc, #4]	@ (800d47c <tcp_init+0x20>)
 800d476:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d478:	bf00      	nop
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	20000024 	.word	0x20000024

0800d480 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	7d1b      	ldrb	r3, [r3, #20]
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d105      	bne.n	800d49c <tcp_free+0x1c>
 800d490:	4b06      	ldr	r3, [pc, #24]	@ (800d4ac <tcp_free+0x2c>)
 800d492:	22d4      	movs	r2, #212	@ 0xd4
 800d494:	4906      	ldr	r1, [pc, #24]	@ (800d4b0 <tcp_free+0x30>)
 800d496:	4807      	ldr	r0, [pc, #28]	@ (800d4b4 <tcp_free+0x34>)
 800d498:	f009 fa58 	bl	801694c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d49c:	6879      	ldr	r1, [r7, #4]
 800d49e:	2001      	movs	r0, #1
 800d4a0:	f7fe fe9e 	bl	800c1e0 <memp_free>
}
 800d4a4:	bf00      	nop
 800d4a6:	3708      	adds	r7, #8
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	08018eb0 	.word	0x08018eb0
 800d4b0:	08018ee0 	.word	0x08018ee0
 800d4b4:	08018ef4 	.word	0x08018ef4

0800d4b8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	7d1b      	ldrb	r3, [r3, #20]
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d105      	bne.n	800d4d4 <tcp_free_listen+0x1c>
 800d4c8:	4b06      	ldr	r3, [pc, #24]	@ (800d4e4 <tcp_free_listen+0x2c>)
 800d4ca:	22df      	movs	r2, #223	@ 0xdf
 800d4cc:	4906      	ldr	r1, [pc, #24]	@ (800d4e8 <tcp_free_listen+0x30>)
 800d4ce:	4807      	ldr	r0, [pc, #28]	@ (800d4ec <tcp_free_listen+0x34>)
 800d4d0:	f009 fa3c 	bl	801694c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d4d4:	6879      	ldr	r1, [r7, #4]
 800d4d6:	2002      	movs	r0, #2
 800d4d8:	f7fe fe82 	bl	800c1e0 <memp_free>
}
 800d4dc:	bf00      	nop
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	08018eb0 	.word	0x08018eb0
 800d4e8:	08018f1c 	.word	0x08018f1c
 800d4ec:	08018ef4 	.word	0x08018ef4

0800d4f0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d4f4:	f001 f8a8 	bl	800e648 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d4f8:	4b07      	ldr	r3, [pc, #28]	@ (800d518 <tcp_tmr+0x28>)
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	b2da      	uxtb	r2, r3
 800d500:	4b05      	ldr	r3, [pc, #20]	@ (800d518 <tcp_tmr+0x28>)
 800d502:	701a      	strb	r2, [r3, #0]
 800d504:	4b04      	ldr	r3, [pc, #16]	@ (800d518 <tcp_tmr+0x28>)
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	f003 0301 	and.w	r3, r3, #1
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d001      	beq.n	800d514 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d510:	f000 fd58 	bl	800dfc4 <tcp_slowtmr>
  }
}
 800d514:	bf00      	nop
 800d516:	bd80      	pop	{r7, pc}
 800d518:	2000f2c5 	.word	0x2000f2c5

0800d51c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d105      	bne.n	800d538 <tcp_remove_listener+0x1c>
 800d52c:	4b0d      	ldr	r3, [pc, #52]	@ (800d564 <tcp_remove_listener+0x48>)
 800d52e:	22ff      	movs	r2, #255	@ 0xff
 800d530:	490d      	ldr	r1, [pc, #52]	@ (800d568 <tcp_remove_listener+0x4c>)
 800d532:	480e      	ldr	r0, [pc, #56]	@ (800d56c <tcp_remove_listener+0x50>)
 800d534:	f009 fa0a 	bl	801694c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	60fb      	str	r3, [r7, #12]
 800d53c:	e00a      	b.n	800d554 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d542:	683a      	ldr	r2, [r7, #0]
 800d544:	429a      	cmp	r2, r3
 800d546:	d102      	bne.n	800d54e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2200      	movs	r2, #0
 800d54c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	60fb      	str	r3, [r7, #12]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1f1      	bne.n	800d53e <tcp_remove_listener+0x22>
    }
  }
}
 800d55a:	bf00      	nop
 800d55c:	bf00      	nop
 800d55e:	3710      	adds	r7, #16
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	08018eb0 	.word	0x08018eb0
 800d568:	08018f38 	.word	0x08018f38
 800d56c:	08018ef4 	.word	0x08018ef4

0800d570 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d106      	bne.n	800d58c <tcp_listen_closed+0x1c>
 800d57e:	4b14      	ldr	r3, [pc, #80]	@ (800d5d0 <tcp_listen_closed+0x60>)
 800d580:	f240 1211 	movw	r2, #273	@ 0x111
 800d584:	4913      	ldr	r1, [pc, #76]	@ (800d5d4 <tcp_listen_closed+0x64>)
 800d586:	4814      	ldr	r0, [pc, #80]	@ (800d5d8 <tcp_listen_closed+0x68>)
 800d588:	f009 f9e0 	bl	801694c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	7d1b      	ldrb	r3, [r3, #20]
 800d590:	2b01      	cmp	r3, #1
 800d592:	d006      	beq.n	800d5a2 <tcp_listen_closed+0x32>
 800d594:	4b0e      	ldr	r3, [pc, #56]	@ (800d5d0 <tcp_listen_closed+0x60>)
 800d596:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d59a:	4910      	ldr	r1, [pc, #64]	@ (800d5dc <tcp_listen_closed+0x6c>)
 800d59c:	480e      	ldr	r0, [pc, #56]	@ (800d5d8 <tcp_listen_closed+0x68>)
 800d59e:	f009 f9d5 	bl	801694c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	60fb      	str	r3, [r7, #12]
 800d5a6:	e00b      	b.n	800d5c0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d5a8:	4a0d      	ldr	r2, [pc, #52]	@ (800d5e0 <tcp_listen_closed+0x70>)
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	6879      	ldr	r1, [r7, #4]
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f7ff ffb1 	bl	800d51c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	3301      	adds	r3, #1
 800d5be:	60fb      	str	r3, [r7, #12]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2b03      	cmp	r3, #3
 800d5c4:	d9f0      	bls.n	800d5a8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d5c6:	bf00      	nop
 800d5c8:	bf00      	nop
 800d5ca:	3710      	adds	r7, #16
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	08018eb0 	.word	0x08018eb0
 800d5d4:	08018f60 	.word	0x08018f60
 800d5d8:	08018ef4 	.word	0x08018ef4
 800d5dc:	08018f6c 	.word	0x08018f6c
 800d5e0:	0801aef8 	.word	0x0801aef8

0800d5e4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d5e4:	b5b0      	push	{r4, r5, r7, lr}
 800d5e6:	b088      	sub	sp, #32
 800d5e8:	af04      	add	r7, sp, #16
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d106      	bne.n	800d604 <tcp_close_shutdown+0x20>
 800d5f6:	4b63      	ldr	r3, [pc, #396]	@ (800d784 <tcp_close_shutdown+0x1a0>)
 800d5f8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d5fc:	4962      	ldr	r1, [pc, #392]	@ (800d788 <tcp_close_shutdown+0x1a4>)
 800d5fe:	4863      	ldr	r0, [pc, #396]	@ (800d78c <tcp_close_shutdown+0x1a8>)
 800d600:	f009 f9a4 	bl	801694c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d604:	78fb      	ldrb	r3, [r7, #3]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d066      	beq.n	800d6d8 <tcp_close_shutdown+0xf4>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	7d1b      	ldrb	r3, [r3, #20]
 800d60e:	2b04      	cmp	r3, #4
 800d610:	d003      	beq.n	800d61a <tcp_close_shutdown+0x36>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	7d1b      	ldrb	r3, [r3, #20]
 800d616:	2b07      	cmp	r3, #7
 800d618:	d15e      	bne.n	800d6d8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d104      	bne.n	800d62c <tcp_close_shutdown+0x48>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d626:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d62a:	d055      	beq.n	800d6d8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	8b5b      	ldrh	r3, [r3, #26]
 800d630:	f003 0310 	and.w	r3, r3, #16
 800d634:	2b00      	cmp	r3, #0
 800d636:	d106      	bne.n	800d646 <tcp_close_shutdown+0x62>
 800d638:	4b52      	ldr	r3, [pc, #328]	@ (800d784 <tcp_close_shutdown+0x1a0>)
 800d63a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d63e:	4954      	ldr	r1, [pc, #336]	@ (800d790 <tcp_close_shutdown+0x1ac>)
 800d640:	4852      	ldr	r0, [pc, #328]	@ (800d78c <tcp_close_shutdown+0x1a8>)
 800d642:	f009 f983 	bl	801694c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d64e:	687d      	ldr	r5, [r7, #4]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	3304      	adds	r3, #4
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	8ad2      	ldrh	r2, [r2, #22]
 800d658:	6879      	ldr	r1, [r7, #4]
 800d65a:	8b09      	ldrh	r1, [r1, #24]
 800d65c:	9102      	str	r1, [sp, #8]
 800d65e:	9201      	str	r2, [sp, #4]
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	462b      	mov	r3, r5
 800d664:	4622      	mov	r2, r4
 800d666:	4601      	mov	r1, r0
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f005 fdb7 	bl	80131dc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f001 fb9a 	bl	800eda8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d674:	4b47      	ldr	r3, [pc, #284]	@ (800d794 <tcp_close_shutdown+0x1b0>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d105      	bne.n	800d68a <tcp_close_shutdown+0xa6>
 800d67e:	4b45      	ldr	r3, [pc, #276]	@ (800d794 <tcp_close_shutdown+0x1b0>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	68db      	ldr	r3, [r3, #12]
 800d684:	4a43      	ldr	r2, [pc, #268]	@ (800d794 <tcp_close_shutdown+0x1b0>)
 800d686:	6013      	str	r3, [r2, #0]
 800d688:	e013      	b.n	800d6b2 <tcp_close_shutdown+0xce>
 800d68a:	4b42      	ldr	r3, [pc, #264]	@ (800d794 <tcp_close_shutdown+0x1b0>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	60fb      	str	r3, [r7, #12]
 800d690:	e00c      	b.n	800d6ac <tcp_close_shutdown+0xc8>
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d104      	bne.n	800d6a6 <tcp_close_shutdown+0xc2>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	68da      	ldr	r2, [r3, #12]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	60da      	str	r2, [r3, #12]
 800d6a4:	e005      	b.n	800d6b2 <tcp_close_shutdown+0xce>
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	60fb      	str	r3, [r7, #12]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1ef      	bne.n	800d692 <tcp_close_shutdown+0xae>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	60da      	str	r2, [r3, #12]
 800d6b8:	4b37      	ldr	r3, [pc, #220]	@ (800d798 <tcp_close_shutdown+0x1b4>)
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d6be:	4b37      	ldr	r3, [pc, #220]	@ (800d79c <tcp_close_shutdown+0x1b8>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d102      	bne.n	800d6ce <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d6c8:	f004 f82e 	bl	8011728 <tcp_trigger_input_pcb_close>
 800d6cc:	e002      	b.n	800d6d4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7ff fed6 	bl	800d480 <tcp_free>
      }
      return ERR_OK;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	e050      	b.n	800d77a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	7d1b      	ldrb	r3, [r3, #20]
 800d6dc:	2b02      	cmp	r3, #2
 800d6de:	d03b      	beq.n	800d758 <tcp_close_shutdown+0x174>
 800d6e0:	2b02      	cmp	r3, #2
 800d6e2:	dc44      	bgt.n	800d76e <tcp_close_shutdown+0x18a>
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d002      	beq.n	800d6ee <tcp_close_shutdown+0x10a>
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d02a      	beq.n	800d742 <tcp_close_shutdown+0x15e>
 800d6ec:	e03f      	b.n	800d76e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	8adb      	ldrh	r3, [r3, #22]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d021      	beq.n	800d73a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d6f6:	4b2a      	ldr	r3, [pc, #168]	@ (800d7a0 <tcp_close_shutdown+0x1bc>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d105      	bne.n	800d70c <tcp_close_shutdown+0x128>
 800d700:	4b27      	ldr	r3, [pc, #156]	@ (800d7a0 <tcp_close_shutdown+0x1bc>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	4a26      	ldr	r2, [pc, #152]	@ (800d7a0 <tcp_close_shutdown+0x1bc>)
 800d708:	6013      	str	r3, [r2, #0]
 800d70a:	e013      	b.n	800d734 <tcp_close_shutdown+0x150>
 800d70c:	4b24      	ldr	r3, [pc, #144]	@ (800d7a0 <tcp_close_shutdown+0x1bc>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	60bb      	str	r3, [r7, #8]
 800d712:	e00c      	b.n	800d72e <tcp_close_shutdown+0x14a>
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d104      	bne.n	800d728 <tcp_close_shutdown+0x144>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	68da      	ldr	r2, [r3, #12]
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	60da      	str	r2, [r3, #12]
 800d726:	e005      	b.n	800d734 <tcp_close_shutdown+0x150>
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	60bb      	str	r3, [r7, #8]
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d1ef      	bne.n	800d714 <tcp_close_shutdown+0x130>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2200      	movs	r2, #0
 800d738:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7ff fea0 	bl	800d480 <tcp_free>
      break;
 800d740:	e01a      	b.n	800d778 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f7ff ff14 	bl	800d570 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d748:	6879      	ldr	r1, [r7, #4]
 800d74a:	4816      	ldr	r0, [pc, #88]	@ (800d7a4 <tcp_close_shutdown+0x1c0>)
 800d74c:	f001 fb7c 	bl	800ee48 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f7ff feb1 	bl	800d4b8 <tcp_free_listen>
      break;
 800d756:	e00f      	b.n	800d778 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d758:	6879      	ldr	r1, [r7, #4]
 800d75a:	480e      	ldr	r0, [pc, #56]	@ (800d794 <tcp_close_shutdown+0x1b0>)
 800d75c:	f001 fb74 	bl	800ee48 <tcp_pcb_remove>
 800d760:	4b0d      	ldr	r3, [pc, #52]	@ (800d798 <tcp_close_shutdown+0x1b4>)
 800d762:	2201      	movs	r2, #1
 800d764:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7ff fe8a 	bl	800d480 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d76c:	e004      	b.n	800d778 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 f81a 	bl	800d7a8 <tcp_close_shutdown_fin>
 800d774:	4603      	mov	r3, r0
 800d776:	e000      	b.n	800d77a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d778:	2300      	movs	r3, #0
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3710      	adds	r7, #16
 800d77e:	46bd      	mov	sp, r7
 800d780:	bdb0      	pop	{r4, r5, r7, pc}
 800d782:	bf00      	nop
 800d784:	08018eb0 	.word	0x08018eb0
 800d788:	08018f84 	.word	0x08018f84
 800d78c:	08018ef4 	.word	0x08018ef4
 800d790:	08018fa4 	.word	0x08018fa4
 800d794:	2000f2bc 	.word	0x2000f2bc
 800d798:	2000f2c4 	.word	0x2000f2c4
 800d79c:	2000f2fc 	.word	0x2000f2fc
 800d7a0:	2000f2b4 	.word	0x2000f2b4
 800d7a4:	2000f2b8 	.word	0x2000f2b8

0800d7a8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d106      	bne.n	800d7c4 <tcp_close_shutdown_fin+0x1c>
 800d7b6:	4b2e      	ldr	r3, [pc, #184]	@ (800d870 <tcp_close_shutdown_fin+0xc8>)
 800d7b8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d7bc:	492d      	ldr	r1, [pc, #180]	@ (800d874 <tcp_close_shutdown_fin+0xcc>)
 800d7be:	482e      	ldr	r0, [pc, #184]	@ (800d878 <tcp_close_shutdown_fin+0xd0>)
 800d7c0:	f009 f8c4 	bl	801694c <iprintf>

  switch (pcb->state) {
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	7d1b      	ldrb	r3, [r3, #20]
 800d7c8:	2b07      	cmp	r3, #7
 800d7ca:	d020      	beq.n	800d80e <tcp_close_shutdown_fin+0x66>
 800d7cc:	2b07      	cmp	r3, #7
 800d7ce:	dc2b      	bgt.n	800d828 <tcp_close_shutdown_fin+0x80>
 800d7d0:	2b03      	cmp	r3, #3
 800d7d2:	d002      	beq.n	800d7da <tcp_close_shutdown_fin+0x32>
 800d7d4:	2b04      	cmp	r3, #4
 800d7d6:	d00d      	beq.n	800d7f4 <tcp_close_shutdown_fin+0x4c>
 800d7d8:	e026      	b.n	800d828 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f004 fe0c 	bl	80123f8 <tcp_send_fin>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d7e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d11f      	bne.n	800d82c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2205      	movs	r2, #5
 800d7f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d7f2:	e01b      	b.n	800d82c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f004 fdff 	bl	80123f8 <tcp_send_fin>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d7fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d114      	bne.n	800d830 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2205      	movs	r2, #5
 800d80a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d80c:	e010      	b.n	800d830 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f004 fdf2 	bl	80123f8 <tcp_send_fin>
 800d814:	4603      	mov	r3, r0
 800d816:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d109      	bne.n	800d834 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2209      	movs	r2, #9
 800d824:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d826:	e005      	b.n	800d834 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d828:	2300      	movs	r3, #0
 800d82a:	e01c      	b.n	800d866 <tcp_close_shutdown_fin+0xbe>
      break;
 800d82c:	bf00      	nop
 800d82e:	e002      	b.n	800d836 <tcp_close_shutdown_fin+0x8e>
      break;
 800d830:	bf00      	nop
 800d832:	e000      	b.n	800d836 <tcp_close_shutdown_fin+0x8e>
      break;
 800d834:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d103      	bne.n	800d846 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f004 ff18 	bl	8012674 <tcp_output>
 800d844:	e00d      	b.n	800d862 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84e:	d108      	bne.n	800d862 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	8b5b      	ldrh	r3, [r3, #26]
 800d854:	f043 0308 	orr.w	r3, r3, #8
 800d858:	b29a      	uxth	r2, r3
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d85e:	2300      	movs	r3, #0
 800d860:	e001      	b.n	800d866 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d862:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d866:	4618      	mov	r0, r3
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
 800d86e:	bf00      	nop
 800d870:	08018eb0 	.word	0x08018eb0
 800d874:	08018f60 	.word	0x08018f60
 800d878:	08018ef4 	.word	0x08018ef4

0800d87c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d109      	bne.n	800d89e <tcp_close+0x22>
 800d88a:	4b0f      	ldr	r3, [pc, #60]	@ (800d8c8 <tcp_close+0x4c>)
 800d88c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800d890:	490e      	ldr	r1, [pc, #56]	@ (800d8cc <tcp_close+0x50>)
 800d892:	480f      	ldr	r0, [pc, #60]	@ (800d8d0 <tcp_close+0x54>)
 800d894:	f009 f85a 	bl	801694c <iprintf>
 800d898:	f06f 030f 	mvn.w	r3, #15
 800d89c:	e00f      	b.n	800d8be <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	7d1b      	ldrb	r3, [r3, #20]
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d006      	beq.n	800d8b4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	8b5b      	ldrh	r3, [r3, #26]
 800d8aa:	f043 0310 	orr.w	r3, r3, #16
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d8b4:	2101      	movs	r1, #1
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f7ff fe94 	bl	800d5e4 <tcp_close_shutdown>
 800d8bc:	4603      	mov	r3, r0
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3708      	adds	r7, #8
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	08018eb0 	.word	0x08018eb0
 800d8cc:	08018fc0 	.word	0x08018fc0
 800d8d0:	08018ef4 	.word	0x08018ef4

0800d8d4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d109      	bne.n	800d8fa <tcp_shutdown+0x26>
 800d8e6:	4b26      	ldr	r3, [pc, #152]	@ (800d980 <tcp_shutdown+0xac>)
 800d8e8:	f240 2207 	movw	r2, #519	@ 0x207
 800d8ec:	4925      	ldr	r1, [pc, #148]	@ (800d984 <tcp_shutdown+0xb0>)
 800d8ee:	4826      	ldr	r0, [pc, #152]	@ (800d988 <tcp_shutdown+0xb4>)
 800d8f0:	f009 f82c 	bl	801694c <iprintf>
 800d8f4:	f06f 030f 	mvn.w	r3, #15
 800d8f8:	e03d      	b.n	800d976 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	7d1b      	ldrb	r3, [r3, #20]
 800d8fe:	2b01      	cmp	r3, #1
 800d900:	d102      	bne.n	800d908 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d902:	f06f 030a 	mvn.w	r3, #10
 800d906:	e036      	b.n	800d976 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d01b      	beq.n	800d946 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	8b5b      	ldrh	r3, [r3, #26]
 800d912:	f043 0310 	orr.w	r3, r3, #16
 800d916:	b29a      	uxth	r2, r3
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d005      	beq.n	800d92e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d922:	2101      	movs	r1, #1
 800d924:	68f8      	ldr	r0, [r7, #12]
 800d926:	f7ff fe5d 	bl	800d5e4 <tcp_close_shutdown>
 800d92a:	4603      	mov	r3, r0
 800d92c:	e023      	b.n	800d976 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d932:	2b00      	cmp	r3, #0
 800d934:	d007      	beq.n	800d946 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7ff faf4 	bl	800cf28 <pbuf_free>
      pcb->refused_data = NULL;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2200      	movs	r2, #0
 800d944:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d013      	beq.n	800d974 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	7d1b      	ldrb	r3, [r3, #20]
 800d950:	2b04      	cmp	r3, #4
 800d952:	dc02      	bgt.n	800d95a <tcp_shutdown+0x86>
 800d954:	2b03      	cmp	r3, #3
 800d956:	da02      	bge.n	800d95e <tcp_shutdown+0x8a>
 800d958:	e009      	b.n	800d96e <tcp_shutdown+0x9a>
 800d95a:	2b07      	cmp	r3, #7
 800d95c:	d107      	bne.n	800d96e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	b2db      	uxtb	r3, r3
 800d962:	4619      	mov	r1, r3
 800d964:	68f8      	ldr	r0, [r7, #12]
 800d966:	f7ff fe3d 	bl	800d5e4 <tcp_close_shutdown>
 800d96a:	4603      	mov	r3, r0
 800d96c:	e003      	b.n	800d976 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d96e:	f06f 030a 	mvn.w	r3, #10
 800d972:	e000      	b.n	800d976 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d974:	2300      	movs	r3, #0
}
 800d976:	4618      	mov	r0, r3
 800d978:	3710      	adds	r7, #16
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	08018eb0 	.word	0x08018eb0
 800d984:	08018fd8 	.word	0x08018fd8
 800d988:	08018ef4 	.word	0x08018ef4

0800d98c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b08e      	sub	sp, #56	@ 0x38
 800d990:	af04      	add	r7, sp, #16
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d107      	bne.n	800d9ac <tcp_abandon+0x20>
 800d99c:	4b52      	ldr	r3, [pc, #328]	@ (800dae8 <tcp_abandon+0x15c>)
 800d99e:	f240 223d 	movw	r2, #573	@ 0x23d
 800d9a2:	4952      	ldr	r1, [pc, #328]	@ (800daec <tcp_abandon+0x160>)
 800d9a4:	4852      	ldr	r0, [pc, #328]	@ (800daf0 <tcp_abandon+0x164>)
 800d9a6:	f008 ffd1 	bl	801694c <iprintf>
 800d9aa:	e099      	b.n	800dae0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	7d1b      	ldrb	r3, [r3, #20]
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d106      	bne.n	800d9c2 <tcp_abandon+0x36>
 800d9b4:	4b4c      	ldr	r3, [pc, #304]	@ (800dae8 <tcp_abandon+0x15c>)
 800d9b6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d9ba:	494e      	ldr	r1, [pc, #312]	@ (800daf4 <tcp_abandon+0x168>)
 800d9bc:	484c      	ldr	r0, [pc, #304]	@ (800daf0 <tcp_abandon+0x164>)
 800d9be:	f008 ffc5 	bl	801694c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	7d1b      	ldrb	r3, [r3, #20]
 800d9c6:	2b0a      	cmp	r3, #10
 800d9c8:	d107      	bne.n	800d9da <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d9ca:	6879      	ldr	r1, [r7, #4]
 800d9cc:	484a      	ldr	r0, [pc, #296]	@ (800daf8 <tcp_abandon+0x16c>)
 800d9ce:	f001 fa3b 	bl	800ee48 <tcp_pcb_remove>
    tcp_free(pcb);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7ff fd54 	bl	800d480 <tcp_free>
 800d9d8:	e082      	b.n	800dae0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9e6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9ec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9f4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	691b      	ldr	r3, [r3, #16]
 800d9fa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	7d1b      	ldrb	r3, [r3, #20]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d126      	bne.n	800da52 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	8adb      	ldrh	r3, [r3, #22]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d02e      	beq.n	800da6a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800da0c:	4b3b      	ldr	r3, [pc, #236]	@ (800dafc <tcp_abandon+0x170>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	687a      	ldr	r2, [r7, #4]
 800da12:	429a      	cmp	r2, r3
 800da14:	d105      	bne.n	800da22 <tcp_abandon+0x96>
 800da16:	4b39      	ldr	r3, [pc, #228]	@ (800dafc <tcp_abandon+0x170>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	4a37      	ldr	r2, [pc, #220]	@ (800dafc <tcp_abandon+0x170>)
 800da1e:	6013      	str	r3, [r2, #0]
 800da20:	e013      	b.n	800da4a <tcp_abandon+0xbe>
 800da22:	4b36      	ldr	r3, [pc, #216]	@ (800dafc <tcp_abandon+0x170>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	61fb      	str	r3, [r7, #28]
 800da28:	e00c      	b.n	800da44 <tcp_abandon+0xb8>
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	429a      	cmp	r2, r3
 800da32:	d104      	bne.n	800da3e <tcp_abandon+0xb2>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	68da      	ldr	r2, [r3, #12]
 800da38:	69fb      	ldr	r3, [r7, #28]
 800da3a:	60da      	str	r2, [r3, #12]
 800da3c:	e005      	b.n	800da4a <tcp_abandon+0xbe>
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	61fb      	str	r3, [r7, #28]
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1ef      	bne.n	800da2a <tcp_abandon+0x9e>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	60da      	str	r2, [r3, #12]
 800da50:	e00b      	b.n	800da6a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	8adb      	ldrh	r3, [r3, #22]
 800da5a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800da5c:	6879      	ldr	r1, [r7, #4]
 800da5e:	4828      	ldr	r0, [pc, #160]	@ (800db00 <tcp_abandon+0x174>)
 800da60:	f001 f9f2 	bl	800ee48 <tcp_pcb_remove>
 800da64:	4b27      	ldr	r3, [pc, #156]	@ (800db04 <tcp_abandon+0x178>)
 800da66:	2201      	movs	r2, #1
 800da68:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d004      	beq.n	800da7c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da76:	4618      	mov	r0, r3
 800da78:	f000 fec6 	bl	800e808 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da80:	2b00      	cmp	r3, #0
 800da82:	d004      	beq.n	800da8e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da88:	4618      	mov	r0, r3
 800da8a:	f000 febd 	bl	800e808 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da92:	2b00      	cmp	r3, #0
 800da94:	d004      	beq.n	800daa0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da9a:	4618      	mov	r0, r3
 800da9c:	f000 feb4 	bl	800e808 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800daa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00e      	beq.n	800dac4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800daa6:	6879      	ldr	r1, [r7, #4]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	3304      	adds	r3, #4
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	8b12      	ldrh	r2, [r2, #24]
 800dab0:	9202      	str	r2, [sp, #8]
 800dab2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800dab4:	9201      	str	r2, [sp, #4]
 800dab6:	9300      	str	r3, [sp, #0]
 800dab8:	460b      	mov	r3, r1
 800daba:	697a      	ldr	r2, [r7, #20]
 800dabc:	69b9      	ldr	r1, [r7, #24]
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f005 fb8c 	bl	80131dc <tcp_rst>
    }
    last_state = pcb->state;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	7d1b      	ldrb	r3, [r3, #20]
 800dac8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f7ff fcd8 	bl	800d480 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d004      	beq.n	800dae0 <tcp_abandon+0x154>
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	f06f 010c 	mvn.w	r1, #12
 800dadc:	68f8      	ldr	r0, [r7, #12]
 800dade:	4798      	blx	r3
  }
}
 800dae0:	3728      	adds	r7, #40	@ 0x28
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	08018eb0 	.word	0x08018eb0
 800daec:	08018ff4 	.word	0x08018ff4
 800daf0:	08018ef4 	.word	0x08018ef4
 800daf4:	08019010 	.word	0x08019010
 800daf8:	2000f2c0 	.word	0x2000f2c0
 800dafc:	2000f2b4 	.word	0x2000f2b4
 800db00:	2000f2bc 	.word	0x2000f2bc
 800db04:	2000f2c4 	.word	0x2000f2c4

0800db08 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800db10:	2101      	movs	r1, #1
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f7ff ff3a 	bl	800d98c <tcp_abandon>
}
 800db18:	bf00      	nop
 800db1a:	3708      	adds	r7, #8
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b088      	sub	sp, #32
 800db24:	af00      	add	r7, sp, #0
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	4613      	mov	r3, r2
 800db2c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800db2e:	2304      	movs	r3, #4
 800db30:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d101      	bne.n	800db3c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800db38:	4b3e      	ldr	r3, [pc, #248]	@ (800dc34 <tcp_bind+0x114>)
 800db3a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d109      	bne.n	800db56 <tcp_bind+0x36>
 800db42:	4b3d      	ldr	r3, [pc, #244]	@ (800dc38 <tcp_bind+0x118>)
 800db44:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800db48:	493c      	ldr	r1, [pc, #240]	@ (800dc3c <tcp_bind+0x11c>)
 800db4a:	483d      	ldr	r0, [pc, #244]	@ (800dc40 <tcp_bind+0x120>)
 800db4c:	f008 fefe 	bl	801694c <iprintf>
 800db50:	f06f 030f 	mvn.w	r3, #15
 800db54:	e06a      	b.n	800dc2c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	7d1b      	ldrb	r3, [r3, #20]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d009      	beq.n	800db72 <tcp_bind+0x52>
 800db5e:	4b36      	ldr	r3, [pc, #216]	@ (800dc38 <tcp_bind+0x118>)
 800db60:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800db64:	4937      	ldr	r1, [pc, #220]	@ (800dc44 <tcp_bind+0x124>)
 800db66:	4836      	ldr	r0, [pc, #216]	@ (800dc40 <tcp_bind+0x120>)
 800db68:	f008 fef0 	bl	801694c <iprintf>
 800db6c:	f06f 0305 	mvn.w	r3, #5
 800db70:	e05c      	b.n	800dc2c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800db72:	88fb      	ldrh	r3, [r7, #6]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d109      	bne.n	800db8c <tcp_bind+0x6c>
    port = tcp_new_port();
 800db78:	f000 f9de 	bl	800df38 <tcp_new_port>
 800db7c:	4603      	mov	r3, r0
 800db7e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800db80:	88fb      	ldrh	r3, [r7, #6]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d135      	bne.n	800dbf2 <tcp_bind+0xd2>
      return ERR_BUF;
 800db86:	f06f 0301 	mvn.w	r3, #1
 800db8a:	e04f      	b.n	800dc2c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800db8c:	2300      	movs	r3, #0
 800db8e:	61fb      	str	r3, [r7, #28]
 800db90:	e02b      	b.n	800dbea <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800db92:	4a2d      	ldr	r2, [pc, #180]	@ (800dc48 <tcp_bind+0x128>)
 800db94:	69fb      	ldr	r3, [r7, #28]
 800db96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	61bb      	str	r3, [r7, #24]
 800db9e:	e01e      	b.n	800dbde <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	8adb      	ldrh	r3, [r3, #22]
 800dba4:	88fa      	ldrh	r2, [r7, #6]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d116      	bne.n	800dbd8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800dbaa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d010      	beq.n	800dbd2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d00c      	beq.n	800dbd2 <tcp_bind+0xb2>
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d009      	beq.n	800dbd2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d005      	beq.n	800dbd2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800dbc6:	69bb      	ldr	r3, [r7, #24]
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d102      	bne.n	800dbd8 <tcp_bind+0xb8>
              return ERR_USE;
 800dbd2:	f06f 0307 	mvn.w	r3, #7
 800dbd6:	e029      	b.n	800dc2c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dbd8:	69bb      	ldr	r3, [r7, #24]
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	61bb      	str	r3, [r7, #24]
 800dbde:	69bb      	ldr	r3, [r7, #24]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d1dd      	bne.n	800dba0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	61fb      	str	r3, [r7, #28]
 800dbea:	69fa      	ldr	r2, [r7, #28]
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	dbcf      	blt.n	800db92 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d00c      	beq.n	800dc12 <tcp_bind+0xf2>
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d008      	beq.n	800dc12 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d002      	beq.n	800dc0c <tcp_bind+0xec>
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	e000      	b.n	800dc0e <tcp_bind+0xee>
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	68fa      	ldr	r2, [r7, #12]
 800dc10:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	88fa      	ldrh	r2, [r7, #6]
 800dc16:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800dc18:	4b0c      	ldr	r3, [pc, #48]	@ (800dc4c <tcp_bind+0x12c>)
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	60da      	str	r2, [r3, #12]
 800dc20:	4a0a      	ldr	r2, [pc, #40]	@ (800dc4c <tcp_bind+0x12c>)
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	6013      	str	r3, [r2, #0]
 800dc26:	f005 fc9b 	bl	8013560 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3720      	adds	r7, #32
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	0801af20 	.word	0x0801af20
 800dc38:	08018eb0 	.word	0x08018eb0
 800dc3c:	08019044 	.word	0x08019044
 800dc40:	08018ef4 	.word	0x08018ef4
 800dc44:	0801905c 	.word	0x0801905c
 800dc48:	0801aef8 	.word	0x0801aef8
 800dc4c:	2000f2b4 	.word	0x2000f2b4

0800dc50 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d106      	bne.n	800dc72 <tcp_accept_null+0x22>
 800dc64:	4b07      	ldr	r3, [pc, #28]	@ (800dc84 <tcp_accept_null+0x34>)
 800dc66:	f240 320f 	movw	r2, #783	@ 0x30f
 800dc6a:	4907      	ldr	r1, [pc, #28]	@ (800dc88 <tcp_accept_null+0x38>)
 800dc6c:	4807      	ldr	r0, [pc, #28]	@ (800dc8c <tcp_accept_null+0x3c>)
 800dc6e:	f008 fe6d 	bl	801694c <iprintf>

  tcp_abort(pcb);
 800dc72:	68b8      	ldr	r0, [r7, #8]
 800dc74:	f7ff ff48 	bl	800db08 <tcp_abort>

  return ERR_ABRT;
 800dc78:	f06f 030c 	mvn.w	r3, #12
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3710      	adds	r7, #16
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	08018eb0 	.word	0x08018eb0
 800dc88:	08019084 	.word	0x08019084
 800dc8c:	08018ef4 	.word	0x08018ef4

0800dc90 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b088      	sub	sp, #32
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	607a      	str	r2, [r7, #4]
 800dc9c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d109      	bne.n	800dcbc <tcp_listen_with_backlog_and_err+0x2c>
 800dca8:	4b47      	ldr	r3, [pc, #284]	@ (800ddc8 <tcp_listen_with_backlog_and_err+0x138>)
 800dcaa:	f240 3259 	movw	r2, #857	@ 0x359
 800dcae:	4947      	ldr	r1, [pc, #284]	@ (800ddcc <tcp_listen_with_backlog_and_err+0x13c>)
 800dcb0:	4847      	ldr	r0, [pc, #284]	@ (800ddd0 <tcp_listen_with_backlog_and_err+0x140>)
 800dcb2:	f008 fe4b 	bl	801694c <iprintf>
 800dcb6:	23f0      	movs	r3, #240	@ 0xf0
 800dcb8:	76fb      	strb	r3, [r7, #27]
 800dcba:	e079      	b.n	800ddb0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	7d1b      	ldrb	r3, [r3, #20]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d009      	beq.n	800dcd8 <tcp_listen_with_backlog_and_err+0x48>
 800dcc4:	4b40      	ldr	r3, [pc, #256]	@ (800ddc8 <tcp_listen_with_backlog_and_err+0x138>)
 800dcc6:	f240 325a 	movw	r2, #858	@ 0x35a
 800dcca:	4942      	ldr	r1, [pc, #264]	@ (800ddd4 <tcp_listen_with_backlog_and_err+0x144>)
 800dccc:	4840      	ldr	r0, [pc, #256]	@ (800ddd0 <tcp_listen_with_backlog_and_err+0x140>)
 800dcce:	f008 fe3d 	bl	801694c <iprintf>
 800dcd2:	23f1      	movs	r3, #241	@ 0xf1
 800dcd4:	76fb      	strb	r3, [r7, #27]
 800dcd6:	e06b      	b.n	800ddb0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	7d1b      	ldrb	r3, [r3, #20]
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d104      	bne.n	800dcea <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800dce4:	23f7      	movs	r3, #247	@ 0xf7
 800dce6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dce8:	e062      	b.n	800ddb0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800dcea:	2002      	movs	r0, #2
 800dcec:	f7fe fa02 	bl	800c0f4 <memp_malloc>
 800dcf0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d102      	bne.n	800dcfe <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800dcf8:	23ff      	movs	r3, #255	@ 0xff
 800dcfa:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dcfc:	e058      	b.n	800ddb0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	691a      	ldr	r2, [r3, #16]
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	8ada      	ldrh	r2, [r3, #22]
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	2201      	movs	r2, #1
 800dd12:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	7d5a      	ldrb	r2, [r3, #21]
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	7a5a      	ldrb	r2, [r3, #9]
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	2200      	movs	r2, #0
 800dd28:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	7ada      	ldrb	r2, [r3, #11]
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	7a9a      	ldrb	r2, [r3, #10]
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	8adb      	ldrh	r3, [r3, #22]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d021      	beq.n	800dd8e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd4a:	4b23      	ldr	r3, [pc, #140]	@ (800ddd8 <tcp_listen_with_backlog_and_err+0x148>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	68fa      	ldr	r2, [r7, #12]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d105      	bne.n	800dd60 <tcp_listen_with_backlog_and_err+0xd0>
 800dd54:	4b20      	ldr	r3, [pc, #128]	@ (800ddd8 <tcp_listen_with_backlog_and_err+0x148>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	4a1f      	ldr	r2, [pc, #124]	@ (800ddd8 <tcp_listen_with_backlog_and_err+0x148>)
 800dd5c:	6013      	str	r3, [r2, #0]
 800dd5e:	e013      	b.n	800dd88 <tcp_listen_with_backlog_and_err+0xf8>
 800dd60:	4b1d      	ldr	r3, [pc, #116]	@ (800ddd8 <tcp_listen_with_backlog_and_err+0x148>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	617b      	str	r3, [r7, #20]
 800dd66:	e00c      	b.n	800dd82 <tcp_listen_with_backlog_and_err+0xf2>
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	68fa      	ldr	r2, [r7, #12]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d104      	bne.n	800dd7c <tcp_listen_with_backlog_and_err+0xec>
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	68da      	ldr	r2, [r3, #12]
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	60da      	str	r2, [r3, #12]
 800dd7a:	e005      	b.n	800dd88 <tcp_listen_with_backlog_and_err+0xf8>
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	68db      	ldr	r3, [r3, #12]
 800dd80:	617b      	str	r3, [r7, #20]
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d1ef      	bne.n	800dd68 <tcp_listen_with_backlog_and_err+0xd8>
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800dd8e:	68f8      	ldr	r0, [r7, #12]
 800dd90:	f7ff fb76 	bl	800d480 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	4a11      	ldr	r2, [pc, #68]	@ (800dddc <tcp_listen_with_backlog_and_err+0x14c>)
 800dd98:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800dd9a:	4b11      	ldr	r3, [pc, #68]	@ (800dde0 <tcp_listen_with_backlog_and_err+0x150>)
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	69fb      	ldr	r3, [r7, #28]
 800dda0:	60da      	str	r2, [r3, #12]
 800dda2:	4a0f      	ldr	r2, [pc, #60]	@ (800dde0 <tcp_listen_with_backlog_and_err+0x150>)
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	6013      	str	r3, [r2, #0]
 800dda8:	f005 fbda 	bl	8013560 <tcp_timer_needed>
  res = ERR_OK;
 800ddac:	2300      	movs	r3, #0
 800ddae:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d002      	beq.n	800ddbc <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	7efa      	ldrb	r2, [r7, #27]
 800ddba:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800ddbc:	69fb      	ldr	r3, [r7, #28]
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3720      	adds	r7, #32
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	08018eb0 	.word	0x08018eb0
 800ddcc:	080190a4 	.word	0x080190a4
 800ddd0:	08018ef4 	.word	0x08018ef4
 800ddd4:	080190d4 	.word	0x080190d4
 800ddd8:	2000f2b4 	.word	0x2000f2b4
 800dddc:	0800dc51 	.word	0x0800dc51
 800dde0:	2000f2b8 	.word	0x2000f2b8

0800dde4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d106      	bne.n	800de00 <tcp_update_rcv_ann_wnd+0x1c>
 800ddf2:	4b25      	ldr	r3, [pc, #148]	@ (800de88 <tcp_update_rcv_ann_wnd+0xa4>)
 800ddf4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800ddf8:	4924      	ldr	r1, [pc, #144]	@ (800de8c <tcp_update_rcv_ann_wnd+0xa8>)
 800ddfa:	4825      	ldr	r0, [pc, #148]	@ (800de90 <tcp_update_rcv_ann_wnd+0xac>)
 800ddfc:	f008 fda6 	bl	801694c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de04:	687a      	ldr	r2, [r7, #4]
 800de06:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800de08:	4413      	add	r3, r2
 800de0a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800de14:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800de18:	bf28      	it	cs
 800de1a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800de1e:	b292      	uxth	r2, r2
 800de20:	4413      	add	r3, r2
 800de22:	68fa      	ldr	r2, [r7, #12]
 800de24:	1ad3      	subs	r3, r2, r3
 800de26:	2b00      	cmp	r3, #0
 800de28:	db08      	blt.n	800de3c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	1ad3      	subs	r3, r2, r3
 800de3a:	e020      	b.n	800de7e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de44:	1ad3      	subs	r3, r2, r3
 800de46:	2b00      	cmp	r3, #0
 800de48:	dd03      	ble.n	800de52 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2200      	movs	r2, #0
 800de4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800de50:	e014      	b.n	800de7c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de5a:	1ad3      	subs	r3, r2, r3
 800de5c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de64:	d306      	bcc.n	800de74 <tcp_update_rcv_ann_wnd+0x90>
 800de66:	4b08      	ldr	r3, [pc, #32]	@ (800de88 <tcp_update_rcv_ann_wnd+0xa4>)
 800de68:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800de6c:	4909      	ldr	r1, [pc, #36]	@ (800de94 <tcp_update_rcv_ann_wnd+0xb0>)
 800de6e:	4808      	ldr	r0, [pc, #32]	@ (800de90 <tcp_update_rcv_ann_wnd+0xac>)
 800de70:	f008 fd6c 	bl	801694c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	b29a      	uxth	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800de7c:	2300      	movs	r3, #0
  }
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3710      	adds	r7, #16
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	08018eb0 	.word	0x08018eb0
 800de8c:	0801910c 	.word	0x0801910c
 800de90:	08018ef4 	.word	0x08018ef4
 800de94:	08019130 	.word	0x08019130

0800de98 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	460b      	mov	r3, r1
 800dea2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d107      	bne.n	800deba <tcp_recved+0x22>
 800deaa:	4b1f      	ldr	r3, [pc, #124]	@ (800df28 <tcp_recved+0x90>)
 800deac:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800deb0:	491e      	ldr	r1, [pc, #120]	@ (800df2c <tcp_recved+0x94>)
 800deb2:	481f      	ldr	r0, [pc, #124]	@ (800df30 <tcp_recved+0x98>)
 800deb4:	f008 fd4a 	bl	801694c <iprintf>
 800deb8:	e032      	b.n	800df20 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	7d1b      	ldrb	r3, [r3, #20]
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d106      	bne.n	800ded0 <tcp_recved+0x38>
 800dec2:	4b19      	ldr	r3, [pc, #100]	@ (800df28 <tcp_recved+0x90>)
 800dec4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800dec8:	491a      	ldr	r1, [pc, #104]	@ (800df34 <tcp_recved+0x9c>)
 800deca:	4819      	ldr	r0, [pc, #100]	@ (800df30 <tcp_recved+0x98>)
 800decc:	f008 fd3e 	bl	801694c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ded4:	887b      	ldrh	r3, [r7, #2]
 800ded6:	4413      	add	r3, r2
 800ded8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800deda:	89fb      	ldrh	r3, [r7, #14]
 800dedc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800dee0:	d804      	bhi.n	800deec <tcp_recved+0x54>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dee6:	89fa      	ldrh	r2, [r7, #14]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d204      	bcs.n	800def6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800def2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800def4:	e002      	b.n	800defc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	89fa      	ldrh	r2, [r7, #14]
 800defa:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f7ff ff71 	bl	800dde4 <tcp_update_rcv_ann_wnd>
 800df02:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800df0a:	d309      	bcc.n	800df20 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	8b5b      	ldrh	r3, [r3, #26]
 800df10:	f043 0302 	orr.w	r3, r3, #2
 800df14:	b29a      	uxth	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f004 fbaa 	bl	8012674 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800df20:	3710      	adds	r7, #16
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	08018eb0 	.word	0x08018eb0
 800df2c:	0801914c 	.word	0x0801914c
 800df30:	08018ef4 	.word	0x08018ef4
 800df34:	08019164 	.word	0x08019164

0800df38 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800df38:	b480      	push	{r7}
 800df3a:	b083      	sub	sp, #12
 800df3c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800df3e:	2300      	movs	r3, #0
 800df40:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800df42:	4b1e      	ldr	r3, [pc, #120]	@ (800dfbc <tcp_new_port+0x84>)
 800df44:	881b      	ldrh	r3, [r3, #0]
 800df46:	3301      	adds	r3, #1
 800df48:	b29a      	uxth	r2, r3
 800df4a:	4b1c      	ldr	r3, [pc, #112]	@ (800dfbc <tcp_new_port+0x84>)
 800df4c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800df4e:	4b1b      	ldr	r3, [pc, #108]	@ (800dfbc <tcp_new_port+0x84>)
 800df50:	881b      	ldrh	r3, [r3, #0]
 800df52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800df56:	4293      	cmp	r3, r2
 800df58:	d103      	bne.n	800df62 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800df5a:	4b18      	ldr	r3, [pc, #96]	@ (800dfbc <tcp_new_port+0x84>)
 800df5c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800df60:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800df62:	2300      	movs	r3, #0
 800df64:	71fb      	strb	r3, [r7, #7]
 800df66:	e01e      	b.n	800dfa6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800df68:	79fb      	ldrb	r3, [r7, #7]
 800df6a:	4a15      	ldr	r2, [pc, #84]	@ (800dfc0 <tcp_new_port+0x88>)
 800df6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	603b      	str	r3, [r7, #0]
 800df74:	e011      	b.n	800df9a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	8ada      	ldrh	r2, [r3, #22]
 800df7a:	4b10      	ldr	r3, [pc, #64]	@ (800dfbc <tcp_new_port+0x84>)
 800df7c:	881b      	ldrh	r3, [r3, #0]
 800df7e:	429a      	cmp	r2, r3
 800df80:	d108      	bne.n	800df94 <tcp_new_port+0x5c>
        n++;
 800df82:	88bb      	ldrh	r3, [r7, #4]
 800df84:	3301      	adds	r3, #1
 800df86:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800df88:	88bb      	ldrh	r3, [r7, #4]
 800df8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800df8e:	d3d8      	bcc.n	800df42 <tcp_new_port+0xa>
          return 0;
 800df90:	2300      	movs	r3, #0
 800df92:	e00d      	b.n	800dfb0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	603b      	str	r3, [r7, #0]
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d1ea      	bne.n	800df76 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dfa0:	79fb      	ldrb	r3, [r7, #7]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	71fb      	strb	r3, [r7, #7]
 800dfa6:	79fb      	ldrb	r3, [r7, #7]
 800dfa8:	2b03      	cmp	r3, #3
 800dfaa:	d9dd      	bls.n	800df68 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800dfac:	4b03      	ldr	r3, [pc, #12]	@ (800dfbc <tcp_new_port+0x84>)
 800dfae:	881b      	ldrh	r3, [r3, #0]
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	370c      	adds	r7, #12
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr
 800dfbc:	20000024 	.word	0x20000024
 800dfc0:	0801aef8 	.word	0x0801aef8

0800dfc4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dfc4:	b5b0      	push	{r4, r5, r7, lr}
 800dfc6:	b090      	sub	sp, #64	@ 0x40
 800dfc8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800dfd0:	4b95      	ldr	r3, [pc, #596]	@ (800e228 <tcp_slowtmr+0x264>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	4a94      	ldr	r2, [pc, #592]	@ (800e228 <tcp_slowtmr+0x264>)
 800dfd8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dfda:	4b94      	ldr	r3, [pc, #592]	@ (800e22c <tcp_slowtmr+0x268>)
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	b2da      	uxtb	r2, r3
 800dfe2:	4b92      	ldr	r3, [pc, #584]	@ (800e22c <tcp_slowtmr+0x268>)
 800dfe4:	701a      	strb	r2, [r3, #0]
 800dfe6:	e000      	b.n	800dfea <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800dfe8:	bf00      	nop
  prev = NULL;
 800dfea:	2300      	movs	r3, #0
 800dfec:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800dfee:	4b90      	ldr	r3, [pc, #576]	@ (800e230 <tcp_slowtmr+0x26c>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800dff4:	e29f      	b.n	800e536 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dff8:	7d1b      	ldrb	r3, [r3, #20]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d106      	bne.n	800e00c <tcp_slowtmr+0x48>
 800dffe:	4b8d      	ldr	r3, [pc, #564]	@ (800e234 <tcp_slowtmr+0x270>)
 800e000:	f240 42be 	movw	r2, #1214	@ 0x4be
 800e004:	498c      	ldr	r1, [pc, #560]	@ (800e238 <tcp_slowtmr+0x274>)
 800e006:	488d      	ldr	r0, [pc, #564]	@ (800e23c <tcp_slowtmr+0x278>)
 800e008:	f008 fca0 	bl	801694c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e00e:	7d1b      	ldrb	r3, [r3, #20]
 800e010:	2b01      	cmp	r3, #1
 800e012:	d106      	bne.n	800e022 <tcp_slowtmr+0x5e>
 800e014:	4b87      	ldr	r3, [pc, #540]	@ (800e234 <tcp_slowtmr+0x270>)
 800e016:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800e01a:	4989      	ldr	r1, [pc, #548]	@ (800e240 <tcp_slowtmr+0x27c>)
 800e01c:	4887      	ldr	r0, [pc, #540]	@ (800e23c <tcp_slowtmr+0x278>)
 800e01e:	f008 fc95 	bl	801694c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e024:	7d1b      	ldrb	r3, [r3, #20]
 800e026:	2b0a      	cmp	r3, #10
 800e028:	d106      	bne.n	800e038 <tcp_slowtmr+0x74>
 800e02a:	4b82      	ldr	r3, [pc, #520]	@ (800e234 <tcp_slowtmr+0x270>)
 800e02c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800e030:	4984      	ldr	r1, [pc, #528]	@ (800e244 <tcp_slowtmr+0x280>)
 800e032:	4882      	ldr	r0, [pc, #520]	@ (800e23c <tcp_slowtmr+0x278>)
 800e034:	f008 fc8a 	bl	801694c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e03a:	7f9a      	ldrb	r2, [r3, #30]
 800e03c:	4b7b      	ldr	r3, [pc, #492]	@ (800e22c <tcp_slowtmr+0x268>)
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	429a      	cmp	r2, r3
 800e042:	d105      	bne.n	800e050 <tcp_slowtmr+0x8c>
      prev = pcb;
 800e044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e046:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800e04e:	e272      	b.n	800e536 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800e050:	4b76      	ldr	r3, [pc, #472]	@ (800e22c <tcp_slowtmr+0x268>)
 800e052:	781a      	ldrb	r2, [r3, #0]
 800e054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e056:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800e058:	2300      	movs	r3, #0
 800e05a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800e05e:	2300      	movs	r3, #0
 800e060:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e066:	7d1b      	ldrb	r3, [r3, #20]
 800e068:	2b02      	cmp	r3, #2
 800e06a:	d10a      	bne.n	800e082 <tcp_slowtmr+0xbe>
 800e06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e06e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e072:	2b05      	cmp	r3, #5
 800e074:	d905      	bls.n	800e082 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e076:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e07a:	3301      	adds	r3, #1
 800e07c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e080:	e11e      	b.n	800e2c0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e084:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e088:	2b0b      	cmp	r3, #11
 800e08a:	d905      	bls.n	800e098 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800e08c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e090:	3301      	adds	r3, #1
 800e092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e096:	e113      	b.n	800e2c0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800e098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e09a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d075      	beq.n	800e18e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d006      	beq.n	800e0b8 <tcp_slowtmr+0xf4>
 800e0aa:	4b62      	ldr	r3, [pc, #392]	@ (800e234 <tcp_slowtmr+0x270>)
 800e0ac:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800e0b0:	4965      	ldr	r1, [pc, #404]	@ (800e248 <tcp_slowtmr+0x284>)
 800e0b2:	4862      	ldr	r0, [pc, #392]	@ (800e23c <tcp_slowtmr+0x278>)
 800e0b4:	f008 fc4a 	bl	801694c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d106      	bne.n	800e0ce <tcp_slowtmr+0x10a>
 800e0c0:	4b5c      	ldr	r3, [pc, #368]	@ (800e234 <tcp_slowtmr+0x270>)
 800e0c2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800e0c6:	4961      	ldr	r1, [pc, #388]	@ (800e24c <tcp_slowtmr+0x288>)
 800e0c8:	485c      	ldr	r0, [pc, #368]	@ (800e23c <tcp_slowtmr+0x278>)
 800e0ca:	f008 fc3f 	bl	801694c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0d0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e0d4:	2b0b      	cmp	r3, #11
 800e0d6:	d905      	bls.n	800e0e4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800e0d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0dc:	3301      	adds	r3, #1
 800e0de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e0e2:	e0ed      	b.n	800e2c0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0e6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e0ea:	3b01      	subs	r3, #1
 800e0ec:	4a58      	ldr	r2, [pc, #352]	@ (800e250 <tcp_slowtmr+0x28c>)
 800e0ee:	5cd3      	ldrb	r3, [r2, r3]
 800e0f0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e0f8:	7c7a      	ldrb	r2, [r7, #17]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d907      	bls.n	800e10e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800e0fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e100:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e104:	3301      	adds	r3, #1
 800e106:	b2da      	uxtb	r2, r3
 800e108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e10a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800e10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e110:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e114:	7c7a      	ldrb	r2, [r7, #17]
 800e116:	429a      	cmp	r2, r3
 800e118:	f200 80d2 	bhi.w	800e2c0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800e11c:	2301      	movs	r3, #1
 800e11e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800e120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e122:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e126:	2b00      	cmp	r3, #0
 800e128:	d108      	bne.n	800e13c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e12a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e12c:	f005 f94a 	bl	80133c4 <tcp_zero_window_probe>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d014      	beq.n	800e160 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800e136:	2300      	movs	r3, #0
 800e138:	623b      	str	r3, [r7, #32]
 800e13a:	e011      	b.n	800e160 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e13e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e142:	4619      	mov	r1, r3
 800e144:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e146:	f004 f80f 	bl	8012168 <tcp_split_unsent_seg>
 800e14a:	4603      	mov	r3, r0
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d107      	bne.n	800e160 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800e150:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e152:	f004 fa8f 	bl	8012674 <tcp_output>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d101      	bne.n	800e160 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800e15c:	2300      	movs	r3, #0
 800e15e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800e160:	6a3b      	ldr	r3, [r7, #32]
 800e162:	2b00      	cmp	r3, #0
 800e164:	f000 80ac 	beq.w	800e2c0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800e168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e16a:	2200      	movs	r2, #0
 800e16c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e172:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e176:	2b06      	cmp	r3, #6
 800e178:	f200 80a2 	bhi.w	800e2c0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800e17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e17e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e182:	3301      	adds	r3, #1
 800e184:	b2da      	uxtb	r2, r3
 800e186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e188:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800e18c:	e098      	b.n	800e2c0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e190:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e194:	2b00      	cmp	r3, #0
 800e196:	db0f      	blt.n	800e1b8 <tcp_slowtmr+0x1f4>
 800e198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e19a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e19e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d008      	beq.n	800e1b8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800e1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	b21a      	sxth	r2, r3
 800e1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1b6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800e1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ba:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800e1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	db7b      	blt.n	800e2c0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e1c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e1ca:	f004 fd47 	bl	8012c5c <tcp_rexmit_rto_prepare>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d007      	beq.n	800e1e4 <tcp_slowtmr+0x220>
 800e1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d171      	bne.n	800e2c0 <tcp_slowtmr+0x2fc>
 800e1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d06d      	beq.n	800e2c0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800e1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1e6:	7d1b      	ldrb	r3, [r3, #20]
 800e1e8:	2b02      	cmp	r3, #2
 800e1ea:	d03a      	beq.n	800e262 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e1f2:	2b0c      	cmp	r3, #12
 800e1f4:	bf28      	it	cs
 800e1f6:	230c      	movcs	r3, #12
 800e1f8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e200:	10db      	asrs	r3, r3, #3
 800e202:	b21b      	sxth	r3, r3
 800e204:	461a      	mov	r2, r3
 800e206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e208:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e20c:	4413      	add	r3, r2
 800e20e:	7efa      	ldrb	r2, [r7, #27]
 800e210:	4910      	ldr	r1, [pc, #64]	@ (800e254 <tcp_slowtmr+0x290>)
 800e212:	5c8a      	ldrb	r2, [r1, r2]
 800e214:	4093      	lsls	r3, r2
 800e216:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e21e:	4293      	cmp	r3, r2
 800e220:	dc1a      	bgt.n	800e258 <tcp_slowtmr+0x294>
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	b21a      	sxth	r2, r3
 800e226:	e019      	b.n	800e25c <tcp_slowtmr+0x298>
 800e228:	2000f2b0 	.word	0x2000f2b0
 800e22c:	2000f2c6 	.word	0x2000f2c6
 800e230:	2000f2bc 	.word	0x2000f2bc
 800e234:	08018eb0 	.word	0x08018eb0
 800e238:	080191f4 	.word	0x080191f4
 800e23c:	08018ef4 	.word	0x08018ef4
 800e240:	08019220 	.word	0x08019220
 800e244:	0801924c 	.word	0x0801924c
 800e248:	0801927c 	.word	0x0801927c
 800e24c:	080192b0 	.word	0x080192b0
 800e250:	0801aef0 	.word	0x0801aef0
 800e254:	0801aee0 	.word	0x0801aee0
 800e258:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e25e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800e262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e264:	2200      	movs	r2, #0
 800e266:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e26a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e270:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e274:	4293      	cmp	r3, r2
 800e276:	bf28      	it	cs
 800e278:	4613      	movcs	r3, r2
 800e27a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e27c:	8a7b      	ldrh	r3, [r7, #18]
 800e27e:	085b      	lsrs	r3, r3, #1
 800e280:	b29a      	uxth	r2, r3
 800e282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e284:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e28a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e290:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e292:	005b      	lsls	r3, r3, #1
 800e294:	b29b      	uxth	r3, r3
 800e296:	429a      	cmp	r2, r3
 800e298:	d206      	bcs.n	800e2a8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e29c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e29e:	005b      	lsls	r3, r3, #1
 800e2a0:	b29a      	uxth	r2, r3
 800e2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2a4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800e2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2aa:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800e2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800e2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800e2ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e2bc:	f004 fd3e 	bl	8012d3c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800e2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2c2:	7d1b      	ldrb	r3, [r3, #20]
 800e2c4:	2b06      	cmp	r3, #6
 800e2c6:	d111      	bne.n	800e2ec <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800e2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ca:	8b5b      	ldrh	r3, [r3, #26]
 800e2cc:	f003 0310 	and.w	r3, r3, #16
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d00b      	beq.n	800e2ec <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e2d4:	4b9d      	ldr	r3, [pc, #628]	@ (800e54c <tcp_slowtmr+0x588>)
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2da:	6a1b      	ldr	r3, [r3, #32]
 800e2dc:	1ad3      	subs	r3, r2, r3
 800e2de:	2b28      	cmp	r3, #40	@ 0x28
 800e2e0:	d904      	bls.n	800e2ec <tcp_slowtmr+0x328>
          ++pcb_remove;
 800e2e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ee:	7a5b      	ldrb	r3, [r3, #9]
 800e2f0:	f003 0308 	and.w	r3, r3, #8
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d04c      	beq.n	800e392 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800e2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2fa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e2fc:	2b04      	cmp	r3, #4
 800e2fe:	d003      	beq.n	800e308 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800e300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e302:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e304:	2b07      	cmp	r3, #7
 800e306:	d144      	bne.n	800e392 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e308:	4b90      	ldr	r3, [pc, #576]	@ (800e54c <tcp_slowtmr+0x588>)
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e30e:	6a1b      	ldr	r3, [r3, #32]
 800e310:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e314:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e318:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800e31c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800e320:	498b      	ldr	r1, [pc, #556]	@ (800e550 <tcp_slowtmr+0x58c>)
 800e322:	fba1 1303 	umull	r1, r3, r1, r3
 800e326:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e328:	429a      	cmp	r2, r3
 800e32a:	d90a      	bls.n	800e342 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800e32c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e330:	3301      	adds	r3, #1
 800e332:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e336:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e33a:	3301      	adds	r3, #1
 800e33c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e340:	e027      	b.n	800e392 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e342:	4b82      	ldr	r3, [pc, #520]	@ (800e54c <tcp_slowtmr+0x588>)
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e348:	6a1b      	ldr	r3, [r3, #32]
 800e34a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e34e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e354:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e358:	4618      	mov	r0, r3
 800e35a:	4b7e      	ldr	r3, [pc, #504]	@ (800e554 <tcp_slowtmr+0x590>)
 800e35c:	fb00 f303 	mul.w	r3, r0, r3
 800e360:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e362:	497b      	ldr	r1, [pc, #492]	@ (800e550 <tcp_slowtmr+0x58c>)
 800e364:	fba1 1303 	umull	r1, r3, r1, r3
 800e368:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d911      	bls.n	800e392 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800e36e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e370:	f004 ffe8 	bl	8013344 <tcp_keepalive>
 800e374:	4603      	mov	r3, r0
 800e376:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e37a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d107      	bne.n	800e392 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800e382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e384:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e388:	3301      	adds	r3, #1
 800e38a:	b2da      	uxtb	r2, r3
 800e38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e38e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800e392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e396:	2b00      	cmp	r3, #0
 800e398:	d011      	beq.n	800e3be <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e39a:	4b6c      	ldr	r3, [pc, #432]	@ (800e54c <tcp_slowtmr+0x588>)
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a0:	6a1b      	ldr	r3, [r3, #32]
 800e3a2:	1ad2      	subs	r2, r2, r3
 800e3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	005b      	lsls	r3, r3, #1
 800e3b0:	440b      	add	r3, r1
 800e3b2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d302      	bcc.n	800e3be <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800e3b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e3ba:	f000 fea9 	bl	800f110 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800e3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3c0:	7d1b      	ldrb	r3, [r3, #20]
 800e3c2:	2b03      	cmp	r3, #3
 800e3c4:	d10b      	bne.n	800e3de <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e3c6:	4b61      	ldr	r3, [pc, #388]	@ (800e54c <tcp_slowtmr+0x588>)
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3cc:	6a1b      	ldr	r3, [r3, #32]
 800e3ce:	1ad3      	subs	r3, r2, r3
 800e3d0:	2b28      	cmp	r3, #40	@ 0x28
 800e3d2:	d904      	bls.n	800e3de <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800e3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e3d8:	3301      	adds	r3, #1
 800e3da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3e0:	7d1b      	ldrb	r3, [r3, #20]
 800e3e2:	2b09      	cmp	r3, #9
 800e3e4:	d10b      	bne.n	800e3fe <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e3e6:	4b59      	ldr	r3, [pc, #356]	@ (800e54c <tcp_slowtmr+0x588>)
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ec:	6a1b      	ldr	r3, [r3, #32]
 800e3ee:	1ad3      	subs	r3, r2, r3
 800e3f0:	2bf0      	cmp	r3, #240	@ 0xf0
 800e3f2:	d904      	bls.n	800e3fe <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800e3f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e3fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e402:	2b00      	cmp	r3, #0
 800e404:	d060      	beq.n	800e4c8 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800e406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e40c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e40e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e410:	f000 fcca 	bl	800eda8 <tcp_pcb_purge>
      if (prev != NULL) {
 800e414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e416:	2b00      	cmp	r3, #0
 800e418:	d010      	beq.n	800e43c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e41a:	4b4f      	ldr	r3, [pc, #316]	@ (800e558 <tcp_slowtmr+0x594>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e420:	429a      	cmp	r2, r3
 800e422:	d106      	bne.n	800e432 <tcp_slowtmr+0x46e>
 800e424:	4b4d      	ldr	r3, [pc, #308]	@ (800e55c <tcp_slowtmr+0x598>)
 800e426:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e42a:	494d      	ldr	r1, [pc, #308]	@ (800e560 <tcp_slowtmr+0x59c>)
 800e42c:	484d      	ldr	r0, [pc, #308]	@ (800e564 <tcp_slowtmr+0x5a0>)
 800e42e:	f008 fa8d 	bl	801694c <iprintf>
        prev->next = pcb->next;
 800e432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e434:	68da      	ldr	r2, [r3, #12]
 800e436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e438:	60da      	str	r2, [r3, #12]
 800e43a:	e00f      	b.n	800e45c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e43c:	4b46      	ldr	r3, [pc, #280]	@ (800e558 <tcp_slowtmr+0x594>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e442:	429a      	cmp	r2, r3
 800e444:	d006      	beq.n	800e454 <tcp_slowtmr+0x490>
 800e446:	4b45      	ldr	r3, [pc, #276]	@ (800e55c <tcp_slowtmr+0x598>)
 800e448:	f240 5271 	movw	r2, #1393	@ 0x571
 800e44c:	4946      	ldr	r1, [pc, #280]	@ (800e568 <tcp_slowtmr+0x5a4>)
 800e44e:	4845      	ldr	r0, [pc, #276]	@ (800e564 <tcp_slowtmr+0x5a0>)
 800e450:	f008 fa7c 	bl	801694c <iprintf>
        tcp_active_pcbs = pcb->next;
 800e454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	4a3f      	ldr	r2, [pc, #252]	@ (800e558 <tcp_slowtmr+0x594>)
 800e45a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e45c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e460:	2b00      	cmp	r3, #0
 800e462:	d013      	beq.n	800e48c <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e466:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e46a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e46c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e470:	3304      	adds	r3, #4
 800e472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e474:	8ad2      	ldrh	r2, [r2, #22]
 800e476:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e478:	8b09      	ldrh	r1, [r1, #24]
 800e47a:	9102      	str	r1, [sp, #8]
 800e47c:	9201      	str	r2, [sp, #4]
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	462b      	mov	r3, r5
 800e482:	4622      	mov	r2, r4
 800e484:	4601      	mov	r1, r0
 800e486:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e488:	f004 fea8 	bl	80131dc <tcp_rst>
      err_arg = pcb->callback_arg;
 800e48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e48e:	691b      	ldr	r3, [r3, #16]
 800e490:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e494:	7d1b      	ldrb	r3, [r3, #20]
 800e496:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e49a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e4a2:	6838      	ldr	r0, [r7, #0]
 800e4a4:	f7fe ffec 	bl	800d480 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e4a8:	4b30      	ldr	r3, [pc, #192]	@ (800e56c <tcp_slowtmr+0x5a8>)
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d004      	beq.n	800e4be <tcp_slowtmr+0x4fa>
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	f06f 010c 	mvn.w	r1, #12
 800e4ba:	68b8      	ldr	r0, [r7, #8]
 800e4bc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e4be:	4b2b      	ldr	r3, [pc, #172]	@ (800e56c <tcp_slowtmr+0x5a8>)
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d037      	beq.n	800e536 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800e4c6:	e590      	b.n	800dfea <tcp_slowtmr+0x26>
      prev = pcb;
 800e4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ce:	68db      	ldr	r3, [r3, #12]
 800e4d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4d4:	7f1b      	ldrb	r3, [r3, #28]
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	b2da      	uxtb	r2, r3
 800e4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4dc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4e0:	7f1a      	ldrb	r2, [r3, #28]
 800e4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4e4:	7f5b      	ldrb	r3, [r3, #29]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d325      	bcc.n	800e536 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800e4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e4f0:	4b1e      	ldr	r3, [pc, #120]	@ (800e56c <tcp_slowtmr+0x5a8>)
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d00b      	beq.n	800e518 <tcp_slowtmr+0x554>
 800e500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e502:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e506:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e508:	6912      	ldr	r2, [r2, #16]
 800e50a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e50c:	4610      	mov	r0, r2
 800e50e:	4798      	blx	r3
 800e510:	4603      	mov	r3, r0
 800e512:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e516:	e002      	b.n	800e51e <tcp_slowtmr+0x55a>
 800e518:	2300      	movs	r3, #0
 800e51a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e51e:	4b13      	ldr	r3, [pc, #76]	@ (800e56c <tcp_slowtmr+0x5a8>)
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	2b00      	cmp	r3, #0
 800e524:	f47f ad60 	bne.w	800dfe8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e528:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d102      	bne.n	800e536 <tcp_slowtmr+0x572>
          tcp_output(prev);
 800e530:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e532:	f004 f89f 	bl	8012674 <tcp_output>
  while (pcb != NULL) {
 800e536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e538:	2b00      	cmp	r3, #0
 800e53a:	f47f ad5c 	bne.w	800dff6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e53e:	2300      	movs	r3, #0
 800e540:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e542:	4b0b      	ldr	r3, [pc, #44]	@ (800e570 <tcp_slowtmr+0x5ac>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e548:	e067      	b.n	800e61a <tcp_slowtmr+0x656>
 800e54a:	bf00      	nop
 800e54c:	2000f2b0 	.word	0x2000f2b0
 800e550:	10624dd3 	.word	0x10624dd3
 800e554:	000124f8 	.word	0x000124f8
 800e558:	2000f2bc 	.word	0x2000f2bc
 800e55c:	08018eb0 	.word	0x08018eb0
 800e560:	080192e8 	.word	0x080192e8
 800e564:	08018ef4 	.word	0x08018ef4
 800e568:	08019314 	.word	0x08019314
 800e56c:	2000f2c4 	.word	0x2000f2c4
 800e570:	2000f2c0 	.word	0x2000f2c0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e576:	7d1b      	ldrb	r3, [r3, #20]
 800e578:	2b0a      	cmp	r3, #10
 800e57a:	d006      	beq.n	800e58a <tcp_slowtmr+0x5c6>
 800e57c:	4b2b      	ldr	r3, [pc, #172]	@ (800e62c <tcp_slowtmr+0x668>)
 800e57e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e582:	492b      	ldr	r1, [pc, #172]	@ (800e630 <tcp_slowtmr+0x66c>)
 800e584:	482b      	ldr	r0, [pc, #172]	@ (800e634 <tcp_slowtmr+0x670>)
 800e586:	f008 f9e1 	bl	801694c <iprintf>
    pcb_remove = 0;
 800e58a:	2300      	movs	r3, #0
 800e58c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e590:	4b29      	ldr	r3, [pc, #164]	@ (800e638 <tcp_slowtmr+0x674>)
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e596:	6a1b      	ldr	r3, [r3, #32]
 800e598:	1ad3      	subs	r3, r2, r3
 800e59a:	2bf0      	cmp	r3, #240	@ 0xf0
 800e59c:	d904      	bls.n	800e5a8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800e59e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e5a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d02f      	beq.n	800e610 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e5b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5b2:	f000 fbf9 	bl	800eda8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d010      	beq.n	800e5de <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e5bc:	4b1f      	ldr	r3, [pc, #124]	@ (800e63c <tcp_slowtmr+0x678>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d106      	bne.n	800e5d4 <tcp_slowtmr+0x610>
 800e5c6:	4b19      	ldr	r3, [pc, #100]	@ (800e62c <tcp_slowtmr+0x668>)
 800e5c8:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e5cc:	491c      	ldr	r1, [pc, #112]	@ (800e640 <tcp_slowtmr+0x67c>)
 800e5ce:	4819      	ldr	r0, [pc, #100]	@ (800e634 <tcp_slowtmr+0x670>)
 800e5d0:	f008 f9bc 	bl	801694c <iprintf>
        prev->next = pcb->next;
 800e5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d6:	68da      	ldr	r2, [r3, #12]
 800e5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5da:	60da      	str	r2, [r3, #12]
 800e5dc:	e00f      	b.n	800e5fe <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e5de:	4b17      	ldr	r3, [pc, #92]	@ (800e63c <tcp_slowtmr+0x678>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d006      	beq.n	800e5f6 <tcp_slowtmr+0x632>
 800e5e8:	4b10      	ldr	r3, [pc, #64]	@ (800e62c <tcp_slowtmr+0x668>)
 800e5ea:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e5ee:	4915      	ldr	r1, [pc, #84]	@ (800e644 <tcp_slowtmr+0x680>)
 800e5f0:	4810      	ldr	r0, [pc, #64]	@ (800e634 <tcp_slowtmr+0x670>)
 800e5f2:	f008 f9ab 	bl	801694c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5f8:	68db      	ldr	r3, [r3, #12]
 800e5fa:	4a10      	ldr	r2, [pc, #64]	@ (800e63c <tcp_slowtmr+0x678>)
 800e5fc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e600:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e608:	69f8      	ldr	r0, [r7, #28]
 800e60a:	f7fe ff39 	bl	800d480 <tcp_free>
 800e60e:	e004      	b.n	800e61a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800e610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e612:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e616:	68db      	ldr	r3, [r3, #12]
 800e618:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d1a9      	bne.n	800e574 <tcp_slowtmr+0x5b0>
    }
  }
}
 800e620:	bf00      	nop
 800e622:	bf00      	nop
 800e624:	3730      	adds	r7, #48	@ 0x30
 800e626:	46bd      	mov	sp, r7
 800e628:	bdb0      	pop	{r4, r5, r7, pc}
 800e62a:	bf00      	nop
 800e62c:	08018eb0 	.word	0x08018eb0
 800e630:	08019340 	.word	0x08019340
 800e634:	08018ef4 	.word	0x08018ef4
 800e638:	2000f2b0 	.word	0x2000f2b0
 800e63c:	2000f2c0 	.word	0x2000f2c0
 800e640:	08019370 	.word	0x08019370
 800e644:	08019398 	.word	0x08019398

0800e648 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e64e:	4b2d      	ldr	r3, [pc, #180]	@ (800e704 <tcp_fasttmr+0xbc>)
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	3301      	adds	r3, #1
 800e654:	b2da      	uxtb	r2, r3
 800e656:	4b2b      	ldr	r3, [pc, #172]	@ (800e704 <tcp_fasttmr+0xbc>)
 800e658:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e65a:	4b2b      	ldr	r3, [pc, #172]	@ (800e708 <tcp_fasttmr+0xc0>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e660:	e048      	b.n	800e6f4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	7f9a      	ldrb	r2, [r3, #30]
 800e666:	4b27      	ldr	r3, [pc, #156]	@ (800e704 <tcp_fasttmr+0xbc>)
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d03f      	beq.n	800e6ee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e66e:	4b25      	ldr	r3, [pc, #148]	@ (800e704 <tcp_fasttmr+0xbc>)
 800e670:	781a      	ldrb	r2, [r3, #0]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	8b5b      	ldrh	r3, [r3, #26]
 800e67a:	f003 0301 	and.w	r3, r3, #1
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d010      	beq.n	800e6a4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	8b5b      	ldrh	r3, [r3, #26]
 800e686:	f043 0302 	orr.w	r3, r3, #2
 800e68a:	b29a      	uxth	r2, r3
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f003 ffef 	bl	8012674 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	8b5b      	ldrh	r3, [r3, #26]
 800e69a:	f023 0303 	bic.w	r3, r3, #3
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	8b5b      	ldrh	r3, [r3, #26]
 800e6a8:	f003 0308 	and.w	r3, r3, #8
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d009      	beq.n	800e6c4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	8b5b      	ldrh	r3, [r3, #26]
 800e6b4:	f023 0308 	bic.w	r3, r3, #8
 800e6b8:	b29a      	uxth	r2, r3
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f7ff f872 	bl	800d7a8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00a      	beq.n	800e6e8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e6d2:	4b0e      	ldr	r3, [pc, #56]	@ (800e70c <tcp_fasttmr+0xc4>)
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 f819 	bl	800e710 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e6de:	4b0b      	ldr	r3, [pc, #44]	@ (800e70c <tcp_fasttmr+0xc4>)
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d000      	beq.n	800e6e8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e6e6:	e7b8      	b.n	800e65a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	607b      	str	r3, [r7, #4]
 800e6ec:	e002      	b.n	800e6f4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1b3      	bne.n	800e662 <tcp_fasttmr+0x1a>
    }
  }
}
 800e6fa:	bf00      	nop
 800e6fc:	bf00      	nop
 800e6fe:	3708      	adds	r7, #8
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	2000f2c6 	.word	0x2000f2c6
 800e708:	2000f2bc 	.word	0x2000f2bc
 800e70c:	2000f2c4 	.word	0x2000f2c4

0800e710 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e710:	b590      	push	{r4, r7, lr}
 800e712:	b085      	sub	sp, #20
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d109      	bne.n	800e732 <tcp_process_refused_data+0x22>
 800e71e:	4b37      	ldr	r3, [pc, #220]	@ (800e7fc <tcp_process_refused_data+0xec>)
 800e720:	f240 6209 	movw	r2, #1545	@ 0x609
 800e724:	4936      	ldr	r1, [pc, #216]	@ (800e800 <tcp_process_refused_data+0xf0>)
 800e726:	4837      	ldr	r0, [pc, #220]	@ (800e804 <tcp_process_refused_data+0xf4>)
 800e728:	f008 f910 	bl	801694c <iprintf>
 800e72c:	f06f 030f 	mvn.w	r3, #15
 800e730:	e060      	b.n	800e7f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e736:	7b5b      	ldrb	r3, [r3, #13]
 800e738:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e73e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2200      	movs	r2, #0
 800e744:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d00b      	beq.n	800e768 <tcp_process_refused_data+0x58>
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6918      	ldr	r0, [r3, #16]
 800e75a:	2300      	movs	r3, #0
 800e75c:	68ba      	ldr	r2, [r7, #8]
 800e75e:	6879      	ldr	r1, [r7, #4]
 800e760:	47a0      	blx	r4
 800e762:	4603      	mov	r3, r0
 800e764:	73fb      	strb	r3, [r7, #15]
 800e766:	e007      	b.n	800e778 <tcp_process_refused_data+0x68>
 800e768:	2300      	movs	r3, #0
 800e76a:	68ba      	ldr	r2, [r7, #8]
 800e76c:	6879      	ldr	r1, [r7, #4]
 800e76e:	2000      	movs	r0, #0
 800e770:	f000 f8a4 	bl	800e8bc <tcp_recv_null>
 800e774:	4603      	mov	r3, r0
 800e776:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d12a      	bne.n	800e7d6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e780:	7bbb      	ldrb	r3, [r7, #14]
 800e782:	f003 0320 	and.w	r3, r3, #32
 800e786:	2b00      	cmp	r3, #0
 800e788:	d033      	beq.n	800e7f2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e78e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e792:	d005      	beq.n	800e7a0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e798:	3301      	adds	r3, #1
 800e79a:	b29a      	uxth	r2, r3
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00b      	beq.n	800e7c2 <tcp_process_refused_data+0xb2>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6918      	ldr	r0, [r3, #16]
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	6879      	ldr	r1, [r7, #4]
 800e7ba:	47a0      	blx	r4
 800e7bc:	4603      	mov	r3, r0
 800e7be:	73fb      	strb	r3, [r7, #15]
 800e7c0:	e001      	b.n	800e7c6 <tcp_process_refused_data+0xb6>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e7c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7ca:	f113 0f0d 	cmn.w	r3, #13
 800e7ce:	d110      	bne.n	800e7f2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e7d0:	f06f 030c 	mvn.w	r3, #12
 800e7d4:	e00e      	b.n	800e7f4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e7d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7da:	f113 0f0d 	cmn.w	r3, #13
 800e7de:	d102      	bne.n	800e7e6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e7e0:	f06f 030c 	mvn.w	r3, #12
 800e7e4:	e006      	b.n	800e7f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	68ba      	ldr	r2, [r7, #8]
 800e7ea:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800e7ec:	f06f 0304 	mvn.w	r3, #4
 800e7f0:	e000      	b.n	800e7f4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e7f2:	2300      	movs	r3, #0
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3714      	adds	r7, #20
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd90      	pop	{r4, r7, pc}
 800e7fc:	08018eb0 	.word	0x08018eb0
 800e800:	080193c0 	.word	0x080193c0
 800e804:	08018ef4 	.word	0x08018ef4

0800e808 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e810:	e007      	b.n	800e822 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f000 f80a 	bl	800e832 <tcp_seg_free>
    seg = next;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d1f4      	bne.n	800e812 <tcp_segs_free+0xa>
  }
}
 800e828:	bf00      	nop
 800e82a:	bf00      	nop
 800e82c:	3710      	adds	r7, #16
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}

0800e832 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b082      	sub	sp, #8
 800e836:	af00      	add	r7, sp, #0
 800e838:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d00c      	beq.n	800e85a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d004      	beq.n	800e852 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7fe fb6b 	bl	800cf28 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e852:	6879      	ldr	r1, [r7, #4]
 800e854:	2003      	movs	r0, #3
 800e856:	f7fd fcc3 	bl	800c1e0 <memp_free>
  }
}
 800e85a:	bf00      	nop
 800e85c:	3708      	adds	r7, #8
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
	...

0800e864 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d106      	bne.n	800e880 <tcp_seg_copy+0x1c>
 800e872:	4b0f      	ldr	r3, [pc, #60]	@ (800e8b0 <tcp_seg_copy+0x4c>)
 800e874:	f240 6282 	movw	r2, #1666	@ 0x682
 800e878:	490e      	ldr	r1, [pc, #56]	@ (800e8b4 <tcp_seg_copy+0x50>)
 800e87a:	480f      	ldr	r0, [pc, #60]	@ (800e8b8 <tcp_seg_copy+0x54>)
 800e87c:	f008 f866 	bl	801694c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e880:	2003      	movs	r0, #3
 800e882:	f7fd fc37 	bl	800c0f4 <memp_malloc>
 800e886:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d101      	bne.n	800e892 <tcp_seg_copy+0x2e>
    return NULL;
 800e88e:	2300      	movs	r3, #0
 800e890:	e00a      	b.n	800e8a8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e892:	2210      	movs	r2, #16
 800e894:	6879      	ldr	r1, [r7, #4]
 800e896:	68f8      	ldr	r0, [r7, #12]
 800e898:	f008 f989 	bl	8016bae <memcpy>
  pbuf_ref(cseg->p);
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7fe fbe7 	bl	800d074 <pbuf_ref>
  return cseg;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3710      	adds	r7, #16
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	08018eb0 	.word	0x08018eb0
 800e8b4:	08019404 	.word	0x08019404
 800e8b8:	08018ef4 	.word	0x08018ef4

0800e8bc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	607a      	str	r2, [r7, #4]
 800e8c8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d109      	bne.n	800e8e4 <tcp_recv_null+0x28>
 800e8d0:	4b12      	ldr	r3, [pc, #72]	@ (800e91c <tcp_recv_null+0x60>)
 800e8d2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e8d6:	4912      	ldr	r1, [pc, #72]	@ (800e920 <tcp_recv_null+0x64>)
 800e8d8:	4812      	ldr	r0, [pc, #72]	@ (800e924 <tcp_recv_null+0x68>)
 800e8da:	f008 f837 	bl	801694c <iprintf>
 800e8de:	f06f 030f 	mvn.w	r3, #15
 800e8e2:	e016      	b.n	800e912 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d009      	beq.n	800e8fe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	891b      	ldrh	r3, [r3, #8]
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	68b8      	ldr	r0, [r7, #8]
 800e8f2:	f7ff fad1 	bl	800de98 <tcp_recved>
    pbuf_free(p);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f7fe fb16 	bl	800cf28 <pbuf_free>
 800e8fc:	e008      	b.n	800e910 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e8fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d104      	bne.n	800e910 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e906:	68b8      	ldr	r0, [r7, #8]
 800e908:	f7fe ffb8 	bl	800d87c <tcp_close>
 800e90c:	4603      	mov	r3, r0
 800e90e:	e000      	b.n	800e912 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e910:	2300      	movs	r3, #0
}
 800e912:	4618      	mov	r0, r3
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	08018eb0 	.word	0x08018eb0
 800e920:	08019420 	.word	0x08019420
 800e924:	08018ef4 	.word	0x08018ef4

0800e928 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b086      	sub	sp, #24
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	4603      	mov	r3, r0
 800e930:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e936:	2b00      	cmp	r3, #0
 800e938:	db01      	blt.n	800e93e <tcp_kill_prio+0x16>
 800e93a:	79fb      	ldrb	r3, [r7, #7]
 800e93c:	e000      	b.n	800e940 <tcp_kill_prio+0x18>
 800e93e:	237f      	movs	r3, #127	@ 0x7f
 800e940:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e942:	7afb      	ldrb	r3, [r7, #11]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d034      	beq.n	800e9b2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e948:	7afb      	ldrb	r3, [r7, #11]
 800e94a:	3b01      	subs	r3, #1
 800e94c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e94e:	2300      	movs	r3, #0
 800e950:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e952:	2300      	movs	r3, #0
 800e954:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e956:	4b19      	ldr	r3, [pc, #100]	@ (800e9bc <tcp_kill_prio+0x94>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	617b      	str	r3, [r7, #20]
 800e95c:	e01f      	b.n	800e99e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	7d5b      	ldrb	r3, [r3, #21]
 800e962:	7afa      	ldrb	r2, [r7, #11]
 800e964:	429a      	cmp	r2, r3
 800e966:	d80c      	bhi.n	800e982 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e96c:	7afa      	ldrb	r2, [r7, #11]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d112      	bne.n	800e998 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e972:	4b13      	ldr	r3, [pc, #76]	@ (800e9c0 <tcp_kill_prio+0x98>)
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	6a1b      	ldr	r3, [r3, #32]
 800e97a:	1ad3      	subs	r3, r2, r3
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	429a      	cmp	r2, r3
 800e980:	d80a      	bhi.n	800e998 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e982:	4b0f      	ldr	r3, [pc, #60]	@ (800e9c0 <tcp_kill_prio+0x98>)
 800e984:	681a      	ldr	r2, [r3, #0]
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	6a1b      	ldr	r3, [r3, #32]
 800e98a:	1ad3      	subs	r3, r2, r3
 800e98c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	7d5b      	ldrb	r3, [r3, #21]
 800e996:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	68db      	ldr	r3, [r3, #12]
 800e99c:	617b      	str	r3, [r7, #20]
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d1dc      	bne.n	800e95e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d004      	beq.n	800e9b4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e9aa:	6938      	ldr	r0, [r7, #16]
 800e9ac:	f7ff f8ac 	bl	800db08 <tcp_abort>
 800e9b0:	e000      	b.n	800e9b4 <tcp_kill_prio+0x8c>
    return;
 800e9b2:	bf00      	nop
  }
}
 800e9b4:	3718      	adds	r7, #24
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	2000f2bc 	.word	0x2000f2bc
 800e9c0:	2000f2b0 	.word	0x2000f2b0

0800e9c4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e9ce:	79fb      	ldrb	r3, [r7, #7]
 800e9d0:	2b08      	cmp	r3, #8
 800e9d2:	d009      	beq.n	800e9e8 <tcp_kill_state+0x24>
 800e9d4:	79fb      	ldrb	r3, [r7, #7]
 800e9d6:	2b09      	cmp	r3, #9
 800e9d8:	d006      	beq.n	800e9e8 <tcp_kill_state+0x24>
 800e9da:	4b1a      	ldr	r3, [pc, #104]	@ (800ea44 <tcp_kill_state+0x80>)
 800e9dc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800e9e0:	4919      	ldr	r1, [pc, #100]	@ (800ea48 <tcp_kill_state+0x84>)
 800e9e2:	481a      	ldr	r0, [pc, #104]	@ (800ea4c <tcp_kill_state+0x88>)
 800e9e4:	f007 ffb2 	bl	801694c <iprintf>

  inactivity = 0;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9f0:	4b17      	ldr	r3, [pc, #92]	@ (800ea50 <tcp_kill_state+0x8c>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	617b      	str	r3, [r7, #20]
 800e9f6:	e017      	b.n	800ea28 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	7d1b      	ldrb	r3, [r3, #20]
 800e9fc:	79fa      	ldrb	r2, [r7, #7]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d10f      	bne.n	800ea22 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ea02:	4b14      	ldr	r3, [pc, #80]	@ (800ea54 <tcp_kill_state+0x90>)
 800ea04:	681a      	ldr	r2, [r3, #0]
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	6a1b      	ldr	r3, [r3, #32]
 800ea0a:	1ad3      	subs	r3, r2, r3
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d807      	bhi.n	800ea22 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ea12:	4b10      	ldr	r3, [pc, #64]	@ (800ea54 <tcp_kill_state+0x90>)
 800ea14:	681a      	ldr	r2, [r3, #0]
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	6a1b      	ldr	r3, [r3, #32]
 800ea1a:	1ad3      	subs	r3, r2, r3
 800ea1c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	617b      	str	r3, [r7, #20]
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d1e4      	bne.n	800e9f8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d003      	beq.n	800ea3c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ea34:	2100      	movs	r1, #0
 800ea36:	6938      	ldr	r0, [r7, #16]
 800ea38:	f7fe ffa8 	bl	800d98c <tcp_abandon>
  }
}
 800ea3c:	bf00      	nop
 800ea3e:	3718      	adds	r7, #24
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	08018eb0 	.word	0x08018eb0
 800ea48:	0801943c 	.word	0x0801943c
 800ea4c:	08018ef4 	.word	0x08018ef4
 800ea50:	2000f2bc 	.word	0x2000f2bc
 800ea54:	2000f2b0 	.word	0x2000f2b0

0800ea58 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ea62:	2300      	movs	r3, #0
 800ea64:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea66:	4b12      	ldr	r3, [pc, #72]	@ (800eab0 <tcp_kill_timewait+0x58>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	60fb      	str	r3, [r7, #12]
 800ea6c:	e012      	b.n	800ea94 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ea6e:	4b11      	ldr	r3, [pc, #68]	@ (800eab4 <tcp_kill_timewait+0x5c>)
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	6a1b      	ldr	r3, [r3, #32]
 800ea76:	1ad3      	subs	r3, r2, r3
 800ea78:	687a      	ldr	r2, [r7, #4]
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d807      	bhi.n	800ea8e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ea7e:	4b0d      	ldr	r3, [pc, #52]	@ (800eab4 <tcp_kill_timewait+0x5c>)
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	6a1b      	ldr	r3, [r3, #32]
 800ea86:	1ad3      	subs	r3, r2, r3
 800ea88:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	68db      	ldr	r3, [r3, #12]
 800ea92:	60fb      	str	r3, [r7, #12]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d1e9      	bne.n	800ea6e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d002      	beq.n	800eaa6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eaa0:	68b8      	ldr	r0, [r7, #8]
 800eaa2:	f7ff f831 	bl	800db08 <tcp_abort>
  }
}
 800eaa6:	bf00      	nop
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	2000f2c0 	.word	0x2000f2c0
 800eab4:	2000f2b0 	.word	0x2000f2b0

0800eab8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800eabe:	4b10      	ldr	r3, [pc, #64]	@ (800eb00 <tcp_handle_closepend+0x48>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eac4:	e014      	b.n	800eaf0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	68db      	ldr	r3, [r3, #12]
 800eaca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	8b5b      	ldrh	r3, [r3, #26]
 800ead0:	f003 0308 	and.w	r3, r3, #8
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d009      	beq.n	800eaec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	8b5b      	ldrh	r3, [r3, #26]
 800eadc:	f023 0308 	bic.w	r3, r3, #8
 800eae0:	b29a      	uxth	r2, r3
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f7fe fe5e 	bl	800d7a8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d1e7      	bne.n	800eac6 <tcp_handle_closepend+0xe>
  }
}
 800eaf6:	bf00      	nop
 800eaf8:	bf00      	nop
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}
 800eb00:	2000f2bc 	.word	0x2000f2bc

0800eb04 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb0e:	2001      	movs	r0, #1
 800eb10:	f7fd faf0 	bl	800c0f4 <memp_malloc>
 800eb14:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d126      	bne.n	800eb6a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800eb1c:	f7ff ffcc 	bl	800eab8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800eb20:	f7ff ff9a 	bl	800ea58 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb24:	2001      	movs	r0, #1
 800eb26:	f7fd fae5 	bl	800c0f4 <memp_malloc>
 800eb2a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d11b      	bne.n	800eb6a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800eb32:	2009      	movs	r0, #9
 800eb34:	f7ff ff46 	bl	800e9c4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb38:	2001      	movs	r0, #1
 800eb3a:	f7fd fadb 	bl	800c0f4 <memp_malloc>
 800eb3e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d111      	bne.n	800eb6a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800eb46:	2008      	movs	r0, #8
 800eb48:	f7ff ff3c 	bl	800e9c4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb4c:	2001      	movs	r0, #1
 800eb4e:	f7fd fad1 	bl	800c0f4 <memp_malloc>
 800eb52:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d107      	bne.n	800eb6a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800eb5a:	79fb      	ldrb	r3, [r7, #7]
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7ff fee3 	bl	800e928 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb62:	2001      	movs	r0, #1
 800eb64:	f7fd fac6 	bl	800c0f4 <memp_malloc>
 800eb68:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d03f      	beq.n	800ebf0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800eb70:	229c      	movs	r2, #156	@ 0x9c
 800eb72:	2100      	movs	r1, #0
 800eb74:	68f8      	ldr	r0, [r7, #12]
 800eb76:	f007 ff4e 	bl	8016a16 <memset>
    pcb->prio = prio;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	79fa      	ldrb	r2, [r7, #7]
 800eb7e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800eb86:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800eb90:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	22ff      	movs	r2, #255	@ 0xff
 800eb9e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800eba6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2206      	movs	r2, #6
 800ebac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2206      	movs	r2, #6
 800ebb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ebbc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2201      	movs	r2, #1
 800ebc2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800ebc6:	4b0d      	ldr	r3, [pc, #52]	@ (800ebfc <tcp_alloc+0xf8>)
 800ebc8:	681a      	ldr	r2, [r3, #0]
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ebce:	4b0c      	ldr	r3, [pc, #48]	@ (800ec00 <tcp_alloc+0xfc>)
 800ebd0:	781a      	ldrb	r2, [r3, #0]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ebdc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	4a08      	ldr	r2, [pc, #32]	@ (800ec04 <tcp_alloc+0x100>)
 800ebe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	4a07      	ldr	r2, [pc, #28]	@ (800ec08 <tcp_alloc+0x104>)
 800ebec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	2000f2b0 	.word	0x2000f2b0
 800ec00:	2000f2c6 	.word	0x2000f2c6
 800ec04:	0800e8bd 	.word	0x0800e8bd
 800ec08:	006ddd00 	.word	0x006ddd00

0800ec0c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	4603      	mov	r3, r0
 800ec14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ec16:	2040      	movs	r0, #64	@ 0x40
 800ec18:	f7ff ff74 	bl	800eb04 <tcp_alloc>
 800ec1c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3710      	adds	r7, #16
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d002      	beq.n	800ec3e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	683a      	ldr	r2, [r7, #0]
 800ec3c:	611a      	str	r2, [r3, #16]
  }
}
 800ec3e:	bf00      	nop
 800ec40:	370c      	adds	r7, #12
 800ec42:	46bd      	mov	sp, r7
 800ec44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec48:	4770      	bx	lr
	...

0800ec4c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d00e      	beq.n	800ec7a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	7d1b      	ldrb	r3, [r3, #20]
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	d106      	bne.n	800ec72 <tcp_recv+0x26>
 800ec64:	4b07      	ldr	r3, [pc, #28]	@ (800ec84 <tcp_recv+0x38>)
 800ec66:	f240 72df 	movw	r2, #2015	@ 0x7df
 800ec6a:	4907      	ldr	r1, [pc, #28]	@ (800ec88 <tcp_recv+0x3c>)
 800ec6c:	4807      	ldr	r0, [pc, #28]	@ (800ec8c <tcp_recv+0x40>)
 800ec6e:	f007 fe6d 	bl	801694c <iprintf>
    pcb->recv = recv;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	683a      	ldr	r2, [r7, #0]
 800ec76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800ec7a:	bf00      	nop
 800ec7c:	3708      	adds	r7, #8
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	08018eb0 	.word	0x08018eb0
 800ec88:	0801944c 	.word	0x0801944c
 800ec8c:	08018ef4 	.word	0x08018ef4

0800ec90 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d00e      	beq.n	800ecbe <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	7d1b      	ldrb	r3, [r3, #20]
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d106      	bne.n	800ecb6 <tcp_sent+0x26>
 800eca8:	4b07      	ldr	r3, [pc, #28]	@ (800ecc8 <tcp_sent+0x38>)
 800ecaa:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800ecae:	4907      	ldr	r1, [pc, #28]	@ (800eccc <tcp_sent+0x3c>)
 800ecb0:	4807      	ldr	r0, [pc, #28]	@ (800ecd0 <tcp_sent+0x40>)
 800ecb2:	f007 fe4b 	bl	801694c <iprintf>
    pcb->sent = sent;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	683a      	ldr	r2, [r7, #0]
 800ecba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800ecbe:	bf00      	nop
 800ecc0:	3708      	adds	r7, #8
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	bf00      	nop
 800ecc8:	08018eb0 	.word	0x08018eb0
 800eccc:	08019474 	.word	0x08019474
 800ecd0:	08018ef4 	.word	0x08018ef4

0800ecd4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d00e      	beq.n	800ed02 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	7d1b      	ldrb	r3, [r3, #20]
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d106      	bne.n	800ecfa <tcp_err+0x26>
 800ecec:	4b07      	ldr	r3, [pc, #28]	@ (800ed0c <tcp_err+0x38>)
 800ecee:	f640 020d 	movw	r2, #2061	@ 0x80d
 800ecf2:	4907      	ldr	r1, [pc, #28]	@ (800ed10 <tcp_err+0x3c>)
 800ecf4:	4807      	ldr	r0, [pc, #28]	@ (800ed14 <tcp_err+0x40>)
 800ecf6:	f007 fe29 	bl	801694c <iprintf>
    pcb->errf = err;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	683a      	ldr	r2, [r7, #0]
 800ecfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800ed02:	bf00      	nop
 800ed04:	3708      	adds	r7, #8
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	08018eb0 	.word	0x08018eb0
 800ed10:	0801949c 	.word	0x0801949c
 800ed14:	08018ef4 	.word	0x08018ef4

0800ed18 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b085      	sub	sp, #20
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d008      	beq.n	800ed3a <tcp_accept+0x22>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	7d1b      	ldrb	r3, [r3, #20]
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	d104      	bne.n	800ed3a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	683a      	ldr	r2, [r7, #0]
 800ed38:	619a      	str	r2, [r3, #24]
  }
}
 800ed3a:	bf00      	nop
 800ed3c:	3714      	adds	r7, #20
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr
	...

0800ed48 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	60f8      	str	r0, [r7, #12]
 800ed50:	60b9      	str	r1, [r7, #8]
 800ed52:	4613      	mov	r3, r2
 800ed54:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d107      	bne.n	800ed6c <tcp_poll+0x24>
 800ed5c:	4b0e      	ldr	r3, [pc, #56]	@ (800ed98 <tcp_poll+0x50>)
 800ed5e:	f640 023d 	movw	r2, #2109	@ 0x83d
 800ed62:	490e      	ldr	r1, [pc, #56]	@ (800ed9c <tcp_poll+0x54>)
 800ed64:	480e      	ldr	r0, [pc, #56]	@ (800eda0 <tcp_poll+0x58>)
 800ed66:	f007 fdf1 	bl	801694c <iprintf>
 800ed6a:	e011      	b.n	800ed90 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	7d1b      	ldrb	r3, [r3, #20]
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d106      	bne.n	800ed82 <tcp_poll+0x3a>
 800ed74:	4b08      	ldr	r3, [pc, #32]	@ (800ed98 <tcp_poll+0x50>)
 800ed76:	f640 023e 	movw	r2, #2110	@ 0x83e
 800ed7a:	490a      	ldr	r1, [pc, #40]	@ (800eda4 <tcp_poll+0x5c>)
 800ed7c:	4808      	ldr	r0, [pc, #32]	@ (800eda0 <tcp_poll+0x58>)
 800ed7e:	f007 fde5 	bl	801694c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	68ba      	ldr	r2, [r7, #8]
 800ed86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	79fa      	ldrb	r2, [r7, #7]
 800ed8e:	775a      	strb	r2, [r3, #29]
}
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	08018eb0 	.word	0x08018eb0
 800ed9c:	080194c4 	.word	0x080194c4
 800eda0:	08018ef4 	.word	0x08018ef4
 800eda4:	080194dc 	.word	0x080194dc

0800eda8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d107      	bne.n	800edc6 <tcp_pcb_purge+0x1e>
 800edb6:	4b21      	ldr	r3, [pc, #132]	@ (800ee3c <tcp_pcb_purge+0x94>)
 800edb8:	f640 0251 	movw	r2, #2129	@ 0x851
 800edbc:	4920      	ldr	r1, [pc, #128]	@ (800ee40 <tcp_pcb_purge+0x98>)
 800edbe:	4821      	ldr	r0, [pc, #132]	@ (800ee44 <tcp_pcb_purge+0x9c>)
 800edc0:	f007 fdc4 	bl	801694c <iprintf>
 800edc4:	e037      	b.n	800ee36 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	7d1b      	ldrb	r3, [r3, #20]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d033      	beq.n	800ee36 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800edd2:	2b0a      	cmp	r3, #10
 800edd4:	d02f      	beq.n	800ee36 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800edda:	2b01      	cmp	r3, #1
 800eddc:	d02b      	beq.n	800ee36 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d007      	beq.n	800edf6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800edea:	4618      	mov	r0, r3
 800edec:	f7fe f89c 	bl	800cf28 <pbuf_free>
      pcb->refused_data = NULL;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d002      	beq.n	800ee04 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f000 f986 	bl	800f110 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee0a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7ff fcf9 	bl	800e808 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7ff fcf4 	bl	800e808 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2200      	movs	r2, #0
 800ee32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ee36:	3708      	adds	r7, #8
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	08018eb0 	.word	0x08018eb0
 800ee40:	080194fc 	.word	0x080194fc
 800ee44:	08018ef4 	.word	0x08018ef4

0800ee48 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b084      	sub	sp, #16
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d106      	bne.n	800ee66 <tcp_pcb_remove+0x1e>
 800ee58:	4b3e      	ldr	r3, [pc, #248]	@ (800ef54 <tcp_pcb_remove+0x10c>)
 800ee5a:	f640 0283 	movw	r2, #2179	@ 0x883
 800ee5e:	493e      	ldr	r1, [pc, #248]	@ (800ef58 <tcp_pcb_remove+0x110>)
 800ee60:	483e      	ldr	r0, [pc, #248]	@ (800ef5c <tcp_pcb_remove+0x114>)
 800ee62:	f007 fd73 	bl	801694c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d106      	bne.n	800ee7a <tcp_pcb_remove+0x32>
 800ee6c:	4b39      	ldr	r3, [pc, #228]	@ (800ef54 <tcp_pcb_remove+0x10c>)
 800ee6e:	f640 0284 	movw	r2, #2180	@ 0x884
 800ee72:	493b      	ldr	r1, [pc, #236]	@ (800ef60 <tcp_pcb_remove+0x118>)
 800ee74:	4839      	ldr	r0, [pc, #228]	@ (800ef5c <tcp_pcb_remove+0x114>)
 800ee76:	f007 fd69 	bl	801694c <iprintf>

  TCP_RMV(pcblist, pcb);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	683a      	ldr	r2, [r7, #0]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d105      	bne.n	800ee90 <tcp_pcb_remove+0x48>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	68da      	ldr	r2, [r3, #12]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	601a      	str	r2, [r3, #0]
 800ee8e:	e013      	b.n	800eeb8 <tcp_pcb_remove+0x70>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	60fb      	str	r3, [r7, #12]
 800ee96:	e00c      	b.n	800eeb2 <tcp_pcb_remove+0x6a>
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	68db      	ldr	r3, [r3, #12]
 800ee9c:	683a      	ldr	r2, [r7, #0]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d104      	bne.n	800eeac <tcp_pcb_remove+0x64>
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	68da      	ldr	r2, [r3, #12]
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	60da      	str	r2, [r3, #12]
 800eeaa:	e005      	b.n	800eeb8 <tcp_pcb_remove+0x70>
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	68db      	ldr	r3, [r3, #12]
 800eeb0:	60fb      	str	r3, [r7, #12]
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d1ef      	bne.n	800ee98 <tcp_pcb_remove+0x50>
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	2200      	movs	r2, #0
 800eebc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800eebe:	6838      	ldr	r0, [r7, #0]
 800eec0:	f7ff ff72 	bl	800eda8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	7d1b      	ldrb	r3, [r3, #20]
 800eec8:	2b0a      	cmp	r3, #10
 800eeca:	d013      	beq.n	800eef4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800eed0:	2b01      	cmp	r3, #1
 800eed2:	d00f      	beq.n	800eef4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	8b5b      	ldrh	r3, [r3, #26]
 800eed8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d009      	beq.n	800eef4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	8b5b      	ldrh	r3, [r3, #26]
 800eee4:	f043 0302 	orr.w	r3, r3, #2
 800eee8:	b29a      	uxth	r2, r3
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eeee:	6838      	ldr	r0, [r7, #0]
 800eef0:	f003 fbc0 	bl	8012674 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	7d1b      	ldrb	r3, [r3, #20]
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d020      	beq.n	800ef3e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d006      	beq.n	800ef12 <tcp_pcb_remove+0xca>
 800ef04:	4b13      	ldr	r3, [pc, #76]	@ (800ef54 <tcp_pcb_remove+0x10c>)
 800ef06:	f640 0293 	movw	r2, #2195	@ 0x893
 800ef0a:	4916      	ldr	r1, [pc, #88]	@ (800ef64 <tcp_pcb_remove+0x11c>)
 800ef0c:	4813      	ldr	r0, [pc, #76]	@ (800ef5c <tcp_pcb_remove+0x114>)
 800ef0e:	f007 fd1d 	bl	801694c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d006      	beq.n	800ef28 <tcp_pcb_remove+0xe0>
 800ef1a:	4b0e      	ldr	r3, [pc, #56]	@ (800ef54 <tcp_pcb_remove+0x10c>)
 800ef1c:	f640 0294 	movw	r2, #2196	@ 0x894
 800ef20:	4911      	ldr	r1, [pc, #68]	@ (800ef68 <tcp_pcb_remove+0x120>)
 800ef22:	480e      	ldr	r0, [pc, #56]	@ (800ef5c <tcp_pcb_remove+0x114>)
 800ef24:	f007 fd12 	bl	801694c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d006      	beq.n	800ef3e <tcp_pcb_remove+0xf6>
 800ef30:	4b08      	ldr	r3, [pc, #32]	@ (800ef54 <tcp_pcb_remove+0x10c>)
 800ef32:	f640 0296 	movw	r2, #2198	@ 0x896
 800ef36:	490d      	ldr	r1, [pc, #52]	@ (800ef6c <tcp_pcb_remove+0x124>)
 800ef38:	4808      	ldr	r0, [pc, #32]	@ (800ef5c <tcp_pcb_remove+0x114>)
 800ef3a:	f007 fd07 	bl	801694c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	2200      	movs	r2, #0
 800ef42:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	2200      	movs	r2, #0
 800ef48:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ef4a:	bf00      	nop
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	08018eb0 	.word	0x08018eb0
 800ef58:	08019518 	.word	0x08019518
 800ef5c:	08018ef4 	.word	0x08018ef4
 800ef60:	08019534 	.word	0x08019534
 800ef64:	08019554 	.word	0x08019554
 800ef68:	0801956c 	.word	0x0801956c
 800ef6c:	08019588 	.word	0x08019588

0800ef70 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d106      	bne.n	800ef8c <tcp_next_iss+0x1c>
 800ef7e:	4b0a      	ldr	r3, [pc, #40]	@ (800efa8 <tcp_next_iss+0x38>)
 800ef80:	f640 02af 	movw	r2, #2223	@ 0x8af
 800ef84:	4909      	ldr	r1, [pc, #36]	@ (800efac <tcp_next_iss+0x3c>)
 800ef86:	480a      	ldr	r0, [pc, #40]	@ (800efb0 <tcp_next_iss+0x40>)
 800ef88:	f007 fce0 	bl	801694c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ef8c:	4b09      	ldr	r3, [pc, #36]	@ (800efb4 <tcp_next_iss+0x44>)
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	4b09      	ldr	r3, [pc, #36]	@ (800efb8 <tcp_next_iss+0x48>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	4413      	add	r3, r2
 800ef96:	4a07      	ldr	r2, [pc, #28]	@ (800efb4 <tcp_next_iss+0x44>)
 800ef98:	6013      	str	r3, [r2, #0]
  return iss;
 800ef9a:	4b06      	ldr	r3, [pc, #24]	@ (800efb4 <tcp_next_iss+0x44>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3708      	adds	r7, #8
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	08018eb0 	.word	0x08018eb0
 800efac:	080195a0 	.word	0x080195a0
 800efb0:	08018ef4 	.word	0x08018ef4
 800efb4:	20000028 	.word	0x20000028
 800efb8:	2000f2b0 	.word	0x2000f2b0

0800efbc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b086      	sub	sp, #24
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	4603      	mov	r3, r0
 800efc4:	60b9      	str	r1, [r7, #8]
 800efc6:	607a      	str	r2, [r7, #4]
 800efc8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d106      	bne.n	800efde <tcp_eff_send_mss_netif+0x22>
 800efd0:	4b14      	ldr	r3, [pc, #80]	@ (800f024 <tcp_eff_send_mss_netif+0x68>)
 800efd2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800efd6:	4914      	ldr	r1, [pc, #80]	@ (800f028 <tcp_eff_send_mss_netif+0x6c>)
 800efd8:	4814      	ldr	r0, [pc, #80]	@ (800f02c <tcp_eff_send_mss_netif+0x70>)
 800efda:	f007 fcb7 	bl	801694c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d101      	bne.n	800efe8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800efe4:	89fb      	ldrh	r3, [r7, #14]
 800efe6:	e019      	b.n	800f01c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800efec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800efee:	8afb      	ldrh	r3, [r7, #22]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d012      	beq.n	800f01a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800eff4:	2328      	movs	r3, #40	@ 0x28
 800eff6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800eff8:	8afa      	ldrh	r2, [r7, #22]
 800effa:	8abb      	ldrh	r3, [r7, #20]
 800effc:	429a      	cmp	r2, r3
 800effe:	d904      	bls.n	800f00a <tcp_eff_send_mss_netif+0x4e>
 800f000:	8afa      	ldrh	r2, [r7, #22]
 800f002:	8abb      	ldrh	r3, [r7, #20]
 800f004:	1ad3      	subs	r3, r2, r3
 800f006:	b29b      	uxth	r3, r3
 800f008:	e000      	b.n	800f00c <tcp_eff_send_mss_netif+0x50>
 800f00a:	2300      	movs	r3, #0
 800f00c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f00e:	8a7a      	ldrh	r2, [r7, #18]
 800f010:	89fb      	ldrh	r3, [r7, #14]
 800f012:	4293      	cmp	r3, r2
 800f014:	bf28      	it	cs
 800f016:	4613      	movcs	r3, r2
 800f018:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f01a:	89fb      	ldrh	r3, [r7, #14]
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	3718      	adds	r7, #24
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}
 800f024:	08018eb0 	.word	0x08018eb0
 800f028:	080195bc 	.word	0x080195bc
 800f02c:	08018ef4 	.word	0x08018ef4

0800f030 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b084      	sub	sp, #16
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d119      	bne.n	800f078 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f044:	4b10      	ldr	r3, [pc, #64]	@ (800f088 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f046:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800f04a:	4910      	ldr	r1, [pc, #64]	@ (800f08c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f04c:	4810      	ldr	r0, [pc, #64]	@ (800f090 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f04e:	f007 fc7d 	bl	801694c <iprintf>

  while (pcb != NULL) {
 800f052:	e011      	b.n	800f078 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681a      	ldr	r2, [r3, #0]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d108      	bne.n	800f072 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	68db      	ldr	r3, [r3, #12]
 800f064:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f066:	68f8      	ldr	r0, [r7, #12]
 800f068:	f7fe fd4e 	bl	800db08 <tcp_abort>
      pcb = next;
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	60fb      	str	r3, [r7, #12]
 800f070:	e002      	b.n	800f078 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	68db      	ldr	r3, [r3, #12]
 800f076:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d1ea      	bne.n	800f054 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f07e:	bf00      	nop
 800f080:	bf00      	nop
 800f082:	3710      	adds	r7, #16
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	08018eb0 	.word	0x08018eb0
 800f08c:	080195e4 	.word	0x080195e4
 800f090:	08018ef4 	.word	0x08018ef4

0800f094 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d02a      	beq.n	800f0fa <tcp_netif_ip_addr_changed+0x66>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d026      	beq.n	800f0fa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f0ac:	4b15      	ldr	r3, [pc, #84]	@ (800f104 <tcp_netif_ip_addr_changed+0x70>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f7ff ffbc 	bl	800f030 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f0b8:	4b13      	ldr	r3, [pc, #76]	@ (800f108 <tcp_netif_ip_addr_changed+0x74>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	4619      	mov	r1, r3
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7ff ffb6 	bl	800f030 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d017      	beq.n	800f0fa <tcp_netif_ip_addr_changed+0x66>
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d013      	beq.n	800f0fa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f0d2:	4b0e      	ldr	r3, [pc, #56]	@ (800f10c <tcp_netif_ip_addr_changed+0x78>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	60fb      	str	r3, [r7, #12]
 800f0d8:	e00c      	b.n	800f0f4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d103      	bne.n	800f0ee <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	681a      	ldr	r2, [r3, #0]
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	68db      	ldr	r3, [r3, #12]
 800f0f2:	60fb      	str	r3, [r7, #12]
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d1ef      	bne.n	800f0da <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f0fa:	bf00      	nop
 800f0fc:	3710      	adds	r7, #16
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
 800f102:	bf00      	nop
 800f104:	2000f2bc 	.word	0x2000f2bc
 800f108:	2000f2b4 	.word	0x2000f2b4
 800f10c:	2000f2b8 	.word	0x2000f2b8

0800f110 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d007      	beq.n	800f130 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f124:	4618      	mov	r0, r3
 800f126:	f7ff fb6f 	bl	800e808 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2200      	movs	r2, #0
 800f12e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f130:	bf00      	nop
 800f132:	3708      	adds	r7, #8
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f138:	b590      	push	{r4, r7, lr}
 800f13a:	b08d      	sub	sp, #52	@ 0x34
 800f13c:	af04      	add	r7, sp, #16
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d105      	bne.n	800f154 <tcp_input+0x1c>
 800f148:	4b9b      	ldr	r3, [pc, #620]	@ (800f3b8 <tcp_input+0x280>)
 800f14a:	2283      	movs	r2, #131	@ 0x83
 800f14c:	499b      	ldr	r1, [pc, #620]	@ (800f3bc <tcp_input+0x284>)
 800f14e:	489c      	ldr	r0, [pc, #624]	@ (800f3c0 <tcp_input+0x288>)
 800f150:	f007 fbfc 	bl	801694c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	4a9a      	ldr	r2, [pc, #616]	@ (800f3c4 <tcp_input+0x28c>)
 800f15a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	895b      	ldrh	r3, [r3, #10]
 800f160:	2b13      	cmp	r3, #19
 800f162:	f240 83d1 	bls.w	800f908 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f166:	4b98      	ldr	r3, [pc, #608]	@ (800f3c8 <tcp_input+0x290>)
 800f168:	695b      	ldr	r3, [r3, #20]
 800f16a:	4a97      	ldr	r2, [pc, #604]	@ (800f3c8 <tcp_input+0x290>)
 800f16c:	6812      	ldr	r2, [r2, #0]
 800f16e:	4611      	mov	r1, r2
 800f170:	4618      	mov	r0, r3
 800f172:	f006 f9df 	bl	8015534 <ip4_addr_isbroadcast_u32>
 800f176:	4603      	mov	r3, r0
 800f178:	2b00      	cmp	r3, #0
 800f17a:	f040 83c7 	bne.w	800f90c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f17e:	4b92      	ldr	r3, [pc, #584]	@ (800f3c8 <tcp_input+0x290>)
 800f180:	695b      	ldr	r3, [r3, #20]
 800f182:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f186:	2be0      	cmp	r3, #224	@ 0xe0
 800f188:	f000 83c0 	beq.w	800f90c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f18c:	4b8d      	ldr	r3, [pc, #564]	@ (800f3c4 <tcp_input+0x28c>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	899b      	ldrh	r3, [r3, #12]
 800f192:	b29b      	uxth	r3, r3
 800f194:	4618      	mov	r0, r3
 800f196:	f7fc fad5 	bl	800b744 <lwip_htons>
 800f19a:	4603      	mov	r3, r0
 800f19c:	0b1b      	lsrs	r3, r3, #12
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	b2db      	uxtb	r3, r3
 800f1a2:	009b      	lsls	r3, r3, #2
 800f1a4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f1a6:	7cbb      	ldrb	r3, [r7, #18]
 800f1a8:	2b13      	cmp	r3, #19
 800f1aa:	f240 83b1 	bls.w	800f910 <tcp_input+0x7d8>
 800f1ae:	7cbb      	ldrb	r3, [r7, #18]
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	891b      	ldrh	r3, [r3, #8]
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	f200 83aa 	bhi.w	800f910 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f1bc:	7cbb      	ldrb	r3, [r7, #18]
 800f1be:	b29b      	uxth	r3, r3
 800f1c0:	3b14      	subs	r3, #20
 800f1c2:	b29a      	uxth	r2, r3
 800f1c4:	4b81      	ldr	r3, [pc, #516]	@ (800f3cc <tcp_input+0x294>)
 800f1c6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f1c8:	4b81      	ldr	r3, [pc, #516]	@ (800f3d0 <tcp_input+0x298>)
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	895a      	ldrh	r2, [r3, #10]
 800f1d2:	7cbb      	ldrb	r3, [r7, #18]
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d309      	bcc.n	800f1ee <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f1da:	4b7c      	ldr	r3, [pc, #496]	@ (800f3cc <tcp_input+0x294>)
 800f1dc:	881a      	ldrh	r2, [r3, #0]
 800f1de:	4b7d      	ldr	r3, [pc, #500]	@ (800f3d4 <tcp_input+0x29c>)
 800f1e0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f1e2:	7cbb      	ldrb	r3, [r7, #18]
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f7fd fe18 	bl	800ce1c <pbuf_remove_header>
 800f1ec:	e04e      	b.n	800f28c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d105      	bne.n	800f202 <tcp_input+0xca>
 800f1f6:	4b70      	ldr	r3, [pc, #448]	@ (800f3b8 <tcp_input+0x280>)
 800f1f8:	22c2      	movs	r2, #194	@ 0xc2
 800f1fa:	4977      	ldr	r1, [pc, #476]	@ (800f3d8 <tcp_input+0x2a0>)
 800f1fc:	4870      	ldr	r0, [pc, #448]	@ (800f3c0 <tcp_input+0x288>)
 800f1fe:	f007 fba5 	bl	801694c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f202:	2114      	movs	r1, #20
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f7fd fe09 	bl	800ce1c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	895a      	ldrh	r2, [r3, #10]
 800f20e:	4b71      	ldr	r3, [pc, #452]	@ (800f3d4 <tcp_input+0x29c>)
 800f210:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f212:	4b6e      	ldr	r3, [pc, #440]	@ (800f3cc <tcp_input+0x294>)
 800f214:	881a      	ldrh	r2, [r3, #0]
 800f216:	4b6f      	ldr	r3, [pc, #444]	@ (800f3d4 <tcp_input+0x29c>)
 800f218:	881b      	ldrh	r3, [r3, #0]
 800f21a:	1ad3      	subs	r3, r2, r3
 800f21c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f21e:	4b6d      	ldr	r3, [pc, #436]	@ (800f3d4 <tcp_input+0x29c>)
 800f220:	881b      	ldrh	r3, [r3, #0]
 800f222:	4619      	mov	r1, r3
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f7fd fdf9 	bl	800ce1c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	895b      	ldrh	r3, [r3, #10]
 800f230:	8a3a      	ldrh	r2, [r7, #16]
 800f232:	429a      	cmp	r2, r3
 800f234:	f200 836e 	bhi.w	800f914 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	4a64      	ldr	r2, [pc, #400]	@ (800f3d0 <tcp_input+0x298>)
 800f240:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	8a3a      	ldrh	r2, [r7, #16]
 800f248:	4611      	mov	r1, r2
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fd fde6 	bl	800ce1c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	891a      	ldrh	r2, [r3, #8]
 800f254:	8a3b      	ldrh	r3, [r7, #16]
 800f256:	1ad3      	subs	r3, r2, r3
 800f258:	b29a      	uxth	r2, r3
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	895b      	ldrh	r3, [r3, #10]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d005      	beq.n	800f272 <tcp_input+0x13a>
 800f266:	4b54      	ldr	r3, [pc, #336]	@ (800f3b8 <tcp_input+0x280>)
 800f268:	22df      	movs	r2, #223	@ 0xdf
 800f26a:	495c      	ldr	r1, [pc, #368]	@ (800f3dc <tcp_input+0x2a4>)
 800f26c:	4854      	ldr	r0, [pc, #336]	@ (800f3c0 <tcp_input+0x288>)
 800f26e:	f007 fb6d 	bl	801694c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	891a      	ldrh	r2, [r3, #8]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	891b      	ldrh	r3, [r3, #8]
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d005      	beq.n	800f28c <tcp_input+0x154>
 800f280:	4b4d      	ldr	r3, [pc, #308]	@ (800f3b8 <tcp_input+0x280>)
 800f282:	22e0      	movs	r2, #224	@ 0xe0
 800f284:	4956      	ldr	r1, [pc, #344]	@ (800f3e0 <tcp_input+0x2a8>)
 800f286:	484e      	ldr	r0, [pc, #312]	@ (800f3c0 <tcp_input+0x288>)
 800f288:	f007 fb60 	bl	801694c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f28c:	4b4d      	ldr	r3, [pc, #308]	@ (800f3c4 <tcp_input+0x28c>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	881b      	ldrh	r3, [r3, #0]
 800f292:	b29b      	uxth	r3, r3
 800f294:	4a4b      	ldr	r2, [pc, #300]	@ (800f3c4 <tcp_input+0x28c>)
 800f296:	6814      	ldr	r4, [r2, #0]
 800f298:	4618      	mov	r0, r3
 800f29a:	f7fc fa53 	bl	800b744 <lwip_htons>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f2a2:	4b48      	ldr	r3, [pc, #288]	@ (800f3c4 <tcp_input+0x28c>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	885b      	ldrh	r3, [r3, #2]
 800f2a8:	b29b      	uxth	r3, r3
 800f2aa:	4a46      	ldr	r2, [pc, #280]	@ (800f3c4 <tcp_input+0x28c>)
 800f2ac:	6814      	ldr	r4, [r2, #0]
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fc fa48 	bl	800b744 <lwip_htons>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f2b8:	4b42      	ldr	r3, [pc, #264]	@ (800f3c4 <tcp_input+0x28c>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	4a41      	ldr	r2, [pc, #260]	@ (800f3c4 <tcp_input+0x28c>)
 800f2c0:	6814      	ldr	r4, [r2, #0]
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7fc fa53 	bl	800b76e <lwip_htonl>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	6063      	str	r3, [r4, #4]
 800f2cc:	6863      	ldr	r3, [r4, #4]
 800f2ce:	4a45      	ldr	r2, [pc, #276]	@ (800f3e4 <tcp_input+0x2ac>)
 800f2d0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f2d2:	4b3c      	ldr	r3, [pc, #240]	@ (800f3c4 <tcp_input+0x28c>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	689b      	ldr	r3, [r3, #8]
 800f2d8:	4a3a      	ldr	r2, [pc, #232]	@ (800f3c4 <tcp_input+0x28c>)
 800f2da:	6814      	ldr	r4, [r2, #0]
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f7fc fa46 	bl	800b76e <lwip_htonl>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	60a3      	str	r3, [r4, #8]
 800f2e6:	68a3      	ldr	r3, [r4, #8]
 800f2e8:	4a3f      	ldr	r2, [pc, #252]	@ (800f3e8 <tcp_input+0x2b0>)
 800f2ea:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f2ec:	4b35      	ldr	r3, [pc, #212]	@ (800f3c4 <tcp_input+0x28c>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	89db      	ldrh	r3, [r3, #14]
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	4a33      	ldr	r2, [pc, #204]	@ (800f3c4 <tcp_input+0x28c>)
 800f2f6:	6814      	ldr	r4, [r2, #0]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7fc fa23 	bl	800b744 <lwip_htons>
 800f2fe:	4603      	mov	r3, r0
 800f300:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f302:	4b30      	ldr	r3, [pc, #192]	@ (800f3c4 <tcp_input+0x28c>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	899b      	ldrh	r3, [r3, #12]
 800f308:	b29b      	uxth	r3, r3
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7fc fa1a 	bl	800b744 <lwip_htons>
 800f310:	4603      	mov	r3, r0
 800f312:	b2db      	uxtb	r3, r3
 800f314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f318:	b2da      	uxtb	r2, r3
 800f31a:	4b34      	ldr	r3, [pc, #208]	@ (800f3ec <tcp_input+0x2b4>)
 800f31c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	891a      	ldrh	r2, [r3, #8]
 800f322:	4b33      	ldr	r3, [pc, #204]	@ (800f3f0 <tcp_input+0x2b8>)
 800f324:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f326:	4b31      	ldr	r3, [pc, #196]	@ (800f3ec <tcp_input+0x2b4>)
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	f003 0303 	and.w	r3, r3, #3
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d00c      	beq.n	800f34c <tcp_input+0x214>
    tcplen++;
 800f332:	4b2f      	ldr	r3, [pc, #188]	@ (800f3f0 <tcp_input+0x2b8>)
 800f334:	881b      	ldrh	r3, [r3, #0]
 800f336:	3301      	adds	r3, #1
 800f338:	b29a      	uxth	r2, r3
 800f33a:	4b2d      	ldr	r3, [pc, #180]	@ (800f3f0 <tcp_input+0x2b8>)
 800f33c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	891a      	ldrh	r2, [r3, #8]
 800f342:	4b2b      	ldr	r3, [pc, #172]	@ (800f3f0 <tcp_input+0x2b8>)
 800f344:	881b      	ldrh	r3, [r3, #0]
 800f346:	429a      	cmp	r2, r3
 800f348:	f200 82e6 	bhi.w	800f918 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f34c:	2300      	movs	r3, #0
 800f34e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f350:	4b28      	ldr	r3, [pc, #160]	@ (800f3f4 <tcp_input+0x2bc>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	61fb      	str	r3, [r7, #28]
 800f356:	e09d      	b.n	800f494 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	7d1b      	ldrb	r3, [r3, #20]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d105      	bne.n	800f36c <tcp_input+0x234>
 800f360:	4b15      	ldr	r3, [pc, #84]	@ (800f3b8 <tcp_input+0x280>)
 800f362:	22fb      	movs	r2, #251	@ 0xfb
 800f364:	4924      	ldr	r1, [pc, #144]	@ (800f3f8 <tcp_input+0x2c0>)
 800f366:	4816      	ldr	r0, [pc, #88]	@ (800f3c0 <tcp_input+0x288>)
 800f368:	f007 faf0 	bl	801694c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	7d1b      	ldrb	r3, [r3, #20]
 800f370:	2b0a      	cmp	r3, #10
 800f372:	d105      	bne.n	800f380 <tcp_input+0x248>
 800f374:	4b10      	ldr	r3, [pc, #64]	@ (800f3b8 <tcp_input+0x280>)
 800f376:	22fc      	movs	r2, #252	@ 0xfc
 800f378:	4920      	ldr	r1, [pc, #128]	@ (800f3fc <tcp_input+0x2c4>)
 800f37a:	4811      	ldr	r0, [pc, #68]	@ (800f3c0 <tcp_input+0x288>)
 800f37c:	f007 fae6 	bl	801694c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	7d1b      	ldrb	r3, [r3, #20]
 800f384:	2b01      	cmp	r3, #1
 800f386:	d105      	bne.n	800f394 <tcp_input+0x25c>
 800f388:	4b0b      	ldr	r3, [pc, #44]	@ (800f3b8 <tcp_input+0x280>)
 800f38a:	22fd      	movs	r2, #253	@ 0xfd
 800f38c:	491c      	ldr	r1, [pc, #112]	@ (800f400 <tcp_input+0x2c8>)
 800f38e:	480c      	ldr	r0, [pc, #48]	@ (800f3c0 <tcp_input+0x288>)
 800f390:	f007 fadc 	bl	801694c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	7a1b      	ldrb	r3, [r3, #8]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d033      	beq.n	800f404 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f39c:	69fb      	ldr	r3, [r7, #28]
 800f39e:	7a1a      	ldrb	r2, [r3, #8]
 800f3a0:	4b09      	ldr	r3, [pc, #36]	@ (800f3c8 <tcp_input+0x290>)
 800f3a2:	685b      	ldr	r3, [r3, #4]
 800f3a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d029      	beq.n	800f404 <tcp_input+0x2cc>
      prev = pcb;
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	61bb      	str	r3, [r7, #24]
      continue;
 800f3b4:	e06b      	b.n	800f48e <tcp_input+0x356>
 800f3b6:	bf00      	nop
 800f3b8:	08019618 	.word	0x08019618
 800f3bc:	0801964c 	.word	0x0801964c
 800f3c0:	08019664 	.word	0x08019664
 800f3c4:	2000f2d8 	.word	0x2000f2d8
 800f3c8:	2000999c 	.word	0x2000999c
 800f3cc:	2000f2dc 	.word	0x2000f2dc
 800f3d0:	2000f2e0 	.word	0x2000f2e0
 800f3d4:	2000f2de 	.word	0x2000f2de
 800f3d8:	0801968c 	.word	0x0801968c
 800f3dc:	0801969c 	.word	0x0801969c
 800f3e0:	080196a8 	.word	0x080196a8
 800f3e4:	2000f2e8 	.word	0x2000f2e8
 800f3e8:	2000f2ec 	.word	0x2000f2ec
 800f3ec:	2000f2f4 	.word	0x2000f2f4
 800f3f0:	2000f2f2 	.word	0x2000f2f2
 800f3f4:	2000f2bc 	.word	0x2000f2bc
 800f3f8:	080196c8 	.word	0x080196c8
 800f3fc:	080196f0 	.word	0x080196f0
 800f400:	0801971c 	.word	0x0801971c
    }

    if (pcb->remote_port == tcphdr->src &&
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	8b1a      	ldrh	r2, [r3, #24]
 800f408:	4b72      	ldr	r3, [pc, #456]	@ (800f5d4 <tcp_input+0x49c>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	881b      	ldrh	r3, [r3, #0]
 800f40e:	b29b      	uxth	r3, r3
 800f410:	429a      	cmp	r2, r3
 800f412:	d13a      	bne.n	800f48a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f414:	69fb      	ldr	r3, [r7, #28]
 800f416:	8ada      	ldrh	r2, [r3, #22]
 800f418:	4b6e      	ldr	r3, [pc, #440]	@ (800f5d4 <tcp_input+0x49c>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	885b      	ldrh	r3, [r3, #2]
 800f41e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f420:	429a      	cmp	r2, r3
 800f422:	d132      	bne.n	800f48a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f424:	69fb      	ldr	r3, [r7, #28]
 800f426:	685a      	ldr	r2, [r3, #4]
 800f428:	4b6b      	ldr	r3, [pc, #428]	@ (800f5d8 <tcp_input+0x4a0>)
 800f42a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d12c      	bne.n	800f48a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f430:	69fb      	ldr	r3, [r7, #28]
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	4b68      	ldr	r3, [pc, #416]	@ (800f5d8 <tcp_input+0x4a0>)
 800f436:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f438:	429a      	cmp	r2, r3
 800f43a:	d126      	bne.n	800f48a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	68db      	ldr	r3, [r3, #12]
 800f440:	69fa      	ldr	r2, [r7, #28]
 800f442:	429a      	cmp	r2, r3
 800f444:	d106      	bne.n	800f454 <tcp_input+0x31c>
 800f446:	4b65      	ldr	r3, [pc, #404]	@ (800f5dc <tcp_input+0x4a4>)
 800f448:	f240 120d 	movw	r2, #269	@ 0x10d
 800f44c:	4964      	ldr	r1, [pc, #400]	@ (800f5e0 <tcp_input+0x4a8>)
 800f44e:	4865      	ldr	r0, [pc, #404]	@ (800f5e4 <tcp_input+0x4ac>)
 800f450:	f007 fa7c 	bl	801694c <iprintf>
      if (prev != NULL) {
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d00a      	beq.n	800f470 <tcp_input+0x338>
        prev->next = pcb->next;
 800f45a:	69fb      	ldr	r3, [r7, #28]
 800f45c:	68da      	ldr	r2, [r3, #12]
 800f45e:	69bb      	ldr	r3, [r7, #24]
 800f460:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f462:	4b61      	ldr	r3, [pc, #388]	@ (800f5e8 <tcp_input+0x4b0>)
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	69fb      	ldr	r3, [r7, #28]
 800f468:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f46a:	4a5f      	ldr	r2, [pc, #380]	@ (800f5e8 <tcp_input+0x4b0>)
 800f46c:	69fb      	ldr	r3, [r7, #28]
 800f46e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	69fa      	ldr	r2, [r7, #28]
 800f476:	429a      	cmp	r2, r3
 800f478:	d111      	bne.n	800f49e <tcp_input+0x366>
 800f47a:	4b58      	ldr	r3, [pc, #352]	@ (800f5dc <tcp_input+0x4a4>)
 800f47c:	f240 1215 	movw	r2, #277	@ 0x115
 800f480:	495a      	ldr	r1, [pc, #360]	@ (800f5ec <tcp_input+0x4b4>)
 800f482:	4858      	ldr	r0, [pc, #352]	@ (800f5e4 <tcp_input+0x4ac>)
 800f484:	f007 fa62 	bl	801694c <iprintf>
      break;
 800f488:	e009      	b.n	800f49e <tcp_input+0x366>
    }
    prev = pcb;
 800f48a:	69fb      	ldr	r3, [r7, #28]
 800f48c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f48e:	69fb      	ldr	r3, [r7, #28]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	61fb      	str	r3, [r7, #28]
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	2b00      	cmp	r3, #0
 800f498:	f47f af5e 	bne.w	800f358 <tcp_input+0x220>
 800f49c:	e000      	b.n	800f4a0 <tcp_input+0x368>
      break;
 800f49e:	bf00      	nop
  }

  if (pcb == NULL) {
 800f4a0:	69fb      	ldr	r3, [r7, #28]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	f040 80aa 	bne.w	800f5fc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4a8:	4b51      	ldr	r3, [pc, #324]	@ (800f5f0 <tcp_input+0x4b8>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	61fb      	str	r3, [r7, #28]
 800f4ae:	e03f      	b.n	800f530 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f4b0:	69fb      	ldr	r3, [r7, #28]
 800f4b2:	7d1b      	ldrb	r3, [r3, #20]
 800f4b4:	2b0a      	cmp	r3, #10
 800f4b6:	d006      	beq.n	800f4c6 <tcp_input+0x38e>
 800f4b8:	4b48      	ldr	r3, [pc, #288]	@ (800f5dc <tcp_input+0x4a4>)
 800f4ba:	f240 121f 	movw	r2, #287	@ 0x11f
 800f4be:	494d      	ldr	r1, [pc, #308]	@ (800f5f4 <tcp_input+0x4bc>)
 800f4c0:	4848      	ldr	r0, [pc, #288]	@ (800f5e4 <tcp_input+0x4ac>)
 800f4c2:	f007 fa43 	bl	801694c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f4c6:	69fb      	ldr	r3, [r7, #28]
 800f4c8:	7a1b      	ldrb	r3, [r3, #8]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d009      	beq.n	800f4e2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f4ce:	69fb      	ldr	r3, [r7, #28]
 800f4d0:	7a1a      	ldrb	r2, [r3, #8]
 800f4d2:	4b41      	ldr	r3, [pc, #260]	@ (800f5d8 <tcp_input+0x4a0>)
 800f4d4:	685b      	ldr	r3, [r3, #4]
 800f4d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f4da:	3301      	adds	r3, #1
 800f4dc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d122      	bne.n	800f528 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	8b1a      	ldrh	r2, [r3, #24]
 800f4e6:	4b3b      	ldr	r3, [pc, #236]	@ (800f5d4 <tcp_input+0x49c>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	881b      	ldrh	r3, [r3, #0]
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d11b      	bne.n	800f52a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	8ada      	ldrh	r2, [r3, #22]
 800f4f6:	4b37      	ldr	r3, [pc, #220]	@ (800f5d4 <tcp_input+0x49c>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	885b      	ldrh	r3, [r3, #2]
 800f4fc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d113      	bne.n	800f52a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	685a      	ldr	r2, [r3, #4]
 800f506:	4b34      	ldr	r3, [pc, #208]	@ (800f5d8 <tcp_input+0x4a0>)
 800f508:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d10d      	bne.n	800f52a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	681a      	ldr	r2, [r3, #0]
 800f512:	4b31      	ldr	r3, [pc, #196]	@ (800f5d8 <tcp_input+0x4a0>)
 800f514:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f516:	429a      	cmp	r2, r3
 800f518:	d107      	bne.n	800f52a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f51a:	69f8      	ldr	r0, [r7, #28]
 800f51c:	f000 fb56 	bl	800fbcc <tcp_timewait_input>
        }
        pbuf_free(p);
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f7fd fd01 	bl	800cf28 <pbuf_free>
        return;
 800f526:	e1fd      	b.n	800f924 <tcp_input+0x7ec>
        continue;
 800f528:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f52a:	69fb      	ldr	r3, [r7, #28]
 800f52c:	68db      	ldr	r3, [r3, #12]
 800f52e:	61fb      	str	r3, [r7, #28]
 800f530:	69fb      	ldr	r3, [r7, #28]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d1bc      	bne.n	800f4b0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f536:	2300      	movs	r3, #0
 800f538:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f53a:	4b2f      	ldr	r3, [pc, #188]	@ (800f5f8 <tcp_input+0x4c0>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	617b      	str	r3, [r7, #20]
 800f540:	e02a      	b.n	800f598 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	7a1b      	ldrb	r3, [r3, #8]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d00c      	beq.n	800f564 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	7a1a      	ldrb	r2, [r3, #8]
 800f54e:	4b22      	ldr	r3, [pc, #136]	@ (800f5d8 <tcp_input+0x4a0>)
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f556:	3301      	adds	r3, #1
 800f558:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d002      	beq.n	800f564 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	61bb      	str	r3, [r7, #24]
        continue;
 800f562:	e016      	b.n	800f592 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	8ada      	ldrh	r2, [r3, #22]
 800f568:	4b1a      	ldr	r3, [pc, #104]	@ (800f5d4 <tcp_input+0x49c>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	885b      	ldrh	r3, [r3, #2]
 800f56e:	b29b      	uxth	r3, r3
 800f570:	429a      	cmp	r2, r3
 800f572:	d10c      	bne.n	800f58e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	4b17      	ldr	r3, [pc, #92]	@ (800f5d8 <tcp_input+0x4a0>)
 800f57a:	695b      	ldr	r3, [r3, #20]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d00f      	beq.n	800f5a0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d00d      	beq.n	800f5a2 <tcp_input+0x46a>
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d009      	beq.n	800f5a2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	617b      	str	r3, [r7, #20]
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d1d1      	bne.n	800f542 <tcp_input+0x40a>
 800f59e:	e000      	b.n	800f5a2 <tcp_input+0x46a>
            break;
 800f5a0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d029      	beq.n	800f5fc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f5a8:	69bb      	ldr	r3, [r7, #24]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d00a      	beq.n	800f5c4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	68da      	ldr	r2, [r3, #12]
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f5b6:	4b10      	ldr	r3, [pc, #64]	@ (800f5f8 <tcp_input+0x4c0>)
 800f5b8:	681a      	ldr	r2, [r3, #0]
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f5be:	4a0e      	ldr	r2, [pc, #56]	@ (800f5f8 <tcp_input+0x4c0>)
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f5c4:	6978      	ldr	r0, [r7, #20]
 800f5c6:	f000 fa03 	bl	800f9d0 <tcp_listen_input>
      }
      pbuf_free(p);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f7fd fcac 	bl	800cf28 <pbuf_free>
      return;
 800f5d0:	e1a8      	b.n	800f924 <tcp_input+0x7ec>
 800f5d2:	bf00      	nop
 800f5d4:	2000f2d8 	.word	0x2000f2d8
 800f5d8:	2000999c 	.word	0x2000999c
 800f5dc:	08019618 	.word	0x08019618
 800f5e0:	08019744 	.word	0x08019744
 800f5e4:	08019664 	.word	0x08019664
 800f5e8:	2000f2bc 	.word	0x2000f2bc
 800f5ec:	08019770 	.word	0x08019770
 800f5f0:	2000f2c0 	.word	0x2000f2c0
 800f5f4:	0801979c 	.word	0x0801979c
 800f5f8:	2000f2b8 	.word	0x2000f2b8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	f000 8158 	beq.w	800f8b4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f604:	4b95      	ldr	r3, [pc, #596]	@ (800f85c <tcp_input+0x724>)
 800f606:	2200      	movs	r2, #0
 800f608:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	891a      	ldrh	r2, [r3, #8]
 800f60e:	4b93      	ldr	r3, [pc, #588]	@ (800f85c <tcp_input+0x724>)
 800f610:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f612:	4a92      	ldr	r2, [pc, #584]	@ (800f85c <tcp_input+0x724>)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f618:	4b91      	ldr	r3, [pc, #580]	@ (800f860 <tcp_input+0x728>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	4a8f      	ldr	r2, [pc, #572]	@ (800f85c <tcp_input+0x724>)
 800f61e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f620:	4b90      	ldr	r3, [pc, #576]	@ (800f864 <tcp_input+0x72c>)
 800f622:	2200      	movs	r2, #0
 800f624:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f626:	4b90      	ldr	r3, [pc, #576]	@ (800f868 <tcp_input+0x730>)
 800f628:	2200      	movs	r2, #0
 800f62a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f62c:	4b8f      	ldr	r3, [pc, #572]	@ (800f86c <tcp_input+0x734>)
 800f62e:	2200      	movs	r2, #0
 800f630:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f632:	4b8f      	ldr	r3, [pc, #572]	@ (800f870 <tcp_input+0x738>)
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	f003 0308 	and.w	r3, r3, #8
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d006      	beq.n	800f64c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	7b5b      	ldrb	r3, [r3, #13]
 800f642:	f043 0301 	orr.w	r3, r3, #1
 800f646:	b2da      	uxtb	r2, r3
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f64c:	69fb      	ldr	r3, [r7, #28]
 800f64e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f650:	2b00      	cmp	r3, #0
 800f652:	d017      	beq.n	800f684 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f654:	69f8      	ldr	r0, [r7, #28]
 800f656:	f7ff f85b 	bl	800e710 <tcp_process_refused_data>
 800f65a:	4603      	mov	r3, r0
 800f65c:	f113 0f0d 	cmn.w	r3, #13
 800f660:	d007      	beq.n	800f672 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f666:	2b00      	cmp	r3, #0
 800f668:	d00c      	beq.n	800f684 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f66a:	4b82      	ldr	r3, [pc, #520]	@ (800f874 <tcp_input+0x73c>)
 800f66c:	881b      	ldrh	r3, [r3, #0]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d008      	beq.n	800f684 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f676:	2b00      	cmp	r3, #0
 800f678:	f040 80e3 	bne.w	800f842 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f67c:	69f8      	ldr	r0, [r7, #28]
 800f67e:	f003 fdff 	bl	8013280 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f682:	e0de      	b.n	800f842 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f684:	4a7c      	ldr	r2, [pc, #496]	@ (800f878 <tcp_input+0x740>)
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f68a:	69f8      	ldr	r0, [r7, #28]
 800f68c:	f000 fb18 	bl	800fcc0 <tcp_process>
 800f690:	4603      	mov	r3, r0
 800f692:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f694:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f698:	f113 0f0d 	cmn.w	r3, #13
 800f69c:	f000 80d3 	beq.w	800f846 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f6a0:	4b71      	ldr	r3, [pc, #452]	@ (800f868 <tcp_input+0x730>)
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	f003 0308 	and.w	r3, r3, #8
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d015      	beq.n	800f6d8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d008      	beq.n	800f6c8 <tcp_input+0x590>
 800f6b6:	69fb      	ldr	r3, [r7, #28]
 800f6b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6bc:	69fa      	ldr	r2, [r7, #28]
 800f6be:	6912      	ldr	r2, [r2, #16]
 800f6c0:	f06f 010d 	mvn.w	r1, #13
 800f6c4:	4610      	mov	r0, r2
 800f6c6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f6c8:	69f9      	ldr	r1, [r7, #28]
 800f6ca:	486c      	ldr	r0, [pc, #432]	@ (800f87c <tcp_input+0x744>)
 800f6cc:	f7ff fbbc 	bl	800ee48 <tcp_pcb_remove>
        tcp_free(pcb);
 800f6d0:	69f8      	ldr	r0, [r7, #28]
 800f6d2:	f7fd fed5 	bl	800d480 <tcp_free>
 800f6d6:	e0da      	b.n	800f88e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f6dc:	4b63      	ldr	r3, [pc, #396]	@ (800f86c <tcp_input+0x734>)
 800f6de:	881b      	ldrh	r3, [r3, #0]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d01d      	beq.n	800f720 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f6e4:	4b61      	ldr	r3, [pc, #388]	@ (800f86c <tcp_input+0x734>)
 800f6e6:	881b      	ldrh	r3, [r3, #0]
 800f6e8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f6ea:	69fb      	ldr	r3, [r7, #28]
 800f6ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d00a      	beq.n	800f70a <tcp_input+0x5d2>
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6fa:	69fa      	ldr	r2, [r7, #28]
 800f6fc:	6910      	ldr	r0, [r2, #16]
 800f6fe:	89fa      	ldrh	r2, [r7, #14]
 800f700:	69f9      	ldr	r1, [r7, #28]
 800f702:	4798      	blx	r3
 800f704:	4603      	mov	r3, r0
 800f706:	74fb      	strb	r3, [r7, #19]
 800f708:	e001      	b.n	800f70e <tcp_input+0x5d6>
 800f70a:	2300      	movs	r3, #0
 800f70c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f70e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f712:	f113 0f0d 	cmn.w	r3, #13
 800f716:	f000 8098 	beq.w	800f84a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f71a:	4b54      	ldr	r3, [pc, #336]	@ (800f86c <tcp_input+0x734>)
 800f71c:	2200      	movs	r2, #0
 800f71e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f720:	69f8      	ldr	r0, [r7, #28]
 800f722:	f000 f915 	bl	800f950 <tcp_input_delayed_close>
 800f726:	4603      	mov	r3, r0
 800f728:	2b00      	cmp	r3, #0
 800f72a:	f040 8090 	bne.w	800f84e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f72e:	4b4d      	ldr	r3, [pc, #308]	@ (800f864 <tcp_input+0x72c>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d041      	beq.n	800f7ba <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f736:	69fb      	ldr	r3, [r7, #28]
 800f738:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d006      	beq.n	800f74c <tcp_input+0x614>
 800f73e:	4b50      	ldr	r3, [pc, #320]	@ (800f880 <tcp_input+0x748>)
 800f740:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f744:	494f      	ldr	r1, [pc, #316]	@ (800f884 <tcp_input+0x74c>)
 800f746:	4850      	ldr	r0, [pc, #320]	@ (800f888 <tcp_input+0x750>)
 800f748:	f007 f900 	bl	801694c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f74c:	69fb      	ldr	r3, [r7, #28]
 800f74e:	8b5b      	ldrh	r3, [r3, #26]
 800f750:	f003 0310 	and.w	r3, r3, #16
 800f754:	2b00      	cmp	r3, #0
 800f756:	d008      	beq.n	800f76a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f758:	4b42      	ldr	r3, [pc, #264]	@ (800f864 <tcp_input+0x72c>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7fd fbe3 	bl	800cf28 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f762:	69f8      	ldr	r0, [r7, #28]
 800f764:	f7fe f9d0 	bl	800db08 <tcp_abort>
            goto aborted;
 800f768:	e091      	b.n	800f88e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f770:	2b00      	cmp	r3, #0
 800f772:	d00c      	beq.n	800f78e <tcp_input+0x656>
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f77a:	69fb      	ldr	r3, [r7, #28]
 800f77c:	6918      	ldr	r0, [r3, #16]
 800f77e:	4b39      	ldr	r3, [pc, #228]	@ (800f864 <tcp_input+0x72c>)
 800f780:	681a      	ldr	r2, [r3, #0]
 800f782:	2300      	movs	r3, #0
 800f784:	69f9      	ldr	r1, [r7, #28]
 800f786:	47a0      	blx	r4
 800f788:	4603      	mov	r3, r0
 800f78a:	74fb      	strb	r3, [r7, #19]
 800f78c:	e008      	b.n	800f7a0 <tcp_input+0x668>
 800f78e:	4b35      	ldr	r3, [pc, #212]	@ (800f864 <tcp_input+0x72c>)
 800f790:	681a      	ldr	r2, [r3, #0]
 800f792:	2300      	movs	r3, #0
 800f794:	69f9      	ldr	r1, [r7, #28]
 800f796:	2000      	movs	r0, #0
 800f798:	f7ff f890 	bl	800e8bc <tcp_recv_null>
 800f79c:	4603      	mov	r3, r0
 800f79e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f7a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7a4:	f113 0f0d 	cmn.w	r3, #13
 800f7a8:	d053      	beq.n	800f852 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f7aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d003      	beq.n	800f7ba <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f7b2:	4b2c      	ldr	r3, [pc, #176]	@ (800f864 <tcp_input+0x72c>)
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	69fb      	ldr	r3, [r7, #28]
 800f7b8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f7ba:	4b2b      	ldr	r3, [pc, #172]	@ (800f868 <tcp_input+0x730>)
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	f003 0320 	and.w	r3, r3, #32
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d030      	beq.n	800f828 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d009      	beq.n	800f7e2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f7d2:	7b5a      	ldrb	r2, [r3, #13]
 800f7d4:	69fb      	ldr	r3, [r7, #28]
 800f7d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f7d8:	f042 0220 	orr.w	r2, r2, #32
 800f7dc:	b2d2      	uxtb	r2, r2
 800f7de:	735a      	strb	r2, [r3, #13]
 800f7e0:	e022      	b.n	800f828 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f7e2:	69fb      	ldr	r3, [r7, #28]
 800f7e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7e6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f7ea:	d005      	beq.n	800f7f8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f7ec:	69fb      	ldr	r3, [r7, #28]
 800f7ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	b29a      	uxth	r2, r3
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f7f8:	69fb      	ldr	r3, [r7, #28]
 800f7fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d00b      	beq.n	800f81a <tcp_input+0x6e2>
 800f802:	69fb      	ldr	r3, [r7, #28]
 800f804:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	6918      	ldr	r0, [r3, #16]
 800f80c:	2300      	movs	r3, #0
 800f80e:	2200      	movs	r2, #0
 800f810:	69f9      	ldr	r1, [r7, #28]
 800f812:	47a0      	blx	r4
 800f814:	4603      	mov	r3, r0
 800f816:	74fb      	strb	r3, [r7, #19]
 800f818:	e001      	b.n	800f81e <tcp_input+0x6e6>
 800f81a:	2300      	movs	r3, #0
 800f81c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f81e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f822:	f113 0f0d 	cmn.w	r3, #13
 800f826:	d016      	beq.n	800f856 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f828:	4b13      	ldr	r3, [pc, #76]	@ (800f878 <tcp_input+0x740>)
 800f82a:	2200      	movs	r2, #0
 800f82c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f82e:	69f8      	ldr	r0, [r7, #28]
 800f830:	f000 f88e 	bl	800f950 <tcp_input_delayed_close>
 800f834:	4603      	mov	r3, r0
 800f836:	2b00      	cmp	r3, #0
 800f838:	d128      	bne.n	800f88c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f83a:	69f8      	ldr	r0, [r7, #28]
 800f83c:	f002 ff1a 	bl	8012674 <tcp_output>
 800f840:	e025      	b.n	800f88e <tcp_input+0x756>
        goto aborted;
 800f842:	bf00      	nop
 800f844:	e023      	b.n	800f88e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f846:	bf00      	nop
 800f848:	e021      	b.n	800f88e <tcp_input+0x756>
              goto aborted;
 800f84a:	bf00      	nop
 800f84c:	e01f      	b.n	800f88e <tcp_input+0x756>
          goto aborted;
 800f84e:	bf00      	nop
 800f850:	e01d      	b.n	800f88e <tcp_input+0x756>
            goto aborted;
 800f852:	bf00      	nop
 800f854:	e01b      	b.n	800f88e <tcp_input+0x756>
              goto aborted;
 800f856:	bf00      	nop
 800f858:	e019      	b.n	800f88e <tcp_input+0x756>
 800f85a:	bf00      	nop
 800f85c:	2000f2c8 	.word	0x2000f2c8
 800f860:	2000f2d8 	.word	0x2000f2d8
 800f864:	2000f2f8 	.word	0x2000f2f8
 800f868:	2000f2f5 	.word	0x2000f2f5
 800f86c:	2000f2f0 	.word	0x2000f2f0
 800f870:	2000f2f4 	.word	0x2000f2f4
 800f874:	2000f2f2 	.word	0x2000f2f2
 800f878:	2000f2fc 	.word	0x2000f2fc
 800f87c:	2000f2bc 	.word	0x2000f2bc
 800f880:	08019618 	.word	0x08019618
 800f884:	080197cc 	.word	0x080197cc
 800f888:	08019664 	.word	0x08019664
          goto aborted;
 800f88c:	bf00      	nop
    tcp_input_pcb = NULL;
 800f88e:	4b27      	ldr	r3, [pc, #156]	@ (800f92c <tcp_input+0x7f4>)
 800f890:	2200      	movs	r2, #0
 800f892:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f894:	4b26      	ldr	r3, [pc, #152]	@ (800f930 <tcp_input+0x7f8>)
 800f896:	2200      	movs	r2, #0
 800f898:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f89a:	4b26      	ldr	r3, [pc, #152]	@ (800f934 <tcp_input+0x7fc>)
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d03f      	beq.n	800f922 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f8a2:	4b24      	ldr	r3, [pc, #144]	@ (800f934 <tcp_input+0x7fc>)
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7fd fb3e 	bl	800cf28 <pbuf_free>
      inseg.p = NULL;
 800f8ac:	4b21      	ldr	r3, [pc, #132]	@ (800f934 <tcp_input+0x7fc>)
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f8b2:	e036      	b.n	800f922 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f8b4:	4b20      	ldr	r3, [pc, #128]	@ (800f938 <tcp_input+0x800>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	899b      	ldrh	r3, [r3, #12]
 800f8ba:	b29b      	uxth	r3, r3
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7fb ff41 	bl	800b744 <lwip_htons>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	f003 0304 	and.w	r3, r3, #4
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d118      	bne.n	800f900 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8ce:	4b1b      	ldr	r3, [pc, #108]	@ (800f93c <tcp_input+0x804>)
 800f8d0:	6819      	ldr	r1, [r3, #0]
 800f8d2:	4b1b      	ldr	r3, [pc, #108]	@ (800f940 <tcp_input+0x808>)
 800f8d4:	881b      	ldrh	r3, [r3, #0]
 800f8d6:	461a      	mov	r2, r3
 800f8d8:	4b1a      	ldr	r3, [pc, #104]	@ (800f944 <tcp_input+0x80c>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8de:	4b16      	ldr	r3, [pc, #88]	@ (800f938 <tcp_input+0x800>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8e2:	885b      	ldrh	r3, [r3, #2]
 800f8e4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8e6:	4a14      	ldr	r2, [pc, #80]	@ (800f938 <tcp_input+0x800>)
 800f8e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8ea:	8812      	ldrh	r2, [r2, #0]
 800f8ec:	b292      	uxth	r2, r2
 800f8ee:	9202      	str	r2, [sp, #8]
 800f8f0:	9301      	str	r3, [sp, #4]
 800f8f2:	4b15      	ldr	r3, [pc, #84]	@ (800f948 <tcp_input+0x810>)
 800f8f4:	9300      	str	r3, [sp, #0]
 800f8f6:	4b15      	ldr	r3, [pc, #84]	@ (800f94c <tcp_input+0x814>)
 800f8f8:	4602      	mov	r2, r0
 800f8fa:	2000      	movs	r0, #0
 800f8fc:	f003 fc6e 	bl	80131dc <tcp_rst>
    pbuf_free(p);
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f7fd fb11 	bl	800cf28 <pbuf_free>
  return;
 800f906:	e00c      	b.n	800f922 <tcp_input+0x7ea>
    goto dropped;
 800f908:	bf00      	nop
 800f90a:	e006      	b.n	800f91a <tcp_input+0x7e2>
    goto dropped;
 800f90c:	bf00      	nop
 800f90e:	e004      	b.n	800f91a <tcp_input+0x7e2>
    goto dropped;
 800f910:	bf00      	nop
 800f912:	e002      	b.n	800f91a <tcp_input+0x7e2>
      goto dropped;
 800f914:	bf00      	nop
 800f916:	e000      	b.n	800f91a <tcp_input+0x7e2>
      goto dropped;
 800f918:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f7fd fb04 	bl	800cf28 <pbuf_free>
 800f920:	e000      	b.n	800f924 <tcp_input+0x7ec>
  return;
 800f922:	bf00      	nop
}
 800f924:	3724      	adds	r7, #36	@ 0x24
 800f926:	46bd      	mov	sp, r7
 800f928:	bd90      	pop	{r4, r7, pc}
 800f92a:	bf00      	nop
 800f92c:	2000f2fc 	.word	0x2000f2fc
 800f930:	2000f2f8 	.word	0x2000f2f8
 800f934:	2000f2c8 	.word	0x2000f2c8
 800f938:	2000f2d8 	.word	0x2000f2d8
 800f93c:	2000f2ec 	.word	0x2000f2ec
 800f940:	2000f2f2 	.word	0x2000f2f2
 800f944:	2000f2e8 	.word	0x2000f2e8
 800f948:	200099ac 	.word	0x200099ac
 800f94c:	200099b0 	.word	0x200099b0

0800f950 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d106      	bne.n	800f96c <tcp_input_delayed_close+0x1c>
 800f95e:	4b17      	ldr	r3, [pc, #92]	@ (800f9bc <tcp_input_delayed_close+0x6c>)
 800f960:	f240 225a 	movw	r2, #602	@ 0x25a
 800f964:	4916      	ldr	r1, [pc, #88]	@ (800f9c0 <tcp_input_delayed_close+0x70>)
 800f966:	4817      	ldr	r0, [pc, #92]	@ (800f9c4 <tcp_input_delayed_close+0x74>)
 800f968:	f006 fff0 	bl	801694c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f96c:	4b16      	ldr	r3, [pc, #88]	@ (800f9c8 <tcp_input_delayed_close+0x78>)
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	f003 0310 	and.w	r3, r3, #16
 800f974:	2b00      	cmp	r3, #0
 800f976:	d01c      	beq.n	800f9b2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	8b5b      	ldrh	r3, [r3, #26]
 800f97c:	f003 0310 	and.w	r3, r3, #16
 800f980:	2b00      	cmp	r3, #0
 800f982:	d10d      	bne.n	800f9a0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d008      	beq.n	800f9a0 <tcp_input_delayed_close+0x50>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	6912      	ldr	r2, [r2, #16]
 800f998:	f06f 010e 	mvn.w	r1, #14
 800f99c:	4610      	mov	r0, r2
 800f99e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f9a0:	6879      	ldr	r1, [r7, #4]
 800f9a2:	480a      	ldr	r0, [pc, #40]	@ (800f9cc <tcp_input_delayed_close+0x7c>)
 800f9a4:	f7ff fa50 	bl	800ee48 <tcp_pcb_remove>
    tcp_free(pcb);
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f7fd fd69 	bl	800d480 <tcp_free>
    return 1;
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	e000      	b.n	800f9b4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f9b2:	2300      	movs	r3, #0
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3708      	adds	r7, #8
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	08019618 	.word	0x08019618
 800f9c0:	080197e8 	.word	0x080197e8
 800f9c4:	08019664 	.word	0x08019664
 800f9c8:	2000f2f5 	.word	0x2000f2f5
 800f9cc:	2000f2bc 	.word	0x2000f2bc

0800f9d0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f9d0:	b590      	push	{r4, r7, lr}
 800f9d2:	b08b      	sub	sp, #44	@ 0x2c
 800f9d4:	af04      	add	r7, sp, #16
 800f9d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f9d8:	4b6f      	ldr	r3, [pc, #444]	@ (800fb98 <tcp_listen_input+0x1c8>)
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	f003 0304 	and.w	r3, r3, #4
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	f040 80d2 	bne.w	800fb8a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d106      	bne.n	800f9fa <tcp_listen_input+0x2a>
 800f9ec:	4b6b      	ldr	r3, [pc, #428]	@ (800fb9c <tcp_listen_input+0x1cc>)
 800f9ee:	f240 2281 	movw	r2, #641	@ 0x281
 800f9f2:	496b      	ldr	r1, [pc, #428]	@ (800fba0 <tcp_listen_input+0x1d0>)
 800f9f4:	486b      	ldr	r0, [pc, #428]	@ (800fba4 <tcp_listen_input+0x1d4>)
 800f9f6:	f006 ffa9 	bl	801694c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f9fa:	4b67      	ldr	r3, [pc, #412]	@ (800fb98 <tcp_listen_input+0x1c8>)
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	f003 0310 	and.w	r3, r3, #16
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d019      	beq.n	800fa3a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa06:	4b68      	ldr	r3, [pc, #416]	@ (800fba8 <tcp_listen_input+0x1d8>)
 800fa08:	6819      	ldr	r1, [r3, #0]
 800fa0a:	4b68      	ldr	r3, [pc, #416]	@ (800fbac <tcp_listen_input+0x1dc>)
 800fa0c:	881b      	ldrh	r3, [r3, #0]
 800fa0e:	461a      	mov	r2, r3
 800fa10:	4b67      	ldr	r3, [pc, #412]	@ (800fbb0 <tcp_listen_input+0x1e0>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa16:	4b67      	ldr	r3, [pc, #412]	@ (800fbb4 <tcp_listen_input+0x1e4>)
 800fa18:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa1a:	885b      	ldrh	r3, [r3, #2]
 800fa1c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa1e:	4a65      	ldr	r2, [pc, #404]	@ (800fbb4 <tcp_listen_input+0x1e4>)
 800fa20:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa22:	8812      	ldrh	r2, [r2, #0]
 800fa24:	b292      	uxth	r2, r2
 800fa26:	9202      	str	r2, [sp, #8]
 800fa28:	9301      	str	r3, [sp, #4]
 800fa2a:	4b63      	ldr	r3, [pc, #396]	@ (800fbb8 <tcp_listen_input+0x1e8>)
 800fa2c:	9300      	str	r3, [sp, #0]
 800fa2e:	4b63      	ldr	r3, [pc, #396]	@ (800fbbc <tcp_listen_input+0x1ec>)
 800fa30:	4602      	mov	r2, r0
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f003 fbd2 	bl	80131dc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fa38:	e0a9      	b.n	800fb8e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fa3a:	4b57      	ldr	r3, [pc, #348]	@ (800fb98 <tcp_listen_input+0x1c8>)
 800fa3c:	781b      	ldrb	r3, [r3, #0]
 800fa3e:	f003 0302 	and.w	r3, r3, #2
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	f000 80a3 	beq.w	800fb8e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	7d5b      	ldrb	r3, [r3, #21]
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f7ff f859 	bl	800eb04 <tcp_alloc>
 800fa52:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d111      	bne.n	800fa7e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	699b      	ldr	r3, [r3, #24]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d00a      	beq.n	800fa78 <tcp_listen_input+0xa8>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	699b      	ldr	r3, [r3, #24]
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	6910      	ldr	r0, [r2, #16]
 800fa6a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa6e:	2100      	movs	r1, #0
 800fa70:	4798      	blx	r3
 800fa72:	4603      	mov	r3, r0
 800fa74:	73bb      	strb	r3, [r7, #14]
      return;
 800fa76:	e08b      	b.n	800fb90 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fa78:	23f0      	movs	r3, #240	@ 0xf0
 800fa7a:	73bb      	strb	r3, [r7, #14]
      return;
 800fa7c:	e088      	b.n	800fb90 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fa7e:	4b50      	ldr	r3, [pc, #320]	@ (800fbc0 <tcp_listen_input+0x1f0>)
 800fa80:	695a      	ldr	r2, [r3, #20]
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fa86:	4b4e      	ldr	r3, [pc, #312]	@ (800fbc0 <tcp_listen_input+0x1f0>)
 800fa88:	691a      	ldr	r2, [r3, #16]
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	8ada      	ldrh	r2, [r3, #22]
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fa96:	4b47      	ldr	r3, [pc, #284]	@ (800fbb4 <tcp_listen_input+0x1e4>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	881b      	ldrh	r3, [r3, #0]
 800fa9c:	b29a      	uxth	r2, r3
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	2203      	movs	r2, #3
 800faa6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800faa8:	4b41      	ldr	r3, [pc, #260]	@ (800fbb0 <tcp_listen_input+0x1e0>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	1c5a      	adds	r2, r3, #1
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800faba:	6978      	ldr	r0, [r7, #20]
 800fabc:	f7ff fa58 	bl	800ef70 <tcp_next_iss>
 800fac0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	693a      	ldr	r2, [r7, #16]
 800fac6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	693a      	ldr	r2, [r7, #16]
 800facc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	693a      	ldr	r2, [r7, #16]
 800fad2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	693a      	ldr	r2, [r7, #16]
 800fad8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fada:	4b35      	ldr	r3, [pc, #212]	@ (800fbb0 <tcp_listen_input+0x1e0>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	1e5a      	subs	r2, r3, #1
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	691a      	ldr	r2, [r3, #16]
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	687a      	ldr	r2, [r7, #4]
 800faf0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	7a5b      	ldrb	r3, [r3, #9]
 800faf6:	f003 030c 	and.w	r3, r3, #12
 800fafa:	b2da      	uxtb	r2, r3
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	7a1a      	ldrb	r2, [r3, #8]
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fb08:	4b2e      	ldr	r3, [pc, #184]	@ (800fbc4 <tcp_listen_input+0x1f4>)
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	60da      	str	r2, [r3, #12]
 800fb10:	4a2c      	ldr	r2, [pc, #176]	@ (800fbc4 <tcp_listen_input+0x1f4>)
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	6013      	str	r3, [r2, #0]
 800fb16:	f003 fd23 	bl	8013560 <tcp_timer_needed>
 800fb1a:	4b2b      	ldr	r3, [pc, #172]	@ (800fbc8 <tcp_listen_input+0x1f8>)
 800fb1c:	2201      	movs	r2, #1
 800fb1e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fb20:	6978      	ldr	r0, [r7, #20]
 800fb22:	f001 fd8b 	bl	801163c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fb26:	4b23      	ldr	r3, [pc, #140]	@ (800fbb4 <tcp_listen_input+0x1e4>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	89db      	ldrh	r3, [r3, #14]
 800fb2c:	b29a      	uxth	r2, r3
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	3304      	adds	r3, #4
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f005 fa5d 	bl	8015008 <ip4_route>
 800fb4e:	4601      	mov	r1, r0
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	3304      	adds	r3, #4
 800fb54:	461a      	mov	r2, r3
 800fb56:	4620      	mov	r0, r4
 800fb58:	f7ff fa30 	bl	800efbc <tcp_eff_send_mss_netif>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	461a      	mov	r2, r3
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fb64:	2112      	movs	r1, #18
 800fb66:	6978      	ldr	r0, [r7, #20]
 800fb68:	f002 fc96 	bl	8012498 <tcp_enqueue_flags>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fb70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d004      	beq.n	800fb82 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fb78:	2100      	movs	r1, #0
 800fb7a:	6978      	ldr	r0, [r7, #20]
 800fb7c:	f7fd ff06 	bl	800d98c <tcp_abandon>
      return;
 800fb80:	e006      	b.n	800fb90 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fb82:	6978      	ldr	r0, [r7, #20]
 800fb84:	f002 fd76 	bl	8012674 <tcp_output>
  return;
 800fb88:	e001      	b.n	800fb8e <tcp_listen_input+0x1be>
    return;
 800fb8a:	bf00      	nop
 800fb8c:	e000      	b.n	800fb90 <tcp_listen_input+0x1c0>
  return;
 800fb8e:	bf00      	nop
}
 800fb90:	371c      	adds	r7, #28
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd90      	pop	{r4, r7, pc}
 800fb96:	bf00      	nop
 800fb98:	2000f2f4 	.word	0x2000f2f4
 800fb9c:	08019618 	.word	0x08019618
 800fba0:	08019810 	.word	0x08019810
 800fba4:	08019664 	.word	0x08019664
 800fba8:	2000f2ec 	.word	0x2000f2ec
 800fbac:	2000f2f2 	.word	0x2000f2f2
 800fbb0:	2000f2e8 	.word	0x2000f2e8
 800fbb4:	2000f2d8 	.word	0x2000f2d8
 800fbb8:	200099ac 	.word	0x200099ac
 800fbbc:	200099b0 	.word	0x200099b0
 800fbc0:	2000999c 	.word	0x2000999c
 800fbc4:	2000f2bc 	.word	0x2000f2bc
 800fbc8:	2000f2c4 	.word	0x2000f2c4

0800fbcc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b086      	sub	sp, #24
 800fbd0:	af04      	add	r7, sp, #16
 800fbd2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fbd4:	4b2f      	ldr	r3, [pc, #188]	@ (800fc94 <tcp_timewait_input+0xc8>)
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	f003 0304 	and.w	r3, r3, #4
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d153      	bne.n	800fc88 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d106      	bne.n	800fbf4 <tcp_timewait_input+0x28>
 800fbe6:	4b2c      	ldr	r3, [pc, #176]	@ (800fc98 <tcp_timewait_input+0xcc>)
 800fbe8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800fbec:	492b      	ldr	r1, [pc, #172]	@ (800fc9c <tcp_timewait_input+0xd0>)
 800fbee:	482c      	ldr	r0, [pc, #176]	@ (800fca0 <tcp_timewait_input+0xd4>)
 800fbf0:	f006 feac 	bl	801694c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fbf4:	4b27      	ldr	r3, [pc, #156]	@ (800fc94 <tcp_timewait_input+0xc8>)
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	f003 0302 	and.w	r3, r3, #2
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d02a      	beq.n	800fc56 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fc00:	4b28      	ldr	r3, [pc, #160]	@ (800fca4 <tcp_timewait_input+0xd8>)
 800fc02:	681a      	ldr	r2, [r3, #0]
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc08:	1ad3      	subs	r3, r2, r3
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	db2d      	blt.n	800fc6a <tcp_timewait_input+0x9e>
 800fc0e:	4b25      	ldr	r3, [pc, #148]	@ (800fca4 <tcp_timewait_input+0xd8>)
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc16:	6879      	ldr	r1, [r7, #4]
 800fc18:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fc1a:	440b      	add	r3, r1
 800fc1c:	1ad3      	subs	r3, r2, r3
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	dc23      	bgt.n	800fc6a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc22:	4b21      	ldr	r3, [pc, #132]	@ (800fca8 <tcp_timewait_input+0xdc>)
 800fc24:	6819      	ldr	r1, [r3, #0]
 800fc26:	4b21      	ldr	r3, [pc, #132]	@ (800fcac <tcp_timewait_input+0xe0>)
 800fc28:	881b      	ldrh	r3, [r3, #0]
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	4b1d      	ldr	r3, [pc, #116]	@ (800fca4 <tcp_timewait_input+0xd8>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc32:	4b1f      	ldr	r3, [pc, #124]	@ (800fcb0 <tcp_timewait_input+0xe4>)
 800fc34:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc36:	885b      	ldrh	r3, [r3, #2]
 800fc38:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc3a:	4a1d      	ldr	r2, [pc, #116]	@ (800fcb0 <tcp_timewait_input+0xe4>)
 800fc3c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc3e:	8812      	ldrh	r2, [r2, #0]
 800fc40:	b292      	uxth	r2, r2
 800fc42:	9202      	str	r2, [sp, #8]
 800fc44:	9301      	str	r3, [sp, #4]
 800fc46:	4b1b      	ldr	r3, [pc, #108]	@ (800fcb4 <tcp_timewait_input+0xe8>)
 800fc48:	9300      	str	r3, [sp, #0]
 800fc4a:	4b1b      	ldr	r3, [pc, #108]	@ (800fcb8 <tcp_timewait_input+0xec>)
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f003 fac4 	bl	80131dc <tcp_rst>
      return;
 800fc54:	e01b      	b.n	800fc8e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fc56:	4b0f      	ldr	r3, [pc, #60]	@ (800fc94 <tcp_timewait_input+0xc8>)
 800fc58:	781b      	ldrb	r3, [r3, #0]
 800fc5a:	f003 0301 	and.w	r3, r3, #1
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d003      	beq.n	800fc6a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fc62:	4b16      	ldr	r3, [pc, #88]	@ (800fcbc <tcp_timewait_input+0xf0>)
 800fc64:	681a      	ldr	r2, [r3, #0]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fc6a:	4b10      	ldr	r3, [pc, #64]	@ (800fcac <tcp_timewait_input+0xe0>)
 800fc6c:	881b      	ldrh	r3, [r3, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d00c      	beq.n	800fc8c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	8b5b      	ldrh	r3, [r3, #26]
 800fc76:	f043 0302 	orr.w	r3, r3, #2
 800fc7a:	b29a      	uxth	r2, r3
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f002 fcf7 	bl	8012674 <tcp_output>
  }
  return;
 800fc86:	e001      	b.n	800fc8c <tcp_timewait_input+0xc0>
    return;
 800fc88:	bf00      	nop
 800fc8a:	e000      	b.n	800fc8e <tcp_timewait_input+0xc2>
  return;
 800fc8c:	bf00      	nop
}
 800fc8e:	3708      	adds	r7, #8
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}
 800fc94:	2000f2f4 	.word	0x2000f2f4
 800fc98:	08019618 	.word	0x08019618
 800fc9c:	08019830 	.word	0x08019830
 800fca0:	08019664 	.word	0x08019664
 800fca4:	2000f2e8 	.word	0x2000f2e8
 800fca8:	2000f2ec 	.word	0x2000f2ec
 800fcac:	2000f2f2 	.word	0x2000f2f2
 800fcb0:	2000f2d8 	.word	0x2000f2d8
 800fcb4:	200099ac 	.word	0x200099ac
 800fcb8:	200099b0 	.word	0x200099b0
 800fcbc:	2000f2b0 	.word	0x2000f2b0

0800fcc0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fcc0:	b590      	push	{r4, r7, lr}
 800fcc2:	b08d      	sub	sp, #52	@ 0x34
 800fcc4:	af04      	add	r7, sp, #16
 800fcc6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fcc8:	2300      	movs	r3, #0
 800fcca:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fccc:	2300      	movs	r3, #0
 800fcce:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d106      	bne.n	800fce4 <tcp_process+0x24>
 800fcd6:	4b9d      	ldr	r3, [pc, #628]	@ (800ff4c <tcp_process+0x28c>)
 800fcd8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800fcdc:	499c      	ldr	r1, [pc, #624]	@ (800ff50 <tcp_process+0x290>)
 800fcde:	489d      	ldr	r0, [pc, #628]	@ (800ff54 <tcp_process+0x294>)
 800fce0:	f006 fe34 	bl	801694c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fce4:	4b9c      	ldr	r3, [pc, #624]	@ (800ff58 <tcp_process+0x298>)
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	f003 0304 	and.w	r3, r3, #4
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d04e      	beq.n	800fd8e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	7d1b      	ldrb	r3, [r3, #20]
 800fcf4:	2b02      	cmp	r3, #2
 800fcf6:	d108      	bne.n	800fd0a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fcfc:	4b97      	ldr	r3, [pc, #604]	@ (800ff5c <tcp_process+0x29c>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d123      	bne.n	800fd4c <tcp_process+0x8c>
        acceptable = 1;
 800fd04:	2301      	movs	r3, #1
 800fd06:	76fb      	strb	r3, [r7, #27]
 800fd08:	e020      	b.n	800fd4c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd0e:	4b94      	ldr	r3, [pc, #592]	@ (800ff60 <tcp_process+0x2a0>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d102      	bne.n	800fd1c <tcp_process+0x5c>
        acceptable = 1;
 800fd16:	2301      	movs	r3, #1
 800fd18:	76fb      	strb	r3, [r7, #27]
 800fd1a:	e017      	b.n	800fd4c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fd1c:	4b90      	ldr	r3, [pc, #576]	@ (800ff60 <tcp_process+0x2a0>)
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd24:	1ad3      	subs	r3, r2, r3
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	db10      	blt.n	800fd4c <tcp_process+0x8c>
 800fd2a:	4b8d      	ldr	r3, [pc, #564]	@ (800ff60 <tcp_process+0x2a0>)
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd32:	6879      	ldr	r1, [r7, #4]
 800fd34:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fd36:	440b      	add	r3, r1
 800fd38:	1ad3      	subs	r3, r2, r3
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	dc06      	bgt.n	800fd4c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	8b5b      	ldrh	r3, [r3, #26]
 800fd42:	f043 0302 	orr.w	r3, r3, #2
 800fd46:	b29a      	uxth	r2, r3
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fd4c:	7efb      	ldrb	r3, [r7, #27]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d01b      	beq.n	800fd8a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	7d1b      	ldrb	r3, [r3, #20]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d106      	bne.n	800fd68 <tcp_process+0xa8>
 800fd5a:	4b7c      	ldr	r3, [pc, #496]	@ (800ff4c <tcp_process+0x28c>)
 800fd5c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800fd60:	4980      	ldr	r1, [pc, #512]	@ (800ff64 <tcp_process+0x2a4>)
 800fd62:	487c      	ldr	r0, [pc, #496]	@ (800ff54 <tcp_process+0x294>)
 800fd64:	f006 fdf2 	bl	801694c <iprintf>
      recv_flags |= TF_RESET;
 800fd68:	4b7f      	ldr	r3, [pc, #508]	@ (800ff68 <tcp_process+0x2a8>)
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	f043 0308 	orr.w	r3, r3, #8
 800fd70:	b2da      	uxtb	r2, r3
 800fd72:	4b7d      	ldr	r3, [pc, #500]	@ (800ff68 <tcp_process+0x2a8>)
 800fd74:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	8b5b      	ldrh	r3, [r3, #26]
 800fd7a:	f023 0301 	bic.w	r3, r3, #1
 800fd7e:	b29a      	uxth	r2, r3
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fd84:	f06f 030d 	mvn.w	r3, #13
 800fd88:	e37a      	b.n	8010480 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	e378      	b.n	8010480 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fd8e:	4b72      	ldr	r3, [pc, #456]	@ (800ff58 <tcp_process+0x298>)
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	f003 0302 	and.w	r3, r3, #2
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d010      	beq.n	800fdbc <tcp_process+0xfc>
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	7d1b      	ldrb	r3, [r3, #20]
 800fd9e:	2b02      	cmp	r3, #2
 800fda0:	d00c      	beq.n	800fdbc <tcp_process+0xfc>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	7d1b      	ldrb	r3, [r3, #20]
 800fda6:	2b03      	cmp	r3, #3
 800fda8:	d008      	beq.n	800fdbc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	8b5b      	ldrh	r3, [r3, #26]
 800fdae:	f043 0302 	orr.w	r3, r3, #2
 800fdb2:	b29a      	uxth	r2, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	e361      	b.n	8010480 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	8b5b      	ldrh	r3, [r3, #26]
 800fdc0:	f003 0310 	and.w	r3, r3, #16
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d103      	bne.n	800fdd0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fdc8:	4b68      	ldr	r3, [pc, #416]	@ (800ff6c <tcp_process+0x2ac>)
 800fdca:	681a      	ldr	r2, [r3, #0]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2200      	movs	r2, #0
 800fddc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f001 fc2b 	bl	801163c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	7d1b      	ldrb	r3, [r3, #20]
 800fdea:	3b02      	subs	r3, #2
 800fdec:	2b07      	cmp	r3, #7
 800fdee:	f200 8337 	bhi.w	8010460 <tcp_process+0x7a0>
 800fdf2:	a201      	add	r2, pc, #4	@ (adr r2, 800fdf8 <tcp_process+0x138>)
 800fdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdf8:	0800fe19 	.word	0x0800fe19
 800fdfc:	08010049 	.word	0x08010049
 800fe00:	080101c1 	.word	0x080101c1
 800fe04:	080101eb 	.word	0x080101eb
 800fe08:	0801030f 	.word	0x0801030f
 800fe0c:	080101c1 	.word	0x080101c1
 800fe10:	0801039b 	.word	0x0801039b
 800fe14:	0801042b 	.word	0x0801042b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fe18:	4b4f      	ldr	r3, [pc, #316]	@ (800ff58 <tcp_process+0x298>)
 800fe1a:	781b      	ldrb	r3, [r3, #0]
 800fe1c:	f003 0310 	and.w	r3, r3, #16
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	f000 80e4 	beq.w	800ffee <tcp_process+0x32e>
 800fe26:	4b4c      	ldr	r3, [pc, #304]	@ (800ff58 <tcp_process+0x298>)
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	f003 0302 	and.w	r3, r3, #2
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	f000 80dd 	beq.w	800ffee <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe38:	1c5a      	adds	r2, r3, #1
 800fe3a:	4b48      	ldr	r3, [pc, #288]	@ (800ff5c <tcp_process+0x29c>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	f040 80d5 	bne.w	800ffee <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fe44:	4b46      	ldr	r3, [pc, #280]	@ (800ff60 <tcp_process+0x2a0>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	1c5a      	adds	r2, r3, #1
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800fe56:	4b41      	ldr	r3, [pc, #260]	@ (800ff5c <tcp_process+0x29c>)
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fe5e:	4b44      	ldr	r3, [pc, #272]	@ (800ff70 <tcp_process+0x2b0>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	89db      	ldrh	r3, [r3, #14]
 800fe64:	b29a      	uxth	r2, r3
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fe78:	4b39      	ldr	r3, [pc, #228]	@ (800ff60 <tcp_process+0x2a0>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	1e5a      	subs	r2, r3, #1
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2204      	movs	r2, #4
 800fe86:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	3304      	adds	r3, #4
 800fe90:	4618      	mov	r0, r3
 800fe92:	f005 f8b9 	bl	8015008 <ip4_route>
 800fe96:	4601      	mov	r1, r0
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	3304      	adds	r3, #4
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f7ff f88c 	bl	800efbc <tcp_eff_send_mss_netif>
 800fea4:	4603      	mov	r3, r0
 800fea6:	461a      	mov	r2, r3
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800feb0:	009a      	lsls	r2, r3, #2
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800feb6:	005b      	lsls	r3, r3, #1
 800feb8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800febc:	428b      	cmp	r3, r1
 800febe:	bf38      	it	cc
 800fec0:	460b      	movcc	r3, r1
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d204      	bcs.n	800fed0 <tcp_process+0x210>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800feca:	009b      	lsls	r3, r3, #2
 800fecc:	b29b      	uxth	r3, r3
 800fece:	e00d      	b.n	800feec <tcp_process+0x22c>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fed4:	005b      	lsls	r3, r3, #1
 800fed6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800feda:	4293      	cmp	r3, r2
 800fedc:	d904      	bls.n	800fee8 <tcp_process+0x228>
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fee2:	005b      	lsls	r3, r3, #1
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	e001      	b.n	800feec <tcp_process+0x22c>
 800fee8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800feec:	687a      	ldr	r2, [r7, #4]
 800feee:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d106      	bne.n	800ff0a <tcp_process+0x24a>
 800fefc:	4b13      	ldr	r3, [pc, #76]	@ (800ff4c <tcp_process+0x28c>)
 800fefe:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800ff02:	491c      	ldr	r1, [pc, #112]	@ (800ff74 <tcp_process+0x2b4>)
 800ff04:	4813      	ldr	r0, [pc, #76]	@ (800ff54 <tcp_process+0x294>)
 800ff06:	f006 fd21 	bl	801694c <iprintf>
        --pcb->snd_queuelen;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ff10:	3b01      	subs	r3, #1
 800ff12:	b29a      	uxth	r2, r3
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff1e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ff20:	69fb      	ldr	r3, [r7, #28]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d12a      	bne.n	800ff7c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff2a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ff2c:	69fb      	ldr	r3, [r7, #28]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d106      	bne.n	800ff40 <tcp_process+0x280>
 800ff32:	4b06      	ldr	r3, [pc, #24]	@ (800ff4c <tcp_process+0x28c>)
 800ff34:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800ff38:	490f      	ldr	r1, [pc, #60]	@ (800ff78 <tcp_process+0x2b8>)
 800ff3a:	4806      	ldr	r0, [pc, #24]	@ (800ff54 <tcp_process+0x294>)
 800ff3c:	f006 fd06 	bl	801694c <iprintf>
          pcb->unsent = rseg->next;
 800ff40:	69fb      	ldr	r3, [r7, #28]
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ff48:	e01c      	b.n	800ff84 <tcp_process+0x2c4>
 800ff4a:	bf00      	nop
 800ff4c:	08019618 	.word	0x08019618
 800ff50:	08019850 	.word	0x08019850
 800ff54:	08019664 	.word	0x08019664
 800ff58:	2000f2f4 	.word	0x2000f2f4
 800ff5c:	2000f2ec 	.word	0x2000f2ec
 800ff60:	2000f2e8 	.word	0x2000f2e8
 800ff64:	0801986c 	.word	0x0801986c
 800ff68:	2000f2f5 	.word	0x2000f2f5
 800ff6c:	2000f2b0 	.word	0x2000f2b0
 800ff70:	2000f2d8 	.word	0x2000f2d8
 800ff74:	0801988c 	.word	0x0801988c
 800ff78:	080198a4 	.word	0x080198a4
        } else {
          pcb->unacked = rseg->next;
 800ff7c:	69fb      	ldr	r3, [r7, #28]
 800ff7e:	681a      	ldr	r2, [r3, #0]
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800ff84:	69f8      	ldr	r0, [r7, #28]
 800ff86:	f7fe fc54 	bl	800e832 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d104      	bne.n	800ff9c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ff98:	861a      	strh	r2, [r3, #48]	@ 0x30
 800ff9a:	e006      	b.n	800ffaa <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d00a      	beq.n	800ffca <tcp_process+0x30a>
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ffba:	687a      	ldr	r2, [r7, #4]
 800ffbc:	6910      	ldr	r0, [r2, #16]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	6879      	ldr	r1, [r7, #4]
 800ffc2:	4798      	blx	r3
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	76bb      	strb	r3, [r7, #26]
 800ffc8:	e001      	b.n	800ffce <tcp_process+0x30e>
 800ffca:	2300      	movs	r3, #0
 800ffcc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ffce:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ffd2:	f113 0f0d 	cmn.w	r3, #13
 800ffd6:	d102      	bne.n	800ffde <tcp_process+0x31e>
          return ERR_ABRT;
 800ffd8:	f06f 030c 	mvn.w	r3, #12
 800ffdc:	e250      	b.n	8010480 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	8b5b      	ldrh	r3, [r3, #26]
 800ffe2:	f043 0302 	orr.w	r3, r3, #2
 800ffe6:	b29a      	uxth	r2, r3
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ffec:	e23a      	b.n	8010464 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ffee:	4b98      	ldr	r3, [pc, #608]	@ (8010250 <tcp_process+0x590>)
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	f003 0310 	and.w	r3, r3, #16
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	f000 8234 	beq.w	8010464 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fffc:	4b95      	ldr	r3, [pc, #596]	@ (8010254 <tcp_process+0x594>)
 800fffe:	6819      	ldr	r1, [r3, #0]
 8010000:	4b95      	ldr	r3, [pc, #596]	@ (8010258 <tcp_process+0x598>)
 8010002:	881b      	ldrh	r3, [r3, #0]
 8010004:	461a      	mov	r2, r3
 8010006:	4b95      	ldr	r3, [pc, #596]	@ (801025c <tcp_process+0x59c>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801000c:	4b94      	ldr	r3, [pc, #592]	@ (8010260 <tcp_process+0x5a0>)
 801000e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010010:	885b      	ldrh	r3, [r3, #2]
 8010012:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010014:	4a92      	ldr	r2, [pc, #584]	@ (8010260 <tcp_process+0x5a0>)
 8010016:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010018:	8812      	ldrh	r2, [r2, #0]
 801001a:	b292      	uxth	r2, r2
 801001c:	9202      	str	r2, [sp, #8]
 801001e:	9301      	str	r3, [sp, #4]
 8010020:	4b90      	ldr	r3, [pc, #576]	@ (8010264 <tcp_process+0x5a4>)
 8010022:	9300      	str	r3, [sp, #0]
 8010024:	4b90      	ldr	r3, [pc, #576]	@ (8010268 <tcp_process+0x5a8>)
 8010026:	4602      	mov	r2, r0
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f003 f8d7 	bl	80131dc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010034:	2b05      	cmp	r3, #5
 8010036:	f200 8215 	bhi.w	8010464 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2200      	movs	r2, #0
 801003e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f002 fea3 	bl	8012d8c <tcp_rexmit_rto>
      break;
 8010046:	e20d      	b.n	8010464 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010048:	4b81      	ldr	r3, [pc, #516]	@ (8010250 <tcp_process+0x590>)
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	f003 0310 	and.w	r3, r3, #16
 8010050:	2b00      	cmp	r3, #0
 8010052:	f000 80a1 	beq.w	8010198 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010056:	4b7f      	ldr	r3, [pc, #508]	@ (8010254 <tcp_process+0x594>)
 8010058:	681a      	ldr	r2, [r3, #0]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801005e:	1ad3      	subs	r3, r2, r3
 8010060:	3b01      	subs	r3, #1
 8010062:	2b00      	cmp	r3, #0
 8010064:	db7e      	blt.n	8010164 <tcp_process+0x4a4>
 8010066:	4b7b      	ldr	r3, [pc, #492]	@ (8010254 <tcp_process+0x594>)
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801006e:	1ad3      	subs	r3, r2, r3
 8010070:	2b00      	cmp	r3, #0
 8010072:	dc77      	bgt.n	8010164 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2204      	movs	r2, #4
 8010078:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801007e:	2b00      	cmp	r3, #0
 8010080:	d102      	bne.n	8010088 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010082:	23fa      	movs	r3, #250	@ 0xfa
 8010084:	76bb      	strb	r3, [r7, #26]
 8010086:	e01d      	b.n	80100c4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801008c:	699b      	ldr	r3, [r3, #24]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d106      	bne.n	80100a0 <tcp_process+0x3e0>
 8010092:	4b76      	ldr	r3, [pc, #472]	@ (801026c <tcp_process+0x5ac>)
 8010094:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8010098:	4975      	ldr	r1, [pc, #468]	@ (8010270 <tcp_process+0x5b0>)
 801009a:	4876      	ldr	r0, [pc, #472]	@ (8010274 <tcp_process+0x5b4>)
 801009c:	f006 fc56 	bl	801694c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80100a4:	699b      	ldr	r3, [r3, #24]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d00a      	beq.n	80100c0 <tcp_process+0x400>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80100ae:	699b      	ldr	r3, [r3, #24]
 80100b0:	687a      	ldr	r2, [r7, #4]
 80100b2:	6910      	ldr	r0, [r2, #16]
 80100b4:	2200      	movs	r2, #0
 80100b6:	6879      	ldr	r1, [r7, #4]
 80100b8:	4798      	blx	r3
 80100ba:	4603      	mov	r3, r0
 80100bc:	76bb      	strb	r3, [r7, #26]
 80100be:	e001      	b.n	80100c4 <tcp_process+0x404>
 80100c0:	23f0      	movs	r3, #240	@ 0xf0
 80100c2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80100c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d00a      	beq.n	80100e2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80100cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80100d0:	f113 0f0d 	cmn.w	r3, #13
 80100d4:	d002      	beq.n	80100dc <tcp_process+0x41c>
              tcp_abort(pcb);
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f7fd fd16 	bl	800db08 <tcp_abort>
            }
            return ERR_ABRT;
 80100dc:	f06f 030c 	mvn.w	r3, #12
 80100e0:	e1ce      	b.n	8010480 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f000 fae0 	bl	80106a8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80100e8:	4b63      	ldr	r3, [pc, #396]	@ (8010278 <tcp_process+0x5b8>)
 80100ea:	881b      	ldrh	r3, [r3, #0]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d005      	beq.n	80100fc <tcp_process+0x43c>
            recv_acked--;
 80100f0:	4b61      	ldr	r3, [pc, #388]	@ (8010278 <tcp_process+0x5b8>)
 80100f2:	881b      	ldrh	r3, [r3, #0]
 80100f4:	3b01      	subs	r3, #1
 80100f6:	b29a      	uxth	r2, r3
 80100f8:	4b5f      	ldr	r3, [pc, #380]	@ (8010278 <tcp_process+0x5b8>)
 80100fa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010100:	009a      	lsls	r2, r3, #2
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010106:	005b      	lsls	r3, r3, #1
 8010108:	f241 111c 	movw	r1, #4380	@ 0x111c
 801010c:	428b      	cmp	r3, r1
 801010e:	bf38      	it	cc
 8010110:	460b      	movcc	r3, r1
 8010112:	429a      	cmp	r2, r3
 8010114:	d204      	bcs.n	8010120 <tcp_process+0x460>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801011a:	009b      	lsls	r3, r3, #2
 801011c:	b29b      	uxth	r3, r3
 801011e:	e00d      	b.n	801013c <tcp_process+0x47c>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010124:	005b      	lsls	r3, r3, #1
 8010126:	f241 121c 	movw	r2, #4380	@ 0x111c
 801012a:	4293      	cmp	r3, r2
 801012c:	d904      	bls.n	8010138 <tcp_process+0x478>
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010132:	005b      	lsls	r3, r3, #1
 8010134:	b29b      	uxth	r3, r3
 8010136:	e001      	b.n	801013c <tcp_process+0x47c>
 8010138:	f241 131c 	movw	r3, #4380	@ 0x111c
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010142:	4b4e      	ldr	r3, [pc, #312]	@ (801027c <tcp_process+0x5bc>)
 8010144:	781b      	ldrb	r3, [r3, #0]
 8010146:	f003 0320 	and.w	r3, r3, #32
 801014a:	2b00      	cmp	r3, #0
 801014c:	d037      	beq.n	80101be <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	8b5b      	ldrh	r3, [r3, #26]
 8010152:	f043 0302 	orr.w	r3, r3, #2
 8010156:	b29a      	uxth	r2, r3
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	2207      	movs	r2, #7
 8010160:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010162:	e02c      	b.n	80101be <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010164:	4b3b      	ldr	r3, [pc, #236]	@ (8010254 <tcp_process+0x594>)
 8010166:	6819      	ldr	r1, [r3, #0]
 8010168:	4b3b      	ldr	r3, [pc, #236]	@ (8010258 <tcp_process+0x598>)
 801016a:	881b      	ldrh	r3, [r3, #0]
 801016c:	461a      	mov	r2, r3
 801016e:	4b3b      	ldr	r3, [pc, #236]	@ (801025c <tcp_process+0x59c>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010174:	4b3a      	ldr	r3, [pc, #232]	@ (8010260 <tcp_process+0x5a0>)
 8010176:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010178:	885b      	ldrh	r3, [r3, #2]
 801017a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801017c:	4a38      	ldr	r2, [pc, #224]	@ (8010260 <tcp_process+0x5a0>)
 801017e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010180:	8812      	ldrh	r2, [r2, #0]
 8010182:	b292      	uxth	r2, r2
 8010184:	9202      	str	r2, [sp, #8]
 8010186:	9301      	str	r3, [sp, #4]
 8010188:	4b36      	ldr	r3, [pc, #216]	@ (8010264 <tcp_process+0x5a4>)
 801018a:	9300      	str	r3, [sp, #0]
 801018c:	4b36      	ldr	r3, [pc, #216]	@ (8010268 <tcp_process+0x5a8>)
 801018e:	4602      	mov	r2, r0
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f003 f823 	bl	80131dc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010196:	e167      	b.n	8010468 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010198:	4b2d      	ldr	r3, [pc, #180]	@ (8010250 <tcp_process+0x590>)
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	f003 0302 	and.w	r3, r3, #2
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	f000 8161 	beq.w	8010468 <tcp_process+0x7a8>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101aa:	1e5a      	subs	r2, r3, #1
 80101ac:	4b2b      	ldr	r3, [pc, #172]	@ (801025c <tcp_process+0x59c>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	f040 8159 	bne.w	8010468 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f002 fe0a 	bl	8012dd0 <tcp_rexmit>
      break;
 80101bc:	e154      	b.n	8010468 <tcp_process+0x7a8>
 80101be:	e153      	b.n	8010468 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f000 fa71 	bl	80106a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80101c6:	4b2d      	ldr	r3, [pc, #180]	@ (801027c <tcp_process+0x5bc>)
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	f003 0320 	and.w	r3, r3, #32
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	f000 814c 	beq.w	801046c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	8b5b      	ldrh	r3, [r3, #26]
 80101d8:	f043 0302 	orr.w	r3, r3, #2
 80101dc:	b29a      	uxth	r2, r3
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	2207      	movs	r2, #7
 80101e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80101e8:	e140      	b.n	801046c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f000 fa5c 	bl	80106a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80101f0:	4b22      	ldr	r3, [pc, #136]	@ (801027c <tcp_process+0x5bc>)
 80101f2:	781b      	ldrb	r3, [r3, #0]
 80101f4:	f003 0320 	and.w	r3, r3, #32
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d071      	beq.n	80102e0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80101fc:	4b14      	ldr	r3, [pc, #80]	@ (8010250 <tcp_process+0x590>)
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	f003 0310 	and.w	r3, r3, #16
 8010204:	2b00      	cmp	r3, #0
 8010206:	d060      	beq.n	80102ca <tcp_process+0x60a>
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801020c:	4b11      	ldr	r3, [pc, #68]	@ (8010254 <tcp_process+0x594>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	429a      	cmp	r2, r3
 8010212:	d15a      	bne.n	80102ca <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010218:	2b00      	cmp	r3, #0
 801021a:	d156      	bne.n	80102ca <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	8b5b      	ldrh	r3, [r3, #26]
 8010220:	f043 0302 	orr.w	r3, r3, #2
 8010224:	b29a      	uxth	r2, r3
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f7fe fdbc 	bl	800eda8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010230:	4b13      	ldr	r3, [pc, #76]	@ (8010280 <tcp_process+0x5c0>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	429a      	cmp	r2, r3
 8010238:	d105      	bne.n	8010246 <tcp_process+0x586>
 801023a:	4b11      	ldr	r3, [pc, #68]	@ (8010280 <tcp_process+0x5c0>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	4a0f      	ldr	r2, [pc, #60]	@ (8010280 <tcp_process+0x5c0>)
 8010242:	6013      	str	r3, [r2, #0]
 8010244:	e02e      	b.n	80102a4 <tcp_process+0x5e4>
 8010246:	4b0e      	ldr	r3, [pc, #56]	@ (8010280 <tcp_process+0x5c0>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	617b      	str	r3, [r7, #20]
 801024c:	e027      	b.n	801029e <tcp_process+0x5de>
 801024e:	bf00      	nop
 8010250:	2000f2f4 	.word	0x2000f2f4
 8010254:	2000f2ec 	.word	0x2000f2ec
 8010258:	2000f2f2 	.word	0x2000f2f2
 801025c:	2000f2e8 	.word	0x2000f2e8
 8010260:	2000f2d8 	.word	0x2000f2d8
 8010264:	200099ac 	.word	0x200099ac
 8010268:	200099b0 	.word	0x200099b0
 801026c:	08019618 	.word	0x08019618
 8010270:	080198b8 	.word	0x080198b8
 8010274:	08019664 	.word	0x08019664
 8010278:	2000f2f0 	.word	0x2000f2f0
 801027c:	2000f2f5 	.word	0x2000f2f5
 8010280:	2000f2bc 	.word	0x2000f2bc
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	68db      	ldr	r3, [r3, #12]
 8010288:	687a      	ldr	r2, [r7, #4]
 801028a:	429a      	cmp	r2, r3
 801028c:	d104      	bne.n	8010298 <tcp_process+0x5d8>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	68da      	ldr	r2, [r3, #12]
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	60da      	str	r2, [r3, #12]
 8010296:	e005      	b.n	80102a4 <tcp_process+0x5e4>
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	68db      	ldr	r3, [r3, #12]
 801029c:	617b      	str	r3, [r7, #20]
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d1ef      	bne.n	8010284 <tcp_process+0x5c4>
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2200      	movs	r2, #0
 80102a8:	60da      	str	r2, [r3, #12]
 80102aa:	4b77      	ldr	r3, [pc, #476]	@ (8010488 <tcp_process+0x7c8>)
 80102ac:	2201      	movs	r2, #1
 80102ae:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	220a      	movs	r2, #10
 80102b4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80102b6:	4b75      	ldr	r3, [pc, #468]	@ (801048c <tcp_process+0x7cc>)
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	60da      	str	r2, [r3, #12]
 80102be:	4a73      	ldr	r2, [pc, #460]	@ (801048c <tcp_process+0x7cc>)
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6013      	str	r3, [r2, #0]
 80102c4:	f003 f94c 	bl	8013560 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80102c8:	e0d2      	b.n	8010470 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	8b5b      	ldrh	r3, [r3, #26]
 80102ce:	f043 0302 	orr.w	r3, r3, #2
 80102d2:	b29a      	uxth	r2, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2208      	movs	r2, #8
 80102dc:	751a      	strb	r2, [r3, #20]
      break;
 80102de:	e0c7      	b.n	8010470 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102e0:	4b6b      	ldr	r3, [pc, #428]	@ (8010490 <tcp_process+0x7d0>)
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	f003 0310 	and.w	r3, r3, #16
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	f000 80c1 	beq.w	8010470 <tcp_process+0x7b0>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102f2:	4b68      	ldr	r3, [pc, #416]	@ (8010494 <tcp_process+0x7d4>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	f040 80ba 	bne.w	8010470 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010300:	2b00      	cmp	r3, #0
 8010302:	f040 80b5 	bne.w	8010470 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2206      	movs	r2, #6
 801030a:	751a      	strb	r2, [r3, #20]
      break;
 801030c:	e0b0      	b.n	8010470 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f000 f9ca 	bl	80106a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010314:	4b60      	ldr	r3, [pc, #384]	@ (8010498 <tcp_process+0x7d8>)
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	f003 0320 	and.w	r3, r3, #32
 801031c:	2b00      	cmp	r3, #0
 801031e:	f000 80a9 	beq.w	8010474 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	8b5b      	ldrh	r3, [r3, #26]
 8010326:	f043 0302 	orr.w	r3, r3, #2
 801032a:	b29a      	uxth	r2, r3
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f7fe fd39 	bl	800eda8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010336:	4b59      	ldr	r3, [pc, #356]	@ (801049c <tcp_process+0x7dc>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	687a      	ldr	r2, [r7, #4]
 801033c:	429a      	cmp	r2, r3
 801033e:	d105      	bne.n	801034c <tcp_process+0x68c>
 8010340:	4b56      	ldr	r3, [pc, #344]	@ (801049c <tcp_process+0x7dc>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	68db      	ldr	r3, [r3, #12]
 8010346:	4a55      	ldr	r2, [pc, #340]	@ (801049c <tcp_process+0x7dc>)
 8010348:	6013      	str	r3, [r2, #0]
 801034a:	e013      	b.n	8010374 <tcp_process+0x6b4>
 801034c:	4b53      	ldr	r3, [pc, #332]	@ (801049c <tcp_process+0x7dc>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	613b      	str	r3, [r7, #16]
 8010352:	e00c      	b.n	801036e <tcp_process+0x6ae>
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	68db      	ldr	r3, [r3, #12]
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	429a      	cmp	r2, r3
 801035c:	d104      	bne.n	8010368 <tcp_process+0x6a8>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	68da      	ldr	r2, [r3, #12]
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	60da      	str	r2, [r3, #12]
 8010366:	e005      	b.n	8010374 <tcp_process+0x6b4>
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	68db      	ldr	r3, [r3, #12]
 801036c:	613b      	str	r3, [r7, #16]
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d1ef      	bne.n	8010354 <tcp_process+0x694>
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2200      	movs	r2, #0
 8010378:	60da      	str	r2, [r3, #12]
 801037a:	4b43      	ldr	r3, [pc, #268]	@ (8010488 <tcp_process+0x7c8>)
 801037c:	2201      	movs	r2, #1
 801037e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	220a      	movs	r2, #10
 8010384:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010386:	4b41      	ldr	r3, [pc, #260]	@ (801048c <tcp_process+0x7cc>)
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	60da      	str	r2, [r3, #12]
 801038e:	4a3f      	ldr	r2, [pc, #252]	@ (801048c <tcp_process+0x7cc>)
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6013      	str	r3, [r2, #0]
 8010394:	f003 f8e4 	bl	8013560 <tcp_timer_needed>
      }
      break;
 8010398:	e06c      	b.n	8010474 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f000 f984 	bl	80106a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80103a0:	4b3b      	ldr	r3, [pc, #236]	@ (8010490 <tcp_process+0x7d0>)
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	f003 0310 	and.w	r3, r3, #16
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d065      	beq.n	8010478 <tcp_process+0x7b8>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80103b0:	4b38      	ldr	r3, [pc, #224]	@ (8010494 <tcp_process+0x7d4>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d15f      	bne.n	8010478 <tcp_process+0x7b8>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d15b      	bne.n	8010478 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f7fe fcf1 	bl	800eda8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80103c6:	4b35      	ldr	r3, [pc, #212]	@ (801049c <tcp_process+0x7dc>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	687a      	ldr	r2, [r7, #4]
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d105      	bne.n	80103dc <tcp_process+0x71c>
 80103d0:	4b32      	ldr	r3, [pc, #200]	@ (801049c <tcp_process+0x7dc>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	68db      	ldr	r3, [r3, #12]
 80103d6:	4a31      	ldr	r2, [pc, #196]	@ (801049c <tcp_process+0x7dc>)
 80103d8:	6013      	str	r3, [r2, #0]
 80103da:	e013      	b.n	8010404 <tcp_process+0x744>
 80103dc:	4b2f      	ldr	r3, [pc, #188]	@ (801049c <tcp_process+0x7dc>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	60fb      	str	r3, [r7, #12]
 80103e2:	e00c      	b.n	80103fe <tcp_process+0x73e>
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	68db      	ldr	r3, [r3, #12]
 80103e8:	687a      	ldr	r2, [r7, #4]
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d104      	bne.n	80103f8 <tcp_process+0x738>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	68da      	ldr	r2, [r3, #12]
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	60da      	str	r2, [r3, #12]
 80103f6:	e005      	b.n	8010404 <tcp_process+0x744>
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	68db      	ldr	r3, [r3, #12]
 80103fc:	60fb      	str	r3, [r7, #12]
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d1ef      	bne.n	80103e4 <tcp_process+0x724>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2200      	movs	r2, #0
 8010408:	60da      	str	r2, [r3, #12]
 801040a:	4b1f      	ldr	r3, [pc, #124]	@ (8010488 <tcp_process+0x7c8>)
 801040c:	2201      	movs	r2, #1
 801040e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	220a      	movs	r2, #10
 8010414:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010416:	4b1d      	ldr	r3, [pc, #116]	@ (801048c <tcp_process+0x7cc>)
 8010418:	681a      	ldr	r2, [r3, #0]
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	60da      	str	r2, [r3, #12]
 801041e:	4a1b      	ldr	r2, [pc, #108]	@ (801048c <tcp_process+0x7cc>)
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6013      	str	r3, [r2, #0]
 8010424:	f003 f89c 	bl	8013560 <tcp_timer_needed>
      }
      break;
 8010428:	e026      	b.n	8010478 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 f93c 	bl	80106a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010430:	4b17      	ldr	r3, [pc, #92]	@ (8010490 <tcp_process+0x7d0>)
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	f003 0310 	and.w	r3, r3, #16
 8010438:	2b00      	cmp	r3, #0
 801043a:	d01f      	beq.n	801047c <tcp_process+0x7bc>
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010440:	4b14      	ldr	r3, [pc, #80]	@ (8010494 <tcp_process+0x7d4>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	429a      	cmp	r2, r3
 8010446:	d119      	bne.n	801047c <tcp_process+0x7bc>
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801044c:	2b00      	cmp	r3, #0
 801044e:	d115      	bne.n	801047c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010450:	4b11      	ldr	r3, [pc, #68]	@ (8010498 <tcp_process+0x7d8>)
 8010452:	781b      	ldrb	r3, [r3, #0]
 8010454:	f043 0310 	orr.w	r3, r3, #16
 8010458:	b2da      	uxtb	r2, r3
 801045a:	4b0f      	ldr	r3, [pc, #60]	@ (8010498 <tcp_process+0x7d8>)
 801045c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801045e:	e00d      	b.n	801047c <tcp_process+0x7bc>
    default:
      break;
 8010460:	bf00      	nop
 8010462:	e00c      	b.n	801047e <tcp_process+0x7be>
      break;
 8010464:	bf00      	nop
 8010466:	e00a      	b.n	801047e <tcp_process+0x7be>
      break;
 8010468:	bf00      	nop
 801046a:	e008      	b.n	801047e <tcp_process+0x7be>
      break;
 801046c:	bf00      	nop
 801046e:	e006      	b.n	801047e <tcp_process+0x7be>
      break;
 8010470:	bf00      	nop
 8010472:	e004      	b.n	801047e <tcp_process+0x7be>
      break;
 8010474:	bf00      	nop
 8010476:	e002      	b.n	801047e <tcp_process+0x7be>
      break;
 8010478:	bf00      	nop
 801047a:	e000      	b.n	801047e <tcp_process+0x7be>
      break;
 801047c:	bf00      	nop
  }
  return ERR_OK;
 801047e:	2300      	movs	r3, #0
}
 8010480:	4618      	mov	r0, r3
 8010482:	3724      	adds	r7, #36	@ 0x24
 8010484:	46bd      	mov	sp, r7
 8010486:	bd90      	pop	{r4, r7, pc}
 8010488:	2000f2c4 	.word	0x2000f2c4
 801048c:	2000f2c0 	.word	0x2000f2c0
 8010490:	2000f2f4 	.word	0x2000f2f4
 8010494:	2000f2ec 	.word	0x2000f2ec
 8010498:	2000f2f5 	.word	0x2000f2f5
 801049c:	2000f2bc 	.word	0x2000f2bc

080104a0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80104a0:	b590      	push	{r4, r7, lr}
 80104a2:	b085      	sub	sp, #20
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d106      	bne.n	80104be <tcp_oos_insert_segment+0x1e>
 80104b0:	4b3b      	ldr	r3, [pc, #236]	@ (80105a0 <tcp_oos_insert_segment+0x100>)
 80104b2:	f240 421f 	movw	r2, #1055	@ 0x41f
 80104b6:	493b      	ldr	r1, [pc, #236]	@ (80105a4 <tcp_oos_insert_segment+0x104>)
 80104b8:	483b      	ldr	r0, [pc, #236]	@ (80105a8 <tcp_oos_insert_segment+0x108>)
 80104ba:	f006 fa47 	bl	801694c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	68db      	ldr	r3, [r3, #12]
 80104c2:	899b      	ldrh	r3, [r3, #12]
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7fb f93c 	bl	800b744 <lwip_htons>
 80104cc:	4603      	mov	r3, r0
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	f003 0301 	and.w	r3, r3, #1
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d028      	beq.n	801052a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80104d8:	6838      	ldr	r0, [r7, #0]
 80104da:	f7fe f995 	bl	800e808 <tcp_segs_free>
    next = NULL;
 80104de:	2300      	movs	r3, #0
 80104e0:	603b      	str	r3, [r7, #0]
 80104e2:	e056      	b.n	8010592 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	68db      	ldr	r3, [r3, #12]
 80104e8:	899b      	ldrh	r3, [r3, #12]
 80104ea:	b29b      	uxth	r3, r3
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7fb f929 	bl	800b744 <lwip_htons>
 80104f2:	4603      	mov	r3, r0
 80104f4:	b2db      	uxtb	r3, r3
 80104f6:	f003 0301 	and.w	r3, r3, #1
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d00d      	beq.n	801051a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	68db      	ldr	r3, [r3, #12]
 8010502:	899b      	ldrh	r3, [r3, #12]
 8010504:	b29c      	uxth	r4, r3
 8010506:	2001      	movs	r0, #1
 8010508:	f7fb f91c 	bl	800b744 <lwip_htons>
 801050c:	4603      	mov	r3, r0
 801050e:	461a      	mov	r2, r3
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	68db      	ldr	r3, [r3, #12]
 8010514:	4322      	orrs	r2, r4
 8010516:	b292      	uxth	r2, r2
 8010518:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010524:	68f8      	ldr	r0, [r7, #12]
 8010526:	f7fe f984 	bl	800e832 <tcp_seg_free>
    while (next &&
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d00e      	beq.n	801054e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	891b      	ldrh	r3, [r3, #8]
 8010534:	461a      	mov	r2, r3
 8010536:	4b1d      	ldr	r3, [pc, #116]	@ (80105ac <tcp_oos_insert_segment+0x10c>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	441a      	add	r2, r3
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	68db      	ldr	r3, [r3, #12]
 8010540:	685b      	ldr	r3, [r3, #4]
 8010542:	6839      	ldr	r1, [r7, #0]
 8010544:	8909      	ldrh	r1, [r1, #8]
 8010546:	440b      	add	r3, r1
 8010548:	1ad3      	subs	r3, r2, r3
    while (next &&
 801054a:	2b00      	cmp	r3, #0
 801054c:	daca      	bge.n	80104e4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d01e      	beq.n	8010592 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	891b      	ldrh	r3, [r3, #8]
 8010558:	461a      	mov	r2, r3
 801055a:	4b14      	ldr	r3, [pc, #80]	@ (80105ac <tcp_oos_insert_segment+0x10c>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	441a      	add	r2, r3
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	68db      	ldr	r3, [r3, #12]
 8010564:	685b      	ldr	r3, [r3, #4]
 8010566:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010568:	2b00      	cmp	r3, #0
 801056a:	dd12      	ble.n	8010592 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	68db      	ldr	r3, [r3, #12]
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	b29a      	uxth	r2, r3
 8010574:	4b0d      	ldr	r3, [pc, #52]	@ (80105ac <tcp_oos_insert_segment+0x10c>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	b29b      	uxth	r3, r3
 801057a:	1ad3      	subs	r3, r2, r3
 801057c:	b29a      	uxth	r2, r3
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	685a      	ldr	r2, [r3, #4]
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	891b      	ldrh	r3, [r3, #8]
 801058a:	4619      	mov	r1, r3
 801058c:	4610      	mov	r0, r2
 801058e:	f7fc fb45 	bl	800cc1c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	683a      	ldr	r2, [r7, #0]
 8010596:	601a      	str	r2, [r3, #0]
}
 8010598:	bf00      	nop
 801059a:	3714      	adds	r7, #20
 801059c:	46bd      	mov	sp, r7
 801059e:	bd90      	pop	{r4, r7, pc}
 80105a0:	08019618 	.word	0x08019618
 80105a4:	080198d8 	.word	0x080198d8
 80105a8:	08019664 	.word	0x08019664
 80105ac:	2000f2e8 	.word	0x2000f2e8

080105b0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80105b0:	b5b0      	push	{r4, r5, r7, lr}
 80105b2:	b086      	sub	sp, #24
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	60f8      	str	r0, [r7, #12]
 80105b8:	60b9      	str	r1, [r7, #8]
 80105ba:	607a      	str	r2, [r7, #4]
 80105bc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80105be:	e03e      	b.n	801063e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7fc fd38 	bl	800d044 <pbuf_clen>
 80105d4:	4603      	mov	r3, r0
 80105d6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80105de:	8a7a      	ldrh	r2, [r7, #18]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d906      	bls.n	80105f2 <tcp_free_acked_segments+0x42>
 80105e4:	4b2a      	ldr	r3, [pc, #168]	@ (8010690 <tcp_free_acked_segments+0xe0>)
 80105e6:	f240 4257 	movw	r2, #1111	@ 0x457
 80105ea:	492a      	ldr	r1, [pc, #168]	@ (8010694 <tcp_free_acked_segments+0xe4>)
 80105ec:	482a      	ldr	r0, [pc, #168]	@ (8010698 <tcp_free_acked_segments+0xe8>)
 80105ee:	f006 f9ad 	bl	801694c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80105f8:	8a7b      	ldrh	r3, [r7, #18]
 80105fa:	1ad3      	subs	r3, r2, r3
 80105fc:	b29a      	uxth	r2, r3
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	891a      	ldrh	r2, [r3, #8]
 8010608:	4b24      	ldr	r3, [pc, #144]	@ (801069c <tcp_free_acked_segments+0xec>)
 801060a:	881b      	ldrh	r3, [r3, #0]
 801060c:	4413      	add	r3, r2
 801060e:	b29a      	uxth	r2, r3
 8010610:	4b22      	ldr	r3, [pc, #136]	@ (801069c <tcp_free_acked_segments+0xec>)
 8010612:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010614:	6978      	ldr	r0, [r7, #20]
 8010616:	f7fe f90c 	bl	800e832 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010620:	2b00      	cmp	r3, #0
 8010622:	d00c      	beq.n	801063e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d109      	bne.n	801063e <tcp_free_acked_segments+0x8e>
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d106      	bne.n	801063e <tcp_free_acked_segments+0x8e>
 8010630:	4b17      	ldr	r3, [pc, #92]	@ (8010690 <tcp_free_acked_segments+0xe0>)
 8010632:	f240 4261 	movw	r2, #1121	@ 0x461
 8010636:	491a      	ldr	r1, [pc, #104]	@ (80106a0 <tcp_free_acked_segments+0xf0>)
 8010638:	4817      	ldr	r0, [pc, #92]	@ (8010698 <tcp_free_acked_segments+0xe8>)
 801063a:	f006 f987 	bl	801694c <iprintf>
  while (seg_list != NULL &&
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d020      	beq.n	8010686 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	4618      	mov	r0, r3
 801064c:	f7fb f88f 	bl	800b76e <lwip_htonl>
 8010650:	4604      	mov	r4, r0
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	891b      	ldrh	r3, [r3, #8]
 8010656:	461d      	mov	r5, r3
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	68db      	ldr	r3, [r3, #12]
 801065c:	899b      	ldrh	r3, [r3, #12]
 801065e:	b29b      	uxth	r3, r3
 8010660:	4618      	mov	r0, r3
 8010662:	f7fb f86f 	bl	800b744 <lwip_htons>
 8010666:	4603      	mov	r3, r0
 8010668:	b2db      	uxtb	r3, r3
 801066a:	f003 0303 	and.w	r3, r3, #3
 801066e:	2b00      	cmp	r3, #0
 8010670:	d001      	beq.n	8010676 <tcp_free_acked_segments+0xc6>
 8010672:	2301      	movs	r3, #1
 8010674:	e000      	b.n	8010678 <tcp_free_acked_segments+0xc8>
 8010676:	2300      	movs	r3, #0
 8010678:	442b      	add	r3, r5
 801067a:	18e2      	adds	r2, r4, r3
 801067c:	4b09      	ldr	r3, [pc, #36]	@ (80106a4 <tcp_free_acked_segments+0xf4>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010682:	2b00      	cmp	r3, #0
 8010684:	dd9c      	ble.n	80105c0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010686:	68bb      	ldr	r3, [r7, #8]
}
 8010688:	4618      	mov	r0, r3
 801068a:	3718      	adds	r7, #24
 801068c:	46bd      	mov	sp, r7
 801068e:	bdb0      	pop	{r4, r5, r7, pc}
 8010690:	08019618 	.word	0x08019618
 8010694:	08019900 	.word	0x08019900
 8010698:	08019664 	.word	0x08019664
 801069c:	2000f2f0 	.word	0x2000f2f0
 80106a0:	08019928 	.word	0x08019928
 80106a4:	2000f2ec 	.word	0x2000f2ec

080106a8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80106a8:	b5b0      	push	{r4, r5, r7, lr}
 80106aa:	b094      	sub	sp, #80	@ 0x50
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80106b0:	2300      	movs	r3, #0
 80106b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d106      	bne.n	80106c8 <tcp_receive+0x20>
 80106ba:	4b91      	ldr	r3, [pc, #580]	@ (8010900 <tcp_receive+0x258>)
 80106bc:	f240 427b 	movw	r2, #1147	@ 0x47b
 80106c0:	4990      	ldr	r1, [pc, #576]	@ (8010904 <tcp_receive+0x25c>)
 80106c2:	4891      	ldr	r0, [pc, #580]	@ (8010908 <tcp_receive+0x260>)
 80106c4:	f006 f942 	bl	801694c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	7d1b      	ldrb	r3, [r3, #20]
 80106cc:	2b03      	cmp	r3, #3
 80106ce:	d806      	bhi.n	80106de <tcp_receive+0x36>
 80106d0:	4b8b      	ldr	r3, [pc, #556]	@ (8010900 <tcp_receive+0x258>)
 80106d2:	f240 427c 	movw	r2, #1148	@ 0x47c
 80106d6:	498d      	ldr	r1, [pc, #564]	@ (801090c <tcp_receive+0x264>)
 80106d8:	488b      	ldr	r0, [pc, #556]	@ (8010908 <tcp_receive+0x260>)
 80106da:	f006 f937 	bl	801694c <iprintf>

  if (flags & TCP_ACK) {
 80106de:	4b8c      	ldr	r3, [pc, #560]	@ (8010910 <tcp_receive+0x268>)
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	f003 0310 	and.w	r3, r3, #16
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	f000 8264 	beq.w	8010bb4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80106f2:	461a      	mov	r2, r3
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80106f8:	4413      	add	r3, r2
 80106fa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010700:	4b84      	ldr	r3, [pc, #528]	@ (8010914 <tcp_receive+0x26c>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	1ad3      	subs	r3, r2, r3
 8010706:	2b00      	cmp	r3, #0
 8010708:	db1b      	blt.n	8010742 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801070e:	4b81      	ldr	r3, [pc, #516]	@ (8010914 <tcp_receive+0x26c>)
 8010710:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010712:	429a      	cmp	r2, r3
 8010714:	d106      	bne.n	8010724 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801071a:	4b7f      	ldr	r3, [pc, #508]	@ (8010918 <tcp_receive+0x270>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	1ad3      	subs	r3, r2, r3
 8010720:	2b00      	cmp	r3, #0
 8010722:	db0e      	blt.n	8010742 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010728:	4b7b      	ldr	r3, [pc, #492]	@ (8010918 <tcp_receive+0x270>)
 801072a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801072c:	429a      	cmp	r2, r3
 801072e:	d125      	bne.n	801077c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010730:	4b7a      	ldr	r3, [pc, #488]	@ (801091c <tcp_receive+0x274>)
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	89db      	ldrh	r3, [r3, #14]
 8010736:	b29a      	uxth	r2, r3
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801073e:	429a      	cmp	r2, r3
 8010740:	d91c      	bls.n	801077c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010742:	4b76      	ldr	r3, [pc, #472]	@ (801091c <tcp_receive+0x274>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	89db      	ldrh	r3, [r3, #14]
 8010748:	b29a      	uxth	r2, r3
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801075c:	429a      	cmp	r2, r3
 801075e:	d205      	bcs.n	801076c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801076c:	4b69      	ldr	r3, [pc, #420]	@ (8010914 <tcp_receive+0x26c>)
 801076e:	681a      	ldr	r2, [r3, #0]
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8010774:	4b68      	ldr	r3, [pc, #416]	@ (8010918 <tcp_receive+0x270>)
 8010776:	681a      	ldr	r2, [r3, #0]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801077c:	4b66      	ldr	r3, [pc, #408]	@ (8010918 <tcp_receive+0x270>)
 801077e:	681a      	ldr	r2, [r3, #0]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010784:	1ad3      	subs	r3, r2, r3
 8010786:	2b00      	cmp	r3, #0
 8010788:	dc58      	bgt.n	801083c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801078a:	4b65      	ldr	r3, [pc, #404]	@ (8010920 <tcp_receive+0x278>)
 801078c:	881b      	ldrh	r3, [r3, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d14b      	bne.n	801082a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010796:	687a      	ldr	r2, [r7, #4]
 8010798:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801079c:	4413      	add	r3, r2
 801079e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d142      	bne.n	801082a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	db3d      	blt.n	801082a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80107b2:	4b59      	ldr	r3, [pc, #356]	@ (8010918 <tcp_receive+0x270>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d137      	bne.n	801082a <tcp_receive+0x182>
              found_dupack = 1;
 80107ba:	2301      	movs	r3, #1
 80107bc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80107c4:	2bff      	cmp	r3, #255	@ 0xff
 80107c6:	d007      	beq.n	80107d8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80107ce:	3301      	adds	r3, #1
 80107d0:	b2da      	uxtb	r2, r3
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80107de:	2b03      	cmp	r3, #3
 80107e0:	d91b      	bls.n	801081a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80107ec:	4413      	add	r3, r2
 80107ee:	b29a      	uxth	r2, r3
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d30a      	bcc.n	8010810 <tcp_receive+0x168>
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010804:	4413      	add	r3, r2
 8010806:	b29a      	uxth	r2, r3
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801080e:	e004      	b.n	801081a <tcp_receive+0x172>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010816:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010820:	2b02      	cmp	r3, #2
 8010822:	d902      	bls.n	801082a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f002 fb3f 	bl	8012ea8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801082a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801082c:	2b00      	cmp	r3, #0
 801082e:	f040 8161 	bne.w	8010af4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2200      	movs	r2, #0
 8010836:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801083a:	e15b      	b.n	8010af4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801083c:	4b36      	ldr	r3, [pc, #216]	@ (8010918 <tcp_receive+0x270>)
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010844:	1ad3      	subs	r3, r2, r3
 8010846:	3b01      	subs	r3, #1
 8010848:	2b00      	cmp	r3, #0
 801084a:	f2c0 814e 	blt.w	8010aea <tcp_receive+0x442>
 801084e:	4b32      	ldr	r3, [pc, #200]	@ (8010918 <tcp_receive+0x270>)
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010856:	1ad3      	subs	r3, r2, r3
 8010858:	2b00      	cmp	r3, #0
 801085a:	f300 8146 	bgt.w	8010aea <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	8b5b      	ldrh	r3, [r3, #26]
 8010862:	f003 0304 	and.w	r3, r3, #4
 8010866:	2b00      	cmp	r3, #0
 8010868:	d010      	beq.n	801088c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	8b5b      	ldrh	r3, [r3, #26]
 801086e:	f023 0304 	bic.w	r3, r3, #4
 8010872:	b29a      	uxth	r2, r3
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2200      	movs	r2, #0
 8010888:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2200      	movs	r2, #0
 8010890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801089a:	10db      	asrs	r3, r3, #3
 801089c:	b21b      	sxth	r3, r3
 801089e:	b29a      	uxth	r2, r3
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80108a6:	b29b      	uxth	r3, r3
 80108a8:	4413      	add	r3, r2
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	b21a      	sxth	r2, r3
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80108b4:	4b18      	ldr	r3, [pc, #96]	@ (8010918 <tcp_receive+0x270>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	b29a      	uxth	r2, r3
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108be:	b29b      	uxth	r3, r3
 80108c0:	1ad3      	subs	r3, r2, r3
 80108c2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2200      	movs	r2, #0
 80108c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80108cc:	4b12      	ldr	r3, [pc, #72]	@ (8010918 <tcp_receive+0x270>)
 80108ce:	681a      	ldr	r2, [r3, #0]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	7d1b      	ldrb	r3, [r3, #20]
 80108d8:	2b03      	cmp	r3, #3
 80108da:	f240 8097 	bls.w	8010a0c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d245      	bcs.n	801097a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	8b5b      	ldrh	r3, [r3, #26]
 80108f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d014      	beq.n	8010924 <tcp_receive+0x27c>
 80108fa:	2301      	movs	r3, #1
 80108fc:	e013      	b.n	8010926 <tcp_receive+0x27e>
 80108fe:	bf00      	nop
 8010900:	08019618 	.word	0x08019618
 8010904:	08019948 	.word	0x08019948
 8010908:	08019664 	.word	0x08019664
 801090c:	08019964 	.word	0x08019964
 8010910:	2000f2f4 	.word	0x2000f2f4
 8010914:	2000f2e8 	.word	0x2000f2e8
 8010918:	2000f2ec 	.word	0x2000f2ec
 801091c:	2000f2d8 	.word	0x2000f2d8
 8010920:	2000f2f2 	.word	0x2000f2f2
 8010924:	2302      	movs	r3, #2
 8010926:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801092a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801092e:	b29a      	uxth	r2, r3
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010934:	fb12 f303 	smulbb	r3, r2, r3
 8010938:	b29b      	uxth	r3, r3
 801093a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801093c:	4293      	cmp	r3, r2
 801093e:	bf28      	it	cs
 8010940:	4613      	movcs	r3, r2
 8010942:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801094a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801094c:	4413      	add	r3, r2
 801094e:	b29a      	uxth	r2, r3
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010956:	429a      	cmp	r2, r3
 8010958:	d309      	bcc.n	801096e <tcp_receive+0x2c6>
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010960:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010962:	4413      	add	r3, r2
 8010964:	b29a      	uxth	r2, r3
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801096c:	e04e      	b.n	8010a0c <tcp_receive+0x364>
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010974:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010978:	e048      	b.n	8010a0c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010980:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010982:	4413      	add	r3, r2
 8010984:	b29a      	uxth	r2, r3
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801098c:	429a      	cmp	r2, r3
 801098e:	d309      	bcc.n	80109a4 <tcp_receive+0x2fc>
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010996:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010998:	4413      	add	r3, r2
 801099a:	b29a      	uxth	r2, r3
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80109a2:	e004      	b.n	80109ae <tcp_receive+0x306>
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80109aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80109ba:	429a      	cmp	r2, r3
 80109bc:	d326      	bcc.n	8010a0c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80109ca:	1ad3      	subs	r3, r2, r3
 80109cc:	b29a      	uxth	r2, r3
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109de:	4413      	add	r3, r2
 80109e0:	b29a      	uxth	r2, r3
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d30a      	bcc.n	8010a02 <tcp_receive+0x35a>
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109f6:	4413      	add	r3, r2
 80109f8:	b29a      	uxth	r2, r3
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010a00:	e004      	b.n	8010a0c <tcp_receive+0x364>
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010a08:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a14:	4a98      	ldr	r2, [pc, #608]	@ (8010c78 <tcp_receive+0x5d0>)
 8010a16:	6878      	ldr	r0, [r7, #4]
 8010a18:	f7ff fdca 	bl	80105b0 <tcp_free_acked_segments>
 8010a1c:	4602      	mov	r2, r0
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a2a:	4a94      	ldr	r2, [pc, #592]	@ (8010c7c <tcp_receive+0x5d4>)
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f7ff fdbf 	bl	80105b0 <tcp_free_acked_segments>
 8010a32:	4602      	mov	r2, r0
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d104      	bne.n	8010a4a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010a46:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010a48:	e002      	b.n	8010a50 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2200      	movs	r2, #0
 8010a54:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d103      	bne.n	8010a66 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2200      	movs	r2, #0
 8010a62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010a6c:	4b84      	ldr	r3, [pc, #528]	@ (8010c80 <tcp_receive+0x5d8>)
 8010a6e:	881b      	ldrh	r3, [r3, #0]
 8010a70:	4413      	add	r3, r2
 8010a72:	b29a      	uxth	r2, r3
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	8b5b      	ldrh	r3, [r3, #26]
 8010a7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d035      	beq.n	8010af2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d118      	bne.n	8010ac0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d00c      	beq.n	8010ab0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a9e:	68db      	ldr	r3, [r3, #12]
 8010aa0:	685b      	ldr	r3, [r3, #4]
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7fa fe63 	bl	800b76e <lwip_htonl>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	dc20      	bgt.n	8010af2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	8b5b      	ldrh	r3, [r3, #26]
 8010ab4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010ab8:	b29a      	uxth	r2, r3
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010abe:	e018      	b.n	8010af2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ac8:	68db      	ldr	r3, [r3, #12]
 8010aca:	685b      	ldr	r3, [r3, #4]
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7fa fe4e 	bl	800b76e <lwip_htonl>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	1ae3      	subs	r3, r4, r3
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	dc0b      	bgt.n	8010af2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	8b5b      	ldrh	r3, [r3, #26]
 8010ade:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010ae2:	b29a      	uxth	r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ae8:	e003      	b.n	8010af2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	f002 fbc8 	bl	8013280 <tcp_send_empty_ack>
 8010af0:	e000      	b.n	8010af4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010af2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d05b      	beq.n	8010bb4 <tcp_receive+0x50c>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010b00:	4b60      	ldr	r3, [pc, #384]	@ (8010c84 <tcp_receive+0x5dc>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	1ad3      	subs	r3, r2, r3
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	da54      	bge.n	8010bb4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010b0a:	4b5f      	ldr	r3, [pc, #380]	@ (8010c88 <tcp_receive+0x5e0>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	b29a      	uxth	r2, r3
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	1ad3      	subs	r3, r2, r3
 8010b18:	b29b      	uxth	r3, r3
 8010b1a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010b1e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010b28:	10db      	asrs	r3, r3, #3
 8010b2a:	b21b      	sxth	r3, r3
 8010b2c:	b29b      	uxth	r3, r3
 8010b2e:	1ad3      	subs	r3, r2, r3
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010b3c:	b29a      	uxth	r2, r3
 8010b3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010b42:	4413      	add	r3, r2
 8010b44:	b29b      	uxth	r3, r3
 8010b46:	b21a      	sxth	r2, r3
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8010b4c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	da05      	bge.n	8010b60 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010b54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010b58:	425b      	negs	r3, r3
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010b60:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010b6a:	109b      	asrs	r3, r3, #2
 8010b6c:	b21b      	sxth	r3, r3
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	1ad3      	subs	r3, r2, r3
 8010b72:	b29b      	uxth	r3, r3
 8010b74:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010b7e:	b29a      	uxth	r2, r3
 8010b80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010b84:	4413      	add	r3, r2
 8010b86:	b29b      	uxth	r3, r3
 8010b88:	b21a      	sxth	r2, r3
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010b94:	10db      	asrs	r3, r3, #3
 8010b96:	b21b      	sxth	r3, r3
 8010b98:	b29a      	uxth	r2, r3
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	4413      	add	r3, r2
 8010ba4:	b29b      	uxth	r3, r3
 8010ba6:	b21a      	sxth	r2, r3
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010bb4:	4b35      	ldr	r3, [pc, #212]	@ (8010c8c <tcp_receive+0x5e4>)
 8010bb6:	881b      	ldrh	r3, [r3, #0]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	f000 84df 	beq.w	801157c <tcp_receive+0xed4>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	7d1b      	ldrb	r3, [r3, #20]
 8010bc2:	2b06      	cmp	r3, #6
 8010bc4:	f200 84da 	bhi.w	801157c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010bcc:	4b30      	ldr	r3, [pc, #192]	@ (8010c90 <tcp_receive+0x5e8>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	1ad3      	subs	r3, r2, r3
 8010bd2:	3b01      	subs	r3, #1
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	f2c0 808f 	blt.w	8010cf8 <tcp_receive+0x650>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010bde:	4b2b      	ldr	r3, [pc, #172]	@ (8010c8c <tcp_receive+0x5e4>)
 8010be0:	881b      	ldrh	r3, [r3, #0]
 8010be2:	4619      	mov	r1, r3
 8010be4:	4b2a      	ldr	r3, [pc, #168]	@ (8010c90 <tcp_receive+0x5e8>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	440b      	add	r3, r1
 8010bea:	1ad3      	subs	r3, r2, r3
 8010bec:	3301      	adds	r3, #1
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	f300 8082 	bgt.w	8010cf8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010bf4:	4b27      	ldr	r3, [pc, #156]	@ (8010c94 <tcp_receive+0x5ec>)
 8010bf6:	685b      	ldr	r3, [r3, #4]
 8010bf8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010bfe:	4b24      	ldr	r3, [pc, #144]	@ (8010c90 <tcp_receive+0x5e8>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	1ad3      	subs	r3, r2, r3
 8010c04:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010c06:	4b23      	ldr	r3, [pc, #140]	@ (8010c94 <tcp_receive+0x5ec>)
 8010c08:	685b      	ldr	r3, [r3, #4]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d106      	bne.n	8010c1c <tcp_receive+0x574>
 8010c0e:	4b22      	ldr	r3, [pc, #136]	@ (8010c98 <tcp_receive+0x5f0>)
 8010c10:	f240 5294 	movw	r2, #1428	@ 0x594
 8010c14:	4921      	ldr	r1, [pc, #132]	@ (8010c9c <tcp_receive+0x5f4>)
 8010c16:	4822      	ldr	r0, [pc, #136]	@ (8010ca0 <tcp_receive+0x5f8>)
 8010c18:	f005 fe98 	bl	801694c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c1e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010c22:	4293      	cmp	r3, r2
 8010c24:	d906      	bls.n	8010c34 <tcp_receive+0x58c>
 8010c26:	4b1c      	ldr	r3, [pc, #112]	@ (8010c98 <tcp_receive+0x5f0>)
 8010c28:	f240 5295 	movw	r2, #1429	@ 0x595
 8010c2c:	491d      	ldr	r1, [pc, #116]	@ (8010ca4 <tcp_receive+0x5fc>)
 8010c2e:	481c      	ldr	r0, [pc, #112]	@ (8010ca0 <tcp_receive+0x5f8>)
 8010c30:	f005 fe8c 	bl	801694c <iprintf>
      off = (u16_t)off32;
 8010c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c36:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010c3a:	4b16      	ldr	r3, [pc, #88]	@ (8010c94 <tcp_receive+0x5ec>)
 8010c3c:	685b      	ldr	r3, [r3, #4]
 8010c3e:	891b      	ldrh	r3, [r3, #8]
 8010c40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010c44:	429a      	cmp	r2, r3
 8010c46:	d906      	bls.n	8010c56 <tcp_receive+0x5ae>
 8010c48:	4b13      	ldr	r3, [pc, #76]	@ (8010c98 <tcp_receive+0x5f0>)
 8010c4a:	f240 5297 	movw	r2, #1431	@ 0x597
 8010c4e:	4916      	ldr	r1, [pc, #88]	@ (8010ca8 <tcp_receive+0x600>)
 8010c50:	4813      	ldr	r0, [pc, #76]	@ (8010ca0 <tcp_receive+0x5f8>)
 8010c52:	f005 fe7b 	bl	801694c <iprintf>
      inseg.len -= off;
 8010c56:	4b0f      	ldr	r3, [pc, #60]	@ (8010c94 <tcp_receive+0x5ec>)
 8010c58:	891a      	ldrh	r2, [r3, #8]
 8010c5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010c5e:	1ad3      	subs	r3, r2, r3
 8010c60:	b29a      	uxth	r2, r3
 8010c62:	4b0c      	ldr	r3, [pc, #48]	@ (8010c94 <tcp_receive+0x5ec>)
 8010c64:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010c66:	4b0b      	ldr	r3, [pc, #44]	@ (8010c94 <tcp_receive+0x5ec>)
 8010c68:	685b      	ldr	r3, [r3, #4]
 8010c6a:	891a      	ldrh	r2, [r3, #8]
 8010c6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010c70:	1ad3      	subs	r3, r2, r3
 8010c72:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8010c74:	e02a      	b.n	8010ccc <tcp_receive+0x624>
 8010c76:	bf00      	nop
 8010c78:	08019980 	.word	0x08019980
 8010c7c:	08019988 	.word	0x08019988
 8010c80:	2000f2f0 	.word	0x2000f2f0
 8010c84:	2000f2ec 	.word	0x2000f2ec
 8010c88:	2000f2b0 	.word	0x2000f2b0
 8010c8c:	2000f2f2 	.word	0x2000f2f2
 8010c90:	2000f2e8 	.word	0x2000f2e8
 8010c94:	2000f2c8 	.word	0x2000f2c8
 8010c98:	08019618 	.word	0x08019618
 8010c9c:	08019990 	.word	0x08019990
 8010ca0:	08019664 	.word	0x08019664
 8010ca4:	080199a0 	.word	0x080199a0
 8010ca8:	080199b0 	.word	0x080199b0
        off -= p->len;
 8010cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010cae:	895b      	ldrh	r3, [r3, #10]
 8010cb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010cb4:	1ad3      	subs	r3, r2, r3
 8010cb6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010cbc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010cbe:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8010ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010cce:	895b      	ldrh	r3, [r3, #10]
 8010cd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d8e9      	bhi.n	8010cac <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010cd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010cdc:	4619      	mov	r1, r3
 8010cde:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010ce0:	f7fc f89c 	bl	800ce1c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ce8:	4a90      	ldr	r2, [pc, #576]	@ (8010f2c <tcp_receive+0x884>)
 8010cea:	6013      	str	r3, [r2, #0]
 8010cec:	4b90      	ldr	r3, [pc, #576]	@ (8010f30 <tcp_receive+0x888>)
 8010cee:	68db      	ldr	r3, [r3, #12]
 8010cf0:	4a8e      	ldr	r2, [pc, #568]	@ (8010f2c <tcp_receive+0x884>)
 8010cf2:	6812      	ldr	r2, [r2, #0]
 8010cf4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010cf6:	e00d      	b.n	8010d14 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010cf8:	4b8c      	ldr	r3, [pc, #560]	@ (8010f2c <tcp_receive+0x884>)
 8010cfa:	681a      	ldr	r2, [r3, #0]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d00:	1ad3      	subs	r3, r2, r3
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	da06      	bge.n	8010d14 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	8b5b      	ldrh	r3, [r3, #26]
 8010d0a:	f043 0302 	orr.w	r3, r3, #2
 8010d0e:	b29a      	uxth	r2, r3
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010d14:	4b85      	ldr	r3, [pc, #532]	@ (8010f2c <tcp_receive+0x884>)
 8010d16:	681a      	ldr	r2, [r3, #0]
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d1c:	1ad3      	subs	r3, r2, r3
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	f2c0 8427 	blt.w	8011572 <tcp_receive+0xeca>
 8010d24:	4b81      	ldr	r3, [pc, #516]	@ (8010f2c <tcp_receive+0x884>)
 8010d26:	681a      	ldr	r2, [r3, #0]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d2c:	6879      	ldr	r1, [r7, #4]
 8010d2e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010d30:	440b      	add	r3, r1
 8010d32:	1ad3      	subs	r3, r2, r3
 8010d34:	3301      	adds	r3, #1
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	f300 841b 	bgt.w	8011572 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010d40:	4b7a      	ldr	r3, [pc, #488]	@ (8010f2c <tcp_receive+0x884>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	429a      	cmp	r2, r3
 8010d46:	f040 8298 	bne.w	801127a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010d4a:	4b79      	ldr	r3, [pc, #484]	@ (8010f30 <tcp_receive+0x888>)
 8010d4c:	891c      	ldrh	r4, [r3, #8]
 8010d4e:	4b78      	ldr	r3, [pc, #480]	@ (8010f30 <tcp_receive+0x888>)
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	899b      	ldrh	r3, [r3, #12]
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7fa fcf4 	bl	800b744 <lwip_htons>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	b2db      	uxtb	r3, r3
 8010d60:	f003 0303 	and.w	r3, r3, #3
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d001      	beq.n	8010d6c <tcp_receive+0x6c4>
 8010d68:	2301      	movs	r3, #1
 8010d6a:	e000      	b.n	8010d6e <tcp_receive+0x6c6>
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	4423      	add	r3, r4
 8010d70:	b29a      	uxth	r2, r3
 8010d72:	4b70      	ldr	r3, [pc, #448]	@ (8010f34 <tcp_receive+0x88c>)
 8010d74:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010d7a:	4b6e      	ldr	r3, [pc, #440]	@ (8010f34 <tcp_receive+0x88c>)
 8010d7c:	881b      	ldrh	r3, [r3, #0]
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d274      	bcs.n	8010e6c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010d82:	4b6b      	ldr	r3, [pc, #428]	@ (8010f30 <tcp_receive+0x888>)
 8010d84:	68db      	ldr	r3, [r3, #12]
 8010d86:	899b      	ldrh	r3, [r3, #12]
 8010d88:	b29b      	uxth	r3, r3
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7fa fcda 	bl	800b744 <lwip_htons>
 8010d90:	4603      	mov	r3, r0
 8010d92:	b2db      	uxtb	r3, r3
 8010d94:	f003 0301 	and.w	r3, r3, #1
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d01e      	beq.n	8010dda <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010d9c:	4b64      	ldr	r3, [pc, #400]	@ (8010f30 <tcp_receive+0x888>)
 8010d9e:	68db      	ldr	r3, [r3, #12]
 8010da0:	899b      	ldrh	r3, [r3, #12]
 8010da2:	b29b      	uxth	r3, r3
 8010da4:	b21b      	sxth	r3, r3
 8010da6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010daa:	b21c      	sxth	r4, r3
 8010dac:	4b60      	ldr	r3, [pc, #384]	@ (8010f30 <tcp_receive+0x888>)
 8010dae:	68db      	ldr	r3, [r3, #12]
 8010db0:	899b      	ldrh	r3, [r3, #12]
 8010db2:	b29b      	uxth	r3, r3
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7fa fcc5 	bl	800b744 <lwip_htons>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	b2db      	uxtb	r3, r3
 8010dbe:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010dc2:	b29b      	uxth	r3, r3
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f7fa fcbd 	bl	800b744 <lwip_htons>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	b21b      	sxth	r3, r3
 8010dce:	4323      	orrs	r3, r4
 8010dd0:	b21a      	sxth	r2, r3
 8010dd2:	4b57      	ldr	r3, [pc, #348]	@ (8010f30 <tcp_receive+0x888>)
 8010dd4:	68db      	ldr	r3, [r3, #12]
 8010dd6:	b292      	uxth	r2, r2
 8010dd8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010dde:	4b54      	ldr	r3, [pc, #336]	@ (8010f30 <tcp_receive+0x888>)
 8010de0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010de2:	4b53      	ldr	r3, [pc, #332]	@ (8010f30 <tcp_receive+0x888>)
 8010de4:	68db      	ldr	r3, [r3, #12]
 8010de6:	899b      	ldrh	r3, [r3, #12]
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7fa fcaa 	bl	800b744 <lwip_htons>
 8010df0:	4603      	mov	r3, r0
 8010df2:	b2db      	uxtb	r3, r3
 8010df4:	f003 0302 	and.w	r3, r3, #2
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d005      	beq.n	8010e08 <tcp_receive+0x760>
            inseg.len -= 1;
 8010dfc:	4b4c      	ldr	r3, [pc, #304]	@ (8010f30 <tcp_receive+0x888>)
 8010dfe:	891b      	ldrh	r3, [r3, #8]
 8010e00:	3b01      	subs	r3, #1
 8010e02:	b29a      	uxth	r2, r3
 8010e04:	4b4a      	ldr	r3, [pc, #296]	@ (8010f30 <tcp_receive+0x888>)
 8010e06:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010e08:	4b49      	ldr	r3, [pc, #292]	@ (8010f30 <tcp_receive+0x888>)
 8010e0a:	685b      	ldr	r3, [r3, #4]
 8010e0c:	4a48      	ldr	r2, [pc, #288]	@ (8010f30 <tcp_receive+0x888>)
 8010e0e:	8912      	ldrh	r2, [r2, #8]
 8010e10:	4611      	mov	r1, r2
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7fb ff02 	bl	800cc1c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010e18:	4b45      	ldr	r3, [pc, #276]	@ (8010f30 <tcp_receive+0x888>)
 8010e1a:	891c      	ldrh	r4, [r3, #8]
 8010e1c:	4b44      	ldr	r3, [pc, #272]	@ (8010f30 <tcp_receive+0x888>)
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	899b      	ldrh	r3, [r3, #12]
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7fa fc8d 	bl	800b744 <lwip_htons>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	b2db      	uxtb	r3, r3
 8010e2e:	f003 0303 	and.w	r3, r3, #3
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d001      	beq.n	8010e3a <tcp_receive+0x792>
 8010e36:	2301      	movs	r3, #1
 8010e38:	e000      	b.n	8010e3c <tcp_receive+0x794>
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	4423      	add	r3, r4
 8010e3e:	b29a      	uxth	r2, r3
 8010e40:	4b3c      	ldr	r3, [pc, #240]	@ (8010f34 <tcp_receive+0x88c>)
 8010e42:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010e44:	4b3b      	ldr	r3, [pc, #236]	@ (8010f34 <tcp_receive+0x88c>)
 8010e46:	881b      	ldrh	r3, [r3, #0]
 8010e48:	461a      	mov	r2, r3
 8010e4a:	4b38      	ldr	r3, [pc, #224]	@ (8010f2c <tcp_receive+0x884>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	441a      	add	r2, r3
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e54:	6879      	ldr	r1, [r7, #4]
 8010e56:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010e58:	440b      	add	r3, r1
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d006      	beq.n	8010e6c <tcp_receive+0x7c4>
 8010e5e:	4b36      	ldr	r3, [pc, #216]	@ (8010f38 <tcp_receive+0x890>)
 8010e60:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8010e64:	4935      	ldr	r1, [pc, #212]	@ (8010f3c <tcp_receive+0x894>)
 8010e66:	4836      	ldr	r0, [pc, #216]	@ (8010f40 <tcp_receive+0x898>)
 8010e68:	f005 fd70 	bl	801694c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	f000 80e6 	beq.w	8011042 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010e76:	4b2e      	ldr	r3, [pc, #184]	@ (8010f30 <tcp_receive+0x888>)
 8010e78:	68db      	ldr	r3, [r3, #12]
 8010e7a:	899b      	ldrh	r3, [r3, #12]
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7fa fc60 	bl	800b744 <lwip_htons>
 8010e84:	4603      	mov	r3, r0
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	f003 0301 	and.w	r3, r3, #1
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d010      	beq.n	8010eb2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010e90:	e00a      	b.n	8010ea8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e96:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e9c:	681a      	ldr	r2, [r3, #0]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8010ea2:	68f8      	ldr	r0, [r7, #12]
 8010ea4:	f7fd fcc5 	bl	800e832 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d1f0      	bne.n	8010e92 <tcp_receive+0x7ea>
 8010eb0:	e0c7      	b.n	8011042 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010eb8:	e051      	b.n	8010f5e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ebc:	68db      	ldr	r3, [r3, #12]
 8010ebe:	899b      	ldrh	r3, [r3, #12]
 8010ec0:	b29b      	uxth	r3, r3
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fa fc3e 	bl	800b744 <lwip_htons>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	b2db      	uxtb	r3, r3
 8010ecc:	f003 0301 	and.w	r3, r3, #1
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d03c      	beq.n	8010f4e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010ed4:	4b16      	ldr	r3, [pc, #88]	@ (8010f30 <tcp_receive+0x888>)
 8010ed6:	68db      	ldr	r3, [r3, #12]
 8010ed8:	899b      	ldrh	r3, [r3, #12]
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	4618      	mov	r0, r3
 8010ede:	f7fa fc31 	bl	800b744 <lwip_htons>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d12f      	bne.n	8010f4e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010eee:	4b10      	ldr	r3, [pc, #64]	@ (8010f30 <tcp_receive+0x888>)
 8010ef0:	68db      	ldr	r3, [r3, #12]
 8010ef2:	899b      	ldrh	r3, [r3, #12]
 8010ef4:	b29c      	uxth	r4, r3
 8010ef6:	2001      	movs	r0, #1
 8010ef8:	f7fa fc24 	bl	800b744 <lwip_htons>
 8010efc:	4603      	mov	r3, r0
 8010efe:	461a      	mov	r2, r3
 8010f00:	4b0b      	ldr	r3, [pc, #44]	@ (8010f30 <tcp_receive+0x888>)
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	4322      	orrs	r2, r4
 8010f06:	b292      	uxth	r2, r2
 8010f08:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010f0a:	4b09      	ldr	r3, [pc, #36]	@ (8010f30 <tcp_receive+0x888>)
 8010f0c:	891c      	ldrh	r4, [r3, #8]
 8010f0e:	4b08      	ldr	r3, [pc, #32]	@ (8010f30 <tcp_receive+0x888>)
 8010f10:	68db      	ldr	r3, [r3, #12]
 8010f12:	899b      	ldrh	r3, [r3, #12]
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7fa fc14 	bl	800b744 <lwip_htons>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	b2db      	uxtb	r3, r3
 8010f20:	f003 0303 	and.w	r3, r3, #3
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d00d      	beq.n	8010f44 <tcp_receive+0x89c>
 8010f28:	2301      	movs	r3, #1
 8010f2a:	e00c      	b.n	8010f46 <tcp_receive+0x89e>
 8010f2c:	2000f2e8 	.word	0x2000f2e8
 8010f30:	2000f2c8 	.word	0x2000f2c8
 8010f34:	2000f2f2 	.word	0x2000f2f2
 8010f38:	08019618 	.word	0x08019618
 8010f3c:	080199c0 	.word	0x080199c0
 8010f40:	08019664 	.word	0x08019664
 8010f44:	2300      	movs	r3, #0
 8010f46:	4423      	add	r3, r4
 8010f48:	b29a      	uxth	r2, r3
 8010f4a:	4b98      	ldr	r3, [pc, #608]	@ (80111ac <tcp_receive+0xb04>)
 8010f4c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f50:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8010f58:	6938      	ldr	r0, [r7, #16]
 8010f5a:	f7fd fc6a 	bl	800e832 <tcp_seg_free>
            while (next &&
 8010f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d00e      	beq.n	8010f82 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010f64:	4b91      	ldr	r3, [pc, #580]	@ (80111ac <tcp_receive+0xb04>)
 8010f66:	881b      	ldrh	r3, [r3, #0]
 8010f68:	461a      	mov	r2, r3
 8010f6a:	4b91      	ldr	r3, [pc, #580]	@ (80111b0 <tcp_receive+0xb08>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	441a      	add	r2, r3
 8010f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f72:	68db      	ldr	r3, [r3, #12]
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010f78:	8909      	ldrh	r1, [r1, #8]
 8010f7a:	440b      	add	r3, r1
 8010f7c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	da9b      	bge.n	8010eba <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d059      	beq.n	801103c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010f88:	4b88      	ldr	r3, [pc, #544]	@ (80111ac <tcp_receive+0xb04>)
 8010f8a:	881b      	ldrh	r3, [r3, #0]
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	4b88      	ldr	r3, [pc, #544]	@ (80111b0 <tcp_receive+0xb08>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	441a      	add	r2, r3
 8010f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f96:	68db      	ldr	r3, [r3, #12]
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	dd4d      	ble.n	801103c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	685b      	ldr	r3, [r3, #4]
 8010fa6:	b29a      	uxth	r2, r3
 8010fa8:	4b81      	ldr	r3, [pc, #516]	@ (80111b0 <tcp_receive+0xb08>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	1ad3      	subs	r3, r2, r3
 8010fb0:	b29a      	uxth	r2, r3
 8010fb2:	4b80      	ldr	r3, [pc, #512]	@ (80111b4 <tcp_receive+0xb0c>)
 8010fb4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80111b4 <tcp_receive+0xb0c>)
 8010fb8:	68db      	ldr	r3, [r3, #12]
 8010fba:	899b      	ldrh	r3, [r3, #12]
 8010fbc:	b29b      	uxth	r3, r3
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f7fa fbc0 	bl	800b744 <lwip_htons>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	f003 0302 	and.w	r3, r3, #2
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d005      	beq.n	8010fdc <tcp_receive+0x934>
                inseg.len -= 1;
 8010fd0:	4b78      	ldr	r3, [pc, #480]	@ (80111b4 <tcp_receive+0xb0c>)
 8010fd2:	891b      	ldrh	r3, [r3, #8]
 8010fd4:	3b01      	subs	r3, #1
 8010fd6:	b29a      	uxth	r2, r3
 8010fd8:	4b76      	ldr	r3, [pc, #472]	@ (80111b4 <tcp_receive+0xb0c>)
 8010fda:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010fdc:	4b75      	ldr	r3, [pc, #468]	@ (80111b4 <tcp_receive+0xb0c>)
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	4a74      	ldr	r2, [pc, #464]	@ (80111b4 <tcp_receive+0xb0c>)
 8010fe2:	8912      	ldrh	r2, [r2, #8]
 8010fe4:	4611      	mov	r1, r2
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f7fb fe18 	bl	800cc1c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010fec:	4b71      	ldr	r3, [pc, #452]	@ (80111b4 <tcp_receive+0xb0c>)
 8010fee:	891c      	ldrh	r4, [r3, #8]
 8010ff0:	4b70      	ldr	r3, [pc, #448]	@ (80111b4 <tcp_receive+0xb0c>)
 8010ff2:	68db      	ldr	r3, [r3, #12]
 8010ff4:	899b      	ldrh	r3, [r3, #12]
 8010ff6:	b29b      	uxth	r3, r3
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7fa fba3 	bl	800b744 <lwip_htons>
 8010ffe:	4603      	mov	r3, r0
 8011000:	b2db      	uxtb	r3, r3
 8011002:	f003 0303 	and.w	r3, r3, #3
 8011006:	2b00      	cmp	r3, #0
 8011008:	d001      	beq.n	801100e <tcp_receive+0x966>
 801100a:	2301      	movs	r3, #1
 801100c:	e000      	b.n	8011010 <tcp_receive+0x968>
 801100e:	2300      	movs	r3, #0
 8011010:	4423      	add	r3, r4
 8011012:	b29a      	uxth	r2, r3
 8011014:	4b65      	ldr	r3, [pc, #404]	@ (80111ac <tcp_receive+0xb04>)
 8011016:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011018:	4b64      	ldr	r3, [pc, #400]	@ (80111ac <tcp_receive+0xb04>)
 801101a:	881b      	ldrh	r3, [r3, #0]
 801101c:	461a      	mov	r2, r3
 801101e:	4b64      	ldr	r3, [pc, #400]	@ (80111b0 <tcp_receive+0xb08>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	441a      	add	r2, r3
 8011024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011026:	68db      	ldr	r3, [r3, #12]
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	429a      	cmp	r2, r3
 801102c:	d006      	beq.n	801103c <tcp_receive+0x994>
 801102e:	4b62      	ldr	r3, [pc, #392]	@ (80111b8 <tcp_receive+0xb10>)
 8011030:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8011034:	4961      	ldr	r1, [pc, #388]	@ (80111bc <tcp_receive+0xb14>)
 8011036:	4862      	ldr	r0, [pc, #392]	@ (80111c0 <tcp_receive+0xb18>)
 8011038:	f005 fc88 	bl	801694c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011040:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011042:	4b5a      	ldr	r3, [pc, #360]	@ (80111ac <tcp_receive+0xb04>)
 8011044:	881b      	ldrh	r3, [r3, #0]
 8011046:	461a      	mov	r2, r3
 8011048:	4b59      	ldr	r3, [pc, #356]	@ (80111b0 <tcp_receive+0xb08>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	441a      	add	r2, r3
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011056:	4b55      	ldr	r3, [pc, #340]	@ (80111ac <tcp_receive+0xb04>)
 8011058:	881b      	ldrh	r3, [r3, #0]
 801105a:	429a      	cmp	r2, r3
 801105c:	d206      	bcs.n	801106c <tcp_receive+0x9c4>
 801105e:	4b56      	ldr	r3, [pc, #344]	@ (80111b8 <tcp_receive+0xb10>)
 8011060:	f240 6207 	movw	r2, #1543	@ 0x607
 8011064:	4957      	ldr	r1, [pc, #348]	@ (80111c4 <tcp_receive+0xb1c>)
 8011066:	4856      	ldr	r0, [pc, #344]	@ (80111c0 <tcp_receive+0xb18>)
 8011068:	f005 fc70 	bl	801694c <iprintf>
        pcb->rcv_wnd -= tcplen;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011070:	4b4e      	ldr	r3, [pc, #312]	@ (80111ac <tcp_receive+0xb04>)
 8011072:	881b      	ldrh	r3, [r3, #0]
 8011074:	1ad3      	subs	r3, r2, r3
 8011076:	b29a      	uxth	r2, r3
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f7fc feb1 	bl	800dde4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011082:	4b4c      	ldr	r3, [pc, #304]	@ (80111b4 <tcp_receive+0xb0c>)
 8011084:	685b      	ldr	r3, [r3, #4]
 8011086:	891b      	ldrh	r3, [r3, #8]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d006      	beq.n	801109a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801108c:	4b49      	ldr	r3, [pc, #292]	@ (80111b4 <tcp_receive+0xb0c>)
 801108e:	685b      	ldr	r3, [r3, #4]
 8011090:	4a4d      	ldr	r2, [pc, #308]	@ (80111c8 <tcp_receive+0xb20>)
 8011092:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011094:	4b47      	ldr	r3, [pc, #284]	@ (80111b4 <tcp_receive+0xb0c>)
 8011096:	2200      	movs	r2, #0
 8011098:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801109a:	4b46      	ldr	r3, [pc, #280]	@ (80111b4 <tcp_receive+0xb0c>)
 801109c:	68db      	ldr	r3, [r3, #12]
 801109e:	899b      	ldrh	r3, [r3, #12]
 80110a0:	b29b      	uxth	r3, r3
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7fa fb4e 	bl	800b744 <lwip_htons>
 80110a8:	4603      	mov	r3, r0
 80110aa:	b2db      	uxtb	r3, r3
 80110ac:	f003 0301 	and.w	r3, r3, #1
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	f000 80b8 	beq.w	8011226 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80110b6:	4b45      	ldr	r3, [pc, #276]	@ (80111cc <tcp_receive+0xb24>)
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	f043 0320 	orr.w	r3, r3, #32
 80110be:	b2da      	uxtb	r2, r3
 80110c0:	4b42      	ldr	r3, [pc, #264]	@ (80111cc <tcp_receive+0xb24>)
 80110c2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80110c4:	e0af      	b.n	8011226 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110ca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110d0:	68db      	ldr	r3, [r3, #12]
 80110d2:	685b      	ldr	r3, [r3, #4]
 80110d4:	4a36      	ldr	r2, [pc, #216]	@ (80111b0 <tcp_receive+0xb08>)
 80110d6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	891b      	ldrh	r3, [r3, #8]
 80110dc:	461c      	mov	r4, r3
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	68db      	ldr	r3, [r3, #12]
 80110e2:	899b      	ldrh	r3, [r3, #12]
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	4618      	mov	r0, r3
 80110e8:	f7fa fb2c 	bl	800b744 <lwip_htons>
 80110ec:	4603      	mov	r3, r0
 80110ee:	b2db      	uxtb	r3, r3
 80110f0:	f003 0303 	and.w	r3, r3, #3
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d001      	beq.n	80110fc <tcp_receive+0xa54>
 80110f8:	2301      	movs	r3, #1
 80110fa:	e000      	b.n	80110fe <tcp_receive+0xa56>
 80110fc:	2300      	movs	r3, #0
 80110fe:	191a      	adds	r2, r3, r4
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011104:	441a      	add	r2, r3
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801110e:	461c      	mov	r4, r3
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	891b      	ldrh	r3, [r3, #8]
 8011114:	461d      	mov	r5, r3
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	68db      	ldr	r3, [r3, #12]
 801111a:	899b      	ldrh	r3, [r3, #12]
 801111c:	b29b      	uxth	r3, r3
 801111e:	4618      	mov	r0, r3
 8011120:	f7fa fb10 	bl	800b744 <lwip_htons>
 8011124:	4603      	mov	r3, r0
 8011126:	b2db      	uxtb	r3, r3
 8011128:	f003 0303 	and.w	r3, r3, #3
 801112c:	2b00      	cmp	r3, #0
 801112e:	d001      	beq.n	8011134 <tcp_receive+0xa8c>
 8011130:	2301      	movs	r3, #1
 8011132:	e000      	b.n	8011136 <tcp_receive+0xa8e>
 8011134:	2300      	movs	r3, #0
 8011136:	442b      	add	r3, r5
 8011138:	429c      	cmp	r4, r3
 801113a:	d206      	bcs.n	801114a <tcp_receive+0xaa2>
 801113c:	4b1e      	ldr	r3, [pc, #120]	@ (80111b8 <tcp_receive+0xb10>)
 801113e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8011142:	4923      	ldr	r1, [pc, #140]	@ (80111d0 <tcp_receive+0xb28>)
 8011144:	481e      	ldr	r0, [pc, #120]	@ (80111c0 <tcp_receive+0xb18>)
 8011146:	f005 fc01 	bl	801694c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	891b      	ldrh	r3, [r3, #8]
 801114e:	461c      	mov	r4, r3
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	68db      	ldr	r3, [r3, #12]
 8011154:	899b      	ldrh	r3, [r3, #12]
 8011156:	b29b      	uxth	r3, r3
 8011158:	4618      	mov	r0, r3
 801115a:	f7fa faf3 	bl	800b744 <lwip_htons>
 801115e:	4603      	mov	r3, r0
 8011160:	b2db      	uxtb	r3, r3
 8011162:	f003 0303 	and.w	r3, r3, #3
 8011166:	2b00      	cmp	r3, #0
 8011168:	d001      	beq.n	801116e <tcp_receive+0xac6>
 801116a:	2301      	movs	r3, #1
 801116c:	e000      	b.n	8011170 <tcp_receive+0xac8>
 801116e:	2300      	movs	r3, #0
 8011170:	1919      	adds	r1, r3, r4
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011176:	b28b      	uxth	r3, r1
 8011178:	1ad3      	subs	r3, r2, r3
 801117a:	b29a      	uxth	r2, r3
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f7fc fe2f 	bl	800dde4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	891b      	ldrh	r3, [r3, #8]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d028      	beq.n	80111e2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011190:	4b0d      	ldr	r3, [pc, #52]	@ (80111c8 <tcp_receive+0xb20>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d01d      	beq.n	80111d4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011198:	4b0b      	ldr	r3, [pc, #44]	@ (80111c8 <tcp_receive+0xb20>)
 801119a:	681a      	ldr	r2, [r3, #0]
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	685b      	ldr	r3, [r3, #4]
 80111a0:	4619      	mov	r1, r3
 80111a2:	4610      	mov	r0, r2
 80111a4:	f7fb ff8e 	bl	800d0c4 <pbuf_cat>
 80111a8:	e018      	b.n	80111dc <tcp_receive+0xb34>
 80111aa:	bf00      	nop
 80111ac:	2000f2f2 	.word	0x2000f2f2
 80111b0:	2000f2e8 	.word	0x2000f2e8
 80111b4:	2000f2c8 	.word	0x2000f2c8
 80111b8:	08019618 	.word	0x08019618
 80111bc:	080199f8 	.word	0x080199f8
 80111c0:	08019664 	.word	0x08019664
 80111c4:	08019a34 	.word	0x08019a34
 80111c8:	2000f2f8 	.word	0x2000f2f8
 80111cc:	2000f2f5 	.word	0x2000f2f5
 80111d0:	08019a54 	.word	0x08019a54
            } else {
              recv_data = cseg->p;
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	685b      	ldr	r3, [r3, #4]
 80111d8:	4a70      	ldr	r2, [pc, #448]	@ (801139c <tcp_receive+0xcf4>)
 80111da:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	2200      	movs	r2, #0
 80111e0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	68db      	ldr	r3, [r3, #12]
 80111e6:	899b      	ldrh	r3, [r3, #12]
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7fa faaa 	bl	800b744 <lwip_htons>
 80111f0:	4603      	mov	r3, r0
 80111f2:	b2db      	uxtb	r3, r3
 80111f4:	f003 0301 	and.w	r3, r3, #1
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d00d      	beq.n	8011218 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80111fc:	4b68      	ldr	r3, [pc, #416]	@ (80113a0 <tcp_receive+0xcf8>)
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	f043 0320 	orr.w	r3, r3, #32
 8011204:	b2da      	uxtb	r2, r3
 8011206:	4b66      	ldr	r3, [pc, #408]	@ (80113a0 <tcp_receive+0xcf8>)
 8011208:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	7d1b      	ldrb	r3, [r3, #20]
 801120e:	2b04      	cmp	r3, #4
 8011210:	d102      	bne.n	8011218 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2207      	movs	r2, #7
 8011216:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	681a      	ldr	r2, [r3, #0]
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8011220:	68b8      	ldr	r0, [r7, #8]
 8011222:	f7fd fb06 	bl	800e832 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801122a:	2b00      	cmp	r3, #0
 801122c:	d008      	beq.n	8011240 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011232:	68db      	ldr	r3, [r3, #12]
 8011234:	685a      	ldr	r2, [r3, #4]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801123a:	429a      	cmp	r2, r3
 801123c:	f43f af43 	beq.w	80110c6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	8b5b      	ldrh	r3, [r3, #26]
 8011244:	f003 0301 	and.w	r3, r3, #1
 8011248:	2b00      	cmp	r3, #0
 801124a:	d00e      	beq.n	801126a <tcp_receive+0xbc2>
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	8b5b      	ldrh	r3, [r3, #26]
 8011250:	f023 0301 	bic.w	r3, r3, #1
 8011254:	b29a      	uxth	r2, r3
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	835a      	strh	r2, [r3, #26]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	8b5b      	ldrh	r3, [r3, #26]
 801125e:	f043 0302 	orr.w	r3, r3, #2
 8011262:	b29a      	uxth	r2, r3
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011268:	e187      	b.n	801157a <tcp_receive+0xed2>
        tcp_ack(pcb);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	8b5b      	ldrh	r3, [r3, #26]
 801126e:	f043 0301 	orr.w	r3, r3, #1
 8011272:	b29a      	uxth	r2, r3
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011278:	e17f      	b.n	801157a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801127e:	2b00      	cmp	r3, #0
 8011280:	d106      	bne.n	8011290 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011282:	4848      	ldr	r0, [pc, #288]	@ (80113a4 <tcp_receive+0xcfc>)
 8011284:	f7fd faee 	bl	800e864 <tcp_seg_copy>
 8011288:	4602      	mov	r2, r0
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	675a      	str	r2, [r3, #116]	@ 0x74
 801128e:	e16c      	b.n	801156a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011290:	2300      	movs	r3, #0
 8011292:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011298:	63bb      	str	r3, [r7, #56]	@ 0x38
 801129a:	e156      	b.n	801154a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801129c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801129e:	68db      	ldr	r3, [r3, #12]
 80112a0:	685a      	ldr	r2, [r3, #4]
 80112a2:	4b41      	ldr	r3, [pc, #260]	@ (80113a8 <tcp_receive+0xd00>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	429a      	cmp	r2, r3
 80112a8:	d11d      	bne.n	80112e6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80112aa:	4b3e      	ldr	r3, [pc, #248]	@ (80113a4 <tcp_receive+0xcfc>)
 80112ac:	891a      	ldrh	r2, [r3, #8]
 80112ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112b0:	891b      	ldrh	r3, [r3, #8]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	f240 814e 	bls.w	8011554 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80112b8:	483a      	ldr	r0, [pc, #232]	@ (80113a4 <tcp_receive+0xcfc>)
 80112ba:	f7fd fad3 	bl	800e864 <tcp_seg_copy>
 80112be:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	f000 8148 	beq.w	8011558 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80112c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d003      	beq.n	80112d6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80112ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112d0:	697a      	ldr	r2, [r7, #20]
 80112d2:	601a      	str	r2, [r3, #0]
 80112d4:	e002      	b.n	80112dc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	697a      	ldr	r2, [r7, #20]
 80112da:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80112dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80112de:	6978      	ldr	r0, [r7, #20]
 80112e0:	f7ff f8de 	bl	80104a0 <tcp_oos_insert_segment>
                }
                break;
 80112e4:	e138      	b.n	8011558 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80112e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d117      	bne.n	801131c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80112ec:	4b2e      	ldr	r3, [pc, #184]	@ (80113a8 <tcp_receive+0xd00>)
 80112ee:	681a      	ldr	r2, [r3, #0]
 80112f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	685b      	ldr	r3, [r3, #4]
 80112f6:	1ad3      	subs	r3, r2, r3
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	da57      	bge.n	80113ac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80112fc:	4829      	ldr	r0, [pc, #164]	@ (80113a4 <tcp_receive+0xcfc>)
 80112fe:	f7fd fab1 	bl	800e864 <tcp_seg_copy>
 8011302:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011304:	69bb      	ldr	r3, [r7, #24]
 8011306:	2b00      	cmp	r3, #0
 8011308:	f000 8128 	beq.w	801155c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	69ba      	ldr	r2, [r7, #24]
 8011310:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011312:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011314:	69b8      	ldr	r0, [r7, #24]
 8011316:	f7ff f8c3 	bl	80104a0 <tcp_oos_insert_segment>
                  }
                  break;
 801131a:	e11f      	b.n	801155c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801131c:	4b22      	ldr	r3, [pc, #136]	@ (80113a8 <tcp_receive+0xd00>)
 801131e:	681a      	ldr	r2, [r3, #0]
 8011320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011322:	68db      	ldr	r3, [r3, #12]
 8011324:	685b      	ldr	r3, [r3, #4]
 8011326:	1ad3      	subs	r3, r2, r3
 8011328:	3b01      	subs	r3, #1
 801132a:	2b00      	cmp	r3, #0
 801132c:	db3e      	blt.n	80113ac <tcp_receive+0xd04>
 801132e:	4b1e      	ldr	r3, [pc, #120]	@ (80113a8 <tcp_receive+0xd00>)
 8011330:	681a      	ldr	r2, [r3, #0]
 8011332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011334:	68db      	ldr	r3, [r3, #12]
 8011336:	685b      	ldr	r3, [r3, #4]
 8011338:	1ad3      	subs	r3, r2, r3
 801133a:	3301      	adds	r3, #1
 801133c:	2b00      	cmp	r3, #0
 801133e:	dc35      	bgt.n	80113ac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011340:	4818      	ldr	r0, [pc, #96]	@ (80113a4 <tcp_receive+0xcfc>)
 8011342:	f7fd fa8f 	bl	800e864 <tcp_seg_copy>
 8011346:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011348:	69fb      	ldr	r3, [r7, #28]
 801134a:	2b00      	cmp	r3, #0
 801134c:	f000 8108 	beq.w	8011560 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011352:	68db      	ldr	r3, [r3, #12]
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011358:	8912      	ldrh	r2, [r2, #8]
 801135a:	441a      	add	r2, r3
 801135c:	4b12      	ldr	r3, [pc, #72]	@ (80113a8 <tcp_receive+0xd00>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	1ad3      	subs	r3, r2, r3
 8011362:	2b00      	cmp	r3, #0
 8011364:	dd12      	ble.n	801138c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011366:	4b10      	ldr	r3, [pc, #64]	@ (80113a8 <tcp_receive+0xd00>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	b29a      	uxth	r2, r3
 801136c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	b29b      	uxth	r3, r3
 8011374:	1ad3      	subs	r3, r2, r3
 8011376:	b29a      	uxth	r2, r3
 8011378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801137a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801137c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801137e:	685a      	ldr	r2, [r3, #4]
 8011380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011382:	891b      	ldrh	r3, [r3, #8]
 8011384:	4619      	mov	r1, r3
 8011386:	4610      	mov	r0, r2
 8011388:	f7fb fc48 	bl	800cc1c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801138c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801138e:	69fa      	ldr	r2, [r7, #28]
 8011390:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011392:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011394:	69f8      	ldr	r0, [r7, #28]
 8011396:	f7ff f883 	bl	80104a0 <tcp_oos_insert_segment>
                  }
                  break;
 801139a:	e0e1      	b.n	8011560 <tcp_receive+0xeb8>
 801139c:	2000f2f8 	.word	0x2000f2f8
 80113a0:	2000f2f5 	.word	0x2000f2f5
 80113a4:	2000f2c8 	.word	0x2000f2c8
 80113a8:	2000f2e8 	.word	0x2000f2e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80113ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113ae:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80113b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	f040 80c5 	bne.w	8011544 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80113ba:	4b7f      	ldr	r3, [pc, #508]	@ (80115b8 <tcp_receive+0xf10>)
 80113bc:	681a      	ldr	r2, [r3, #0]
 80113be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113c0:	68db      	ldr	r3, [r3, #12]
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	f340 80bc 	ble.w	8011544 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80113cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113ce:	68db      	ldr	r3, [r3, #12]
 80113d0:	899b      	ldrh	r3, [r3, #12]
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7fa f9b5 	bl	800b744 <lwip_htons>
 80113da:	4603      	mov	r3, r0
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	f003 0301 	and.w	r3, r3, #1
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	f040 80be 	bne.w	8011564 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80113e8:	4874      	ldr	r0, [pc, #464]	@ (80115bc <tcp_receive+0xf14>)
 80113ea:	f7fd fa3b 	bl	800e864 <tcp_seg_copy>
 80113ee:	4602      	mov	r2, r0
 80113f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113f2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80113f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	f000 80b5 	beq.w	8011568 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80113fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011400:	68db      	ldr	r3, [r3, #12]
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011406:	8912      	ldrh	r2, [r2, #8]
 8011408:	441a      	add	r2, r3
 801140a:	4b6b      	ldr	r3, [pc, #428]	@ (80115b8 <tcp_receive+0xf10>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	1ad3      	subs	r3, r2, r3
 8011410:	2b00      	cmp	r3, #0
 8011412:	dd12      	ble.n	801143a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011414:	4b68      	ldr	r3, [pc, #416]	@ (80115b8 <tcp_receive+0xf10>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	b29a      	uxth	r2, r3
 801141a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801141c:	68db      	ldr	r3, [r3, #12]
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	b29b      	uxth	r3, r3
 8011422:	1ad3      	subs	r3, r2, r3
 8011424:	b29a      	uxth	r2, r3
 8011426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011428:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801142a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801142c:	685a      	ldr	r2, [r3, #4]
 801142e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011430:	891b      	ldrh	r3, [r3, #8]
 8011432:	4619      	mov	r1, r3
 8011434:	4610      	mov	r0, r2
 8011436:	f7fb fbf1 	bl	800cc1c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801143a:	4b61      	ldr	r3, [pc, #388]	@ (80115c0 <tcp_receive+0xf18>)
 801143c:	881b      	ldrh	r3, [r3, #0]
 801143e:	461a      	mov	r2, r3
 8011440:	4b5d      	ldr	r3, [pc, #372]	@ (80115b8 <tcp_receive+0xf10>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	441a      	add	r2, r3
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801144a:	6879      	ldr	r1, [r7, #4]
 801144c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801144e:	440b      	add	r3, r1
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	2b00      	cmp	r3, #0
 8011454:	f340 8088 	ble.w	8011568 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	68db      	ldr	r3, [r3, #12]
 801145e:	899b      	ldrh	r3, [r3, #12]
 8011460:	b29b      	uxth	r3, r3
 8011462:	4618      	mov	r0, r3
 8011464:	f7fa f96e 	bl	800b744 <lwip_htons>
 8011468:	4603      	mov	r3, r0
 801146a:	b2db      	uxtb	r3, r3
 801146c:	f003 0301 	and.w	r3, r3, #1
 8011470:	2b00      	cmp	r3, #0
 8011472:	d021      	beq.n	80114b8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	68db      	ldr	r3, [r3, #12]
 801147a:	899b      	ldrh	r3, [r3, #12]
 801147c:	b29b      	uxth	r3, r3
 801147e:	b21b      	sxth	r3, r3
 8011480:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011484:	b21c      	sxth	r4, r3
 8011486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	68db      	ldr	r3, [r3, #12]
 801148c:	899b      	ldrh	r3, [r3, #12]
 801148e:	b29b      	uxth	r3, r3
 8011490:	4618      	mov	r0, r3
 8011492:	f7fa f957 	bl	800b744 <lwip_htons>
 8011496:	4603      	mov	r3, r0
 8011498:	b2db      	uxtb	r3, r3
 801149a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801149e:	b29b      	uxth	r3, r3
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7fa f94f 	bl	800b744 <lwip_htons>
 80114a6:	4603      	mov	r3, r0
 80114a8:	b21b      	sxth	r3, r3
 80114aa:	4323      	orrs	r3, r4
 80114ac:	b21a      	sxth	r2, r3
 80114ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	68db      	ldr	r3, [r3, #12]
 80114b4:	b292      	uxth	r2, r2
 80114b6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114bc:	b29a      	uxth	r2, r3
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114c2:	4413      	add	r3, r2
 80114c4:	b299      	uxth	r1, r3
 80114c6:	4b3c      	ldr	r3, [pc, #240]	@ (80115b8 <tcp_receive+0xf10>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	b29a      	uxth	r2, r3
 80114cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	1a8a      	subs	r2, r1, r2
 80114d2:	b292      	uxth	r2, r2
 80114d4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80114d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	685a      	ldr	r2, [r3, #4]
 80114dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	891b      	ldrh	r3, [r3, #8]
 80114e2:	4619      	mov	r1, r3
 80114e4:	4610      	mov	r0, r2
 80114e6:	f7fb fb99 	bl	800cc1c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80114ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	891c      	ldrh	r4, [r3, #8]
 80114f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	68db      	ldr	r3, [r3, #12]
 80114f6:	899b      	ldrh	r3, [r3, #12]
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7fa f922 	bl	800b744 <lwip_htons>
 8011500:	4603      	mov	r3, r0
 8011502:	b2db      	uxtb	r3, r3
 8011504:	f003 0303 	and.w	r3, r3, #3
 8011508:	2b00      	cmp	r3, #0
 801150a:	d001      	beq.n	8011510 <tcp_receive+0xe68>
 801150c:	2301      	movs	r3, #1
 801150e:	e000      	b.n	8011512 <tcp_receive+0xe6a>
 8011510:	2300      	movs	r3, #0
 8011512:	4423      	add	r3, r4
 8011514:	b29a      	uxth	r2, r3
 8011516:	4b2a      	ldr	r3, [pc, #168]	@ (80115c0 <tcp_receive+0xf18>)
 8011518:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801151a:	4b29      	ldr	r3, [pc, #164]	@ (80115c0 <tcp_receive+0xf18>)
 801151c:	881b      	ldrh	r3, [r3, #0]
 801151e:	461a      	mov	r2, r3
 8011520:	4b25      	ldr	r3, [pc, #148]	@ (80115b8 <tcp_receive+0xf10>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	441a      	add	r2, r3
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801152a:	6879      	ldr	r1, [r7, #4]
 801152c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801152e:	440b      	add	r3, r1
 8011530:	429a      	cmp	r2, r3
 8011532:	d019      	beq.n	8011568 <tcp_receive+0xec0>
 8011534:	4b23      	ldr	r3, [pc, #140]	@ (80115c4 <tcp_receive+0xf1c>)
 8011536:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801153a:	4923      	ldr	r1, [pc, #140]	@ (80115c8 <tcp_receive+0xf20>)
 801153c:	4823      	ldr	r0, [pc, #140]	@ (80115cc <tcp_receive+0xf24>)
 801153e:	f005 fa05 	bl	801694c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011542:	e011      	b.n	8011568 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	63bb      	str	r3, [r7, #56]	@ 0x38
 801154a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801154c:	2b00      	cmp	r3, #0
 801154e:	f47f aea5 	bne.w	801129c <tcp_receive+0xbf4>
 8011552:	e00a      	b.n	801156a <tcp_receive+0xec2>
                break;
 8011554:	bf00      	nop
 8011556:	e008      	b.n	801156a <tcp_receive+0xec2>
                break;
 8011558:	bf00      	nop
 801155a:	e006      	b.n	801156a <tcp_receive+0xec2>
                  break;
 801155c:	bf00      	nop
 801155e:	e004      	b.n	801156a <tcp_receive+0xec2>
                  break;
 8011560:	bf00      	nop
 8011562:	e002      	b.n	801156a <tcp_receive+0xec2>
                  break;
 8011564:	bf00      	nop
 8011566:	e000      	b.n	801156a <tcp_receive+0xec2>
                break;
 8011568:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801156a:	6878      	ldr	r0, [r7, #4]
 801156c:	f001 fe88 	bl	8013280 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011570:	e003      	b.n	801157a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f001 fe84 	bl	8013280 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011578:	e01a      	b.n	80115b0 <tcp_receive+0xf08>
 801157a:	e019      	b.n	80115b0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801157c:	4b0e      	ldr	r3, [pc, #56]	@ (80115b8 <tcp_receive+0xf10>)
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011584:	1ad3      	subs	r3, r2, r3
 8011586:	2b00      	cmp	r3, #0
 8011588:	db0a      	blt.n	80115a0 <tcp_receive+0xef8>
 801158a:	4b0b      	ldr	r3, [pc, #44]	@ (80115b8 <tcp_receive+0xf10>)
 801158c:	681a      	ldr	r2, [r3, #0]
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011592:	6879      	ldr	r1, [r7, #4]
 8011594:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011596:	440b      	add	r3, r1
 8011598:	1ad3      	subs	r3, r2, r3
 801159a:	3301      	adds	r3, #1
 801159c:	2b00      	cmp	r3, #0
 801159e:	dd07      	ble.n	80115b0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	8b5b      	ldrh	r3, [r3, #26]
 80115a4:	f043 0302 	orr.w	r3, r3, #2
 80115a8:	b29a      	uxth	r2, r3
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80115ae:	e7ff      	b.n	80115b0 <tcp_receive+0xf08>
 80115b0:	bf00      	nop
 80115b2:	3750      	adds	r7, #80	@ 0x50
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bdb0      	pop	{r4, r5, r7, pc}
 80115b8:	2000f2e8 	.word	0x2000f2e8
 80115bc:	2000f2c8 	.word	0x2000f2c8
 80115c0:	2000f2f2 	.word	0x2000f2f2
 80115c4:	08019618 	.word	0x08019618
 80115c8:	080199c0 	.word	0x080199c0
 80115cc:	08019664 	.word	0x08019664

080115d0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80115d0:	b480      	push	{r7}
 80115d2:	b083      	sub	sp, #12
 80115d4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80115d6:	4b15      	ldr	r3, [pc, #84]	@ (801162c <tcp_get_next_optbyte+0x5c>)
 80115d8:	881b      	ldrh	r3, [r3, #0]
 80115da:	1c5a      	adds	r2, r3, #1
 80115dc:	b291      	uxth	r1, r2
 80115de:	4a13      	ldr	r2, [pc, #76]	@ (801162c <tcp_get_next_optbyte+0x5c>)
 80115e0:	8011      	strh	r1, [r2, #0]
 80115e2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80115e4:	4b12      	ldr	r3, [pc, #72]	@ (8011630 <tcp_get_next_optbyte+0x60>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d004      	beq.n	80115f6 <tcp_get_next_optbyte+0x26>
 80115ec:	4b11      	ldr	r3, [pc, #68]	@ (8011634 <tcp_get_next_optbyte+0x64>)
 80115ee:	881b      	ldrh	r3, [r3, #0]
 80115f0:	88fa      	ldrh	r2, [r7, #6]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d208      	bcs.n	8011608 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80115f6:	4b10      	ldr	r3, [pc, #64]	@ (8011638 <tcp_get_next_optbyte+0x68>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	3314      	adds	r3, #20
 80115fc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80115fe:	88fb      	ldrh	r3, [r7, #6]
 8011600:	683a      	ldr	r2, [r7, #0]
 8011602:	4413      	add	r3, r2
 8011604:	781b      	ldrb	r3, [r3, #0]
 8011606:	e00b      	b.n	8011620 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011608:	88fb      	ldrh	r3, [r7, #6]
 801160a:	b2da      	uxtb	r2, r3
 801160c:	4b09      	ldr	r3, [pc, #36]	@ (8011634 <tcp_get_next_optbyte+0x64>)
 801160e:	881b      	ldrh	r3, [r3, #0]
 8011610:	b2db      	uxtb	r3, r3
 8011612:	1ad3      	subs	r3, r2, r3
 8011614:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011616:	4b06      	ldr	r3, [pc, #24]	@ (8011630 <tcp_get_next_optbyte+0x60>)
 8011618:	681a      	ldr	r2, [r3, #0]
 801161a:	797b      	ldrb	r3, [r7, #5]
 801161c:	4413      	add	r3, r2
 801161e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011620:	4618      	mov	r0, r3
 8011622:	370c      	adds	r7, #12
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr
 801162c:	2000f2e4 	.word	0x2000f2e4
 8011630:	2000f2e0 	.word	0x2000f2e0
 8011634:	2000f2de 	.word	0x2000f2de
 8011638:	2000f2d8 	.word	0x2000f2d8

0801163c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b084      	sub	sp, #16
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d106      	bne.n	8011658 <tcp_parseopt+0x1c>
 801164a:	4b32      	ldr	r3, [pc, #200]	@ (8011714 <tcp_parseopt+0xd8>)
 801164c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8011650:	4931      	ldr	r1, [pc, #196]	@ (8011718 <tcp_parseopt+0xdc>)
 8011652:	4832      	ldr	r0, [pc, #200]	@ (801171c <tcp_parseopt+0xe0>)
 8011654:	f005 f97a 	bl	801694c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011658:	4b31      	ldr	r3, [pc, #196]	@ (8011720 <tcp_parseopt+0xe4>)
 801165a:	881b      	ldrh	r3, [r3, #0]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d056      	beq.n	801170e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011660:	4b30      	ldr	r3, [pc, #192]	@ (8011724 <tcp_parseopt+0xe8>)
 8011662:	2200      	movs	r2, #0
 8011664:	801a      	strh	r2, [r3, #0]
 8011666:	e046      	b.n	80116f6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011668:	f7ff ffb2 	bl	80115d0 <tcp_get_next_optbyte>
 801166c:	4603      	mov	r3, r0
 801166e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011670:	7bfb      	ldrb	r3, [r7, #15]
 8011672:	2b02      	cmp	r3, #2
 8011674:	d006      	beq.n	8011684 <tcp_parseopt+0x48>
 8011676:	2b02      	cmp	r3, #2
 8011678:	dc2a      	bgt.n	80116d0 <tcp_parseopt+0x94>
 801167a:	2b00      	cmp	r3, #0
 801167c:	d042      	beq.n	8011704 <tcp_parseopt+0xc8>
 801167e:	2b01      	cmp	r3, #1
 8011680:	d038      	beq.n	80116f4 <tcp_parseopt+0xb8>
 8011682:	e025      	b.n	80116d0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011684:	f7ff ffa4 	bl	80115d0 <tcp_get_next_optbyte>
 8011688:	4603      	mov	r3, r0
 801168a:	2b04      	cmp	r3, #4
 801168c:	d13c      	bne.n	8011708 <tcp_parseopt+0xcc>
 801168e:	4b25      	ldr	r3, [pc, #148]	@ (8011724 <tcp_parseopt+0xe8>)
 8011690:	881b      	ldrh	r3, [r3, #0]
 8011692:	3301      	adds	r3, #1
 8011694:	4a22      	ldr	r2, [pc, #136]	@ (8011720 <tcp_parseopt+0xe4>)
 8011696:	8812      	ldrh	r2, [r2, #0]
 8011698:	4293      	cmp	r3, r2
 801169a:	da35      	bge.n	8011708 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801169c:	f7ff ff98 	bl	80115d0 <tcp_get_next_optbyte>
 80116a0:	4603      	mov	r3, r0
 80116a2:	021b      	lsls	r3, r3, #8
 80116a4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80116a6:	f7ff ff93 	bl	80115d0 <tcp_get_next_optbyte>
 80116aa:	4603      	mov	r3, r0
 80116ac:	461a      	mov	r2, r3
 80116ae:	89bb      	ldrh	r3, [r7, #12]
 80116b0:	4313      	orrs	r3, r2
 80116b2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80116b4:	89bb      	ldrh	r3, [r7, #12]
 80116b6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80116ba:	d804      	bhi.n	80116c6 <tcp_parseopt+0x8a>
 80116bc:	89bb      	ldrh	r3, [r7, #12]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d001      	beq.n	80116c6 <tcp_parseopt+0x8a>
 80116c2:	89ba      	ldrh	r2, [r7, #12]
 80116c4:	e001      	b.n	80116ca <tcp_parseopt+0x8e>
 80116c6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80116ce:	e012      	b.n	80116f6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80116d0:	f7ff ff7e 	bl	80115d0 <tcp_get_next_optbyte>
 80116d4:	4603      	mov	r3, r0
 80116d6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80116d8:	7afb      	ldrb	r3, [r7, #11]
 80116da:	2b01      	cmp	r3, #1
 80116dc:	d916      	bls.n	801170c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80116de:	7afb      	ldrb	r3, [r7, #11]
 80116e0:	b29a      	uxth	r2, r3
 80116e2:	4b10      	ldr	r3, [pc, #64]	@ (8011724 <tcp_parseopt+0xe8>)
 80116e4:	881b      	ldrh	r3, [r3, #0]
 80116e6:	4413      	add	r3, r2
 80116e8:	b29b      	uxth	r3, r3
 80116ea:	3b02      	subs	r3, #2
 80116ec:	b29a      	uxth	r2, r3
 80116ee:	4b0d      	ldr	r3, [pc, #52]	@ (8011724 <tcp_parseopt+0xe8>)
 80116f0:	801a      	strh	r2, [r3, #0]
 80116f2:	e000      	b.n	80116f6 <tcp_parseopt+0xba>
          break;
 80116f4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80116f6:	4b0b      	ldr	r3, [pc, #44]	@ (8011724 <tcp_parseopt+0xe8>)
 80116f8:	881a      	ldrh	r2, [r3, #0]
 80116fa:	4b09      	ldr	r3, [pc, #36]	@ (8011720 <tcp_parseopt+0xe4>)
 80116fc:	881b      	ldrh	r3, [r3, #0]
 80116fe:	429a      	cmp	r2, r3
 8011700:	d3b2      	bcc.n	8011668 <tcp_parseopt+0x2c>
 8011702:	e004      	b.n	801170e <tcp_parseopt+0xd2>
          return;
 8011704:	bf00      	nop
 8011706:	e002      	b.n	801170e <tcp_parseopt+0xd2>
            return;
 8011708:	bf00      	nop
 801170a:	e000      	b.n	801170e <tcp_parseopt+0xd2>
            return;
 801170c:	bf00      	nop
      }
    }
  }
}
 801170e:	3710      	adds	r7, #16
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}
 8011714:	08019618 	.word	0x08019618
 8011718:	08019a7c 	.word	0x08019a7c
 801171c:	08019664 	.word	0x08019664
 8011720:	2000f2dc 	.word	0x2000f2dc
 8011724:	2000f2e4 	.word	0x2000f2e4

08011728 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011728:	b480      	push	{r7}
 801172a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801172c:	4b05      	ldr	r3, [pc, #20]	@ (8011744 <tcp_trigger_input_pcb_close+0x1c>)
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	f043 0310 	orr.w	r3, r3, #16
 8011734:	b2da      	uxtb	r2, r3
 8011736:	4b03      	ldr	r3, [pc, #12]	@ (8011744 <tcp_trigger_input_pcb_close+0x1c>)
 8011738:	701a      	strb	r2, [r3, #0]
}
 801173a:	bf00      	nop
 801173c:	46bd      	mov	sp, r7
 801173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011742:	4770      	bx	lr
 8011744:	2000f2f5 	.word	0x2000f2f5

08011748 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b084      	sub	sp, #16
 801174c:	af00      	add	r7, sp, #0
 801174e:	60f8      	str	r0, [r7, #12]
 8011750:	60b9      	str	r1, [r7, #8]
 8011752:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d00a      	beq.n	8011770 <tcp_route+0x28>
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	7a1b      	ldrb	r3, [r3, #8]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d006      	beq.n	8011770 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	7a1b      	ldrb	r3, [r3, #8]
 8011766:	4618      	mov	r0, r3
 8011768:	f7fb f850 	bl	800c80c <netif_get_by_index>
 801176c:	4603      	mov	r3, r0
 801176e:	e003      	b.n	8011778 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f003 fc49 	bl	8015008 <ip4_route>
 8011776:	4603      	mov	r3, r0
  }
}
 8011778:	4618      	mov	r0, r3
 801177a:	3710      	adds	r7, #16
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}

08011780 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011780:	b590      	push	{r4, r7, lr}
 8011782:	b087      	sub	sp, #28
 8011784:	af00      	add	r7, sp, #0
 8011786:	60f8      	str	r0, [r7, #12]
 8011788:	60b9      	str	r1, [r7, #8]
 801178a:	603b      	str	r3, [r7, #0]
 801178c:	4613      	mov	r3, r2
 801178e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d105      	bne.n	80117a2 <tcp_create_segment+0x22>
 8011796:	4b43      	ldr	r3, [pc, #268]	@ (80118a4 <tcp_create_segment+0x124>)
 8011798:	22a3      	movs	r2, #163	@ 0xa3
 801179a:	4943      	ldr	r1, [pc, #268]	@ (80118a8 <tcp_create_segment+0x128>)
 801179c:	4843      	ldr	r0, [pc, #268]	@ (80118ac <tcp_create_segment+0x12c>)
 801179e:	f005 f8d5 	bl	801694c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d105      	bne.n	80117b4 <tcp_create_segment+0x34>
 80117a8:	4b3e      	ldr	r3, [pc, #248]	@ (80118a4 <tcp_create_segment+0x124>)
 80117aa:	22a4      	movs	r2, #164	@ 0xa4
 80117ac:	4940      	ldr	r1, [pc, #256]	@ (80118b0 <tcp_create_segment+0x130>)
 80117ae:	483f      	ldr	r0, [pc, #252]	@ (80118ac <tcp_create_segment+0x12c>)
 80117b0:	f005 f8cc 	bl	801694c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80117b4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80117b8:	009b      	lsls	r3, r3, #2
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	f003 0304 	and.w	r3, r3, #4
 80117c0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80117c2:	2003      	movs	r0, #3
 80117c4:	f7fa fc96 	bl	800c0f4 <memp_malloc>
 80117c8:	6138      	str	r0, [r7, #16]
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d104      	bne.n	80117da <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80117d0:	68b8      	ldr	r0, [r7, #8]
 80117d2:	f7fb fba9 	bl	800cf28 <pbuf_free>
    return NULL;
 80117d6:	2300      	movs	r3, #0
 80117d8:	e060      	b.n	801189c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80117e0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	2200      	movs	r2, #0
 80117e6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	68ba      	ldr	r2, [r7, #8]
 80117ec:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	891a      	ldrh	r2, [r3, #8]
 80117f2:	7dfb      	ldrb	r3, [r7, #23]
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	429a      	cmp	r2, r3
 80117f8:	d205      	bcs.n	8011806 <tcp_create_segment+0x86>
 80117fa:	4b2a      	ldr	r3, [pc, #168]	@ (80118a4 <tcp_create_segment+0x124>)
 80117fc:	22b0      	movs	r2, #176	@ 0xb0
 80117fe:	492d      	ldr	r1, [pc, #180]	@ (80118b4 <tcp_create_segment+0x134>)
 8011800:	482a      	ldr	r0, [pc, #168]	@ (80118ac <tcp_create_segment+0x12c>)
 8011802:	f005 f8a3 	bl	801694c <iprintf>
  seg->len = p->tot_len - optlen;
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	891a      	ldrh	r2, [r3, #8]
 801180a:	7dfb      	ldrb	r3, [r7, #23]
 801180c:	b29b      	uxth	r3, r3
 801180e:	1ad3      	subs	r3, r2, r3
 8011810:	b29a      	uxth	r2, r3
 8011812:	693b      	ldr	r3, [r7, #16]
 8011814:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011816:	2114      	movs	r1, #20
 8011818:	68b8      	ldr	r0, [r7, #8]
 801181a:	f7fb faef 	bl	800cdfc <pbuf_add_header>
 801181e:	4603      	mov	r3, r0
 8011820:	2b00      	cmp	r3, #0
 8011822:	d004      	beq.n	801182e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011824:	6938      	ldr	r0, [r7, #16]
 8011826:	f7fd f804 	bl	800e832 <tcp_seg_free>
    return NULL;
 801182a:	2300      	movs	r3, #0
 801182c:	e036      	b.n	801189c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	685a      	ldr	r2, [r3, #4]
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	8ada      	ldrh	r2, [r3, #22]
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	68dc      	ldr	r4, [r3, #12]
 8011840:	4610      	mov	r0, r2
 8011842:	f7f9 ff7f 	bl	800b744 <lwip_htons>
 8011846:	4603      	mov	r3, r0
 8011848:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	8b1a      	ldrh	r2, [r3, #24]
 801184e:	693b      	ldr	r3, [r7, #16]
 8011850:	68dc      	ldr	r4, [r3, #12]
 8011852:	4610      	mov	r0, r2
 8011854:	f7f9 ff76 	bl	800b744 <lwip_htons>
 8011858:	4603      	mov	r3, r0
 801185a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	68dc      	ldr	r4, [r3, #12]
 8011860:	6838      	ldr	r0, [r7, #0]
 8011862:	f7f9 ff84 	bl	800b76e <lwip_htonl>
 8011866:	4603      	mov	r3, r0
 8011868:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801186a:	7dfb      	ldrb	r3, [r7, #23]
 801186c:	089b      	lsrs	r3, r3, #2
 801186e:	b2db      	uxtb	r3, r3
 8011870:	3305      	adds	r3, #5
 8011872:	b29b      	uxth	r3, r3
 8011874:	031b      	lsls	r3, r3, #12
 8011876:	b29a      	uxth	r2, r3
 8011878:	79fb      	ldrb	r3, [r7, #7]
 801187a:	b29b      	uxth	r3, r3
 801187c:	4313      	orrs	r3, r2
 801187e:	b29a      	uxth	r2, r3
 8011880:	693b      	ldr	r3, [r7, #16]
 8011882:	68dc      	ldr	r4, [r3, #12]
 8011884:	4610      	mov	r0, r2
 8011886:	f7f9 ff5d 	bl	800b744 <lwip_htons>
 801188a:	4603      	mov	r3, r0
 801188c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801188e:	693b      	ldr	r3, [r7, #16]
 8011890:	68db      	ldr	r3, [r3, #12]
 8011892:	2200      	movs	r2, #0
 8011894:	749a      	strb	r2, [r3, #18]
 8011896:	2200      	movs	r2, #0
 8011898:	74da      	strb	r2, [r3, #19]
  return seg;
 801189a:	693b      	ldr	r3, [r7, #16]
}
 801189c:	4618      	mov	r0, r3
 801189e:	371c      	adds	r7, #28
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd90      	pop	{r4, r7, pc}
 80118a4:	08019a98 	.word	0x08019a98
 80118a8:	08019acc 	.word	0x08019acc
 80118ac:	08019aec 	.word	0x08019aec
 80118b0:	08019b14 	.word	0x08019b14
 80118b4:	08019b38 	.word	0x08019b38

080118b8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b086      	sub	sp, #24
 80118bc:	af00      	add	r7, sp, #0
 80118be:	607b      	str	r3, [r7, #4]
 80118c0:	4603      	mov	r3, r0
 80118c2:	73fb      	strb	r3, [r7, #15]
 80118c4:	460b      	mov	r3, r1
 80118c6:	81bb      	strh	r3, [r7, #12]
 80118c8:	4613      	mov	r3, r2
 80118ca:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80118cc:	89bb      	ldrh	r3, [r7, #12]
 80118ce:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d105      	bne.n	80118e2 <tcp_pbuf_prealloc+0x2a>
 80118d6:	4b30      	ldr	r3, [pc, #192]	@ (8011998 <tcp_pbuf_prealloc+0xe0>)
 80118d8:	22e8      	movs	r2, #232	@ 0xe8
 80118da:	4930      	ldr	r1, [pc, #192]	@ (801199c <tcp_pbuf_prealloc+0xe4>)
 80118dc:	4830      	ldr	r0, [pc, #192]	@ (80119a0 <tcp_pbuf_prealloc+0xe8>)
 80118de:	f005 f835 	bl	801694c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80118e2:	6a3b      	ldr	r3, [r7, #32]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d105      	bne.n	80118f4 <tcp_pbuf_prealloc+0x3c>
 80118e8:	4b2b      	ldr	r3, [pc, #172]	@ (8011998 <tcp_pbuf_prealloc+0xe0>)
 80118ea:	22e9      	movs	r2, #233	@ 0xe9
 80118ec:	492d      	ldr	r1, [pc, #180]	@ (80119a4 <tcp_pbuf_prealloc+0xec>)
 80118ee:	482c      	ldr	r0, [pc, #176]	@ (80119a0 <tcp_pbuf_prealloc+0xe8>)
 80118f0:	f005 f82c 	bl	801694c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80118f4:	89ba      	ldrh	r2, [r7, #12]
 80118f6:	897b      	ldrh	r3, [r7, #10]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d221      	bcs.n	8011940 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80118fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011900:	f003 0302 	and.w	r3, r3, #2
 8011904:	2b00      	cmp	r3, #0
 8011906:	d111      	bne.n	801192c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011908:	6a3b      	ldr	r3, [r7, #32]
 801190a:	8b5b      	ldrh	r3, [r3, #26]
 801190c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011910:	2b00      	cmp	r3, #0
 8011912:	d115      	bne.n	8011940 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011914:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011918:	2b00      	cmp	r3, #0
 801191a:	d007      	beq.n	801192c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801191c:	6a3b      	ldr	r3, [r7, #32]
 801191e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8011920:	2b00      	cmp	r3, #0
 8011922:	d103      	bne.n	801192c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011924:	6a3b      	ldr	r3, [r7, #32]
 8011926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8011928:	2b00      	cmp	r3, #0
 801192a:	d009      	beq.n	8011940 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801192c:	89bb      	ldrh	r3, [r7, #12]
 801192e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8011932:	f023 0203 	bic.w	r2, r3, #3
 8011936:	897b      	ldrh	r3, [r7, #10]
 8011938:	4293      	cmp	r3, r2
 801193a:	bf28      	it	cs
 801193c:	4613      	movcs	r3, r2
 801193e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011940:	8af9      	ldrh	r1, [r7, #22]
 8011942:	7bfb      	ldrb	r3, [r7, #15]
 8011944:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011948:	4618      	mov	r0, r3
 801194a:	f7fb f809 	bl	800c960 <pbuf_alloc>
 801194e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011950:	693b      	ldr	r3, [r7, #16]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d101      	bne.n	801195a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011956:	2300      	movs	r3, #0
 8011958:	e019      	b.n	801198e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801195a:	693b      	ldr	r3, [r7, #16]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d006      	beq.n	8011970 <tcp_pbuf_prealloc+0xb8>
 8011962:	4b0d      	ldr	r3, [pc, #52]	@ (8011998 <tcp_pbuf_prealloc+0xe0>)
 8011964:	f240 120b 	movw	r2, #267	@ 0x10b
 8011968:	490f      	ldr	r1, [pc, #60]	@ (80119a8 <tcp_pbuf_prealloc+0xf0>)
 801196a:	480d      	ldr	r0, [pc, #52]	@ (80119a0 <tcp_pbuf_prealloc+0xe8>)
 801196c:	f004 ffee 	bl	801694c <iprintf>
  *oversize = p->len - length;
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	895a      	ldrh	r2, [r3, #10]
 8011974:	89bb      	ldrh	r3, [r7, #12]
 8011976:	1ad3      	subs	r3, r2, r3
 8011978:	b29a      	uxth	r2, r3
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801197e:	693b      	ldr	r3, [r7, #16]
 8011980:	89ba      	ldrh	r2, [r7, #12]
 8011982:	811a      	strh	r2, [r3, #8]
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	891a      	ldrh	r2, [r3, #8]
 8011988:	693b      	ldr	r3, [r7, #16]
 801198a:	815a      	strh	r2, [r3, #10]
  return p;
 801198c:	693b      	ldr	r3, [r7, #16]
}
 801198e:	4618      	mov	r0, r3
 8011990:	3718      	adds	r7, #24
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	08019a98 	.word	0x08019a98
 801199c:	08019b50 	.word	0x08019b50
 80119a0:	08019aec 	.word	0x08019aec
 80119a4:	08019b74 	.word	0x08019b74
 80119a8:	08019b94 	.word	0x08019b94

080119ac <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b082      	sub	sp, #8
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
 80119b4:	460b      	mov	r3, r1
 80119b6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d106      	bne.n	80119cc <tcp_write_checks+0x20>
 80119be:	4b33      	ldr	r3, [pc, #204]	@ (8011a8c <tcp_write_checks+0xe0>)
 80119c0:	f240 1233 	movw	r2, #307	@ 0x133
 80119c4:	4932      	ldr	r1, [pc, #200]	@ (8011a90 <tcp_write_checks+0xe4>)
 80119c6:	4833      	ldr	r0, [pc, #204]	@ (8011a94 <tcp_write_checks+0xe8>)
 80119c8:	f004 ffc0 	bl	801694c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	7d1b      	ldrb	r3, [r3, #20]
 80119d0:	2b04      	cmp	r3, #4
 80119d2:	d00e      	beq.n	80119f2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80119d8:	2b07      	cmp	r3, #7
 80119da:	d00a      	beq.n	80119f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80119e0:	2b02      	cmp	r3, #2
 80119e2:	d006      	beq.n	80119f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80119e8:	2b03      	cmp	r3, #3
 80119ea:	d002      	beq.n	80119f2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80119ec:	f06f 030a 	mvn.w	r3, #10
 80119f0:	e048      	b.n	8011a84 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80119f2:	887b      	ldrh	r3, [r7, #2]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d101      	bne.n	80119fc <tcp_write_checks+0x50>
    return ERR_OK;
 80119f8:	2300      	movs	r3, #0
 80119fa:	e043      	b.n	8011a84 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011a02:	887a      	ldrh	r2, [r7, #2]
 8011a04:	429a      	cmp	r2, r3
 8011a06:	d909      	bls.n	8011a1c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	8b5b      	ldrh	r3, [r3, #26]
 8011a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a10:	b29a      	uxth	r2, r3
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011a16:	f04f 33ff 	mov.w	r3, #4294967295
 8011a1a:	e033      	b.n	8011a84 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011a22:	2b08      	cmp	r3, #8
 8011a24:	d909      	bls.n	8011a3a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	8b5b      	ldrh	r3, [r3, #26]
 8011a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a2e:	b29a      	uxth	r2, r3
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011a34:	f04f 33ff 	mov.w	r3, #4294967295
 8011a38:	e024      	b.n	8011a84 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d00f      	beq.n	8011a64 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d11a      	bne.n	8011a82 <tcp_write_checks+0xd6>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d116      	bne.n	8011a82 <tcp_write_checks+0xd6>
 8011a54:	4b0d      	ldr	r3, [pc, #52]	@ (8011a8c <tcp_write_checks+0xe0>)
 8011a56:	f240 1255 	movw	r2, #341	@ 0x155
 8011a5a:	490f      	ldr	r1, [pc, #60]	@ (8011a98 <tcp_write_checks+0xec>)
 8011a5c:	480d      	ldr	r0, [pc, #52]	@ (8011a94 <tcp_write_checks+0xe8>)
 8011a5e:	f004 ff75 	bl	801694c <iprintf>
 8011a62:	e00e      	b.n	8011a82 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d103      	bne.n	8011a74 <tcp_write_checks+0xc8>
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d006      	beq.n	8011a82 <tcp_write_checks+0xd6>
 8011a74:	4b05      	ldr	r3, [pc, #20]	@ (8011a8c <tcp_write_checks+0xe0>)
 8011a76:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8011a7a:	4908      	ldr	r1, [pc, #32]	@ (8011a9c <tcp_write_checks+0xf0>)
 8011a7c:	4805      	ldr	r0, [pc, #20]	@ (8011a94 <tcp_write_checks+0xe8>)
 8011a7e:	f004 ff65 	bl	801694c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011a82:	2300      	movs	r3, #0
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3708      	adds	r7, #8
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}
 8011a8c:	08019a98 	.word	0x08019a98
 8011a90:	08019ba8 	.word	0x08019ba8
 8011a94:	08019aec 	.word	0x08019aec
 8011a98:	08019bc8 	.word	0x08019bc8
 8011a9c:	08019c04 	.word	0x08019c04

08011aa0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011aa0:	b590      	push	{r4, r7, lr}
 8011aa2:	b09b      	sub	sp, #108	@ 0x6c
 8011aa4:	af04      	add	r7, sp, #16
 8011aa6:	60f8      	str	r0, [r7, #12]
 8011aa8:	60b9      	str	r1, [r7, #8]
 8011aaa:	4611      	mov	r1, r2
 8011aac:	461a      	mov	r2, r3
 8011aae:	460b      	mov	r3, r1
 8011ab0:	80fb      	strh	r3, [r7, #6]
 8011ab2:	4613      	mov	r3, r2
 8011ab4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011aba:	2300      	movs	r3, #0
 8011abc:	653b      	str	r3, [r7, #80]	@ 0x50
 8011abe:	2300      	movs	r3, #0
 8011ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011aca:	2300      	movs	r3, #0
 8011acc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011ada:	2300      	movs	r3, #0
 8011adc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d109      	bne.n	8011afc <tcp_write+0x5c>
 8011ae8:	4ba4      	ldr	r3, [pc, #656]	@ (8011d7c <tcp_write+0x2dc>)
 8011aea:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8011aee:	49a4      	ldr	r1, [pc, #656]	@ (8011d80 <tcp_write+0x2e0>)
 8011af0:	48a4      	ldr	r0, [pc, #656]	@ (8011d84 <tcp_write+0x2e4>)
 8011af2:	f004 ff2b 	bl	801694c <iprintf>
 8011af6:	f06f 030f 	mvn.w	r3, #15
 8011afa:	e32a      	b.n	8012152 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011b02:	085b      	lsrs	r3, r3, #1
 8011b04:	b29a      	uxth	r2, r3
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b0a:	4293      	cmp	r3, r2
 8011b0c:	bf28      	it	cs
 8011b0e:	4613      	movcs	r3, r2
 8011b10:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011b12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d102      	bne.n	8011b1e <tcp_write+0x7e>
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b1c:	e000      	b.n	8011b20 <tcp_write+0x80>
 8011b1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011b20:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d109      	bne.n	8011b3c <tcp_write+0x9c>
 8011b28:	4b94      	ldr	r3, [pc, #592]	@ (8011d7c <tcp_write+0x2dc>)
 8011b2a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8011b2e:	4996      	ldr	r1, [pc, #600]	@ (8011d88 <tcp_write+0x2e8>)
 8011b30:	4894      	ldr	r0, [pc, #592]	@ (8011d84 <tcp_write+0x2e4>)
 8011b32:	f004 ff0b 	bl	801694c <iprintf>
 8011b36:	f06f 030f 	mvn.w	r3, #15
 8011b3a:	e30a      	b.n	8012152 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011b3c:	88fb      	ldrh	r3, [r7, #6]
 8011b3e:	4619      	mov	r1, r3
 8011b40:	68f8      	ldr	r0, [r7, #12]
 8011b42:	f7ff ff33 	bl	80119ac <tcp_write_checks>
 8011b46:	4603      	mov	r3, r0
 8011b48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8011b4c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d002      	beq.n	8011b5a <tcp_write+0xba>
    return err;
 8011b54:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011b58:	e2fb      	b.n	8012152 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011b60:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011b64:	2300      	movs	r3, #0
 8011b66:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	f000 80f6 	beq.w	8011d60 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b78:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b7a:	e002      	b.n	8011b82 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011b7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d1f8      	bne.n	8011b7c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011b8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b8c:	7a9b      	ldrb	r3, [r3, #10]
 8011b8e:	009b      	lsls	r3, r3, #2
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	f003 0304 	and.w	r3, r3, #4
 8011b96:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011b98:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011b9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b9c:	891b      	ldrh	r3, [r3, #8]
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	8c3b      	ldrh	r3, [r7, #32]
 8011ba2:	440b      	add	r3, r1
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	da06      	bge.n	8011bb6 <tcp_write+0x116>
 8011ba8:	4b74      	ldr	r3, [pc, #464]	@ (8011d7c <tcp_write+0x2dc>)
 8011baa:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011bae:	4977      	ldr	r1, [pc, #476]	@ (8011d8c <tcp_write+0x2ec>)
 8011bb0:	4874      	ldr	r0, [pc, #464]	@ (8011d84 <tcp_write+0x2e4>)
 8011bb2:	f004 fecb 	bl	801694c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bb8:	891a      	ldrh	r2, [r3, #8]
 8011bba:	8c3b      	ldrh	r3, [r7, #32]
 8011bbc:	4413      	add	r3, r2
 8011bbe:	b29b      	uxth	r3, r3
 8011bc0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011bc2:	1ad3      	subs	r3, r2, r3
 8011bc4:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011bcc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011bce:	8a7b      	ldrh	r3, [r7, #18]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d026      	beq.n	8011c22 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011bd4:	8a7b      	ldrh	r3, [r7, #18]
 8011bd6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d206      	bcs.n	8011bea <tcp_write+0x14a>
 8011bdc:	4b67      	ldr	r3, [pc, #412]	@ (8011d7c <tcp_write+0x2dc>)
 8011bde:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8011be2:	496b      	ldr	r1, [pc, #428]	@ (8011d90 <tcp_write+0x2f0>)
 8011be4:	4867      	ldr	r0, [pc, #412]	@ (8011d84 <tcp_write+0x2e4>)
 8011be6:	f004 feb1 	bl	801694c <iprintf>
      seg = last_unsent;
 8011bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011bee:	8a7b      	ldrh	r3, [r7, #18]
 8011bf0:	88fa      	ldrh	r2, [r7, #6]
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	bf28      	it	cs
 8011bf6:	4613      	movcs	r3, r2
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011bfc:	4293      	cmp	r3, r2
 8011bfe:	bf28      	it	cs
 8011c00:	4613      	movcs	r3, r2
 8011c02:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8011c04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011c08:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011c0a:	4413      	add	r3, r2
 8011c0c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8011c10:	8a7a      	ldrh	r2, [r7, #18]
 8011c12:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011c14:	1ad3      	subs	r3, r2, r3
 8011c16:	b29b      	uxth	r3, r3
 8011c18:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011c1a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011c1c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011c1e:	1ad3      	subs	r3, r2, r3
 8011c20:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011c22:	8a7b      	ldrh	r3, [r7, #18]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d00b      	beq.n	8011c40 <tcp_write+0x1a0>
 8011c28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011c2c:	88fb      	ldrh	r3, [r7, #6]
 8011c2e:	429a      	cmp	r2, r3
 8011c30:	d006      	beq.n	8011c40 <tcp_write+0x1a0>
 8011c32:	4b52      	ldr	r3, [pc, #328]	@ (8011d7c <tcp_write+0x2dc>)
 8011c34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c38:	4956      	ldr	r1, [pc, #344]	@ (8011d94 <tcp_write+0x2f4>)
 8011c3a:	4852      	ldr	r0, [pc, #328]	@ (8011d84 <tcp_write+0x2e4>)
 8011c3c:	f004 fe86 	bl	801694c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011c40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011c44:	88fb      	ldrh	r3, [r7, #6]
 8011c46:	429a      	cmp	r2, r3
 8011c48:	f080 8167 	bcs.w	8011f1a <tcp_write+0x47a>
 8011c4c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	f000 8163 	beq.w	8011f1a <tcp_write+0x47a>
 8011c54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c56:	891b      	ldrh	r3, [r3, #8]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	f000 815e 	beq.w	8011f1a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011c5e:	88fa      	ldrh	r2, [r7, #6]
 8011c60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011c64:	1ad2      	subs	r2, r2, r3
 8011c66:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011c68:	4293      	cmp	r3, r2
 8011c6a:	bfa8      	it	ge
 8011c6c:	4613      	movge	r3, r2
 8011c6e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011c70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c72:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011c74:	797b      	ldrb	r3, [r7, #5]
 8011c76:	f003 0301 	and.w	r3, r3, #1
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d027      	beq.n	8011cce <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011c7e:	f107 0012 	add.w	r0, r7, #18
 8011c82:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011c84:	8bf9      	ldrh	r1, [r7, #30]
 8011c86:	2301      	movs	r3, #1
 8011c88:	9302      	str	r3, [sp, #8]
 8011c8a:	797b      	ldrb	r3, [r7, #5]
 8011c8c:	9301      	str	r3, [sp, #4]
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	9300      	str	r3, [sp, #0]
 8011c92:	4603      	mov	r3, r0
 8011c94:	2000      	movs	r0, #0
 8011c96:	f7ff fe0f 	bl	80118b8 <tcp_pbuf_prealloc>
 8011c9a:	6578      	str	r0, [r7, #84]	@ 0x54
 8011c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	f000 8225 	beq.w	80120ee <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ca6:	6858      	ldr	r0, [r3, #4]
 8011ca8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011cac:	68ba      	ldr	r2, [r7, #8]
 8011cae:	4413      	add	r3, r2
 8011cb0:	8bfa      	ldrh	r2, [r7, #30]
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	f004 ff7b 	bl	8016bae <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011cb8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011cba:	f7fb f9c3 	bl	800d044 <pbuf_clen>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	461a      	mov	r2, r3
 8011cc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011cc6:	4413      	add	r3, r2
 8011cc8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8011ccc:	e041      	b.n	8011d52 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011cce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011cd0:	685b      	ldr	r3, [r3, #4]
 8011cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8011cd4:	e002      	b.n	8011cdc <tcp_write+0x23c>
 8011cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8011cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d1f8      	bne.n	8011cd6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ce6:	7b1b      	ldrb	r3, [r3, #12]
 8011ce8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d115      	bne.n	8011d1c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cf2:	685b      	ldr	r3, [r3, #4]
 8011cf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011cf6:	8952      	ldrh	r2, [r2, #10]
 8011cf8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011cfa:	68ba      	ldr	r2, [r7, #8]
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d10d      	bne.n	8011d1c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011d00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d006      	beq.n	8011d16 <tcp_write+0x276>
 8011d08:	4b1c      	ldr	r3, [pc, #112]	@ (8011d7c <tcp_write+0x2dc>)
 8011d0a:	f240 2231 	movw	r2, #561	@ 0x231
 8011d0e:	4922      	ldr	r1, [pc, #136]	@ (8011d98 <tcp_write+0x2f8>)
 8011d10:	481c      	ldr	r0, [pc, #112]	@ (8011d84 <tcp_write+0x2e4>)
 8011d12:	f004 fe1b 	bl	801694c <iprintf>
          extendlen = seglen;
 8011d16:	8bfb      	ldrh	r3, [r7, #30]
 8011d18:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8011d1a:	e01a      	b.n	8011d52 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011d1c:	8bfb      	ldrh	r3, [r7, #30]
 8011d1e:	2201      	movs	r2, #1
 8011d20:	4619      	mov	r1, r3
 8011d22:	2000      	movs	r0, #0
 8011d24:	f7fa fe1c 	bl	800c960 <pbuf_alloc>
 8011d28:	6578      	str	r0, [r7, #84]	@ 0x54
 8011d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	f000 81e0 	beq.w	80120f2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011d32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011d36:	68ba      	ldr	r2, [r7, #8]
 8011d38:	441a      	add	r2, r3
 8011d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d3c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011d3e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011d40:	f7fb f980 	bl	800d044 <pbuf_clen>
 8011d44:	4603      	mov	r3, r0
 8011d46:	461a      	mov	r2, r3
 8011d48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011d4c:	4413      	add	r3, r2
 8011d4e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011d52:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011d56:	8bfb      	ldrh	r3, [r7, #30]
 8011d58:	4413      	add	r3, r2
 8011d5a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8011d5e:	e0dc      	b.n	8011f1a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	f000 80d7 	beq.w	8011f1a <tcp_write+0x47a>
 8011d6c:	4b03      	ldr	r3, [pc, #12]	@ (8011d7c <tcp_write+0x2dc>)
 8011d6e:	f240 224a 	movw	r2, #586	@ 0x24a
 8011d72:	490a      	ldr	r1, [pc, #40]	@ (8011d9c <tcp_write+0x2fc>)
 8011d74:	4803      	ldr	r0, [pc, #12]	@ (8011d84 <tcp_write+0x2e4>)
 8011d76:	f004 fde9 	bl	801694c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011d7a:	e0ce      	b.n	8011f1a <tcp_write+0x47a>
 8011d7c:	08019a98 	.word	0x08019a98
 8011d80:	08019c38 	.word	0x08019c38
 8011d84:	08019aec 	.word	0x08019aec
 8011d88:	08019c50 	.word	0x08019c50
 8011d8c:	08019c84 	.word	0x08019c84
 8011d90:	08019c9c 	.word	0x08019c9c
 8011d94:	08019cbc 	.word	0x08019cbc
 8011d98:	08019cdc 	.word	0x08019cdc
 8011d9c:	08019d08 	.word	0x08019d08
    struct pbuf *p;
    u16_t left = len - pos;
 8011da0:	88fa      	ldrh	r2, [r7, #6]
 8011da2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011da6:	1ad3      	subs	r3, r2, r3
 8011da8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011daa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011db2:	1ad3      	subs	r3, r2, r3
 8011db4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011db6:	8b7a      	ldrh	r2, [r7, #26]
 8011db8:	8bbb      	ldrh	r3, [r7, #28]
 8011dba:	4293      	cmp	r3, r2
 8011dbc:	bf28      	it	cs
 8011dbe:	4613      	movcs	r3, r2
 8011dc0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011dc2:	797b      	ldrb	r3, [r7, #5]
 8011dc4:	f003 0301 	and.w	r3, r3, #1
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d036      	beq.n	8011e3a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011dcc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011dd0:	b29a      	uxth	r2, r3
 8011dd2:	8b3b      	ldrh	r3, [r7, #24]
 8011dd4:	4413      	add	r3, r2
 8011dd6:	b299      	uxth	r1, r3
 8011dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	bf0c      	ite	eq
 8011dde:	2301      	moveq	r3, #1
 8011de0:	2300      	movne	r3, #0
 8011de2:	b2db      	uxtb	r3, r3
 8011de4:	f107 0012 	add.w	r0, r7, #18
 8011de8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011dea:	9302      	str	r3, [sp, #8]
 8011dec:	797b      	ldrb	r3, [r7, #5]
 8011dee:	9301      	str	r3, [sp, #4]
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	9300      	str	r3, [sp, #0]
 8011df4:	4603      	mov	r3, r0
 8011df6:	2036      	movs	r0, #54	@ 0x36
 8011df8:	f7ff fd5e 	bl	80118b8 <tcp_pbuf_prealloc>
 8011dfc:	6338      	str	r0, [r7, #48]	@ 0x30
 8011dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	f000 8178 	beq.w	80120f6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e08:	895b      	ldrh	r3, [r3, #10]
 8011e0a:	8b3a      	ldrh	r2, [r7, #24]
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d906      	bls.n	8011e1e <tcp_write+0x37e>
 8011e10:	4b8c      	ldr	r3, [pc, #560]	@ (8012044 <tcp_write+0x5a4>)
 8011e12:	f240 2266 	movw	r2, #614	@ 0x266
 8011e16:	498c      	ldr	r1, [pc, #560]	@ (8012048 <tcp_write+0x5a8>)
 8011e18:	488c      	ldr	r0, [pc, #560]	@ (801204c <tcp_write+0x5ac>)
 8011e1a:	f004 fd97 	bl	801694c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e20:	685a      	ldr	r2, [r3, #4]
 8011e22:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011e26:	18d0      	adds	r0, r2, r3
 8011e28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011e2c:	68ba      	ldr	r2, [r7, #8]
 8011e2e:	4413      	add	r3, r2
 8011e30:	8b3a      	ldrh	r2, [r7, #24]
 8011e32:	4619      	mov	r1, r3
 8011e34:	f004 febb 	bl	8016bae <memcpy>
 8011e38:	e02f      	b.n	8011e9a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011e3a:	8a7b      	ldrh	r3, [r7, #18]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d006      	beq.n	8011e4e <tcp_write+0x3ae>
 8011e40:	4b80      	ldr	r3, [pc, #512]	@ (8012044 <tcp_write+0x5a4>)
 8011e42:	f240 2271 	movw	r2, #625	@ 0x271
 8011e46:	4982      	ldr	r1, [pc, #520]	@ (8012050 <tcp_write+0x5b0>)
 8011e48:	4880      	ldr	r0, [pc, #512]	@ (801204c <tcp_write+0x5ac>)
 8011e4a:	f004 fd7f 	bl	801694c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011e4e:	8b3b      	ldrh	r3, [r7, #24]
 8011e50:	2201      	movs	r2, #1
 8011e52:	4619      	mov	r1, r3
 8011e54:	2036      	movs	r0, #54	@ 0x36
 8011e56:	f7fa fd83 	bl	800c960 <pbuf_alloc>
 8011e5a:	6178      	str	r0, [r7, #20]
 8011e5c:	697b      	ldr	r3, [r7, #20]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	f000 814b 	beq.w	80120fa <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011e64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011e68:	68ba      	ldr	r2, [r7, #8]
 8011e6a:	441a      	add	r2, r3
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011e70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011e74:	b29b      	uxth	r3, r3
 8011e76:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	2036      	movs	r0, #54	@ 0x36
 8011e7e:	f7fa fd6f 	bl	800c960 <pbuf_alloc>
 8011e82:	6338      	str	r0, [r7, #48]	@ 0x30
 8011e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d103      	bne.n	8011e92 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011e8a:	6978      	ldr	r0, [r7, #20]
 8011e8c:	f7fb f84c 	bl	800cf28 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011e90:	e136      	b.n	8012100 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011e92:	6979      	ldr	r1, [r7, #20]
 8011e94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011e96:	f7fb f915 	bl	800d0c4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011e9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011e9c:	f7fb f8d2 	bl	800d044 <pbuf_clen>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	461a      	mov	r2, r3
 8011ea4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011ea8:	4413      	add	r3, r2
 8011eaa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011eae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011eb2:	2b09      	cmp	r3, #9
 8011eb4:	d903      	bls.n	8011ebe <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011eb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011eb8:	f7fb f836 	bl	800cf28 <pbuf_free>
      goto memerr;
 8011ebc:	e120      	b.n	8012100 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011ec2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011ec6:	441a      	add	r2, r3
 8011ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ecc:	9300      	str	r3, [sp, #0]
 8011ece:	4613      	mov	r3, r2
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011ed4:	68f8      	ldr	r0, [r7, #12]
 8011ed6:	f7ff fc53 	bl	8011780 <tcp_create_segment>
 8011eda:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	f000 810d 	beq.w	80120fe <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d102      	bne.n	8011ef0 <tcp_write+0x450>
      queue = seg;
 8011eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011eec:	647b      	str	r3, [r7, #68]	@ 0x44
 8011eee:	e00c      	b.n	8011f0a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d106      	bne.n	8011f04 <tcp_write+0x464>
 8011ef6:	4b53      	ldr	r3, [pc, #332]	@ (8012044 <tcp_write+0x5a4>)
 8011ef8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8011efc:	4955      	ldr	r1, [pc, #340]	@ (8012054 <tcp_write+0x5b4>)
 8011efe:	4853      	ldr	r0, [pc, #332]	@ (801204c <tcp_write+0x5ac>)
 8011f00:	f004 fd24 	bl	801694c <iprintf>
      prev_seg->next = seg;
 8011f04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011f06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011f08:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f0c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011f0e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011f12:	8b3b      	ldrh	r3, [r7, #24]
 8011f14:	4413      	add	r3, r2
 8011f16:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8011f1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011f1e:	88fb      	ldrh	r3, [r7, #6]
 8011f20:	429a      	cmp	r2, r3
 8011f22:	f4ff af3d 	bcc.w	8011da0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011f26:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d02c      	beq.n	8011f86 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011f2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f2e:	685b      	ldr	r3, [r3, #4]
 8011f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011f32:	e01e      	b.n	8011f72 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f36:	891a      	ldrh	r2, [r3, #8]
 8011f38:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011f3a:	4413      	add	r3, r2
 8011f3c:	b29a      	uxth	r2, r3
 8011f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f40:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d110      	bne.n	8011f6c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f4c:	685b      	ldr	r3, [r3, #4]
 8011f4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f50:	8952      	ldrh	r2, [r2, #10]
 8011f52:	4413      	add	r3, r2
 8011f54:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011f56:	68b9      	ldr	r1, [r7, #8]
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f004 fe28 	bl	8016bae <memcpy>
        p->len += oversize_used;
 8011f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f60:	895a      	ldrh	r2, [r3, #10]
 8011f62:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011f64:	4413      	add	r3, r2
 8011f66:	b29a      	uxth	r2, r3
 8011f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f6a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d1dd      	bne.n	8011f34 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011f78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f7a:	891a      	ldrh	r2, [r3, #8]
 8011f7c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011f7e:	4413      	add	r3, r2
 8011f80:	b29a      	uxth	r2, r3
 8011f82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f84:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011f86:	8a7a      	ldrh	r2, [r7, #18]
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d018      	beq.n	8011fc6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d106      	bne.n	8011fa8 <tcp_write+0x508>
 8011f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8012044 <tcp_write+0x5a4>)
 8011f9c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8011fa0:	492d      	ldr	r1, [pc, #180]	@ (8012058 <tcp_write+0x5b8>)
 8011fa2:	482a      	ldr	r0, [pc, #168]	@ (801204c <tcp_write+0x5ac>)
 8011fa4:	f004 fcd2 	bl	801694c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011fa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f7fb f888 	bl	800d0c4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011fb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011fb6:	891a      	ldrh	r2, [r3, #8]
 8011fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fba:	891b      	ldrh	r3, [r3, #8]
 8011fbc:	4413      	add	r3, r2
 8011fbe:	b29a      	uxth	r2, r3
 8011fc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011fc2:	811a      	strh	r2, [r3, #8]
 8011fc4:	e037      	b.n	8012036 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011fc6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d034      	beq.n	8012036 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d003      	beq.n	8011fda <tcp_write+0x53a>
 8011fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011fd4:	685b      	ldr	r3, [r3, #4]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d106      	bne.n	8011fe8 <tcp_write+0x548>
 8011fda:	4b1a      	ldr	r3, [pc, #104]	@ (8012044 <tcp_write+0x5a4>)
 8011fdc:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8011fe0:	491e      	ldr	r1, [pc, #120]	@ (801205c <tcp_write+0x5bc>)
 8011fe2:	481a      	ldr	r0, [pc, #104]	@ (801204c <tcp_write+0x5ac>)
 8011fe4:	f004 fcb2 	bl	801694c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011fe8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011fea:	685b      	ldr	r3, [r3, #4]
 8011fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011fee:	e009      	b.n	8012004 <tcp_write+0x564>
      p->tot_len += extendlen;
 8011ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ff2:	891a      	ldrh	r2, [r3, #8]
 8011ff4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011ff6:	4413      	add	r3, r2
 8011ff8:	b29a      	uxth	r2, r3
 8011ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ffc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d1f1      	bne.n	8011ff0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801200c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801200e:	891a      	ldrh	r2, [r3, #8]
 8012010:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012012:	4413      	add	r3, r2
 8012014:	b29a      	uxth	r2, r3
 8012016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012018:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801201a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801201c:	895a      	ldrh	r2, [r3, #10]
 801201e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012020:	4413      	add	r3, r2
 8012022:	b29a      	uxth	r2, r3
 8012024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012026:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801202a:	891a      	ldrh	r2, [r3, #8]
 801202c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801202e:	4413      	add	r3, r2
 8012030:	b29a      	uxth	r2, r3
 8012032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012034:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012038:	2b00      	cmp	r3, #0
 801203a:	d111      	bne.n	8012060 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012040:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012042:	e010      	b.n	8012066 <tcp_write+0x5c6>
 8012044:	08019a98 	.word	0x08019a98
 8012048:	08019d38 	.word	0x08019d38
 801204c:	08019aec 	.word	0x08019aec
 8012050:	08019d78 	.word	0x08019d78
 8012054:	08019d88 	.word	0x08019d88
 8012058:	08019d9c 	.word	0x08019d9c
 801205c:	08019dd4 	.word	0x08019dd4
  } else {
    last_unsent->next = queue;
 8012060:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012064:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801206a:	88fb      	ldrh	r3, [r7, #6]
 801206c:	441a      	add	r2, r3
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012078:	88fb      	ldrh	r3, [r7, #6]
 801207a:	1ad3      	subs	r3, r2, r3
 801207c:	b29a      	uxth	r2, r3
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801208a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012094:	2b00      	cmp	r3, #0
 8012096:	d00e      	beq.n	80120b6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801209c:	2b00      	cmp	r3, #0
 801209e:	d10a      	bne.n	80120b6 <tcp_write+0x616>
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d106      	bne.n	80120b6 <tcp_write+0x616>
 80120a8:	4b2c      	ldr	r3, [pc, #176]	@ (801215c <tcp_write+0x6bc>)
 80120aa:	f240 3212 	movw	r2, #786	@ 0x312
 80120ae:	492c      	ldr	r1, [pc, #176]	@ (8012160 <tcp_write+0x6c0>)
 80120b0:	482c      	ldr	r0, [pc, #176]	@ (8012164 <tcp_write+0x6c4>)
 80120b2:	f004 fc4b 	bl	801694c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80120b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d016      	beq.n	80120ea <tcp_write+0x64a>
 80120bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120be:	68db      	ldr	r3, [r3, #12]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d012      	beq.n	80120ea <tcp_write+0x64a>
 80120c4:	797b      	ldrb	r3, [r7, #5]
 80120c6:	f003 0302 	and.w	r3, r3, #2
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d10d      	bne.n	80120ea <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80120ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120d0:	68db      	ldr	r3, [r3, #12]
 80120d2:	899b      	ldrh	r3, [r3, #12]
 80120d4:	b29c      	uxth	r4, r3
 80120d6:	2008      	movs	r0, #8
 80120d8:	f7f9 fb34 	bl	800b744 <lwip_htons>
 80120dc:	4603      	mov	r3, r0
 80120de:	461a      	mov	r2, r3
 80120e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120e2:	68db      	ldr	r3, [r3, #12]
 80120e4:	4322      	orrs	r2, r4
 80120e6:	b292      	uxth	r2, r2
 80120e8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80120ea:	2300      	movs	r3, #0
 80120ec:	e031      	b.n	8012152 <tcp_write+0x6b2>
          goto memerr;
 80120ee:	bf00      	nop
 80120f0:	e006      	b.n	8012100 <tcp_write+0x660>
            goto memerr;
 80120f2:	bf00      	nop
 80120f4:	e004      	b.n	8012100 <tcp_write+0x660>
        goto memerr;
 80120f6:	bf00      	nop
 80120f8:	e002      	b.n	8012100 <tcp_write+0x660>
        goto memerr;
 80120fa:	bf00      	nop
 80120fc:	e000      	b.n	8012100 <tcp_write+0x660>
      goto memerr;
 80120fe:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	8b5b      	ldrh	r3, [r3, #26]
 8012104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012108:	b29a      	uxth	r2, r3
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801210e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012110:	2b00      	cmp	r3, #0
 8012112:	d002      	beq.n	801211a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012114:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012116:	f7fa ff07 	bl	800cf28 <pbuf_free>
  }
  if (queue != NULL) {
 801211a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801211c:	2b00      	cmp	r3, #0
 801211e:	d002      	beq.n	8012126 <tcp_write+0x686>
    tcp_segs_free(queue);
 8012120:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8012122:	f7fc fb71 	bl	800e808 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801212c:	2b00      	cmp	r3, #0
 801212e:	d00e      	beq.n	801214e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012134:	2b00      	cmp	r3, #0
 8012136:	d10a      	bne.n	801214e <tcp_write+0x6ae>
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801213c:	2b00      	cmp	r3, #0
 801213e:	d106      	bne.n	801214e <tcp_write+0x6ae>
 8012140:	4b06      	ldr	r3, [pc, #24]	@ (801215c <tcp_write+0x6bc>)
 8012142:	f240 3227 	movw	r2, #807	@ 0x327
 8012146:	4906      	ldr	r1, [pc, #24]	@ (8012160 <tcp_write+0x6c0>)
 8012148:	4806      	ldr	r0, [pc, #24]	@ (8012164 <tcp_write+0x6c4>)
 801214a:	f004 fbff 	bl	801694c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801214e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012152:	4618      	mov	r0, r3
 8012154:	375c      	adds	r7, #92	@ 0x5c
 8012156:	46bd      	mov	sp, r7
 8012158:	bd90      	pop	{r4, r7, pc}
 801215a:	bf00      	nop
 801215c:	08019a98 	.word	0x08019a98
 8012160:	08019e0c 	.word	0x08019e0c
 8012164:	08019aec 	.word	0x08019aec

08012168 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012168:	b590      	push	{r4, r7, lr}
 801216a:	b08b      	sub	sp, #44	@ 0x2c
 801216c:	af02      	add	r7, sp, #8
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	460b      	mov	r3, r1
 8012172:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012174:	2300      	movs	r3, #0
 8012176:	61fb      	str	r3, [r7, #28]
 8012178:	2300      	movs	r3, #0
 801217a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801217c:	2300      	movs	r3, #0
 801217e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d106      	bne.n	8012194 <tcp_split_unsent_seg+0x2c>
 8012186:	4b95      	ldr	r3, [pc, #596]	@ (80123dc <tcp_split_unsent_seg+0x274>)
 8012188:	f240 324b 	movw	r2, #843	@ 0x34b
 801218c:	4994      	ldr	r1, [pc, #592]	@ (80123e0 <tcp_split_unsent_seg+0x278>)
 801218e:	4895      	ldr	r0, [pc, #596]	@ (80123e4 <tcp_split_unsent_seg+0x27c>)
 8012190:	f004 fbdc 	bl	801694c <iprintf>

  useg = pcb->unsent;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012198:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d102      	bne.n	80121a6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80121a0:	f04f 33ff 	mov.w	r3, #4294967295
 80121a4:	e116      	b.n	80123d4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80121a6:	887b      	ldrh	r3, [r7, #2]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d109      	bne.n	80121c0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80121ac:	4b8b      	ldr	r3, [pc, #556]	@ (80123dc <tcp_split_unsent_seg+0x274>)
 80121ae:	f240 3253 	movw	r2, #851	@ 0x353
 80121b2:	498d      	ldr	r1, [pc, #564]	@ (80123e8 <tcp_split_unsent_seg+0x280>)
 80121b4:	488b      	ldr	r0, [pc, #556]	@ (80123e4 <tcp_split_unsent_seg+0x27c>)
 80121b6:	f004 fbc9 	bl	801694c <iprintf>
    return ERR_VAL;
 80121ba:	f06f 0305 	mvn.w	r3, #5
 80121be:	e109      	b.n	80123d4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80121c0:	697b      	ldr	r3, [r7, #20]
 80121c2:	891b      	ldrh	r3, [r3, #8]
 80121c4:	887a      	ldrh	r2, [r7, #2]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d301      	bcc.n	80121ce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80121ca:	2300      	movs	r3, #0
 80121cc:	e102      	b.n	80123d4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80121d2:	887a      	ldrh	r2, [r7, #2]
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d906      	bls.n	80121e6 <tcp_split_unsent_seg+0x7e>
 80121d8:	4b80      	ldr	r3, [pc, #512]	@ (80123dc <tcp_split_unsent_seg+0x274>)
 80121da:	f240 325b 	movw	r2, #859	@ 0x35b
 80121de:	4983      	ldr	r1, [pc, #524]	@ (80123ec <tcp_split_unsent_seg+0x284>)
 80121e0:	4880      	ldr	r0, [pc, #512]	@ (80123e4 <tcp_split_unsent_seg+0x27c>)
 80121e2:	f004 fbb3 	bl	801694c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	891b      	ldrh	r3, [r3, #8]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d106      	bne.n	80121fc <tcp_split_unsent_seg+0x94>
 80121ee:	4b7b      	ldr	r3, [pc, #492]	@ (80123dc <tcp_split_unsent_seg+0x274>)
 80121f0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80121f4:	497e      	ldr	r1, [pc, #504]	@ (80123f0 <tcp_split_unsent_seg+0x288>)
 80121f6:	487b      	ldr	r0, [pc, #492]	@ (80123e4 <tcp_split_unsent_seg+0x27c>)
 80121f8:	f004 fba8 	bl	801694c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	7a9b      	ldrb	r3, [r3, #10]
 8012200:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012202:	7bfb      	ldrb	r3, [r7, #15]
 8012204:	009b      	lsls	r3, r3, #2
 8012206:	b2db      	uxtb	r3, r3
 8012208:	f003 0304 	and.w	r3, r3, #4
 801220c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	891a      	ldrh	r2, [r3, #8]
 8012212:	887b      	ldrh	r3, [r7, #2]
 8012214:	1ad3      	subs	r3, r2, r3
 8012216:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012218:	7bbb      	ldrb	r3, [r7, #14]
 801221a:	b29a      	uxth	r2, r3
 801221c:	89bb      	ldrh	r3, [r7, #12]
 801221e:	4413      	add	r3, r2
 8012220:	b29b      	uxth	r3, r3
 8012222:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012226:	4619      	mov	r1, r3
 8012228:	2036      	movs	r0, #54	@ 0x36
 801222a:	f7fa fb99 	bl	800c960 <pbuf_alloc>
 801222e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	2b00      	cmp	r3, #0
 8012234:	f000 80b7 	beq.w	80123a6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	685b      	ldr	r3, [r3, #4]
 801223c:	891a      	ldrh	r2, [r3, #8]
 801223e:	697b      	ldr	r3, [r7, #20]
 8012240:	891b      	ldrh	r3, [r3, #8]
 8012242:	1ad3      	subs	r3, r2, r3
 8012244:	b29a      	uxth	r2, r3
 8012246:	887b      	ldrh	r3, [r7, #2]
 8012248:	4413      	add	r3, r2
 801224a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801224c:	697b      	ldr	r3, [r7, #20]
 801224e:	6858      	ldr	r0, [r3, #4]
 8012250:	693b      	ldr	r3, [r7, #16]
 8012252:	685a      	ldr	r2, [r3, #4]
 8012254:	7bbb      	ldrb	r3, [r7, #14]
 8012256:	18d1      	adds	r1, r2, r3
 8012258:	897b      	ldrh	r3, [r7, #10]
 801225a:	89ba      	ldrh	r2, [r7, #12]
 801225c:	f7fb f85a 	bl	800d314 <pbuf_copy_partial>
 8012260:	4603      	mov	r3, r0
 8012262:	461a      	mov	r2, r3
 8012264:	89bb      	ldrh	r3, [r7, #12]
 8012266:	4293      	cmp	r3, r2
 8012268:	f040 809f 	bne.w	80123aa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	68db      	ldr	r3, [r3, #12]
 8012270:	899b      	ldrh	r3, [r3, #12]
 8012272:	b29b      	uxth	r3, r3
 8012274:	4618      	mov	r0, r3
 8012276:	f7f9 fa65 	bl	800b744 <lwip_htons>
 801227a:	4603      	mov	r3, r0
 801227c:	b2db      	uxtb	r3, r3
 801227e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012282:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012284:	2300      	movs	r3, #0
 8012286:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012288:	7efb      	ldrb	r3, [r7, #27]
 801228a:	f003 0308 	and.w	r3, r3, #8
 801228e:	2b00      	cmp	r3, #0
 8012290:	d007      	beq.n	80122a2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012292:	7efb      	ldrb	r3, [r7, #27]
 8012294:	f023 0308 	bic.w	r3, r3, #8
 8012298:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801229a:	7ebb      	ldrb	r3, [r7, #26]
 801229c:	f043 0308 	orr.w	r3, r3, #8
 80122a0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80122a2:	7efb      	ldrb	r3, [r7, #27]
 80122a4:	f003 0301 	and.w	r3, r3, #1
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d007      	beq.n	80122bc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80122ac:	7efb      	ldrb	r3, [r7, #27]
 80122ae:	f023 0301 	bic.w	r3, r3, #1
 80122b2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80122b4:	7ebb      	ldrb	r3, [r7, #26]
 80122b6:	f043 0301 	orr.w	r3, r3, #1
 80122ba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	68db      	ldr	r3, [r3, #12]
 80122c0:	685b      	ldr	r3, [r3, #4]
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7f9 fa53 	bl	800b76e <lwip_htonl>
 80122c8:	4602      	mov	r2, r0
 80122ca:	887b      	ldrh	r3, [r7, #2]
 80122cc:	18d1      	adds	r1, r2, r3
 80122ce:	7eba      	ldrb	r2, [r7, #26]
 80122d0:	7bfb      	ldrb	r3, [r7, #15]
 80122d2:	9300      	str	r3, [sp, #0]
 80122d4:	460b      	mov	r3, r1
 80122d6:	6939      	ldr	r1, [r7, #16]
 80122d8:	6878      	ldr	r0, [r7, #4]
 80122da:	f7ff fa51 	bl	8011780 <tcp_create_segment>
 80122de:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d063      	beq.n	80123ae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	685b      	ldr	r3, [r3, #4]
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7fa feaa 	bl	800d044 <pbuf_clen>
 80122f0:	4603      	mov	r3, r0
 80122f2:	461a      	mov	r2, r3
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80122fa:	1a9b      	subs	r3, r3, r2
 80122fc:	b29a      	uxth	r2, r3
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012304:	697b      	ldr	r3, [r7, #20]
 8012306:	6858      	ldr	r0, [r3, #4]
 8012308:	697b      	ldr	r3, [r7, #20]
 801230a:	685b      	ldr	r3, [r3, #4]
 801230c:	891a      	ldrh	r2, [r3, #8]
 801230e:	89bb      	ldrh	r3, [r7, #12]
 8012310:	1ad3      	subs	r3, r2, r3
 8012312:	b29b      	uxth	r3, r3
 8012314:	4619      	mov	r1, r3
 8012316:	f7fa fc81 	bl	800cc1c <pbuf_realloc>
  useg->len -= remainder;
 801231a:	697b      	ldr	r3, [r7, #20]
 801231c:	891a      	ldrh	r2, [r3, #8]
 801231e:	89bb      	ldrh	r3, [r7, #12]
 8012320:	1ad3      	subs	r3, r2, r3
 8012322:	b29a      	uxth	r2, r3
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012328:	697b      	ldr	r3, [r7, #20]
 801232a:	68db      	ldr	r3, [r3, #12]
 801232c:	899b      	ldrh	r3, [r3, #12]
 801232e:	b29c      	uxth	r4, r3
 8012330:	7efb      	ldrb	r3, [r7, #27]
 8012332:	b29b      	uxth	r3, r3
 8012334:	4618      	mov	r0, r3
 8012336:	f7f9 fa05 	bl	800b744 <lwip_htons>
 801233a:	4603      	mov	r3, r0
 801233c:	461a      	mov	r2, r3
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	68db      	ldr	r3, [r3, #12]
 8012342:	4322      	orrs	r2, r4
 8012344:	b292      	uxth	r2, r2
 8012346:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	685b      	ldr	r3, [r3, #4]
 801234c:	4618      	mov	r0, r3
 801234e:	f7fa fe79 	bl	800d044 <pbuf_clen>
 8012352:	4603      	mov	r3, r0
 8012354:	461a      	mov	r2, r3
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801235c:	4413      	add	r3, r2
 801235e:	b29a      	uxth	r2, r3
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012366:	69fb      	ldr	r3, [r7, #28]
 8012368:	685b      	ldr	r3, [r3, #4]
 801236a:	4618      	mov	r0, r3
 801236c:	f7fa fe6a 	bl	800d044 <pbuf_clen>
 8012370:	4603      	mov	r3, r0
 8012372:	461a      	mov	r2, r3
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801237a:	4413      	add	r3, r2
 801237c:	b29a      	uxth	r2, r3
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	681a      	ldr	r2, [r3, #0]
 8012388:	69fb      	ldr	r3, [r7, #28]
 801238a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801238c:	697b      	ldr	r3, [r7, #20]
 801238e:	69fa      	ldr	r2, [r7, #28]
 8012390:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012392:	69fb      	ldr	r3, [r7, #28]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d103      	bne.n	80123a2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	2200      	movs	r2, #0
 801239e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80123a2:	2300      	movs	r3, #0
 80123a4:	e016      	b.n	80123d4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80123a6:	bf00      	nop
 80123a8:	e002      	b.n	80123b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80123aa:	bf00      	nop
 80123ac:	e000      	b.n	80123b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80123ae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80123b0:	69fb      	ldr	r3, [r7, #28]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d006      	beq.n	80123c4 <tcp_split_unsent_seg+0x25c>
 80123b6:	4b09      	ldr	r3, [pc, #36]	@ (80123dc <tcp_split_unsent_seg+0x274>)
 80123b8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80123bc:	490d      	ldr	r1, [pc, #52]	@ (80123f4 <tcp_split_unsent_seg+0x28c>)
 80123be:	4809      	ldr	r0, [pc, #36]	@ (80123e4 <tcp_split_unsent_seg+0x27c>)
 80123c0:	f004 fac4 	bl	801694c <iprintf>
  if (p != NULL) {
 80123c4:	693b      	ldr	r3, [r7, #16]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d002      	beq.n	80123d0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80123ca:	6938      	ldr	r0, [r7, #16]
 80123cc:	f7fa fdac 	bl	800cf28 <pbuf_free>
  }

  return ERR_MEM;
 80123d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3724      	adds	r7, #36	@ 0x24
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd90      	pop	{r4, r7, pc}
 80123dc:	08019a98 	.word	0x08019a98
 80123e0:	08019e2c 	.word	0x08019e2c
 80123e4:	08019aec 	.word	0x08019aec
 80123e8:	08019e50 	.word	0x08019e50
 80123ec:	08019e74 	.word	0x08019e74
 80123f0:	08019e84 	.word	0x08019e84
 80123f4:	08019e94 	.word	0x08019e94

080123f8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80123f8:	b590      	push	{r4, r7, lr}
 80123fa:	b085      	sub	sp, #20
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d106      	bne.n	8012414 <tcp_send_fin+0x1c>
 8012406:	4b21      	ldr	r3, [pc, #132]	@ (801248c <tcp_send_fin+0x94>)
 8012408:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801240c:	4920      	ldr	r1, [pc, #128]	@ (8012490 <tcp_send_fin+0x98>)
 801240e:	4821      	ldr	r0, [pc, #132]	@ (8012494 <tcp_send_fin+0x9c>)
 8012410:	f004 fa9c 	bl	801694c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012418:	2b00      	cmp	r3, #0
 801241a:	d02e      	beq.n	801247a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012420:	60fb      	str	r3, [r7, #12]
 8012422:	e002      	b.n	801242a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d1f8      	bne.n	8012424 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	68db      	ldr	r3, [r3, #12]
 8012436:	899b      	ldrh	r3, [r3, #12]
 8012438:	b29b      	uxth	r3, r3
 801243a:	4618      	mov	r0, r3
 801243c:	f7f9 f982 	bl	800b744 <lwip_htons>
 8012440:	4603      	mov	r3, r0
 8012442:	b2db      	uxtb	r3, r3
 8012444:	f003 0307 	and.w	r3, r3, #7
 8012448:	2b00      	cmp	r3, #0
 801244a:	d116      	bne.n	801247a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	68db      	ldr	r3, [r3, #12]
 8012450:	899b      	ldrh	r3, [r3, #12]
 8012452:	b29c      	uxth	r4, r3
 8012454:	2001      	movs	r0, #1
 8012456:	f7f9 f975 	bl	800b744 <lwip_htons>
 801245a:	4603      	mov	r3, r0
 801245c:	461a      	mov	r2, r3
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	4322      	orrs	r2, r4
 8012464:	b292      	uxth	r2, r2
 8012466:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	8b5b      	ldrh	r3, [r3, #26]
 801246c:	f043 0320 	orr.w	r3, r3, #32
 8012470:	b29a      	uxth	r2, r3
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012476:	2300      	movs	r3, #0
 8012478:	e004      	b.n	8012484 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801247a:	2101      	movs	r1, #1
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f000 f80b 	bl	8012498 <tcp_enqueue_flags>
 8012482:	4603      	mov	r3, r0
}
 8012484:	4618      	mov	r0, r3
 8012486:	3714      	adds	r7, #20
 8012488:	46bd      	mov	sp, r7
 801248a:	bd90      	pop	{r4, r7, pc}
 801248c:	08019a98 	.word	0x08019a98
 8012490:	08019ea0 	.word	0x08019ea0
 8012494:	08019aec 	.word	0x08019aec

08012498 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b08a      	sub	sp, #40	@ 0x28
 801249c:	af02      	add	r7, sp, #8
 801249e:	6078      	str	r0, [r7, #4]
 80124a0:	460b      	mov	r3, r1
 80124a2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80124a4:	2300      	movs	r3, #0
 80124a6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80124a8:	2300      	movs	r3, #0
 80124aa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80124ac:	78fb      	ldrb	r3, [r7, #3]
 80124ae:	f003 0303 	and.w	r3, r3, #3
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d106      	bne.n	80124c4 <tcp_enqueue_flags+0x2c>
 80124b6:	4b67      	ldr	r3, [pc, #412]	@ (8012654 <tcp_enqueue_flags+0x1bc>)
 80124b8:	f240 4211 	movw	r2, #1041	@ 0x411
 80124bc:	4966      	ldr	r1, [pc, #408]	@ (8012658 <tcp_enqueue_flags+0x1c0>)
 80124be:	4867      	ldr	r0, [pc, #412]	@ (801265c <tcp_enqueue_flags+0x1c4>)
 80124c0:	f004 fa44 	bl	801694c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d106      	bne.n	80124d8 <tcp_enqueue_flags+0x40>
 80124ca:	4b62      	ldr	r3, [pc, #392]	@ (8012654 <tcp_enqueue_flags+0x1bc>)
 80124cc:	f240 4213 	movw	r2, #1043	@ 0x413
 80124d0:	4963      	ldr	r1, [pc, #396]	@ (8012660 <tcp_enqueue_flags+0x1c8>)
 80124d2:	4862      	ldr	r0, [pc, #392]	@ (801265c <tcp_enqueue_flags+0x1c4>)
 80124d4:	f004 fa3a 	bl	801694c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80124d8:	78fb      	ldrb	r3, [r7, #3]
 80124da:	f003 0302 	and.w	r3, r3, #2
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d001      	beq.n	80124e6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80124e2:	2301      	movs	r3, #1
 80124e4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80124e6:	7ffb      	ldrb	r3, [r7, #31]
 80124e8:	009b      	lsls	r3, r3, #2
 80124ea:	b2db      	uxtb	r3, r3
 80124ec:	f003 0304 	and.w	r3, r3, #4
 80124f0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80124f2:	7dfb      	ldrb	r3, [r7, #23]
 80124f4:	b29b      	uxth	r3, r3
 80124f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80124fa:	4619      	mov	r1, r3
 80124fc:	2036      	movs	r0, #54	@ 0x36
 80124fe:	f7fa fa2f 	bl	800c960 <pbuf_alloc>
 8012502:	6138      	str	r0, [r7, #16]
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d109      	bne.n	801251e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	8b5b      	ldrh	r3, [r3, #26]
 801250e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012512:	b29a      	uxth	r2, r3
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012518:	f04f 33ff 	mov.w	r3, #4294967295
 801251c:	e095      	b.n	801264a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801251e:	693b      	ldr	r3, [r7, #16]
 8012520:	895a      	ldrh	r2, [r3, #10]
 8012522:	7dfb      	ldrb	r3, [r7, #23]
 8012524:	b29b      	uxth	r3, r3
 8012526:	429a      	cmp	r2, r3
 8012528:	d206      	bcs.n	8012538 <tcp_enqueue_flags+0xa0>
 801252a:	4b4a      	ldr	r3, [pc, #296]	@ (8012654 <tcp_enqueue_flags+0x1bc>)
 801252c:	f240 4239 	movw	r2, #1081	@ 0x439
 8012530:	494c      	ldr	r1, [pc, #304]	@ (8012664 <tcp_enqueue_flags+0x1cc>)
 8012532:	484a      	ldr	r0, [pc, #296]	@ (801265c <tcp_enqueue_flags+0x1c4>)
 8012534:	f004 fa0a 	bl	801694c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801253c:	78fa      	ldrb	r2, [r7, #3]
 801253e:	7ffb      	ldrb	r3, [r7, #31]
 8012540:	9300      	str	r3, [sp, #0]
 8012542:	460b      	mov	r3, r1
 8012544:	6939      	ldr	r1, [r7, #16]
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f7ff f91a 	bl	8011780 <tcp_create_segment>
 801254c:	60f8      	str	r0, [r7, #12]
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d109      	bne.n	8012568 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	8b5b      	ldrh	r3, [r3, #26]
 8012558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801255c:	b29a      	uxth	r2, r3
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012562:	f04f 33ff 	mov.w	r3, #4294967295
 8012566:	e070      	b.n	801264a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	68db      	ldr	r3, [r3, #12]
 801256c:	f003 0303 	and.w	r3, r3, #3
 8012570:	2b00      	cmp	r3, #0
 8012572:	d006      	beq.n	8012582 <tcp_enqueue_flags+0xea>
 8012574:	4b37      	ldr	r3, [pc, #220]	@ (8012654 <tcp_enqueue_flags+0x1bc>)
 8012576:	f240 4242 	movw	r2, #1090	@ 0x442
 801257a:	493b      	ldr	r1, [pc, #236]	@ (8012668 <tcp_enqueue_flags+0x1d0>)
 801257c:	4837      	ldr	r0, [pc, #220]	@ (801265c <tcp_enqueue_flags+0x1c4>)
 801257e:	f004 f9e5 	bl	801694c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	891b      	ldrh	r3, [r3, #8]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d006      	beq.n	8012598 <tcp_enqueue_flags+0x100>
 801258a:	4b32      	ldr	r3, [pc, #200]	@ (8012654 <tcp_enqueue_flags+0x1bc>)
 801258c:	f240 4243 	movw	r2, #1091	@ 0x443
 8012590:	4936      	ldr	r1, [pc, #216]	@ (801266c <tcp_enqueue_flags+0x1d4>)
 8012592:	4832      	ldr	r0, [pc, #200]	@ (801265c <tcp_enqueue_flags+0x1c4>)
 8012594:	f004 f9da 	bl	801694c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801259c:	2b00      	cmp	r3, #0
 801259e:	d103      	bne.n	80125a8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	68fa      	ldr	r2, [r7, #12]
 80125a4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80125a6:	e00d      	b.n	80125c4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125ac:	61bb      	str	r3, [r7, #24]
 80125ae:	e002      	b.n	80125b6 <tcp_enqueue_flags+0x11e>
 80125b0:	69bb      	ldr	r3, [r7, #24]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	61bb      	str	r3, [r7, #24]
 80125b6:	69bb      	ldr	r3, [r7, #24]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d1f8      	bne.n	80125b0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80125be:	69bb      	ldr	r3, [r7, #24]
 80125c0:	68fa      	ldr	r2, [r7, #12]
 80125c2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2200      	movs	r2, #0
 80125c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80125cc:	78fb      	ldrb	r3, [r7, #3]
 80125ce:	f003 0302 	and.w	r3, r3, #2
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d104      	bne.n	80125e0 <tcp_enqueue_flags+0x148>
 80125d6:	78fb      	ldrb	r3, [r7, #3]
 80125d8:	f003 0301 	and.w	r3, r3, #1
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d004      	beq.n	80125ea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80125e4:	1c5a      	adds	r2, r3, #1
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80125ea:	78fb      	ldrb	r3, [r7, #3]
 80125ec:	f003 0301 	and.w	r3, r3, #1
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d006      	beq.n	8012602 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	8b5b      	ldrh	r3, [r3, #26]
 80125f8:	f043 0320 	orr.w	r3, r3, #32
 80125fc:	b29a      	uxth	r2, r3
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	685b      	ldr	r3, [r3, #4]
 8012606:	4618      	mov	r0, r3
 8012608:	f7fa fd1c 	bl	800d044 <pbuf_clen>
 801260c:	4603      	mov	r3, r0
 801260e:	461a      	mov	r2, r3
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012616:	4413      	add	r3, r2
 8012618:	b29a      	uxth	r2, r3
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012626:	2b00      	cmp	r3, #0
 8012628:	d00e      	beq.n	8012648 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801262e:	2b00      	cmp	r3, #0
 8012630:	d10a      	bne.n	8012648 <tcp_enqueue_flags+0x1b0>
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012636:	2b00      	cmp	r3, #0
 8012638:	d106      	bne.n	8012648 <tcp_enqueue_flags+0x1b0>
 801263a:	4b06      	ldr	r3, [pc, #24]	@ (8012654 <tcp_enqueue_flags+0x1bc>)
 801263c:	f240 4265 	movw	r2, #1125	@ 0x465
 8012640:	490b      	ldr	r1, [pc, #44]	@ (8012670 <tcp_enqueue_flags+0x1d8>)
 8012642:	4806      	ldr	r0, [pc, #24]	@ (801265c <tcp_enqueue_flags+0x1c4>)
 8012644:	f004 f982 	bl	801694c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012648:	2300      	movs	r3, #0
}
 801264a:	4618      	mov	r0, r3
 801264c:	3720      	adds	r7, #32
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}
 8012652:	bf00      	nop
 8012654:	08019a98 	.word	0x08019a98
 8012658:	08019ebc 	.word	0x08019ebc
 801265c:	08019aec 	.word	0x08019aec
 8012660:	08019f14 	.word	0x08019f14
 8012664:	08019f34 	.word	0x08019f34
 8012668:	08019f70 	.word	0x08019f70
 801266c:	08019f88 	.word	0x08019f88
 8012670:	08019fb4 	.word	0x08019fb4

08012674 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012674:	b5b0      	push	{r4, r5, r7, lr}
 8012676:	b08a      	sub	sp, #40	@ 0x28
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d106      	bne.n	8012690 <tcp_output+0x1c>
 8012682:	4b8a      	ldr	r3, [pc, #552]	@ (80128ac <tcp_output+0x238>)
 8012684:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012688:	4989      	ldr	r1, [pc, #548]	@ (80128b0 <tcp_output+0x23c>)
 801268a:	488a      	ldr	r0, [pc, #552]	@ (80128b4 <tcp_output+0x240>)
 801268c:	f004 f95e 	bl	801694c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	7d1b      	ldrb	r3, [r3, #20]
 8012694:	2b01      	cmp	r3, #1
 8012696:	d106      	bne.n	80126a6 <tcp_output+0x32>
 8012698:	4b84      	ldr	r3, [pc, #528]	@ (80128ac <tcp_output+0x238>)
 801269a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801269e:	4986      	ldr	r1, [pc, #536]	@ (80128b8 <tcp_output+0x244>)
 80126a0:	4884      	ldr	r0, [pc, #528]	@ (80128b4 <tcp_output+0x240>)
 80126a2:	f004 f953 	bl	801694c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80126a6:	4b85      	ldr	r3, [pc, #532]	@ (80128bc <tcp_output+0x248>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	687a      	ldr	r2, [r7, #4]
 80126ac:	429a      	cmp	r2, r3
 80126ae:	d101      	bne.n	80126b4 <tcp_output+0x40>
    return ERR_OK;
 80126b0:	2300      	movs	r3, #0
 80126b2:	e1ce      	b.n	8012a52 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80126c0:	4293      	cmp	r3, r2
 80126c2:	bf28      	it	cs
 80126c4:	4613      	movcs	r3, r2
 80126c6:	b29b      	uxth	r3, r3
 80126c8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80126d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d10b      	bne.n	80126ee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	8b5b      	ldrh	r3, [r3, #26]
 80126da:	f003 0302 	and.w	r3, r3, #2
 80126de:	2b00      	cmp	r3, #0
 80126e0:	f000 81aa 	beq.w	8012a38 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f000 fdcb 	bl	8013280 <tcp_send_empty_ack>
 80126ea:	4603      	mov	r3, r0
 80126ec:	e1b1      	b.n	8012a52 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80126ee:	6879      	ldr	r1, [r7, #4]
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	3304      	adds	r3, #4
 80126f4:	461a      	mov	r2, r3
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	f7ff f826 	bl	8011748 <tcp_route>
 80126fc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d102      	bne.n	801270a <tcp_output+0x96>
    return ERR_RTE;
 8012704:	f06f 0303 	mvn.w	r3, #3
 8012708:	e1a3      	b.n	8012a52 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d003      	beq.n	8012718 <tcp_output+0xa4>
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d111      	bne.n	801273c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d002      	beq.n	8012724 <tcp_output+0xb0>
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	3304      	adds	r3, #4
 8012722:	e000      	b.n	8012726 <tcp_output+0xb2>
 8012724:	2300      	movs	r3, #0
 8012726:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012728:	693b      	ldr	r3, [r7, #16]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d102      	bne.n	8012734 <tcp_output+0xc0>
      return ERR_RTE;
 801272e:	f06f 0303 	mvn.w	r3, #3
 8012732:	e18e      	b.n	8012a52 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	681a      	ldr	r2, [r3, #0]
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801273e:	68db      	ldr	r3, [r3, #12]
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	4618      	mov	r0, r3
 8012744:	f7f9 f813 	bl	800b76e <lwip_htonl>
 8012748:	4602      	mov	r2, r0
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801274e:	1ad3      	subs	r3, r2, r3
 8012750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012752:	8912      	ldrh	r2, [r2, #8]
 8012754:	4413      	add	r3, r2
 8012756:	69ba      	ldr	r2, [r7, #24]
 8012758:	429a      	cmp	r2, r3
 801275a:	d227      	bcs.n	80127ac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012762:	461a      	mov	r2, r3
 8012764:	69bb      	ldr	r3, [r7, #24]
 8012766:	4293      	cmp	r3, r2
 8012768:	d114      	bne.n	8012794 <tcp_output+0x120>
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801276e:	2b00      	cmp	r3, #0
 8012770:	d110      	bne.n	8012794 <tcp_output+0x120>
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012778:	2b00      	cmp	r3, #0
 801277a:	d10b      	bne.n	8012794 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2200      	movs	r2, #0
 8012780:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	2201      	movs	r2, #1
 8012788:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2200      	movs	r2, #0
 8012790:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	8b5b      	ldrh	r3, [r3, #26]
 8012798:	f003 0302 	and.w	r3, r3, #2
 801279c:	2b00      	cmp	r3, #0
 801279e:	f000 814d 	beq.w	8012a3c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80127a2:	6878      	ldr	r0, [r7, #4]
 80127a4:	f000 fd6c 	bl	8013280 <tcp_send_empty_ack>
 80127a8:	4603      	mov	r3, r0
 80127aa:	e152      	b.n	8012a52 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2200      	movs	r2, #0
 80127b0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127b8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80127ba:	6a3b      	ldr	r3, [r7, #32]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	f000 811c 	beq.w	80129fa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80127c2:	e002      	b.n	80127ca <tcp_output+0x156>
 80127c4:	6a3b      	ldr	r3, [r7, #32]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	623b      	str	r3, [r7, #32]
 80127ca:	6a3b      	ldr	r3, [r7, #32]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d1f8      	bne.n	80127c4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80127d2:	e112      	b.n	80129fa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80127d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127d6:	68db      	ldr	r3, [r3, #12]
 80127d8:	899b      	ldrh	r3, [r3, #12]
 80127da:	b29b      	uxth	r3, r3
 80127dc:	4618      	mov	r0, r3
 80127de:	f7f8 ffb1 	bl	800b744 <lwip_htons>
 80127e2:	4603      	mov	r3, r0
 80127e4:	b2db      	uxtb	r3, r3
 80127e6:	f003 0304 	and.w	r3, r3, #4
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d006      	beq.n	80127fc <tcp_output+0x188>
 80127ee:	4b2f      	ldr	r3, [pc, #188]	@ (80128ac <tcp_output+0x238>)
 80127f0:	f240 5236 	movw	r2, #1334	@ 0x536
 80127f4:	4932      	ldr	r1, [pc, #200]	@ (80128c0 <tcp_output+0x24c>)
 80127f6:	482f      	ldr	r0, [pc, #188]	@ (80128b4 <tcp_output+0x240>)
 80127f8:	f004 f8a8 	bl	801694c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012800:	2b00      	cmp	r3, #0
 8012802:	d01f      	beq.n	8012844 <tcp_output+0x1d0>
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	8b5b      	ldrh	r3, [r3, #26]
 8012808:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801280c:	2b00      	cmp	r3, #0
 801280e:	d119      	bne.n	8012844 <tcp_output+0x1d0>
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012814:	2b00      	cmp	r3, #0
 8012816:	d00b      	beq.n	8012830 <tcp_output+0x1bc>
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d110      	bne.n	8012844 <tcp_output+0x1d0>
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012826:	891a      	ldrh	r2, [r3, #8]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801282c:	429a      	cmp	r2, r3
 801282e:	d209      	bcs.n	8012844 <tcp_output+0x1d0>
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012836:	2b00      	cmp	r3, #0
 8012838:	d004      	beq.n	8012844 <tcp_output+0x1d0>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012840:	2b08      	cmp	r3, #8
 8012842:	d901      	bls.n	8012848 <tcp_output+0x1d4>
 8012844:	2301      	movs	r3, #1
 8012846:	e000      	b.n	801284a <tcp_output+0x1d6>
 8012848:	2300      	movs	r3, #0
 801284a:	2b00      	cmp	r3, #0
 801284c:	d106      	bne.n	801285c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	8b5b      	ldrh	r3, [r3, #26]
 8012852:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012856:	2b00      	cmp	r3, #0
 8012858:	f000 80e4 	beq.w	8012a24 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	7d1b      	ldrb	r3, [r3, #20]
 8012860:	2b02      	cmp	r3, #2
 8012862:	d00d      	beq.n	8012880 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012866:	68db      	ldr	r3, [r3, #12]
 8012868:	899b      	ldrh	r3, [r3, #12]
 801286a:	b29c      	uxth	r4, r3
 801286c:	2010      	movs	r0, #16
 801286e:	f7f8 ff69 	bl	800b744 <lwip_htons>
 8012872:	4603      	mov	r3, r0
 8012874:	461a      	mov	r2, r3
 8012876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012878:	68db      	ldr	r3, [r3, #12]
 801287a:	4322      	orrs	r2, r4
 801287c:	b292      	uxth	r2, r2
 801287e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012880:	697a      	ldr	r2, [r7, #20]
 8012882:	6879      	ldr	r1, [r7, #4]
 8012884:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012886:	f000 f909 	bl	8012a9c <tcp_output_segment>
 801288a:	4603      	mov	r3, r0
 801288c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801288e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d016      	beq.n	80128c4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	8b5b      	ldrh	r3, [r3, #26]
 801289a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801289e:	b29a      	uxth	r2, r3
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	835a      	strh	r2, [r3, #26]
      return err;
 80128a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128a8:	e0d3      	b.n	8012a52 <tcp_output+0x3de>
 80128aa:	bf00      	nop
 80128ac:	08019a98 	.word	0x08019a98
 80128b0:	08019fdc 	.word	0x08019fdc
 80128b4:	08019aec 	.word	0x08019aec
 80128b8:	08019ff4 	.word	0x08019ff4
 80128bc:	2000f2fc 	.word	0x2000f2fc
 80128c0:	0801a01c 	.word	0x0801a01c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80128c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	7d1b      	ldrb	r3, [r3, #20]
 80128d0:	2b02      	cmp	r3, #2
 80128d2:	d006      	beq.n	80128e2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	8b5b      	ldrh	r3, [r3, #26]
 80128d8:	f023 0303 	bic.w	r3, r3, #3
 80128dc:	b29a      	uxth	r2, r3
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80128e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128e4:	68db      	ldr	r3, [r3, #12]
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	4618      	mov	r0, r3
 80128ea:	f7f8 ff40 	bl	800b76e <lwip_htonl>
 80128ee:	4604      	mov	r4, r0
 80128f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128f2:	891b      	ldrh	r3, [r3, #8]
 80128f4:	461d      	mov	r5, r3
 80128f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128f8:	68db      	ldr	r3, [r3, #12]
 80128fa:	899b      	ldrh	r3, [r3, #12]
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	4618      	mov	r0, r3
 8012900:	f7f8 ff20 	bl	800b744 <lwip_htons>
 8012904:	4603      	mov	r3, r0
 8012906:	b2db      	uxtb	r3, r3
 8012908:	f003 0303 	and.w	r3, r3, #3
 801290c:	2b00      	cmp	r3, #0
 801290e:	d001      	beq.n	8012914 <tcp_output+0x2a0>
 8012910:	2301      	movs	r3, #1
 8012912:	e000      	b.n	8012916 <tcp_output+0x2a2>
 8012914:	2300      	movs	r3, #0
 8012916:	442b      	add	r3, r5
 8012918:	4423      	add	r3, r4
 801291a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	1ad3      	subs	r3, r2, r3
 8012924:	2b00      	cmp	r3, #0
 8012926:	da02      	bge.n	801292e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	68ba      	ldr	r2, [r7, #8]
 801292c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012930:	891b      	ldrh	r3, [r3, #8]
 8012932:	461c      	mov	r4, r3
 8012934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012936:	68db      	ldr	r3, [r3, #12]
 8012938:	899b      	ldrh	r3, [r3, #12]
 801293a:	b29b      	uxth	r3, r3
 801293c:	4618      	mov	r0, r3
 801293e:	f7f8 ff01 	bl	800b744 <lwip_htons>
 8012942:	4603      	mov	r3, r0
 8012944:	b2db      	uxtb	r3, r3
 8012946:	f003 0303 	and.w	r3, r3, #3
 801294a:	2b00      	cmp	r3, #0
 801294c:	d001      	beq.n	8012952 <tcp_output+0x2de>
 801294e:	2301      	movs	r3, #1
 8012950:	e000      	b.n	8012954 <tcp_output+0x2e0>
 8012952:	2300      	movs	r3, #0
 8012954:	4423      	add	r3, r4
 8012956:	2b00      	cmp	r3, #0
 8012958:	d049      	beq.n	80129ee <tcp_output+0x37a>
      seg->next = NULL;
 801295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801295c:	2200      	movs	r2, #0
 801295e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012964:	2b00      	cmp	r3, #0
 8012966:	d105      	bne.n	8012974 <tcp_output+0x300>
        pcb->unacked = seg;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801296c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012970:	623b      	str	r3, [r7, #32]
 8012972:	e03f      	b.n	80129f4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012976:	68db      	ldr	r3, [r3, #12]
 8012978:	685b      	ldr	r3, [r3, #4]
 801297a:	4618      	mov	r0, r3
 801297c:	f7f8 fef7 	bl	800b76e <lwip_htonl>
 8012980:	4604      	mov	r4, r0
 8012982:	6a3b      	ldr	r3, [r7, #32]
 8012984:	68db      	ldr	r3, [r3, #12]
 8012986:	685b      	ldr	r3, [r3, #4]
 8012988:	4618      	mov	r0, r3
 801298a:	f7f8 fef0 	bl	800b76e <lwip_htonl>
 801298e:	4603      	mov	r3, r0
 8012990:	1ae3      	subs	r3, r4, r3
 8012992:	2b00      	cmp	r3, #0
 8012994:	da24      	bge.n	80129e0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	3370      	adds	r3, #112	@ 0x70
 801299a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801299c:	e002      	b.n	80129a4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801299e:	69fb      	ldr	r3, [r7, #28]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80129a4:	69fb      	ldr	r3, [r7, #28]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d011      	beq.n	80129d0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80129ac:	69fb      	ldr	r3, [r7, #28]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	68db      	ldr	r3, [r3, #12]
 80129b2:	685b      	ldr	r3, [r3, #4]
 80129b4:	4618      	mov	r0, r3
 80129b6:	f7f8 feda 	bl	800b76e <lwip_htonl>
 80129ba:	4604      	mov	r4, r0
 80129bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	685b      	ldr	r3, [r3, #4]
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7f8 fed3 	bl	800b76e <lwip_htonl>
 80129c8:	4603      	mov	r3, r0
 80129ca:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	dbe6      	blt.n	801299e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80129d0:	69fb      	ldr	r3, [r7, #28]
 80129d2:	681a      	ldr	r2, [r3, #0]
 80129d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129d6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80129d8:	69fb      	ldr	r3, [r7, #28]
 80129da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129dc:	601a      	str	r2, [r3, #0]
 80129de:	e009      	b.n	80129f4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80129e0:	6a3b      	ldr	r3, [r7, #32]
 80129e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129e4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80129e6:	6a3b      	ldr	r3, [r7, #32]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	623b      	str	r3, [r7, #32]
 80129ec:	e002      	b.n	80129f4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80129ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80129f0:	f7fb ff1f 	bl	800e832 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80129f8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80129fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d012      	beq.n	8012a26 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a02:	68db      	ldr	r3, [r3, #12]
 8012a04:	685b      	ldr	r3, [r3, #4]
 8012a06:	4618      	mov	r0, r3
 8012a08:	f7f8 feb1 	bl	800b76e <lwip_htonl>
 8012a0c:	4602      	mov	r2, r0
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a12:	1ad3      	subs	r3, r2, r3
 8012a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a16:	8912      	ldrh	r2, [r2, #8]
 8012a18:	4413      	add	r3, r2
  while (seg != NULL &&
 8012a1a:	69ba      	ldr	r2, [r7, #24]
 8012a1c:	429a      	cmp	r2, r3
 8012a1e:	f4bf aed9 	bcs.w	80127d4 <tcp_output+0x160>
 8012a22:	e000      	b.n	8012a26 <tcp_output+0x3b2>
      break;
 8012a24:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d108      	bne.n	8012a40 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2200      	movs	r2, #0
 8012a32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012a36:	e004      	b.n	8012a42 <tcp_output+0x3ce>
    goto output_done;
 8012a38:	bf00      	nop
 8012a3a:	e002      	b.n	8012a42 <tcp_output+0x3ce>
    goto output_done;
 8012a3c:	bf00      	nop
 8012a3e:	e000      	b.n	8012a42 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012a40:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	8b5b      	ldrh	r3, [r3, #26]
 8012a46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012a4a:	b29a      	uxth	r2, r3
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012a50:	2300      	movs	r3, #0
}
 8012a52:	4618      	mov	r0, r3
 8012a54:	3728      	adds	r7, #40	@ 0x28
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bdb0      	pop	{r4, r5, r7, pc}
 8012a5a:	bf00      	nop

08012a5c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b082      	sub	sp, #8
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d106      	bne.n	8012a78 <tcp_output_segment_busy+0x1c>
 8012a6a:	4b09      	ldr	r3, [pc, #36]	@ (8012a90 <tcp_output_segment_busy+0x34>)
 8012a6c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012a70:	4908      	ldr	r1, [pc, #32]	@ (8012a94 <tcp_output_segment_busy+0x38>)
 8012a72:	4809      	ldr	r0, [pc, #36]	@ (8012a98 <tcp_output_segment_busy+0x3c>)
 8012a74:	f003 ff6a 	bl	801694c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	685b      	ldr	r3, [r3, #4]
 8012a7c:	7b9b      	ldrb	r3, [r3, #14]
 8012a7e:	2b01      	cmp	r3, #1
 8012a80:	d001      	beq.n	8012a86 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012a82:	2301      	movs	r3, #1
 8012a84:	e000      	b.n	8012a88 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012a86:	2300      	movs	r3, #0
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3708      	adds	r7, #8
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}
 8012a90:	08019a98 	.word	0x08019a98
 8012a94:	0801a034 	.word	0x0801a034
 8012a98:	08019aec 	.word	0x08019aec

08012a9c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012a9c:	b5b0      	push	{r4, r5, r7, lr}
 8012a9e:	b08c      	sub	sp, #48	@ 0x30
 8012aa0:	af04      	add	r7, sp, #16
 8012aa2:	60f8      	str	r0, [r7, #12]
 8012aa4:	60b9      	str	r1, [r7, #8]
 8012aa6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d106      	bne.n	8012abc <tcp_output_segment+0x20>
 8012aae:	4b64      	ldr	r3, [pc, #400]	@ (8012c40 <tcp_output_segment+0x1a4>)
 8012ab0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8012ab4:	4963      	ldr	r1, [pc, #396]	@ (8012c44 <tcp_output_segment+0x1a8>)
 8012ab6:	4864      	ldr	r0, [pc, #400]	@ (8012c48 <tcp_output_segment+0x1ac>)
 8012ab8:	f003 ff48 	bl	801694c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d106      	bne.n	8012ad0 <tcp_output_segment+0x34>
 8012ac2:	4b5f      	ldr	r3, [pc, #380]	@ (8012c40 <tcp_output_segment+0x1a4>)
 8012ac4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012ac8:	4960      	ldr	r1, [pc, #384]	@ (8012c4c <tcp_output_segment+0x1b0>)
 8012aca:	485f      	ldr	r0, [pc, #380]	@ (8012c48 <tcp_output_segment+0x1ac>)
 8012acc:	f003 ff3e 	bl	801694c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d106      	bne.n	8012ae4 <tcp_output_segment+0x48>
 8012ad6:	4b5a      	ldr	r3, [pc, #360]	@ (8012c40 <tcp_output_segment+0x1a4>)
 8012ad8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012adc:	495c      	ldr	r1, [pc, #368]	@ (8012c50 <tcp_output_segment+0x1b4>)
 8012ade:	485a      	ldr	r0, [pc, #360]	@ (8012c48 <tcp_output_segment+0x1ac>)
 8012ae0:	f003 ff34 	bl	801694c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012ae4:	68f8      	ldr	r0, [r7, #12]
 8012ae6:	f7ff ffb9 	bl	8012a5c <tcp_output_segment_busy>
 8012aea:	4603      	mov	r3, r0
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d001      	beq.n	8012af4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012af0:	2300      	movs	r3, #0
 8012af2:	e0a1      	b.n	8012c38 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012af4:	68bb      	ldr	r3, [r7, #8]
 8012af6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	68dc      	ldr	r4, [r3, #12]
 8012afc:	4610      	mov	r0, r2
 8012afe:	f7f8 fe36 	bl	800b76e <lwip_htonl>
 8012b02:	4603      	mov	r3, r0
 8012b04:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	68dc      	ldr	r4, [r3, #12]
 8012b0e:	4610      	mov	r0, r2
 8012b10:	f7f8 fe18 	bl	800b744 <lwip_htons>
 8012b14:	4603      	mov	r3, r0
 8012b16:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b1c:	68ba      	ldr	r2, [r7, #8]
 8012b1e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012b20:	441a      	add	r2, r3
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	68db      	ldr	r3, [r3, #12]
 8012b2a:	3314      	adds	r3, #20
 8012b2c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	7a9b      	ldrb	r3, [r3, #10]
 8012b32:	f003 0301 	and.w	r3, r3, #1
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d015      	beq.n	8012b66 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012b3a:	68bb      	ldr	r3, [r7, #8]
 8012b3c:	3304      	adds	r3, #4
 8012b3e:	461a      	mov	r2, r3
 8012b40:	6879      	ldr	r1, [r7, #4]
 8012b42:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8012b46:	f7fc fa39 	bl	800efbc <tcp_eff_send_mss_netif>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012b4e:	8b7b      	ldrh	r3, [r7, #26]
 8012b50:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012b54:	4618      	mov	r0, r3
 8012b56:	f7f8 fe0a 	bl	800b76e <lwip_htonl>
 8012b5a:	4602      	mov	r2, r0
 8012b5c:	69fb      	ldr	r3, [r7, #28]
 8012b5e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	3304      	adds	r3, #4
 8012b64:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	da02      	bge.n	8012b76 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	2200      	movs	r2, #0
 8012b74:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d10c      	bne.n	8012b98 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012b7e:	4b35      	ldr	r3, [pc, #212]	@ (8012c54 <tcp_output_segment+0x1b8>)
 8012b80:	681a      	ldr	r2, [r3, #0]
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	68db      	ldr	r3, [r3, #12]
 8012b8a:	685b      	ldr	r3, [r3, #4]
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7f8 fdee 	bl	800b76e <lwip_htonl>
 8012b92:	4602      	mov	r2, r0
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	68da      	ldr	r2, [r3, #12]
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	685b      	ldr	r3, [r3, #4]
 8012ba0:	685b      	ldr	r3, [r3, #4]
 8012ba2:	1ad3      	subs	r3, r2, r3
 8012ba4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	685b      	ldr	r3, [r3, #4]
 8012baa:	8959      	ldrh	r1, [r3, #10]
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	8b3a      	ldrh	r2, [r7, #24]
 8012bb2:	1a8a      	subs	r2, r1, r2
 8012bb4:	b292      	uxth	r2, r2
 8012bb6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	685b      	ldr	r3, [r3, #4]
 8012bbc:	8919      	ldrh	r1, [r3, #8]
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	685b      	ldr	r3, [r3, #4]
 8012bc2:	8b3a      	ldrh	r2, [r7, #24]
 8012bc4:	1a8a      	subs	r2, r1, r2
 8012bc6:	b292      	uxth	r2, r2
 8012bc8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	68fa      	ldr	r2, [r7, #12]
 8012bd0:	68d2      	ldr	r2, [r2, #12]
 8012bd2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	68db      	ldr	r3, [r3, #12]
 8012bd8:	2200      	movs	r2, #0
 8012bda:	741a      	strb	r2, [r3, #16]
 8012bdc:	2200      	movs	r2, #0
 8012bde:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	68da      	ldr	r2, [r3, #12]
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	7a9b      	ldrb	r3, [r3, #10]
 8012be8:	f003 0301 	and.w	r3, r3, #1
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d001      	beq.n	8012bf4 <tcp_output_segment+0x158>
 8012bf0:	2318      	movs	r3, #24
 8012bf2:	e000      	b.n	8012bf6 <tcp_output_segment+0x15a>
 8012bf4:	2314      	movs	r3, #20
 8012bf6:	4413      	add	r3, r2
 8012bf8:	69fa      	ldr	r2, [r7, #28]
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	d006      	beq.n	8012c0c <tcp_output_segment+0x170>
 8012bfe:	4b10      	ldr	r3, [pc, #64]	@ (8012c40 <tcp_output_segment+0x1a4>)
 8012c00:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012c04:	4914      	ldr	r1, [pc, #80]	@ (8012c58 <tcp_output_segment+0x1bc>)
 8012c06:	4810      	ldr	r0, [pc, #64]	@ (8012c48 <tcp_output_segment+0x1ac>)
 8012c08:	f003 fea0 	bl	801694c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	6858      	ldr	r0, [r3, #4]
 8012c10:	68b9      	ldr	r1, [r7, #8]
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	1d1c      	adds	r4, r3, #4
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	7add      	ldrb	r5, [r3, #11]
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	7a9b      	ldrb	r3, [r3, #10]
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	9202      	str	r2, [sp, #8]
 8012c22:	2206      	movs	r2, #6
 8012c24:	9201      	str	r2, [sp, #4]
 8012c26:	9300      	str	r3, [sp, #0]
 8012c28:	462b      	mov	r3, r5
 8012c2a:	4622      	mov	r2, r4
 8012c2c:	f002 fbaa 	bl	8015384 <ip4_output_if>
 8012c30:	4603      	mov	r3, r0
 8012c32:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3720      	adds	r7, #32
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8012c40:	08019a98 	.word	0x08019a98
 8012c44:	0801a05c 	.word	0x0801a05c
 8012c48:	08019aec 	.word	0x08019aec
 8012c4c:	0801a07c 	.word	0x0801a07c
 8012c50:	0801a09c 	.word	0x0801a09c
 8012c54:	2000f2b0 	.word	0x2000f2b0
 8012c58:	0801a0c0 	.word	0x0801a0c0

08012c5c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012c5c:	b5b0      	push	{r4, r5, r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d106      	bne.n	8012c78 <tcp_rexmit_rto_prepare+0x1c>
 8012c6a:	4b31      	ldr	r3, [pc, #196]	@ (8012d30 <tcp_rexmit_rto_prepare+0xd4>)
 8012c6c:	f240 6263 	movw	r2, #1635	@ 0x663
 8012c70:	4930      	ldr	r1, [pc, #192]	@ (8012d34 <tcp_rexmit_rto_prepare+0xd8>)
 8012c72:	4831      	ldr	r0, [pc, #196]	@ (8012d38 <tcp_rexmit_rto_prepare+0xdc>)
 8012c74:	f003 fe6a 	bl	801694c <iprintf>

  if (pcb->unacked == NULL) {
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d102      	bne.n	8012c86 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012c80:	f06f 0305 	mvn.w	r3, #5
 8012c84:	e050      	b.n	8012d28 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c8a:	60fb      	str	r3, [r7, #12]
 8012c8c:	e00b      	b.n	8012ca6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012c8e:	68f8      	ldr	r0, [r7, #12]
 8012c90:	f7ff fee4 	bl	8012a5c <tcp_output_segment_busy>
 8012c94:	4603      	mov	r3, r0
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d002      	beq.n	8012ca0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012c9a:	f06f 0305 	mvn.w	r3, #5
 8012c9e:	e043      	b.n	8012d28 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	60fb      	str	r3, [r7, #12]
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d1ef      	bne.n	8012c8e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012cae:	68f8      	ldr	r0, [r7, #12]
 8012cb0:	f7ff fed4 	bl	8012a5c <tcp_output_segment_busy>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d002      	beq.n	8012cc0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012cba:	f06f 0305 	mvn.w	r3, #5
 8012cbe:	e033      	b.n	8012d28 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	8b5b      	ldrh	r3, [r3, #26]
 8012cda:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8012cde:	b29a      	uxth	r2, r3
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	68db      	ldr	r3, [r3, #12]
 8012ce8:	685b      	ldr	r3, [r3, #4]
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7f8 fd3f 	bl	800b76e <lwip_htonl>
 8012cf0:	4604      	mov	r4, r0
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	891b      	ldrh	r3, [r3, #8]
 8012cf6:	461d      	mov	r5, r3
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	68db      	ldr	r3, [r3, #12]
 8012cfc:	899b      	ldrh	r3, [r3, #12]
 8012cfe:	b29b      	uxth	r3, r3
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7f8 fd1f 	bl	800b744 <lwip_htons>
 8012d06:	4603      	mov	r3, r0
 8012d08:	b2db      	uxtb	r3, r3
 8012d0a:	f003 0303 	and.w	r3, r3, #3
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d001      	beq.n	8012d16 <tcp_rexmit_rto_prepare+0xba>
 8012d12:	2301      	movs	r3, #1
 8012d14:	e000      	b.n	8012d18 <tcp_rexmit_rto_prepare+0xbc>
 8012d16:	2300      	movs	r3, #0
 8012d18:	442b      	add	r3, r5
 8012d1a:	18e2      	adds	r2, r4, r3
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2200      	movs	r2, #0
 8012d24:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012d26:	2300      	movs	r3, #0
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	3710      	adds	r7, #16
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8012d30:	08019a98 	.word	0x08019a98
 8012d34:	0801a0d4 	.word	0x0801a0d4
 8012d38:	08019aec 	.word	0x08019aec

08012d3c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b082      	sub	sp, #8
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d106      	bne.n	8012d58 <tcp_rexmit_rto_commit+0x1c>
 8012d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8012d80 <tcp_rexmit_rto_commit+0x44>)
 8012d4c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012d50:	490c      	ldr	r1, [pc, #48]	@ (8012d84 <tcp_rexmit_rto_commit+0x48>)
 8012d52:	480d      	ldr	r0, [pc, #52]	@ (8012d88 <tcp_rexmit_rto_commit+0x4c>)
 8012d54:	f003 fdfa 	bl	801694c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d5e:	2bff      	cmp	r3, #255	@ 0xff
 8012d60:	d007      	beq.n	8012d72 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d68:	3301      	adds	r3, #1
 8012d6a:	b2da      	uxtb	r2, r3
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f7ff fc7e 	bl	8012674 <tcp_output>
}
 8012d78:	bf00      	nop
 8012d7a:	3708      	adds	r7, #8
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}
 8012d80:	08019a98 	.word	0x08019a98
 8012d84:	0801a0f8 	.word	0x0801a0f8
 8012d88:	08019aec 	.word	0x08019aec

08012d8c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b082      	sub	sp, #8
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d106      	bne.n	8012da8 <tcp_rexmit_rto+0x1c>
 8012d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8012dc4 <tcp_rexmit_rto+0x38>)
 8012d9c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8012da0:	4909      	ldr	r1, [pc, #36]	@ (8012dc8 <tcp_rexmit_rto+0x3c>)
 8012da2:	480a      	ldr	r0, [pc, #40]	@ (8012dcc <tcp_rexmit_rto+0x40>)
 8012da4:	f003 fdd2 	bl	801694c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f7ff ff57 	bl	8012c5c <tcp_rexmit_rto_prepare>
 8012dae:	4603      	mov	r3, r0
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d102      	bne.n	8012dba <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f7ff ffc1 	bl	8012d3c <tcp_rexmit_rto_commit>
  }
}
 8012dba:	bf00      	nop
 8012dbc:	3708      	adds	r7, #8
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}
 8012dc2:	bf00      	nop
 8012dc4:	08019a98 	.word	0x08019a98
 8012dc8:	0801a11c 	.word	0x0801a11c
 8012dcc:	08019aec 	.word	0x08019aec

08012dd0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012dd0:	b590      	push	{r4, r7, lr}
 8012dd2:	b085      	sub	sp, #20
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d106      	bne.n	8012dec <tcp_rexmit+0x1c>
 8012dde:	4b2f      	ldr	r3, [pc, #188]	@ (8012e9c <tcp_rexmit+0xcc>)
 8012de0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8012de4:	492e      	ldr	r1, [pc, #184]	@ (8012ea0 <tcp_rexmit+0xd0>)
 8012de6:	482f      	ldr	r0, [pc, #188]	@ (8012ea4 <tcp_rexmit+0xd4>)
 8012de8:	f003 fdb0 	bl	801694c <iprintf>

  if (pcb->unacked == NULL) {
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d102      	bne.n	8012dfa <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012df4:	f06f 0305 	mvn.w	r3, #5
 8012df8:	e04c      	b.n	8012e94 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012dfe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012e00:	68b8      	ldr	r0, [r7, #8]
 8012e02:	f7ff fe2b 	bl	8012a5c <tcp_output_segment_busy>
 8012e06:	4603      	mov	r3, r0
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d002      	beq.n	8012e12 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012e0c:	f06f 0305 	mvn.w	r3, #5
 8012e10:	e040      	b.n	8012e94 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	681a      	ldr	r2, [r3, #0]
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	336c      	adds	r3, #108	@ 0x6c
 8012e1e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012e20:	e002      	b.n	8012e28 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d011      	beq.n	8012e54 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	68db      	ldr	r3, [r3, #12]
 8012e36:	685b      	ldr	r3, [r3, #4]
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f7f8 fc98 	bl	800b76e <lwip_htonl>
 8012e3e:	4604      	mov	r4, r0
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	68db      	ldr	r3, [r3, #12]
 8012e44:	685b      	ldr	r3, [r3, #4]
 8012e46:	4618      	mov	r0, r3
 8012e48:	f7f8 fc91 	bl	800b76e <lwip_htonl>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	dbe6      	blt.n	8012e22 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	681a      	ldr	r2, [r3, #0]
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	68ba      	ldr	r2, [r7, #8]
 8012e60:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012e62:	68bb      	ldr	r3, [r7, #8]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d103      	bne.n	8012e72 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012e78:	2bff      	cmp	r3, #255	@ 0xff
 8012e7a:	d007      	beq.n	8012e8c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012e82:	3301      	adds	r3, #1
 8012e84:	b2da      	uxtb	r2, r3
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2200      	movs	r2, #0
 8012e90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012e92:	2300      	movs	r3, #0
}
 8012e94:	4618      	mov	r0, r3
 8012e96:	3714      	adds	r7, #20
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd90      	pop	{r4, r7, pc}
 8012e9c:	08019a98 	.word	0x08019a98
 8012ea0:	0801a138 	.word	0x0801a138
 8012ea4:	08019aec 	.word	0x08019aec

08012ea8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b082      	sub	sp, #8
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d106      	bne.n	8012ec4 <tcp_rexmit_fast+0x1c>
 8012eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8012f60 <tcp_rexmit_fast+0xb8>)
 8012eb8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8012ebc:	4929      	ldr	r1, [pc, #164]	@ (8012f64 <tcp_rexmit_fast+0xbc>)
 8012ebe:	482a      	ldr	r0, [pc, #168]	@ (8012f68 <tcp_rexmit_fast+0xc0>)
 8012ec0:	f003 fd44 	bl	801694c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d044      	beq.n	8012f56 <tcp_rexmit_fast+0xae>
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	8b5b      	ldrh	r3, [r3, #26]
 8012ed0:	f003 0304 	and.w	r3, r3, #4
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d13e      	bne.n	8012f56 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	f7ff ff79 	bl	8012dd0 <tcp_rexmit>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d138      	bne.n	8012f56 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012ef0:	4293      	cmp	r3, r2
 8012ef2:	bf28      	it	cs
 8012ef4:	4613      	movcs	r3, r2
 8012ef6:	b29b      	uxth	r3, r3
 8012ef8:	0fda      	lsrs	r2, r3, #31
 8012efa:	4413      	add	r3, r2
 8012efc:	105b      	asrs	r3, r3, #1
 8012efe:	b29a      	uxth	r2, r3
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012f0c:	461a      	mov	r2, r3
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f12:	005b      	lsls	r3, r3, #1
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d206      	bcs.n	8012f26 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f1c:	005b      	lsls	r3, r3, #1
 8012f1e:	b29a      	uxth	r2, r3
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f30:	4619      	mov	r1, r3
 8012f32:	0049      	lsls	r1, r1, #1
 8012f34:	440b      	add	r3, r1
 8012f36:	b29b      	uxth	r3, r3
 8012f38:	4413      	add	r3, r2
 8012f3a:	b29a      	uxth	r2, r3
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	8b5b      	ldrh	r3, [r3, #26]
 8012f46:	f043 0304 	orr.w	r3, r3, #4
 8012f4a:	b29a      	uxth	r2, r3
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2200      	movs	r2, #0
 8012f54:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8012f56:	bf00      	nop
 8012f58:	3708      	adds	r7, #8
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	bd80      	pop	{r7, pc}
 8012f5e:	bf00      	nop
 8012f60:	08019a98 	.word	0x08019a98
 8012f64:	0801a150 	.word	0x0801a150
 8012f68:	08019aec 	.word	0x08019aec

08012f6c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b086      	sub	sp, #24
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	60f8      	str	r0, [r7, #12]
 8012f74:	607b      	str	r3, [r7, #4]
 8012f76:	460b      	mov	r3, r1
 8012f78:	817b      	strh	r3, [r7, #10]
 8012f7a:	4613      	mov	r3, r2
 8012f7c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012f7e:	897a      	ldrh	r2, [r7, #10]
 8012f80:	893b      	ldrh	r3, [r7, #8]
 8012f82:	4413      	add	r3, r2
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	3314      	adds	r3, #20
 8012f88:	b29b      	uxth	r3, r3
 8012f8a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012f8e:	4619      	mov	r1, r3
 8012f90:	2022      	movs	r0, #34	@ 0x22
 8012f92:	f7f9 fce5 	bl	800c960 <pbuf_alloc>
 8012f96:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d04d      	beq.n	801303a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012f9e:	897b      	ldrh	r3, [r7, #10]
 8012fa0:	3313      	adds	r3, #19
 8012fa2:	697a      	ldr	r2, [r7, #20]
 8012fa4:	8952      	ldrh	r2, [r2, #10]
 8012fa6:	4293      	cmp	r3, r2
 8012fa8:	db06      	blt.n	8012fb8 <tcp_output_alloc_header_common+0x4c>
 8012faa:	4b26      	ldr	r3, [pc, #152]	@ (8013044 <tcp_output_alloc_header_common+0xd8>)
 8012fac:	f240 7223 	movw	r2, #1827	@ 0x723
 8012fb0:	4925      	ldr	r1, [pc, #148]	@ (8013048 <tcp_output_alloc_header_common+0xdc>)
 8012fb2:	4826      	ldr	r0, [pc, #152]	@ (801304c <tcp_output_alloc_header_common+0xe0>)
 8012fb4:	f003 fcca 	bl	801694c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	685b      	ldr	r3, [r3, #4]
 8012fbc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012fbe:	8c3b      	ldrh	r3, [r7, #32]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7f8 fbbf 	bl	800b744 <lwip_htons>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	461a      	mov	r2, r3
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012fce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f7f8 fbb7 	bl	800b744 <lwip_htons>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	461a      	mov	r2, r3
 8012fda:	693b      	ldr	r3, [r7, #16]
 8012fdc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012fde:	693b      	ldr	r3, [r7, #16]
 8012fe0:	687a      	ldr	r2, [r7, #4]
 8012fe2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012fe4:	68f8      	ldr	r0, [r7, #12]
 8012fe6:	f7f8 fbc2 	bl	800b76e <lwip_htonl>
 8012fea:	4602      	mov	r2, r0
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012ff0:	897b      	ldrh	r3, [r7, #10]
 8012ff2:	089b      	lsrs	r3, r3, #2
 8012ff4:	b29b      	uxth	r3, r3
 8012ff6:	3305      	adds	r3, #5
 8012ff8:	b29b      	uxth	r3, r3
 8012ffa:	031b      	lsls	r3, r3, #12
 8012ffc:	b29a      	uxth	r2, r3
 8012ffe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013002:	b29b      	uxth	r3, r3
 8013004:	4313      	orrs	r3, r2
 8013006:	b29b      	uxth	r3, r3
 8013008:	4618      	mov	r0, r3
 801300a:	f7f8 fb9b 	bl	800b744 <lwip_htons>
 801300e:	4603      	mov	r3, r0
 8013010:	461a      	mov	r2, r3
 8013012:	693b      	ldr	r3, [r7, #16]
 8013014:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013016:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013018:	4618      	mov	r0, r3
 801301a:	f7f8 fb93 	bl	800b744 <lwip_htons>
 801301e:	4603      	mov	r3, r0
 8013020:	461a      	mov	r2, r3
 8013022:	693b      	ldr	r3, [r7, #16]
 8013024:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013026:	693b      	ldr	r3, [r7, #16]
 8013028:	2200      	movs	r2, #0
 801302a:	741a      	strb	r2, [r3, #16]
 801302c:	2200      	movs	r2, #0
 801302e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	2200      	movs	r2, #0
 8013034:	749a      	strb	r2, [r3, #18]
 8013036:	2200      	movs	r2, #0
 8013038:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801303a:	697b      	ldr	r3, [r7, #20]
}
 801303c:	4618      	mov	r0, r3
 801303e:	3718      	adds	r7, #24
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}
 8013044:	08019a98 	.word	0x08019a98
 8013048:	0801a170 	.word	0x0801a170
 801304c:	08019aec 	.word	0x08019aec

08013050 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013050:	b5b0      	push	{r4, r5, r7, lr}
 8013052:	b08a      	sub	sp, #40	@ 0x28
 8013054:	af04      	add	r7, sp, #16
 8013056:	60f8      	str	r0, [r7, #12]
 8013058:	607b      	str	r3, [r7, #4]
 801305a:	460b      	mov	r3, r1
 801305c:	817b      	strh	r3, [r7, #10]
 801305e:	4613      	mov	r3, r2
 8013060:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d106      	bne.n	8013076 <tcp_output_alloc_header+0x26>
 8013068:	4b15      	ldr	r3, [pc, #84]	@ (80130c0 <tcp_output_alloc_header+0x70>)
 801306a:	f240 7242 	movw	r2, #1858	@ 0x742
 801306e:	4915      	ldr	r1, [pc, #84]	@ (80130c4 <tcp_output_alloc_header+0x74>)
 8013070:	4815      	ldr	r0, [pc, #84]	@ (80130c8 <tcp_output_alloc_header+0x78>)
 8013072:	f003 fc6b 	bl	801694c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	8adb      	ldrh	r3, [r3, #22]
 801307e:	68fa      	ldr	r2, [r7, #12]
 8013080:	8b12      	ldrh	r2, [r2, #24]
 8013082:	68f9      	ldr	r1, [r7, #12]
 8013084:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8013086:	893d      	ldrh	r5, [r7, #8]
 8013088:	897c      	ldrh	r4, [r7, #10]
 801308a:	9103      	str	r1, [sp, #12]
 801308c:	2110      	movs	r1, #16
 801308e:	9102      	str	r1, [sp, #8]
 8013090:	9201      	str	r2, [sp, #4]
 8013092:	9300      	str	r3, [sp, #0]
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	462a      	mov	r2, r5
 8013098:	4621      	mov	r1, r4
 801309a:	f7ff ff67 	bl	8012f6c <tcp_output_alloc_header_common>
 801309e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80130a0:	697b      	ldr	r3, [r7, #20]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d006      	beq.n	80130b4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130aa:	68fa      	ldr	r2, [r7, #12]
 80130ac:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80130ae:	441a      	add	r2, r3
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80130b4:	697b      	ldr	r3, [r7, #20]
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3718      	adds	r7, #24
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bdb0      	pop	{r4, r5, r7, pc}
 80130be:	bf00      	nop
 80130c0:	08019a98 	.word	0x08019a98
 80130c4:	0801a1a0 	.word	0x0801a1a0
 80130c8:	08019aec 	.word	0x08019aec

080130cc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b088      	sub	sp, #32
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	60f8      	str	r0, [r7, #12]
 80130d4:	60b9      	str	r1, [r7, #8]
 80130d6:	4611      	mov	r1, r2
 80130d8:	461a      	mov	r2, r3
 80130da:	460b      	mov	r3, r1
 80130dc:	71fb      	strb	r3, [r7, #7]
 80130de:	4613      	mov	r3, r2
 80130e0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80130e2:	2300      	movs	r3, #0
 80130e4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80130e6:	68bb      	ldr	r3, [r7, #8]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d106      	bne.n	80130fa <tcp_output_fill_options+0x2e>
 80130ec:	4b12      	ldr	r3, [pc, #72]	@ (8013138 <tcp_output_fill_options+0x6c>)
 80130ee:	f240 7256 	movw	r2, #1878	@ 0x756
 80130f2:	4912      	ldr	r1, [pc, #72]	@ (801313c <tcp_output_fill_options+0x70>)
 80130f4:	4812      	ldr	r0, [pc, #72]	@ (8013140 <tcp_output_fill_options+0x74>)
 80130f6:	f003 fc29 	bl	801694c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	685b      	ldr	r3, [r3, #4]
 80130fe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013100:	69bb      	ldr	r3, [r7, #24]
 8013102:	3314      	adds	r3, #20
 8013104:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013106:	8bfb      	ldrh	r3, [r7, #30]
 8013108:	009b      	lsls	r3, r3, #2
 801310a:	461a      	mov	r2, r3
 801310c:	79fb      	ldrb	r3, [r7, #7]
 801310e:	009b      	lsls	r3, r3, #2
 8013110:	f003 0304 	and.w	r3, r3, #4
 8013114:	4413      	add	r3, r2
 8013116:	3314      	adds	r3, #20
 8013118:	69ba      	ldr	r2, [r7, #24]
 801311a:	4413      	add	r3, r2
 801311c:	697a      	ldr	r2, [r7, #20]
 801311e:	429a      	cmp	r2, r3
 8013120:	d006      	beq.n	8013130 <tcp_output_fill_options+0x64>
 8013122:	4b05      	ldr	r3, [pc, #20]	@ (8013138 <tcp_output_fill_options+0x6c>)
 8013124:	f240 7275 	movw	r2, #1909	@ 0x775
 8013128:	4906      	ldr	r1, [pc, #24]	@ (8013144 <tcp_output_fill_options+0x78>)
 801312a:	4805      	ldr	r0, [pc, #20]	@ (8013140 <tcp_output_fill_options+0x74>)
 801312c:	f003 fc0e 	bl	801694c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013130:	bf00      	nop
 8013132:	3720      	adds	r7, #32
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}
 8013138:	08019a98 	.word	0x08019a98
 801313c:	0801a1c8 	.word	0x0801a1c8
 8013140:	08019aec 	.word	0x08019aec
 8013144:	0801a0c0 	.word	0x0801a0c0

08013148 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013148:	b580      	push	{r7, lr}
 801314a:	b08a      	sub	sp, #40	@ 0x28
 801314c:	af04      	add	r7, sp, #16
 801314e:	60f8      	str	r0, [r7, #12]
 8013150:	60b9      	str	r1, [r7, #8]
 8013152:	607a      	str	r2, [r7, #4]
 8013154:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d106      	bne.n	801316a <tcp_output_control_segment+0x22>
 801315c:	4b1c      	ldr	r3, [pc, #112]	@ (80131d0 <tcp_output_control_segment+0x88>)
 801315e:	f240 7287 	movw	r2, #1927	@ 0x787
 8013162:	491c      	ldr	r1, [pc, #112]	@ (80131d4 <tcp_output_control_segment+0x8c>)
 8013164:	481c      	ldr	r0, [pc, #112]	@ (80131d8 <tcp_output_control_segment+0x90>)
 8013166:	f003 fbf1 	bl	801694c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801316a:	683a      	ldr	r2, [r7, #0]
 801316c:	6879      	ldr	r1, [r7, #4]
 801316e:	68f8      	ldr	r0, [r7, #12]
 8013170:	f7fe faea 	bl	8011748 <tcp_route>
 8013174:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d102      	bne.n	8013182 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801317c:	23fc      	movs	r3, #252	@ 0xfc
 801317e:	75fb      	strb	r3, [r7, #23]
 8013180:	e01c      	b.n	80131bc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d006      	beq.n	8013196 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	7adb      	ldrb	r3, [r3, #11]
 801318c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	7a9b      	ldrb	r3, [r3, #10]
 8013192:	757b      	strb	r3, [r7, #21]
 8013194:	e003      	b.n	801319e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013196:	23ff      	movs	r3, #255	@ 0xff
 8013198:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801319a:	2300      	movs	r3, #0
 801319c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801319e:	7dba      	ldrb	r2, [r7, #22]
 80131a0:	693b      	ldr	r3, [r7, #16]
 80131a2:	9302      	str	r3, [sp, #8]
 80131a4:	2306      	movs	r3, #6
 80131a6:	9301      	str	r3, [sp, #4]
 80131a8:	7d7b      	ldrb	r3, [r7, #21]
 80131aa:	9300      	str	r3, [sp, #0]
 80131ac:	4613      	mov	r3, r2
 80131ae:	683a      	ldr	r2, [r7, #0]
 80131b0:	6879      	ldr	r1, [r7, #4]
 80131b2:	68b8      	ldr	r0, [r7, #8]
 80131b4:	f002 f8e6 	bl	8015384 <ip4_output_if>
 80131b8:	4603      	mov	r3, r0
 80131ba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80131bc:	68b8      	ldr	r0, [r7, #8]
 80131be:	f7f9 feb3 	bl	800cf28 <pbuf_free>
  return err;
 80131c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80131c6:	4618      	mov	r0, r3
 80131c8:	3718      	adds	r7, #24
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}
 80131ce:	bf00      	nop
 80131d0:	08019a98 	.word	0x08019a98
 80131d4:	0801a1f0 	.word	0x0801a1f0
 80131d8:	08019aec 	.word	0x08019aec

080131dc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80131dc:	b590      	push	{r4, r7, lr}
 80131de:	b08b      	sub	sp, #44	@ 0x2c
 80131e0:	af04      	add	r7, sp, #16
 80131e2:	60f8      	str	r0, [r7, #12]
 80131e4:	60b9      	str	r1, [r7, #8]
 80131e6:	607a      	str	r2, [r7, #4]
 80131e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80131ea:	683b      	ldr	r3, [r7, #0]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d106      	bne.n	80131fe <tcp_rst+0x22>
 80131f0:	4b1f      	ldr	r3, [pc, #124]	@ (8013270 <tcp_rst+0x94>)
 80131f2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80131f6:	491f      	ldr	r1, [pc, #124]	@ (8013274 <tcp_rst+0x98>)
 80131f8:	481f      	ldr	r0, [pc, #124]	@ (8013278 <tcp_rst+0x9c>)
 80131fa:	f003 fba7 	bl	801694c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80131fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013200:	2b00      	cmp	r3, #0
 8013202:	d106      	bne.n	8013212 <tcp_rst+0x36>
 8013204:	4b1a      	ldr	r3, [pc, #104]	@ (8013270 <tcp_rst+0x94>)
 8013206:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801320a:	491c      	ldr	r1, [pc, #112]	@ (801327c <tcp_rst+0xa0>)
 801320c:	481a      	ldr	r0, [pc, #104]	@ (8013278 <tcp_rst+0x9c>)
 801320e:	f003 fb9d 	bl	801694c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013212:	2300      	movs	r3, #0
 8013214:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013216:	f246 0308 	movw	r3, #24584	@ 0x6008
 801321a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801321c:	7dfb      	ldrb	r3, [r7, #23]
 801321e:	b29c      	uxth	r4, r3
 8013220:	68b8      	ldr	r0, [r7, #8]
 8013222:	f7f8 faa4 	bl	800b76e <lwip_htonl>
 8013226:	4602      	mov	r2, r0
 8013228:	8abb      	ldrh	r3, [r7, #20]
 801322a:	9303      	str	r3, [sp, #12]
 801322c:	2314      	movs	r3, #20
 801322e:	9302      	str	r3, [sp, #8]
 8013230:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8013232:	9301      	str	r3, [sp, #4]
 8013234:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013236:	9300      	str	r3, [sp, #0]
 8013238:	4613      	mov	r3, r2
 801323a:	2200      	movs	r2, #0
 801323c:	4621      	mov	r1, r4
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f7ff fe94 	bl	8012f6c <tcp_output_alloc_header_common>
 8013244:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d00c      	beq.n	8013266 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801324c:	7dfb      	ldrb	r3, [r7, #23]
 801324e:	2200      	movs	r2, #0
 8013250:	6939      	ldr	r1, [r7, #16]
 8013252:	68f8      	ldr	r0, [r7, #12]
 8013254:	f7ff ff3a 	bl	80130cc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801325a:	683a      	ldr	r2, [r7, #0]
 801325c:	6939      	ldr	r1, [r7, #16]
 801325e:	68f8      	ldr	r0, [r7, #12]
 8013260:	f7ff ff72 	bl	8013148 <tcp_output_control_segment>
 8013264:	e000      	b.n	8013268 <tcp_rst+0x8c>
    return;
 8013266:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013268:	371c      	adds	r7, #28
 801326a:	46bd      	mov	sp, r7
 801326c:	bd90      	pop	{r4, r7, pc}
 801326e:	bf00      	nop
 8013270:	08019a98 	.word	0x08019a98
 8013274:	0801a21c 	.word	0x0801a21c
 8013278:	08019aec 	.word	0x08019aec
 801327c:	0801a238 	.word	0x0801a238

08013280 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013280:	b590      	push	{r4, r7, lr}
 8013282:	b087      	sub	sp, #28
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013288:	2300      	movs	r3, #0
 801328a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801328c:	2300      	movs	r3, #0
 801328e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d106      	bne.n	80132a4 <tcp_send_empty_ack+0x24>
 8013296:	4b28      	ldr	r3, [pc, #160]	@ (8013338 <tcp_send_empty_ack+0xb8>)
 8013298:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801329c:	4927      	ldr	r1, [pc, #156]	@ (801333c <tcp_send_empty_ack+0xbc>)
 801329e:	4828      	ldr	r0, [pc, #160]	@ (8013340 <tcp_send_empty_ack+0xc0>)
 80132a0:	f003 fb54 	bl	801694c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80132a4:	7dfb      	ldrb	r3, [r7, #23]
 80132a6:	009b      	lsls	r3, r3, #2
 80132a8:	b2db      	uxtb	r3, r3
 80132aa:	f003 0304 	and.w	r3, r3, #4
 80132ae:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80132b0:	7d7b      	ldrb	r3, [r7, #21]
 80132b2:	b29c      	uxth	r4, r3
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7f8 fa58 	bl	800b76e <lwip_htonl>
 80132be:	4603      	mov	r3, r0
 80132c0:	2200      	movs	r2, #0
 80132c2:	4621      	mov	r1, r4
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f7ff fec3 	bl	8013050 <tcp_output_alloc_header>
 80132ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d109      	bne.n	80132e6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	8b5b      	ldrh	r3, [r3, #26]
 80132d6:	f043 0303 	orr.w	r3, r3, #3
 80132da:	b29a      	uxth	r2, r3
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80132e0:	f06f 0301 	mvn.w	r3, #1
 80132e4:	e023      	b.n	801332e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80132e6:	7dbb      	ldrb	r3, [r7, #22]
 80132e8:	7dfa      	ldrb	r2, [r7, #23]
 80132ea:	6939      	ldr	r1, [r7, #16]
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f7ff feed 	bl	80130cc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80132f2:	687a      	ldr	r2, [r7, #4]
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	3304      	adds	r3, #4
 80132f8:	6939      	ldr	r1, [r7, #16]
 80132fa:	6878      	ldr	r0, [r7, #4]
 80132fc:	f7ff ff24 	bl	8013148 <tcp_output_control_segment>
 8013300:	4603      	mov	r3, r0
 8013302:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d007      	beq.n	801331c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	8b5b      	ldrh	r3, [r3, #26]
 8013310:	f043 0303 	orr.w	r3, r3, #3
 8013314:	b29a      	uxth	r2, r3
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	835a      	strh	r2, [r3, #26]
 801331a:	e006      	b.n	801332a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	8b5b      	ldrh	r3, [r3, #26]
 8013320:	f023 0303 	bic.w	r3, r3, #3
 8013324:	b29a      	uxth	r2, r3
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801332a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801332e:	4618      	mov	r0, r3
 8013330:	371c      	adds	r7, #28
 8013332:	46bd      	mov	sp, r7
 8013334:	bd90      	pop	{r4, r7, pc}
 8013336:	bf00      	nop
 8013338:	08019a98 	.word	0x08019a98
 801333c:	0801a254 	.word	0x0801a254
 8013340:	08019aec 	.word	0x08019aec

08013344 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013344:	b590      	push	{r4, r7, lr}
 8013346:	b087      	sub	sp, #28
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801334c:	2300      	movs	r3, #0
 801334e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d106      	bne.n	8013364 <tcp_keepalive+0x20>
 8013356:	4b18      	ldr	r3, [pc, #96]	@ (80133b8 <tcp_keepalive+0x74>)
 8013358:	f640 0224 	movw	r2, #2084	@ 0x824
 801335c:	4917      	ldr	r1, [pc, #92]	@ (80133bc <tcp_keepalive+0x78>)
 801335e:	4818      	ldr	r0, [pc, #96]	@ (80133c0 <tcp_keepalive+0x7c>)
 8013360:	f003 faf4 	bl	801694c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013364:	7dfb      	ldrb	r3, [r7, #23]
 8013366:	b29c      	uxth	r4, r3
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801336c:	3b01      	subs	r3, #1
 801336e:	4618      	mov	r0, r3
 8013370:	f7f8 f9fd 	bl	800b76e <lwip_htonl>
 8013374:	4603      	mov	r3, r0
 8013376:	2200      	movs	r2, #0
 8013378:	4621      	mov	r1, r4
 801337a:	6878      	ldr	r0, [r7, #4]
 801337c:	f7ff fe68 	bl	8013050 <tcp_output_alloc_header>
 8013380:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013382:	693b      	ldr	r3, [r7, #16]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d102      	bne.n	801338e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013388:	f04f 33ff 	mov.w	r3, #4294967295
 801338c:	e010      	b.n	80133b0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801338e:	7dfb      	ldrb	r3, [r7, #23]
 8013390:	2200      	movs	r2, #0
 8013392:	6939      	ldr	r1, [r7, #16]
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f7ff fe99 	bl	80130cc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801339a:	687a      	ldr	r2, [r7, #4]
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	3304      	adds	r3, #4
 80133a0:	6939      	ldr	r1, [r7, #16]
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f7ff fed0 	bl	8013148 <tcp_output_control_segment>
 80133a8:	4603      	mov	r3, r0
 80133aa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80133ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80133b0:	4618      	mov	r0, r3
 80133b2:	371c      	adds	r7, #28
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd90      	pop	{r4, r7, pc}
 80133b8:	08019a98 	.word	0x08019a98
 80133bc:	0801a274 	.word	0x0801a274
 80133c0:	08019aec 	.word	0x08019aec

080133c4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80133c4:	b590      	push	{r4, r7, lr}
 80133c6:	b08b      	sub	sp, #44	@ 0x2c
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80133cc:	2300      	movs	r3, #0
 80133ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d106      	bne.n	80133e6 <tcp_zero_window_probe+0x22>
 80133d8:	4b4c      	ldr	r3, [pc, #304]	@ (801350c <tcp_zero_window_probe+0x148>)
 80133da:	f640 024f 	movw	r2, #2127	@ 0x84f
 80133de:	494c      	ldr	r1, [pc, #304]	@ (8013510 <tcp_zero_window_probe+0x14c>)
 80133e0:	484c      	ldr	r0, [pc, #304]	@ (8013514 <tcp_zero_window_probe+0x150>)
 80133e2:	f003 fab3 	bl	801694c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80133ea:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80133ec:	6a3b      	ldr	r3, [r7, #32]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d101      	bne.n	80133f6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80133f2:	2300      	movs	r3, #0
 80133f4:	e086      	b.n	8013504 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80133fc:	2bff      	cmp	r3, #255	@ 0xff
 80133fe:	d007      	beq.n	8013410 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013406:	3301      	adds	r3, #1
 8013408:	b2da      	uxtb	r2, r3
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013410:	6a3b      	ldr	r3, [r7, #32]
 8013412:	68db      	ldr	r3, [r3, #12]
 8013414:	899b      	ldrh	r3, [r3, #12]
 8013416:	b29b      	uxth	r3, r3
 8013418:	4618      	mov	r0, r3
 801341a:	f7f8 f993 	bl	800b744 <lwip_htons>
 801341e:	4603      	mov	r3, r0
 8013420:	b2db      	uxtb	r3, r3
 8013422:	f003 0301 	and.w	r3, r3, #1
 8013426:	2b00      	cmp	r3, #0
 8013428:	d005      	beq.n	8013436 <tcp_zero_window_probe+0x72>
 801342a:	6a3b      	ldr	r3, [r7, #32]
 801342c:	891b      	ldrh	r3, [r3, #8]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d101      	bne.n	8013436 <tcp_zero_window_probe+0x72>
 8013432:	2301      	movs	r3, #1
 8013434:	e000      	b.n	8013438 <tcp_zero_window_probe+0x74>
 8013436:	2300      	movs	r3, #0
 8013438:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801343a:	7ffb      	ldrb	r3, [r7, #31]
 801343c:	2b00      	cmp	r3, #0
 801343e:	bf0c      	ite	eq
 8013440:	2301      	moveq	r3, #1
 8013442:	2300      	movne	r3, #0
 8013444:	b2db      	uxtb	r3, r3
 8013446:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801344c:	b299      	uxth	r1, r3
 801344e:	6a3b      	ldr	r3, [r7, #32]
 8013450:	68db      	ldr	r3, [r3, #12]
 8013452:	685b      	ldr	r3, [r3, #4]
 8013454:	8bba      	ldrh	r2, [r7, #28]
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	f7ff fdfa 	bl	8013050 <tcp_output_alloc_header>
 801345c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801345e:	69bb      	ldr	r3, [r7, #24]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d102      	bne.n	801346a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013464:	f04f 33ff 	mov.w	r3, #4294967295
 8013468:	e04c      	b.n	8013504 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801346a:	69bb      	ldr	r3, [r7, #24]
 801346c:	685b      	ldr	r3, [r3, #4]
 801346e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013470:	7ffb      	ldrb	r3, [r7, #31]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d011      	beq.n	801349a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013476:	697b      	ldr	r3, [r7, #20]
 8013478:	899b      	ldrh	r3, [r3, #12]
 801347a:	b29b      	uxth	r3, r3
 801347c:	b21b      	sxth	r3, r3
 801347e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013482:	b21c      	sxth	r4, r3
 8013484:	2011      	movs	r0, #17
 8013486:	f7f8 f95d 	bl	800b744 <lwip_htons>
 801348a:	4603      	mov	r3, r0
 801348c:	b21b      	sxth	r3, r3
 801348e:	4323      	orrs	r3, r4
 8013490:	b21b      	sxth	r3, r3
 8013492:	b29a      	uxth	r2, r3
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	819a      	strh	r2, [r3, #12]
 8013498:	e010      	b.n	80134bc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801349a:	69bb      	ldr	r3, [r7, #24]
 801349c:	685b      	ldr	r3, [r3, #4]
 801349e:	3314      	adds	r3, #20
 80134a0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80134a2:	6a3b      	ldr	r3, [r7, #32]
 80134a4:	6858      	ldr	r0, [r3, #4]
 80134a6:	6a3b      	ldr	r3, [r7, #32]
 80134a8:	685b      	ldr	r3, [r3, #4]
 80134aa:	891a      	ldrh	r2, [r3, #8]
 80134ac:	6a3b      	ldr	r3, [r7, #32]
 80134ae:	891b      	ldrh	r3, [r3, #8]
 80134b0:	1ad3      	subs	r3, r2, r3
 80134b2:	b29b      	uxth	r3, r3
 80134b4:	2201      	movs	r2, #1
 80134b6:	6939      	ldr	r1, [r7, #16]
 80134b8:	f7f9 ff2c 	bl	800d314 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80134bc:	6a3b      	ldr	r3, [r7, #32]
 80134be:	68db      	ldr	r3, [r3, #12]
 80134c0:	685b      	ldr	r3, [r3, #4]
 80134c2:	4618      	mov	r0, r3
 80134c4:	f7f8 f953 	bl	800b76e <lwip_htonl>
 80134c8:	4603      	mov	r3, r0
 80134ca:	3301      	adds	r3, #1
 80134cc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	1ad3      	subs	r3, r2, r3
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	da02      	bge.n	80134e0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	68fa      	ldr	r2, [r7, #12]
 80134de:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80134e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134e4:	2200      	movs	r2, #0
 80134e6:	69b9      	ldr	r1, [r7, #24]
 80134e8:	6878      	ldr	r0, [r7, #4]
 80134ea:	f7ff fdef 	bl	80130cc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80134ee:	687a      	ldr	r2, [r7, #4]
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	3304      	adds	r3, #4
 80134f4:	69b9      	ldr	r1, [r7, #24]
 80134f6:	6878      	ldr	r0, [r7, #4]
 80134f8:	f7ff fe26 	bl	8013148 <tcp_output_control_segment>
 80134fc:	4603      	mov	r3, r0
 80134fe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013500:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013504:	4618      	mov	r0, r3
 8013506:	372c      	adds	r7, #44	@ 0x2c
 8013508:	46bd      	mov	sp, r7
 801350a:	bd90      	pop	{r4, r7, pc}
 801350c:	08019a98 	.word	0x08019a98
 8013510:	0801a290 	.word	0x0801a290
 8013514:	08019aec 	.word	0x08019aec

08013518 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b082      	sub	sp, #8
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013520:	f7f9 ffe6 	bl	800d4f0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013524:	4b0a      	ldr	r3, [pc, #40]	@ (8013550 <tcpip_tcp_timer+0x38>)
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d103      	bne.n	8013534 <tcpip_tcp_timer+0x1c>
 801352c:	4b09      	ldr	r3, [pc, #36]	@ (8013554 <tcpip_tcp_timer+0x3c>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d005      	beq.n	8013540 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013534:	2200      	movs	r2, #0
 8013536:	4908      	ldr	r1, [pc, #32]	@ (8013558 <tcpip_tcp_timer+0x40>)
 8013538:	20fa      	movs	r0, #250	@ 0xfa
 801353a:	f000 f8f3 	bl	8013724 <sys_timeout>
 801353e:	e003      	b.n	8013548 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013540:	4b06      	ldr	r3, [pc, #24]	@ (801355c <tcpip_tcp_timer+0x44>)
 8013542:	2200      	movs	r2, #0
 8013544:	601a      	str	r2, [r3, #0]
  }
}
 8013546:	bf00      	nop
 8013548:	bf00      	nop
 801354a:	3708      	adds	r7, #8
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}
 8013550:	2000f2bc 	.word	0x2000f2bc
 8013554:	2000f2c0 	.word	0x2000f2c0
 8013558:	08013519 	.word	0x08013519
 801355c:	2000f308 	.word	0x2000f308

08013560 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013564:	4b0a      	ldr	r3, [pc, #40]	@ (8013590 <tcp_timer_needed+0x30>)
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d10f      	bne.n	801358c <tcp_timer_needed+0x2c>
 801356c:	4b09      	ldr	r3, [pc, #36]	@ (8013594 <tcp_timer_needed+0x34>)
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d103      	bne.n	801357c <tcp_timer_needed+0x1c>
 8013574:	4b08      	ldr	r3, [pc, #32]	@ (8013598 <tcp_timer_needed+0x38>)
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d007      	beq.n	801358c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801357c:	4b04      	ldr	r3, [pc, #16]	@ (8013590 <tcp_timer_needed+0x30>)
 801357e:	2201      	movs	r2, #1
 8013580:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013582:	2200      	movs	r2, #0
 8013584:	4905      	ldr	r1, [pc, #20]	@ (801359c <tcp_timer_needed+0x3c>)
 8013586:	20fa      	movs	r0, #250	@ 0xfa
 8013588:	f000 f8cc 	bl	8013724 <sys_timeout>
  }
}
 801358c:	bf00      	nop
 801358e:	bd80      	pop	{r7, pc}
 8013590:	2000f308 	.word	0x2000f308
 8013594:	2000f2bc 	.word	0x2000f2bc
 8013598:	2000f2c0 	.word	0x2000f2c0
 801359c:	08013519 	.word	0x08013519

080135a0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b086      	sub	sp, #24
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	60f8      	str	r0, [r7, #12]
 80135a8:	60b9      	str	r1, [r7, #8]
 80135aa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80135ac:	200a      	movs	r0, #10
 80135ae:	f7f8 fda1 	bl	800c0f4 <memp_malloc>
 80135b2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80135b4:	693b      	ldr	r3, [r7, #16]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d109      	bne.n	80135ce <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80135ba:	693b      	ldr	r3, [r7, #16]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d151      	bne.n	8013664 <sys_timeout_abs+0xc4>
 80135c0:	4b2a      	ldr	r3, [pc, #168]	@ (801366c <sys_timeout_abs+0xcc>)
 80135c2:	22be      	movs	r2, #190	@ 0xbe
 80135c4:	492a      	ldr	r1, [pc, #168]	@ (8013670 <sys_timeout_abs+0xd0>)
 80135c6:	482b      	ldr	r0, [pc, #172]	@ (8013674 <sys_timeout_abs+0xd4>)
 80135c8:	f003 f9c0 	bl	801694c <iprintf>
    return;
 80135cc:	e04a      	b.n	8013664 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80135ce:	693b      	ldr	r3, [r7, #16]
 80135d0:	2200      	movs	r2, #0
 80135d2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80135d4:	693b      	ldr	r3, [r7, #16]
 80135d6:	68ba      	ldr	r2, [r7, #8]
 80135d8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80135da:	693b      	ldr	r3, [r7, #16]
 80135dc:	687a      	ldr	r2, [r7, #4]
 80135de:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80135e0:	693b      	ldr	r3, [r7, #16]
 80135e2:	68fa      	ldr	r2, [r7, #12]
 80135e4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80135e6:	4b24      	ldr	r3, [pc, #144]	@ (8013678 <sys_timeout_abs+0xd8>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d103      	bne.n	80135f6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80135ee:	4a22      	ldr	r2, [pc, #136]	@ (8013678 <sys_timeout_abs+0xd8>)
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	6013      	str	r3, [r2, #0]
    return;
 80135f4:	e037      	b.n	8013666 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	685a      	ldr	r2, [r3, #4]
 80135fa:	4b1f      	ldr	r3, [pc, #124]	@ (8013678 <sys_timeout_abs+0xd8>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	685b      	ldr	r3, [r3, #4]
 8013600:	1ad3      	subs	r3, r2, r3
 8013602:	0fdb      	lsrs	r3, r3, #31
 8013604:	f003 0301 	and.w	r3, r3, #1
 8013608:	b2db      	uxtb	r3, r3
 801360a:	2b00      	cmp	r3, #0
 801360c:	d007      	beq.n	801361e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801360e:	4b1a      	ldr	r3, [pc, #104]	@ (8013678 <sys_timeout_abs+0xd8>)
 8013610:	681a      	ldr	r2, [r3, #0]
 8013612:	693b      	ldr	r3, [r7, #16]
 8013614:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013616:	4a18      	ldr	r2, [pc, #96]	@ (8013678 <sys_timeout_abs+0xd8>)
 8013618:	693b      	ldr	r3, [r7, #16]
 801361a:	6013      	str	r3, [r2, #0]
 801361c:	e023      	b.n	8013666 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801361e:	4b16      	ldr	r3, [pc, #88]	@ (8013678 <sys_timeout_abs+0xd8>)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	617b      	str	r3, [r7, #20]
 8013624:	e01a      	b.n	801365c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d00b      	beq.n	8013646 <sys_timeout_abs+0xa6>
 801362e:	693b      	ldr	r3, [r7, #16]
 8013630:	685a      	ldr	r2, [r3, #4]
 8013632:	697b      	ldr	r3, [r7, #20]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	685b      	ldr	r3, [r3, #4]
 8013638:	1ad3      	subs	r3, r2, r3
 801363a:	0fdb      	lsrs	r3, r3, #31
 801363c:	f003 0301 	and.w	r3, r3, #1
 8013640:	b2db      	uxtb	r3, r3
 8013642:	2b00      	cmp	r3, #0
 8013644:	d007      	beq.n	8013656 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	681a      	ldr	r2, [r3, #0]
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	693a      	ldr	r2, [r7, #16]
 8013652:	601a      	str	r2, [r3, #0]
        break;
 8013654:	e007      	b.n	8013666 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013656:	697b      	ldr	r3, [r7, #20]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	617b      	str	r3, [r7, #20]
 801365c:	697b      	ldr	r3, [r7, #20]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d1e1      	bne.n	8013626 <sys_timeout_abs+0x86>
 8013662:	e000      	b.n	8013666 <sys_timeout_abs+0xc6>
    return;
 8013664:	bf00      	nop
      }
    }
  }
}
 8013666:	3718      	adds	r7, #24
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}
 801366c:	0801a2b4 	.word	0x0801a2b4
 8013670:	0801a2e8 	.word	0x0801a2e8
 8013674:	0801a328 	.word	0x0801a328
 8013678:	2000f300 	.word	0x2000f300

0801367c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b086      	sub	sp, #24
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013688:	697b      	ldr	r3, [r7, #20]
 801368a:	685b      	ldr	r3, [r3, #4]
 801368c:	4798      	blx	r3

  now = sys_now();
 801368e:	f7f1 fc4f 	bl	8004f30 <sys_now>
 8013692:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013694:	697b      	ldr	r3, [r7, #20]
 8013696:	681a      	ldr	r2, [r3, #0]
 8013698:	4b0f      	ldr	r3, [pc, #60]	@ (80136d8 <lwip_cyclic_timer+0x5c>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	4413      	add	r3, r2
 801369e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80136a0:	68fa      	ldr	r2, [r7, #12]
 80136a2:	693b      	ldr	r3, [r7, #16]
 80136a4:	1ad3      	subs	r3, r2, r3
 80136a6:	0fdb      	lsrs	r3, r3, #31
 80136a8:	f003 0301 	and.w	r3, r3, #1
 80136ac:	b2db      	uxtb	r3, r3
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d009      	beq.n	80136c6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80136b2:	697b      	ldr	r3, [r7, #20]
 80136b4:	681a      	ldr	r2, [r3, #0]
 80136b6:	693b      	ldr	r3, [r7, #16]
 80136b8:	4413      	add	r3, r2
 80136ba:	687a      	ldr	r2, [r7, #4]
 80136bc:	4907      	ldr	r1, [pc, #28]	@ (80136dc <lwip_cyclic_timer+0x60>)
 80136be:	4618      	mov	r0, r3
 80136c0:	f7ff ff6e 	bl	80135a0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80136c4:	e004      	b.n	80136d0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80136c6:	687a      	ldr	r2, [r7, #4]
 80136c8:	4904      	ldr	r1, [pc, #16]	@ (80136dc <lwip_cyclic_timer+0x60>)
 80136ca:	68f8      	ldr	r0, [r7, #12]
 80136cc:	f7ff ff68 	bl	80135a0 <sys_timeout_abs>
}
 80136d0:	bf00      	nop
 80136d2:	3718      	adds	r7, #24
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}
 80136d8:	2000f304 	.word	0x2000f304
 80136dc:	0801367d 	.word	0x0801367d

080136e0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b082      	sub	sp, #8
 80136e4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80136e6:	2301      	movs	r3, #1
 80136e8:	607b      	str	r3, [r7, #4]
 80136ea:	e00e      	b.n	801370a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80136ec:	4a0b      	ldr	r2, [pc, #44]	@ (801371c <sys_timeouts_init+0x3c>)
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	00db      	lsls	r3, r3, #3
 80136f8:	4a08      	ldr	r2, [pc, #32]	@ (801371c <sys_timeouts_init+0x3c>)
 80136fa:	4413      	add	r3, r2
 80136fc:	461a      	mov	r2, r3
 80136fe:	4908      	ldr	r1, [pc, #32]	@ (8013720 <sys_timeouts_init+0x40>)
 8013700:	f000 f810 	bl	8013724 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	3301      	adds	r3, #1
 8013708:	607b      	str	r3, [r7, #4]
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	2b02      	cmp	r3, #2
 801370e:	d9ed      	bls.n	80136ec <sys_timeouts_init+0xc>
  }
}
 8013710:	bf00      	nop
 8013712:	bf00      	nop
 8013714:	3708      	adds	r7, #8
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	0801af08 	.word	0x0801af08
 8013720:	0801367d 	.word	0x0801367d

08013724 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b086      	sub	sp, #24
 8013728:	af00      	add	r7, sp, #0
 801372a:	60f8      	str	r0, [r7, #12]
 801372c:	60b9      	str	r1, [r7, #8]
 801372e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013736:	d306      	bcc.n	8013746 <sys_timeout+0x22>
 8013738:	4b0a      	ldr	r3, [pc, #40]	@ (8013764 <sys_timeout+0x40>)
 801373a:	f240 1229 	movw	r2, #297	@ 0x129
 801373e:	490a      	ldr	r1, [pc, #40]	@ (8013768 <sys_timeout+0x44>)
 8013740:	480a      	ldr	r0, [pc, #40]	@ (801376c <sys_timeout+0x48>)
 8013742:	f003 f903 	bl	801694c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013746:	f7f1 fbf3 	bl	8004f30 <sys_now>
 801374a:	4602      	mov	r2, r0
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	4413      	add	r3, r2
 8013750:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013752:	687a      	ldr	r2, [r7, #4]
 8013754:	68b9      	ldr	r1, [r7, #8]
 8013756:	6978      	ldr	r0, [r7, #20]
 8013758:	f7ff ff22 	bl	80135a0 <sys_timeout_abs>
#endif
}
 801375c:	bf00      	nop
 801375e:	3718      	adds	r7, #24
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}
 8013764:	0801a2b4 	.word	0x0801a2b4
 8013768:	0801a350 	.word	0x0801a350
 801376c:	0801a328 	.word	0x0801a328

08013770 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b084      	sub	sp, #16
 8013774:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013776:	f7f1 fbdb 	bl	8004f30 <sys_now>
 801377a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801377c:	4b17      	ldr	r3, [pc, #92]	@ (80137dc <sys_check_timeouts+0x6c>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013782:	68bb      	ldr	r3, [r7, #8]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d022      	beq.n	80137ce <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	685b      	ldr	r3, [r3, #4]
 801378c:	68fa      	ldr	r2, [r7, #12]
 801378e:	1ad3      	subs	r3, r2, r3
 8013790:	0fdb      	lsrs	r3, r3, #31
 8013792:	f003 0301 	and.w	r3, r3, #1
 8013796:	b2db      	uxtb	r3, r3
 8013798:	2b00      	cmp	r3, #0
 801379a:	d11a      	bne.n	80137d2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	4a0e      	ldr	r2, [pc, #56]	@ (80137dc <sys_check_timeouts+0x6c>)
 80137a2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	689b      	ldr	r3, [r3, #8]
 80137a8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	68db      	ldr	r3, [r3, #12]
 80137ae:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	685b      	ldr	r3, [r3, #4]
 80137b4:	4a0a      	ldr	r2, [pc, #40]	@ (80137e0 <sys_check_timeouts+0x70>)
 80137b6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80137b8:	68b9      	ldr	r1, [r7, #8]
 80137ba:	200a      	movs	r0, #10
 80137bc:	f7f8 fd10 	bl	800c1e0 <memp_free>
    if (handler != NULL) {
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d0da      	beq.n	801377c <sys_check_timeouts+0xc>
      handler(arg);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	6838      	ldr	r0, [r7, #0]
 80137ca:	4798      	blx	r3
  do {
 80137cc:	e7d6      	b.n	801377c <sys_check_timeouts+0xc>
      return;
 80137ce:	bf00      	nop
 80137d0:	e000      	b.n	80137d4 <sys_check_timeouts+0x64>
      return;
 80137d2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80137d4:	3710      	adds	r7, #16
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}
 80137da:	bf00      	nop
 80137dc:	2000f300 	.word	0x2000f300
 80137e0:	2000f304 	.word	0x2000f304

080137e4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b082      	sub	sp, #8
 80137e8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80137ea:	4b16      	ldr	r3, [pc, #88]	@ (8013844 <sys_timeouts_sleeptime+0x60>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d102      	bne.n	80137f8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80137f2:	f04f 33ff 	mov.w	r3, #4294967295
 80137f6:	e020      	b.n	801383a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80137f8:	f7f1 fb9a 	bl	8004f30 <sys_now>
 80137fc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80137fe:	4b11      	ldr	r3, [pc, #68]	@ (8013844 <sys_timeouts_sleeptime+0x60>)
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	685a      	ldr	r2, [r3, #4]
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	1ad3      	subs	r3, r2, r3
 8013808:	0fdb      	lsrs	r3, r3, #31
 801380a:	f003 0301 	and.w	r3, r3, #1
 801380e:	b2db      	uxtb	r3, r3
 8013810:	2b00      	cmp	r3, #0
 8013812:	d001      	beq.n	8013818 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013814:	2300      	movs	r3, #0
 8013816:	e010      	b.n	801383a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013818:	4b0a      	ldr	r3, [pc, #40]	@ (8013844 <sys_timeouts_sleeptime+0x60>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	685a      	ldr	r2, [r3, #4]
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	1ad3      	subs	r3, r2, r3
 8013822:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	2b00      	cmp	r3, #0
 8013828:	da06      	bge.n	8013838 <sys_timeouts_sleeptime+0x54>
 801382a:	4b07      	ldr	r3, [pc, #28]	@ (8013848 <sys_timeouts_sleeptime+0x64>)
 801382c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8013830:	4906      	ldr	r1, [pc, #24]	@ (801384c <sys_timeouts_sleeptime+0x68>)
 8013832:	4807      	ldr	r0, [pc, #28]	@ (8013850 <sys_timeouts_sleeptime+0x6c>)
 8013834:	f003 f88a 	bl	801694c <iprintf>
    return ret;
 8013838:	683b      	ldr	r3, [r7, #0]
  }
}
 801383a:	4618      	mov	r0, r3
 801383c:	3708      	adds	r7, #8
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}
 8013842:	bf00      	nop
 8013844:	2000f300 	.word	0x2000f300
 8013848:	0801a2b4 	.word	0x0801a2b4
 801384c:	0801a388 	.word	0x0801a388
 8013850:	0801a328 	.word	0x0801a328

08013854 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013858:	f002 ff78 	bl	801674c <rand>
 801385c:	4603      	mov	r3, r0
 801385e:	b29b      	uxth	r3, r3
 8013860:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013864:	b29b      	uxth	r3, r3
 8013866:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801386a:	b29a      	uxth	r2, r3
 801386c:	4b01      	ldr	r3, [pc, #4]	@ (8013874 <udp_init+0x20>)
 801386e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013870:	bf00      	nop
 8013872:	bd80      	pop	{r7, pc}
 8013874:	2000002c 	.word	0x2000002c

08013878 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013878:	b480      	push	{r7}
 801387a:	b083      	sub	sp, #12
 801387c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801387e:	2300      	movs	r3, #0
 8013880:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013882:	4b17      	ldr	r3, [pc, #92]	@ (80138e0 <udp_new_port+0x68>)
 8013884:	881b      	ldrh	r3, [r3, #0]
 8013886:	1c5a      	adds	r2, r3, #1
 8013888:	b291      	uxth	r1, r2
 801388a:	4a15      	ldr	r2, [pc, #84]	@ (80138e0 <udp_new_port+0x68>)
 801388c:	8011      	strh	r1, [r2, #0]
 801388e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013892:	4293      	cmp	r3, r2
 8013894:	d103      	bne.n	801389e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013896:	4b12      	ldr	r3, [pc, #72]	@ (80138e0 <udp_new_port+0x68>)
 8013898:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801389c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801389e:	4b11      	ldr	r3, [pc, #68]	@ (80138e4 <udp_new_port+0x6c>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	603b      	str	r3, [r7, #0]
 80138a4:	e011      	b.n	80138ca <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	8a5a      	ldrh	r2, [r3, #18]
 80138aa:	4b0d      	ldr	r3, [pc, #52]	@ (80138e0 <udp_new_port+0x68>)
 80138ac:	881b      	ldrh	r3, [r3, #0]
 80138ae:	429a      	cmp	r2, r3
 80138b0:	d108      	bne.n	80138c4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80138b2:	88fb      	ldrh	r3, [r7, #6]
 80138b4:	3301      	adds	r3, #1
 80138b6:	80fb      	strh	r3, [r7, #6]
 80138b8:	88fb      	ldrh	r3, [r7, #6]
 80138ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80138be:	d3e0      	bcc.n	8013882 <udp_new_port+0xa>
        return 0;
 80138c0:	2300      	movs	r3, #0
 80138c2:	e007      	b.n	80138d4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80138c4:	683b      	ldr	r3, [r7, #0]
 80138c6:	68db      	ldr	r3, [r3, #12]
 80138c8:	603b      	str	r3, [r7, #0]
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d1ea      	bne.n	80138a6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80138d0:	4b03      	ldr	r3, [pc, #12]	@ (80138e0 <udp_new_port+0x68>)
 80138d2:	881b      	ldrh	r3, [r3, #0]
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	370c      	adds	r7, #12
 80138d8:	46bd      	mov	sp, r7
 80138da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138de:	4770      	bx	lr
 80138e0:	2000002c 	.word	0x2000002c
 80138e4:	2000f30c 	.word	0x2000f30c

080138e8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b084      	sub	sp, #16
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	60f8      	str	r0, [r7, #12]
 80138f0:	60b9      	str	r1, [r7, #8]
 80138f2:	4613      	mov	r3, r2
 80138f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d105      	bne.n	8013908 <udp_input_local_match+0x20>
 80138fc:	4b27      	ldr	r3, [pc, #156]	@ (801399c <udp_input_local_match+0xb4>)
 80138fe:	2287      	movs	r2, #135	@ 0x87
 8013900:	4927      	ldr	r1, [pc, #156]	@ (80139a0 <udp_input_local_match+0xb8>)
 8013902:	4828      	ldr	r0, [pc, #160]	@ (80139a4 <udp_input_local_match+0xbc>)
 8013904:	f003 f822 	bl	801694c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013908:	68bb      	ldr	r3, [r7, #8]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d105      	bne.n	801391a <udp_input_local_match+0x32>
 801390e:	4b23      	ldr	r3, [pc, #140]	@ (801399c <udp_input_local_match+0xb4>)
 8013910:	2288      	movs	r2, #136	@ 0x88
 8013912:	4925      	ldr	r1, [pc, #148]	@ (80139a8 <udp_input_local_match+0xc0>)
 8013914:	4823      	ldr	r0, [pc, #140]	@ (80139a4 <udp_input_local_match+0xbc>)
 8013916:	f003 f819 	bl	801694c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	7a1b      	ldrb	r3, [r3, #8]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d00b      	beq.n	801393a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	7a1a      	ldrb	r2, [r3, #8]
 8013926:	4b21      	ldr	r3, [pc, #132]	@ (80139ac <udp_input_local_match+0xc4>)
 8013928:	685b      	ldr	r3, [r3, #4]
 801392a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801392e:	3301      	adds	r3, #1
 8013930:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013932:	429a      	cmp	r2, r3
 8013934:	d001      	beq.n	801393a <udp_input_local_match+0x52>
    return 0;
 8013936:	2300      	movs	r3, #0
 8013938:	e02b      	b.n	8013992 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801393a:	79fb      	ldrb	r3, [r7, #7]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d018      	beq.n	8013972 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d013      	beq.n	801396e <udp_input_local_match+0x86>
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d00f      	beq.n	801396e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801394e:	4b17      	ldr	r3, [pc, #92]	@ (80139ac <udp_input_local_match+0xc4>)
 8013950:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013956:	d00a      	beq.n	801396e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	681a      	ldr	r2, [r3, #0]
 801395c:	4b13      	ldr	r3, [pc, #76]	@ (80139ac <udp_input_local_match+0xc4>)
 801395e:	695b      	ldr	r3, [r3, #20]
 8013960:	405a      	eors	r2, r3
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	3308      	adds	r3, #8
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801396a:	2b00      	cmp	r3, #0
 801396c:	d110      	bne.n	8013990 <udp_input_local_match+0xa8>
          return 1;
 801396e:	2301      	movs	r3, #1
 8013970:	e00f      	b.n	8013992 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d009      	beq.n	801398c <udp_input_local_match+0xa4>
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d005      	beq.n	801398c <udp_input_local_match+0xa4>
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	681a      	ldr	r2, [r3, #0]
 8013984:	4b09      	ldr	r3, [pc, #36]	@ (80139ac <udp_input_local_match+0xc4>)
 8013986:	695b      	ldr	r3, [r3, #20]
 8013988:	429a      	cmp	r2, r3
 801398a:	d101      	bne.n	8013990 <udp_input_local_match+0xa8>
        return 1;
 801398c:	2301      	movs	r3, #1
 801398e:	e000      	b.n	8013992 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013990:	2300      	movs	r3, #0
}
 8013992:	4618      	mov	r0, r3
 8013994:	3710      	adds	r7, #16
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}
 801399a:	bf00      	nop
 801399c:	0801a39c 	.word	0x0801a39c
 80139a0:	0801a3cc 	.word	0x0801a3cc
 80139a4:	0801a3f0 	.word	0x0801a3f0
 80139a8:	0801a418 	.word	0x0801a418
 80139ac:	2000999c 	.word	0x2000999c

080139b0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80139b0:	b590      	push	{r4, r7, lr}
 80139b2:	b08d      	sub	sp, #52	@ 0x34
 80139b4:	af02      	add	r7, sp, #8
 80139b6:	6078      	str	r0, [r7, #4]
 80139b8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80139ba:	2300      	movs	r3, #0
 80139bc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d105      	bne.n	80139d0 <udp_input+0x20>
 80139c4:	4b7c      	ldr	r3, [pc, #496]	@ (8013bb8 <udp_input+0x208>)
 80139c6:	22cf      	movs	r2, #207	@ 0xcf
 80139c8:	497c      	ldr	r1, [pc, #496]	@ (8013bbc <udp_input+0x20c>)
 80139ca:	487d      	ldr	r0, [pc, #500]	@ (8013bc0 <udp_input+0x210>)
 80139cc:	f002 ffbe 	bl	801694c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80139d0:	683b      	ldr	r3, [r7, #0]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d105      	bne.n	80139e2 <udp_input+0x32>
 80139d6:	4b78      	ldr	r3, [pc, #480]	@ (8013bb8 <udp_input+0x208>)
 80139d8:	22d0      	movs	r2, #208	@ 0xd0
 80139da:	497a      	ldr	r1, [pc, #488]	@ (8013bc4 <udp_input+0x214>)
 80139dc:	4878      	ldr	r0, [pc, #480]	@ (8013bc0 <udp_input+0x210>)
 80139de:	f002 ffb5 	bl	801694c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	895b      	ldrh	r3, [r3, #10]
 80139e6:	2b07      	cmp	r3, #7
 80139e8:	d803      	bhi.n	80139f2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80139ea:	6878      	ldr	r0, [r7, #4]
 80139ec:	f7f9 fa9c 	bl	800cf28 <pbuf_free>
    goto end;
 80139f0:	e0de      	b.n	8013bb0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	685b      	ldr	r3, [r3, #4]
 80139f6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80139f8:	4b73      	ldr	r3, [pc, #460]	@ (8013bc8 <udp_input+0x218>)
 80139fa:	695b      	ldr	r3, [r3, #20]
 80139fc:	4a72      	ldr	r2, [pc, #456]	@ (8013bc8 <udp_input+0x218>)
 80139fe:	6812      	ldr	r2, [r2, #0]
 8013a00:	4611      	mov	r1, r2
 8013a02:	4618      	mov	r0, r3
 8013a04:	f001 fd96 	bl	8015534 <ip4_addr_isbroadcast_u32>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013a0c:	697b      	ldr	r3, [r7, #20]
 8013a0e:	881b      	ldrh	r3, [r3, #0]
 8013a10:	b29b      	uxth	r3, r3
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7f7 fe96 	bl	800b744 <lwip_htons>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	885b      	ldrh	r3, [r3, #2]
 8013a20:	b29b      	uxth	r3, r3
 8013a22:	4618      	mov	r0, r3
 8013a24:	f7f7 fe8e 	bl	800b744 <lwip_htons>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013a30:	2300      	movs	r3, #0
 8013a32:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013a34:	2300      	movs	r3, #0
 8013a36:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a38:	4b64      	ldr	r3, [pc, #400]	@ (8013bcc <udp_input+0x21c>)
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a3e:	e054      	b.n	8013aea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a42:	8a5b      	ldrh	r3, [r3, #18]
 8013a44:	89fa      	ldrh	r2, [r7, #14]
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d14a      	bne.n	8013ae0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013a4a:	7cfb      	ldrb	r3, [r7, #19]
 8013a4c:	461a      	mov	r2, r3
 8013a4e:	6839      	ldr	r1, [r7, #0]
 8013a50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013a52:	f7ff ff49 	bl	80138e8 <udp_input_local_match>
 8013a56:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d041      	beq.n	8013ae0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a5e:	7c1b      	ldrb	r3, [r3, #16]
 8013a60:	f003 0304 	and.w	r3, r3, #4
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d11d      	bne.n	8013aa4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013a68:	69fb      	ldr	r3, [r7, #28]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d102      	bne.n	8013a74 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a70:	61fb      	str	r3, [r7, #28]
 8013a72:	e017      	b.n	8013aa4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013a74:	7cfb      	ldrb	r3, [r7, #19]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d014      	beq.n	8013aa4 <udp_input+0xf4>
 8013a7a:	4b53      	ldr	r3, [pc, #332]	@ (8013bc8 <udp_input+0x218>)
 8013a7c:	695b      	ldr	r3, [r3, #20]
 8013a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a82:	d10f      	bne.n	8013aa4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013a84:	69fb      	ldr	r3, [r7, #28]
 8013a86:	681a      	ldr	r2, [r3, #0]
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	3304      	adds	r3, #4
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	d008      	beq.n	8013aa4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a94:	681a      	ldr	r2, [r3, #0]
 8013a96:	683b      	ldr	r3, [r7, #0]
 8013a98:	3304      	adds	r3, #4
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d101      	bne.n	8013aa4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aa2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aa6:	8a9b      	ldrh	r3, [r3, #20]
 8013aa8:	8a3a      	ldrh	r2, [r7, #16]
 8013aaa:	429a      	cmp	r2, r3
 8013aac:	d118      	bne.n	8013ae0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ab0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d005      	beq.n	8013ac2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ab8:	685a      	ldr	r2, [r3, #4]
 8013aba:	4b43      	ldr	r3, [pc, #268]	@ (8013bc8 <udp_input+0x218>)
 8013abc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	d10e      	bne.n	8013ae0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013ac2:	6a3b      	ldr	r3, [r7, #32]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d014      	beq.n	8013af2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aca:	68da      	ldr	r2, [r3, #12]
 8013acc:	6a3b      	ldr	r3, [r7, #32]
 8013ace:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013ad0:	4b3e      	ldr	r3, [pc, #248]	@ (8013bcc <udp_input+0x21c>)
 8013ad2:	681a      	ldr	r2, [r3, #0]
 8013ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ad6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013ad8:	4a3c      	ldr	r2, [pc, #240]	@ (8013bcc <udp_input+0x21c>)
 8013ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013adc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013ade:	e008      	b.n	8013af2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ae2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8013aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d1a7      	bne.n	8013a40 <udp_input+0x90>
 8013af0:	e000      	b.n	8013af4 <udp_input+0x144>
        break;
 8013af2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d101      	bne.n	8013afe <udp_input+0x14e>
    pcb = uncon_pcb;
 8013afa:	69fb      	ldr	r3, [r7, #28]
 8013afc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d002      	beq.n	8013b0a <udp_input+0x15a>
    for_us = 1;
 8013b04:	2301      	movs	r3, #1
 8013b06:	76fb      	strb	r3, [r7, #27]
 8013b08:	e00a      	b.n	8013b20 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	3304      	adds	r3, #4
 8013b0e:	681a      	ldr	r2, [r3, #0]
 8013b10:	4b2d      	ldr	r3, [pc, #180]	@ (8013bc8 <udp_input+0x218>)
 8013b12:	695b      	ldr	r3, [r3, #20]
 8013b14:	429a      	cmp	r2, r3
 8013b16:	bf0c      	ite	eq
 8013b18:	2301      	moveq	r3, #1
 8013b1a:	2300      	movne	r3, #0
 8013b1c:	b2db      	uxtb	r3, r3
 8013b1e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013b20:	7efb      	ldrb	r3, [r7, #27]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d041      	beq.n	8013baa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013b26:	2108      	movs	r1, #8
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	f7f9 f977 	bl	800ce1c <pbuf_remove_header>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d00a      	beq.n	8013b4a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013b34:	4b20      	ldr	r3, [pc, #128]	@ (8013bb8 <udp_input+0x208>)
 8013b36:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013b3a:	4925      	ldr	r1, [pc, #148]	@ (8013bd0 <udp_input+0x220>)
 8013b3c:	4820      	ldr	r0, [pc, #128]	@ (8013bc0 <udp_input+0x210>)
 8013b3e:	f002 ff05 	bl	801694c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	f7f9 f9f0 	bl	800cf28 <pbuf_free>
      goto end;
 8013b48:	e032      	b.n	8013bb0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d012      	beq.n	8013b76 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b52:	699b      	ldr	r3, [r3, #24]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d00a      	beq.n	8013b6e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b5a:	699c      	ldr	r4, [r3, #24]
 8013b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b5e:	69d8      	ldr	r0, [r3, #28]
 8013b60:	8a3b      	ldrh	r3, [r7, #16]
 8013b62:	9300      	str	r3, [sp, #0]
 8013b64:	4b1b      	ldr	r3, [pc, #108]	@ (8013bd4 <udp_input+0x224>)
 8013b66:	687a      	ldr	r2, [r7, #4]
 8013b68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013b6a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013b6c:	e021      	b.n	8013bb2 <udp_input+0x202>
        pbuf_free(p);
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f7f9 f9da 	bl	800cf28 <pbuf_free>
        goto end;
 8013b74:	e01c      	b.n	8013bb0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013b76:	7cfb      	ldrb	r3, [r7, #19]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d112      	bne.n	8013ba2 <udp_input+0x1f2>
 8013b7c:	4b12      	ldr	r3, [pc, #72]	@ (8013bc8 <udp_input+0x218>)
 8013b7e:	695b      	ldr	r3, [r3, #20]
 8013b80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013b84:	2be0      	cmp	r3, #224	@ 0xe0
 8013b86:	d00c      	beq.n	8013ba2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013b88:	4b0f      	ldr	r3, [pc, #60]	@ (8013bc8 <udp_input+0x218>)
 8013b8a:	899b      	ldrh	r3, [r3, #12]
 8013b8c:	3308      	adds	r3, #8
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	b21b      	sxth	r3, r3
 8013b92:	4619      	mov	r1, r3
 8013b94:	6878      	ldr	r0, [r7, #4]
 8013b96:	f7f9 f9b4 	bl	800cf02 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013b9a:	2103      	movs	r1, #3
 8013b9c:	6878      	ldr	r0, [r7, #4]
 8013b9e:	f001 f9a9 	bl	8014ef4 <icmp_dest_unreach>
      pbuf_free(p);
 8013ba2:	6878      	ldr	r0, [r7, #4]
 8013ba4:	f7f9 f9c0 	bl	800cf28 <pbuf_free>
  return;
 8013ba8:	e003      	b.n	8013bb2 <udp_input+0x202>
    pbuf_free(p);
 8013baa:	6878      	ldr	r0, [r7, #4]
 8013bac:	f7f9 f9bc 	bl	800cf28 <pbuf_free>
  return;
 8013bb0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013bb2:	372c      	adds	r7, #44	@ 0x2c
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd90      	pop	{r4, r7, pc}
 8013bb8:	0801a39c 	.word	0x0801a39c
 8013bbc:	0801a440 	.word	0x0801a440
 8013bc0:	0801a3f0 	.word	0x0801a3f0
 8013bc4:	0801a458 	.word	0x0801a458
 8013bc8:	2000999c 	.word	0x2000999c
 8013bcc:	2000f30c 	.word	0x2000f30c
 8013bd0:	0801a474 	.word	0x0801a474
 8013bd4:	200099ac 	.word	0x200099ac

08013bd8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b086      	sub	sp, #24
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	60f8      	str	r0, [r7, #12]
 8013be0:	60b9      	str	r1, [r7, #8]
 8013be2:	4613      	mov	r3, r2
 8013be4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d101      	bne.n	8013bf0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013bec:	4b39      	ldr	r3, [pc, #228]	@ (8013cd4 <udp_bind+0xfc>)
 8013bee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d109      	bne.n	8013c0a <udp_bind+0x32>
 8013bf6:	4b38      	ldr	r3, [pc, #224]	@ (8013cd8 <udp_bind+0x100>)
 8013bf8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013bfc:	4937      	ldr	r1, [pc, #220]	@ (8013cdc <udp_bind+0x104>)
 8013bfe:	4838      	ldr	r0, [pc, #224]	@ (8013ce0 <udp_bind+0x108>)
 8013c00:	f002 fea4 	bl	801694c <iprintf>
 8013c04:	f06f 030f 	mvn.w	r3, #15
 8013c08:	e060      	b.n	8013ccc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c0e:	4b35      	ldr	r3, [pc, #212]	@ (8013ce4 <udp_bind+0x10c>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	617b      	str	r3, [r7, #20]
 8013c14:	e009      	b.n	8013c2a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013c16:	68fa      	ldr	r2, [r7, #12]
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d102      	bne.n	8013c24 <udp_bind+0x4c>
      rebind = 1;
 8013c1e:	2301      	movs	r3, #1
 8013c20:	74fb      	strb	r3, [r7, #19]
      break;
 8013c22:	e005      	b.n	8013c30 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	68db      	ldr	r3, [r3, #12]
 8013c28:	617b      	str	r3, [r7, #20]
 8013c2a:	697b      	ldr	r3, [r7, #20]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d1f2      	bne.n	8013c16 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013c30:	88fb      	ldrh	r3, [r7, #6]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d109      	bne.n	8013c4a <udp_bind+0x72>
    port = udp_new_port();
 8013c36:	f7ff fe1f 	bl	8013878 <udp_new_port>
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013c3e:	88fb      	ldrh	r3, [r7, #6]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d12c      	bne.n	8013c9e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013c44:	f06f 0307 	mvn.w	r3, #7
 8013c48:	e040      	b.n	8013ccc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c4a:	4b26      	ldr	r3, [pc, #152]	@ (8013ce4 <udp_bind+0x10c>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	617b      	str	r3, [r7, #20]
 8013c50:	e022      	b.n	8013c98 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013c52:	68fa      	ldr	r2, [r7, #12]
 8013c54:	697b      	ldr	r3, [r7, #20]
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d01b      	beq.n	8013c92 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	8a5b      	ldrh	r3, [r3, #18]
 8013c5e:	88fa      	ldrh	r2, [r7, #6]
 8013c60:	429a      	cmp	r2, r3
 8013c62:	d116      	bne.n	8013c92 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	681a      	ldr	r2, [r3, #0]
 8013c68:	68bb      	ldr	r3, [r7, #8]
 8013c6a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013c6c:	429a      	cmp	r2, r3
 8013c6e:	d00d      	beq.n	8013c8c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013c70:	68bb      	ldr	r3, [r7, #8]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d00a      	beq.n	8013c8c <udp_bind+0xb4>
 8013c76:	68bb      	ldr	r3, [r7, #8]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d006      	beq.n	8013c8c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013c7e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d003      	beq.n	8013c8c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d102      	bne.n	8013c92 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013c8c:	f06f 0307 	mvn.w	r3, #7
 8013c90:	e01c      	b.n	8013ccc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c92:	697b      	ldr	r3, [r7, #20]
 8013c94:	68db      	ldr	r3, [r3, #12]
 8013c96:	617b      	str	r3, [r7, #20]
 8013c98:	697b      	ldr	r3, [r7, #20]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d1d9      	bne.n	8013c52 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013c9e:	68bb      	ldr	r3, [r7, #8]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d002      	beq.n	8013caa <udp_bind+0xd2>
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	e000      	b.n	8013cac <udp_bind+0xd4>
 8013caa:	2300      	movs	r3, #0
 8013cac:	68fa      	ldr	r2, [r7, #12]
 8013cae:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	88fa      	ldrh	r2, [r7, #6]
 8013cb4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013cb6:	7cfb      	ldrb	r3, [r7, #19]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d106      	bne.n	8013cca <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013cbc:	4b09      	ldr	r3, [pc, #36]	@ (8013ce4 <udp_bind+0x10c>)
 8013cbe:	681a      	ldr	r2, [r3, #0]
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013cc4:	4a07      	ldr	r2, [pc, #28]	@ (8013ce4 <udp_bind+0x10c>)
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013cca:	2300      	movs	r3, #0
}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	3718      	adds	r7, #24
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}
 8013cd4:	0801af20 	.word	0x0801af20
 8013cd8:	0801a39c 	.word	0x0801a39c
 8013cdc:	0801a664 	.word	0x0801a664
 8013ce0:	0801a3f0 	.word	0x0801a3f0
 8013ce4:	2000f30c 	.word	0x2000f30c

08013ce8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b084      	sub	sp, #16
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	60f8      	str	r0, [r7, #12]
 8013cf0:	60b9      	str	r1, [r7, #8]
 8013cf2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d107      	bne.n	8013d0a <udp_recv+0x22>
 8013cfa:	4b08      	ldr	r3, [pc, #32]	@ (8013d1c <udp_recv+0x34>)
 8013cfc:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013d00:	4907      	ldr	r1, [pc, #28]	@ (8013d20 <udp_recv+0x38>)
 8013d02:	4808      	ldr	r0, [pc, #32]	@ (8013d24 <udp_recv+0x3c>)
 8013d04:	f002 fe22 	bl	801694c <iprintf>
 8013d08:	e005      	b.n	8013d16 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	68ba      	ldr	r2, [r7, #8]
 8013d0e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	687a      	ldr	r2, [r7, #4]
 8013d14:	61da      	str	r2, [r3, #28]
}
 8013d16:	3710      	adds	r7, #16
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}
 8013d1c:	0801a39c 	.word	0x0801a39c
 8013d20:	0801a6d0 	.word	0x0801a6d0
 8013d24:	0801a3f0 	.word	0x0801a3f0

08013d28 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d107      	bne.n	8013d46 <udp_remove+0x1e>
 8013d36:	4b19      	ldr	r3, [pc, #100]	@ (8013d9c <udp_remove+0x74>)
 8013d38:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8013d3c:	4918      	ldr	r1, [pc, #96]	@ (8013da0 <udp_remove+0x78>)
 8013d3e:	4819      	ldr	r0, [pc, #100]	@ (8013da4 <udp_remove+0x7c>)
 8013d40:	f002 fe04 	bl	801694c <iprintf>
 8013d44:	e026      	b.n	8013d94 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013d46:	4b18      	ldr	r3, [pc, #96]	@ (8013da8 <udp_remove+0x80>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	687a      	ldr	r2, [r7, #4]
 8013d4c:	429a      	cmp	r2, r3
 8013d4e:	d105      	bne.n	8013d5c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013d50:	4b15      	ldr	r3, [pc, #84]	@ (8013da8 <udp_remove+0x80>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	68db      	ldr	r3, [r3, #12]
 8013d56:	4a14      	ldr	r2, [pc, #80]	@ (8013da8 <udp_remove+0x80>)
 8013d58:	6013      	str	r3, [r2, #0]
 8013d5a:	e017      	b.n	8013d8c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013d5c:	4b12      	ldr	r3, [pc, #72]	@ (8013da8 <udp_remove+0x80>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	60fb      	str	r3, [r7, #12]
 8013d62:	e010      	b.n	8013d86 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	68db      	ldr	r3, [r3, #12]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d009      	beq.n	8013d80 <udp_remove+0x58>
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	68db      	ldr	r3, [r3, #12]
 8013d70:	687a      	ldr	r2, [r7, #4]
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d104      	bne.n	8013d80 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	68da      	ldr	r2, [r3, #12]
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	60da      	str	r2, [r3, #12]
        break;
 8013d7e:	e005      	b.n	8013d8c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	68db      	ldr	r3, [r3, #12]
 8013d84:	60fb      	str	r3, [r7, #12]
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d1eb      	bne.n	8013d64 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013d8c:	6879      	ldr	r1, [r7, #4]
 8013d8e:	2000      	movs	r0, #0
 8013d90:	f7f8 fa26 	bl	800c1e0 <memp_free>
}
 8013d94:	3710      	adds	r7, #16
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd80      	pop	{r7, pc}
 8013d9a:	bf00      	nop
 8013d9c:	0801a39c 	.word	0x0801a39c
 8013da0:	0801a6e8 	.word	0x0801a6e8
 8013da4:	0801a3f0 	.word	0x0801a3f0
 8013da8:	2000f30c 	.word	0x2000f30c

08013dac <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b082      	sub	sp, #8
 8013db0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013db2:	2000      	movs	r0, #0
 8013db4:	f7f8 f99e 	bl	800c0f4 <memp_malloc>
 8013db8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d007      	beq.n	8013dd0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013dc0:	2220      	movs	r2, #32
 8013dc2:	2100      	movs	r1, #0
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	f002 fe26 	bl	8016a16 <memset>
    pcb->ttl = UDP_TTL;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	22ff      	movs	r2, #255	@ 0xff
 8013dce:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013dd0:	687b      	ldr	r3, [r7, #4]
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3708      	adds	r7, #8
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}

08013dda <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013dda:	b580      	push	{r7, lr}
 8013ddc:	b084      	sub	sp, #16
 8013dde:	af00      	add	r7, sp, #0
 8013de0:	4603      	mov	r3, r0
 8013de2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013de4:	f7ff ffe2 	bl	8013dac <udp_new>
 8013de8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013dea:	68fb      	ldr	r3, [r7, #12]
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	3710      	adds	r7, #16
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}

08013df4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013df4:	b480      	push	{r7}
 8013df6:	b085      	sub	sp, #20
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
 8013dfc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d01e      	beq.n	8013e42 <udp_netif_ip_addr_changed+0x4e>
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d01a      	beq.n	8013e42 <udp_netif_ip_addr_changed+0x4e>
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d017      	beq.n	8013e42 <udp_netif_ip_addr_changed+0x4e>
 8013e12:	683b      	ldr	r3, [r7, #0]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d013      	beq.n	8013e42 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8013e50 <udp_netif_ip_addr_changed+0x5c>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	60fb      	str	r3, [r7, #12]
 8013e20:	e00c      	b.n	8013e3c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	681a      	ldr	r2, [r3, #0]
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	429a      	cmp	r2, r3
 8013e2c:	d103      	bne.n	8013e36 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013e2e:	683b      	ldr	r3, [r7, #0]
 8013e30:	681a      	ldr	r2, [r3, #0]
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	68db      	ldr	r3, [r3, #12]
 8013e3a:	60fb      	str	r3, [r7, #12]
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d1ef      	bne.n	8013e22 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013e42:	bf00      	nop
 8013e44:	3714      	adds	r7, #20
 8013e46:	46bd      	mov	sp, r7
 8013e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4c:	4770      	bx	lr
 8013e4e:	bf00      	nop
 8013e50:	2000f30c 	.word	0x2000f30c

08013e54 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b082      	sub	sp, #8
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013e5c:	4915      	ldr	r1, [pc, #84]	@ (8013eb4 <etharp_free_entry+0x60>)
 8013e5e:	687a      	ldr	r2, [r7, #4]
 8013e60:	4613      	mov	r3, r2
 8013e62:	005b      	lsls	r3, r3, #1
 8013e64:	4413      	add	r3, r2
 8013e66:	00db      	lsls	r3, r3, #3
 8013e68:	440b      	add	r3, r1
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d013      	beq.n	8013e98 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013e70:	4910      	ldr	r1, [pc, #64]	@ (8013eb4 <etharp_free_entry+0x60>)
 8013e72:	687a      	ldr	r2, [r7, #4]
 8013e74:	4613      	mov	r3, r2
 8013e76:	005b      	lsls	r3, r3, #1
 8013e78:	4413      	add	r3, r2
 8013e7a:	00db      	lsls	r3, r3, #3
 8013e7c:	440b      	add	r3, r1
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	4618      	mov	r0, r3
 8013e82:	f7f9 f851 	bl	800cf28 <pbuf_free>
    arp_table[i].q = NULL;
 8013e86:	490b      	ldr	r1, [pc, #44]	@ (8013eb4 <etharp_free_entry+0x60>)
 8013e88:	687a      	ldr	r2, [r7, #4]
 8013e8a:	4613      	mov	r3, r2
 8013e8c:	005b      	lsls	r3, r3, #1
 8013e8e:	4413      	add	r3, r2
 8013e90:	00db      	lsls	r3, r3, #3
 8013e92:	440b      	add	r3, r1
 8013e94:	2200      	movs	r2, #0
 8013e96:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013e98:	4906      	ldr	r1, [pc, #24]	@ (8013eb4 <etharp_free_entry+0x60>)
 8013e9a:	687a      	ldr	r2, [r7, #4]
 8013e9c:	4613      	mov	r3, r2
 8013e9e:	005b      	lsls	r3, r3, #1
 8013ea0:	4413      	add	r3, r2
 8013ea2:	00db      	lsls	r3, r3, #3
 8013ea4:	440b      	add	r3, r1
 8013ea6:	3314      	adds	r3, #20
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013eac:	bf00      	nop
 8013eae:	3708      	adds	r7, #8
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}
 8013eb4:	2000f310 	.word	0x2000f310

08013eb8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b082      	sub	sp, #8
 8013ebc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	607b      	str	r3, [r7, #4]
 8013ec2:	e096      	b.n	8013ff2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013ec4:	494f      	ldr	r1, [pc, #316]	@ (8014004 <etharp_tmr+0x14c>)
 8013ec6:	687a      	ldr	r2, [r7, #4]
 8013ec8:	4613      	mov	r3, r2
 8013eca:	005b      	lsls	r3, r3, #1
 8013ecc:	4413      	add	r3, r2
 8013ece:	00db      	lsls	r3, r3, #3
 8013ed0:	440b      	add	r3, r1
 8013ed2:	3314      	adds	r3, #20
 8013ed4:	781b      	ldrb	r3, [r3, #0]
 8013ed6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013ed8:	78fb      	ldrb	r3, [r7, #3]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	f000 8086 	beq.w	8013fec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013ee0:	4948      	ldr	r1, [pc, #288]	@ (8014004 <etharp_tmr+0x14c>)
 8013ee2:	687a      	ldr	r2, [r7, #4]
 8013ee4:	4613      	mov	r3, r2
 8013ee6:	005b      	lsls	r3, r3, #1
 8013ee8:	4413      	add	r3, r2
 8013eea:	00db      	lsls	r3, r3, #3
 8013eec:	440b      	add	r3, r1
 8013eee:	3312      	adds	r3, #18
 8013ef0:	881b      	ldrh	r3, [r3, #0]
 8013ef2:	3301      	adds	r3, #1
 8013ef4:	b298      	uxth	r0, r3
 8013ef6:	4943      	ldr	r1, [pc, #268]	@ (8014004 <etharp_tmr+0x14c>)
 8013ef8:	687a      	ldr	r2, [r7, #4]
 8013efa:	4613      	mov	r3, r2
 8013efc:	005b      	lsls	r3, r3, #1
 8013efe:	4413      	add	r3, r2
 8013f00:	00db      	lsls	r3, r3, #3
 8013f02:	440b      	add	r3, r1
 8013f04:	3312      	adds	r3, #18
 8013f06:	4602      	mov	r2, r0
 8013f08:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013f0a:	493e      	ldr	r1, [pc, #248]	@ (8014004 <etharp_tmr+0x14c>)
 8013f0c:	687a      	ldr	r2, [r7, #4]
 8013f0e:	4613      	mov	r3, r2
 8013f10:	005b      	lsls	r3, r3, #1
 8013f12:	4413      	add	r3, r2
 8013f14:	00db      	lsls	r3, r3, #3
 8013f16:	440b      	add	r3, r1
 8013f18:	3312      	adds	r3, #18
 8013f1a:	881b      	ldrh	r3, [r3, #0]
 8013f1c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8013f20:	d215      	bcs.n	8013f4e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013f22:	4938      	ldr	r1, [pc, #224]	@ (8014004 <etharp_tmr+0x14c>)
 8013f24:	687a      	ldr	r2, [r7, #4]
 8013f26:	4613      	mov	r3, r2
 8013f28:	005b      	lsls	r3, r3, #1
 8013f2a:	4413      	add	r3, r2
 8013f2c:	00db      	lsls	r3, r3, #3
 8013f2e:	440b      	add	r3, r1
 8013f30:	3314      	adds	r3, #20
 8013f32:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013f34:	2b01      	cmp	r3, #1
 8013f36:	d10e      	bne.n	8013f56 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013f38:	4932      	ldr	r1, [pc, #200]	@ (8014004 <etharp_tmr+0x14c>)
 8013f3a:	687a      	ldr	r2, [r7, #4]
 8013f3c:	4613      	mov	r3, r2
 8013f3e:	005b      	lsls	r3, r3, #1
 8013f40:	4413      	add	r3, r2
 8013f42:	00db      	lsls	r3, r3, #3
 8013f44:	440b      	add	r3, r1
 8013f46:	3312      	adds	r3, #18
 8013f48:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013f4a:	2b04      	cmp	r3, #4
 8013f4c:	d903      	bls.n	8013f56 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013f4e:	6878      	ldr	r0, [r7, #4]
 8013f50:	f7ff ff80 	bl	8013e54 <etharp_free_entry>
 8013f54:	e04a      	b.n	8013fec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013f56:	492b      	ldr	r1, [pc, #172]	@ (8014004 <etharp_tmr+0x14c>)
 8013f58:	687a      	ldr	r2, [r7, #4]
 8013f5a:	4613      	mov	r3, r2
 8013f5c:	005b      	lsls	r3, r3, #1
 8013f5e:	4413      	add	r3, r2
 8013f60:	00db      	lsls	r3, r3, #3
 8013f62:	440b      	add	r3, r1
 8013f64:	3314      	adds	r3, #20
 8013f66:	781b      	ldrb	r3, [r3, #0]
 8013f68:	2b03      	cmp	r3, #3
 8013f6a:	d10a      	bne.n	8013f82 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013f6c:	4925      	ldr	r1, [pc, #148]	@ (8014004 <etharp_tmr+0x14c>)
 8013f6e:	687a      	ldr	r2, [r7, #4]
 8013f70:	4613      	mov	r3, r2
 8013f72:	005b      	lsls	r3, r3, #1
 8013f74:	4413      	add	r3, r2
 8013f76:	00db      	lsls	r3, r3, #3
 8013f78:	440b      	add	r3, r1
 8013f7a:	3314      	adds	r3, #20
 8013f7c:	2204      	movs	r2, #4
 8013f7e:	701a      	strb	r2, [r3, #0]
 8013f80:	e034      	b.n	8013fec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013f82:	4920      	ldr	r1, [pc, #128]	@ (8014004 <etharp_tmr+0x14c>)
 8013f84:	687a      	ldr	r2, [r7, #4]
 8013f86:	4613      	mov	r3, r2
 8013f88:	005b      	lsls	r3, r3, #1
 8013f8a:	4413      	add	r3, r2
 8013f8c:	00db      	lsls	r3, r3, #3
 8013f8e:	440b      	add	r3, r1
 8013f90:	3314      	adds	r3, #20
 8013f92:	781b      	ldrb	r3, [r3, #0]
 8013f94:	2b04      	cmp	r3, #4
 8013f96:	d10a      	bne.n	8013fae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013f98:	491a      	ldr	r1, [pc, #104]	@ (8014004 <etharp_tmr+0x14c>)
 8013f9a:	687a      	ldr	r2, [r7, #4]
 8013f9c:	4613      	mov	r3, r2
 8013f9e:	005b      	lsls	r3, r3, #1
 8013fa0:	4413      	add	r3, r2
 8013fa2:	00db      	lsls	r3, r3, #3
 8013fa4:	440b      	add	r3, r1
 8013fa6:	3314      	adds	r3, #20
 8013fa8:	2202      	movs	r2, #2
 8013faa:	701a      	strb	r2, [r3, #0]
 8013fac:	e01e      	b.n	8013fec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013fae:	4915      	ldr	r1, [pc, #84]	@ (8014004 <etharp_tmr+0x14c>)
 8013fb0:	687a      	ldr	r2, [r7, #4]
 8013fb2:	4613      	mov	r3, r2
 8013fb4:	005b      	lsls	r3, r3, #1
 8013fb6:	4413      	add	r3, r2
 8013fb8:	00db      	lsls	r3, r3, #3
 8013fba:	440b      	add	r3, r1
 8013fbc:	3314      	adds	r3, #20
 8013fbe:	781b      	ldrb	r3, [r3, #0]
 8013fc0:	2b01      	cmp	r3, #1
 8013fc2:	d113      	bne.n	8013fec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013fc4:	490f      	ldr	r1, [pc, #60]	@ (8014004 <etharp_tmr+0x14c>)
 8013fc6:	687a      	ldr	r2, [r7, #4]
 8013fc8:	4613      	mov	r3, r2
 8013fca:	005b      	lsls	r3, r3, #1
 8013fcc:	4413      	add	r3, r2
 8013fce:	00db      	lsls	r3, r3, #3
 8013fd0:	440b      	add	r3, r1
 8013fd2:	3308      	adds	r3, #8
 8013fd4:	6818      	ldr	r0, [r3, #0]
 8013fd6:	687a      	ldr	r2, [r7, #4]
 8013fd8:	4613      	mov	r3, r2
 8013fda:	005b      	lsls	r3, r3, #1
 8013fdc:	4413      	add	r3, r2
 8013fde:	00db      	lsls	r3, r3, #3
 8013fe0:	4a08      	ldr	r2, [pc, #32]	@ (8014004 <etharp_tmr+0x14c>)
 8013fe2:	4413      	add	r3, r2
 8013fe4:	3304      	adds	r3, #4
 8013fe6:	4619      	mov	r1, r3
 8013fe8:	f000 fe6e 	bl	8014cc8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	3301      	adds	r3, #1
 8013ff0:	607b      	str	r3, [r7, #4]
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	2b09      	cmp	r3, #9
 8013ff6:	f77f af65 	ble.w	8013ec4 <etharp_tmr+0xc>
      }
    }
  }
}
 8013ffa:	bf00      	nop
 8013ffc:	bf00      	nop
 8013ffe:	3708      	adds	r7, #8
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}
 8014004:	2000f310 	.word	0x2000f310

08014008 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b08a      	sub	sp, #40	@ 0x28
 801400c:	af00      	add	r7, sp, #0
 801400e:	60f8      	str	r0, [r7, #12]
 8014010:	460b      	mov	r3, r1
 8014012:	607a      	str	r2, [r7, #4]
 8014014:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014016:	230a      	movs	r3, #10
 8014018:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801401a:	230a      	movs	r3, #10
 801401c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801401e:	230a      	movs	r3, #10
 8014020:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8014022:	2300      	movs	r3, #0
 8014024:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014026:	230a      	movs	r3, #10
 8014028:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801402a:	2300      	movs	r3, #0
 801402c:	83bb      	strh	r3, [r7, #28]
 801402e:	2300      	movs	r3, #0
 8014030:	837b      	strh	r3, [r7, #26]
 8014032:	2300      	movs	r3, #0
 8014034:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014036:	2300      	movs	r3, #0
 8014038:	843b      	strh	r3, [r7, #32]
 801403a:	e0ae      	b.n	801419a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801403c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014040:	49a6      	ldr	r1, [pc, #664]	@ (80142dc <etharp_find_entry+0x2d4>)
 8014042:	4613      	mov	r3, r2
 8014044:	005b      	lsls	r3, r3, #1
 8014046:	4413      	add	r3, r2
 8014048:	00db      	lsls	r3, r3, #3
 801404a:	440b      	add	r3, r1
 801404c:	3314      	adds	r3, #20
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014052:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014056:	2b0a      	cmp	r3, #10
 8014058:	d105      	bne.n	8014066 <etharp_find_entry+0x5e>
 801405a:	7dfb      	ldrb	r3, [r7, #23]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d102      	bne.n	8014066 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014060:	8c3b      	ldrh	r3, [r7, #32]
 8014062:	847b      	strh	r3, [r7, #34]	@ 0x22
 8014064:	e095      	b.n	8014192 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014066:	7dfb      	ldrb	r3, [r7, #23]
 8014068:	2b00      	cmp	r3, #0
 801406a:	f000 8092 	beq.w	8014192 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801406e:	7dfb      	ldrb	r3, [r7, #23]
 8014070:	2b01      	cmp	r3, #1
 8014072:	d009      	beq.n	8014088 <etharp_find_entry+0x80>
 8014074:	7dfb      	ldrb	r3, [r7, #23]
 8014076:	2b01      	cmp	r3, #1
 8014078:	d806      	bhi.n	8014088 <etharp_find_entry+0x80>
 801407a:	4b99      	ldr	r3, [pc, #612]	@ (80142e0 <etharp_find_entry+0x2d8>)
 801407c:	f240 1223 	movw	r2, #291	@ 0x123
 8014080:	4998      	ldr	r1, [pc, #608]	@ (80142e4 <etharp_find_entry+0x2dc>)
 8014082:	4899      	ldr	r0, [pc, #612]	@ (80142e8 <etharp_find_entry+0x2e0>)
 8014084:	f002 fc62 	bl	801694c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d020      	beq.n	80140d0 <etharp_find_entry+0xc8>
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	6819      	ldr	r1, [r3, #0]
 8014092:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014096:	4891      	ldr	r0, [pc, #580]	@ (80142dc <etharp_find_entry+0x2d4>)
 8014098:	4613      	mov	r3, r2
 801409a:	005b      	lsls	r3, r3, #1
 801409c:	4413      	add	r3, r2
 801409e:	00db      	lsls	r3, r3, #3
 80140a0:	4403      	add	r3, r0
 80140a2:	3304      	adds	r3, #4
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	4299      	cmp	r1, r3
 80140a8:	d112      	bne.n	80140d0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d00c      	beq.n	80140ca <etharp_find_entry+0xc2>
 80140b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140b4:	4989      	ldr	r1, [pc, #548]	@ (80142dc <etharp_find_entry+0x2d4>)
 80140b6:	4613      	mov	r3, r2
 80140b8:	005b      	lsls	r3, r3, #1
 80140ba:	4413      	add	r3, r2
 80140bc:	00db      	lsls	r3, r3, #3
 80140be:	440b      	add	r3, r1
 80140c0:	3308      	adds	r3, #8
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	687a      	ldr	r2, [r7, #4]
 80140c6:	429a      	cmp	r2, r3
 80140c8:	d102      	bne.n	80140d0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80140ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140ce:	e100      	b.n	80142d2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80140d0:	7dfb      	ldrb	r3, [r7, #23]
 80140d2:	2b01      	cmp	r3, #1
 80140d4:	d140      	bne.n	8014158 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80140d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140da:	4980      	ldr	r1, [pc, #512]	@ (80142dc <etharp_find_entry+0x2d4>)
 80140dc:	4613      	mov	r3, r2
 80140de:	005b      	lsls	r3, r3, #1
 80140e0:	4413      	add	r3, r2
 80140e2:	00db      	lsls	r3, r3, #3
 80140e4:	440b      	add	r3, r1
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d01a      	beq.n	8014122 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80140ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140f0:	497a      	ldr	r1, [pc, #488]	@ (80142dc <etharp_find_entry+0x2d4>)
 80140f2:	4613      	mov	r3, r2
 80140f4:	005b      	lsls	r3, r3, #1
 80140f6:	4413      	add	r3, r2
 80140f8:	00db      	lsls	r3, r3, #3
 80140fa:	440b      	add	r3, r1
 80140fc:	3312      	adds	r3, #18
 80140fe:	881b      	ldrh	r3, [r3, #0]
 8014100:	8bba      	ldrh	r2, [r7, #28]
 8014102:	429a      	cmp	r2, r3
 8014104:	d845      	bhi.n	8014192 <etharp_find_entry+0x18a>
            old_queue = i;
 8014106:	8c3b      	ldrh	r3, [r7, #32]
 8014108:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801410a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801410e:	4973      	ldr	r1, [pc, #460]	@ (80142dc <etharp_find_entry+0x2d4>)
 8014110:	4613      	mov	r3, r2
 8014112:	005b      	lsls	r3, r3, #1
 8014114:	4413      	add	r3, r2
 8014116:	00db      	lsls	r3, r3, #3
 8014118:	440b      	add	r3, r1
 801411a:	3312      	adds	r3, #18
 801411c:	881b      	ldrh	r3, [r3, #0]
 801411e:	83bb      	strh	r3, [r7, #28]
 8014120:	e037      	b.n	8014192 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014122:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014126:	496d      	ldr	r1, [pc, #436]	@ (80142dc <etharp_find_entry+0x2d4>)
 8014128:	4613      	mov	r3, r2
 801412a:	005b      	lsls	r3, r3, #1
 801412c:	4413      	add	r3, r2
 801412e:	00db      	lsls	r3, r3, #3
 8014130:	440b      	add	r3, r1
 8014132:	3312      	adds	r3, #18
 8014134:	881b      	ldrh	r3, [r3, #0]
 8014136:	8b7a      	ldrh	r2, [r7, #26]
 8014138:	429a      	cmp	r2, r3
 801413a:	d82a      	bhi.n	8014192 <etharp_find_entry+0x18a>
            old_pending = i;
 801413c:	8c3b      	ldrh	r3, [r7, #32]
 801413e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8014140:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014144:	4965      	ldr	r1, [pc, #404]	@ (80142dc <etharp_find_entry+0x2d4>)
 8014146:	4613      	mov	r3, r2
 8014148:	005b      	lsls	r3, r3, #1
 801414a:	4413      	add	r3, r2
 801414c:	00db      	lsls	r3, r3, #3
 801414e:	440b      	add	r3, r1
 8014150:	3312      	adds	r3, #18
 8014152:	881b      	ldrh	r3, [r3, #0]
 8014154:	837b      	strh	r3, [r7, #26]
 8014156:	e01c      	b.n	8014192 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014158:	7dfb      	ldrb	r3, [r7, #23]
 801415a:	2b01      	cmp	r3, #1
 801415c:	d919      	bls.n	8014192 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801415e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014162:	495e      	ldr	r1, [pc, #376]	@ (80142dc <etharp_find_entry+0x2d4>)
 8014164:	4613      	mov	r3, r2
 8014166:	005b      	lsls	r3, r3, #1
 8014168:	4413      	add	r3, r2
 801416a:	00db      	lsls	r3, r3, #3
 801416c:	440b      	add	r3, r1
 801416e:	3312      	adds	r3, #18
 8014170:	881b      	ldrh	r3, [r3, #0]
 8014172:	8b3a      	ldrh	r2, [r7, #24]
 8014174:	429a      	cmp	r2, r3
 8014176:	d80c      	bhi.n	8014192 <etharp_find_entry+0x18a>
            old_stable = i;
 8014178:	8c3b      	ldrh	r3, [r7, #32]
 801417a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801417c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014180:	4956      	ldr	r1, [pc, #344]	@ (80142dc <etharp_find_entry+0x2d4>)
 8014182:	4613      	mov	r3, r2
 8014184:	005b      	lsls	r3, r3, #1
 8014186:	4413      	add	r3, r2
 8014188:	00db      	lsls	r3, r3, #3
 801418a:	440b      	add	r3, r1
 801418c:	3312      	adds	r3, #18
 801418e:	881b      	ldrh	r3, [r3, #0]
 8014190:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014192:	8c3b      	ldrh	r3, [r7, #32]
 8014194:	3301      	adds	r3, #1
 8014196:	b29b      	uxth	r3, r3
 8014198:	843b      	strh	r3, [r7, #32]
 801419a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801419e:	2b09      	cmp	r3, #9
 80141a0:	f77f af4c 	ble.w	801403c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80141a4:	7afb      	ldrb	r3, [r7, #11]
 80141a6:	f003 0302 	and.w	r3, r3, #2
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d108      	bne.n	80141c0 <etharp_find_entry+0x1b8>
 80141ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80141b2:	2b0a      	cmp	r3, #10
 80141b4:	d107      	bne.n	80141c6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80141b6:	7afb      	ldrb	r3, [r7, #11]
 80141b8:	f003 0301 	and.w	r3, r3, #1
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d102      	bne.n	80141c6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80141c0:	f04f 33ff 	mov.w	r3, #4294967295
 80141c4:	e085      	b.n	80142d2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80141c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80141ca:	2b09      	cmp	r3, #9
 80141cc:	dc02      	bgt.n	80141d4 <etharp_find_entry+0x1cc>
    i = empty;
 80141ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80141d0:	843b      	strh	r3, [r7, #32]
 80141d2:	e039      	b.n	8014248 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80141d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80141d8:	2b09      	cmp	r3, #9
 80141da:	dc14      	bgt.n	8014206 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80141dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80141de:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80141e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141e4:	493d      	ldr	r1, [pc, #244]	@ (80142dc <etharp_find_entry+0x2d4>)
 80141e6:	4613      	mov	r3, r2
 80141e8:	005b      	lsls	r3, r3, #1
 80141ea:	4413      	add	r3, r2
 80141ec:	00db      	lsls	r3, r3, #3
 80141ee:	440b      	add	r3, r1
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d018      	beq.n	8014228 <etharp_find_entry+0x220>
 80141f6:	4b3a      	ldr	r3, [pc, #232]	@ (80142e0 <etharp_find_entry+0x2d8>)
 80141f8:	f240 126d 	movw	r2, #365	@ 0x16d
 80141fc:	493b      	ldr	r1, [pc, #236]	@ (80142ec <etharp_find_entry+0x2e4>)
 80141fe:	483a      	ldr	r0, [pc, #232]	@ (80142e8 <etharp_find_entry+0x2e0>)
 8014200:	f002 fba4 	bl	801694c <iprintf>
 8014204:	e010      	b.n	8014228 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014206:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801420a:	2b09      	cmp	r3, #9
 801420c:	dc02      	bgt.n	8014214 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801420e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014210:	843b      	strh	r3, [r7, #32]
 8014212:	e009      	b.n	8014228 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014214:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014218:	2b09      	cmp	r3, #9
 801421a:	dc02      	bgt.n	8014222 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801421c:	8bfb      	ldrh	r3, [r7, #30]
 801421e:	843b      	strh	r3, [r7, #32]
 8014220:	e002      	b.n	8014228 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014222:	f04f 33ff 	mov.w	r3, #4294967295
 8014226:	e054      	b.n	80142d2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014228:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801422c:	2b09      	cmp	r3, #9
 801422e:	dd06      	ble.n	801423e <etharp_find_entry+0x236>
 8014230:	4b2b      	ldr	r3, [pc, #172]	@ (80142e0 <etharp_find_entry+0x2d8>)
 8014232:	f240 127f 	movw	r2, #383	@ 0x17f
 8014236:	492e      	ldr	r1, [pc, #184]	@ (80142f0 <etharp_find_entry+0x2e8>)
 8014238:	482b      	ldr	r0, [pc, #172]	@ (80142e8 <etharp_find_entry+0x2e0>)
 801423a:	f002 fb87 	bl	801694c <iprintf>
    etharp_free_entry(i);
 801423e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014242:	4618      	mov	r0, r3
 8014244:	f7ff fe06 	bl	8013e54 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014248:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801424c:	2b09      	cmp	r3, #9
 801424e:	dd06      	ble.n	801425e <etharp_find_entry+0x256>
 8014250:	4b23      	ldr	r3, [pc, #140]	@ (80142e0 <etharp_find_entry+0x2d8>)
 8014252:	f240 1283 	movw	r2, #387	@ 0x183
 8014256:	4926      	ldr	r1, [pc, #152]	@ (80142f0 <etharp_find_entry+0x2e8>)
 8014258:	4823      	ldr	r0, [pc, #140]	@ (80142e8 <etharp_find_entry+0x2e0>)
 801425a:	f002 fb77 	bl	801694c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801425e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014262:	491e      	ldr	r1, [pc, #120]	@ (80142dc <etharp_find_entry+0x2d4>)
 8014264:	4613      	mov	r3, r2
 8014266:	005b      	lsls	r3, r3, #1
 8014268:	4413      	add	r3, r2
 801426a:	00db      	lsls	r3, r3, #3
 801426c:	440b      	add	r3, r1
 801426e:	3314      	adds	r3, #20
 8014270:	781b      	ldrb	r3, [r3, #0]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d006      	beq.n	8014284 <etharp_find_entry+0x27c>
 8014276:	4b1a      	ldr	r3, [pc, #104]	@ (80142e0 <etharp_find_entry+0x2d8>)
 8014278:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801427c:	491d      	ldr	r1, [pc, #116]	@ (80142f4 <etharp_find_entry+0x2ec>)
 801427e:	481a      	ldr	r0, [pc, #104]	@ (80142e8 <etharp_find_entry+0x2e0>)
 8014280:	f002 fb64 	bl	801694c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d00b      	beq.n	80142a2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801428a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	6819      	ldr	r1, [r3, #0]
 8014292:	4812      	ldr	r0, [pc, #72]	@ (80142dc <etharp_find_entry+0x2d4>)
 8014294:	4613      	mov	r3, r2
 8014296:	005b      	lsls	r3, r3, #1
 8014298:	4413      	add	r3, r2
 801429a:	00db      	lsls	r3, r3, #3
 801429c:	4403      	add	r3, r0
 801429e:	3304      	adds	r3, #4
 80142a0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80142a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142a6:	490d      	ldr	r1, [pc, #52]	@ (80142dc <etharp_find_entry+0x2d4>)
 80142a8:	4613      	mov	r3, r2
 80142aa:	005b      	lsls	r3, r3, #1
 80142ac:	4413      	add	r3, r2
 80142ae:	00db      	lsls	r3, r3, #3
 80142b0:	440b      	add	r3, r1
 80142b2:	3312      	adds	r3, #18
 80142b4:	2200      	movs	r2, #0
 80142b6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80142b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142bc:	4907      	ldr	r1, [pc, #28]	@ (80142dc <etharp_find_entry+0x2d4>)
 80142be:	4613      	mov	r3, r2
 80142c0:	005b      	lsls	r3, r3, #1
 80142c2:	4413      	add	r3, r2
 80142c4:	00db      	lsls	r3, r3, #3
 80142c6:	440b      	add	r3, r1
 80142c8:	3308      	adds	r3, #8
 80142ca:	687a      	ldr	r2, [r7, #4]
 80142cc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80142ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80142d2:	4618      	mov	r0, r3
 80142d4:	3728      	adds	r7, #40	@ 0x28
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bd80      	pop	{r7, pc}
 80142da:	bf00      	nop
 80142dc:	2000f310 	.word	0x2000f310
 80142e0:	0801a700 	.word	0x0801a700
 80142e4:	0801a738 	.word	0x0801a738
 80142e8:	0801a778 	.word	0x0801a778
 80142ec:	0801a7a0 	.word	0x0801a7a0
 80142f0:	0801a7b8 	.word	0x0801a7b8
 80142f4:	0801a7cc 	.word	0x0801a7cc

080142f8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b088      	sub	sp, #32
 80142fc:	af02      	add	r7, sp, #8
 80142fe:	60f8      	str	r0, [r7, #12]
 8014300:	60b9      	str	r1, [r7, #8]
 8014302:	607a      	str	r2, [r7, #4]
 8014304:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801430c:	2b06      	cmp	r3, #6
 801430e:	d006      	beq.n	801431e <etharp_update_arp_entry+0x26>
 8014310:	4b48      	ldr	r3, [pc, #288]	@ (8014434 <etharp_update_arp_entry+0x13c>)
 8014312:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8014316:	4948      	ldr	r1, [pc, #288]	@ (8014438 <etharp_update_arp_entry+0x140>)
 8014318:	4848      	ldr	r0, [pc, #288]	@ (801443c <etharp_update_arp_entry+0x144>)
 801431a:	f002 fb17 	bl	801694c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d012      	beq.n	801434a <etharp_update_arp_entry+0x52>
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d00e      	beq.n	801434a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	68f9      	ldr	r1, [r7, #12]
 8014332:	4618      	mov	r0, r3
 8014334:	f001 f8fe 	bl	8015534 <ip4_addr_isbroadcast_u32>
 8014338:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801433a:	2b00      	cmp	r3, #0
 801433c:	d105      	bne.n	801434a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801433e:	68bb      	ldr	r3, [r7, #8]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014346:	2be0      	cmp	r3, #224	@ 0xe0
 8014348:	d102      	bne.n	8014350 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801434a:	f06f 030f 	mvn.w	r3, #15
 801434e:	e06c      	b.n	801442a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014350:	78fb      	ldrb	r3, [r7, #3]
 8014352:	68fa      	ldr	r2, [r7, #12]
 8014354:	4619      	mov	r1, r3
 8014356:	68b8      	ldr	r0, [r7, #8]
 8014358:	f7ff fe56 	bl	8014008 <etharp_find_entry>
 801435c:	4603      	mov	r3, r0
 801435e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014360:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014364:	2b00      	cmp	r3, #0
 8014366:	da02      	bge.n	801436e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014368:	8afb      	ldrh	r3, [r7, #22]
 801436a:	b25b      	sxtb	r3, r3
 801436c:	e05d      	b.n	801442a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801436e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014372:	4933      	ldr	r1, [pc, #204]	@ (8014440 <etharp_update_arp_entry+0x148>)
 8014374:	4613      	mov	r3, r2
 8014376:	005b      	lsls	r3, r3, #1
 8014378:	4413      	add	r3, r2
 801437a:	00db      	lsls	r3, r3, #3
 801437c:	440b      	add	r3, r1
 801437e:	3314      	adds	r3, #20
 8014380:	2202      	movs	r2, #2
 8014382:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014384:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014388:	492d      	ldr	r1, [pc, #180]	@ (8014440 <etharp_update_arp_entry+0x148>)
 801438a:	4613      	mov	r3, r2
 801438c:	005b      	lsls	r3, r3, #1
 801438e:	4413      	add	r3, r2
 8014390:	00db      	lsls	r3, r3, #3
 8014392:	440b      	add	r3, r1
 8014394:	3308      	adds	r3, #8
 8014396:	68fa      	ldr	r2, [r7, #12]
 8014398:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801439a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801439e:	4613      	mov	r3, r2
 80143a0:	005b      	lsls	r3, r3, #1
 80143a2:	4413      	add	r3, r2
 80143a4:	00db      	lsls	r3, r3, #3
 80143a6:	3308      	adds	r3, #8
 80143a8:	4a25      	ldr	r2, [pc, #148]	@ (8014440 <etharp_update_arp_entry+0x148>)
 80143aa:	4413      	add	r3, r2
 80143ac:	3304      	adds	r3, #4
 80143ae:	2206      	movs	r2, #6
 80143b0:	6879      	ldr	r1, [r7, #4]
 80143b2:	4618      	mov	r0, r3
 80143b4:	f002 fbfb 	bl	8016bae <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80143b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143bc:	4920      	ldr	r1, [pc, #128]	@ (8014440 <etharp_update_arp_entry+0x148>)
 80143be:	4613      	mov	r3, r2
 80143c0:	005b      	lsls	r3, r3, #1
 80143c2:	4413      	add	r3, r2
 80143c4:	00db      	lsls	r3, r3, #3
 80143c6:	440b      	add	r3, r1
 80143c8:	3312      	adds	r3, #18
 80143ca:	2200      	movs	r2, #0
 80143cc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80143ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143d2:	491b      	ldr	r1, [pc, #108]	@ (8014440 <etharp_update_arp_entry+0x148>)
 80143d4:	4613      	mov	r3, r2
 80143d6:	005b      	lsls	r3, r3, #1
 80143d8:	4413      	add	r3, r2
 80143da:	00db      	lsls	r3, r3, #3
 80143dc:	440b      	add	r3, r1
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d021      	beq.n	8014428 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80143e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143e8:	4915      	ldr	r1, [pc, #84]	@ (8014440 <etharp_update_arp_entry+0x148>)
 80143ea:	4613      	mov	r3, r2
 80143ec:	005b      	lsls	r3, r3, #1
 80143ee:	4413      	add	r3, r2
 80143f0:	00db      	lsls	r3, r3, #3
 80143f2:	440b      	add	r3, r1
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80143f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143fc:	4910      	ldr	r1, [pc, #64]	@ (8014440 <etharp_update_arp_entry+0x148>)
 80143fe:	4613      	mov	r3, r2
 8014400:	005b      	lsls	r3, r3, #1
 8014402:	4413      	add	r3, r2
 8014404:	00db      	lsls	r3, r3, #3
 8014406:	440b      	add	r3, r1
 8014408:	2200      	movs	r2, #0
 801440a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014412:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014416:	9300      	str	r3, [sp, #0]
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	6939      	ldr	r1, [r7, #16]
 801441c:	68f8      	ldr	r0, [r7, #12]
 801441e:	f001 ff97 	bl	8016350 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014422:	6938      	ldr	r0, [r7, #16]
 8014424:	f7f8 fd80 	bl	800cf28 <pbuf_free>
  }
  return ERR_OK;
 8014428:	2300      	movs	r3, #0
}
 801442a:	4618      	mov	r0, r3
 801442c:	3718      	adds	r7, #24
 801442e:	46bd      	mov	sp, r7
 8014430:	bd80      	pop	{r7, pc}
 8014432:	bf00      	nop
 8014434:	0801a700 	.word	0x0801a700
 8014438:	0801a7f8 	.word	0x0801a7f8
 801443c:	0801a778 	.word	0x0801a778
 8014440:	2000f310 	.word	0x2000f310

08014444 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b084      	sub	sp, #16
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801444c:	2300      	movs	r3, #0
 801444e:	60fb      	str	r3, [r7, #12]
 8014450:	e01e      	b.n	8014490 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014452:	4913      	ldr	r1, [pc, #76]	@ (80144a0 <etharp_cleanup_netif+0x5c>)
 8014454:	68fa      	ldr	r2, [r7, #12]
 8014456:	4613      	mov	r3, r2
 8014458:	005b      	lsls	r3, r3, #1
 801445a:	4413      	add	r3, r2
 801445c:	00db      	lsls	r3, r3, #3
 801445e:	440b      	add	r3, r1
 8014460:	3314      	adds	r3, #20
 8014462:	781b      	ldrb	r3, [r3, #0]
 8014464:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014466:	7afb      	ldrb	r3, [r7, #11]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d00e      	beq.n	801448a <etharp_cleanup_netif+0x46>
 801446c:	490c      	ldr	r1, [pc, #48]	@ (80144a0 <etharp_cleanup_netif+0x5c>)
 801446e:	68fa      	ldr	r2, [r7, #12]
 8014470:	4613      	mov	r3, r2
 8014472:	005b      	lsls	r3, r3, #1
 8014474:	4413      	add	r3, r2
 8014476:	00db      	lsls	r3, r3, #3
 8014478:	440b      	add	r3, r1
 801447a:	3308      	adds	r3, #8
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	687a      	ldr	r2, [r7, #4]
 8014480:	429a      	cmp	r2, r3
 8014482:	d102      	bne.n	801448a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014484:	68f8      	ldr	r0, [r7, #12]
 8014486:	f7ff fce5 	bl	8013e54 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	3301      	adds	r3, #1
 801448e:	60fb      	str	r3, [r7, #12]
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	2b09      	cmp	r3, #9
 8014494:	dddd      	ble.n	8014452 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014496:	bf00      	nop
 8014498:	bf00      	nop
 801449a:	3710      	adds	r7, #16
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}
 80144a0:	2000f310 	.word	0x2000f310

080144a4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80144a4:	b5b0      	push	{r4, r5, r7, lr}
 80144a6:	b08a      	sub	sp, #40	@ 0x28
 80144a8:	af04      	add	r7, sp, #16
 80144aa:	6078      	str	r0, [r7, #4]
 80144ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d107      	bne.n	80144c4 <etharp_input+0x20>
 80144b4:	4b3d      	ldr	r3, [pc, #244]	@ (80145ac <etharp_input+0x108>)
 80144b6:	f240 228a 	movw	r2, #650	@ 0x28a
 80144ba:	493d      	ldr	r1, [pc, #244]	@ (80145b0 <etharp_input+0x10c>)
 80144bc:	483d      	ldr	r0, [pc, #244]	@ (80145b4 <etharp_input+0x110>)
 80144be:	f002 fa45 	bl	801694c <iprintf>
 80144c2:	e06f      	b.n	80145a4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	685b      	ldr	r3, [r3, #4]
 80144c8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80144ca:	693b      	ldr	r3, [r7, #16]
 80144cc:	881b      	ldrh	r3, [r3, #0]
 80144ce:	b29b      	uxth	r3, r3
 80144d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80144d4:	d10c      	bne.n	80144f0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80144da:	2b06      	cmp	r3, #6
 80144dc:	d108      	bne.n	80144f0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80144de:	693b      	ldr	r3, [r7, #16]
 80144e0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80144e2:	2b04      	cmp	r3, #4
 80144e4:	d104      	bne.n	80144f0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80144e6:	693b      	ldr	r3, [r7, #16]
 80144e8:	885b      	ldrh	r3, [r3, #2]
 80144ea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80144ec:	2b08      	cmp	r3, #8
 80144ee:	d003      	beq.n	80144f8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f7f8 fd19 	bl	800cf28 <pbuf_free>
    return;
 80144f6:	e055      	b.n	80145a4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80144f8:	693b      	ldr	r3, [r7, #16]
 80144fa:	330e      	adds	r3, #14
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014500:	693b      	ldr	r3, [r7, #16]
 8014502:	3318      	adds	r3, #24
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	3304      	adds	r3, #4
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d102      	bne.n	8014518 <etharp_input+0x74>
    for_us = 0;
 8014512:	2300      	movs	r3, #0
 8014514:	75fb      	strb	r3, [r7, #23]
 8014516:	e009      	b.n	801452c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014518:	68ba      	ldr	r2, [r7, #8]
 801451a:	683b      	ldr	r3, [r7, #0]
 801451c:	3304      	adds	r3, #4
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	429a      	cmp	r2, r3
 8014522:	bf0c      	ite	eq
 8014524:	2301      	moveq	r3, #1
 8014526:	2300      	movne	r3, #0
 8014528:	b2db      	uxtb	r3, r3
 801452a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801452c:	693b      	ldr	r3, [r7, #16]
 801452e:	f103 0208 	add.w	r2, r3, #8
 8014532:	7dfb      	ldrb	r3, [r7, #23]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d001      	beq.n	801453c <etharp_input+0x98>
 8014538:	2301      	movs	r3, #1
 801453a:	e000      	b.n	801453e <etharp_input+0x9a>
 801453c:	2302      	movs	r3, #2
 801453e:	f107 010c 	add.w	r1, r7, #12
 8014542:	6838      	ldr	r0, [r7, #0]
 8014544:	f7ff fed8 	bl	80142f8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014548:	693b      	ldr	r3, [r7, #16]
 801454a:	88db      	ldrh	r3, [r3, #6]
 801454c:	b29b      	uxth	r3, r3
 801454e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014552:	d003      	beq.n	801455c <etharp_input+0xb8>
 8014554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014558:	d01e      	beq.n	8014598 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801455a:	e020      	b.n	801459e <etharp_input+0xfa>
      if (for_us) {
 801455c:	7dfb      	ldrb	r3, [r7, #23]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d01c      	beq.n	801459c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014562:	683b      	ldr	r3, [r7, #0]
 8014564:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801456e:	683b      	ldr	r3, [r7, #0]
 8014570:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014578:	693a      	ldr	r2, [r7, #16]
 801457a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801457c:	2102      	movs	r1, #2
 801457e:	9103      	str	r1, [sp, #12]
 8014580:	f107 010c 	add.w	r1, r7, #12
 8014584:	9102      	str	r1, [sp, #8]
 8014586:	9201      	str	r2, [sp, #4]
 8014588:	9300      	str	r3, [sp, #0]
 801458a:	462b      	mov	r3, r5
 801458c:	4622      	mov	r2, r4
 801458e:	4601      	mov	r1, r0
 8014590:	6838      	ldr	r0, [r7, #0]
 8014592:	f000 faeb 	bl	8014b6c <etharp_raw>
      break;
 8014596:	e001      	b.n	801459c <etharp_input+0xf8>
      break;
 8014598:	bf00      	nop
 801459a:	e000      	b.n	801459e <etharp_input+0xfa>
      break;
 801459c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f7f8 fcc2 	bl	800cf28 <pbuf_free>
}
 80145a4:	3718      	adds	r7, #24
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bdb0      	pop	{r4, r5, r7, pc}
 80145aa:	bf00      	nop
 80145ac:	0801a700 	.word	0x0801a700
 80145b0:	0801a850 	.word	0x0801a850
 80145b4:	0801a778 	.word	0x0801a778

080145b8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b086      	sub	sp, #24
 80145bc:	af02      	add	r7, sp, #8
 80145be:	60f8      	str	r0, [r7, #12]
 80145c0:	60b9      	str	r1, [r7, #8]
 80145c2:	4613      	mov	r3, r2
 80145c4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80145c6:	79fa      	ldrb	r2, [r7, #7]
 80145c8:	4944      	ldr	r1, [pc, #272]	@ (80146dc <etharp_output_to_arp_index+0x124>)
 80145ca:	4613      	mov	r3, r2
 80145cc:	005b      	lsls	r3, r3, #1
 80145ce:	4413      	add	r3, r2
 80145d0:	00db      	lsls	r3, r3, #3
 80145d2:	440b      	add	r3, r1
 80145d4:	3314      	adds	r3, #20
 80145d6:	781b      	ldrb	r3, [r3, #0]
 80145d8:	2b01      	cmp	r3, #1
 80145da:	d806      	bhi.n	80145ea <etharp_output_to_arp_index+0x32>
 80145dc:	4b40      	ldr	r3, [pc, #256]	@ (80146e0 <etharp_output_to_arp_index+0x128>)
 80145de:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80145e2:	4940      	ldr	r1, [pc, #256]	@ (80146e4 <etharp_output_to_arp_index+0x12c>)
 80145e4:	4840      	ldr	r0, [pc, #256]	@ (80146e8 <etharp_output_to_arp_index+0x130>)
 80145e6:	f002 f9b1 	bl	801694c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80145ea:	79fa      	ldrb	r2, [r7, #7]
 80145ec:	493b      	ldr	r1, [pc, #236]	@ (80146dc <etharp_output_to_arp_index+0x124>)
 80145ee:	4613      	mov	r3, r2
 80145f0:	005b      	lsls	r3, r3, #1
 80145f2:	4413      	add	r3, r2
 80145f4:	00db      	lsls	r3, r3, #3
 80145f6:	440b      	add	r3, r1
 80145f8:	3314      	adds	r3, #20
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	2b02      	cmp	r3, #2
 80145fe:	d153      	bne.n	80146a8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014600:	79fa      	ldrb	r2, [r7, #7]
 8014602:	4936      	ldr	r1, [pc, #216]	@ (80146dc <etharp_output_to_arp_index+0x124>)
 8014604:	4613      	mov	r3, r2
 8014606:	005b      	lsls	r3, r3, #1
 8014608:	4413      	add	r3, r2
 801460a:	00db      	lsls	r3, r3, #3
 801460c:	440b      	add	r3, r1
 801460e:	3312      	adds	r3, #18
 8014610:	881b      	ldrh	r3, [r3, #0]
 8014612:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8014616:	d919      	bls.n	801464c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014618:	79fa      	ldrb	r2, [r7, #7]
 801461a:	4613      	mov	r3, r2
 801461c:	005b      	lsls	r3, r3, #1
 801461e:	4413      	add	r3, r2
 8014620:	00db      	lsls	r3, r3, #3
 8014622:	4a2e      	ldr	r2, [pc, #184]	@ (80146dc <etharp_output_to_arp_index+0x124>)
 8014624:	4413      	add	r3, r2
 8014626:	3304      	adds	r3, #4
 8014628:	4619      	mov	r1, r3
 801462a:	68f8      	ldr	r0, [r7, #12]
 801462c:	f000 fb4c 	bl	8014cc8 <etharp_request>
 8014630:	4603      	mov	r3, r0
 8014632:	2b00      	cmp	r3, #0
 8014634:	d138      	bne.n	80146a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014636:	79fa      	ldrb	r2, [r7, #7]
 8014638:	4928      	ldr	r1, [pc, #160]	@ (80146dc <etharp_output_to_arp_index+0x124>)
 801463a:	4613      	mov	r3, r2
 801463c:	005b      	lsls	r3, r3, #1
 801463e:	4413      	add	r3, r2
 8014640:	00db      	lsls	r3, r3, #3
 8014642:	440b      	add	r3, r1
 8014644:	3314      	adds	r3, #20
 8014646:	2203      	movs	r2, #3
 8014648:	701a      	strb	r2, [r3, #0]
 801464a:	e02d      	b.n	80146a8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801464c:	79fa      	ldrb	r2, [r7, #7]
 801464e:	4923      	ldr	r1, [pc, #140]	@ (80146dc <etharp_output_to_arp_index+0x124>)
 8014650:	4613      	mov	r3, r2
 8014652:	005b      	lsls	r3, r3, #1
 8014654:	4413      	add	r3, r2
 8014656:	00db      	lsls	r3, r3, #3
 8014658:	440b      	add	r3, r1
 801465a:	3312      	adds	r3, #18
 801465c:	881b      	ldrh	r3, [r3, #0]
 801465e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8014662:	d321      	bcc.n	80146a8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014664:	79fa      	ldrb	r2, [r7, #7]
 8014666:	4613      	mov	r3, r2
 8014668:	005b      	lsls	r3, r3, #1
 801466a:	4413      	add	r3, r2
 801466c:	00db      	lsls	r3, r3, #3
 801466e:	4a1b      	ldr	r2, [pc, #108]	@ (80146dc <etharp_output_to_arp_index+0x124>)
 8014670:	4413      	add	r3, r2
 8014672:	1d19      	adds	r1, r3, #4
 8014674:	79fa      	ldrb	r2, [r7, #7]
 8014676:	4613      	mov	r3, r2
 8014678:	005b      	lsls	r3, r3, #1
 801467a:	4413      	add	r3, r2
 801467c:	00db      	lsls	r3, r3, #3
 801467e:	3308      	adds	r3, #8
 8014680:	4a16      	ldr	r2, [pc, #88]	@ (80146dc <etharp_output_to_arp_index+0x124>)
 8014682:	4413      	add	r3, r2
 8014684:	3304      	adds	r3, #4
 8014686:	461a      	mov	r2, r3
 8014688:	68f8      	ldr	r0, [r7, #12]
 801468a:	f000 fafb 	bl	8014c84 <etharp_request_dst>
 801468e:	4603      	mov	r3, r0
 8014690:	2b00      	cmp	r3, #0
 8014692:	d109      	bne.n	80146a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014694:	79fa      	ldrb	r2, [r7, #7]
 8014696:	4911      	ldr	r1, [pc, #68]	@ (80146dc <etharp_output_to_arp_index+0x124>)
 8014698:	4613      	mov	r3, r2
 801469a:	005b      	lsls	r3, r3, #1
 801469c:	4413      	add	r3, r2
 801469e:	00db      	lsls	r3, r3, #3
 80146a0:	440b      	add	r3, r1
 80146a2:	3314      	adds	r3, #20
 80146a4:	2203      	movs	r2, #3
 80146a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80146ae:	79fa      	ldrb	r2, [r7, #7]
 80146b0:	4613      	mov	r3, r2
 80146b2:	005b      	lsls	r3, r3, #1
 80146b4:	4413      	add	r3, r2
 80146b6:	00db      	lsls	r3, r3, #3
 80146b8:	3308      	adds	r3, #8
 80146ba:	4a08      	ldr	r2, [pc, #32]	@ (80146dc <etharp_output_to_arp_index+0x124>)
 80146bc:	4413      	add	r3, r2
 80146be:	3304      	adds	r3, #4
 80146c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80146c4:	9200      	str	r2, [sp, #0]
 80146c6:	460a      	mov	r2, r1
 80146c8:	68b9      	ldr	r1, [r7, #8]
 80146ca:	68f8      	ldr	r0, [r7, #12]
 80146cc:	f001 fe40 	bl	8016350 <ethernet_output>
 80146d0:	4603      	mov	r3, r0
}
 80146d2:	4618      	mov	r0, r3
 80146d4:	3710      	adds	r7, #16
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bd80      	pop	{r7, pc}
 80146da:	bf00      	nop
 80146dc:	2000f310 	.word	0x2000f310
 80146e0:	0801a700 	.word	0x0801a700
 80146e4:	0801a870 	.word	0x0801a870
 80146e8:	0801a778 	.word	0x0801a778

080146ec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b08a      	sub	sp, #40	@ 0x28
 80146f0:	af02      	add	r7, sp, #8
 80146f2:	60f8      	str	r0, [r7, #12]
 80146f4:	60b9      	str	r1, [r7, #8]
 80146f6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d106      	bne.n	8014710 <etharp_output+0x24>
 8014702:	4b73      	ldr	r3, [pc, #460]	@ (80148d0 <etharp_output+0x1e4>)
 8014704:	f240 321e 	movw	r2, #798	@ 0x31e
 8014708:	4972      	ldr	r1, [pc, #456]	@ (80148d4 <etharp_output+0x1e8>)
 801470a:	4873      	ldr	r0, [pc, #460]	@ (80148d8 <etharp_output+0x1ec>)
 801470c:	f002 f91e 	bl	801694c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014710:	68bb      	ldr	r3, [r7, #8]
 8014712:	2b00      	cmp	r3, #0
 8014714:	d106      	bne.n	8014724 <etharp_output+0x38>
 8014716:	4b6e      	ldr	r3, [pc, #440]	@ (80148d0 <etharp_output+0x1e4>)
 8014718:	f240 321f 	movw	r2, #799	@ 0x31f
 801471c:	496f      	ldr	r1, [pc, #444]	@ (80148dc <etharp_output+0x1f0>)
 801471e:	486e      	ldr	r0, [pc, #440]	@ (80148d8 <etharp_output+0x1ec>)
 8014720:	f002 f914 	bl	801694c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d106      	bne.n	8014738 <etharp_output+0x4c>
 801472a:	4b69      	ldr	r3, [pc, #420]	@ (80148d0 <etharp_output+0x1e4>)
 801472c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8014730:	496b      	ldr	r1, [pc, #428]	@ (80148e0 <etharp_output+0x1f4>)
 8014732:	4869      	ldr	r0, [pc, #420]	@ (80148d8 <etharp_output+0x1ec>)
 8014734:	f002 f90a 	bl	801694c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	68f9      	ldr	r1, [r7, #12]
 801473e:	4618      	mov	r0, r3
 8014740:	f000 fef8 	bl	8015534 <ip4_addr_isbroadcast_u32>
 8014744:	4603      	mov	r3, r0
 8014746:	2b00      	cmp	r3, #0
 8014748:	d002      	beq.n	8014750 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801474a:	4b66      	ldr	r3, [pc, #408]	@ (80148e4 <etharp_output+0x1f8>)
 801474c:	61fb      	str	r3, [r7, #28]
 801474e:	e0af      	b.n	80148b0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014758:	2be0      	cmp	r3, #224	@ 0xe0
 801475a:	d118      	bne.n	801478e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801475c:	2301      	movs	r3, #1
 801475e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014760:	2300      	movs	r3, #0
 8014762:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014764:	235e      	movs	r3, #94	@ 0x5e
 8014766:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	3301      	adds	r3, #1
 801476c:	781b      	ldrb	r3, [r3, #0]
 801476e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014772:	b2db      	uxtb	r3, r3
 8014774:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	3302      	adds	r3, #2
 801477a:	781b      	ldrb	r3, [r3, #0]
 801477c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	3303      	adds	r3, #3
 8014782:	781b      	ldrb	r3, [r3, #0]
 8014784:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014786:	f107 0310 	add.w	r3, r7, #16
 801478a:	61fb      	str	r3, [r7, #28]
 801478c:	e090      	b.n	80148b0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	681a      	ldr	r2, [r3, #0]
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	3304      	adds	r3, #4
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	405a      	eors	r2, r3
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	3308      	adds	r3, #8
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	4013      	ands	r3, r2
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d012      	beq.n	80147cc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80147ac:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80147b0:	4293      	cmp	r3, r2
 80147b2:	d00b      	beq.n	80147cc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	330c      	adds	r3, #12
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d003      	beq.n	80147c6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	330c      	adds	r3, #12
 80147c2:	61bb      	str	r3, [r7, #24]
 80147c4:	e002      	b.n	80147cc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80147c6:	f06f 0303 	mvn.w	r3, #3
 80147ca:	e07d      	b.n	80148c8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80147cc:	4b46      	ldr	r3, [pc, #280]	@ (80148e8 <etharp_output+0x1fc>)
 80147ce:	781b      	ldrb	r3, [r3, #0]
 80147d0:	4619      	mov	r1, r3
 80147d2:	4a46      	ldr	r2, [pc, #280]	@ (80148ec <etharp_output+0x200>)
 80147d4:	460b      	mov	r3, r1
 80147d6:	005b      	lsls	r3, r3, #1
 80147d8:	440b      	add	r3, r1
 80147da:	00db      	lsls	r3, r3, #3
 80147dc:	4413      	add	r3, r2
 80147de:	3314      	adds	r3, #20
 80147e0:	781b      	ldrb	r3, [r3, #0]
 80147e2:	2b01      	cmp	r3, #1
 80147e4:	d925      	bls.n	8014832 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80147e6:	4b40      	ldr	r3, [pc, #256]	@ (80148e8 <etharp_output+0x1fc>)
 80147e8:	781b      	ldrb	r3, [r3, #0]
 80147ea:	4619      	mov	r1, r3
 80147ec:	4a3f      	ldr	r2, [pc, #252]	@ (80148ec <etharp_output+0x200>)
 80147ee:	460b      	mov	r3, r1
 80147f0:	005b      	lsls	r3, r3, #1
 80147f2:	440b      	add	r3, r1
 80147f4:	00db      	lsls	r3, r3, #3
 80147f6:	4413      	add	r3, r2
 80147f8:	3308      	adds	r3, #8
 80147fa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80147fc:	68fa      	ldr	r2, [r7, #12]
 80147fe:	429a      	cmp	r2, r3
 8014800:	d117      	bne.n	8014832 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014802:	69bb      	ldr	r3, [r7, #24]
 8014804:	681a      	ldr	r2, [r3, #0]
 8014806:	4b38      	ldr	r3, [pc, #224]	@ (80148e8 <etharp_output+0x1fc>)
 8014808:	781b      	ldrb	r3, [r3, #0]
 801480a:	4618      	mov	r0, r3
 801480c:	4937      	ldr	r1, [pc, #220]	@ (80148ec <etharp_output+0x200>)
 801480e:	4603      	mov	r3, r0
 8014810:	005b      	lsls	r3, r3, #1
 8014812:	4403      	add	r3, r0
 8014814:	00db      	lsls	r3, r3, #3
 8014816:	440b      	add	r3, r1
 8014818:	3304      	adds	r3, #4
 801481a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801481c:	429a      	cmp	r2, r3
 801481e:	d108      	bne.n	8014832 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014820:	4b31      	ldr	r3, [pc, #196]	@ (80148e8 <etharp_output+0x1fc>)
 8014822:	781b      	ldrb	r3, [r3, #0]
 8014824:	461a      	mov	r2, r3
 8014826:	68b9      	ldr	r1, [r7, #8]
 8014828:	68f8      	ldr	r0, [r7, #12]
 801482a:	f7ff fec5 	bl	80145b8 <etharp_output_to_arp_index>
 801482e:	4603      	mov	r3, r0
 8014830:	e04a      	b.n	80148c8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014832:	2300      	movs	r3, #0
 8014834:	75fb      	strb	r3, [r7, #23]
 8014836:	e031      	b.n	801489c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014838:	7dfa      	ldrb	r2, [r7, #23]
 801483a:	492c      	ldr	r1, [pc, #176]	@ (80148ec <etharp_output+0x200>)
 801483c:	4613      	mov	r3, r2
 801483e:	005b      	lsls	r3, r3, #1
 8014840:	4413      	add	r3, r2
 8014842:	00db      	lsls	r3, r3, #3
 8014844:	440b      	add	r3, r1
 8014846:	3314      	adds	r3, #20
 8014848:	781b      	ldrb	r3, [r3, #0]
 801484a:	2b01      	cmp	r3, #1
 801484c:	d923      	bls.n	8014896 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801484e:	7dfa      	ldrb	r2, [r7, #23]
 8014850:	4926      	ldr	r1, [pc, #152]	@ (80148ec <etharp_output+0x200>)
 8014852:	4613      	mov	r3, r2
 8014854:	005b      	lsls	r3, r3, #1
 8014856:	4413      	add	r3, r2
 8014858:	00db      	lsls	r3, r3, #3
 801485a:	440b      	add	r3, r1
 801485c:	3308      	adds	r3, #8
 801485e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014860:	68fa      	ldr	r2, [r7, #12]
 8014862:	429a      	cmp	r2, r3
 8014864:	d117      	bne.n	8014896 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014866:	69bb      	ldr	r3, [r7, #24]
 8014868:	6819      	ldr	r1, [r3, #0]
 801486a:	7dfa      	ldrb	r2, [r7, #23]
 801486c:	481f      	ldr	r0, [pc, #124]	@ (80148ec <etharp_output+0x200>)
 801486e:	4613      	mov	r3, r2
 8014870:	005b      	lsls	r3, r3, #1
 8014872:	4413      	add	r3, r2
 8014874:	00db      	lsls	r3, r3, #3
 8014876:	4403      	add	r3, r0
 8014878:	3304      	adds	r3, #4
 801487a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801487c:	4299      	cmp	r1, r3
 801487e:	d10a      	bne.n	8014896 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014880:	4a19      	ldr	r2, [pc, #100]	@ (80148e8 <etharp_output+0x1fc>)
 8014882:	7dfb      	ldrb	r3, [r7, #23]
 8014884:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014886:	7dfb      	ldrb	r3, [r7, #23]
 8014888:	461a      	mov	r2, r3
 801488a:	68b9      	ldr	r1, [r7, #8]
 801488c:	68f8      	ldr	r0, [r7, #12]
 801488e:	f7ff fe93 	bl	80145b8 <etharp_output_to_arp_index>
 8014892:	4603      	mov	r3, r0
 8014894:	e018      	b.n	80148c8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014896:	7dfb      	ldrb	r3, [r7, #23]
 8014898:	3301      	adds	r3, #1
 801489a:	75fb      	strb	r3, [r7, #23]
 801489c:	7dfb      	ldrb	r3, [r7, #23]
 801489e:	2b09      	cmp	r3, #9
 80148a0:	d9ca      	bls.n	8014838 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80148a2:	68ba      	ldr	r2, [r7, #8]
 80148a4:	69b9      	ldr	r1, [r7, #24]
 80148a6:	68f8      	ldr	r0, [r7, #12]
 80148a8:	f000 f822 	bl	80148f0 <etharp_query>
 80148ac:	4603      	mov	r3, r0
 80148ae:	e00b      	b.n	80148c8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80148b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80148ba:	9300      	str	r3, [sp, #0]
 80148bc:	69fb      	ldr	r3, [r7, #28]
 80148be:	68b9      	ldr	r1, [r7, #8]
 80148c0:	68f8      	ldr	r0, [r7, #12]
 80148c2:	f001 fd45 	bl	8016350 <ethernet_output>
 80148c6:	4603      	mov	r3, r0
}
 80148c8:	4618      	mov	r0, r3
 80148ca:	3720      	adds	r7, #32
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}
 80148d0:	0801a700 	.word	0x0801a700
 80148d4:	0801a850 	.word	0x0801a850
 80148d8:	0801a778 	.word	0x0801a778
 80148dc:	0801a8a0 	.word	0x0801a8a0
 80148e0:	0801a840 	.word	0x0801a840
 80148e4:	0801af24 	.word	0x0801af24
 80148e8:	2000f400 	.word	0x2000f400
 80148ec:	2000f310 	.word	0x2000f310

080148f0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b08c      	sub	sp, #48	@ 0x30
 80148f4:	af02      	add	r7, sp, #8
 80148f6:	60f8      	str	r0, [r7, #12]
 80148f8:	60b9      	str	r1, [r7, #8]
 80148fa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	3326      	adds	r3, #38	@ 0x26
 8014900:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014902:	23ff      	movs	r3, #255	@ 0xff
 8014904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8014908:	2300      	movs	r3, #0
 801490a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801490c:	68bb      	ldr	r3, [r7, #8]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	68f9      	ldr	r1, [r7, #12]
 8014912:	4618      	mov	r0, r3
 8014914:	f000 fe0e 	bl	8015534 <ip4_addr_isbroadcast_u32>
 8014918:	4603      	mov	r3, r0
 801491a:	2b00      	cmp	r3, #0
 801491c:	d10c      	bne.n	8014938 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801491e:	68bb      	ldr	r3, [r7, #8]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014926:	2be0      	cmp	r3, #224	@ 0xe0
 8014928:	d006      	beq.n	8014938 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801492a:	68bb      	ldr	r3, [r7, #8]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d003      	beq.n	8014938 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014930:	68bb      	ldr	r3, [r7, #8]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d102      	bne.n	801493e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014938:	f06f 030f 	mvn.w	r3, #15
 801493c:	e101      	b.n	8014b42 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801493e:	68fa      	ldr	r2, [r7, #12]
 8014940:	2101      	movs	r1, #1
 8014942:	68b8      	ldr	r0, [r7, #8]
 8014944:	f7ff fb60 	bl	8014008 <etharp_find_entry>
 8014948:	4603      	mov	r3, r0
 801494a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801494c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014950:	2b00      	cmp	r3, #0
 8014952:	da02      	bge.n	801495a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014954:	8a7b      	ldrh	r3, [r7, #18]
 8014956:	b25b      	sxtb	r3, r3
 8014958:	e0f3      	b.n	8014b42 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801495a:	8a7b      	ldrh	r3, [r7, #18]
 801495c:	2b7e      	cmp	r3, #126	@ 0x7e
 801495e:	d906      	bls.n	801496e <etharp_query+0x7e>
 8014960:	4b7a      	ldr	r3, [pc, #488]	@ (8014b4c <etharp_query+0x25c>)
 8014962:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8014966:	497a      	ldr	r1, [pc, #488]	@ (8014b50 <etharp_query+0x260>)
 8014968:	487a      	ldr	r0, [pc, #488]	@ (8014b54 <etharp_query+0x264>)
 801496a:	f001 ffef 	bl	801694c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801496e:	8a7b      	ldrh	r3, [r7, #18]
 8014970:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014972:	7c7a      	ldrb	r2, [r7, #17]
 8014974:	4978      	ldr	r1, [pc, #480]	@ (8014b58 <etharp_query+0x268>)
 8014976:	4613      	mov	r3, r2
 8014978:	005b      	lsls	r3, r3, #1
 801497a:	4413      	add	r3, r2
 801497c:	00db      	lsls	r3, r3, #3
 801497e:	440b      	add	r3, r1
 8014980:	3314      	adds	r3, #20
 8014982:	781b      	ldrb	r3, [r3, #0]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d115      	bne.n	80149b4 <etharp_query+0xc4>
    is_new_entry = 1;
 8014988:	2301      	movs	r3, #1
 801498a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801498c:	7c7a      	ldrb	r2, [r7, #17]
 801498e:	4972      	ldr	r1, [pc, #456]	@ (8014b58 <etharp_query+0x268>)
 8014990:	4613      	mov	r3, r2
 8014992:	005b      	lsls	r3, r3, #1
 8014994:	4413      	add	r3, r2
 8014996:	00db      	lsls	r3, r3, #3
 8014998:	440b      	add	r3, r1
 801499a:	3314      	adds	r3, #20
 801499c:	2201      	movs	r2, #1
 801499e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80149a0:	7c7a      	ldrb	r2, [r7, #17]
 80149a2:	496d      	ldr	r1, [pc, #436]	@ (8014b58 <etharp_query+0x268>)
 80149a4:	4613      	mov	r3, r2
 80149a6:	005b      	lsls	r3, r3, #1
 80149a8:	4413      	add	r3, r2
 80149aa:	00db      	lsls	r3, r3, #3
 80149ac:	440b      	add	r3, r1
 80149ae:	3308      	adds	r3, #8
 80149b0:	68fa      	ldr	r2, [r7, #12]
 80149b2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80149b4:	7c7a      	ldrb	r2, [r7, #17]
 80149b6:	4968      	ldr	r1, [pc, #416]	@ (8014b58 <etharp_query+0x268>)
 80149b8:	4613      	mov	r3, r2
 80149ba:	005b      	lsls	r3, r3, #1
 80149bc:	4413      	add	r3, r2
 80149be:	00db      	lsls	r3, r3, #3
 80149c0:	440b      	add	r3, r1
 80149c2:	3314      	adds	r3, #20
 80149c4:	781b      	ldrb	r3, [r3, #0]
 80149c6:	2b01      	cmp	r3, #1
 80149c8:	d011      	beq.n	80149ee <etharp_query+0xfe>
 80149ca:	7c7a      	ldrb	r2, [r7, #17]
 80149cc:	4962      	ldr	r1, [pc, #392]	@ (8014b58 <etharp_query+0x268>)
 80149ce:	4613      	mov	r3, r2
 80149d0:	005b      	lsls	r3, r3, #1
 80149d2:	4413      	add	r3, r2
 80149d4:	00db      	lsls	r3, r3, #3
 80149d6:	440b      	add	r3, r1
 80149d8:	3314      	adds	r3, #20
 80149da:	781b      	ldrb	r3, [r3, #0]
 80149dc:	2b01      	cmp	r3, #1
 80149de:	d806      	bhi.n	80149ee <etharp_query+0xfe>
 80149e0:	4b5a      	ldr	r3, [pc, #360]	@ (8014b4c <etharp_query+0x25c>)
 80149e2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80149e6:	495d      	ldr	r1, [pc, #372]	@ (8014b5c <etharp_query+0x26c>)
 80149e8:	485a      	ldr	r0, [pc, #360]	@ (8014b54 <etharp_query+0x264>)
 80149ea:	f001 ffaf 	bl	801694c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80149ee:	6a3b      	ldr	r3, [r7, #32]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d102      	bne.n	80149fa <etharp_query+0x10a>
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d10c      	bne.n	8014a14 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80149fa:	68b9      	ldr	r1, [r7, #8]
 80149fc:	68f8      	ldr	r0, [r7, #12]
 80149fe:	f000 f963 	bl	8014cc8 <etharp_request>
 8014a02:	4603      	mov	r3, r0
 8014a04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d102      	bne.n	8014a14 <etharp_query+0x124>
      return result;
 8014a0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014a12:	e096      	b.n	8014b42 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d106      	bne.n	8014a28 <etharp_query+0x138>
 8014a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8014b4c <etharp_query+0x25c>)
 8014a1c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8014a20:	494f      	ldr	r1, [pc, #316]	@ (8014b60 <etharp_query+0x270>)
 8014a22:	484c      	ldr	r0, [pc, #304]	@ (8014b54 <etharp_query+0x264>)
 8014a24:	f001 ff92 	bl	801694c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014a28:	7c7a      	ldrb	r2, [r7, #17]
 8014a2a:	494b      	ldr	r1, [pc, #300]	@ (8014b58 <etharp_query+0x268>)
 8014a2c:	4613      	mov	r3, r2
 8014a2e:	005b      	lsls	r3, r3, #1
 8014a30:	4413      	add	r3, r2
 8014a32:	00db      	lsls	r3, r3, #3
 8014a34:	440b      	add	r3, r1
 8014a36:	3314      	adds	r3, #20
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	2b01      	cmp	r3, #1
 8014a3c:	d917      	bls.n	8014a6e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014a3e:	4a49      	ldr	r2, [pc, #292]	@ (8014b64 <etharp_query+0x274>)
 8014a40:	7c7b      	ldrb	r3, [r7, #17]
 8014a42:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014a44:	7c7a      	ldrb	r2, [r7, #17]
 8014a46:	4613      	mov	r3, r2
 8014a48:	005b      	lsls	r3, r3, #1
 8014a4a:	4413      	add	r3, r2
 8014a4c:	00db      	lsls	r3, r3, #3
 8014a4e:	3308      	adds	r3, #8
 8014a50:	4a41      	ldr	r2, [pc, #260]	@ (8014b58 <etharp_query+0x268>)
 8014a52:	4413      	add	r3, r2
 8014a54:	3304      	adds	r3, #4
 8014a56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014a5a:	9200      	str	r2, [sp, #0]
 8014a5c:	697a      	ldr	r2, [r7, #20]
 8014a5e:	6879      	ldr	r1, [r7, #4]
 8014a60:	68f8      	ldr	r0, [r7, #12]
 8014a62:	f001 fc75 	bl	8016350 <ethernet_output>
 8014a66:	4603      	mov	r3, r0
 8014a68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014a6c:	e067      	b.n	8014b3e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014a6e:	7c7a      	ldrb	r2, [r7, #17]
 8014a70:	4939      	ldr	r1, [pc, #228]	@ (8014b58 <etharp_query+0x268>)
 8014a72:	4613      	mov	r3, r2
 8014a74:	005b      	lsls	r3, r3, #1
 8014a76:	4413      	add	r3, r2
 8014a78:	00db      	lsls	r3, r3, #3
 8014a7a:	440b      	add	r3, r1
 8014a7c:	3314      	adds	r3, #20
 8014a7e:	781b      	ldrb	r3, [r3, #0]
 8014a80:	2b01      	cmp	r3, #1
 8014a82:	d15c      	bne.n	8014b3e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014a84:	2300      	movs	r3, #0
 8014a86:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014a8c:	e01c      	b.n	8014ac8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014a8e:	69fb      	ldr	r3, [r7, #28]
 8014a90:	895a      	ldrh	r2, [r3, #10]
 8014a92:	69fb      	ldr	r3, [r7, #28]
 8014a94:	891b      	ldrh	r3, [r3, #8]
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d10a      	bne.n	8014ab0 <etharp_query+0x1c0>
 8014a9a:	69fb      	ldr	r3, [r7, #28]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d006      	beq.n	8014ab0 <etharp_query+0x1c0>
 8014aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8014b4c <etharp_query+0x25c>)
 8014aa4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014aa8:	492f      	ldr	r1, [pc, #188]	@ (8014b68 <etharp_query+0x278>)
 8014aaa:	482a      	ldr	r0, [pc, #168]	@ (8014b54 <etharp_query+0x264>)
 8014aac:	f001 ff4e 	bl	801694c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014ab0:	69fb      	ldr	r3, [r7, #28]
 8014ab2:	7b1b      	ldrb	r3, [r3, #12]
 8014ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d002      	beq.n	8014ac2 <etharp_query+0x1d2>
        copy_needed = 1;
 8014abc:	2301      	movs	r3, #1
 8014abe:	61bb      	str	r3, [r7, #24]
        break;
 8014ac0:	e005      	b.n	8014ace <etharp_query+0x1de>
      }
      p = p->next;
 8014ac2:	69fb      	ldr	r3, [r7, #28]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014ac8:	69fb      	ldr	r3, [r7, #28]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d1df      	bne.n	8014a8e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014ace:	69bb      	ldr	r3, [r7, #24]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d007      	beq.n	8014ae4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014ad4:	687a      	ldr	r2, [r7, #4]
 8014ad6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014ada:	200e      	movs	r0, #14
 8014adc:	f7f8 fc8c 	bl	800d3f8 <pbuf_clone>
 8014ae0:	61f8      	str	r0, [r7, #28]
 8014ae2:	e004      	b.n	8014aee <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014ae8:	69f8      	ldr	r0, [r7, #28]
 8014aea:	f7f8 fac3 	bl	800d074 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014aee:	69fb      	ldr	r3, [r7, #28]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d021      	beq.n	8014b38 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014af4:	7c7a      	ldrb	r2, [r7, #17]
 8014af6:	4918      	ldr	r1, [pc, #96]	@ (8014b58 <etharp_query+0x268>)
 8014af8:	4613      	mov	r3, r2
 8014afa:	005b      	lsls	r3, r3, #1
 8014afc:	4413      	add	r3, r2
 8014afe:	00db      	lsls	r3, r3, #3
 8014b00:	440b      	add	r3, r1
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d00a      	beq.n	8014b1e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014b08:	7c7a      	ldrb	r2, [r7, #17]
 8014b0a:	4913      	ldr	r1, [pc, #76]	@ (8014b58 <etharp_query+0x268>)
 8014b0c:	4613      	mov	r3, r2
 8014b0e:	005b      	lsls	r3, r3, #1
 8014b10:	4413      	add	r3, r2
 8014b12:	00db      	lsls	r3, r3, #3
 8014b14:	440b      	add	r3, r1
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f7f8 fa05 	bl	800cf28 <pbuf_free>
      }
      arp_table[i].q = p;
 8014b1e:	7c7a      	ldrb	r2, [r7, #17]
 8014b20:	490d      	ldr	r1, [pc, #52]	@ (8014b58 <etharp_query+0x268>)
 8014b22:	4613      	mov	r3, r2
 8014b24:	005b      	lsls	r3, r3, #1
 8014b26:	4413      	add	r3, r2
 8014b28:	00db      	lsls	r3, r3, #3
 8014b2a:	440b      	add	r3, r1
 8014b2c:	69fa      	ldr	r2, [r7, #28]
 8014b2e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014b30:	2300      	movs	r3, #0
 8014b32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014b36:	e002      	b.n	8014b3e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014b38:	23ff      	movs	r3, #255	@ 0xff
 8014b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8014b3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8014b42:	4618      	mov	r0, r3
 8014b44:	3728      	adds	r7, #40	@ 0x28
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bd80      	pop	{r7, pc}
 8014b4a:	bf00      	nop
 8014b4c:	0801a700 	.word	0x0801a700
 8014b50:	0801a8ac 	.word	0x0801a8ac
 8014b54:	0801a778 	.word	0x0801a778
 8014b58:	2000f310 	.word	0x2000f310
 8014b5c:	0801a8bc 	.word	0x0801a8bc
 8014b60:	0801a8a0 	.word	0x0801a8a0
 8014b64:	2000f400 	.word	0x2000f400
 8014b68:	0801a8e4 	.word	0x0801a8e4

08014b6c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b08a      	sub	sp, #40	@ 0x28
 8014b70:	af02      	add	r7, sp, #8
 8014b72:	60f8      	str	r0, [r7, #12]
 8014b74:	60b9      	str	r1, [r7, #8]
 8014b76:	607a      	str	r2, [r7, #4]
 8014b78:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d106      	bne.n	8014b92 <etharp_raw+0x26>
 8014b84:	4b3a      	ldr	r3, [pc, #232]	@ (8014c70 <etharp_raw+0x104>)
 8014b86:	f240 4257 	movw	r2, #1111	@ 0x457
 8014b8a:	493a      	ldr	r1, [pc, #232]	@ (8014c74 <etharp_raw+0x108>)
 8014b8c:	483a      	ldr	r0, [pc, #232]	@ (8014c78 <etharp_raw+0x10c>)
 8014b8e:	f001 fedd 	bl	801694c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014b92:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014b96:	211c      	movs	r1, #28
 8014b98:	200e      	movs	r0, #14
 8014b9a:	f7f7 fee1 	bl	800c960 <pbuf_alloc>
 8014b9e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014ba0:	69bb      	ldr	r3, [r7, #24]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d102      	bne.n	8014bac <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8014baa:	e05d      	b.n	8014c68 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014bac:	69bb      	ldr	r3, [r7, #24]
 8014bae:	895b      	ldrh	r3, [r3, #10]
 8014bb0:	2b1b      	cmp	r3, #27
 8014bb2:	d806      	bhi.n	8014bc2 <etharp_raw+0x56>
 8014bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8014c70 <etharp_raw+0x104>)
 8014bb6:	f240 4262 	movw	r2, #1122	@ 0x462
 8014bba:	4930      	ldr	r1, [pc, #192]	@ (8014c7c <etharp_raw+0x110>)
 8014bbc:	482e      	ldr	r0, [pc, #184]	@ (8014c78 <etharp_raw+0x10c>)
 8014bbe:	f001 fec5 	bl	801694c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014bc2:	69bb      	ldr	r3, [r7, #24]
 8014bc4:	685b      	ldr	r3, [r3, #4]
 8014bc6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014bc8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7f6 fdba 	bl	800b744 <lwip_htons>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	461a      	mov	r2, r3
 8014bd4:	697b      	ldr	r3, [r7, #20]
 8014bd6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014bde:	2b06      	cmp	r3, #6
 8014be0:	d006      	beq.n	8014bf0 <etharp_raw+0x84>
 8014be2:	4b23      	ldr	r3, [pc, #140]	@ (8014c70 <etharp_raw+0x104>)
 8014be4:	f240 4269 	movw	r2, #1129	@ 0x469
 8014be8:	4925      	ldr	r1, [pc, #148]	@ (8014c80 <etharp_raw+0x114>)
 8014bea:	4823      	ldr	r0, [pc, #140]	@ (8014c78 <etharp_raw+0x10c>)
 8014bec:	f001 feae 	bl	801694c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014bf0:	697b      	ldr	r3, [r7, #20]
 8014bf2:	3308      	adds	r3, #8
 8014bf4:	2206      	movs	r2, #6
 8014bf6:	6839      	ldr	r1, [r7, #0]
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	f001 ffd8 	bl	8016bae <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014bfe:	697b      	ldr	r3, [r7, #20]
 8014c00:	3312      	adds	r3, #18
 8014c02:	2206      	movs	r2, #6
 8014c04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014c06:	4618      	mov	r0, r3
 8014c08:	f001 ffd1 	bl	8016bae <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014c0c:	697b      	ldr	r3, [r7, #20]
 8014c0e:	330e      	adds	r3, #14
 8014c10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c12:	6812      	ldr	r2, [r2, #0]
 8014c14:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014c16:	697b      	ldr	r3, [r7, #20]
 8014c18:	3318      	adds	r3, #24
 8014c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014c1c:	6812      	ldr	r2, [r2, #0]
 8014c1e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014c20:	697b      	ldr	r3, [r7, #20]
 8014c22:	2200      	movs	r2, #0
 8014c24:	701a      	strb	r2, [r3, #0]
 8014c26:	2200      	movs	r2, #0
 8014c28:	f042 0201 	orr.w	r2, r2, #1
 8014c2c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014c2e:	697b      	ldr	r3, [r7, #20]
 8014c30:	2200      	movs	r2, #0
 8014c32:	f042 0208 	orr.w	r2, r2, #8
 8014c36:	709a      	strb	r2, [r3, #2]
 8014c38:	2200      	movs	r2, #0
 8014c3a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014c3c:	697b      	ldr	r3, [r7, #20]
 8014c3e:	2206      	movs	r2, #6
 8014c40:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014c42:	697b      	ldr	r3, [r7, #20]
 8014c44:	2204      	movs	r2, #4
 8014c46:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014c48:	f640 0306 	movw	r3, #2054	@ 0x806
 8014c4c:	9300      	str	r3, [sp, #0]
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	68ba      	ldr	r2, [r7, #8]
 8014c52:	69b9      	ldr	r1, [r7, #24]
 8014c54:	68f8      	ldr	r0, [r7, #12]
 8014c56:	f001 fb7b 	bl	8016350 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014c5a:	69b8      	ldr	r0, [r7, #24]
 8014c5c:	f7f8 f964 	bl	800cf28 <pbuf_free>
  p = NULL;
 8014c60:	2300      	movs	r3, #0
 8014c62:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014c64:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014c68:	4618      	mov	r0, r3
 8014c6a:	3720      	adds	r7, #32
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	bd80      	pop	{r7, pc}
 8014c70:	0801a700 	.word	0x0801a700
 8014c74:	0801a850 	.word	0x0801a850
 8014c78:	0801a778 	.word	0x0801a778
 8014c7c:	0801a900 	.word	0x0801a900
 8014c80:	0801a934 	.word	0x0801a934

08014c84 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b088      	sub	sp, #32
 8014c88:	af04      	add	r7, sp, #16
 8014c8a:	60f8      	str	r0, [r7, #12]
 8014c8c:	60b9      	str	r1, [r7, #8]
 8014c8e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014ca0:	2201      	movs	r2, #1
 8014ca2:	9203      	str	r2, [sp, #12]
 8014ca4:	68ba      	ldr	r2, [r7, #8]
 8014ca6:	9202      	str	r2, [sp, #8]
 8014ca8:	4a06      	ldr	r2, [pc, #24]	@ (8014cc4 <etharp_request_dst+0x40>)
 8014caa:	9201      	str	r2, [sp, #4]
 8014cac:	9300      	str	r3, [sp, #0]
 8014cae:	4603      	mov	r3, r0
 8014cb0:	687a      	ldr	r2, [r7, #4]
 8014cb2:	68f8      	ldr	r0, [r7, #12]
 8014cb4:	f7ff ff5a 	bl	8014b6c <etharp_raw>
 8014cb8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014cba:	4618      	mov	r0, r3
 8014cbc:	3710      	adds	r7, #16
 8014cbe:	46bd      	mov	sp, r7
 8014cc0:	bd80      	pop	{r7, pc}
 8014cc2:	bf00      	nop
 8014cc4:	0801af2c 	.word	0x0801af2c

08014cc8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b082      	sub	sp, #8
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
 8014cd0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014cd2:	4a05      	ldr	r2, [pc, #20]	@ (8014ce8 <etharp_request+0x20>)
 8014cd4:	6839      	ldr	r1, [r7, #0]
 8014cd6:	6878      	ldr	r0, [r7, #4]
 8014cd8:	f7ff ffd4 	bl	8014c84 <etharp_request_dst>
 8014cdc:	4603      	mov	r3, r0
}
 8014cde:	4618      	mov	r0, r3
 8014ce0:	3708      	adds	r7, #8
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd80      	pop	{r7, pc}
 8014ce6:	bf00      	nop
 8014ce8:	0801af24 	.word	0x0801af24

08014cec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b08e      	sub	sp, #56	@ 0x38
 8014cf0:	af04      	add	r7, sp, #16
 8014cf2:	6078      	str	r0, [r7, #4]
 8014cf4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014cf6:	4b79      	ldr	r3, [pc, #484]	@ (8014edc <icmp_input+0x1f0>)
 8014cf8:	689b      	ldr	r3, [r3, #8]
 8014cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cfe:	781b      	ldrb	r3, [r3, #0]
 8014d00:	f003 030f 	and.w	r3, r3, #15
 8014d04:	b2db      	uxtb	r3, r3
 8014d06:	009b      	lsls	r3, r3, #2
 8014d08:	b2db      	uxtb	r3, r3
 8014d0a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8014d0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d0e:	2b13      	cmp	r3, #19
 8014d10:	f240 80cd 	bls.w	8014eae <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	895b      	ldrh	r3, [r3, #10]
 8014d18:	2b03      	cmp	r3, #3
 8014d1a:	f240 80ca 	bls.w	8014eb2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	685b      	ldr	r3, [r3, #4]
 8014d22:	781b      	ldrb	r3, [r3, #0]
 8014d24:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014d28:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	f000 80b7 	beq.w	8014ea0 <icmp_input+0x1b4>
 8014d32:	2b08      	cmp	r3, #8
 8014d34:	f040 80b7 	bne.w	8014ea6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014d38:	4b69      	ldr	r3, [pc, #420]	@ (8014ee0 <icmp_input+0x1f4>)
 8014d3a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014d3c:	4b67      	ldr	r3, [pc, #412]	@ (8014edc <icmp_input+0x1f0>)
 8014d3e:	695b      	ldr	r3, [r3, #20]
 8014d40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014d44:	2be0      	cmp	r3, #224	@ 0xe0
 8014d46:	f000 80bb 	beq.w	8014ec0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014d4a:	4b64      	ldr	r3, [pc, #400]	@ (8014edc <icmp_input+0x1f0>)
 8014d4c:	695b      	ldr	r3, [r3, #20]
 8014d4e:	4a63      	ldr	r2, [pc, #396]	@ (8014edc <icmp_input+0x1f0>)
 8014d50:	6812      	ldr	r2, [r2, #0]
 8014d52:	4611      	mov	r1, r2
 8014d54:	4618      	mov	r0, r3
 8014d56:	f000 fbed 	bl	8015534 <ip4_addr_isbroadcast_u32>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	f040 80b1 	bne.w	8014ec4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	891b      	ldrh	r3, [r3, #8]
 8014d66:	2b07      	cmp	r3, #7
 8014d68:	f240 80a5 	bls.w	8014eb6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014d6c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d6e:	330e      	adds	r3, #14
 8014d70:	4619      	mov	r1, r3
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f7f8 f842 	bl	800cdfc <pbuf_add_header>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d04b      	beq.n	8014e16 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	891a      	ldrh	r2, [r3, #8]
 8014d82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d84:	4413      	add	r3, r2
 8014d86:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	891b      	ldrh	r3, [r3, #8]
 8014d8c:	8b7a      	ldrh	r2, [r7, #26]
 8014d8e:	429a      	cmp	r2, r3
 8014d90:	f0c0 809a 	bcc.w	8014ec8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014d94:	8b7b      	ldrh	r3, [r7, #26]
 8014d96:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014d9a:	4619      	mov	r1, r3
 8014d9c:	200e      	movs	r0, #14
 8014d9e:	f7f7 fddf 	bl	800c960 <pbuf_alloc>
 8014da2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014da4:	697b      	ldr	r3, [r7, #20]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	f000 8090 	beq.w	8014ecc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014dac:	697b      	ldr	r3, [r7, #20]
 8014dae:	895b      	ldrh	r3, [r3, #10]
 8014db0:	461a      	mov	r2, r3
 8014db2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014db4:	3308      	adds	r3, #8
 8014db6:	429a      	cmp	r2, r3
 8014db8:	d203      	bcs.n	8014dc2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014dba:	6978      	ldr	r0, [r7, #20]
 8014dbc:	f7f8 f8b4 	bl	800cf28 <pbuf_free>
          goto icmperr;
 8014dc0:	e085      	b.n	8014ece <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014dc2:	697b      	ldr	r3, [r7, #20]
 8014dc4:	685b      	ldr	r3, [r3, #4]
 8014dc6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014dc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f001 feef 	bl	8016bae <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014dd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014dd2:	4619      	mov	r1, r3
 8014dd4:	6978      	ldr	r0, [r7, #20]
 8014dd6:	f7f8 f821 	bl	800ce1c <pbuf_remove_header>
 8014dda:	4603      	mov	r3, r0
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d009      	beq.n	8014df4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014de0:	4b40      	ldr	r3, [pc, #256]	@ (8014ee4 <icmp_input+0x1f8>)
 8014de2:	22b6      	movs	r2, #182	@ 0xb6
 8014de4:	4940      	ldr	r1, [pc, #256]	@ (8014ee8 <icmp_input+0x1fc>)
 8014de6:	4841      	ldr	r0, [pc, #260]	@ (8014eec <icmp_input+0x200>)
 8014de8:	f001 fdb0 	bl	801694c <iprintf>
          pbuf_free(r);
 8014dec:	6978      	ldr	r0, [r7, #20]
 8014dee:	f7f8 f89b 	bl	800cf28 <pbuf_free>
          goto icmperr;
 8014df2:	e06c      	b.n	8014ece <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014df4:	6879      	ldr	r1, [r7, #4]
 8014df6:	6978      	ldr	r0, [r7, #20]
 8014df8:	f7f8 f9ba 	bl	800d170 <pbuf_copy>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d003      	beq.n	8014e0a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014e02:	6978      	ldr	r0, [r7, #20]
 8014e04:	f7f8 f890 	bl	800cf28 <pbuf_free>
          goto icmperr;
 8014e08:	e061      	b.n	8014ece <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f7f8 f88c 	bl	800cf28 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	607b      	str	r3, [r7, #4]
 8014e14:	e00f      	b.n	8014e36 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014e16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e18:	330e      	adds	r3, #14
 8014e1a:	4619      	mov	r1, r3
 8014e1c:	6878      	ldr	r0, [r7, #4]
 8014e1e:	f7f7 fffd 	bl	800ce1c <pbuf_remove_header>
 8014e22:	4603      	mov	r3, r0
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d006      	beq.n	8014e36 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014e28:	4b2e      	ldr	r3, [pc, #184]	@ (8014ee4 <icmp_input+0x1f8>)
 8014e2a:	22c7      	movs	r2, #199	@ 0xc7
 8014e2c:	4930      	ldr	r1, [pc, #192]	@ (8014ef0 <icmp_input+0x204>)
 8014e2e:	482f      	ldr	r0, [pc, #188]	@ (8014eec <icmp_input+0x200>)
 8014e30:	f001 fd8c 	bl	801694c <iprintf>
          goto icmperr;
 8014e34:	e04b      	b.n	8014ece <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	685b      	ldr	r3, [r3, #4]
 8014e3a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014e3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e3e:	4619      	mov	r1, r3
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f7f7 ffdb 	bl	800cdfc <pbuf_add_header>
 8014e46:	4603      	mov	r3, r0
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d12b      	bne.n	8014ea4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	685b      	ldr	r3, [r3, #4]
 8014e50:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014e52:	69fb      	ldr	r3, [r7, #28]
 8014e54:	681a      	ldr	r2, [r3, #0]
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014e5a:	4b20      	ldr	r3, [pc, #128]	@ (8014edc <icmp_input+0x1f0>)
 8014e5c:	691a      	ldr	r2, [r3, #16]
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014e62:	693b      	ldr	r3, [r7, #16]
 8014e64:	2200      	movs	r2, #0
 8014e66:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014e68:	693b      	ldr	r3, [r7, #16]
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	709a      	strb	r2, [r3, #2]
 8014e6e:	2200      	movs	r2, #0
 8014e70:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	22ff      	movs	r2, #255	@ 0xff
 8014e76:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	729a      	strb	r2, [r3, #10]
 8014e7e:	2200      	movs	r2, #0
 8014e80:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	9302      	str	r3, [sp, #8]
 8014e86:	2301      	movs	r3, #1
 8014e88:	9301      	str	r3, [sp, #4]
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	9300      	str	r3, [sp, #0]
 8014e8e:	23ff      	movs	r3, #255	@ 0xff
 8014e90:	2200      	movs	r2, #0
 8014e92:	69f9      	ldr	r1, [r7, #28]
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f000 fa75 	bl	8015384 <ip4_output_if>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014e9e:	e001      	b.n	8014ea4 <icmp_input+0x1b8>
      break;
 8014ea0:	bf00      	nop
 8014ea2:	e000      	b.n	8014ea6 <icmp_input+0x1ba>
      break;
 8014ea4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014ea6:	6878      	ldr	r0, [r7, #4]
 8014ea8:	f7f8 f83e 	bl	800cf28 <pbuf_free>
  return;
 8014eac:	e013      	b.n	8014ed6 <icmp_input+0x1ea>
    goto lenerr;
 8014eae:	bf00      	nop
 8014eb0:	e002      	b.n	8014eb8 <icmp_input+0x1cc>
    goto lenerr;
 8014eb2:	bf00      	nop
 8014eb4:	e000      	b.n	8014eb8 <icmp_input+0x1cc>
        goto lenerr;
 8014eb6:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014eb8:	6878      	ldr	r0, [r7, #4]
 8014eba:	f7f8 f835 	bl	800cf28 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014ebe:	e00a      	b.n	8014ed6 <icmp_input+0x1ea>
        goto icmperr;
 8014ec0:	bf00      	nop
 8014ec2:	e004      	b.n	8014ece <icmp_input+0x1e2>
        goto icmperr;
 8014ec4:	bf00      	nop
 8014ec6:	e002      	b.n	8014ece <icmp_input+0x1e2>
          goto icmperr;
 8014ec8:	bf00      	nop
 8014eca:	e000      	b.n	8014ece <icmp_input+0x1e2>
          goto icmperr;
 8014ecc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014ece:	6878      	ldr	r0, [r7, #4]
 8014ed0:	f7f8 f82a 	bl	800cf28 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014ed4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014ed6:	3728      	adds	r7, #40	@ 0x28
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	bd80      	pop	{r7, pc}
 8014edc:	2000999c 	.word	0x2000999c
 8014ee0:	200099b0 	.word	0x200099b0
 8014ee4:	0801a978 	.word	0x0801a978
 8014ee8:	0801a9b0 	.word	0x0801a9b0
 8014eec:	0801a9e8 	.word	0x0801a9e8
 8014ef0:	0801aa10 	.word	0x0801aa10

08014ef4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	460b      	mov	r3, r1
 8014efe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014f00:	78fb      	ldrb	r3, [r7, #3]
 8014f02:	461a      	mov	r2, r3
 8014f04:	2103      	movs	r1, #3
 8014f06:	6878      	ldr	r0, [r7, #4]
 8014f08:	f000 f814 	bl	8014f34 <icmp_send_response>
}
 8014f0c:	bf00      	nop
 8014f0e:	3708      	adds	r7, #8
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bd80      	pop	{r7, pc}

08014f14 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014f14:	b580      	push	{r7, lr}
 8014f16:	b082      	sub	sp, #8
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]
 8014f1c:	460b      	mov	r3, r1
 8014f1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014f20:	78fb      	ldrb	r3, [r7, #3]
 8014f22:	461a      	mov	r2, r3
 8014f24:	210b      	movs	r1, #11
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f000 f804 	bl	8014f34 <icmp_send_response>
}
 8014f2c:	bf00      	nop
 8014f2e:	3708      	adds	r7, #8
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd80      	pop	{r7, pc}

08014f34 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b08c      	sub	sp, #48	@ 0x30
 8014f38:	af04      	add	r7, sp, #16
 8014f3a:	6078      	str	r0, [r7, #4]
 8014f3c:	460b      	mov	r3, r1
 8014f3e:	70fb      	strb	r3, [r7, #3]
 8014f40:	4613      	mov	r3, r2
 8014f42:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014f44:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014f48:	2124      	movs	r1, #36	@ 0x24
 8014f4a:	2022      	movs	r0, #34	@ 0x22
 8014f4c:	f7f7 fd08 	bl	800c960 <pbuf_alloc>
 8014f50:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014f52:	69fb      	ldr	r3, [r7, #28]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d04c      	beq.n	8014ff2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014f58:	69fb      	ldr	r3, [r7, #28]
 8014f5a:	895b      	ldrh	r3, [r3, #10]
 8014f5c:	2b23      	cmp	r3, #35	@ 0x23
 8014f5e:	d806      	bhi.n	8014f6e <icmp_send_response+0x3a>
 8014f60:	4b26      	ldr	r3, [pc, #152]	@ (8014ffc <icmp_send_response+0xc8>)
 8014f62:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8014f66:	4926      	ldr	r1, [pc, #152]	@ (8015000 <icmp_send_response+0xcc>)
 8014f68:	4826      	ldr	r0, [pc, #152]	@ (8015004 <icmp_send_response+0xd0>)
 8014f6a:	f001 fcef 	bl	801694c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	685b      	ldr	r3, [r3, #4]
 8014f72:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014f74:	69fb      	ldr	r3, [r7, #28]
 8014f76:	685b      	ldr	r3, [r3, #4]
 8014f78:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014f7a:	697b      	ldr	r3, [r7, #20]
 8014f7c:	78fa      	ldrb	r2, [r7, #3]
 8014f7e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	78ba      	ldrb	r2, [r7, #2]
 8014f84:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	2200      	movs	r2, #0
 8014f8a:	711a      	strb	r2, [r3, #4]
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014f90:	697b      	ldr	r3, [r7, #20]
 8014f92:	2200      	movs	r2, #0
 8014f94:	719a      	strb	r2, [r3, #6]
 8014f96:	2200      	movs	r2, #0
 8014f98:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014f9a:	69fb      	ldr	r3, [r7, #28]
 8014f9c:	685b      	ldr	r3, [r3, #4]
 8014f9e:	f103 0008 	add.w	r0, r3, #8
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	685b      	ldr	r3, [r3, #4]
 8014fa6:	221c      	movs	r2, #28
 8014fa8:	4619      	mov	r1, r3
 8014faa:	f001 fe00 	bl	8016bae <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014fae:	69bb      	ldr	r3, [r7, #24]
 8014fb0:	68db      	ldr	r3, [r3, #12]
 8014fb2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014fb4:	f107 030c 	add.w	r3, r7, #12
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f000 f825 	bl	8015008 <ip4_route>
 8014fbe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014fc0:	693b      	ldr	r3, [r7, #16]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d011      	beq.n	8014fea <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014fc6:	697b      	ldr	r3, [r7, #20]
 8014fc8:	2200      	movs	r2, #0
 8014fca:	709a      	strb	r2, [r3, #2]
 8014fcc:	2200      	movs	r2, #0
 8014fce:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014fd0:	f107 020c 	add.w	r2, r7, #12
 8014fd4:	693b      	ldr	r3, [r7, #16]
 8014fd6:	9302      	str	r3, [sp, #8]
 8014fd8:	2301      	movs	r3, #1
 8014fda:	9301      	str	r3, [sp, #4]
 8014fdc:	2300      	movs	r3, #0
 8014fde:	9300      	str	r3, [sp, #0]
 8014fe0:	23ff      	movs	r3, #255	@ 0xff
 8014fe2:	2100      	movs	r1, #0
 8014fe4:	69f8      	ldr	r0, [r7, #28]
 8014fe6:	f000 f9cd 	bl	8015384 <ip4_output_if>
  }
  pbuf_free(q);
 8014fea:	69f8      	ldr	r0, [r7, #28]
 8014fec:	f7f7 ff9c 	bl	800cf28 <pbuf_free>
 8014ff0:	e000      	b.n	8014ff4 <icmp_send_response+0xc0>
    return;
 8014ff2:	bf00      	nop
}
 8014ff4:	3720      	adds	r7, #32
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}
 8014ffa:	bf00      	nop
 8014ffc:	0801a978 	.word	0x0801a978
 8015000:	0801aa44 	.word	0x0801aa44
 8015004:	0801a9e8 	.word	0x0801a9e8

08015008 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015008:	b480      	push	{r7}
 801500a:	b085      	sub	sp, #20
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015010:	4b33      	ldr	r3, [pc, #204]	@ (80150e0 <ip4_route+0xd8>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	60fb      	str	r3, [r7, #12]
 8015016:	e036      	b.n	8015086 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801501e:	f003 0301 	and.w	r3, r3, #1
 8015022:	b2db      	uxtb	r3, r3
 8015024:	2b00      	cmp	r3, #0
 8015026:	d02b      	beq.n	8015080 <ip4_route+0x78>
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801502e:	089b      	lsrs	r3, r3, #2
 8015030:	f003 0301 	and.w	r3, r3, #1
 8015034:	b2db      	uxtb	r3, r3
 8015036:	2b00      	cmp	r3, #0
 8015038:	d022      	beq.n	8015080 <ip4_route+0x78>
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	3304      	adds	r3, #4
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d01d      	beq.n	8015080 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	681a      	ldr	r2, [r3, #0]
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	3304      	adds	r3, #4
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	405a      	eors	r2, r3
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	3308      	adds	r3, #8
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	4013      	ands	r3, r2
 8015058:	2b00      	cmp	r3, #0
 801505a:	d101      	bne.n	8015060 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	e038      	b.n	80150d2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015066:	f003 0302 	and.w	r3, r3, #2
 801506a:	2b00      	cmp	r3, #0
 801506c:	d108      	bne.n	8015080 <ip4_route+0x78>
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	681a      	ldr	r2, [r3, #0]
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	330c      	adds	r3, #12
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	429a      	cmp	r2, r3
 801507a:	d101      	bne.n	8015080 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	e028      	b.n	80150d2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	60fb      	str	r3, [r7, #12]
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d1c5      	bne.n	8015018 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801508c:	4b15      	ldr	r3, [pc, #84]	@ (80150e4 <ip4_route+0xdc>)
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d01a      	beq.n	80150ca <ip4_route+0xc2>
 8015094:	4b13      	ldr	r3, [pc, #76]	@ (80150e4 <ip4_route+0xdc>)
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801509c:	f003 0301 	and.w	r3, r3, #1
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d012      	beq.n	80150ca <ip4_route+0xc2>
 80150a4:	4b0f      	ldr	r3, [pc, #60]	@ (80150e4 <ip4_route+0xdc>)
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80150ac:	f003 0304 	and.w	r3, r3, #4
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d00a      	beq.n	80150ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80150b4:	4b0b      	ldr	r3, [pc, #44]	@ (80150e4 <ip4_route+0xdc>)
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	3304      	adds	r3, #4
 80150ba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d004      	beq.n	80150ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	b2db      	uxtb	r3, r3
 80150c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80150c8:	d101      	bne.n	80150ce <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80150ca:	2300      	movs	r3, #0
 80150cc:	e001      	b.n	80150d2 <ip4_route+0xca>
  }

  return netif_default;
 80150ce:	4b05      	ldr	r3, [pc, #20]	@ (80150e4 <ip4_route+0xdc>)
 80150d0:	681b      	ldr	r3, [r3, #0]
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	3714      	adds	r7, #20
 80150d6:	46bd      	mov	sp, r7
 80150d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150dc:	4770      	bx	lr
 80150de:	bf00      	nop
 80150e0:	2000f2a4 	.word	0x2000f2a4
 80150e4:	2000f2a8 	.word	0x2000f2a8

080150e8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b082      	sub	sp, #8
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80150f6:	f003 0301 	and.w	r3, r3, #1
 80150fa:	b2db      	uxtb	r3, r3
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d016      	beq.n	801512e <ip4_input_accept+0x46>
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	3304      	adds	r3, #4
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d011      	beq.n	801512e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801510a:	4b0b      	ldr	r3, [pc, #44]	@ (8015138 <ip4_input_accept+0x50>)
 801510c:	695a      	ldr	r2, [r3, #20]
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	3304      	adds	r3, #4
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	429a      	cmp	r2, r3
 8015116:	d008      	beq.n	801512a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015118:	4b07      	ldr	r3, [pc, #28]	@ (8015138 <ip4_input_accept+0x50>)
 801511a:	695b      	ldr	r3, [r3, #20]
 801511c:	6879      	ldr	r1, [r7, #4]
 801511e:	4618      	mov	r0, r3
 8015120:	f000 fa08 	bl	8015534 <ip4_addr_isbroadcast_u32>
 8015124:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015126:	2b00      	cmp	r3, #0
 8015128:	d001      	beq.n	801512e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801512a:	2301      	movs	r3, #1
 801512c:	e000      	b.n	8015130 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801512e:	2300      	movs	r3, #0
}
 8015130:	4618      	mov	r0, r3
 8015132:	3708      	adds	r7, #8
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}
 8015138:	2000999c 	.word	0x2000999c

0801513c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b086      	sub	sp, #24
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
 8015144:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	685b      	ldr	r3, [r3, #4]
 801514a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801514c:	697b      	ldr	r3, [r7, #20]
 801514e:	781b      	ldrb	r3, [r3, #0]
 8015150:	091b      	lsrs	r3, r3, #4
 8015152:	b2db      	uxtb	r3, r3
 8015154:	2b04      	cmp	r3, #4
 8015156:	d004      	beq.n	8015162 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015158:	6878      	ldr	r0, [r7, #4]
 801515a:	f7f7 fee5 	bl	800cf28 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801515e:	2300      	movs	r3, #0
 8015160:	e107      	b.n	8015372 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015162:	697b      	ldr	r3, [r7, #20]
 8015164:	781b      	ldrb	r3, [r3, #0]
 8015166:	f003 030f 	and.w	r3, r3, #15
 801516a:	b2db      	uxtb	r3, r3
 801516c:	009b      	lsls	r3, r3, #2
 801516e:	b2db      	uxtb	r3, r3
 8015170:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015172:	697b      	ldr	r3, [r7, #20]
 8015174:	885b      	ldrh	r3, [r3, #2]
 8015176:	b29b      	uxth	r3, r3
 8015178:	4618      	mov	r0, r3
 801517a:	f7f6 fae3 	bl	800b744 <lwip_htons>
 801517e:	4603      	mov	r3, r0
 8015180:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	891b      	ldrh	r3, [r3, #8]
 8015186:	89ba      	ldrh	r2, [r7, #12]
 8015188:	429a      	cmp	r2, r3
 801518a:	d204      	bcs.n	8015196 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801518c:	89bb      	ldrh	r3, [r7, #12]
 801518e:	4619      	mov	r1, r3
 8015190:	6878      	ldr	r0, [r7, #4]
 8015192:	f7f7 fd43 	bl	800cc1c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	895b      	ldrh	r3, [r3, #10]
 801519a:	89fa      	ldrh	r2, [r7, #14]
 801519c:	429a      	cmp	r2, r3
 801519e:	d807      	bhi.n	80151b0 <ip4_input+0x74>
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	891b      	ldrh	r3, [r3, #8]
 80151a4:	89ba      	ldrh	r2, [r7, #12]
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d802      	bhi.n	80151b0 <ip4_input+0x74>
 80151aa:	89fb      	ldrh	r3, [r7, #14]
 80151ac:	2b13      	cmp	r3, #19
 80151ae:	d804      	bhi.n	80151ba <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80151b0:	6878      	ldr	r0, [r7, #4]
 80151b2:	f7f7 feb9 	bl	800cf28 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80151b6:	2300      	movs	r3, #0
 80151b8:	e0db      	b.n	8015372 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80151ba:	697b      	ldr	r3, [r7, #20]
 80151bc:	691b      	ldr	r3, [r3, #16]
 80151be:	4a6f      	ldr	r2, [pc, #444]	@ (801537c <ip4_input+0x240>)
 80151c0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80151c2:	697b      	ldr	r3, [r7, #20]
 80151c4:	68db      	ldr	r3, [r3, #12]
 80151c6:	4a6d      	ldr	r2, [pc, #436]	@ (801537c <ip4_input+0x240>)
 80151c8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80151ca:	4b6c      	ldr	r3, [pc, #432]	@ (801537c <ip4_input+0x240>)
 80151cc:	695b      	ldr	r3, [r3, #20]
 80151ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80151d2:	2be0      	cmp	r3, #224	@ 0xe0
 80151d4:	d112      	bne.n	80151fc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80151d6:	683b      	ldr	r3, [r7, #0]
 80151d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80151dc:	f003 0301 	and.w	r3, r3, #1
 80151e0:	b2db      	uxtb	r3, r3
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d007      	beq.n	80151f6 <ip4_input+0xba>
 80151e6:	683b      	ldr	r3, [r7, #0]
 80151e8:	3304      	adds	r3, #4
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d002      	beq.n	80151f6 <ip4_input+0xba>
      netif = inp;
 80151f0:	683b      	ldr	r3, [r7, #0]
 80151f2:	613b      	str	r3, [r7, #16]
 80151f4:	e02a      	b.n	801524c <ip4_input+0x110>
    } else {
      netif = NULL;
 80151f6:	2300      	movs	r3, #0
 80151f8:	613b      	str	r3, [r7, #16]
 80151fa:	e027      	b.n	801524c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80151fc:	6838      	ldr	r0, [r7, #0]
 80151fe:	f7ff ff73 	bl	80150e8 <ip4_input_accept>
 8015202:	4603      	mov	r3, r0
 8015204:	2b00      	cmp	r3, #0
 8015206:	d002      	beq.n	801520e <ip4_input+0xd2>
      netif = inp;
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	613b      	str	r3, [r7, #16]
 801520c:	e01e      	b.n	801524c <ip4_input+0x110>
    } else {
      netif = NULL;
 801520e:	2300      	movs	r3, #0
 8015210:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015212:	4b5a      	ldr	r3, [pc, #360]	@ (801537c <ip4_input+0x240>)
 8015214:	695b      	ldr	r3, [r3, #20]
 8015216:	b2db      	uxtb	r3, r3
 8015218:	2b7f      	cmp	r3, #127	@ 0x7f
 801521a:	d017      	beq.n	801524c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801521c:	4b58      	ldr	r3, [pc, #352]	@ (8015380 <ip4_input+0x244>)
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	613b      	str	r3, [r7, #16]
 8015222:	e00e      	b.n	8015242 <ip4_input+0x106>
          if (netif == inp) {
 8015224:	693a      	ldr	r2, [r7, #16]
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	429a      	cmp	r2, r3
 801522a:	d006      	beq.n	801523a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801522c:	6938      	ldr	r0, [r7, #16]
 801522e:	f7ff ff5b 	bl	80150e8 <ip4_input_accept>
 8015232:	4603      	mov	r3, r0
 8015234:	2b00      	cmp	r3, #0
 8015236:	d108      	bne.n	801524a <ip4_input+0x10e>
 8015238:	e000      	b.n	801523c <ip4_input+0x100>
            continue;
 801523a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801523c:	693b      	ldr	r3, [r7, #16]
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	613b      	str	r3, [r7, #16]
 8015242:	693b      	ldr	r3, [r7, #16]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d1ed      	bne.n	8015224 <ip4_input+0xe8>
 8015248:	e000      	b.n	801524c <ip4_input+0x110>
            break;
 801524a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801524c:	4b4b      	ldr	r3, [pc, #300]	@ (801537c <ip4_input+0x240>)
 801524e:	691b      	ldr	r3, [r3, #16]
 8015250:	6839      	ldr	r1, [r7, #0]
 8015252:	4618      	mov	r0, r3
 8015254:	f000 f96e 	bl	8015534 <ip4_addr_isbroadcast_u32>
 8015258:	4603      	mov	r3, r0
 801525a:	2b00      	cmp	r3, #0
 801525c:	d105      	bne.n	801526a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801525e:	4b47      	ldr	r3, [pc, #284]	@ (801537c <ip4_input+0x240>)
 8015260:	691b      	ldr	r3, [r3, #16]
 8015262:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015266:	2be0      	cmp	r3, #224	@ 0xe0
 8015268:	d104      	bne.n	8015274 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801526a:	6878      	ldr	r0, [r7, #4]
 801526c:	f7f7 fe5c 	bl	800cf28 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015270:	2300      	movs	r3, #0
 8015272:	e07e      	b.n	8015372 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015274:	693b      	ldr	r3, [r7, #16]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d104      	bne.n	8015284 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801527a:	6878      	ldr	r0, [r7, #4]
 801527c:	f7f7 fe54 	bl	800cf28 <pbuf_free>
    return ERR_OK;
 8015280:	2300      	movs	r3, #0
 8015282:	e076      	b.n	8015372 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015284:	697b      	ldr	r3, [r7, #20]
 8015286:	88db      	ldrh	r3, [r3, #6]
 8015288:	b29b      	uxth	r3, r3
 801528a:	461a      	mov	r2, r3
 801528c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8015290:	4013      	ands	r3, r2
 8015292:	2b00      	cmp	r3, #0
 8015294:	d00b      	beq.n	80152ae <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015296:	6878      	ldr	r0, [r7, #4]
 8015298:	f000 fc92 	bl	8015bc0 <ip4_reass>
 801529c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d101      	bne.n	80152a8 <ip4_input+0x16c>
      return ERR_OK;
 80152a4:	2300      	movs	r3, #0
 80152a6:	e064      	b.n	8015372 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	685b      	ldr	r3, [r3, #4]
 80152ac:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80152ae:	4a33      	ldr	r2, [pc, #204]	@ (801537c <ip4_input+0x240>)
 80152b0:	693b      	ldr	r3, [r7, #16]
 80152b2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80152b4:	4a31      	ldr	r2, [pc, #196]	@ (801537c <ip4_input+0x240>)
 80152b6:	683b      	ldr	r3, [r7, #0]
 80152b8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80152ba:	4a30      	ldr	r2, [pc, #192]	@ (801537c <ip4_input+0x240>)
 80152bc:	697b      	ldr	r3, [r7, #20]
 80152be:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80152c0:	697b      	ldr	r3, [r7, #20]
 80152c2:	781b      	ldrb	r3, [r3, #0]
 80152c4:	f003 030f 	and.w	r3, r3, #15
 80152c8:	b2db      	uxtb	r3, r3
 80152ca:	009b      	lsls	r3, r3, #2
 80152cc:	b2db      	uxtb	r3, r3
 80152ce:	461a      	mov	r2, r3
 80152d0:	4b2a      	ldr	r3, [pc, #168]	@ (801537c <ip4_input+0x240>)
 80152d2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80152d4:	89fb      	ldrh	r3, [r7, #14]
 80152d6:	4619      	mov	r1, r3
 80152d8:	6878      	ldr	r0, [r7, #4]
 80152da:	f7f7 fd9f 	bl	800ce1c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80152de:	697b      	ldr	r3, [r7, #20]
 80152e0:	7a5b      	ldrb	r3, [r3, #9]
 80152e2:	2b11      	cmp	r3, #17
 80152e4:	d006      	beq.n	80152f4 <ip4_input+0x1b8>
 80152e6:	2b11      	cmp	r3, #17
 80152e8:	dc13      	bgt.n	8015312 <ip4_input+0x1d6>
 80152ea:	2b01      	cmp	r3, #1
 80152ec:	d00c      	beq.n	8015308 <ip4_input+0x1cc>
 80152ee:	2b06      	cmp	r3, #6
 80152f0:	d005      	beq.n	80152fe <ip4_input+0x1c2>
 80152f2:	e00e      	b.n	8015312 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80152f4:	6839      	ldr	r1, [r7, #0]
 80152f6:	6878      	ldr	r0, [r7, #4]
 80152f8:	f7fe fb5a 	bl	80139b0 <udp_input>
        break;
 80152fc:	e026      	b.n	801534c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80152fe:	6839      	ldr	r1, [r7, #0]
 8015300:	6878      	ldr	r0, [r7, #4]
 8015302:	f7f9 ff19 	bl	800f138 <tcp_input>
        break;
 8015306:	e021      	b.n	801534c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015308:	6839      	ldr	r1, [r7, #0]
 801530a:	6878      	ldr	r0, [r7, #4]
 801530c:	f7ff fcee 	bl	8014cec <icmp_input>
        break;
 8015310:	e01c      	b.n	801534c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015312:	4b1a      	ldr	r3, [pc, #104]	@ (801537c <ip4_input+0x240>)
 8015314:	695b      	ldr	r3, [r3, #20]
 8015316:	6939      	ldr	r1, [r7, #16]
 8015318:	4618      	mov	r0, r3
 801531a:	f000 f90b 	bl	8015534 <ip4_addr_isbroadcast_u32>
 801531e:	4603      	mov	r3, r0
 8015320:	2b00      	cmp	r3, #0
 8015322:	d10f      	bne.n	8015344 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015324:	4b15      	ldr	r3, [pc, #84]	@ (801537c <ip4_input+0x240>)
 8015326:	695b      	ldr	r3, [r3, #20]
 8015328:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801532c:	2be0      	cmp	r3, #224	@ 0xe0
 801532e:	d009      	beq.n	8015344 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015330:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015334:	4619      	mov	r1, r3
 8015336:	6878      	ldr	r0, [r7, #4]
 8015338:	f7f7 fde3 	bl	800cf02 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801533c:	2102      	movs	r1, #2
 801533e:	6878      	ldr	r0, [r7, #4]
 8015340:	f7ff fdd8 	bl	8014ef4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015344:	6878      	ldr	r0, [r7, #4]
 8015346:	f7f7 fdef 	bl	800cf28 <pbuf_free>
        break;
 801534a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801534c:	4b0b      	ldr	r3, [pc, #44]	@ (801537c <ip4_input+0x240>)
 801534e:	2200      	movs	r2, #0
 8015350:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015352:	4b0a      	ldr	r3, [pc, #40]	@ (801537c <ip4_input+0x240>)
 8015354:	2200      	movs	r2, #0
 8015356:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015358:	4b08      	ldr	r3, [pc, #32]	@ (801537c <ip4_input+0x240>)
 801535a:	2200      	movs	r2, #0
 801535c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801535e:	4b07      	ldr	r3, [pc, #28]	@ (801537c <ip4_input+0x240>)
 8015360:	2200      	movs	r2, #0
 8015362:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015364:	4b05      	ldr	r3, [pc, #20]	@ (801537c <ip4_input+0x240>)
 8015366:	2200      	movs	r2, #0
 8015368:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801536a:	4b04      	ldr	r3, [pc, #16]	@ (801537c <ip4_input+0x240>)
 801536c:	2200      	movs	r2, #0
 801536e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015370:	2300      	movs	r3, #0
}
 8015372:	4618      	mov	r0, r3
 8015374:	3718      	adds	r7, #24
 8015376:	46bd      	mov	sp, r7
 8015378:	bd80      	pop	{r7, pc}
 801537a:	bf00      	nop
 801537c:	2000999c 	.word	0x2000999c
 8015380:	2000f2a4 	.word	0x2000f2a4

08015384 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b08a      	sub	sp, #40	@ 0x28
 8015388:	af04      	add	r7, sp, #16
 801538a:	60f8      	str	r0, [r7, #12]
 801538c:	60b9      	str	r1, [r7, #8]
 801538e:	607a      	str	r2, [r7, #4]
 8015390:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015392:	68bb      	ldr	r3, [r7, #8]
 8015394:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d009      	beq.n	80153b0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801539c:	68bb      	ldr	r3, [r7, #8]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d003      	beq.n	80153aa <ip4_output_if+0x26>
 80153a2:	68bb      	ldr	r3, [r7, #8]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d102      	bne.n	80153b0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80153aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153ac:	3304      	adds	r3, #4
 80153ae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80153b0:	78fa      	ldrb	r2, [r7, #3]
 80153b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153b4:	9302      	str	r3, [sp, #8]
 80153b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80153ba:	9301      	str	r3, [sp, #4]
 80153bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80153c0:	9300      	str	r3, [sp, #0]
 80153c2:	4613      	mov	r3, r2
 80153c4:	687a      	ldr	r2, [r7, #4]
 80153c6:	6979      	ldr	r1, [r7, #20]
 80153c8:	68f8      	ldr	r0, [r7, #12]
 80153ca:	f000 f805 	bl	80153d8 <ip4_output_if_src>
 80153ce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80153d0:	4618      	mov	r0, r3
 80153d2:	3718      	adds	r7, #24
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd80      	pop	{r7, pc}

080153d8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b088      	sub	sp, #32
 80153dc:	af00      	add	r7, sp, #0
 80153de:	60f8      	str	r0, [r7, #12]
 80153e0:	60b9      	str	r1, [r7, #8]
 80153e2:	607a      	str	r2, [r7, #4]
 80153e4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	7b9b      	ldrb	r3, [r3, #14]
 80153ea:	2b01      	cmp	r3, #1
 80153ec:	d006      	beq.n	80153fc <ip4_output_if_src+0x24>
 80153ee:	4b4b      	ldr	r3, [pc, #300]	@ (801551c <ip4_output_if_src+0x144>)
 80153f0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80153f4:	494a      	ldr	r1, [pc, #296]	@ (8015520 <ip4_output_if_src+0x148>)
 80153f6:	484b      	ldr	r0, [pc, #300]	@ (8015524 <ip4_output_if_src+0x14c>)
 80153f8:	f001 faa8 	bl	801694c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d060      	beq.n	80154c4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015402:	2314      	movs	r3, #20
 8015404:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015406:	2114      	movs	r1, #20
 8015408:	68f8      	ldr	r0, [r7, #12]
 801540a:	f7f7 fcf7 	bl	800cdfc <pbuf_add_header>
 801540e:	4603      	mov	r3, r0
 8015410:	2b00      	cmp	r3, #0
 8015412:	d002      	beq.n	801541a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015414:	f06f 0301 	mvn.w	r3, #1
 8015418:	e07c      	b.n	8015514 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	685b      	ldr	r3, [r3, #4]
 801541e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	895b      	ldrh	r3, [r3, #10]
 8015424:	2b13      	cmp	r3, #19
 8015426:	d806      	bhi.n	8015436 <ip4_output_if_src+0x5e>
 8015428:	4b3c      	ldr	r3, [pc, #240]	@ (801551c <ip4_output_if_src+0x144>)
 801542a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801542e:	493e      	ldr	r1, [pc, #248]	@ (8015528 <ip4_output_if_src+0x150>)
 8015430:	483c      	ldr	r0, [pc, #240]	@ (8015524 <ip4_output_if_src+0x14c>)
 8015432:	f001 fa8b 	bl	801694c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015436:	69fb      	ldr	r3, [r7, #28]
 8015438:	78fa      	ldrb	r2, [r7, #3]
 801543a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801543c:	69fb      	ldr	r3, [r7, #28]
 801543e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8015442:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	681a      	ldr	r2, [r3, #0]
 8015448:	69fb      	ldr	r3, [r7, #28]
 801544a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801544c:	8b7b      	ldrh	r3, [r7, #26]
 801544e:	089b      	lsrs	r3, r3, #2
 8015450:	b29b      	uxth	r3, r3
 8015452:	b2db      	uxtb	r3, r3
 8015454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015458:	b2da      	uxtb	r2, r3
 801545a:	69fb      	ldr	r3, [r7, #28]
 801545c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801545e:	69fb      	ldr	r3, [r7, #28]
 8015460:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015464:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	891b      	ldrh	r3, [r3, #8]
 801546a:	4618      	mov	r0, r3
 801546c:	f7f6 f96a 	bl	800b744 <lwip_htons>
 8015470:	4603      	mov	r3, r0
 8015472:	461a      	mov	r2, r3
 8015474:	69fb      	ldr	r3, [r7, #28]
 8015476:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015478:	69fb      	ldr	r3, [r7, #28]
 801547a:	2200      	movs	r2, #0
 801547c:	719a      	strb	r2, [r3, #6]
 801547e:	2200      	movs	r2, #0
 8015480:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015482:	4b2a      	ldr	r3, [pc, #168]	@ (801552c <ip4_output_if_src+0x154>)
 8015484:	881b      	ldrh	r3, [r3, #0]
 8015486:	4618      	mov	r0, r3
 8015488:	f7f6 f95c 	bl	800b744 <lwip_htons>
 801548c:	4603      	mov	r3, r0
 801548e:	461a      	mov	r2, r3
 8015490:	69fb      	ldr	r3, [r7, #28]
 8015492:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015494:	4b25      	ldr	r3, [pc, #148]	@ (801552c <ip4_output_if_src+0x154>)
 8015496:	881b      	ldrh	r3, [r3, #0]
 8015498:	3301      	adds	r3, #1
 801549a:	b29a      	uxth	r2, r3
 801549c:	4b23      	ldr	r3, [pc, #140]	@ (801552c <ip4_output_if_src+0x154>)
 801549e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80154a0:	68bb      	ldr	r3, [r7, #8]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d104      	bne.n	80154b0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80154a6:	4b22      	ldr	r3, [pc, #136]	@ (8015530 <ip4_output_if_src+0x158>)
 80154a8:	681a      	ldr	r2, [r3, #0]
 80154aa:	69fb      	ldr	r3, [r7, #28]
 80154ac:	60da      	str	r2, [r3, #12]
 80154ae:	e003      	b.n	80154b8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	681a      	ldr	r2, [r3, #0]
 80154b4:	69fb      	ldr	r3, [r7, #28]
 80154b6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80154b8:	69fb      	ldr	r3, [r7, #28]
 80154ba:	2200      	movs	r2, #0
 80154bc:	729a      	strb	r2, [r3, #10]
 80154be:	2200      	movs	r2, #0
 80154c0:	72da      	strb	r2, [r3, #11]
 80154c2:	e00f      	b.n	80154e4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	895b      	ldrh	r3, [r3, #10]
 80154c8:	2b13      	cmp	r3, #19
 80154ca:	d802      	bhi.n	80154d2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80154cc:	f06f 0301 	mvn.w	r3, #1
 80154d0:	e020      	b.n	8015514 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	685b      	ldr	r3, [r3, #4]
 80154d6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80154d8:	69fb      	ldr	r3, [r7, #28]
 80154da:	691b      	ldr	r3, [r3, #16]
 80154dc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80154de:	f107 0314 	add.w	r3, r7, #20
 80154e2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80154e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d00c      	beq.n	8015506 <ip4_output_if_src+0x12e>
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	891a      	ldrh	r2, [r3, #8]
 80154f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154f2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80154f4:	429a      	cmp	r2, r3
 80154f6:	d906      	bls.n	8015506 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80154f8:	687a      	ldr	r2, [r7, #4]
 80154fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80154fc:	68f8      	ldr	r0, [r7, #12]
 80154fe:	f000 fd53 	bl	8015fa8 <ip4_frag>
 8015502:	4603      	mov	r3, r0
 8015504:	e006      	b.n	8015514 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015508:	695b      	ldr	r3, [r3, #20]
 801550a:	687a      	ldr	r2, [r7, #4]
 801550c:	68f9      	ldr	r1, [r7, #12]
 801550e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015510:	4798      	blx	r3
 8015512:	4603      	mov	r3, r0
}
 8015514:	4618      	mov	r0, r3
 8015516:	3720      	adds	r7, #32
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}
 801551c:	0801aa70 	.word	0x0801aa70
 8015520:	0801aaa4 	.word	0x0801aaa4
 8015524:	0801aab0 	.word	0x0801aab0
 8015528:	0801aad8 	.word	0x0801aad8
 801552c:	2000f402 	.word	0x2000f402
 8015530:	0801af20 	.word	0x0801af20

08015534 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015534:	b480      	push	{r7}
 8015536:	b085      	sub	sp, #20
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
 801553c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015548:	d002      	beq.n	8015550 <ip4_addr_isbroadcast_u32+0x1c>
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d101      	bne.n	8015554 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015550:	2301      	movs	r3, #1
 8015552:	e02a      	b.n	80155aa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801555a:	f003 0302 	and.w	r3, r3, #2
 801555e:	2b00      	cmp	r3, #0
 8015560:	d101      	bne.n	8015566 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015562:	2300      	movs	r3, #0
 8015564:	e021      	b.n	80155aa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015566:	683b      	ldr	r3, [r7, #0]
 8015568:	3304      	adds	r3, #4
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	687a      	ldr	r2, [r7, #4]
 801556e:	429a      	cmp	r2, r3
 8015570:	d101      	bne.n	8015576 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015572:	2300      	movs	r3, #0
 8015574:	e019      	b.n	80155aa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015576:	68fa      	ldr	r2, [r7, #12]
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	3304      	adds	r3, #4
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	405a      	eors	r2, r3
 8015580:	683b      	ldr	r3, [r7, #0]
 8015582:	3308      	adds	r3, #8
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	4013      	ands	r3, r2
 8015588:	2b00      	cmp	r3, #0
 801558a:	d10d      	bne.n	80155a8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801558c:	683b      	ldr	r3, [r7, #0]
 801558e:	3308      	adds	r3, #8
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	43da      	mvns	r2, r3
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	3308      	adds	r3, #8
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80155a0:	429a      	cmp	r2, r3
 80155a2:	d101      	bne.n	80155a8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80155a4:	2301      	movs	r3, #1
 80155a6:	e000      	b.n	80155aa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80155a8:	2300      	movs	r3, #0
  }
}
 80155aa:	4618      	mov	r0, r3
 80155ac:	3714      	adds	r7, #20
 80155ae:	46bd      	mov	sp, r7
 80155b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b4:	4770      	bx	lr
	...

080155b8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b084      	sub	sp, #16
 80155bc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80155be:	2300      	movs	r3, #0
 80155c0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80155c2:	4b12      	ldr	r3, [pc, #72]	@ (801560c <ip_reass_tmr+0x54>)
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80155c8:	e018      	b.n	80155fc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	7fdb      	ldrb	r3, [r3, #31]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d00b      	beq.n	80155ea <ip_reass_tmr+0x32>
      r->timer--;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	7fdb      	ldrb	r3, [r3, #31]
 80155d6:	3b01      	subs	r3, #1
 80155d8:	b2da      	uxtb	r2, r3
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	60fb      	str	r3, [r7, #12]
 80155e8:	e008      	b.n	80155fc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80155f4:	68b9      	ldr	r1, [r7, #8]
 80155f6:	6878      	ldr	r0, [r7, #4]
 80155f8:	f000 f80a 	bl	8015610 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d1e3      	bne.n	80155ca <ip_reass_tmr+0x12>
    }
  }
}
 8015602:	bf00      	nop
 8015604:	bf00      	nop
 8015606:	3710      	adds	r7, #16
 8015608:	46bd      	mov	sp, r7
 801560a:	bd80      	pop	{r7, pc}
 801560c:	2000f404 	.word	0x2000f404

08015610 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b088      	sub	sp, #32
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
 8015618:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801561a:	2300      	movs	r3, #0
 801561c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801561e:	683a      	ldr	r2, [r7, #0]
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	429a      	cmp	r2, r3
 8015624:	d105      	bne.n	8015632 <ip_reass_free_complete_datagram+0x22>
 8015626:	4b45      	ldr	r3, [pc, #276]	@ (801573c <ip_reass_free_complete_datagram+0x12c>)
 8015628:	22ab      	movs	r2, #171	@ 0xab
 801562a:	4945      	ldr	r1, [pc, #276]	@ (8015740 <ip_reass_free_complete_datagram+0x130>)
 801562c:	4845      	ldr	r0, [pc, #276]	@ (8015744 <ip_reass_free_complete_datagram+0x134>)
 801562e:	f001 f98d 	bl	801694c <iprintf>
  if (prev != NULL) {
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d00a      	beq.n	801564e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015638:	683b      	ldr	r3, [r7, #0]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	687a      	ldr	r2, [r7, #4]
 801563e:	429a      	cmp	r2, r3
 8015640:	d005      	beq.n	801564e <ip_reass_free_complete_datagram+0x3e>
 8015642:	4b3e      	ldr	r3, [pc, #248]	@ (801573c <ip_reass_free_complete_datagram+0x12c>)
 8015644:	22ad      	movs	r2, #173	@ 0xad
 8015646:	4940      	ldr	r1, [pc, #256]	@ (8015748 <ip_reass_free_complete_datagram+0x138>)
 8015648:	483e      	ldr	r0, [pc, #248]	@ (8015744 <ip_reass_free_complete_datagram+0x134>)
 801564a:	f001 f97f 	bl	801694c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	685b      	ldr	r3, [r3, #4]
 8015652:	685b      	ldr	r3, [r3, #4]
 8015654:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015656:	697b      	ldr	r3, [r7, #20]
 8015658:	889b      	ldrh	r3, [r3, #4]
 801565a:	b29b      	uxth	r3, r3
 801565c:	2b00      	cmp	r3, #0
 801565e:	d12a      	bne.n	80156b6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	685b      	ldr	r3, [r3, #4]
 8015664:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	681a      	ldr	r2, [r3, #0]
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801566e:	69bb      	ldr	r3, [r7, #24]
 8015670:	6858      	ldr	r0, [r3, #4]
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	3308      	adds	r3, #8
 8015676:	2214      	movs	r2, #20
 8015678:	4619      	mov	r1, r3
 801567a:	f001 fa98 	bl	8016bae <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801567e:	2101      	movs	r1, #1
 8015680:	69b8      	ldr	r0, [r7, #24]
 8015682:	f7ff fc47 	bl	8014f14 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015686:	69b8      	ldr	r0, [r7, #24]
 8015688:	f7f7 fcdc 	bl	800d044 <pbuf_clen>
 801568c:	4603      	mov	r3, r0
 801568e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015690:	8bfa      	ldrh	r2, [r7, #30]
 8015692:	8a7b      	ldrh	r3, [r7, #18]
 8015694:	4413      	add	r3, r2
 8015696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801569a:	db05      	blt.n	80156a8 <ip_reass_free_complete_datagram+0x98>
 801569c:	4b27      	ldr	r3, [pc, #156]	@ (801573c <ip_reass_free_complete_datagram+0x12c>)
 801569e:	22bc      	movs	r2, #188	@ 0xbc
 80156a0:	492a      	ldr	r1, [pc, #168]	@ (801574c <ip_reass_free_complete_datagram+0x13c>)
 80156a2:	4828      	ldr	r0, [pc, #160]	@ (8015744 <ip_reass_free_complete_datagram+0x134>)
 80156a4:	f001 f952 	bl	801694c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80156a8:	8bfa      	ldrh	r2, [r7, #30]
 80156aa:	8a7b      	ldrh	r3, [r7, #18]
 80156ac:	4413      	add	r3, r2
 80156ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80156b0:	69b8      	ldr	r0, [r7, #24]
 80156b2:	f7f7 fc39 	bl	800cf28 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	685b      	ldr	r3, [r3, #4]
 80156ba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80156bc:	e01f      	b.n	80156fe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80156be:	69bb      	ldr	r3, [r7, #24]
 80156c0:	685b      	ldr	r3, [r3, #4]
 80156c2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80156c4:	69bb      	ldr	r3, [r7, #24]
 80156c6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80156c8:	697b      	ldr	r3, [r7, #20]
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80156ce:	68f8      	ldr	r0, [r7, #12]
 80156d0:	f7f7 fcb8 	bl	800d044 <pbuf_clen>
 80156d4:	4603      	mov	r3, r0
 80156d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80156d8:	8bfa      	ldrh	r2, [r7, #30]
 80156da:	8a7b      	ldrh	r3, [r7, #18]
 80156dc:	4413      	add	r3, r2
 80156de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80156e2:	db05      	blt.n	80156f0 <ip_reass_free_complete_datagram+0xe0>
 80156e4:	4b15      	ldr	r3, [pc, #84]	@ (801573c <ip_reass_free_complete_datagram+0x12c>)
 80156e6:	22cc      	movs	r2, #204	@ 0xcc
 80156e8:	4918      	ldr	r1, [pc, #96]	@ (801574c <ip_reass_free_complete_datagram+0x13c>)
 80156ea:	4816      	ldr	r0, [pc, #88]	@ (8015744 <ip_reass_free_complete_datagram+0x134>)
 80156ec:	f001 f92e 	bl	801694c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80156f0:	8bfa      	ldrh	r2, [r7, #30]
 80156f2:	8a7b      	ldrh	r3, [r7, #18]
 80156f4:	4413      	add	r3, r2
 80156f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80156f8:	68f8      	ldr	r0, [r7, #12]
 80156fa:	f7f7 fc15 	bl	800cf28 <pbuf_free>
  while (p != NULL) {
 80156fe:	69bb      	ldr	r3, [r7, #24]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d1dc      	bne.n	80156be <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015704:	6839      	ldr	r1, [r7, #0]
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f000 f8c2 	bl	8015890 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801570c:	4b10      	ldr	r3, [pc, #64]	@ (8015750 <ip_reass_free_complete_datagram+0x140>)
 801570e:	881b      	ldrh	r3, [r3, #0]
 8015710:	8bfa      	ldrh	r2, [r7, #30]
 8015712:	429a      	cmp	r2, r3
 8015714:	d905      	bls.n	8015722 <ip_reass_free_complete_datagram+0x112>
 8015716:	4b09      	ldr	r3, [pc, #36]	@ (801573c <ip_reass_free_complete_datagram+0x12c>)
 8015718:	22d2      	movs	r2, #210	@ 0xd2
 801571a:	490e      	ldr	r1, [pc, #56]	@ (8015754 <ip_reass_free_complete_datagram+0x144>)
 801571c:	4809      	ldr	r0, [pc, #36]	@ (8015744 <ip_reass_free_complete_datagram+0x134>)
 801571e:	f001 f915 	bl	801694c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015722:	4b0b      	ldr	r3, [pc, #44]	@ (8015750 <ip_reass_free_complete_datagram+0x140>)
 8015724:	881a      	ldrh	r2, [r3, #0]
 8015726:	8bfb      	ldrh	r3, [r7, #30]
 8015728:	1ad3      	subs	r3, r2, r3
 801572a:	b29a      	uxth	r2, r3
 801572c:	4b08      	ldr	r3, [pc, #32]	@ (8015750 <ip_reass_free_complete_datagram+0x140>)
 801572e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015730:	8bfb      	ldrh	r3, [r7, #30]
}
 8015732:	4618      	mov	r0, r3
 8015734:	3720      	adds	r7, #32
 8015736:	46bd      	mov	sp, r7
 8015738:	bd80      	pop	{r7, pc}
 801573a:	bf00      	nop
 801573c:	0801ab08 	.word	0x0801ab08
 8015740:	0801ab44 	.word	0x0801ab44
 8015744:	0801ab50 	.word	0x0801ab50
 8015748:	0801ab78 	.word	0x0801ab78
 801574c:	0801ab8c 	.word	0x0801ab8c
 8015750:	2000f408 	.word	0x2000f408
 8015754:	0801abac 	.word	0x0801abac

08015758 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b08a      	sub	sp, #40	@ 0x28
 801575c:	af00      	add	r7, sp, #0
 801575e:	6078      	str	r0, [r7, #4]
 8015760:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015762:	2300      	movs	r3, #0
 8015764:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015766:	2300      	movs	r3, #0
 8015768:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801576a:	2300      	movs	r3, #0
 801576c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801576e:	2300      	movs	r3, #0
 8015770:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015772:	2300      	movs	r3, #0
 8015774:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015776:	4b28      	ldr	r3, [pc, #160]	@ (8015818 <ip_reass_remove_oldest_datagram+0xc0>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801577c:	e030      	b.n	80157e0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015780:	695a      	ldr	r2, [r3, #20]
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	68db      	ldr	r3, [r3, #12]
 8015786:	429a      	cmp	r2, r3
 8015788:	d10c      	bne.n	80157a4 <ip_reass_remove_oldest_datagram+0x4c>
 801578a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801578c:	699a      	ldr	r2, [r3, #24]
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	691b      	ldr	r3, [r3, #16]
 8015792:	429a      	cmp	r2, r3
 8015794:	d106      	bne.n	80157a4 <ip_reass_remove_oldest_datagram+0x4c>
 8015796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015798:	899a      	ldrh	r2, [r3, #12]
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	889b      	ldrh	r3, [r3, #4]
 801579e:	b29b      	uxth	r3, r3
 80157a0:	429a      	cmp	r2, r3
 80157a2:	d014      	beq.n	80157ce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80157a4:	693b      	ldr	r3, [r7, #16]
 80157a6:	3301      	adds	r3, #1
 80157a8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80157aa:	6a3b      	ldr	r3, [r7, #32]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d104      	bne.n	80157ba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80157b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157b2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80157b4:	69fb      	ldr	r3, [r7, #28]
 80157b6:	61bb      	str	r3, [r7, #24]
 80157b8:	e009      	b.n	80157ce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80157ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157bc:	7fda      	ldrb	r2, [r3, #31]
 80157be:	6a3b      	ldr	r3, [r7, #32]
 80157c0:	7fdb      	ldrb	r3, [r3, #31]
 80157c2:	429a      	cmp	r2, r3
 80157c4:	d803      	bhi.n	80157ce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80157c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157c8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80157ca:	69fb      	ldr	r3, [r7, #28]
 80157cc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80157ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d001      	beq.n	80157da <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80157d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157d8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80157da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80157e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d1cb      	bne.n	801577e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80157e6:	6a3b      	ldr	r3, [r7, #32]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d008      	beq.n	80157fe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80157ec:	69b9      	ldr	r1, [r7, #24]
 80157ee:	6a38      	ldr	r0, [r7, #32]
 80157f0:	f7ff ff0e 	bl	8015610 <ip_reass_free_complete_datagram>
 80157f4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80157f6:	697a      	ldr	r2, [r7, #20]
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	4413      	add	r3, r2
 80157fc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80157fe:	697a      	ldr	r2, [r7, #20]
 8015800:	683b      	ldr	r3, [r7, #0]
 8015802:	429a      	cmp	r2, r3
 8015804:	da02      	bge.n	801580c <ip_reass_remove_oldest_datagram+0xb4>
 8015806:	693b      	ldr	r3, [r7, #16]
 8015808:	2b01      	cmp	r3, #1
 801580a:	dcac      	bgt.n	8015766 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801580c:	697b      	ldr	r3, [r7, #20]
}
 801580e:	4618      	mov	r0, r3
 8015810:	3728      	adds	r7, #40	@ 0x28
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}
 8015816:	bf00      	nop
 8015818:	2000f404 	.word	0x2000f404

0801581c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b084      	sub	sp, #16
 8015820:	af00      	add	r7, sp, #0
 8015822:	6078      	str	r0, [r7, #4]
 8015824:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015826:	2004      	movs	r0, #4
 8015828:	f7f6 fc64 	bl	800c0f4 <memp_malloc>
 801582c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d110      	bne.n	8015856 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015834:	6839      	ldr	r1, [r7, #0]
 8015836:	6878      	ldr	r0, [r7, #4]
 8015838:	f7ff ff8e 	bl	8015758 <ip_reass_remove_oldest_datagram>
 801583c:	4602      	mov	r2, r0
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	4293      	cmp	r3, r2
 8015842:	dc03      	bgt.n	801584c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015844:	2004      	movs	r0, #4
 8015846:	f7f6 fc55 	bl	800c0f4 <memp_malloc>
 801584a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d101      	bne.n	8015856 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015852:	2300      	movs	r3, #0
 8015854:	e016      	b.n	8015884 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015856:	2220      	movs	r2, #32
 8015858:	2100      	movs	r1, #0
 801585a:	68f8      	ldr	r0, [r7, #12]
 801585c:	f001 f8db 	bl	8016a16 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	220f      	movs	r2, #15
 8015864:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015866:	4b09      	ldr	r3, [pc, #36]	@ (801588c <ip_reass_enqueue_new_datagram+0x70>)
 8015868:	681a      	ldr	r2, [r3, #0]
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801586e:	4a07      	ldr	r2, [pc, #28]	@ (801588c <ip_reass_enqueue_new_datagram+0x70>)
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	3308      	adds	r3, #8
 8015878:	2214      	movs	r2, #20
 801587a:	6879      	ldr	r1, [r7, #4]
 801587c:	4618      	mov	r0, r3
 801587e:	f001 f996 	bl	8016bae <memcpy>
  return ipr;
 8015882:	68fb      	ldr	r3, [r7, #12]
}
 8015884:	4618      	mov	r0, r3
 8015886:	3710      	adds	r7, #16
 8015888:	46bd      	mov	sp, r7
 801588a:	bd80      	pop	{r7, pc}
 801588c:	2000f404 	.word	0x2000f404

08015890 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b082      	sub	sp, #8
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
 8015898:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801589a:	4b10      	ldr	r3, [pc, #64]	@ (80158dc <ip_reass_dequeue_datagram+0x4c>)
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	687a      	ldr	r2, [r7, #4]
 80158a0:	429a      	cmp	r2, r3
 80158a2:	d104      	bne.n	80158ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	4a0c      	ldr	r2, [pc, #48]	@ (80158dc <ip_reass_dequeue_datagram+0x4c>)
 80158aa:	6013      	str	r3, [r2, #0]
 80158ac:	e00d      	b.n	80158ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80158ae:	683b      	ldr	r3, [r7, #0]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d106      	bne.n	80158c2 <ip_reass_dequeue_datagram+0x32>
 80158b4:	4b0a      	ldr	r3, [pc, #40]	@ (80158e0 <ip_reass_dequeue_datagram+0x50>)
 80158b6:	f240 1245 	movw	r2, #325	@ 0x145
 80158ba:	490a      	ldr	r1, [pc, #40]	@ (80158e4 <ip_reass_dequeue_datagram+0x54>)
 80158bc:	480a      	ldr	r0, [pc, #40]	@ (80158e8 <ip_reass_dequeue_datagram+0x58>)
 80158be:	f001 f845 	bl	801694c <iprintf>
    prev->next = ipr->next;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	681a      	ldr	r2, [r3, #0]
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80158ca:	6879      	ldr	r1, [r7, #4]
 80158cc:	2004      	movs	r0, #4
 80158ce:	f7f6 fc87 	bl	800c1e0 <memp_free>
}
 80158d2:	bf00      	nop
 80158d4:	3708      	adds	r7, #8
 80158d6:	46bd      	mov	sp, r7
 80158d8:	bd80      	pop	{r7, pc}
 80158da:	bf00      	nop
 80158dc:	2000f404 	.word	0x2000f404
 80158e0:	0801ab08 	.word	0x0801ab08
 80158e4:	0801abd0 	.word	0x0801abd0
 80158e8:	0801ab50 	.word	0x0801ab50

080158ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b08c      	sub	sp, #48	@ 0x30
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	60f8      	str	r0, [r7, #12]
 80158f4:	60b9      	str	r1, [r7, #8]
 80158f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80158f8:	2300      	movs	r3, #0
 80158fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80158fc:	2301      	movs	r3, #1
 80158fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015900:	68bb      	ldr	r3, [r7, #8]
 8015902:	685b      	ldr	r3, [r3, #4]
 8015904:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015906:	69fb      	ldr	r3, [r7, #28]
 8015908:	885b      	ldrh	r3, [r3, #2]
 801590a:	b29b      	uxth	r3, r3
 801590c:	4618      	mov	r0, r3
 801590e:	f7f5 ff19 	bl	800b744 <lwip_htons>
 8015912:	4603      	mov	r3, r0
 8015914:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015916:	69fb      	ldr	r3, [r7, #28]
 8015918:	781b      	ldrb	r3, [r3, #0]
 801591a:	f003 030f 	and.w	r3, r3, #15
 801591e:	b2db      	uxtb	r3, r3
 8015920:	009b      	lsls	r3, r3, #2
 8015922:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015924:	7e7b      	ldrb	r3, [r7, #25]
 8015926:	b29b      	uxth	r3, r3
 8015928:	8b7a      	ldrh	r2, [r7, #26]
 801592a:	429a      	cmp	r2, r3
 801592c:	d202      	bcs.n	8015934 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801592e:	f04f 33ff 	mov.w	r3, #4294967295
 8015932:	e135      	b.n	8015ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015934:	7e7b      	ldrb	r3, [r7, #25]
 8015936:	b29b      	uxth	r3, r3
 8015938:	8b7a      	ldrh	r2, [r7, #26]
 801593a:	1ad3      	subs	r3, r2, r3
 801593c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801593e:	69fb      	ldr	r3, [r7, #28]
 8015940:	88db      	ldrh	r3, [r3, #6]
 8015942:	b29b      	uxth	r3, r3
 8015944:	4618      	mov	r0, r3
 8015946:	f7f5 fefd 	bl	800b744 <lwip_htons>
 801594a:	4603      	mov	r3, r0
 801594c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015950:	b29b      	uxth	r3, r3
 8015952:	00db      	lsls	r3, r3, #3
 8015954:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015956:	68bb      	ldr	r3, [r7, #8]
 8015958:	685b      	ldr	r3, [r3, #4]
 801595a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801595c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801595e:	2200      	movs	r2, #0
 8015960:	701a      	strb	r2, [r3, #0]
 8015962:	2200      	movs	r2, #0
 8015964:	705a      	strb	r2, [r3, #1]
 8015966:	2200      	movs	r2, #0
 8015968:	709a      	strb	r2, [r3, #2]
 801596a:	2200      	movs	r2, #0
 801596c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801596e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015970:	8afa      	ldrh	r2, [r7, #22]
 8015972:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015974:	8afa      	ldrh	r2, [r7, #22]
 8015976:	8b7b      	ldrh	r3, [r7, #26]
 8015978:	4413      	add	r3, r2
 801597a:	b29a      	uxth	r2, r3
 801597c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801597e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015982:	88db      	ldrh	r3, [r3, #6]
 8015984:	b29b      	uxth	r3, r3
 8015986:	8afa      	ldrh	r2, [r7, #22]
 8015988:	429a      	cmp	r2, r3
 801598a:	d902      	bls.n	8015992 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801598c:	f04f 33ff 	mov.w	r3, #4294967295
 8015990:	e106      	b.n	8015ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	685b      	ldr	r3, [r3, #4]
 8015996:	627b      	str	r3, [r7, #36]	@ 0x24
 8015998:	e068      	b.n	8015a6c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801599c:	685b      	ldr	r3, [r3, #4]
 801599e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80159a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159a2:	889b      	ldrh	r3, [r3, #4]
 80159a4:	b29a      	uxth	r2, r3
 80159a6:	693b      	ldr	r3, [r7, #16]
 80159a8:	889b      	ldrh	r3, [r3, #4]
 80159aa:	b29b      	uxth	r3, r3
 80159ac:	429a      	cmp	r2, r3
 80159ae:	d235      	bcs.n	8015a1c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80159b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80159b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d020      	beq.n	80159fe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80159bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159be:	889b      	ldrh	r3, [r3, #4]
 80159c0:	b29a      	uxth	r2, r3
 80159c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159c4:	88db      	ldrh	r3, [r3, #6]
 80159c6:	b29b      	uxth	r3, r3
 80159c8:	429a      	cmp	r2, r3
 80159ca:	d307      	bcc.n	80159dc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80159cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159ce:	88db      	ldrh	r3, [r3, #6]
 80159d0:	b29a      	uxth	r2, r3
 80159d2:	693b      	ldr	r3, [r7, #16]
 80159d4:	889b      	ldrh	r3, [r3, #4]
 80159d6:	b29b      	uxth	r3, r3
 80159d8:	429a      	cmp	r2, r3
 80159da:	d902      	bls.n	80159e2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80159dc:	f04f 33ff 	mov.w	r3, #4294967295
 80159e0:	e0de      	b.n	8015ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80159e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159e4:	68ba      	ldr	r2, [r7, #8]
 80159e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80159e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159ea:	88db      	ldrh	r3, [r3, #6]
 80159ec:	b29a      	uxth	r2, r3
 80159ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159f0:	889b      	ldrh	r3, [r3, #4]
 80159f2:	b29b      	uxth	r3, r3
 80159f4:	429a      	cmp	r2, r3
 80159f6:	d03d      	beq.n	8015a74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80159f8:	2300      	movs	r3, #0
 80159fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80159fc:	e03a      	b.n	8015a74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80159fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a00:	88db      	ldrh	r3, [r3, #6]
 8015a02:	b29a      	uxth	r2, r3
 8015a04:	693b      	ldr	r3, [r7, #16]
 8015a06:	889b      	ldrh	r3, [r3, #4]
 8015a08:	b29b      	uxth	r3, r3
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	d902      	bls.n	8015a14 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8015a12:	e0c5      	b.n	8015ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	68ba      	ldr	r2, [r7, #8]
 8015a18:	605a      	str	r2, [r3, #4]
      break;
 8015a1a:	e02b      	b.n	8015a74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a1e:	889b      	ldrh	r3, [r3, #4]
 8015a20:	b29a      	uxth	r2, r3
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	889b      	ldrh	r3, [r3, #4]
 8015a26:	b29b      	uxth	r3, r3
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	d102      	bne.n	8015a32 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8015a30:	e0b6      	b.n	8015ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a34:	889b      	ldrh	r3, [r3, #4]
 8015a36:	b29a      	uxth	r2, r3
 8015a38:	693b      	ldr	r3, [r7, #16]
 8015a3a:	88db      	ldrh	r3, [r3, #6]
 8015a3c:	b29b      	uxth	r3, r3
 8015a3e:	429a      	cmp	r2, r3
 8015a40:	d202      	bcs.n	8015a48 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a42:	f04f 33ff 	mov.w	r3, #4294967295
 8015a46:	e0ab      	b.n	8015ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d009      	beq.n	8015a62 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a50:	88db      	ldrh	r3, [r3, #6]
 8015a52:	b29a      	uxth	r2, r3
 8015a54:	693b      	ldr	r3, [r7, #16]
 8015a56:	889b      	ldrh	r3, [r3, #4]
 8015a58:	b29b      	uxth	r3, r3
 8015a5a:	429a      	cmp	r2, r3
 8015a5c:	d001      	beq.n	8015a62 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015a62:	693b      	ldr	r3, [r7, #16]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8015a68:	693b      	ldr	r3, [r7, #16]
 8015a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8015a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d193      	bne.n	801599a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015a72:	e000      	b.n	8015a76 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015a74:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d12d      	bne.n	8015ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d01c      	beq.n	8015abc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a84:	88db      	ldrh	r3, [r3, #6]
 8015a86:	b29a      	uxth	r2, r3
 8015a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a8a:	889b      	ldrh	r3, [r3, #4]
 8015a8c:	b29b      	uxth	r3, r3
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d906      	bls.n	8015aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015a92:	4b45      	ldr	r3, [pc, #276]	@ (8015ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a94:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015a98:	4944      	ldr	r1, [pc, #272]	@ (8015bac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015a9a:	4845      	ldr	r0, [pc, #276]	@ (8015bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a9c:	f000 ff56 	bl	801694c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aa2:	68ba      	ldr	r2, [r7, #8]
 8015aa4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aa8:	88db      	ldrh	r3, [r3, #6]
 8015aaa:	b29a      	uxth	r2, r3
 8015aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015aae:	889b      	ldrh	r3, [r3, #4]
 8015ab0:	b29b      	uxth	r3, r3
 8015ab2:	429a      	cmp	r2, r3
 8015ab4:	d010      	beq.n	8015ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	623b      	str	r3, [r7, #32]
 8015aba:	e00d      	b.n	8015ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	685b      	ldr	r3, [r3, #4]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d006      	beq.n	8015ad2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015ac4:	4b38      	ldr	r3, [pc, #224]	@ (8015ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ac6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8015aca:	493a      	ldr	r1, [pc, #232]	@ (8015bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015acc:	4838      	ldr	r0, [pc, #224]	@ (8015bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ace:	f000 ff3d 	bl	801694c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	68ba      	ldr	r2, [r7, #8]
 8015ad6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d105      	bne.n	8015aea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	7f9b      	ldrb	r3, [r3, #30]
 8015ae2:	f003 0301 	and.w	r3, r3, #1
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d059      	beq.n	8015b9e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015aea:	6a3b      	ldr	r3, [r7, #32]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d04f      	beq.n	8015b90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	685b      	ldr	r3, [r3, #4]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d006      	beq.n	8015b06 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	685b      	ldr	r3, [r3, #4]
 8015afc:	685b      	ldr	r3, [r3, #4]
 8015afe:	889b      	ldrh	r3, [r3, #4]
 8015b00:	b29b      	uxth	r3, r3
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d002      	beq.n	8015b0c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015b06:	2300      	movs	r3, #0
 8015b08:	623b      	str	r3, [r7, #32]
 8015b0a:	e041      	b.n	8015b90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015b16:	e012      	b.n	8015b3e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b1a:	685b      	ldr	r3, [r3, #4]
 8015b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8015b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b20:	88db      	ldrh	r3, [r3, #6]
 8015b22:	b29a      	uxth	r2, r3
 8015b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b26:	889b      	ldrh	r3, [r3, #4]
 8015b28:	b29b      	uxth	r3, r3
 8015b2a:	429a      	cmp	r2, r3
 8015b2c:	d002      	beq.n	8015b34 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015b2e:	2300      	movs	r3, #0
 8015b30:	623b      	str	r3, [r7, #32]
            break;
 8015b32:	e007      	b.n	8015b44 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b36:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d1e9      	bne.n	8015b18 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015b44:	6a3b      	ldr	r3, [r7, #32]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d022      	beq.n	8015b90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	685b      	ldr	r3, [r3, #4]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d106      	bne.n	8015b60 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015b52:	4b15      	ldr	r3, [pc, #84]	@ (8015ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b54:	f240 12df 	movw	r2, #479	@ 0x1df
 8015b58:	4917      	ldr	r1, [pc, #92]	@ (8015bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015b5a:	4815      	ldr	r0, [pc, #84]	@ (8015bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b5c:	f000 fef6 	bl	801694c <iprintf>
          LWIP_ASSERT("sanity check",
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	685b      	ldr	r3, [r3, #4]
 8015b64:	685b      	ldr	r3, [r3, #4]
 8015b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015b68:	429a      	cmp	r2, r3
 8015b6a:	d106      	bne.n	8015b7a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8015ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b6e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8015b72:	4911      	ldr	r1, [pc, #68]	@ (8015bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015b74:	480e      	ldr	r0, [pc, #56]	@ (8015bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b76:	f000 fee9 	bl	801694c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d006      	beq.n	8015b90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015b82:	4b09      	ldr	r3, [pc, #36]	@ (8015ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b84:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8015b88:	490c      	ldr	r1, [pc, #48]	@ (8015bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015b8a:	4809      	ldr	r0, [pc, #36]	@ (8015bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b8c:	f000 fede 	bl	801694c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015b90:	6a3b      	ldr	r3, [r7, #32]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	bf14      	ite	ne
 8015b96:	2301      	movne	r3, #1
 8015b98:	2300      	moveq	r3, #0
 8015b9a:	b2db      	uxtb	r3, r3
 8015b9c:	e000      	b.n	8015ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015b9e:	2300      	movs	r3, #0
}
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	3730      	adds	r7, #48	@ 0x30
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}
 8015ba8:	0801ab08 	.word	0x0801ab08
 8015bac:	0801abec 	.word	0x0801abec
 8015bb0:	0801ab50 	.word	0x0801ab50
 8015bb4:	0801ac0c 	.word	0x0801ac0c
 8015bb8:	0801ac44 	.word	0x0801ac44
 8015bbc:	0801ac54 	.word	0x0801ac54

08015bc0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b08e      	sub	sp, #56	@ 0x38
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	685b      	ldr	r3, [r3, #4]
 8015bcc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bd0:	781b      	ldrb	r3, [r3, #0]
 8015bd2:	f003 030f 	and.w	r3, r3, #15
 8015bd6:	b2db      	uxtb	r3, r3
 8015bd8:	009b      	lsls	r3, r3, #2
 8015bda:	b2db      	uxtb	r3, r3
 8015bdc:	2b14      	cmp	r3, #20
 8015bde:	f040 8171 	bne.w	8015ec4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015be4:	88db      	ldrh	r3, [r3, #6]
 8015be6:	b29b      	uxth	r3, r3
 8015be8:	4618      	mov	r0, r3
 8015bea:	f7f5 fdab 	bl	800b744 <lwip_htons>
 8015bee:	4603      	mov	r3, r0
 8015bf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015bf4:	b29b      	uxth	r3, r3
 8015bf6:	00db      	lsls	r3, r3, #3
 8015bf8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bfc:	885b      	ldrh	r3, [r3, #2]
 8015bfe:	b29b      	uxth	r3, r3
 8015c00:	4618      	mov	r0, r3
 8015c02:	f7f5 fd9f 	bl	800b744 <lwip_htons>
 8015c06:	4603      	mov	r3, r0
 8015c08:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c0c:	781b      	ldrb	r3, [r3, #0]
 8015c0e:	f003 030f 	and.w	r3, r3, #15
 8015c12:	b2db      	uxtb	r3, r3
 8015c14:	009b      	lsls	r3, r3, #2
 8015c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015c1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015c1e:	b29b      	uxth	r3, r3
 8015c20:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015c22:	429a      	cmp	r2, r3
 8015c24:	f0c0 8150 	bcc.w	8015ec8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015c28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015c2c:	b29b      	uxth	r3, r3
 8015c2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015c30:	1ad3      	subs	r3, r2, r3
 8015c32:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015c34:	6878      	ldr	r0, [r7, #4]
 8015c36:	f7f7 fa05 	bl	800d044 <pbuf_clen>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015c3e:	4b8c      	ldr	r3, [pc, #560]	@ (8015e70 <ip4_reass+0x2b0>)
 8015c40:	881b      	ldrh	r3, [r3, #0]
 8015c42:	461a      	mov	r2, r3
 8015c44:	8c3b      	ldrh	r3, [r7, #32]
 8015c46:	4413      	add	r3, r2
 8015c48:	2b0a      	cmp	r3, #10
 8015c4a:	dd10      	ble.n	8015c6e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015c4c:	8c3b      	ldrh	r3, [r7, #32]
 8015c4e:	4619      	mov	r1, r3
 8015c50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015c52:	f7ff fd81 	bl	8015758 <ip_reass_remove_oldest_datagram>
 8015c56:	4603      	mov	r3, r0
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	f000 8137 	beq.w	8015ecc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015c5e:	4b84      	ldr	r3, [pc, #528]	@ (8015e70 <ip4_reass+0x2b0>)
 8015c60:	881b      	ldrh	r3, [r3, #0]
 8015c62:	461a      	mov	r2, r3
 8015c64:	8c3b      	ldrh	r3, [r7, #32]
 8015c66:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015c68:	2b0a      	cmp	r3, #10
 8015c6a:	f300 812f 	bgt.w	8015ecc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015c6e:	4b81      	ldr	r3, [pc, #516]	@ (8015e74 <ip4_reass+0x2b4>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	633b      	str	r3, [r7, #48]	@ 0x30
 8015c74:	e015      	b.n	8015ca2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c78:	695a      	ldr	r2, [r3, #20]
 8015c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c7c:	68db      	ldr	r3, [r3, #12]
 8015c7e:	429a      	cmp	r2, r3
 8015c80:	d10c      	bne.n	8015c9c <ip4_reass+0xdc>
 8015c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c84:	699a      	ldr	r2, [r3, #24]
 8015c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c88:	691b      	ldr	r3, [r3, #16]
 8015c8a:	429a      	cmp	r2, r3
 8015c8c:	d106      	bne.n	8015c9c <ip4_reass+0xdc>
 8015c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c90:	899a      	ldrh	r2, [r3, #12]
 8015c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c94:	889b      	ldrh	r3, [r3, #4]
 8015c96:	b29b      	uxth	r3, r3
 8015c98:	429a      	cmp	r2, r3
 8015c9a:	d006      	beq.n	8015caa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8015ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d1e6      	bne.n	8015c76 <ip4_reass+0xb6>
 8015ca8:	e000      	b.n	8015cac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015caa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d109      	bne.n	8015cc6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015cb2:	8c3b      	ldrh	r3, [r7, #32]
 8015cb4:	4619      	mov	r1, r3
 8015cb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015cb8:	f7ff fdb0 	bl	801581c <ip_reass_enqueue_new_datagram>
 8015cbc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d11c      	bne.n	8015cfe <ip4_reass+0x13e>
      goto nullreturn;
 8015cc4:	e105      	b.n	8015ed2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cc8:	88db      	ldrh	r3, [r3, #6]
 8015cca:	b29b      	uxth	r3, r3
 8015ccc:	4618      	mov	r0, r3
 8015cce:	f7f5 fd39 	bl	800b744 <lwip_htons>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d110      	bne.n	8015cfe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cde:	89db      	ldrh	r3, [r3, #14]
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	f7f5 fd2f 	bl	800b744 <lwip_htons>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d006      	beq.n	8015cfe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cf2:	3308      	adds	r3, #8
 8015cf4:	2214      	movs	r2, #20
 8015cf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	f000 ff58 	bl	8016bae <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d00:	88db      	ldrh	r3, [r3, #6]
 8015d02:	b29b      	uxth	r3, r3
 8015d04:	f003 0320 	and.w	r3, r3, #32
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	bf0c      	ite	eq
 8015d0c:	2301      	moveq	r3, #1
 8015d0e:	2300      	movne	r3, #0
 8015d10:	b2db      	uxtb	r3, r3
 8015d12:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015d14:	69fb      	ldr	r3, [r7, #28]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d00e      	beq.n	8015d38 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015d1a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015d1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015d1e:	4413      	add	r3, r2
 8015d20:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015d22:	8b7a      	ldrh	r2, [r7, #26]
 8015d24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015d26:	429a      	cmp	r2, r3
 8015d28:	f0c0 80a0 	bcc.w	8015e6c <ip4_reass+0x2ac>
 8015d2c:	8b7b      	ldrh	r3, [r7, #26]
 8015d2e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8015d32:	4293      	cmp	r3, r2
 8015d34:	f200 809a 	bhi.w	8015e6c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015d38:	69fa      	ldr	r2, [r7, #28]
 8015d3a:	6879      	ldr	r1, [r7, #4]
 8015d3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015d3e:	f7ff fdd5 	bl	80158ec <ip_reass_chain_frag_into_datagram_and_validate>
 8015d42:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015d44:	697b      	ldr	r3, [r7, #20]
 8015d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d4a:	f000 809b 	beq.w	8015e84 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015d4e:	4b48      	ldr	r3, [pc, #288]	@ (8015e70 <ip4_reass+0x2b0>)
 8015d50:	881a      	ldrh	r2, [r3, #0]
 8015d52:	8c3b      	ldrh	r3, [r7, #32]
 8015d54:	4413      	add	r3, r2
 8015d56:	b29a      	uxth	r2, r3
 8015d58:	4b45      	ldr	r3, [pc, #276]	@ (8015e70 <ip4_reass+0x2b0>)
 8015d5a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015d5c:	69fb      	ldr	r3, [r7, #28]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d00d      	beq.n	8015d7e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015d62:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015d64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015d66:	4413      	add	r3, r2
 8015d68:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d6c:	8a7a      	ldrh	r2, [r7, #18]
 8015d6e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d72:	7f9b      	ldrb	r3, [r3, #30]
 8015d74:	f043 0301 	orr.w	r3, r3, #1
 8015d78:	b2da      	uxtb	r2, r3
 8015d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d7c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015d7e:	697b      	ldr	r3, [r7, #20]
 8015d80:	2b01      	cmp	r3, #1
 8015d82:	d171      	bne.n	8015e68 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d86:	8b9b      	ldrh	r3, [r3, #28]
 8015d88:	3314      	adds	r3, #20
 8015d8a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d8e:	685b      	ldr	r3, [r3, #4]
 8015d90:	685b      	ldr	r3, [r3, #4]
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d98:	685b      	ldr	r3, [r3, #4]
 8015d9a:	685b      	ldr	r3, [r3, #4]
 8015d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015da0:	3308      	adds	r3, #8
 8015da2:	2214      	movs	r2, #20
 8015da4:	4619      	mov	r1, r3
 8015da6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015da8:	f000 ff01 	bl	8016bae <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015dac:	8a3b      	ldrh	r3, [r7, #16]
 8015dae:	4618      	mov	r0, r3
 8015db0:	f7f5 fcc8 	bl	800b744 <lwip_htons>
 8015db4:	4603      	mov	r3, r0
 8015db6:	461a      	mov	r2, r3
 8015db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	719a      	strb	r2, [r3, #6]
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dc8:	2200      	movs	r2, #0
 8015dca:	729a      	strb	r2, [r3, #10]
 8015dcc:	2200      	movs	r2, #0
 8015dce:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dd2:	685b      	ldr	r3, [r3, #4]
 8015dd4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015dd6:	e00d      	b.n	8015df4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015dda:	685b      	ldr	r3, [r3, #4]
 8015ddc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015dde:	2114      	movs	r1, #20
 8015de0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8015de2:	f7f7 f81b 	bl	800ce1c <pbuf_remove_header>
      pbuf_cat(p, r);
 8015de6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015de8:	6878      	ldr	r0, [r7, #4]
 8015dea:	f7f7 f96b 	bl	800d0c4 <pbuf_cat>
      r = iprh->next_pbuf;
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8015df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d1ee      	bne.n	8015dd8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8015e74 <ip4_reass+0x2b4>)
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015e00:	429a      	cmp	r2, r3
 8015e02:	d102      	bne.n	8015e0a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015e04:	2300      	movs	r3, #0
 8015e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015e08:	e010      	b.n	8015e2c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8015e74 <ip4_reass+0x2b4>)
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015e10:	e007      	b.n	8015e22 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015e18:	429a      	cmp	r2, r3
 8015e1a:	d006      	beq.n	8015e2a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d1f4      	bne.n	8015e12 <ip4_reass+0x252>
 8015e28:	e000      	b.n	8015e2c <ip4_reass+0x26c>
          break;
 8015e2a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015e2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015e2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015e30:	f7ff fd2e 	bl	8015890 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015e34:	6878      	ldr	r0, [r7, #4]
 8015e36:	f7f7 f905 	bl	800d044 <pbuf_clen>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8015e70 <ip4_reass+0x2b0>)
 8015e40:	881b      	ldrh	r3, [r3, #0]
 8015e42:	8c3a      	ldrh	r2, [r7, #32]
 8015e44:	429a      	cmp	r2, r3
 8015e46:	d906      	bls.n	8015e56 <ip4_reass+0x296>
 8015e48:	4b0b      	ldr	r3, [pc, #44]	@ (8015e78 <ip4_reass+0x2b8>)
 8015e4a:	f240 229b 	movw	r2, #667	@ 0x29b
 8015e4e:	490b      	ldr	r1, [pc, #44]	@ (8015e7c <ip4_reass+0x2bc>)
 8015e50:	480b      	ldr	r0, [pc, #44]	@ (8015e80 <ip4_reass+0x2c0>)
 8015e52:	f000 fd7b 	bl	801694c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015e56:	4b06      	ldr	r3, [pc, #24]	@ (8015e70 <ip4_reass+0x2b0>)
 8015e58:	881a      	ldrh	r2, [r3, #0]
 8015e5a:	8c3b      	ldrh	r3, [r7, #32]
 8015e5c:	1ad3      	subs	r3, r2, r3
 8015e5e:	b29a      	uxth	r2, r3
 8015e60:	4b03      	ldr	r3, [pc, #12]	@ (8015e70 <ip4_reass+0x2b0>)
 8015e62:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	e038      	b.n	8015eda <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015e68:	2300      	movs	r3, #0
 8015e6a:	e036      	b.n	8015eda <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015e6c:	bf00      	nop
 8015e6e:	e00a      	b.n	8015e86 <ip4_reass+0x2c6>
 8015e70:	2000f408 	.word	0x2000f408
 8015e74:	2000f404 	.word	0x2000f404
 8015e78:	0801ab08 	.word	0x0801ab08
 8015e7c:	0801ac78 	.word	0x0801ac78
 8015e80:	0801ab50 	.word	0x0801ab50
    goto nullreturn_ipr;
 8015e84:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d106      	bne.n	8015e9a <ip4_reass+0x2da>
 8015e8c:	4b15      	ldr	r3, [pc, #84]	@ (8015ee4 <ip4_reass+0x324>)
 8015e8e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8015e92:	4915      	ldr	r1, [pc, #84]	@ (8015ee8 <ip4_reass+0x328>)
 8015e94:	4815      	ldr	r0, [pc, #84]	@ (8015eec <ip4_reass+0x32c>)
 8015e96:	f000 fd59 	bl	801694c <iprintf>
  if (ipr->p == NULL) {
 8015e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e9c:	685b      	ldr	r3, [r3, #4]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d116      	bne.n	8015ed0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015ea2:	4b13      	ldr	r3, [pc, #76]	@ (8015ef0 <ip4_reass+0x330>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015ea8:	429a      	cmp	r2, r3
 8015eaa:	d006      	beq.n	8015eba <ip4_reass+0x2fa>
 8015eac:	4b0d      	ldr	r3, [pc, #52]	@ (8015ee4 <ip4_reass+0x324>)
 8015eae:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8015eb2:	4910      	ldr	r1, [pc, #64]	@ (8015ef4 <ip4_reass+0x334>)
 8015eb4:	480d      	ldr	r0, [pc, #52]	@ (8015eec <ip4_reass+0x32c>)
 8015eb6:	f000 fd49 	bl	801694c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015eba:	2100      	movs	r1, #0
 8015ebc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015ebe:	f7ff fce7 	bl	8015890 <ip_reass_dequeue_datagram>
 8015ec2:	e006      	b.n	8015ed2 <ip4_reass+0x312>
    goto nullreturn;
 8015ec4:	bf00      	nop
 8015ec6:	e004      	b.n	8015ed2 <ip4_reass+0x312>
    goto nullreturn;
 8015ec8:	bf00      	nop
 8015eca:	e002      	b.n	8015ed2 <ip4_reass+0x312>
      goto nullreturn;
 8015ecc:	bf00      	nop
 8015ece:	e000      	b.n	8015ed2 <ip4_reass+0x312>
  }

nullreturn:
 8015ed0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015ed2:	6878      	ldr	r0, [r7, #4]
 8015ed4:	f7f7 f828 	bl	800cf28 <pbuf_free>
  return NULL;
 8015ed8:	2300      	movs	r3, #0
}
 8015eda:	4618      	mov	r0, r3
 8015edc:	3738      	adds	r7, #56	@ 0x38
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd80      	pop	{r7, pc}
 8015ee2:	bf00      	nop
 8015ee4:	0801ab08 	.word	0x0801ab08
 8015ee8:	0801ac94 	.word	0x0801ac94
 8015eec:	0801ab50 	.word	0x0801ab50
 8015ef0:	2000f404 	.word	0x2000f404
 8015ef4:	0801aca0 	.word	0x0801aca0

08015ef8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015efc:	2005      	movs	r0, #5
 8015efe:	f7f6 f8f9 	bl	800c0f4 <memp_malloc>
 8015f02:	4603      	mov	r3, r0
}
 8015f04:	4618      	mov	r0, r3
 8015f06:	bd80      	pop	{r7, pc}

08015f08 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b082      	sub	sp, #8
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d106      	bne.n	8015f24 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015f16:	4b07      	ldr	r3, [pc, #28]	@ (8015f34 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015f18:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8015f1c:	4906      	ldr	r1, [pc, #24]	@ (8015f38 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015f1e:	4807      	ldr	r0, [pc, #28]	@ (8015f3c <ip_frag_free_pbuf_custom_ref+0x34>)
 8015f20:	f000 fd14 	bl	801694c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015f24:	6879      	ldr	r1, [r7, #4]
 8015f26:	2005      	movs	r0, #5
 8015f28:	f7f6 f95a 	bl	800c1e0 <memp_free>
}
 8015f2c:	bf00      	nop
 8015f2e:	3708      	adds	r7, #8
 8015f30:	46bd      	mov	sp, r7
 8015f32:	bd80      	pop	{r7, pc}
 8015f34:	0801ab08 	.word	0x0801ab08
 8015f38:	0801acc0 	.word	0x0801acc0
 8015f3c:	0801ab50 	.word	0x0801ab50

08015f40 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b084      	sub	sp, #16
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d106      	bne.n	8015f60 <ipfrag_free_pbuf_custom+0x20>
 8015f52:	4b11      	ldr	r3, [pc, #68]	@ (8015f98 <ipfrag_free_pbuf_custom+0x58>)
 8015f54:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8015f58:	4910      	ldr	r1, [pc, #64]	@ (8015f9c <ipfrag_free_pbuf_custom+0x5c>)
 8015f5a:	4811      	ldr	r0, [pc, #68]	@ (8015fa0 <ipfrag_free_pbuf_custom+0x60>)
 8015f5c:	f000 fcf6 	bl	801694c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015f60:	68fa      	ldr	r2, [r7, #12]
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	429a      	cmp	r2, r3
 8015f66:	d006      	beq.n	8015f76 <ipfrag_free_pbuf_custom+0x36>
 8015f68:	4b0b      	ldr	r3, [pc, #44]	@ (8015f98 <ipfrag_free_pbuf_custom+0x58>)
 8015f6a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8015f6e:	490d      	ldr	r1, [pc, #52]	@ (8015fa4 <ipfrag_free_pbuf_custom+0x64>)
 8015f70:	480b      	ldr	r0, [pc, #44]	@ (8015fa0 <ipfrag_free_pbuf_custom+0x60>)
 8015f72:	f000 fceb 	bl	801694c <iprintf>
  if (pcr->original != NULL) {
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	695b      	ldr	r3, [r3, #20]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d004      	beq.n	8015f88 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	695b      	ldr	r3, [r3, #20]
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7f6 ffd0 	bl	800cf28 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015f88:	68f8      	ldr	r0, [r7, #12]
 8015f8a:	f7ff ffbd 	bl	8015f08 <ip_frag_free_pbuf_custom_ref>
}
 8015f8e:	bf00      	nop
 8015f90:	3710      	adds	r7, #16
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bd80      	pop	{r7, pc}
 8015f96:	bf00      	nop
 8015f98:	0801ab08 	.word	0x0801ab08
 8015f9c:	0801accc 	.word	0x0801accc
 8015fa0:	0801ab50 	.word	0x0801ab50
 8015fa4:	0801acd8 	.word	0x0801acd8

08015fa8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b094      	sub	sp, #80	@ 0x50
 8015fac:	af02      	add	r7, sp, #8
 8015fae:	60f8      	str	r0, [r7, #12]
 8015fb0:	60b9      	str	r1, [r7, #8]
 8015fb2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015fba:	68bb      	ldr	r3, [r7, #8]
 8015fbc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015fbe:	3b14      	subs	r3, #20
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	da00      	bge.n	8015fc6 <ip4_frag+0x1e>
 8015fc4:	3307      	adds	r3, #7
 8015fc6:	10db      	asrs	r3, r3, #3
 8015fc8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015fca:	2314      	movs	r3, #20
 8015fcc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	685b      	ldr	r3, [r3, #4]
 8015fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8015fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015fd6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fda:	781b      	ldrb	r3, [r3, #0]
 8015fdc:	f003 030f 	and.w	r3, r3, #15
 8015fe0:	b2db      	uxtb	r3, r3
 8015fe2:	009b      	lsls	r3, r3, #2
 8015fe4:	b2db      	uxtb	r3, r3
 8015fe6:	2b14      	cmp	r3, #20
 8015fe8:	d002      	beq.n	8015ff0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015fea:	f06f 0305 	mvn.w	r3, #5
 8015fee:	e110      	b.n	8016212 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	895b      	ldrh	r3, [r3, #10]
 8015ff4:	2b13      	cmp	r3, #19
 8015ff6:	d809      	bhi.n	801600c <ip4_frag+0x64>
 8015ff8:	4b88      	ldr	r3, [pc, #544]	@ (801621c <ip4_frag+0x274>)
 8015ffa:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8015ffe:	4988      	ldr	r1, [pc, #544]	@ (8016220 <ip4_frag+0x278>)
 8016000:	4888      	ldr	r0, [pc, #544]	@ (8016224 <ip4_frag+0x27c>)
 8016002:	f000 fca3 	bl	801694c <iprintf>
 8016006:	f06f 0305 	mvn.w	r3, #5
 801600a:	e102      	b.n	8016212 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801600c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801600e:	88db      	ldrh	r3, [r3, #6]
 8016010:	b29b      	uxth	r3, r3
 8016012:	4618      	mov	r0, r3
 8016014:	f7f5 fb96 	bl	800b744 <lwip_htons>
 8016018:	4603      	mov	r3, r0
 801601a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801601c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801601e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016022:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016026:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016028:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801602c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	891b      	ldrh	r3, [r3, #8]
 8016032:	3b14      	subs	r3, #20
 8016034:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8016038:	e0e1      	b.n	80161fe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801603a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801603c:	00db      	lsls	r3, r3, #3
 801603e:	b29b      	uxth	r3, r3
 8016040:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016044:	4293      	cmp	r3, r2
 8016046:	bf28      	it	cs
 8016048:	4613      	movcs	r3, r2
 801604a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801604c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016050:	2114      	movs	r1, #20
 8016052:	200e      	movs	r0, #14
 8016054:	f7f6 fc84 	bl	800c960 <pbuf_alloc>
 8016058:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801605a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801605c:	2b00      	cmp	r3, #0
 801605e:	f000 80d5 	beq.w	801620c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016064:	895b      	ldrh	r3, [r3, #10]
 8016066:	2b13      	cmp	r3, #19
 8016068:	d806      	bhi.n	8016078 <ip4_frag+0xd0>
 801606a:	4b6c      	ldr	r3, [pc, #432]	@ (801621c <ip4_frag+0x274>)
 801606c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8016070:	496d      	ldr	r1, [pc, #436]	@ (8016228 <ip4_frag+0x280>)
 8016072:	486c      	ldr	r0, [pc, #432]	@ (8016224 <ip4_frag+0x27c>)
 8016074:	f000 fc6a 	bl	801694c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801607a:	685b      	ldr	r3, [r3, #4]
 801607c:	2214      	movs	r2, #20
 801607e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016080:	4618      	mov	r0, r3
 8016082:	f000 fd94 	bl	8016bae <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016088:	685b      	ldr	r3, [r3, #4]
 801608a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801608c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801608e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8016092:	e064      	b.n	801615e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	895a      	ldrh	r2, [r3, #10]
 8016098:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801609a:	1ad3      	subs	r3, r2, r3
 801609c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	895b      	ldrh	r3, [r3, #10]
 80160a2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80160a4:	429a      	cmp	r2, r3
 80160a6:	d906      	bls.n	80160b6 <ip4_frag+0x10e>
 80160a8:	4b5c      	ldr	r3, [pc, #368]	@ (801621c <ip4_frag+0x274>)
 80160aa:	f240 322d 	movw	r2, #813	@ 0x32d
 80160ae:	495f      	ldr	r1, [pc, #380]	@ (801622c <ip4_frag+0x284>)
 80160b0:	485c      	ldr	r0, [pc, #368]	@ (8016224 <ip4_frag+0x27c>)
 80160b2:	f000 fc4b 	bl	801694c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80160b6:	8bfa      	ldrh	r2, [r7, #30]
 80160b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80160bc:	4293      	cmp	r3, r2
 80160be:	bf28      	it	cs
 80160c0:	4613      	movcs	r3, r2
 80160c2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80160c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d105      	bne.n	80160da <ip4_frag+0x132>
        poff = 0;
 80160ce:	2300      	movs	r3, #0
 80160d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	60fb      	str	r3, [r7, #12]
        continue;
 80160d8:	e041      	b.n	801615e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80160da:	f7ff ff0d 	bl	8015ef8 <ip_frag_alloc_pbuf_custom_ref>
 80160de:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80160e0:	69bb      	ldr	r3, [r7, #24]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d103      	bne.n	80160ee <ip4_frag+0x146>
        pbuf_free(rambuf);
 80160e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80160e8:	f7f6 ff1e 	bl	800cf28 <pbuf_free>
        goto memerr;
 80160ec:	e08f      	b.n	801620e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80160ee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80160f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80160f6:	4413      	add	r3, r2
 80160f8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80160fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016100:	9201      	str	r2, [sp, #4]
 8016102:	9300      	str	r3, [sp, #0]
 8016104:	4603      	mov	r3, r0
 8016106:	2241      	movs	r2, #65	@ 0x41
 8016108:	2000      	movs	r0, #0
 801610a:	f7f6 fd53 	bl	800cbb4 <pbuf_alloced_custom>
 801610e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016110:	697b      	ldr	r3, [r7, #20]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d106      	bne.n	8016124 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016116:	69b8      	ldr	r0, [r7, #24]
 8016118:	f7ff fef6 	bl	8015f08 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801611c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801611e:	f7f6 ff03 	bl	800cf28 <pbuf_free>
        goto memerr;
 8016122:	e074      	b.n	801620e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016124:	68f8      	ldr	r0, [r7, #12]
 8016126:	f7f6 ffa5 	bl	800d074 <pbuf_ref>
      pcr->original = p;
 801612a:	69bb      	ldr	r3, [r7, #24]
 801612c:	68fa      	ldr	r2, [r7, #12]
 801612e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016130:	69bb      	ldr	r3, [r7, #24]
 8016132:	4a3f      	ldr	r2, [pc, #252]	@ (8016230 <ip4_frag+0x288>)
 8016134:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016136:	6979      	ldr	r1, [r7, #20]
 8016138:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801613a:	f7f6 ffc3 	bl	800d0c4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801613e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8016142:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016146:	1ad3      	subs	r3, r2, r3
 8016148:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801614c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016150:	2b00      	cmp	r3, #0
 8016152:	d004      	beq.n	801615e <ip4_frag+0x1b6>
        poff = 0;
 8016154:	2300      	movs	r3, #0
 8016156:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801615e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016162:	2b00      	cmp	r3, #0
 8016164:	d196      	bne.n	8016094 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016166:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016168:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801616c:	4413      	add	r3, r2
 801616e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016170:	68bb      	ldr	r3, [r7, #8]
 8016172:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016174:	f1a3 0213 	sub.w	r2, r3, #19
 8016178:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801617c:	429a      	cmp	r2, r3
 801617e:	bfcc      	ite	gt
 8016180:	2301      	movgt	r3, #1
 8016182:	2300      	movle	r3, #0
 8016184:	b2db      	uxtb	r3, r3
 8016186:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016188:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801618c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016190:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8016192:	6a3b      	ldr	r3, [r7, #32]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d002      	beq.n	801619e <ip4_frag+0x1f6>
 8016198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801619a:	2b00      	cmp	r3, #0
 801619c:	d003      	beq.n	80161a6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801619e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80161a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80161a4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80161a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80161a8:	4618      	mov	r0, r3
 80161aa:	f7f5 facb 	bl	800b744 <lwip_htons>
 80161ae:	4603      	mov	r3, r0
 80161b0:	461a      	mov	r2, r3
 80161b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161b4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80161b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80161b8:	3314      	adds	r3, #20
 80161ba:	b29b      	uxth	r3, r3
 80161bc:	4618      	mov	r0, r3
 80161be:	f7f5 fac1 	bl	800b744 <lwip_htons>
 80161c2:	4603      	mov	r3, r0
 80161c4:	461a      	mov	r2, r3
 80161c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161c8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80161ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161cc:	2200      	movs	r2, #0
 80161ce:	729a      	strb	r2, [r3, #10]
 80161d0:	2200      	movs	r2, #0
 80161d2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80161d4:	68bb      	ldr	r3, [r7, #8]
 80161d6:	695b      	ldr	r3, [r3, #20]
 80161d8:	687a      	ldr	r2, [r7, #4]
 80161da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80161dc:	68b8      	ldr	r0, [r7, #8]
 80161de:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80161e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80161e2:	f7f6 fea1 	bl	800cf28 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80161e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80161ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80161ec:	1ad3      	subs	r3, r2, r3
 80161ee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80161f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80161f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80161f8:	4413      	add	r3, r2
 80161fa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80161fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016202:	2b00      	cmp	r3, #0
 8016204:	f47f af19 	bne.w	801603a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016208:	2300      	movs	r3, #0
 801620a:	e002      	b.n	8016212 <ip4_frag+0x26a>
      goto memerr;
 801620c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801620e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016212:	4618      	mov	r0, r3
 8016214:	3748      	adds	r7, #72	@ 0x48
 8016216:	46bd      	mov	sp, r7
 8016218:	bd80      	pop	{r7, pc}
 801621a:	bf00      	nop
 801621c:	0801ab08 	.word	0x0801ab08
 8016220:	0801ace4 	.word	0x0801ace4
 8016224:	0801ab50 	.word	0x0801ab50
 8016228:	0801ad00 	.word	0x0801ad00
 801622c:	0801ad20 	.word	0x0801ad20
 8016230:	08015f41 	.word	0x08015f41

08016234 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b086      	sub	sp, #24
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
 801623c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801623e:	230e      	movs	r3, #14
 8016240:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	895b      	ldrh	r3, [r3, #10]
 8016246:	2b0e      	cmp	r3, #14
 8016248:	d96e      	bls.n	8016328 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	7bdb      	ldrb	r3, [r3, #15]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d106      	bne.n	8016260 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016252:	683b      	ldr	r3, [r7, #0]
 8016254:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016258:	3301      	adds	r3, #1
 801625a:	b2da      	uxtb	r2, r3
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	685b      	ldr	r3, [r3, #4]
 8016264:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016266:	693b      	ldr	r3, [r7, #16]
 8016268:	7b1a      	ldrb	r2, [r3, #12]
 801626a:	7b5b      	ldrb	r3, [r3, #13]
 801626c:	021b      	lsls	r3, r3, #8
 801626e:	4313      	orrs	r3, r2
 8016270:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016272:	693b      	ldr	r3, [r7, #16]
 8016274:	781b      	ldrb	r3, [r3, #0]
 8016276:	f003 0301 	and.w	r3, r3, #1
 801627a:	2b00      	cmp	r3, #0
 801627c:	d023      	beq.n	80162c6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801627e:	693b      	ldr	r3, [r7, #16]
 8016280:	781b      	ldrb	r3, [r3, #0]
 8016282:	2b01      	cmp	r3, #1
 8016284:	d10f      	bne.n	80162a6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016286:	693b      	ldr	r3, [r7, #16]
 8016288:	785b      	ldrb	r3, [r3, #1]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d11b      	bne.n	80162c6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801628e:	693b      	ldr	r3, [r7, #16]
 8016290:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016292:	2b5e      	cmp	r3, #94	@ 0x5e
 8016294:	d117      	bne.n	80162c6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	7b5b      	ldrb	r3, [r3, #13]
 801629a:	f043 0310 	orr.w	r3, r3, #16
 801629e:	b2da      	uxtb	r2, r3
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	735a      	strb	r2, [r3, #13]
 80162a4:	e00f      	b.n	80162c6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80162a6:	693b      	ldr	r3, [r7, #16]
 80162a8:	2206      	movs	r2, #6
 80162aa:	4928      	ldr	r1, [pc, #160]	@ (801634c <ethernet_input+0x118>)
 80162ac:	4618      	mov	r0, r3
 80162ae:	f000 fba2 	bl	80169f6 <memcmp>
 80162b2:	4603      	mov	r3, r0
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d106      	bne.n	80162c6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	7b5b      	ldrb	r3, [r3, #13]
 80162bc:	f043 0308 	orr.w	r3, r3, #8
 80162c0:	b2da      	uxtb	r2, r3
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80162c6:	89fb      	ldrh	r3, [r7, #14]
 80162c8:	2b08      	cmp	r3, #8
 80162ca:	d003      	beq.n	80162d4 <ethernet_input+0xa0>
 80162cc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80162d0:	d014      	beq.n	80162fc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80162d2:	e032      	b.n	801633a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80162d4:	683b      	ldr	r3, [r7, #0]
 80162d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80162da:	f003 0308 	and.w	r3, r3, #8
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d024      	beq.n	801632c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80162e2:	8afb      	ldrh	r3, [r7, #22]
 80162e4:	4619      	mov	r1, r3
 80162e6:	6878      	ldr	r0, [r7, #4]
 80162e8:	f7f6 fd98 	bl	800ce1c <pbuf_remove_header>
 80162ec:	4603      	mov	r3, r0
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d11e      	bne.n	8016330 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80162f2:	6839      	ldr	r1, [r7, #0]
 80162f4:	6878      	ldr	r0, [r7, #4]
 80162f6:	f7fe ff21 	bl	801513c <ip4_input>
      break;
 80162fa:	e013      	b.n	8016324 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80162fc:	683b      	ldr	r3, [r7, #0]
 80162fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016302:	f003 0308 	and.w	r3, r3, #8
 8016306:	2b00      	cmp	r3, #0
 8016308:	d014      	beq.n	8016334 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801630a:	8afb      	ldrh	r3, [r7, #22]
 801630c:	4619      	mov	r1, r3
 801630e:	6878      	ldr	r0, [r7, #4]
 8016310:	f7f6 fd84 	bl	800ce1c <pbuf_remove_header>
 8016314:	4603      	mov	r3, r0
 8016316:	2b00      	cmp	r3, #0
 8016318:	d10e      	bne.n	8016338 <ethernet_input+0x104>
        etharp_input(p, netif);
 801631a:	6839      	ldr	r1, [r7, #0]
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f7fe f8c1 	bl	80144a4 <etharp_input>
      break;
 8016322:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016324:	2300      	movs	r3, #0
 8016326:	e00c      	b.n	8016342 <ethernet_input+0x10e>
    goto free_and_return;
 8016328:	bf00      	nop
 801632a:	e006      	b.n	801633a <ethernet_input+0x106>
        goto free_and_return;
 801632c:	bf00      	nop
 801632e:	e004      	b.n	801633a <ethernet_input+0x106>
        goto free_and_return;
 8016330:	bf00      	nop
 8016332:	e002      	b.n	801633a <ethernet_input+0x106>
        goto free_and_return;
 8016334:	bf00      	nop
 8016336:	e000      	b.n	801633a <ethernet_input+0x106>
        goto free_and_return;
 8016338:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801633a:	6878      	ldr	r0, [r7, #4]
 801633c:	f7f6 fdf4 	bl	800cf28 <pbuf_free>
  return ERR_OK;
 8016340:	2300      	movs	r3, #0
}
 8016342:	4618      	mov	r0, r3
 8016344:	3718      	adds	r7, #24
 8016346:	46bd      	mov	sp, r7
 8016348:	bd80      	pop	{r7, pc}
 801634a:	bf00      	nop
 801634c:	0801af24 	.word	0x0801af24

08016350 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016350:	b580      	push	{r7, lr}
 8016352:	b086      	sub	sp, #24
 8016354:	af00      	add	r7, sp, #0
 8016356:	60f8      	str	r0, [r7, #12]
 8016358:	60b9      	str	r1, [r7, #8]
 801635a:	607a      	str	r2, [r7, #4]
 801635c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801635e:	8c3b      	ldrh	r3, [r7, #32]
 8016360:	4618      	mov	r0, r3
 8016362:	f7f5 f9ef 	bl	800b744 <lwip_htons>
 8016366:	4603      	mov	r3, r0
 8016368:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801636a:	210e      	movs	r1, #14
 801636c:	68b8      	ldr	r0, [r7, #8]
 801636e:	f7f6 fd45 	bl	800cdfc <pbuf_add_header>
 8016372:	4603      	mov	r3, r0
 8016374:	2b00      	cmp	r3, #0
 8016376:	d125      	bne.n	80163c4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016378:	68bb      	ldr	r3, [r7, #8]
 801637a:	685b      	ldr	r3, [r3, #4]
 801637c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801637e:	693b      	ldr	r3, [r7, #16]
 8016380:	8afa      	ldrh	r2, [r7, #22]
 8016382:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016384:	693b      	ldr	r3, [r7, #16]
 8016386:	2206      	movs	r2, #6
 8016388:	6839      	ldr	r1, [r7, #0]
 801638a:	4618      	mov	r0, r3
 801638c:	f000 fc0f 	bl	8016bae <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016390:	693b      	ldr	r3, [r7, #16]
 8016392:	3306      	adds	r3, #6
 8016394:	2206      	movs	r2, #6
 8016396:	6879      	ldr	r1, [r7, #4]
 8016398:	4618      	mov	r0, r3
 801639a:	f000 fc08 	bl	8016bae <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80163a4:	2b06      	cmp	r3, #6
 80163a6:	d006      	beq.n	80163b6 <ethernet_output+0x66>
 80163a8:	4b0a      	ldr	r3, [pc, #40]	@ (80163d4 <ethernet_output+0x84>)
 80163aa:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80163ae:	490a      	ldr	r1, [pc, #40]	@ (80163d8 <ethernet_output+0x88>)
 80163b0:	480a      	ldr	r0, [pc, #40]	@ (80163dc <ethernet_output+0x8c>)
 80163b2:	f000 facb 	bl	801694c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	699b      	ldr	r3, [r3, #24]
 80163ba:	68b9      	ldr	r1, [r7, #8]
 80163bc:	68f8      	ldr	r0, [r7, #12]
 80163be:	4798      	blx	r3
 80163c0:	4603      	mov	r3, r0
 80163c2:	e002      	b.n	80163ca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80163c4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80163c6:	f06f 0301 	mvn.w	r3, #1
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	3718      	adds	r7, #24
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}
 80163d2:	bf00      	nop
 80163d4:	0801ad30 	.word	0x0801ad30
 80163d8:	0801ad68 	.word	0x0801ad68
 80163dc:	0801ad9c 	.word	0x0801ad9c

080163e0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b082      	sub	sp, #8
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
 80163e8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	2200      	movs	r2, #0
 80163ee:	2104      	movs	r1, #4
 80163f0:	4618      	mov	r0, r3
 80163f2:	f7ef fb6d 	bl	8005ad0 <osMessageQueueNew>
 80163f6:	4602      	mov	r2, r0
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d102      	bne.n	801640a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016404:	f04f 33ff 	mov.w	r3, #4294967295
 8016408:	e000      	b.n	801640c <sys_mbox_new+0x2c>

  return ERR_OK;
 801640a:	2300      	movs	r3, #0
}
 801640c:	4618      	mov	r0, r3
 801640e:	3708      	adds	r7, #8
 8016410:	46bd      	mov	sp, r7
 8016412:	bd80      	pop	{r7, pc}

08016414 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b082      	sub	sp, #8
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	4618      	mov	r0, r3
 8016422:	f7ef fc87 	bl	8005d34 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	4618      	mov	r0, r3
 801642c:	f7ef fca2 	bl	8005d74 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016430:	bf00      	nop
 8016432:	3708      	adds	r7, #8
 8016434:	46bd      	mov	sp, r7
 8016436:	bd80      	pop	{r7, pc}

08016438 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b084      	sub	sp, #16
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
 8016440:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	6818      	ldr	r0, [r3, #0]
 8016446:	4639      	mov	r1, r7
 8016448:	2300      	movs	r3, #0
 801644a:	2200      	movs	r2, #0
 801644c:	f7ef fbb4 	bl	8005bb8 <osMessageQueuePut>
 8016450:	4603      	mov	r3, r0
 8016452:	2b00      	cmp	r3, #0
 8016454:	d102      	bne.n	801645c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8016456:	2300      	movs	r3, #0
 8016458:	73fb      	strb	r3, [r7, #15]
 801645a:	e001      	b.n	8016460 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801645c:	23ff      	movs	r3, #255	@ 0xff
 801645e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016460:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016464:	4618      	mov	r0, r3
 8016466:	3710      	adds	r7, #16
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}

0801646c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b086      	sub	sp, #24
 8016470:	af00      	add	r7, sp, #0
 8016472:	60f8      	str	r0, [r7, #12]
 8016474:	60b9      	str	r1, [r7, #8]
 8016476:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016478:	f7ef f816 	bl	80054a8 <osKernelGetTickCount>
 801647c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d013      	beq.n	80164ac <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	6818      	ldr	r0, [r3, #0]
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	2200      	movs	r2, #0
 801648c:	68b9      	ldr	r1, [r7, #8]
 801648e:	f7ef fbf3 	bl	8005c78 <osMessageQueueGet>
 8016492:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8016494:	693b      	ldr	r3, [r7, #16]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d105      	bne.n	80164a6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801649a:	f7ef f805 	bl	80054a8 <osKernelGetTickCount>
 801649e:	4602      	mov	r2, r0
 80164a0:	697b      	ldr	r3, [r7, #20]
 80164a2:	1ad3      	subs	r3, r2, r3
 80164a4:	e00f      	b.n	80164c6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80164a6:	f04f 33ff 	mov.w	r3, #4294967295
 80164aa:	e00c      	b.n	80164c6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	6818      	ldr	r0, [r3, #0]
 80164b0:	f04f 33ff 	mov.w	r3, #4294967295
 80164b4:	2200      	movs	r2, #0
 80164b6:	68b9      	ldr	r1, [r7, #8]
 80164b8:	f7ef fbde 	bl	8005c78 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80164bc:	f7ee fff4 	bl	80054a8 <osKernelGetTickCount>
 80164c0:	4602      	mov	r2, r0
 80164c2:	697b      	ldr	r3, [r7, #20]
 80164c4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80164c6:	4618      	mov	r0, r3
 80164c8:	3718      	adds	r7, #24
 80164ca:	46bd      	mov	sp, r7
 80164cc:	bd80      	pop	{r7, pc}

080164ce <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80164ce:	b580      	push	{r7, lr}
 80164d0:	b082      	sub	sp, #8
 80164d2:	af00      	add	r7, sp, #0
 80164d4:	6078      	str	r0, [r7, #4]
 80164d6:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	6818      	ldr	r0, [r3, #0]
 80164dc:	2300      	movs	r3, #0
 80164de:	2200      	movs	r2, #0
 80164e0:	6839      	ldr	r1, [r7, #0]
 80164e2:	f7ef fbc9 	bl	8005c78 <osMessageQueueGet>
 80164e6:	4603      	mov	r3, r0
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d101      	bne.n	80164f0 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 80164ec:	2300      	movs	r3, #0
 80164ee:	e001      	b.n	80164f4 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80164f0:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80164f4:	4618      	mov	r0, r3
 80164f6:	3708      	adds	r7, #8
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}

080164fc <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80164fc:	b480      	push	{r7}
 80164fe:	b083      	sub	sp, #12
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d101      	bne.n	8016510 <sys_mbox_valid+0x14>
    return 0;
 801650c:	2300      	movs	r3, #0
 801650e:	e000      	b.n	8016512 <sys_mbox_valid+0x16>
  else
    return 1;
 8016510:	2301      	movs	r3, #1
}
 8016512:	4618      	mov	r0, r3
 8016514:	370c      	adds	r7, #12
 8016516:	46bd      	mov	sp, r7
 8016518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801651c:	4770      	bx	lr

0801651e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801651e:	b480      	push	{r7}
 8016520:	b083      	sub	sp, #12
 8016522:	af00      	add	r7, sp, #0
 8016524:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	2200      	movs	r2, #0
 801652a:	601a      	str	r2, [r3, #0]
}
 801652c:	bf00      	nop
 801652e:	370c      	adds	r7, #12
 8016530:	46bd      	mov	sp, r7
 8016532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016536:	4770      	bx	lr

08016538 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b082      	sub	sp, #8
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
 8016540:	460b      	mov	r3, r1
 8016542:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8016544:	78fb      	ldrb	r3, [r7, #3]
 8016546:	2200      	movs	r2, #0
 8016548:	4619      	mov	r1, r3
 801654a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801654e:	f7ef f97b 	bl	8005848 <osSemaphoreNew>
 8016552:	4602      	mov	r2, r0
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d102      	bne.n	8016566 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016560:	f04f 33ff 	mov.w	r3, #4294967295
 8016564:	e009      	b.n	801657a <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8016566:	78fb      	ldrb	r3, [r7, #3]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d105      	bne.n	8016578 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	2100      	movs	r1, #0
 8016572:	4618      	mov	r0, r3
 8016574:	f7ef f9f2 	bl	800595c <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016578:	2300      	movs	r3, #0
}
 801657a:	4618      	mov	r0, r3
 801657c:	3708      	adds	r7, #8
 801657e:	46bd      	mov	sp, r7
 8016580:	bd80      	pop	{r7, pc}

08016582 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016582:	b580      	push	{r7, lr}
 8016584:	b084      	sub	sp, #16
 8016586:	af00      	add	r7, sp, #0
 8016588:	6078      	str	r0, [r7, #4]
 801658a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801658c:	f7ee ff8c 	bl	80054a8 <osKernelGetTickCount>
 8016590:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8016592:	683b      	ldr	r3, [r7, #0]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d011      	beq.n	80165bc <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	6839      	ldr	r1, [r7, #0]
 801659e:	4618      	mov	r0, r3
 80165a0:	f7ef f9dc 	bl	800595c <osSemaphoreAcquire>
 80165a4:	4603      	mov	r3, r0
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d105      	bne.n	80165b6 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80165aa:	f7ee ff7d 	bl	80054a8 <osKernelGetTickCount>
 80165ae:	4602      	mov	r2, r0
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	1ad3      	subs	r3, r2, r3
 80165b4:	e012      	b.n	80165dc <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80165b6:	f04f 33ff 	mov.w	r3, #4294967295
 80165ba:	e00f      	b.n	80165dc <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80165bc:	bf00      	nop
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	f04f 31ff 	mov.w	r1, #4294967295
 80165c6:	4618      	mov	r0, r3
 80165c8:	f7ef f9c8 	bl	800595c <osSemaphoreAcquire>
 80165cc:	4603      	mov	r3, r0
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d1f5      	bne.n	80165be <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80165d2:	f7ee ff69 	bl	80054a8 <osKernelGetTickCount>
 80165d6:	4602      	mov	r2, r0
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80165dc:	4618      	mov	r0, r3
 80165de:	3710      	adds	r7, #16
 80165e0:	46bd      	mov	sp, r7
 80165e2:	bd80      	pop	{r7, pc}

080165e4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b082      	sub	sp, #8
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	4618      	mov	r0, r3
 80165f2:	f7ef fa05 	bl	8005a00 <osSemaphoreRelease>
}
 80165f6:	bf00      	nop
 80165f8:	3708      	adds	r7, #8
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd80      	pop	{r7, pc}

080165fe <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80165fe:	b580      	push	{r7, lr}
 8016600:	b082      	sub	sp, #8
 8016602:	af00      	add	r7, sp, #0
 8016604:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	4618      	mov	r0, r3
 801660c:	f7ef fa3c 	bl	8005a88 <osSemaphoreDelete>
}
 8016610:	bf00      	nop
 8016612:	3708      	adds	r7, #8
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}

08016618 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8016618:	b480      	push	{r7}
 801661a:	b083      	sub	sp, #12
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d101      	bne.n	801662c <sys_sem_valid+0x14>
    return 0;
 8016628:	2300      	movs	r3, #0
 801662a:	e000      	b.n	801662e <sys_sem_valid+0x16>
  else
    return 1;
 801662c:	2301      	movs	r3, #1
}
 801662e:	4618      	mov	r0, r3
 8016630:	370c      	adds	r7, #12
 8016632:	46bd      	mov	sp, r7
 8016634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016638:	4770      	bx	lr

0801663a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801663a:	b480      	push	{r7}
 801663c:	b083      	sub	sp, #12
 801663e:	af00      	add	r7, sp, #0
 8016640:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	2200      	movs	r2, #0
 8016646:	601a      	str	r2, [r3, #0]
}
 8016648:	bf00      	nop
 801664a:	370c      	adds	r7, #12
 801664c:	46bd      	mov	sp, r7
 801664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016652:	4770      	bx	lr

08016654 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8016658:	2000      	movs	r0, #0
 801665a:	f7ee ffe7 	bl	800562c <osMutexNew>
 801665e:	4603      	mov	r3, r0
 8016660:	4a01      	ldr	r2, [pc, #4]	@ (8016668 <sys_init+0x14>)
 8016662:	6013      	str	r3, [r2, #0]
#endif
}
 8016664:	bf00      	nop
 8016666:	bd80      	pop	{r7, pc}
 8016668:	2000f40c 	.word	0x2000f40c

0801666c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801666c:	b580      	push	{r7, lr}
 801666e:	b082      	sub	sp, #8
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016674:	2000      	movs	r0, #0
 8016676:	f7ee ffd9 	bl	800562c <osMutexNew>
 801667a:	4602      	mov	r2, r0
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d102      	bne.n	801668e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016688:	f04f 33ff 	mov.w	r3, #4294967295
 801668c:	e000      	b.n	8016690 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801668e:	2300      	movs	r3, #0
}
 8016690:	4618      	mov	r0, r3
 8016692:	3708      	adds	r7, #8
 8016694:	46bd      	mov	sp, r7
 8016696:	bd80      	pop	{r7, pc}

08016698 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b082      	sub	sp, #8
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	f04f 31ff 	mov.w	r1, #4294967295
 80166a8:	4618      	mov	r0, r3
 80166aa:	f7ef f845 	bl	8005738 <osMutexAcquire>
#endif
}
 80166ae:	bf00      	nop
 80166b0:	3708      	adds	r7, #8
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}

080166b6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80166b6:	b580      	push	{r7, lr}
 80166b8:	b082      	sub	sp, #8
 80166ba:	af00      	add	r7, sp, #0
 80166bc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	4618      	mov	r0, r3
 80166c4:	f7ef f883 	bl	80057ce <osMutexRelease>
}
 80166c8:	bf00      	nop
 80166ca:	3708      	adds	r7, #8
 80166cc:	46bd      	mov	sp, r7
 80166ce:	bd80      	pop	{r7, pc}

080166d0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b08e      	sub	sp, #56	@ 0x38
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	60f8      	str	r0, [r7, #12]
 80166d8:	60b9      	str	r1, [r7, #8]
 80166da:	607a      	str	r2, [r7, #4]
 80166dc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80166de:	f107 0314 	add.w	r3, r7, #20
 80166e2:	2224      	movs	r2, #36	@ 0x24
 80166e4:	2100      	movs	r1, #0
 80166e6:	4618      	mov	r0, r3
 80166e8:	f000 f995 	bl	8016a16 <memset>
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	617b      	str	r3, [r7, #20]
 80166f0:	683b      	ldr	r3, [r7, #0]
 80166f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80166f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80166f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80166f8:	f107 0314 	add.w	r3, r7, #20
 80166fc:	461a      	mov	r2, r3
 80166fe:	6879      	ldr	r1, [r7, #4]
 8016700:	68b8      	ldr	r0, [r7, #8]
 8016702:	f7ee fee6 	bl	80054d2 <osThreadNew>
 8016706:	4603      	mov	r3, r0
#endif
}
 8016708:	4618      	mov	r0, r3
 801670a:	3738      	adds	r7, #56	@ 0x38
 801670c:	46bd      	mov	sp, r7
 801670e:	bd80      	pop	{r7, pc}

08016710 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016710:	b580      	push	{r7, lr}
 8016712:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8016714:	4b04      	ldr	r3, [pc, #16]	@ (8016728 <sys_arch_protect+0x18>)
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	f04f 31ff 	mov.w	r1, #4294967295
 801671c:	4618      	mov	r0, r3
 801671e:	f7ef f80b 	bl	8005738 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8016722:	2301      	movs	r3, #1
}
 8016724:	4618      	mov	r0, r3
 8016726:	bd80      	pop	{r7, pc}
 8016728:	2000f40c 	.word	0x2000f40c

0801672c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b082      	sub	sp, #8
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016734:	4b04      	ldr	r3, [pc, #16]	@ (8016748 <sys_arch_unprotect+0x1c>)
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	4618      	mov	r0, r3
 801673a:	f7ef f848 	bl	80057ce <osMutexRelease>
}
 801673e:	bf00      	nop
 8016740:	3708      	adds	r7, #8
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}
 8016746:	bf00      	nop
 8016748:	2000f40c 	.word	0x2000f40c

0801674c <rand>:
 801674c:	4b16      	ldr	r3, [pc, #88]	@ (80167a8 <rand+0x5c>)
 801674e:	b510      	push	{r4, lr}
 8016750:	681c      	ldr	r4, [r3, #0]
 8016752:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016754:	b9b3      	cbnz	r3, 8016784 <rand+0x38>
 8016756:	2018      	movs	r0, #24
 8016758:	f000 faa0 	bl	8016c9c <malloc>
 801675c:	4602      	mov	r2, r0
 801675e:	6320      	str	r0, [r4, #48]	@ 0x30
 8016760:	b920      	cbnz	r0, 801676c <rand+0x20>
 8016762:	4b12      	ldr	r3, [pc, #72]	@ (80167ac <rand+0x60>)
 8016764:	4812      	ldr	r0, [pc, #72]	@ (80167b0 <rand+0x64>)
 8016766:	2152      	movs	r1, #82	@ 0x52
 8016768:	f000 fa30 	bl	8016bcc <__assert_func>
 801676c:	4911      	ldr	r1, [pc, #68]	@ (80167b4 <rand+0x68>)
 801676e:	4b12      	ldr	r3, [pc, #72]	@ (80167b8 <rand+0x6c>)
 8016770:	e9c0 1300 	strd	r1, r3, [r0]
 8016774:	4b11      	ldr	r3, [pc, #68]	@ (80167bc <rand+0x70>)
 8016776:	6083      	str	r3, [r0, #8]
 8016778:	230b      	movs	r3, #11
 801677a:	8183      	strh	r3, [r0, #12]
 801677c:	2100      	movs	r1, #0
 801677e:	2001      	movs	r0, #1
 8016780:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016784:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016786:	480e      	ldr	r0, [pc, #56]	@ (80167c0 <rand+0x74>)
 8016788:	690b      	ldr	r3, [r1, #16]
 801678a:	694c      	ldr	r4, [r1, #20]
 801678c:	4a0d      	ldr	r2, [pc, #52]	@ (80167c4 <rand+0x78>)
 801678e:	4358      	muls	r0, r3
 8016790:	fb02 0004 	mla	r0, r2, r4, r0
 8016794:	fba3 3202 	umull	r3, r2, r3, r2
 8016798:	3301      	adds	r3, #1
 801679a:	eb40 0002 	adc.w	r0, r0, r2
 801679e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80167a2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80167a6:	bd10      	pop	{r4, pc}
 80167a8:	2000003c 	.word	0x2000003c
 80167ac:	0801af32 	.word	0x0801af32
 80167b0:	0801af49 	.word	0x0801af49
 80167b4:	abcd330e 	.word	0xabcd330e
 80167b8:	e66d1234 	.word	0xe66d1234
 80167bc:	0005deec 	.word	0x0005deec
 80167c0:	5851f42d 	.word	0x5851f42d
 80167c4:	4c957f2d 	.word	0x4c957f2d

080167c8 <std>:
 80167c8:	2300      	movs	r3, #0
 80167ca:	b510      	push	{r4, lr}
 80167cc:	4604      	mov	r4, r0
 80167ce:	e9c0 3300 	strd	r3, r3, [r0]
 80167d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80167d6:	6083      	str	r3, [r0, #8]
 80167d8:	8181      	strh	r1, [r0, #12]
 80167da:	6643      	str	r3, [r0, #100]	@ 0x64
 80167dc:	81c2      	strh	r2, [r0, #14]
 80167de:	6183      	str	r3, [r0, #24]
 80167e0:	4619      	mov	r1, r3
 80167e2:	2208      	movs	r2, #8
 80167e4:	305c      	adds	r0, #92	@ 0x5c
 80167e6:	f000 f916 	bl	8016a16 <memset>
 80167ea:	4b0d      	ldr	r3, [pc, #52]	@ (8016820 <std+0x58>)
 80167ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80167ee:	4b0d      	ldr	r3, [pc, #52]	@ (8016824 <std+0x5c>)
 80167f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80167f2:	4b0d      	ldr	r3, [pc, #52]	@ (8016828 <std+0x60>)
 80167f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80167f6:	4b0d      	ldr	r3, [pc, #52]	@ (801682c <std+0x64>)
 80167f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80167fa:	4b0d      	ldr	r3, [pc, #52]	@ (8016830 <std+0x68>)
 80167fc:	6224      	str	r4, [r4, #32]
 80167fe:	429c      	cmp	r4, r3
 8016800:	d006      	beq.n	8016810 <std+0x48>
 8016802:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016806:	4294      	cmp	r4, r2
 8016808:	d002      	beq.n	8016810 <std+0x48>
 801680a:	33d0      	adds	r3, #208	@ 0xd0
 801680c:	429c      	cmp	r4, r3
 801680e:	d105      	bne.n	801681c <std+0x54>
 8016810:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016818:	f000 b9c6 	b.w	8016ba8 <__retarget_lock_init_recursive>
 801681c:	bd10      	pop	{r4, pc}
 801681e:	bf00      	nop
 8016820:	08016971 	.word	0x08016971
 8016824:	08016993 	.word	0x08016993
 8016828:	080169cb 	.word	0x080169cb
 801682c:	080169ef 	.word	0x080169ef
 8016830:	2000f410 	.word	0x2000f410

08016834 <stdio_exit_handler>:
 8016834:	4a02      	ldr	r2, [pc, #8]	@ (8016840 <stdio_exit_handler+0xc>)
 8016836:	4903      	ldr	r1, [pc, #12]	@ (8016844 <stdio_exit_handler+0x10>)
 8016838:	4803      	ldr	r0, [pc, #12]	@ (8016848 <stdio_exit_handler+0x14>)
 801683a:	f000 b869 	b.w	8016910 <_fwalk_sglue>
 801683e:	bf00      	nop
 8016840:	20000030 	.word	0x20000030
 8016844:	080174b1 	.word	0x080174b1
 8016848:	20000040 	.word	0x20000040

0801684c <cleanup_stdio>:
 801684c:	6841      	ldr	r1, [r0, #4]
 801684e:	4b0c      	ldr	r3, [pc, #48]	@ (8016880 <cleanup_stdio+0x34>)
 8016850:	4299      	cmp	r1, r3
 8016852:	b510      	push	{r4, lr}
 8016854:	4604      	mov	r4, r0
 8016856:	d001      	beq.n	801685c <cleanup_stdio+0x10>
 8016858:	f000 fe2a 	bl	80174b0 <_fflush_r>
 801685c:	68a1      	ldr	r1, [r4, #8]
 801685e:	4b09      	ldr	r3, [pc, #36]	@ (8016884 <cleanup_stdio+0x38>)
 8016860:	4299      	cmp	r1, r3
 8016862:	d002      	beq.n	801686a <cleanup_stdio+0x1e>
 8016864:	4620      	mov	r0, r4
 8016866:	f000 fe23 	bl	80174b0 <_fflush_r>
 801686a:	68e1      	ldr	r1, [r4, #12]
 801686c:	4b06      	ldr	r3, [pc, #24]	@ (8016888 <cleanup_stdio+0x3c>)
 801686e:	4299      	cmp	r1, r3
 8016870:	d004      	beq.n	801687c <cleanup_stdio+0x30>
 8016872:	4620      	mov	r0, r4
 8016874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016878:	f000 be1a 	b.w	80174b0 <_fflush_r>
 801687c:	bd10      	pop	{r4, pc}
 801687e:	bf00      	nop
 8016880:	2000f410 	.word	0x2000f410
 8016884:	2000f478 	.word	0x2000f478
 8016888:	2000f4e0 	.word	0x2000f4e0

0801688c <global_stdio_init.part.0>:
 801688c:	b510      	push	{r4, lr}
 801688e:	4b0b      	ldr	r3, [pc, #44]	@ (80168bc <global_stdio_init.part.0+0x30>)
 8016890:	4c0b      	ldr	r4, [pc, #44]	@ (80168c0 <global_stdio_init.part.0+0x34>)
 8016892:	4a0c      	ldr	r2, [pc, #48]	@ (80168c4 <global_stdio_init.part.0+0x38>)
 8016894:	601a      	str	r2, [r3, #0]
 8016896:	4620      	mov	r0, r4
 8016898:	2200      	movs	r2, #0
 801689a:	2104      	movs	r1, #4
 801689c:	f7ff ff94 	bl	80167c8 <std>
 80168a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80168a4:	2201      	movs	r2, #1
 80168a6:	2109      	movs	r1, #9
 80168a8:	f7ff ff8e 	bl	80167c8 <std>
 80168ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80168b0:	2202      	movs	r2, #2
 80168b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168b6:	2112      	movs	r1, #18
 80168b8:	f7ff bf86 	b.w	80167c8 <std>
 80168bc:	2000f548 	.word	0x2000f548
 80168c0:	2000f410 	.word	0x2000f410
 80168c4:	08016835 	.word	0x08016835

080168c8 <__sfp_lock_acquire>:
 80168c8:	4801      	ldr	r0, [pc, #4]	@ (80168d0 <__sfp_lock_acquire+0x8>)
 80168ca:	f000 b96e 	b.w	8016baa <__retarget_lock_acquire_recursive>
 80168ce:	bf00      	nop
 80168d0:	2000f551 	.word	0x2000f551

080168d4 <__sfp_lock_release>:
 80168d4:	4801      	ldr	r0, [pc, #4]	@ (80168dc <__sfp_lock_release+0x8>)
 80168d6:	f000 b969 	b.w	8016bac <__retarget_lock_release_recursive>
 80168da:	bf00      	nop
 80168dc:	2000f551 	.word	0x2000f551

080168e0 <__sinit>:
 80168e0:	b510      	push	{r4, lr}
 80168e2:	4604      	mov	r4, r0
 80168e4:	f7ff fff0 	bl	80168c8 <__sfp_lock_acquire>
 80168e8:	6a23      	ldr	r3, [r4, #32]
 80168ea:	b11b      	cbz	r3, 80168f4 <__sinit+0x14>
 80168ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168f0:	f7ff bff0 	b.w	80168d4 <__sfp_lock_release>
 80168f4:	4b04      	ldr	r3, [pc, #16]	@ (8016908 <__sinit+0x28>)
 80168f6:	6223      	str	r3, [r4, #32]
 80168f8:	4b04      	ldr	r3, [pc, #16]	@ (801690c <__sinit+0x2c>)
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d1f5      	bne.n	80168ec <__sinit+0xc>
 8016900:	f7ff ffc4 	bl	801688c <global_stdio_init.part.0>
 8016904:	e7f2      	b.n	80168ec <__sinit+0xc>
 8016906:	bf00      	nop
 8016908:	0801684d 	.word	0x0801684d
 801690c:	2000f548 	.word	0x2000f548

08016910 <_fwalk_sglue>:
 8016910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016914:	4607      	mov	r7, r0
 8016916:	4688      	mov	r8, r1
 8016918:	4614      	mov	r4, r2
 801691a:	2600      	movs	r6, #0
 801691c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016920:	f1b9 0901 	subs.w	r9, r9, #1
 8016924:	d505      	bpl.n	8016932 <_fwalk_sglue+0x22>
 8016926:	6824      	ldr	r4, [r4, #0]
 8016928:	2c00      	cmp	r4, #0
 801692a:	d1f7      	bne.n	801691c <_fwalk_sglue+0xc>
 801692c:	4630      	mov	r0, r6
 801692e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016932:	89ab      	ldrh	r3, [r5, #12]
 8016934:	2b01      	cmp	r3, #1
 8016936:	d907      	bls.n	8016948 <_fwalk_sglue+0x38>
 8016938:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801693c:	3301      	adds	r3, #1
 801693e:	d003      	beq.n	8016948 <_fwalk_sglue+0x38>
 8016940:	4629      	mov	r1, r5
 8016942:	4638      	mov	r0, r7
 8016944:	47c0      	blx	r8
 8016946:	4306      	orrs	r6, r0
 8016948:	3568      	adds	r5, #104	@ 0x68
 801694a:	e7e9      	b.n	8016920 <_fwalk_sglue+0x10>

0801694c <iprintf>:
 801694c:	b40f      	push	{r0, r1, r2, r3}
 801694e:	b507      	push	{r0, r1, r2, lr}
 8016950:	4906      	ldr	r1, [pc, #24]	@ (801696c <iprintf+0x20>)
 8016952:	ab04      	add	r3, sp, #16
 8016954:	6808      	ldr	r0, [r1, #0]
 8016956:	f853 2b04 	ldr.w	r2, [r3], #4
 801695a:	6881      	ldr	r1, [r0, #8]
 801695c:	9301      	str	r3, [sp, #4]
 801695e:	f000 fa7d 	bl	8016e5c <_vfiprintf_r>
 8016962:	b003      	add	sp, #12
 8016964:	f85d eb04 	ldr.w	lr, [sp], #4
 8016968:	b004      	add	sp, #16
 801696a:	4770      	bx	lr
 801696c:	2000003c 	.word	0x2000003c

08016970 <__sread>:
 8016970:	b510      	push	{r4, lr}
 8016972:	460c      	mov	r4, r1
 8016974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016978:	f000 f8ce 	bl	8016b18 <_read_r>
 801697c:	2800      	cmp	r0, #0
 801697e:	bfab      	itete	ge
 8016980:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016982:	89a3      	ldrhlt	r3, [r4, #12]
 8016984:	181b      	addge	r3, r3, r0
 8016986:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801698a:	bfac      	ite	ge
 801698c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801698e:	81a3      	strhlt	r3, [r4, #12]
 8016990:	bd10      	pop	{r4, pc}

08016992 <__swrite>:
 8016992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016996:	461f      	mov	r7, r3
 8016998:	898b      	ldrh	r3, [r1, #12]
 801699a:	05db      	lsls	r3, r3, #23
 801699c:	4605      	mov	r5, r0
 801699e:	460c      	mov	r4, r1
 80169a0:	4616      	mov	r6, r2
 80169a2:	d505      	bpl.n	80169b0 <__swrite+0x1e>
 80169a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169a8:	2302      	movs	r3, #2
 80169aa:	2200      	movs	r2, #0
 80169ac:	f000 f8a2 	bl	8016af4 <_lseek_r>
 80169b0:	89a3      	ldrh	r3, [r4, #12]
 80169b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80169b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80169ba:	81a3      	strh	r3, [r4, #12]
 80169bc:	4632      	mov	r2, r6
 80169be:	463b      	mov	r3, r7
 80169c0:	4628      	mov	r0, r5
 80169c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169c6:	f000 b8b9 	b.w	8016b3c <_write_r>

080169ca <__sseek>:
 80169ca:	b510      	push	{r4, lr}
 80169cc:	460c      	mov	r4, r1
 80169ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169d2:	f000 f88f 	bl	8016af4 <_lseek_r>
 80169d6:	1c43      	adds	r3, r0, #1
 80169d8:	89a3      	ldrh	r3, [r4, #12]
 80169da:	bf15      	itete	ne
 80169dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80169de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80169e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80169e6:	81a3      	strheq	r3, [r4, #12]
 80169e8:	bf18      	it	ne
 80169ea:	81a3      	strhne	r3, [r4, #12]
 80169ec:	bd10      	pop	{r4, pc}

080169ee <__sclose>:
 80169ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169f2:	f000 b819 	b.w	8016a28 <_close_r>

080169f6 <memcmp>:
 80169f6:	b510      	push	{r4, lr}
 80169f8:	3901      	subs	r1, #1
 80169fa:	4402      	add	r2, r0
 80169fc:	4290      	cmp	r0, r2
 80169fe:	d101      	bne.n	8016a04 <memcmp+0xe>
 8016a00:	2000      	movs	r0, #0
 8016a02:	e005      	b.n	8016a10 <memcmp+0x1a>
 8016a04:	7803      	ldrb	r3, [r0, #0]
 8016a06:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016a0a:	42a3      	cmp	r3, r4
 8016a0c:	d001      	beq.n	8016a12 <memcmp+0x1c>
 8016a0e:	1b18      	subs	r0, r3, r4
 8016a10:	bd10      	pop	{r4, pc}
 8016a12:	3001      	adds	r0, #1
 8016a14:	e7f2      	b.n	80169fc <memcmp+0x6>

08016a16 <memset>:
 8016a16:	4402      	add	r2, r0
 8016a18:	4603      	mov	r3, r0
 8016a1a:	4293      	cmp	r3, r2
 8016a1c:	d100      	bne.n	8016a20 <memset+0xa>
 8016a1e:	4770      	bx	lr
 8016a20:	f803 1b01 	strb.w	r1, [r3], #1
 8016a24:	e7f9      	b.n	8016a1a <memset+0x4>
	...

08016a28 <_close_r>:
 8016a28:	b538      	push	{r3, r4, r5, lr}
 8016a2a:	4d06      	ldr	r5, [pc, #24]	@ (8016a44 <_close_r+0x1c>)
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	4604      	mov	r4, r0
 8016a30:	4608      	mov	r0, r1
 8016a32:	602b      	str	r3, [r5, #0]
 8016a34:	f7ea faec 	bl	8001010 <_close>
 8016a38:	1c43      	adds	r3, r0, #1
 8016a3a:	d102      	bne.n	8016a42 <_close_r+0x1a>
 8016a3c:	682b      	ldr	r3, [r5, #0]
 8016a3e:	b103      	cbz	r3, 8016a42 <_close_r+0x1a>
 8016a40:	6023      	str	r3, [r4, #0]
 8016a42:	bd38      	pop	{r3, r4, r5, pc}
 8016a44:	2000f54c 	.word	0x2000f54c

08016a48 <_reclaim_reent>:
 8016a48:	4b29      	ldr	r3, [pc, #164]	@ (8016af0 <_reclaim_reent+0xa8>)
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	4283      	cmp	r3, r0
 8016a4e:	b570      	push	{r4, r5, r6, lr}
 8016a50:	4604      	mov	r4, r0
 8016a52:	d04b      	beq.n	8016aec <_reclaim_reent+0xa4>
 8016a54:	69c3      	ldr	r3, [r0, #28]
 8016a56:	b1ab      	cbz	r3, 8016a84 <_reclaim_reent+0x3c>
 8016a58:	68db      	ldr	r3, [r3, #12]
 8016a5a:	b16b      	cbz	r3, 8016a78 <_reclaim_reent+0x30>
 8016a5c:	2500      	movs	r5, #0
 8016a5e:	69e3      	ldr	r3, [r4, #28]
 8016a60:	68db      	ldr	r3, [r3, #12]
 8016a62:	5959      	ldr	r1, [r3, r5]
 8016a64:	2900      	cmp	r1, #0
 8016a66:	d13b      	bne.n	8016ae0 <_reclaim_reent+0x98>
 8016a68:	3504      	adds	r5, #4
 8016a6a:	2d80      	cmp	r5, #128	@ 0x80
 8016a6c:	d1f7      	bne.n	8016a5e <_reclaim_reent+0x16>
 8016a6e:	69e3      	ldr	r3, [r4, #28]
 8016a70:	4620      	mov	r0, r4
 8016a72:	68d9      	ldr	r1, [r3, #12]
 8016a74:	f000 f8c8 	bl	8016c08 <_free_r>
 8016a78:	69e3      	ldr	r3, [r4, #28]
 8016a7a:	6819      	ldr	r1, [r3, #0]
 8016a7c:	b111      	cbz	r1, 8016a84 <_reclaim_reent+0x3c>
 8016a7e:	4620      	mov	r0, r4
 8016a80:	f000 f8c2 	bl	8016c08 <_free_r>
 8016a84:	6961      	ldr	r1, [r4, #20]
 8016a86:	b111      	cbz	r1, 8016a8e <_reclaim_reent+0x46>
 8016a88:	4620      	mov	r0, r4
 8016a8a:	f000 f8bd 	bl	8016c08 <_free_r>
 8016a8e:	69e1      	ldr	r1, [r4, #28]
 8016a90:	b111      	cbz	r1, 8016a98 <_reclaim_reent+0x50>
 8016a92:	4620      	mov	r0, r4
 8016a94:	f000 f8b8 	bl	8016c08 <_free_r>
 8016a98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016a9a:	b111      	cbz	r1, 8016aa2 <_reclaim_reent+0x5a>
 8016a9c:	4620      	mov	r0, r4
 8016a9e:	f000 f8b3 	bl	8016c08 <_free_r>
 8016aa2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016aa4:	b111      	cbz	r1, 8016aac <_reclaim_reent+0x64>
 8016aa6:	4620      	mov	r0, r4
 8016aa8:	f000 f8ae 	bl	8016c08 <_free_r>
 8016aac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8016aae:	b111      	cbz	r1, 8016ab6 <_reclaim_reent+0x6e>
 8016ab0:	4620      	mov	r0, r4
 8016ab2:	f000 f8a9 	bl	8016c08 <_free_r>
 8016ab6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016ab8:	b111      	cbz	r1, 8016ac0 <_reclaim_reent+0x78>
 8016aba:	4620      	mov	r0, r4
 8016abc:	f000 f8a4 	bl	8016c08 <_free_r>
 8016ac0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016ac2:	b111      	cbz	r1, 8016aca <_reclaim_reent+0x82>
 8016ac4:	4620      	mov	r0, r4
 8016ac6:	f000 f89f 	bl	8016c08 <_free_r>
 8016aca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016acc:	b111      	cbz	r1, 8016ad4 <_reclaim_reent+0x8c>
 8016ace:	4620      	mov	r0, r4
 8016ad0:	f000 f89a 	bl	8016c08 <_free_r>
 8016ad4:	6a23      	ldr	r3, [r4, #32]
 8016ad6:	b14b      	cbz	r3, 8016aec <_reclaim_reent+0xa4>
 8016ad8:	4620      	mov	r0, r4
 8016ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ade:	4718      	bx	r3
 8016ae0:	680e      	ldr	r6, [r1, #0]
 8016ae2:	4620      	mov	r0, r4
 8016ae4:	f000 f890 	bl	8016c08 <_free_r>
 8016ae8:	4631      	mov	r1, r6
 8016aea:	e7bb      	b.n	8016a64 <_reclaim_reent+0x1c>
 8016aec:	bd70      	pop	{r4, r5, r6, pc}
 8016aee:	bf00      	nop
 8016af0:	2000003c 	.word	0x2000003c

08016af4 <_lseek_r>:
 8016af4:	b538      	push	{r3, r4, r5, lr}
 8016af6:	4d07      	ldr	r5, [pc, #28]	@ (8016b14 <_lseek_r+0x20>)
 8016af8:	4604      	mov	r4, r0
 8016afa:	4608      	mov	r0, r1
 8016afc:	4611      	mov	r1, r2
 8016afe:	2200      	movs	r2, #0
 8016b00:	602a      	str	r2, [r5, #0]
 8016b02:	461a      	mov	r2, r3
 8016b04:	f7ea faab 	bl	800105e <_lseek>
 8016b08:	1c43      	adds	r3, r0, #1
 8016b0a:	d102      	bne.n	8016b12 <_lseek_r+0x1e>
 8016b0c:	682b      	ldr	r3, [r5, #0]
 8016b0e:	b103      	cbz	r3, 8016b12 <_lseek_r+0x1e>
 8016b10:	6023      	str	r3, [r4, #0]
 8016b12:	bd38      	pop	{r3, r4, r5, pc}
 8016b14:	2000f54c 	.word	0x2000f54c

08016b18 <_read_r>:
 8016b18:	b538      	push	{r3, r4, r5, lr}
 8016b1a:	4d07      	ldr	r5, [pc, #28]	@ (8016b38 <_read_r+0x20>)
 8016b1c:	4604      	mov	r4, r0
 8016b1e:	4608      	mov	r0, r1
 8016b20:	4611      	mov	r1, r2
 8016b22:	2200      	movs	r2, #0
 8016b24:	602a      	str	r2, [r5, #0]
 8016b26:	461a      	mov	r2, r3
 8016b28:	f7ea fa39 	bl	8000f9e <_read>
 8016b2c:	1c43      	adds	r3, r0, #1
 8016b2e:	d102      	bne.n	8016b36 <_read_r+0x1e>
 8016b30:	682b      	ldr	r3, [r5, #0]
 8016b32:	b103      	cbz	r3, 8016b36 <_read_r+0x1e>
 8016b34:	6023      	str	r3, [r4, #0]
 8016b36:	bd38      	pop	{r3, r4, r5, pc}
 8016b38:	2000f54c 	.word	0x2000f54c

08016b3c <_write_r>:
 8016b3c:	b538      	push	{r3, r4, r5, lr}
 8016b3e:	4d07      	ldr	r5, [pc, #28]	@ (8016b5c <_write_r+0x20>)
 8016b40:	4604      	mov	r4, r0
 8016b42:	4608      	mov	r0, r1
 8016b44:	4611      	mov	r1, r2
 8016b46:	2200      	movs	r2, #0
 8016b48:	602a      	str	r2, [r5, #0]
 8016b4a:	461a      	mov	r2, r3
 8016b4c:	f7ea fa44 	bl	8000fd8 <_write>
 8016b50:	1c43      	adds	r3, r0, #1
 8016b52:	d102      	bne.n	8016b5a <_write_r+0x1e>
 8016b54:	682b      	ldr	r3, [r5, #0]
 8016b56:	b103      	cbz	r3, 8016b5a <_write_r+0x1e>
 8016b58:	6023      	str	r3, [r4, #0]
 8016b5a:	bd38      	pop	{r3, r4, r5, pc}
 8016b5c:	2000f54c 	.word	0x2000f54c

08016b60 <__libc_init_array>:
 8016b60:	b570      	push	{r4, r5, r6, lr}
 8016b62:	4d0d      	ldr	r5, [pc, #52]	@ (8016b98 <__libc_init_array+0x38>)
 8016b64:	4c0d      	ldr	r4, [pc, #52]	@ (8016b9c <__libc_init_array+0x3c>)
 8016b66:	1b64      	subs	r4, r4, r5
 8016b68:	10a4      	asrs	r4, r4, #2
 8016b6a:	2600      	movs	r6, #0
 8016b6c:	42a6      	cmp	r6, r4
 8016b6e:	d109      	bne.n	8016b84 <__libc_init_array+0x24>
 8016b70:	4d0b      	ldr	r5, [pc, #44]	@ (8016ba0 <__libc_init_array+0x40>)
 8016b72:	4c0c      	ldr	r4, [pc, #48]	@ (8016ba4 <__libc_init_array+0x44>)
 8016b74:	f000 fe4a 	bl	801780c <_init>
 8016b78:	1b64      	subs	r4, r4, r5
 8016b7a:	10a4      	asrs	r4, r4, #2
 8016b7c:	2600      	movs	r6, #0
 8016b7e:	42a6      	cmp	r6, r4
 8016b80:	d105      	bne.n	8016b8e <__libc_init_array+0x2e>
 8016b82:	bd70      	pop	{r4, r5, r6, pc}
 8016b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b88:	4798      	blx	r3
 8016b8a:	3601      	adds	r6, #1
 8016b8c:	e7ee      	b.n	8016b6c <__libc_init_array+0xc>
 8016b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b92:	4798      	blx	r3
 8016b94:	3601      	adds	r6, #1
 8016b96:	e7f2      	b.n	8016b7e <__libc_init_array+0x1e>
 8016b98:	0801b018 	.word	0x0801b018
 8016b9c:	0801b018 	.word	0x0801b018
 8016ba0:	0801b018 	.word	0x0801b018
 8016ba4:	0801b01c 	.word	0x0801b01c

08016ba8 <__retarget_lock_init_recursive>:
 8016ba8:	4770      	bx	lr

08016baa <__retarget_lock_acquire_recursive>:
 8016baa:	4770      	bx	lr

08016bac <__retarget_lock_release_recursive>:
 8016bac:	4770      	bx	lr

08016bae <memcpy>:
 8016bae:	440a      	add	r2, r1
 8016bb0:	4291      	cmp	r1, r2
 8016bb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8016bb6:	d100      	bne.n	8016bba <memcpy+0xc>
 8016bb8:	4770      	bx	lr
 8016bba:	b510      	push	{r4, lr}
 8016bbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016bc4:	4291      	cmp	r1, r2
 8016bc6:	d1f9      	bne.n	8016bbc <memcpy+0xe>
 8016bc8:	bd10      	pop	{r4, pc}
	...

08016bcc <__assert_func>:
 8016bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016bce:	4614      	mov	r4, r2
 8016bd0:	461a      	mov	r2, r3
 8016bd2:	4b09      	ldr	r3, [pc, #36]	@ (8016bf8 <__assert_func+0x2c>)
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	4605      	mov	r5, r0
 8016bd8:	68d8      	ldr	r0, [r3, #12]
 8016bda:	b954      	cbnz	r4, 8016bf2 <__assert_func+0x26>
 8016bdc:	4b07      	ldr	r3, [pc, #28]	@ (8016bfc <__assert_func+0x30>)
 8016bde:	461c      	mov	r4, r3
 8016be0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016be4:	9100      	str	r1, [sp, #0]
 8016be6:	462b      	mov	r3, r5
 8016be8:	4905      	ldr	r1, [pc, #20]	@ (8016c00 <__assert_func+0x34>)
 8016bea:	f000 fc89 	bl	8017500 <fiprintf>
 8016bee:	f000 fd3d 	bl	801766c <abort>
 8016bf2:	4b04      	ldr	r3, [pc, #16]	@ (8016c04 <__assert_func+0x38>)
 8016bf4:	e7f4      	b.n	8016be0 <__assert_func+0x14>
 8016bf6:	bf00      	nop
 8016bf8:	2000003c 	.word	0x2000003c
 8016bfc:	0801afdc 	.word	0x0801afdc
 8016c00:	0801afae 	.word	0x0801afae
 8016c04:	0801afa1 	.word	0x0801afa1

08016c08 <_free_r>:
 8016c08:	b538      	push	{r3, r4, r5, lr}
 8016c0a:	4605      	mov	r5, r0
 8016c0c:	2900      	cmp	r1, #0
 8016c0e:	d041      	beq.n	8016c94 <_free_r+0x8c>
 8016c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c14:	1f0c      	subs	r4, r1, #4
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	bfb8      	it	lt
 8016c1a:	18e4      	addlt	r4, r4, r3
 8016c1c:	f000 f8e8 	bl	8016df0 <__malloc_lock>
 8016c20:	4a1d      	ldr	r2, [pc, #116]	@ (8016c98 <_free_r+0x90>)
 8016c22:	6813      	ldr	r3, [r2, #0]
 8016c24:	b933      	cbnz	r3, 8016c34 <_free_r+0x2c>
 8016c26:	6063      	str	r3, [r4, #4]
 8016c28:	6014      	str	r4, [r2, #0]
 8016c2a:	4628      	mov	r0, r5
 8016c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016c30:	f000 b8e4 	b.w	8016dfc <__malloc_unlock>
 8016c34:	42a3      	cmp	r3, r4
 8016c36:	d908      	bls.n	8016c4a <_free_r+0x42>
 8016c38:	6820      	ldr	r0, [r4, #0]
 8016c3a:	1821      	adds	r1, r4, r0
 8016c3c:	428b      	cmp	r3, r1
 8016c3e:	bf01      	itttt	eq
 8016c40:	6819      	ldreq	r1, [r3, #0]
 8016c42:	685b      	ldreq	r3, [r3, #4]
 8016c44:	1809      	addeq	r1, r1, r0
 8016c46:	6021      	streq	r1, [r4, #0]
 8016c48:	e7ed      	b.n	8016c26 <_free_r+0x1e>
 8016c4a:	461a      	mov	r2, r3
 8016c4c:	685b      	ldr	r3, [r3, #4]
 8016c4e:	b10b      	cbz	r3, 8016c54 <_free_r+0x4c>
 8016c50:	42a3      	cmp	r3, r4
 8016c52:	d9fa      	bls.n	8016c4a <_free_r+0x42>
 8016c54:	6811      	ldr	r1, [r2, #0]
 8016c56:	1850      	adds	r0, r2, r1
 8016c58:	42a0      	cmp	r0, r4
 8016c5a:	d10b      	bne.n	8016c74 <_free_r+0x6c>
 8016c5c:	6820      	ldr	r0, [r4, #0]
 8016c5e:	4401      	add	r1, r0
 8016c60:	1850      	adds	r0, r2, r1
 8016c62:	4283      	cmp	r3, r0
 8016c64:	6011      	str	r1, [r2, #0]
 8016c66:	d1e0      	bne.n	8016c2a <_free_r+0x22>
 8016c68:	6818      	ldr	r0, [r3, #0]
 8016c6a:	685b      	ldr	r3, [r3, #4]
 8016c6c:	6053      	str	r3, [r2, #4]
 8016c6e:	4408      	add	r0, r1
 8016c70:	6010      	str	r0, [r2, #0]
 8016c72:	e7da      	b.n	8016c2a <_free_r+0x22>
 8016c74:	d902      	bls.n	8016c7c <_free_r+0x74>
 8016c76:	230c      	movs	r3, #12
 8016c78:	602b      	str	r3, [r5, #0]
 8016c7a:	e7d6      	b.n	8016c2a <_free_r+0x22>
 8016c7c:	6820      	ldr	r0, [r4, #0]
 8016c7e:	1821      	adds	r1, r4, r0
 8016c80:	428b      	cmp	r3, r1
 8016c82:	bf04      	itt	eq
 8016c84:	6819      	ldreq	r1, [r3, #0]
 8016c86:	685b      	ldreq	r3, [r3, #4]
 8016c88:	6063      	str	r3, [r4, #4]
 8016c8a:	bf04      	itt	eq
 8016c8c:	1809      	addeq	r1, r1, r0
 8016c8e:	6021      	streq	r1, [r4, #0]
 8016c90:	6054      	str	r4, [r2, #4]
 8016c92:	e7ca      	b.n	8016c2a <_free_r+0x22>
 8016c94:	bd38      	pop	{r3, r4, r5, pc}
 8016c96:	bf00      	nop
 8016c98:	2000f558 	.word	0x2000f558

08016c9c <malloc>:
 8016c9c:	4b02      	ldr	r3, [pc, #8]	@ (8016ca8 <malloc+0xc>)
 8016c9e:	4601      	mov	r1, r0
 8016ca0:	6818      	ldr	r0, [r3, #0]
 8016ca2:	f000 b825 	b.w	8016cf0 <_malloc_r>
 8016ca6:	bf00      	nop
 8016ca8:	2000003c 	.word	0x2000003c

08016cac <sbrk_aligned>:
 8016cac:	b570      	push	{r4, r5, r6, lr}
 8016cae:	4e0f      	ldr	r6, [pc, #60]	@ (8016cec <sbrk_aligned+0x40>)
 8016cb0:	460c      	mov	r4, r1
 8016cb2:	6831      	ldr	r1, [r6, #0]
 8016cb4:	4605      	mov	r5, r0
 8016cb6:	b911      	cbnz	r1, 8016cbe <sbrk_aligned+0x12>
 8016cb8:	f000 fcc8 	bl	801764c <_sbrk_r>
 8016cbc:	6030      	str	r0, [r6, #0]
 8016cbe:	4621      	mov	r1, r4
 8016cc0:	4628      	mov	r0, r5
 8016cc2:	f000 fcc3 	bl	801764c <_sbrk_r>
 8016cc6:	1c43      	adds	r3, r0, #1
 8016cc8:	d103      	bne.n	8016cd2 <sbrk_aligned+0x26>
 8016cca:	f04f 34ff 	mov.w	r4, #4294967295
 8016cce:	4620      	mov	r0, r4
 8016cd0:	bd70      	pop	{r4, r5, r6, pc}
 8016cd2:	1cc4      	adds	r4, r0, #3
 8016cd4:	f024 0403 	bic.w	r4, r4, #3
 8016cd8:	42a0      	cmp	r0, r4
 8016cda:	d0f8      	beq.n	8016cce <sbrk_aligned+0x22>
 8016cdc:	1a21      	subs	r1, r4, r0
 8016cde:	4628      	mov	r0, r5
 8016ce0:	f000 fcb4 	bl	801764c <_sbrk_r>
 8016ce4:	3001      	adds	r0, #1
 8016ce6:	d1f2      	bne.n	8016cce <sbrk_aligned+0x22>
 8016ce8:	e7ef      	b.n	8016cca <sbrk_aligned+0x1e>
 8016cea:	bf00      	nop
 8016cec:	2000f554 	.word	0x2000f554

08016cf0 <_malloc_r>:
 8016cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016cf4:	1ccd      	adds	r5, r1, #3
 8016cf6:	f025 0503 	bic.w	r5, r5, #3
 8016cfa:	3508      	adds	r5, #8
 8016cfc:	2d0c      	cmp	r5, #12
 8016cfe:	bf38      	it	cc
 8016d00:	250c      	movcc	r5, #12
 8016d02:	2d00      	cmp	r5, #0
 8016d04:	4606      	mov	r6, r0
 8016d06:	db01      	blt.n	8016d0c <_malloc_r+0x1c>
 8016d08:	42a9      	cmp	r1, r5
 8016d0a:	d904      	bls.n	8016d16 <_malloc_r+0x26>
 8016d0c:	230c      	movs	r3, #12
 8016d0e:	6033      	str	r3, [r6, #0]
 8016d10:	2000      	movs	r0, #0
 8016d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016dec <_malloc_r+0xfc>
 8016d1a:	f000 f869 	bl	8016df0 <__malloc_lock>
 8016d1e:	f8d8 3000 	ldr.w	r3, [r8]
 8016d22:	461c      	mov	r4, r3
 8016d24:	bb44      	cbnz	r4, 8016d78 <_malloc_r+0x88>
 8016d26:	4629      	mov	r1, r5
 8016d28:	4630      	mov	r0, r6
 8016d2a:	f7ff ffbf 	bl	8016cac <sbrk_aligned>
 8016d2e:	1c43      	adds	r3, r0, #1
 8016d30:	4604      	mov	r4, r0
 8016d32:	d158      	bne.n	8016de6 <_malloc_r+0xf6>
 8016d34:	f8d8 4000 	ldr.w	r4, [r8]
 8016d38:	4627      	mov	r7, r4
 8016d3a:	2f00      	cmp	r7, #0
 8016d3c:	d143      	bne.n	8016dc6 <_malloc_r+0xd6>
 8016d3e:	2c00      	cmp	r4, #0
 8016d40:	d04b      	beq.n	8016dda <_malloc_r+0xea>
 8016d42:	6823      	ldr	r3, [r4, #0]
 8016d44:	4639      	mov	r1, r7
 8016d46:	4630      	mov	r0, r6
 8016d48:	eb04 0903 	add.w	r9, r4, r3
 8016d4c:	f000 fc7e 	bl	801764c <_sbrk_r>
 8016d50:	4581      	cmp	r9, r0
 8016d52:	d142      	bne.n	8016dda <_malloc_r+0xea>
 8016d54:	6821      	ldr	r1, [r4, #0]
 8016d56:	1a6d      	subs	r5, r5, r1
 8016d58:	4629      	mov	r1, r5
 8016d5a:	4630      	mov	r0, r6
 8016d5c:	f7ff ffa6 	bl	8016cac <sbrk_aligned>
 8016d60:	3001      	adds	r0, #1
 8016d62:	d03a      	beq.n	8016dda <_malloc_r+0xea>
 8016d64:	6823      	ldr	r3, [r4, #0]
 8016d66:	442b      	add	r3, r5
 8016d68:	6023      	str	r3, [r4, #0]
 8016d6a:	f8d8 3000 	ldr.w	r3, [r8]
 8016d6e:	685a      	ldr	r2, [r3, #4]
 8016d70:	bb62      	cbnz	r2, 8016dcc <_malloc_r+0xdc>
 8016d72:	f8c8 7000 	str.w	r7, [r8]
 8016d76:	e00f      	b.n	8016d98 <_malloc_r+0xa8>
 8016d78:	6822      	ldr	r2, [r4, #0]
 8016d7a:	1b52      	subs	r2, r2, r5
 8016d7c:	d420      	bmi.n	8016dc0 <_malloc_r+0xd0>
 8016d7e:	2a0b      	cmp	r2, #11
 8016d80:	d917      	bls.n	8016db2 <_malloc_r+0xc2>
 8016d82:	1961      	adds	r1, r4, r5
 8016d84:	42a3      	cmp	r3, r4
 8016d86:	6025      	str	r5, [r4, #0]
 8016d88:	bf18      	it	ne
 8016d8a:	6059      	strne	r1, [r3, #4]
 8016d8c:	6863      	ldr	r3, [r4, #4]
 8016d8e:	bf08      	it	eq
 8016d90:	f8c8 1000 	streq.w	r1, [r8]
 8016d94:	5162      	str	r2, [r4, r5]
 8016d96:	604b      	str	r3, [r1, #4]
 8016d98:	4630      	mov	r0, r6
 8016d9a:	f000 f82f 	bl	8016dfc <__malloc_unlock>
 8016d9e:	f104 000b 	add.w	r0, r4, #11
 8016da2:	1d23      	adds	r3, r4, #4
 8016da4:	f020 0007 	bic.w	r0, r0, #7
 8016da8:	1ac2      	subs	r2, r0, r3
 8016daa:	bf1c      	itt	ne
 8016dac:	1a1b      	subne	r3, r3, r0
 8016dae:	50a3      	strne	r3, [r4, r2]
 8016db0:	e7af      	b.n	8016d12 <_malloc_r+0x22>
 8016db2:	6862      	ldr	r2, [r4, #4]
 8016db4:	42a3      	cmp	r3, r4
 8016db6:	bf0c      	ite	eq
 8016db8:	f8c8 2000 	streq.w	r2, [r8]
 8016dbc:	605a      	strne	r2, [r3, #4]
 8016dbe:	e7eb      	b.n	8016d98 <_malloc_r+0xa8>
 8016dc0:	4623      	mov	r3, r4
 8016dc2:	6864      	ldr	r4, [r4, #4]
 8016dc4:	e7ae      	b.n	8016d24 <_malloc_r+0x34>
 8016dc6:	463c      	mov	r4, r7
 8016dc8:	687f      	ldr	r7, [r7, #4]
 8016dca:	e7b6      	b.n	8016d3a <_malloc_r+0x4a>
 8016dcc:	461a      	mov	r2, r3
 8016dce:	685b      	ldr	r3, [r3, #4]
 8016dd0:	42a3      	cmp	r3, r4
 8016dd2:	d1fb      	bne.n	8016dcc <_malloc_r+0xdc>
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	6053      	str	r3, [r2, #4]
 8016dd8:	e7de      	b.n	8016d98 <_malloc_r+0xa8>
 8016dda:	230c      	movs	r3, #12
 8016ddc:	6033      	str	r3, [r6, #0]
 8016dde:	4630      	mov	r0, r6
 8016de0:	f000 f80c 	bl	8016dfc <__malloc_unlock>
 8016de4:	e794      	b.n	8016d10 <_malloc_r+0x20>
 8016de6:	6005      	str	r5, [r0, #0]
 8016de8:	e7d6      	b.n	8016d98 <_malloc_r+0xa8>
 8016dea:	bf00      	nop
 8016dec:	2000f558 	.word	0x2000f558

08016df0 <__malloc_lock>:
 8016df0:	4801      	ldr	r0, [pc, #4]	@ (8016df8 <__malloc_lock+0x8>)
 8016df2:	f7ff beda 	b.w	8016baa <__retarget_lock_acquire_recursive>
 8016df6:	bf00      	nop
 8016df8:	2000f550 	.word	0x2000f550

08016dfc <__malloc_unlock>:
 8016dfc:	4801      	ldr	r0, [pc, #4]	@ (8016e04 <__malloc_unlock+0x8>)
 8016dfe:	f7ff bed5 	b.w	8016bac <__retarget_lock_release_recursive>
 8016e02:	bf00      	nop
 8016e04:	2000f550 	.word	0x2000f550

08016e08 <__sfputc_r>:
 8016e08:	6893      	ldr	r3, [r2, #8]
 8016e0a:	3b01      	subs	r3, #1
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	b410      	push	{r4}
 8016e10:	6093      	str	r3, [r2, #8]
 8016e12:	da08      	bge.n	8016e26 <__sfputc_r+0x1e>
 8016e14:	6994      	ldr	r4, [r2, #24]
 8016e16:	42a3      	cmp	r3, r4
 8016e18:	db01      	blt.n	8016e1e <__sfputc_r+0x16>
 8016e1a:	290a      	cmp	r1, #10
 8016e1c:	d103      	bne.n	8016e26 <__sfputc_r+0x1e>
 8016e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e22:	f000 bb7f 	b.w	8017524 <__swbuf_r>
 8016e26:	6813      	ldr	r3, [r2, #0]
 8016e28:	1c58      	adds	r0, r3, #1
 8016e2a:	6010      	str	r0, [r2, #0]
 8016e2c:	7019      	strb	r1, [r3, #0]
 8016e2e:	4608      	mov	r0, r1
 8016e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e34:	4770      	bx	lr

08016e36 <__sfputs_r>:
 8016e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e38:	4606      	mov	r6, r0
 8016e3a:	460f      	mov	r7, r1
 8016e3c:	4614      	mov	r4, r2
 8016e3e:	18d5      	adds	r5, r2, r3
 8016e40:	42ac      	cmp	r4, r5
 8016e42:	d101      	bne.n	8016e48 <__sfputs_r+0x12>
 8016e44:	2000      	movs	r0, #0
 8016e46:	e007      	b.n	8016e58 <__sfputs_r+0x22>
 8016e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e4c:	463a      	mov	r2, r7
 8016e4e:	4630      	mov	r0, r6
 8016e50:	f7ff ffda 	bl	8016e08 <__sfputc_r>
 8016e54:	1c43      	adds	r3, r0, #1
 8016e56:	d1f3      	bne.n	8016e40 <__sfputs_r+0xa>
 8016e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016e5c <_vfiprintf_r>:
 8016e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e60:	460d      	mov	r5, r1
 8016e62:	b09d      	sub	sp, #116	@ 0x74
 8016e64:	4614      	mov	r4, r2
 8016e66:	4698      	mov	r8, r3
 8016e68:	4606      	mov	r6, r0
 8016e6a:	b118      	cbz	r0, 8016e74 <_vfiprintf_r+0x18>
 8016e6c:	6a03      	ldr	r3, [r0, #32]
 8016e6e:	b90b      	cbnz	r3, 8016e74 <_vfiprintf_r+0x18>
 8016e70:	f7ff fd36 	bl	80168e0 <__sinit>
 8016e74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016e76:	07d9      	lsls	r1, r3, #31
 8016e78:	d405      	bmi.n	8016e86 <_vfiprintf_r+0x2a>
 8016e7a:	89ab      	ldrh	r3, [r5, #12]
 8016e7c:	059a      	lsls	r2, r3, #22
 8016e7e:	d402      	bmi.n	8016e86 <_vfiprintf_r+0x2a>
 8016e80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016e82:	f7ff fe92 	bl	8016baa <__retarget_lock_acquire_recursive>
 8016e86:	89ab      	ldrh	r3, [r5, #12]
 8016e88:	071b      	lsls	r3, r3, #28
 8016e8a:	d501      	bpl.n	8016e90 <_vfiprintf_r+0x34>
 8016e8c:	692b      	ldr	r3, [r5, #16]
 8016e8e:	b99b      	cbnz	r3, 8016eb8 <_vfiprintf_r+0x5c>
 8016e90:	4629      	mov	r1, r5
 8016e92:	4630      	mov	r0, r6
 8016e94:	f000 fb84 	bl	80175a0 <__swsetup_r>
 8016e98:	b170      	cbz	r0, 8016eb8 <_vfiprintf_r+0x5c>
 8016e9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016e9c:	07dc      	lsls	r4, r3, #31
 8016e9e:	d504      	bpl.n	8016eaa <_vfiprintf_r+0x4e>
 8016ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ea4:	b01d      	add	sp, #116	@ 0x74
 8016ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eaa:	89ab      	ldrh	r3, [r5, #12]
 8016eac:	0598      	lsls	r0, r3, #22
 8016eae:	d4f7      	bmi.n	8016ea0 <_vfiprintf_r+0x44>
 8016eb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016eb2:	f7ff fe7b 	bl	8016bac <__retarget_lock_release_recursive>
 8016eb6:	e7f3      	b.n	8016ea0 <_vfiprintf_r+0x44>
 8016eb8:	2300      	movs	r3, #0
 8016eba:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ebc:	2320      	movs	r3, #32
 8016ebe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8016ec6:	2330      	movs	r3, #48	@ 0x30
 8016ec8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017078 <_vfiprintf_r+0x21c>
 8016ecc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016ed0:	f04f 0901 	mov.w	r9, #1
 8016ed4:	4623      	mov	r3, r4
 8016ed6:	469a      	mov	sl, r3
 8016ed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016edc:	b10a      	cbz	r2, 8016ee2 <_vfiprintf_r+0x86>
 8016ede:	2a25      	cmp	r2, #37	@ 0x25
 8016ee0:	d1f9      	bne.n	8016ed6 <_vfiprintf_r+0x7a>
 8016ee2:	ebba 0b04 	subs.w	fp, sl, r4
 8016ee6:	d00b      	beq.n	8016f00 <_vfiprintf_r+0xa4>
 8016ee8:	465b      	mov	r3, fp
 8016eea:	4622      	mov	r2, r4
 8016eec:	4629      	mov	r1, r5
 8016eee:	4630      	mov	r0, r6
 8016ef0:	f7ff ffa1 	bl	8016e36 <__sfputs_r>
 8016ef4:	3001      	adds	r0, #1
 8016ef6:	f000 80a7 	beq.w	8017048 <_vfiprintf_r+0x1ec>
 8016efa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016efc:	445a      	add	r2, fp
 8016efe:	9209      	str	r2, [sp, #36]	@ 0x24
 8016f00:	f89a 3000 	ldrb.w	r3, [sl]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	f000 809f 	beq.w	8017048 <_vfiprintf_r+0x1ec>
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8016f10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016f14:	f10a 0a01 	add.w	sl, sl, #1
 8016f18:	9304      	str	r3, [sp, #16]
 8016f1a:	9307      	str	r3, [sp, #28]
 8016f1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016f20:	931a      	str	r3, [sp, #104]	@ 0x68
 8016f22:	4654      	mov	r4, sl
 8016f24:	2205      	movs	r2, #5
 8016f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f2a:	4853      	ldr	r0, [pc, #332]	@ (8017078 <_vfiprintf_r+0x21c>)
 8016f2c:	f7e9 f968 	bl	8000200 <memchr>
 8016f30:	9a04      	ldr	r2, [sp, #16]
 8016f32:	b9d8      	cbnz	r0, 8016f6c <_vfiprintf_r+0x110>
 8016f34:	06d1      	lsls	r1, r2, #27
 8016f36:	bf44      	itt	mi
 8016f38:	2320      	movmi	r3, #32
 8016f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016f3e:	0713      	lsls	r3, r2, #28
 8016f40:	bf44      	itt	mi
 8016f42:	232b      	movmi	r3, #43	@ 0x2b
 8016f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016f48:	f89a 3000 	ldrb.w	r3, [sl]
 8016f4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8016f4e:	d015      	beq.n	8016f7c <_vfiprintf_r+0x120>
 8016f50:	9a07      	ldr	r2, [sp, #28]
 8016f52:	4654      	mov	r4, sl
 8016f54:	2000      	movs	r0, #0
 8016f56:	f04f 0c0a 	mov.w	ip, #10
 8016f5a:	4621      	mov	r1, r4
 8016f5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016f60:	3b30      	subs	r3, #48	@ 0x30
 8016f62:	2b09      	cmp	r3, #9
 8016f64:	d94b      	bls.n	8016ffe <_vfiprintf_r+0x1a2>
 8016f66:	b1b0      	cbz	r0, 8016f96 <_vfiprintf_r+0x13a>
 8016f68:	9207      	str	r2, [sp, #28]
 8016f6a:	e014      	b.n	8016f96 <_vfiprintf_r+0x13a>
 8016f6c:	eba0 0308 	sub.w	r3, r0, r8
 8016f70:	fa09 f303 	lsl.w	r3, r9, r3
 8016f74:	4313      	orrs	r3, r2
 8016f76:	9304      	str	r3, [sp, #16]
 8016f78:	46a2      	mov	sl, r4
 8016f7a:	e7d2      	b.n	8016f22 <_vfiprintf_r+0xc6>
 8016f7c:	9b03      	ldr	r3, [sp, #12]
 8016f7e:	1d19      	adds	r1, r3, #4
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	9103      	str	r1, [sp, #12]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	bfbb      	ittet	lt
 8016f88:	425b      	neglt	r3, r3
 8016f8a:	f042 0202 	orrlt.w	r2, r2, #2
 8016f8e:	9307      	strge	r3, [sp, #28]
 8016f90:	9307      	strlt	r3, [sp, #28]
 8016f92:	bfb8      	it	lt
 8016f94:	9204      	strlt	r2, [sp, #16]
 8016f96:	7823      	ldrb	r3, [r4, #0]
 8016f98:	2b2e      	cmp	r3, #46	@ 0x2e
 8016f9a:	d10a      	bne.n	8016fb2 <_vfiprintf_r+0x156>
 8016f9c:	7863      	ldrb	r3, [r4, #1]
 8016f9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016fa0:	d132      	bne.n	8017008 <_vfiprintf_r+0x1ac>
 8016fa2:	9b03      	ldr	r3, [sp, #12]
 8016fa4:	1d1a      	adds	r2, r3, #4
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	9203      	str	r2, [sp, #12]
 8016faa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016fae:	3402      	adds	r4, #2
 8016fb0:	9305      	str	r3, [sp, #20]
 8016fb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017088 <_vfiprintf_r+0x22c>
 8016fb6:	7821      	ldrb	r1, [r4, #0]
 8016fb8:	2203      	movs	r2, #3
 8016fba:	4650      	mov	r0, sl
 8016fbc:	f7e9 f920 	bl	8000200 <memchr>
 8016fc0:	b138      	cbz	r0, 8016fd2 <_vfiprintf_r+0x176>
 8016fc2:	9b04      	ldr	r3, [sp, #16]
 8016fc4:	eba0 000a 	sub.w	r0, r0, sl
 8016fc8:	2240      	movs	r2, #64	@ 0x40
 8016fca:	4082      	lsls	r2, r0
 8016fcc:	4313      	orrs	r3, r2
 8016fce:	3401      	adds	r4, #1
 8016fd0:	9304      	str	r3, [sp, #16]
 8016fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016fd6:	4829      	ldr	r0, [pc, #164]	@ (801707c <_vfiprintf_r+0x220>)
 8016fd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016fdc:	2206      	movs	r2, #6
 8016fde:	f7e9 f90f 	bl	8000200 <memchr>
 8016fe2:	2800      	cmp	r0, #0
 8016fe4:	d03f      	beq.n	8017066 <_vfiprintf_r+0x20a>
 8016fe6:	4b26      	ldr	r3, [pc, #152]	@ (8017080 <_vfiprintf_r+0x224>)
 8016fe8:	bb1b      	cbnz	r3, 8017032 <_vfiprintf_r+0x1d6>
 8016fea:	9b03      	ldr	r3, [sp, #12]
 8016fec:	3307      	adds	r3, #7
 8016fee:	f023 0307 	bic.w	r3, r3, #7
 8016ff2:	3308      	adds	r3, #8
 8016ff4:	9303      	str	r3, [sp, #12]
 8016ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ff8:	443b      	add	r3, r7
 8016ffa:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ffc:	e76a      	b.n	8016ed4 <_vfiprintf_r+0x78>
 8016ffe:	fb0c 3202 	mla	r2, ip, r2, r3
 8017002:	460c      	mov	r4, r1
 8017004:	2001      	movs	r0, #1
 8017006:	e7a8      	b.n	8016f5a <_vfiprintf_r+0xfe>
 8017008:	2300      	movs	r3, #0
 801700a:	3401      	adds	r4, #1
 801700c:	9305      	str	r3, [sp, #20]
 801700e:	4619      	mov	r1, r3
 8017010:	f04f 0c0a 	mov.w	ip, #10
 8017014:	4620      	mov	r0, r4
 8017016:	f810 2b01 	ldrb.w	r2, [r0], #1
 801701a:	3a30      	subs	r2, #48	@ 0x30
 801701c:	2a09      	cmp	r2, #9
 801701e:	d903      	bls.n	8017028 <_vfiprintf_r+0x1cc>
 8017020:	2b00      	cmp	r3, #0
 8017022:	d0c6      	beq.n	8016fb2 <_vfiprintf_r+0x156>
 8017024:	9105      	str	r1, [sp, #20]
 8017026:	e7c4      	b.n	8016fb2 <_vfiprintf_r+0x156>
 8017028:	fb0c 2101 	mla	r1, ip, r1, r2
 801702c:	4604      	mov	r4, r0
 801702e:	2301      	movs	r3, #1
 8017030:	e7f0      	b.n	8017014 <_vfiprintf_r+0x1b8>
 8017032:	ab03      	add	r3, sp, #12
 8017034:	9300      	str	r3, [sp, #0]
 8017036:	462a      	mov	r2, r5
 8017038:	4b12      	ldr	r3, [pc, #72]	@ (8017084 <_vfiprintf_r+0x228>)
 801703a:	a904      	add	r1, sp, #16
 801703c:	4630      	mov	r0, r6
 801703e:	f3af 8000 	nop.w
 8017042:	4607      	mov	r7, r0
 8017044:	1c78      	adds	r0, r7, #1
 8017046:	d1d6      	bne.n	8016ff6 <_vfiprintf_r+0x19a>
 8017048:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801704a:	07d9      	lsls	r1, r3, #31
 801704c:	d405      	bmi.n	801705a <_vfiprintf_r+0x1fe>
 801704e:	89ab      	ldrh	r3, [r5, #12]
 8017050:	059a      	lsls	r2, r3, #22
 8017052:	d402      	bmi.n	801705a <_vfiprintf_r+0x1fe>
 8017054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017056:	f7ff fda9 	bl	8016bac <__retarget_lock_release_recursive>
 801705a:	89ab      	ldrh	r3, [r5, #12]
 801705c:	065b      	lsls	r3, r3, #25
 801705e:	f53f af1f 	bmi.w	8016ea0 <_vfiprintf_r+0x44>
 8017062:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017064:	e71e      	b.n	8016ea4 <_vfiprintf_r+0x48>
 8017066:	ab03      	add	r3, sp, #12
 8017068:	9300      	str	r3, [sp, #0]
 801706a:	462a      	mov	r2, r5
 801706c:	4b05      	ldr	r3, [pc, #20]	@ (8017084 <_vfiprintf_r+0x228>)
 801706e:	a904      	add	r1, sp, #16
 8017070:	4630      	mov	r0, r6
 8017072:	f000 f879 	bl	8017168 <_printf_i>
 8017076:	e7e4      	b.n	8017042 <_vfiprintf_r+0x1e6>
 8017078:	0801afdd 	.word	0x0801afdd
 801707c:	0801afe7 	.word	0x0801afe7
 8017080:	00000000 	.word	0x00000000
 8017084:	08016e37 	.word	0x08016e37
 8017088:	0801afe3 	.word	0x0801afe3

0801708c <_printf_common>:
 801708c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017090:	4616      	mov	r6, r2
 8017092:	4698      	mov	r8, r3
 8017094:	688a      	ldr	r2, [r1, #8]
 8017096:	690b      	ldr	r3, [r1, #16]
 8017098:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801709c:	4293      	cmp	r3, r2
 801709e:	bfb8      	it	lt
 80170a0:	4613      	movlt	r3, r2
 80170a2:	6033      	str	r3, [r6, #0]
 80170a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80170a8:	4607      	mov	r7, r0
 80170aa:	460c      	mov	r4, r1
 80170ac:	b10a      	cbz	r2, 80170b2 <_printf_common+0x26>
 80170ae:	3301      	adds	r3, #1
 80170b0:	6033      	str	r3, [r6, #0]
 80170b2:	6823      	ldr	r3, [r4, #0]
 80170b4:	0699      	lsls	r1, r3, #26
 80170b6:	bf42      	ittt	mi
 80170b8:	6833      	ldrmi	r3, [r6, #0]
 80170ba:	3302      	addmi	r3, #2
 80170bc:	6033      	strmi	r3, [r6, #0]
 80170be:	6825      	ldr	r5, [r4, #0]
 80170c0:	f015 0506 	ands.w	r5, r5, #6
 80170c4:	d106      	bne.n	80170d4 <_printf_common+0x48>
 80170c6:	f104 0a19 	add.w	sl, r4, #25
 80170ca:	68e3      	ldr	r3, [r4, #12]
 80170cc:	6832      	ldr	r2, [r6, #0]
 80170ce:	1a9b      	subs	r3, r3, r2
 80170d0:	42ab      	cmp	r3, r5
 80170d2:	dc26      	bgt.n	8017122 <_printf_common+0x96>
 80170d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80170d8:	6822      	ldr	r2, [r4, #0]
 80170da:	3b00      	subs	r3, #0
 80170dc:	bf18      	it	ne
 80170de:	2301      	movne	r3, #1
 80170e0:	0692      	lsls	r2, r2, #26
 80170e2:	d42b      	bmi.n	801713c <_printf_common+0xb0>
 80170e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80170e8:	4641      	mov	r1, r8
 80170ea:	4638      	mov	r0, r7
 80170ec:	47c8      	blx	r9
 80170ee:	3001      	adds	r0, #1
 80170f0:	d01e      	beq.n	8017130 <_printf_common+0xa4>
 80170f2:	6823      	ldr	r3, [r4, #0]
 80170f4:	6922      	ldr	r2, [r4, #16]
 80170f6:	f003 0306 	and.w	r3, r3, #6
 80170fa:	2b04      	cmp	r3, #4
 80170fc:	bf02      	ittt	eq
 80170fe:	68e5      	ldreq	r5, [r4, #12]
 8017100:	6833      	ldreq	r3, [r6, #0]
 8017102:	1aed      	subeq	r5, r5, r3
 8017104:	68a3      	ldr	r3, [r4, #8]
 8017106:	bf0c      	ite	eq
 8017108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801710c:	2500      	movne	r5, #0
 801710e:	4293      	cmp	r3, r2
 8017110:	bfc4      	itt	gt
 8017112:	1a9b      	subgt	r3, r3, r2
 8017114:	18ed      	addgt	r5, r5, r3
 8017116:	2600      	movs	r6, #0
 8017118:	341a      	adds	r4, #26
 801711a:	42b5      	cmp	r5, r6
 801711c:	d11a      	bne.n	8017154 <_printf_common+0xc8>
 801711e:	2000      	movs	r0, #0
 8017120:	e008      	b.n	8017134 <_printf_common+0xa8>
 8017122:	2301      	movs	r3, #1
 8017124:	4652      	mov	r2, sl
 8017126:	4641      	mov	r1, r8
 8017128:	4638      	mov	r0, r7
 801712a:	47c8      	blx	r9
 801712c:	3001      	adds	r0, #1
 801712e:	d103      	bne.n	8017138 <_printf_common+0xac>
 8017130:	f04f 30ff 	mov.w	r0, #4294967295
 8017134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017138:	3501      	adds	r5, #1
 801713a:	e7c6      	b.n	80170ca <_printf_common+0x3e>
 801713c:	18e1      	adds	r1, r4, r3
 801713e:	1c5a      	adds	r2, r3, #1
 8017140:	2030      	movs	r0, #48	@ 0x30
 8017142:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017146:	4422      	add	r2, r4
 8017148:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801714c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017150:	3302      	adds	r3, #2
 8017152:	e7c7      	b.n	80170e4 <_printf_common+0x58>
 8017154:	2301      	movs	r3, #1
 8017156:	4622      	mov	r2, r4
 8017158:	4641      	mov	r1, r8
 801715a:	4638      	mov	r0, r7
 801715c:	47c8      	blx	r9
 801715e:	3001      	adds	r0, #1
 8017160:	d0e6      	beq.n	8017130 <_printf_common+0xa4>
 8017162:	3601      	adds	r6, #1
 8017164:	e7d9      	b.n	801711a <_printf_common+0x8e>
	...

08017168 <_printf_i>:
 8017168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801716c:	7e0f      	ldrb	r7, [r1, #24]
 801716e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017170:	2f78      	cmp	r7, #120	@ 0x78
 8017172:	4691      	mov	r9, r2
 8017174:	4680      	mov	r8, r0
 8017176:	460c      	mov	r4, r1
 8017178:	469a      	mov	sl, r3
 801717a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801717e:	d807      	bhi.n	8017190 <_printf_i+0x28>
 8017180:	2f62      	cmp	r7, #98	@ 0x62
 8017182:	d80a      	bhi.n	801719a <_printf_i+0x32>
 8017184:	2f00      	cmp	r7, #0
 8017186:	f000 80d2 	beq.w	801732e <_printf_i+0x1c6>
 801718a:	2f58      	cmp	r7, #88	@ 0x58
 801718c:	f000 80b9 	beq.w	8017302 <_printf_i+0x19a>
 8017190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017194:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017198:	e03a      	b.n	8017210 <_printf_i+0xa8>
 801719a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801719e:	2b15      	cmp	r3, #21
 80171a0:	d8f6      	bhi.n	8017190 <_printf_i+0x28>
 80171a2:	a101      	add	r1, pc, #4	@ (adr r1, 80171a8 <_printf_i+0x40>)
 80171a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80171a8:	08017201 	.word	0x08017201
 80171ac:	08017215 	.word	0x08017215
 80171b0:	08017191 	.word	0x08017191
 80171b4:	08017191 	.word	0x08017191
 80171b8:	08017191 	.word	0x08017191
 80171bc:	08017191 	.word	0x08017191
 80171c0:	08017215 	.word	0x08017215
 80171c4:	08017191 	.word	0x08017191
 80171c8:	08017191 	.word	0x08017191
 80171cc:	08017191 	.word	0x08017191
 80171d0:	08017191 	.word	0x08017191
 80171d4:	08017315 	.word	0x08017315
 80171d8:	0801723f 	.word	0x0801723f
 80171dc:	080172cf 	.word	0x080172cf
 80171e0:	08017191 	.word	0x08017191
 80171e4:	08017191 	.word	0x08017191
 80171e8:	08017337 	.word	0x08017337
 80171ec:	08017191 	.word	0x08017191
 80171f0:	0801723f 	.word	0x0801723f
 80171f4:	08017191 	.word	0x08017191
 80171f8:	08017191 	.word	0x08017191
 80171fc:	080172d7 	.word	0x080172d7
 8017200:	6833      	ldr	r3, [r6, #0]
 8017202:	1d1a      	adds	r2, r3, #4
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	6032      	str	r2, [r6, #0]
 8017208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801720c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017210:	2301      	movs	r3, #1
 8017212:	e09d      	b.n	8017350 <_printf_i+0x1e8>
 8017214:	6833      	ldr	r3, [r6, #0]
 8017216:	6820      	ldr	r0, [r4, #0]
 8017218:	1d19      	adds	r1, r3, #4
 801721a:	6031      	str	r1, [r6, #0]
 801721c:	0606      	lsls	r6, r0, #24
 801721e:	d501      	bpl.n	8017224 <_printf_i+0xbc>
 8017220:	681d      	ldr	r5, [r3, #0]
 8017222:	e003      	b.n	801722c <_printf_i+0xc4>
 8017224:	0645      	lsls	r5, r0, #25
 8017226:	d5fb      	bpl.n	8017220 <_printf_i+0xb8>
 8017228:	f9b3 5000 	ldrsh.w	r5, [r3]
 801722c:	2d00      	cmp	r5, #0
 801722e:	da03      	bge.n	8017238 <_printf_i+0xd0>
 8017230:	232d      	movs	r3, #45	@ 0x2d
 8017232:	426d      	negs	r5, r5
 8017234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017238:	4859      	ldr	r0, [pc, #356]	@ (80173a0 <_printf_i+0x238>)
 801723a:	230a      	movs	r3, #10
 801723c:	e011      	b.n	8017262 <_printf_i+0xfa>
 801723e:	6821      	ldr	r1, [r4, #0]
 8017240:	6833      	ldr	r3, [r6, #0]
 8017242:	0608      	lsls	r0, r1, #24
 8017244:	f853 5b04 	ldr.w	r5, [r3], #4
 8017248:	d402      	bmi.n	8017250 <_printf_i+0xe8>
 801724a:	0649      	lsls	r1, r1, #25
 801724c:	bf48      	it	mi
 801724e:	b2ad      	uxthmi	r5, r5
 8017250:	2f6f      	cmp	r7, #111	@ 0x6f
 8017252:	4853      	ldr	r0, [pc, #332]	@ (80173a0 <_printf_i+0x238>)
 8017254:	6033      	str	r3, [r6, #0]
 8017256:	bf14      	ite	ne
 8017258:	230a      	movne	r3, #10
 801725a:	2308      	moveq	r3, #8
 801725c:	2100      	movs	r1, #0
 801725e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017262:	6866      	ldr	r6, [r4, #4]
 8017264:	60a6      	str	r6, [r4, #8]
 8017266:	2e00      	cmp	r6, #0
 8017268:	bfa2      	ittt	ge
 801726a:	6821      	ldrge	r1, [r4, #0]
 801726c:	f021 0104 	bicge.w	r1, r1, #4
 8017270:	6021      	strge	r1, [r4, #0]
 8017272:	b90d      	cbnz	r5, 8017278 <_printf_i+0x110>
 8017274:	2e00      	cmp	r6, #0
 8017276:	d04b      	beq.n	8017310 <_printf_i+0x1a8>
 8017278:	4616      	mov	r6, r2
 801727a:	fbb5 f1f3 	udiv	r1, r5, r3
 801727e:	fb03 5711 	mls	r7, r3, r1, r5
 8017282:	5dc7      	ldrb	r7, [r0, r7]
 8017284:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017288:	462f      	mov	r7, r5
 801728a:	42bb      	cmp	r3, r7
 801728c:	460d      	mov	r5, r1
 801728e:	d9f4      	bls.n	801727a <_printf_i+0x112>
 8017290:	2b08      	cmp	r3, #8
 8017292:	d10b      	bne.n	80172ac <_printf_i+0x144>
 8017294:	6823      	ldr	r3, [r4, #0]
 8017296:	07df      	lsls	r7, r3, #31
 8017298:	d508      	bpl.n	80172ac <_printf_i+0x144>
 801729a:	6923      	ldr	r3, [r4, #16]
 801729c:	6861      	ldr	r1, [r4, #4]
 801729e:	4299      	cmp	r1, r3
 80172a0:	bfde      	ittt	le
 80172a2:	2330      	movle	r3, #48	@ 0x30
 80172a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80172a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80172ac:	1b92      	subs	r2, r2, r6
 80172ae:	6122      	str	r2, [r4, #16]
 80172b0:	f8cd a000 	str.w	sl, [sp]
 80172b4:	464b      	mov	r3, r9
 80172b6:	aa03      	add	r2, sp, #12
 80172b8:	4621      	mov	r1, r4
 80172ba:	4640      	mov	r0, r8
 80172bc:	f7ff fee6 	bl	801708c <_printf_common>
 80172c0:	3001      	adds	r0, #1
 80172c2:	d14a      	bne.n	801735a <_printf_i+0x1f2>
 80172c4:	f04f 30ff 	mov.w	r0, #4294967295
 80172c8:	b004      	add	sp, #16
 80172ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172ce:	6823      	ldr	r3, [r4, #0]
 80172d0:	f043 0320 	orr.w	r3, r3, #32
 80172d4:	6023      	str	r3, [r4, #0]
 80172d6:	4833      	ldr	r0, [pc, #204]	@ (80173a4 <_printf_i+0x23c>)
 80172d8:	2778      	movs	r7, #120	@ 0x78
 80172da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80172de:	6823      	ldr	r3, [r4, #0]
 80172e0:	6831      	ldr	r1, [r6, #0]
 80172e2:	061f      	lsls	r7, r3, #24
 80172e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80172e8:	d402      	bmi.n	80172f0 <_printf_i+0x188>
 80172ea:	065f      	lsls	r7, r3, #25
 80172ec:	bf48      	it	mi
 80172ee:	b2ad      	uxthmi	r5, r5
 80172f0:	6031      	str	r1, [r6, #0]
 80172f2:	07d9      	lsls	r1, r3, #31
 80172f4:	bf44      	itt	mi
 80172f6:	f043 0320 	orrmi.w	r3, r3, #32
 80172fa:	6023      	strmi	r3, [r4, #0]
 80172fc:	b11d      	cbz	r5, 8017306 <_printf_i+0x19e>
 80172fe:	2310      	movs	r3, #16
 8017300:	e7ac      	b.n	801725c <_printf_i+0xf4>
 8017302:	4827      	ldr	r0, [pc, #156]	@ (80173a0 <_printf_i+0x238>)
 8017304:	e7e9      	b.n	80172da <_printf_i+0x172>
 8017306:	6823      	ldr	r3, [r4, #0]
 8017308:	f023 0320 	bic.w	r3, r3, #32
 801730c:	6023      	str	r3, [r4, #0]
 801730e:	e7f6      	b.n	80172fe <_printf_i+0x196>
 8017310:	4616      	mov	r6, r2
 8017312:	e7bd      	b.n	8017290 <_printf_i+0x128>
 8017314:	6833      	ldr	r3, [r6, #0]
 8017316:	6825      	ldr	r5, [r4, #0]
 8017318:	6961      	ldr	r1, [r4, #20]
 801731a:	1d18      	adds	r0, r3, #4
 801731c:	6030      	str	r0, [r6, #0]
 801731e:	062e      	lsls	r6, r5, #24
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	d501      	bpl.n	8017328 <_printf_i+0x1c0>
 8017324:	6019      	str	r1, [r3, #0]
 8017326:	e002      	b.n	801732e <_printf_i+0x1c6>
 8017328:	0668      	lsls	r0, r5, #25
 801732a:	d5fb      	bpl.n	8017324 <_printf_i+0x1bc>
 801732c:	8019      	strh	r1, [r3, #0]
 801732e:	2300      	movs	r3, #0
 8017330:	6123      	str	r3, [r4, #16]
 8017332:	4616      	mov	r6, r2
 8017334:	e7bc      	b.n	80172b0 <_printf_i+0x148>
 8017336:	6833      	ldr	r3, [r6, #0]
 8017338:	1d1a      	adds	r2, r3, #4
 801733a:	6032      	str	r2, [r6, #0]
 801733c:	681e      	ldr	r6, [r3, #0]
 801733e:	6862      	ldr	r2, [r4, #4]
 8017340:	2100      	movs	r1, #0
 8017342:	4630      	mov	r0, r6
 8017344:	f7e8 ff5c 	bl	8000200 <memchr>
 8017348:	b108      	cbz	r0, 801734e <_printf_i+0x1e6>
 801734a:	1b80      	subs	r0, r0, r6
 801734c:	6060      	str	r0, [r4, #4]
 801734e:	6863      	ldr	r3, [r4, #4]
 8017350:	6123      	str	r3, [r4, #16]
 8017352:	2300      	movs	r3, #0
 8017354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017358:	e7aa      	b.n	80172b0 <_printf_i+0x148>
 801735a:	6923      	ldr	r3, [r4, #16]
 801735c:	4632      	mov	r2, r6
 801735e:	4649      	mov	r1, r9
 8017360:	4640      	mov	r0, r8
 8017362:	47d0      	blx	sl
 8017364:	3001      	adds	r0, #1
 8017366:	d0ad      	beq.n	80172c4 <_printf_i+0x15c>
 8017368:	6823      	ldr	r3, [r4, #0]
 801736a:	079b      	lsls	r3, r3, #30
 801736c:	d413      	bmi.n	8017396 <_printf_i+0x22e>
 801736e:	68e0      	ldr	r0, [r4, #12]
 8017370:	9b03      	ldr	r3, [sp, #12]
 8017372:	4298      	cmp	r0, r3
 8017374:	bfb8      	it	lt
 8017376:	4618      	movlt	r0, r3
 8017378:	e7a6      	b.n	80172c8 <_printf_i+0x160>
 801737a:	2301      	movs	r3, #1
 801737c:	4632      	mov	r2, r6
 801737e:	4649      	mov	r1, r9
 8017380:	4640      	mov	r0, r8
 8017382:	47d0      	blx	sl
 8017384:	3001      	adds	r0, #1
 8017386:	d09d      	beq.n	80172c4 <_printf_i+0x15c>
 8017388:	3501      	adds	r5, #1
 801738a:	68e3      	ldr	r3, [r4, #12]
 801738c:	9903      	ldr	r1, [sp, #12]
 801738e:	1a5b      	subs	r3, r3, r1
 8017390:	42ab      	cmp	r3, r5
 8017392:	dcf2      	bgt.n	801737a <_printf_i+0x212>
 8017394:	e7eb      	b.n	801736e <_printf_i+0x206>
 8017396:	2500      	movs	r5, #0
 8017398:	f104 0619 	add.w	r6, r4, #25
 801739c:	e7f5      	b.n	801738a <_printf_i+0x222>
 801739e:	bf00      	nop
 80173a0:	0801afee 	.word	0x0801afee
 80173a4:	0801afff 	.word	0x0801afff

080173a8 <__sflush_r>:
 80173a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80173ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173b0:	0716      	lsls	r6, r2, #28
 80173b2:	4605      	mov	r5, r0
 80173b4:	460c      	mov	r4, r1
 80173b6:	d454      	bmi.n	8017462 <__sflush_r+0xba>
 80173b8:	684b      	ldr	r3, [r1, #4]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	dc02      	bgt.n	80173c4 <__sflush_r+0x1c>
 80173be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	dd48      	ble.n	8017456 <__sflush_r+0xae>
 80173c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80173c6:	2e00      	cmp	r6, #0
 80173c8:	d045      	beq.n	8017456 <__sflush_r+0xae>
 80173ca:	2300      	movs	r3, #0
 80173cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80173d0:	682f      	ldr	r7, [r5, #0]
 80173d2:	6a21      	ldr	r1, [r4, #32]
 80173d4:	602b      	str	r3, [r5, #0]
 80173d6:	d030      	beq.n	801743a <__sflush_r+0x92>
 80173d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80173da:	89a3      	ldrh	r3, [r4, #12]
 80173dc:	0759      	lsls	r1, r3, #29
 80173de:	d505      	bpl.n	80173ec <__sflush_r+0x44>
 80173e0:	6863      	ldr	r3, [r4, #4]
 80173e2:	1ad2      	subs	r2, r2, r3
 80173e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80173e6:	b10b      	cbz	r3, 80173ec <__sflush_r+0x44>
 80173e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80173ea:	1ad2      	subs	r2, r2, r3
 80173ec:	2300      	movs	r3, #0
 80173ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80173f0:	6a21      	ldr	r1, [r4, #32]
 80173f2:	4628      	mov	r0, r5
 80173f4:	47b0      	blx	r6
 80173f6:	1c43      	adds	r3, r0, #1
 80173f8:	89a3      	ldrh	r3, [r4, #12]
 80173fa:	d106      	bne.n	801740a <__sflush_r+0x62>
 80173fc:	6829      	ldr	r1, [r5, #0]
 80173fe:	291d      	cmp	r1, #29
 8017400:	d82b      	bhi.n	801745a <__sflush_r+0xb2>
 8017402:	4a2a      	ldr	r2, [pc, #168]	@ (80174ac <__sflush_r+0x104>)
 8017404:	410a      	asrs	r2, r1
 8017406:	07d6      	lsls	r6, r2, #31
 8017408:	d427      	bmi.n	801745a <__sflush_r+0xb2>
 801740a:	2200      	movs	r2, #0
 801740c:	6062      	str	r2, [r4, #4]
 801740e:	04d9      	lsls	r1, r3, #19
 8017410:	6922      	ldr	r2, [r4, #16]
 8017412:	6022      	str	r2, [r4, #0]
 8017414:	d504      	bpl.n	8017420 <__sflush_r+0x78>
 8017416:	1c42      	adds	r2, r0, #1
 8017418:	d101      	bne.n	801741e <__sflush_r+0x76>
 801741a:	682b      	ldr	r3, [r5, #0]
 801741c:	b903      	cbnz	r3, 8017420 <__sflush_r+0x78>
 801741e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017420:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017422:	602f      	str	r7, [r5, #0]
 8017424:	b1b9      	cbz	r1, 8017456 <__sflush_r+0xae>
 8017426:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801742a:	4299      	cmp	r1, r3
 801742c:	d002      	beq.n	8017434 <__sflush_r+0x8c>
 801742e:	4628      	mov	r0, r5
 8017430:	f7ff fbea 	bl	8016c08 <_free_r>
 8017434:	2300      	movs	r3, #0
 8017436:	6363      	str	r3, [r4, #52]	@ 0x34
 8017438:	e00d      	b.n	8017456 <__sflush_r+0xae>
 801743a:	2301      	movs	r3, #1
 801743c:	4628      	mov	r0, r5
 801743e:	47b0      	blx	r6
 8017440:	4602      	mov	r2, r0
 8017442:	1c50      	adds	r0, r2, #1
 8017444:	d1c9      	bne.n	80173da <__sflush_r+0x32>
 8017446:	682b      	ldr	r3, [r5, #0]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d0c6      	beq.n	80173da <__sflush_r+0x32>
 801744c:	2b1d      	cmp	r3, #29
 801744e:	d001      	beq.n	8017454 <__sflush_r+0xac>
 8017450:	2b16      	cmp	r3, #22
 8017452:	d11e      	bne.n	8017492 <__sflush_r+0xea>
 8017454:	602f      	str	r7, [r5, #0]
 8017456:	2000      	movs	r0, #0
 8017458:	e022      	b.n	80174a0 <__sflush_r+0xf8>
 801745a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801745e:	b21b      	sxth	r3, r3
 8017460:	e01b      	b.n	801749a <__sflush_r+0xf2>
 8017462:	690f      	ldr	r7, [r1, #16]
 8017464:	2f00      	cmp	r7, #0
 8017466:	d0f6      	beq.n	8017456 <__sflush_r+0xae>
 8017468:	0793      	lsls	r3, r2, #30
 801746a:	680e      	ldr	r6, [r1, #0]
 801746c:	bf08      	it	eq
 801746e:	694b      	ldreq	r3, [r1, #20]
 8017470:	600f      	str	r7, [r1, #0]
 8017472:	bf18      	it	ne
 8017474:	2300      	movne	r3, #0
 8017476:	eba6 0807 	sub.w	r8, r6, r7
 801747a:	608b      	str	r3, [r1, #8]
 801747c:	f1b8 0f00 	cmp.w	r8, #0
 8017480:	dde9      	ble.n	8017456 <__sflush_r+0xae>
 8017482:	6a21      	ldr	r1, [r4, #32]
 8017484:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017486:	4643      	mov	r3, r8
 8017488:	463a      	mov	r2, r7
 801748a:	4628      	mov	r0, r5
 801748c:	47b0      	blx	r6
 801748e:	2800      	cmp	r0, #0
 8017490:	dc08      	bgt.n	80174a4 <__sflush_r+0xfc>
 8017492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801749a:	81a3      	strh	r3, [r4, #12]
 801749c:	f04f 30ff 	mov.w	r0, #4294967295
 80174a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174a4:	4407      	add	r7, r0
 80174a6:	eba8 0800 	sub.w	r8, r8, r0
 80174aa:	e7e7      	b.n	801747c <__sflush_r+0xd4>
 80174ac:	dfbffffe 	.word	0xdfbffffe

080174b0 <_fflush_r>:
 80174b0:	b538      	push	{r3, r4, r5, lr}
 80174b2:	690b      	ldr	r3, [r1, #16]
 80174b4:	4605      	mov	r5, r0
 80174b6:	460c      	mov	r4, r1
 80174b8:	b913      	cbnz	r3, 80174c0 <_fflush_r+0x10>
 80174ba:	2500      	movs	r5, #0
 80174bc:	4628      	mov	r0, r5
 80174be:	bd38      	pop	{r3, r4, r5, pc}
 80174c0:	b118      	cbz	r0, 80174ca <_fflush_r+0x1a>
 80174c2:	6a03      	ldr	r3, [r0, #32]
 80174c4:	b90b      	cbnz	r3, 80174ca <_fflush_r+0x1a>
 80174c6:	f7ff fa0b 	bl	80168e0 <__sinit>
 80174ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d0f3      	beq.n	80174ba <_fflush_r+0xa>
 80174d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80174d4:	07d0      	lsls	r0, r2, #31
 80174d6:	d404      	bmi.n	80174e2 <_fflush_r+0x32>
 80174d8:	0599      	lsls	r1, r3, #22
 80174da:	d402      	bmi.n	80174e2 <_fflush_r+0x32>
 80174dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80174de:	f7ff fb64 	bl	8016baa <__retarget_lock_acquire_recursive>
 80174e2:	4628      	mov	r0, r5
 80174e4:	4621      	mov	r1, r4
 80174e6:	f7ff ff5f 	bl	80173a8 <__sflush_r>
 80174ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80174ec:	07da      	lsls	r2, r3, #31
 80174ee:	4605      	mov	r5, r0
 80174f0:	d4e4      	bmi.n	80174bc <_fflush_r+0xc>
 80174f2:	89a3      	ldrh	r3, [r4, #12]
 80174f4:	059b      	lsls	r3, r3, #22
 80174f6:	d4e1      	bmi.n	80174bc <_fflush_r+0xc>
 80174f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80174fa:	f7ff fb57 	bl	8016bac <__retarget_lock_release_recursive>
 80174fe:	e7dd      	b.n	80174bc <_fflush_r+0xc>

08017500 <fiprintf>:
 8017500:	b40e      	push	{r1, r2, r3}
 8017502:	b503      	push	{r0, r1, lr}
 8017504:	4601      	mov	r1, r0
 8017506:	ab03      	add	r3, sp, #12
 8017508:	4805      	ldr	r0, [pc, #20]	@ (8017520 <fiprintf+0x20>)
 801750a:	f853 2b04 	ldr.w	r2, [r3], #4
 801750e:	6800      	ldr	r0, [r0, #0]
 8017510:	9301      	str	r3, [sp, #4]
 8017512:	f7ff fca3 	bl	8016e5c <_vfiprintf_r>
 8017516:	b002      	add	sp, #8
 8017518:	f85d eb04 	ldr.w	lr, [sp], #4
 801751c:	b003      	add	sp, #12
 801751e:	4770      	bx	lr
 8017520:	2000003c 	.word	0x2000003c

08017524 <__swbuf_r>:
 8017524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017526:	460e      	mov	r6, r1
 8017528:	4614      	mov	r4, r2
 801752a:	4605      	mov	r5, r0
 801752c:	b118      	cbz	r0, 8017536 <__swbuf_r+0x12>
 801752e:	6a03      	ldr	r3, [r0, #32]
 8017530:	b90b      	cbnz	r3, 8017536 <__swbuf_r+0x12>
 8017532:	f7ff f9d5 	bl	80168e0 <__sinit>
 8017536:	69a3      	ldr	r3, [r4, #24]
 8017538:	60a3      	str	r3, [r4, #8]
 801753a:	89a3      	ldrh	r3, [r4, #12]
 801753c:	071a      	lsls	r2, r3, #28
 801753e:	d501      	bpl.n	8017544 <__swbuf_r+0x20>
 8017540:	6923      	ldr	r3, [r4, #16]
 8017542:	b943      	cbnz	r3, 8017556 <__swbuf_r+0x32>
 8017544:	4621      	mov	r1, r4
 8017546:	4628      	mov	r0, r5
 8017548:	f000 f82a 	bl	80175a0 <__swsetup_r>
 801754c:	b118      	cbz	r0, 8017556 <__swbuf_r+0x32>
 801754e:	f04f 37ff 	mov.w	r7, #4294967295
 8017552:	4638      	mov	r0, r7
 8017554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017556:	6823      	ldr	r3, [r4, #0]
 8017558:	6922      	ldr	r2, [r4, #16]
 801755a:	1a98      	subs	r0, r3, r2
 801755c:	6963      	ldr	r3, [r4, #20]
 801755e:	b2f6      	uxtb	r6, r6
 8017560:	4283      	cmp	r3, r0
 8017562:	4637      	mov	r7, r6
 8017564:	dc05      	bgt.n	8017572 <__swbuf_r+0x4e>
 8017566:	4621      	mov	r1, r4
 8017568:	4628      	mov	r0, r5
 801756a:	f7ff ffa1 	bl	80174b0 <_fflush_r>
 801756e:	2800      	cmp	r0, #0
 8017570:	d1ed      	bne.n	801754e <__swbuf_r+0x2a>
 8017572:	68a3      	ldr	r3, [r4, #8]
 8017574:	3b01      	subs	r3, #1
 8017576:	60a3      	str	r3, [r4, #8]
 8017578:	6823      	ldr	r3, [r4, #0]
 801757a:	1c5a      	adds	r2, r3, #1
 801757c:	6022      	str	r2, [r4, #0]
 801757e:	701e      	strb	r6, [r3, #0]
 8017580:	6962      	ldr	r2, [r4, #20]
 8017582:	1c43      	adds	r3, r0, #1
 8017584:	429a      	cmp	r2, r3
 8017586:	d004      	beq.n	8017592 <__swbuf_r+0x6e>
 8017588:	89a3      	ldrh	r3, [r4, #12]
 801758a:	07db      	lsls	r3, r3, #31
 801758c:	d5e1      	bpl.n	8017552 <__swbuf_r+0x2e>
 801758e:	2e0a      	cmp	r6, #10
 8017590:	d1df      	bne.n	8017552 <__swbuf_r+0x2e>
 8017592:	4621      	mov	r1, r4
 8017594:	4628      	mov	r0, r5
 8017596:	f7ff ff8b 	bl	80174b0 <_fflush_r>
 801759a:	2800      	cmp	r0, #0
 801759c:	d0d9      	beq.n	8017552 <__swbuf_r+0x2e>
 801759e:	e7d6      	b.n	801754e <__swbuf_r+0x2a>

080175a0 <__swsetup_r>:
 80175a0:	b538      	push	{r3, r4, r5, lr}
 80175a2:	4b29      	ldr	r3, [pc, #164]	@ (8017648 <__swsetup_r+0xa8>)
 80175a4:	4605      	mov	r5, r0
 80175a6:	6818      	ldr	r0, [r3, #0]
 80175a8:	460c      	mov	r4, r1
 80175aa:	b118      	cbz	r0, 80175b4 <__swsetup_r+0x14>
 80175ac:	6a03      	ldr	r3, [r0, #32]
 80175ae:	b90b      	cbnz	r3, 80175b4 <__swsetup_r+0x14>
 80175b0:	f7ff f996 	bl	80168e0 <__sinit>
 80175b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175b8:	0719      	lsls	r1, r3, #28
 80175ba:	d422      	bmi.n	8017602 <__swsetup_r+0x62>
 80175bc:	06da      	lsls	r2, r3, #27
 80175be:	d407      	bmi.n	80175d0 <__swsetup_r+0x30>
 80175c0:	2209      	movs	r2, #9
 80175c2:	602a      	str	r2, [r5, #0]
 80175c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80175c8:	81a3      	strh	r3, [r4, #12]
 80175ca:	f04f 30ff 	mov.w	r0, #4294967295
 80175ce:	e033      	b.n	8017638 <__swsetup_r+0x98>
 80175d0:	0758      	lsls	r0, r3, #29
 80175d2:	d512      	bpl.n	80175fa <__swsetup_r+0x5a>
 80175d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80175d6:	b141      	cbz	r1, 80175ea <__swsetup_r+0x4a>
 80175d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80175dc:	4299      	cmp	r1, r3
 80175de:	d002      	beq.n	80175e6 <__swsetup_r+0x46>
 80175e0:	4628      	mov	r0, r5
 80175e2:	f7ff fb11 	bl	8016c08 <_free_r>
 80175e6:	2300      	movs	r3, #0
 80175e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80175ea:	89a3      	ldrh	r3, [r4, #12]
 80175ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80175f0:	81a3      	strh	r3, [r4, #12]
 80175f2:	2300      	movs	r3, #0
 80175f4:	6063      	str	r3, [r4, #4]
 80175f6:	6923      	ldr	r3, [r4, #16]
 80175f8:	6023      	str	r3, [r4, #0]
 80175fa:	89a3      	ldrh	r3, [r4, #12]
 80175fc:	f043 0308 	orr.w	r3, r3, #8
 8017600:	81a3      	strh	r3, [r4, #12]
 8017602:	6923      	ldr	r3, [r4, #16]
 8017604:	b94b      	cbnz	r3, 801761a <__swsetup_r+0x7a>
 8017606:	89a3      	ldrh	r3, [r4, #12]
 8017608:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801760c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017610:	d003      	beq.n	801761a <__swsetup_r+0x7a>
 8017612:	4621      	mov	r1, r4
 8017614:	4628      	mov	r0, r5
 8017616:	f000 f856 	bl	80176c6 <__smakebuf_r>
 801761a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801761e:	f013 0201 	ands.w	r2, r3, #1
 8017622:	d00a      	beq.n	801763a <__swsetup_r+0x9a>
 8017624:	2200      	movs	r2, #0
 8017626:	60a2      	str	r2, [r4, #8]
 8017628:	6962      	ldr	r2, [r4, #20]
 801762a:	4252      	negs	r2, r2
 801762c:	61a2      	str	r2, [r4, #24]
 801762e:	6922      	ldr	r2, [r4, #16]
 8017630:	b942      	cbnz	r2, 8017644 <__swsetup_r+0xa4>
 8017632:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017636:	d1c5      	bne.n	80175c4 <__swsetup_r+0x24>
 8017638:	bd38      	pop	{r3, r4, r5, pc}
 801763a:	0799      	lsls	r1, r3, #30
 801763c:	bf58      	it	pl
 801763e:	6962      	ldrpl	r2, [r4, #20]
 8017640:	60a2      	str	r2, [r4, #8]
 8017642:	e7f4      	b.n	801762e <__swsetup_r+0x8e>
 8017644:	2000      	movs	r0, #0
 8017646:	e7f7      	b.n	8017638 <__swsetup_r+0x98>
 8017648:	2000003c 	.word	0x2000003c

0801764c <_sbrk_r>:
 801764c:	b538      	push	{r3, r4, r5, lr}
 801764e:	4d06      	ldr	r5, [pc, #24]	@ (8017668 <_sbrk_r+0x1c>)
 8017650:	2300      	movs	r3, #0
 8017652:	4604      	mov	r4, r0
 8017654:	4608      	mov	r0, r1
 8017656:	602b      	str	r3, [r5, #0]
 8017658:	f7e9 fd0e 	bl	8001078 <_sbrk>
 801765c:	1c43      	adds	r3, r0, #1
 801765e:	d102      	bne.n	8017666 <_sbrk_r+0x1a>
 8017660:	682b      	ldr	r3, [r5, #0]
 8017662:	b103      	cbz	r3, 8017666 <_sbrk_r+0x1a>
 8017664:	6023      	str	r3, [r4, #0]
 8017666:	bd38      	pop	{r3, r4, r5, pc}
 8017668:	2000f54c 	.word	0x2000f54c

0801766c <abort>:
 801766c:	b508      	push	{r3, lr}
 801766e:	2006      	movs	r0, #6
 8017670:	f000 f88e 	bl	8017790 <raise>
 8017674:	2001      	movs	r0, #1
 8017676:	f7e9 fc87 	bl	8000f88 <_exit>

0801767a <__swhatbuf_r>:
 801767a:	b570      	push	{r4, r5, r6, lr}
 801767c:	460c      	mov	r4, r1
 801767e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017682:	2900      	cmp	r1, #0
 8017684:	b096      	sub	sp, #88	@ 0x58
 8017686:	4615      	mov	r5, r2
 8017688:	461e      	mov	r6, r3
 801768a:	da0d      	bge.n	80176a8 <__swhatbuf_r+0x2e>
 801768c:	89a3      	ldrh	r3, [r4, #12]
 801768e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017692:	f04f 0100 	mov.w	r1, #0
 8017696:	bf14      	ite	ne
 8017698:	2340      	movne	r3, #64	@ 0x40
 801769a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801769e:	2000      	movs	r0, #0
 80176a0:	6031      	str	r1, [r6, #0]
 80176a2:	602b      	str	r3, [r5, #0]
 80176a4:	b016      	add	sp, #88	@ 0x58
 80176a6:	bd70      	pop	{r4, r5, r6, pc}
 80176a8:	466a      	mov	r2, sp
 80176aa:	f000 f879 	bl	80177a0 <_fstat_r>
 80176ae:	2800      	cmp	r0, #0
 80176b0:	dbec      	blt.n	801768c <__swhatbuf_r+0x12>
 80176b2:	9901      	ldr	r1, [sp, #4]
 80176b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80176b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80176bc:	4259      	negs	r1, r3
 80176be:	4159      	adcs	r1, r3
 80176c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80176c4:	e7eb      	b.n	801769e <__swhatbuf_r+0x24>

080176c6 <__smakebuf_r>:
 80176c6:	898b      	ldrh	r3, [r1, #12]
 80176c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176ca:	079d      	lsls	r5, r3, #30
 80176cc:	4606      	mov	r6, r0
 80176ce:	460c      	mov	r4, r1
 80176d0:	d507      	bpl.n	80176e2 <__smakebuf_r+0x1c>
 80176d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80176d6:	6023      	str	r3, [r4, #0]
 80176d8:	6123      	str	r3, [r4, #16]
 80176da:	2301      	movs	r3, #1
 80176dc:	6163      	str	r3, [r4, #20]
 80176de:	b003      	add	sp, #12
 80176e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176e2:	ab01      	add	r3, sp, #4
 80176e4:	466a      	mov	r2, sp
 80176e6:	f7ff ffc8 	bl	801767a <__swhatbuf_r>
 80176ea:	9f00      	ldr	r7, [sp, #0]
 80176ec:	4605      	mov	r5, r0
 80176ee:	4639      	mov	r1, r7
 80176f0:	4630      	mov	r0, r6
 80176f2:	f7ff fafd 	bl	8016cf0 <_malloc_r>
 80176f6:	b948      	cbnz	r0, 801770c <__smakebuf_r+0x46>
 80176f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176fc:	059a      	lsls	r2, r3, #22
 80176fe:	d4ee      	bmi.n	80176de <__smakebuf_r+0x18>
 8017700:	f023 0303 	bic.w	r3, r3, #3
 8017704:	f043 0302 	orr.w	r3, r3, #2
 8017708:	81a3      	strh	r3, [r4, #12]
 801770a:	e7e2      	b.n	80176d2 <__smakebuf_r+0xc>
 801770c:	89a3      	ldrh	r3, [r4, #12]
 801770e:	6020      	str	r0, [r4, #0]
 8017710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017714:	81a3      	strh	r3, [r4, #12]
 8017716:	9b01      	ldr	r3, [sp, #4]
 8017718:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801771c:	b15b      	cbz	r3, 8017736 <__smakebuf_r+0x70>
 801771e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017722:	4630      	mov	r0, r6
 8017724:	f000 f84e 	bl	80177c4 <_isatty_r>
 8017728:	b128      	cbz	r0, 8017736 <__smakebuf_r+0x70>
 801772a:	89a3      	ldrh	r3, [r4, #12]
 801772c:	f023 0303 	bic.w	r3, r3, #3
 8017730:	f043 0301 	orr.w	r3, r3, #1
 8017734:	81a3      	strh	r3, [r4, #12]
 8017736:	89a3      	ldrh	r3, [r4, #12]
 8017738:	431d      	orrs	r5, r3
 801773a:	81a5      	strh	r5, [r4, #12]
 801773c:	e7cf      	b.n	80176de <__smakebuf_r+0x18>

0801773e <_raise_r>:
 801773e:	291f      	cmp	r1, #31
 8017740:	b538      	push	{r3, r4, r5, lr}
 8017742:	4605      	mov	r5, r0
 8017744:	460c      	mov	r4, r1
 8017746:	d904      	bls.n	8017752 <_raise_r+0x14>
 8017748:	2316      	movs	r3, #22
 801774a:	6003      	str	r3, [r0, #0]
 801774c:	f04f 30ff 	mov.w	r0, #4294967295
 8017750:	bd38      	pop	{r3, r4, r5, pc}
 8017752:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017754:	b112      	cbz	r2, 801775c <_raise_r+0x1e>
 8017756:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801775a:	b94b      	cbnz	r3, 8017770 <_raise_r+0x32>
 801775c:	4628      	mov	r0, r5
 801775e:	f000 f853 	bl	8017808 <_getpid_r>
 8017762:	4622      	mov	r2, r4
 8017764:	4601      	mov	r1, r0
 8017766:	4628      	mov	r0, r5
 8017768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801776c:	f000 b83a 	b.w	80177e4 <_kill_r>
 8017770:	2b01      	cmp	r3, #1
 8017772:	d00a      	beq.n	801778a <_raise_r+0x4c>
 8017774:	1c59      	adds	r1, r3, #1
 8017776:	d103      	bne.n	8017780 <_raise_r+0x42>
 8017778:	2316      	movs	r3, #22
 801777a:	6003      	str	r3, [r0, #0]
 801777c:	2001      	movs	r0, #1
 801777e:	e7e7      	b.n	8017750 <_raise_r+0x12>
 8017780:	2100      	movs	r1, #0
 8017782:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017786:	4620      	mov	r0, r4
 8017788:	4798      	blx	r3
 801778a:	2000      	movs	r0, #0
 801778c:	e7e0      	b.n	8017750 <_raise_r+0x12>
	...

08017790 <raise>:
 8017790:	4b02      	ldr	r3, [pc, #8]	@ (801779c <raise+0xc>)
 8017792:	4601      	mov	r1, r0
 8017794:	6818      	ldr	r0, [r3, #0]
 8017796:	f7ff bfd2 	b.w	801773e <_raise_r>
 801779a:	bf00      	nop
 801779c:	2000003c 	.word	0x2000003c

080177a0 <_fstat_r>:
 80177a0:	b538      	push	{r3, r4, r5, lr}
 80177a2:	4d07      	ldr	r5, [pc, #28]	@ (80177c0 <_fstat_r+0x20>)
 80177a4:	2300      	movs	r3, #0
 80177a6:	4604      	mov	r4, r0
 80177a8:	4608      	mov	r0, r1
 80177aa:	4611      	mov	r1, r2
 80177ac:	602b      	str	r3, [r5, #0]
 80177ae:	f7e9 fc3b 	bl	8001028 <_fstat>
 80177b2:	1c43      	adds	r3, r0, #1
 80177b4:	d102      	bne.n	80177bc <_fstat_r+0x1c>
 80177b6:	682b      	ldr	r3, [r5, #0]
 80177b8:	b103      	cbz	r3, 80177bc <_fstat_r+0x1c>
 80177ba:	6023      	str	r3, [r4, #0]
 80177bc:	bd38      	pop	{r3, r4, r5, pc}
 80177be:	bf00      	nop
 80177c0:	2000f54c 	.word	0x2000f54c

080177c4 <_isatty_r>:
 80177c4:	b538      	push	{r3, r4, r5, lr}
 80177c6:	4d06      	ldr	r5, [pc, #24]	@ (80177e0 <_isatty_r+0x1c>)
 80177c8:	2300      	movs	r3, #0
 80177ca:	4604      	mov	r4, r0
 80177cc:	4608      	mov	r0, r1
 80177ce:	602b      	str	r3, [r5, #0]
 80177d0:	f7e9 fc3a 	bl	8001048 <_isatty>
 80177d4:	1c43      	adds	r3, r0, #1
 80177d6:	d102      	bne.n	80177de <_isatty_r+0x1a>
 80177d8:	682b      	ldr	r3, [r5, #0]
 80177da:	b103      	cbz	r3, 80177de <_isatty_r+0x1a>
 80177dc:	6023      	str	r3, [r4, #0]
 80177de:	bd38      	pop	{r3, r4, r5, pc}
 80177e0:	2000f54c 	.word	0x2000f54c

080177e4 <_kill_r>:
 80177e4:	b538      	push	{r3, r4, r5, lr}
 80177e6:	4d07      	ldr	r5, [pc, #28]	@ (8017804 <_kill_r+0x20>)
 80177e8:	2300      	movs	r3, #0
 80177ea:	4604      	mov	r4, r0
 80177ec:	4608      	mov	r0, r1
 80177ee:	4611      	mov	r1, r2
 80177f0:	602b      	str	r3, [r5, #0]
 80177f2:	f7e9 fbb7 	bl	8000f64 <_kill>
 80177f6:	1c43      	adds	r3, r0, #1
 80177f8:	d102      	bne.n	8017800 <_kill_r+0x1c>
 80177fa:	682b      	ldr	r3, [r5, #0]
 80177fc:	b103      	cbz	r3, 8017800 <_kill_r+0x1c>
 80177fe:	6023      	str	r3, [r4, #0]
 8017800:	bd38      	pop	{r3, r4, r5, pc}
 8017802:	bf00      	nop
 8017804:	2000f54c 	.word	0x2000f54c

08017808 <_getpid_r>:
 8017808:	f7e9 bba4 	b.w	8000f54 <_getpid>

0801780c <_init>:
 801780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801780e:	bf00      	nop
 8017810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017812:	bc08      	pop	{r3}
 8017814:	469e      	mov	lr, r3
 8017816:	4770      	bx	lr

08017818 <_fini>:
 8017818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801781a:	bf00      	nop
 801781c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801781e:	bc08      	pop	{r3}
 8017820:	469e      	mov	lr, r3
 8017822:	4770      	bx	lr
