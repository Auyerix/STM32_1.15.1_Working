
LWIP_TCP_SERVER_CLIENT_NETCONN5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018d18  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b18  08018ec8  08018ec8  00019ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c9e0  0801c9e0  0001e08c  2**0
                  CONTENTS
  4 .ARM          00000008  0801c9e0  0801c9e0  0001d9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c9e8  0801c9e8  0001e08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c9e8  0801c9e8  0001d9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c9ec  0801c9ec  0001d9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0801c9f0  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001e08c  2**0
                  CONTENTS
 10 .bss          00010218  2000008c  2000008c  0001e08c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200102a4  200102a4  0001e08c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001e08c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035b90  00000000  00000000  0001e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008613  00000000  00000000  00053c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002700  00000000  00000000  0005c260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ef7  00000000  00000000  0005e960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003782d  00000000  00000000  00060857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003fdb9  00000000  00000000  00098084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103ebb  00000000  00000000  000d7e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001dbcf8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000aae8  00000000  00000000  001dbd3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  001e6824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018eb0 	.word	0x08018eb0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	08018eb0 	.word	0x08018eb0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
static uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	460a      	mov	r2, r1
 800059a:	80fb      	strh	r3, [r7, #6]
 800059c:	4613      	mov	r3, r2
 800059e:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80005a0:	88fa      	ldrh	r2, [r7, #6]
 80005a2:	88bb      	ldrh	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80005a8:	dc01      	bgt.n	80005ae <bytestowrite+0x1e>
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	e003      	b.n	80005b6 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 80005ae:	88bb      	ldrh	r3, [r7, #4]
 80005b0:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80005b4:	b29b      	uxth	r3, r3
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
static HAL_StatusTypeDef EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08e      	sub	sp, #56	@ 0x38
 80005c8:	af04      	add	r7, sp, #16
 80005ca:	60ba      	str	r2, [r7, #8]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4603      	mov	r3, r0
 80005d0:	81fb      	strh	r3, [r7, #14]
 80005d2:	460b      	mov	r3, r1
 80005d4:	81bb      	strh	r3, [r7, #12]
 80005d6:	4613      	mov	r3, r2
 80005d8:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = PAGE_BIT; // Directamente el valor predefinido
 80005da:	2305      	movs	r3, #5
 80005dc:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 80005de:	89fb      	ldrh	r3, [r7, #14]
 80005e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80005e2:	88fa      	ldrh	r2, [r7, #6]
 80005e4:	89bb      	ldrh	r3, [r7, #12]
 80005e6:	4413      	add	r3, r2
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	da00      	bge.n	80005ee <EEPROM_Write+0x2a>
 80005ec:	333f      	adds	r3, #63	@ 0x3f
 80005ee:	119b      	asrs	r3, r3, #6
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	89fb      	ldrh	r3, [r7, #14]
 80005f4:	4413      	add	r3, r2
 80005f6:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80005f8:	8b7a      	ldrh	r2, [r7, #26]
 80005fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	b29b      	uxth	r3, r3
 8000600:	3301      	adds	r3, #1
 8000602:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000604:	2300      	movs	r3, #0
 8000606:	84bb      	strh	r3, [r7, #36]	@ 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000608:	2300      	movs	r3, #0
 800060a:	623b      	str	r3, [r7, #32]
 800060c:	e03b      	b.n	8000686 <EEPROM_Write+0xc2>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800060e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	fa02 f303 	lsl.w	r3, r2, r3
 8000616:	b21a      	sxth	r2, r3
 8000618:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800061c:	4313      	orrs	r3, r2
 800061e:	b21b      	sxth	r3, r3
 8000620:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8000622:	89ba      	ldrh	r2, [r7, #12]
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	4611      	mov	r1, r2
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ffb1 	bl	8000590 <bytestowrite>
 800062e:	4603      	mov	r3, r0
 8000630:	82bb      	strh	r3, [r7, #20]

		HAL_StatusTypeDef status = HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000632:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000634:	68ba      	ldr	r2, [r7, #8]
 8000636:	4413      	add	r3, r2
 8000638:	8af9      	ldrh	r1, [r7, #22]
 800063a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800063e:	9202      	str	r2, [sp, #8]
 8000640:	8aba      	ldrh	r2, [r7, #20]
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2302      	movs	r3, #2
 8000648:	460a      	mov	r2, r1
 800064a:	21a0      	movs	r1, #160	@ 0xa0
 800064c:	4812      	ldr	r0, [pc, #72]	@ (8000698 <EEPROM_Write+0xd4>)
 800064e:	f003 fd2f 	bl	80040b0 <HAL_I2C_Mem_Write>
 8000652:	4603      	mov	r3, r0
 8000654:	74fb      	strb	r3, [r7, #19]

		// Check for errors in the write operation
		if (status != HAL_OK) {
 8000656:	7cfb      	ldrb	r3, [r7, #19]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <EEPROM_Write+0x9c>
			return status;  // Return the error status immediately
 800065c:	7cfb      	ldrb	r3, [r7, #19]
 800065e:	e017      	b.n	8000690 <EEPROM_Write+0xcc>
		}
		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000660:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000662:	3301      	adds	r3, #1
 8000664:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8000666:	2300      	movs	r3, #0
 8000668:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 800066a:	88fa      	ldrh	r2, [r7, #6]
 800066c:	8abb      	ldrh	r3, [r7, #20]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000672:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000674:	8abb      	ldrh	r3, [r7, #20]
 8000676:	4413      	add	r3, r2
 8000678:	84bb      	strh	r3, [r7, #36]	@ 0x24

		osDelay (5);  // Write cycle delay (5ms) OS Block state
 800067a:	2005      	movs	r0, #5
 800067c:	f006 fef0 	bl	8007460 <osDelay>
	for (int i=0; i<numofpages; i++)
 8000680:	6a3b      	ldr	r3, [r7, #32]
 8000682:	3301      	adds	r3, #1
 8000684:	623b      	str	r3, [r7, #32]
 8000686:	8b3b      	ldrh	r3, [r7, #24]
 8000688:	6a3a      	ldr	r2, [r7, #32]
 800068a:	429a      	cmp	r2, r3
 800068c:	dbbf      	blt.n	800060e <EEPROM_Write+0x4a>
	}

    return HAL_OK;  // If everything succeeds, return HAL_OK
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	3728      	adds	r7, #40	@ 0x28
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000564 	.word	0x20000564

0800069c <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
HAL_StatusTypeDef EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08e      	sub	sp, #56	@ 0x38
 80006a0:	af04      	add	r7, sp, #16
 80006a2:	60ba      	str	r2, [r7, #8]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4603      	mov	r3, r0
 80006a8:	81fb      	strh	r3, [r7, #14]
 80006aa:	460b      	mov	r3, r1
 80006ac:	81bb      	strh	r3, [r7, #12]
 80006ae:	4613      	mov	r3, r2
 80006b0:	80fb      	strh	r3, [r7, #6]
	int paddrposition = PAGE_BIT; // Directamente el valor predefinido
 80006b2:	2305      	movs	r3, #5
 80006b4:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80006b6:	89fb      	ldrh	r3, [r7, #14]
 80006b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80006ba:	88fa      	ldrh	r2, [r7, #6]
 80006bc:	89bb      	ldrh	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	da00      	bge.n	80006c6 <EEPROM_Read+0x2a>
 80006c4:	333f      	adds	r3, #63	@ 0x3f
 80006c6:	119b      	asrs	r3, r3, #6
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	89fb      	ldrh	r3, [r7, #14]
 80006cc:	4413      	add	r3, r2
 80006ce:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 80006d0:	8b7a      	ldrh	r2, [r7, #26]
 80006d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	3301      	adds	r3, #1
 80006da:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80006dc:	2300      	movs	r3, #0
 80006de:	84bb      	strh	r3, [r7, #36]	@ 0x24

	for (int i=0; i<numofpages; i++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
 80006e4:	e038      	b.n	8000758 <EEPROM_Read+0xbc>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80006e6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	fa02 f303 	lsl.w	r3, r2, r3
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 80006fa:	89ba      	ldrh	r2, [r7, #12]
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	4611      	mov	r1, r2
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff45 	bl	8000590 <bytestowrite>
 8000706:	4603      	mov	r3, r0
 8000708:	82bb      	strh	r3, [r7, #20]
		HAL_StatusTypeDef status = HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 800070a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	4413      	add	r3, r2
 8000710:	8af9      	ldrh	r1, [r7, #22]
 8000712:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000716:	9202      	str	r2, [sp, #8]
 8000718:	8aba      	ldrh	r2, [r7, #20]
 800071a:	9201      	str	r2, [sp, #4]
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2302      	movs	r3, #2
 8000720:	460a      	mov	r2, r1
 8000722:	21a0      	movs	r1, #160	@ 0xa0
 8000724:	4811      	ldr	r0, [pc, #68]	@ (800076c <EEPROM_Read+0xd0>)
 8000726:	f003 fdbd 	bl	80042a4 <HAL_I2C_Mem_Read>
 800072a:	4603      	mov	r3, r0
 800072c:	74fb      	strb	r3, [r7, #19]
		// Check for errors in the read operation
		if (status != HAL_OK) {
 800072e:	7cfb      	ldrb	r3, [r7, #19]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <EEPROM_Read+0x9c>
			return status;  // Return the error status immediately
 8000734:	7cfb      	ldrb	r3, [r7, #19]
 8000736:	e014      	b.n	8000762 <EEPROM_Read+0xc6>
		}
		startPage += 1;
 8000738:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800073a:	3301      	adds	r3, #1
 800073c:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;
 800073e:	2300      	movs	r3, #0
 8000740:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8000742:	88fa      	ldrh	r2, [r7, #6]
 8000744:	8abb      	ldrh	r3, [r7, #20]
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 800074a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800074c:	8abb      	ldrh	r3, [r7, #20]
 800074e:	4413      	add	r3, r2
 8000750:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i=0; i<numofpages; i++)
 8000752:	6a3b      	ldr	r3, [r7, #32]
 8000754:	3301      	adds	r3, #1
 8000756:	623b      	str	r3, [r7, #32]
 8000758:	8b3b      	ldrh	r3, [r7, #24]
 800075a:	6a3a      	ldr	r2, [r7, #32]
 800075c:	429a      	cmp	r2, r3
 800075e:	dbc2      	blt.n	80006e6 <EEPROM_Read+0x4a>
	}
    return HAL_OK;  // If everything succeeds, return HAL_OK
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3728      	adds	r7, #40	@ 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000564 	.word	0x20000564

08000770 <detectTransitions>:

	osDelay (5);  // write cycle delay 
}

// Function to detect specific transitions
void detectTransitions() {
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    static int previous_state = 0; // Variable to store the previous state

    if (previous_state == 0 && holding_registers[MB_SWITH] == 1) {
 8000774:	4b57      	ldr	r3, [pc, #348]	@ (80008d4 <detectTransitions+0x164>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d14f      	bne.n	800081c <detectTransitions+0xac>
 800077c:	4b56      	ldr	r3, [pc, #344]	@ (80008d8 <detectTransitions+0x168>)
 800077e:	89db      	ldrh	r3, [r3, #14]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d14b      	bne.n	800081c <detectTransitions+0xac>
    	SendString("transition 0 - 1 SAVE TO EEPROM \r"); // 0-to-1 transition
 8000784:	4855      	ldr	r0, [pc, #340]	@ (80008dc <detectTransitions+0x16c>)
 8000786:	f000 fc59 	bl	800103c <SendString>
    	IP_To_Eeprom[0] = holding_registers[MB_IP_ADDRESS_0];
 800078a:	4b53      	ldr	r3, [pc, #332]	@ (80008d8 <detectTransitions+0x168>)
 800078c:	8a9b      	ldrh	r3, [r3, #20]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b53      	ldr	r3, [pc, #332]	@ (80008e0 <detectTransitions+0x170>)
 8000792:	701a      	strb	r2, [r3, #0]
    	IP_To_Eeprom[1] = holding_registers[MB_IP_ADDRESS_1];
 8000794:	4b50      	ldr	r3, [pc, #320]	@ (80008d8 <detectTransitions+0x168>)
 8000796:	8adb      	ldrh	r3, [r3, #22]
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b51      	ldr	r3, [pc, #324]	@ (80008e0 <detectTransitions+0x170>)
 800079c:	705a      	strb	r2, [r3, #1]
    	IP_To_Eeprom[2] = holding_registers[MB_IP_ADDRESS_2];
 800079e:	4b4e      	ldr	r3, [pc, #312]	@ (80008d8 <detectTransitions+0x168>)
 80007a0:	8b1b      	ldrh	r3, [r3, #24]
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b4e      	ldr	r3, [pc, #312]	@ (80008e0 <detectTransitions+0x170>)
 80007a6:	709a      	strb	r2, [r3, #2]
    	IP_To_Eeprom[3] = holding_registers[MB_IP_ADDRESS_3];
 80007a8:	4b4b      	ldr	r3, [pc, #300]	@ (80008d8 <detectTransitions+0x168>)
 80007aa:	8b5b      	ldrh	r3, [r3, #26]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b4c      	ldr	r3, [pc, #304]	@ (80008e0 <detectTransitions+0x170>)
 80007b0:	70da      	strb	r2, [r3, #3]
    	IP_To_Eeprom[4] = holding_registers[MB_NETMASK_ADDRESS_0];
 80007b2:	4b49      	ldr	r3, [pc, #292]	@ (80008d8 <detectTransitions+0x168>)
 80007b4:	8b9b      	ldrh	r3, [r3, #28]
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b49      	ldr	r3, [pc, #292]	@ (80008e0 <detectTransitions+0x170>)
 80007ba:	711a      	strb	r2, [r3, #4]
    	IP_To_Eeprom[5] = holding_registers[MB_NETMASK_ADDRESS_1];
 80007bc:	4b46      	ldr	r3, [pc, #280]	@ (80008d8 <detectTransitions+0x168>)
 80007be:	8bdb      	ldrh	r3, [r3, #30]
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b47      	ldr	r3, [pc, #284]	@ (80008e0 <detectTransitions+0x170>)
 80007c4:	715a      	strb	r2, [r3, #5]
    	IP_To_Eeprom[6] = holding_registers[MB_NETMASK_ADDRESS_2];
 80007c6:	4b44      	ldr	r3, [pc, #272]	@ (80008d8 <detectTransitions+0x168>)
 80007c8:	8c1b      	ldrh	r3, [r3, #32]
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b44      	ldr	r3, [pc, #272]	@ (80008e0 <detectTransitions+0x170>)
 80007ce:	719a      	strb	r2, [r3, #6]
    	IP_To_Eeprom[7] = holding_registers[MB_NETMASK_ADDRESS_3];
 80007d0:	4b41      	ldr	r3, [pc, #260]	@ (80008d8 <detectTransitions+0x168>)
 80007d2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b42      	ldr	r3, [pc, #264]	@ (80008e0 <detectTransitions+0x170>)
 80007d8:	71da      	strb	r2, [r3, #7]
    	IP_To_Eeprom[8] = holding_registers[MB_GATEWAY_ADDRESS_0];
 80007da:	4b3f      	ldr	r3, [pc, #252]	@ (80008d8 <detectTransitions+0x168>)
 80007dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b3f      	ldr	r3, [pc, #252]	@ (80008e0 <detectTransitions+0x170>)
 80007e2:	721a      	strb	r2, [r3, #8]
    	IP_To_Eeprom[9] = holding_registers[MB_GATEWAY_ADDRESS_1];
 80007e4:	4b3c      	ldr	r3, [pc, #240]	@ (80008d8 <detectTransitions+0x168>)
 80007e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b3d      	ldr	r3, [pc, #244]	@ (80008e0 <detectTransitions+0x170>)
 80007ec:	725a      	strb	r2, [r3, #9]
    	IP_To_Eeprom[10] = holding_registers[MB_GATEWAY_ADDRESS_2];
 80007ee:	4b3a      	ldr	r3, [pc, #232]	@ (80008d8 <detectTransitions+0x168>)
 80007f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b3a      	ldr	r3, [pc, #232]	@ (80008e0 <detectTransitions+0x170>)
 80007f6:	729a      	strb	r2, [r3, #10]
    	IP_To_Eeprom[11] = holding_registers[MB_GATEWAY_ADDRESS_3];
 80007f8:	4b37      	ldr	r3, [pc, #220]	@ (80008d8 <detectTransitions+0x168>)
 80007fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b38      	ldr	r3, [pc, #224]	@ (80008e0 <detectTransitions+0x170>)
 8000800:	72da      	strb	r2, [r3, #11]


    	if (EEPROM_Write(1,0,IP_To_Eeprom,12) != HAL_OK){
 8000802:	230c      	movs	r3, #12
 8000804:	4a36      	ldr	r2, [pc, #216]	@ (80008e0 <detectTransitions+0x170>)
 8000806:	2100      	movs	r1, #0
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff fedb 	bl	80005c4 <EEPROM_Write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d057      	beq.n	80008c4 <detectTransitions+0x154>
    		SendString("Read error EEPROM \r");
 8000814:	4833      	ldr	r0, [pc, #204]	@ (80008e4 <detectTransitions+0x174>)
 8000816:	f000 fc11 	bl	800103c <SendString>
    	if (EEPROM_Write(1,0,IP_To_Eeprom,12) != HAL_OK){
 800081a:	e053      	b.n	80008c4 <detectTransitions+0x154>
    	}
    } else if (previous_state == 0 && holding_registers[MB_SWITH] == 2) {
 800081c:	4b2d      	ldr	r3, [pc, #180]	@ (80008d4 <detectTransitions+0x164>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d14f      	bne.n	80008c4 <detectTransitions+0x154>
 8000824:	4b2c      	ldr	r3, [pc, #176]	@ (80008d8 <detectTransitions+0x168>)
 8000826:	89db      	ldrh	r3, [r3, #14]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d14b      	bne.n	80008c4 <detectTransitions+0x154>
    	SendString("transition 0 - 2 READ from EEPROM \r"); // 0-to-2 transition
 800082c:	482e      	ldr	r0, [pc, #184]	@ (80008e8 <detectTransitions+0x178>)
 800082e:	f000 fc05 	bl	800103c <SendString>
    	if (EEPROM_Read(1,0,IP_From_Eeprom,12) != HAL_OK){
 8000832:	230c      	movs	r3, #12
 8000834:	4a2d      	ldr	r2, [pc, #180]	@ (80008ec <detectTransitions+0x17c>)
 8000836:	2100      	movs	r1, #0
 8000838:	2001      	movs	r0, #1
 800083a:	f7ff ff2f 	bl	800069c <EEPROM_Read>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d003      	beq.n	800084c <detectTransitions+0xdc>
    		SendString("Read error EEPROM \r");
 8000844:	4827      	ldr	r0, [pc, #156]	@ (80008e4 <detectTransitions+0x174>)
 8000846:	f000 fbf9 	bl	800103c <SendString>
 800084a:	e03b      	b.n	80008c4 <detectTransitions+0x154>
    	}
    	else{
    		holding_registers[MB_IP_ADDRESS_0] =IP_From_Eeprom[0];
 800084c:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <detectTransitions+0x17c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <detectTransitions+0x168>)
 8000854:	829a      	strh	r2, [r3, #20]
    		holding_registers[MB_IP_ADDRESS_1] =IP_From_Eeprom[1];
 8000856:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <detectTransitions+0x17c>)
 8000858:	785b      	ldrb	r3, [r3, #1]
 800085a:	461a      	mov	r2, r3
 800085c:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <detectTransitions+0x168>)
 800085e:	82da      	strh	r2, [r3, #22]
    		holding_registers[MB_IP_ADDRESS_2] =IP_From_Eeprom[2];
 8000860:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <detectTransitions+0x17c>)
 8000862:	789b      	ldrb	r3, [r3, #2]
 8000864:	461a      	mov	r2, r3
 8000866:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <detectTransitions+0x168>)
 8000868:	831a      	strh	r2, [r3, #24]
    		holding_registers[MB_IP_ADDRESS_3] =IP_From_Eeprom[3];
 800086a:	4b20      	ldr	r3, [pc, #128]	@ (80008ec <detectTransitions+0x17c>)
 800086c:	78db      	ldrb	r3, [r3, #3]
 800086e:	461a      	mov	r2, r3
 8000870:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <detectTransitions+0x168>)
 8000872:	835a      	strh	r2, [r3, #26]
    		holding_registers[MB_NETMASK_ADDRESS_0] =IP_From_Eeprom[4];
 8000874:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <detectTransitions+0x17c>)
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	461a      	mov	r2, r3
 800087a:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <detectTransitions+0x168>)
 800087c:	839a      	strh	r2, [r3, #28]
    		holding_registers[MB_NETMASK_ADDRESS_1] =IP_From_Eeprom[5];
 800087e:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <detectTransitions+0x17c>)
 8000880:	795b      	ldrb	r3, [r3, #5]
 8000882:	461a      	mov	r2, r3
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <detectTransitions+0x168>)
 8000886:	83da      	strh	r2, [r3, #30]
    		holding_registers[MB_NETMASK_ADDRESS_2] =IP_From_Eeprom[6];
 8000888:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <detectTransitions+0x17c>)
 800088a:	799b      	ldrb	r3, [r3, #6]
 800088c:	461a      	mov	r2, r3
 800088e:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <detectTransitions+0x168>)
 8000890:	841a      	strh	r2, [r3, #32]
    		holding_registers[MB_NETMASK_ADDRESS_3] =IP_From_Eeprom[7];
 8000892:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <detectTransitions+0x17c>)
 8000894:	79db      	ldrb	r3, [r3, #7]
 8000896:	461a      	mov	r2, r3
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <detectTransitions+0x168>)
 800089a:	845a      	strh	r2, [r3, #34]	@ 0x22
    		holding_registers[MB_GATEWAY_ADDRESS_0] =IP_From_Eeprom[8];
 800089c:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <detectTransitions+0x17c>)
 800089e:	7a1b      	ldrb	r3, [r3, #8]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <detectTransitions+0x168>)
 80008a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    		holding_registers[MB_GATEWAY_ADDRESS_1] =IP_From_Eeprom[9];
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <detectTransitions+0x17c>)
 80008a8:	7a5b      	ldrb	r3, [r3, #9]
 80008aa:	461a      	mov	r2, r3
 80008ac:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <detectTransitions+0x168>)
 80008ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    		holding_registers[MB_GATEWAY_ADDRESS_2] =IP_From_Eeprom[10];
 80008b0:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <detectTransitions+0x17c>)
 80008b2:	7a9b      	ldrb	r3, [r3, #10]
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <detectTransitions+0x168>)
 80008b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    		holding_registers[MB_GATEWAY_ADDRESS_3] =IP_From_Eeprom[11];
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <detectTransitions+0x17c>)
 80008bc:	7adb      	ldrb	r3, [r3, #11]
 80008be:	461a      	mov	r2, r3
 80008c0:	4b05      	ldr	r3, [pc, #20]	@ (80008d8 <detectTransitions+0x168>)
 80008c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    	}
    }

    // Update the previous state
    previous_state = holding_registers[MB_SWITH];
 80008c4:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <detectTransitions+0x168>)
 80008c6:	89db      	ldrh	r3, [r3, #14]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b02      	ldr	r3, [pc, #8]	@ (80008d4 <detectTransitions+0x164>)
 80008cc:	601a      	str	r2, [r3, #0]
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000c0 	.word	0x200000c0
 80008d8:	20000828 	.word	0x20000828
 80008dc:	08018ec8 	.word	0x08018ec8
 80008e0:	200000a8 	.word	0x200000a8
 80008e4:	08018eec 	.word	0x08018eec
 80008e8:	08018f00 	.word	0x08018f00
 80008ec:	200000b4 	.word	0x200000b4

080008f0 <inputOutputControl>:
// Estado de las entradas discretas en hardware
static uint8_t in_discrete_status[MB_DISCRETE_Q];



void inputOutputControl(void){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

	//in_discrete_status[0] = 1 ;

	ReadGPIO();
 80008f4:	f000 f84a 	bl	800098c <ReadGPIO>

	osMutexWait(discreteMutexHandle, osWaitForever);
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <inputOutputControl+0x54>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000900:	4618      	mov	r0, r3
 8000902:	f006 fdd9 	bl	80074b8 <osMutexWait>

	memcpy(discrete_status, in_discrete_status, HD_DISCRETE_Q * sizeof(uint8_t));
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <inputOutputControl+0x58>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a10      	ldr	r2, [pc, #64]	@ (800094c <inputOutputControl+0x5c>)
 800090c:	6013      	str	r3, [r2, #0]

	osMutexRelease(discreteMutexHandle);
 800090e:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <inputOutputControl+0x54>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f006 fe1e 	bl	8007554 <osMutexRelease>

	osMutexWait(coilMutexHandle, osWaitForever);
 8000918:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <inputOutputControl+0x60>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f04f 31ff 	mov.w	r1, #4294967295
 8000920:	4618      	mov	r0, r3
 8000922:	f006 fdc9 	bl	80074b8 <osMutexWait>

	memcpy(out_coil_status, coil_status, HD_COILS_Q * sizeof(uint8_t));
 8000926:	2214      	movs	r2, #20
 8000928:	490a      	ldr	r1, [pc, #40]	@ (8000954 <inputOutputControl+0x64>)
 800092a:	480b      	ldr	r0, [pc, #44]	@ (8000958 <inputOutputControl+0x68>)
 800092c:	f017 fb03 	bl	8017f36 <memcpy>

	osMutexRelease(coilMutexHandle);
 8000930:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <inputOutputControl+0x60>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f006 fe0d 	bl	8007554 <osMutexRelease>


	WriteGPIO();
 800093a:	f000 f86d 	bl	8000a18 <WriteGPIO>

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000614 	.word	0x20000614
 8000948:	200001c4 	.word	0x200001c4
 800094c:	20000718 	.word	0x20000718
 8000950:	20000610 	.word	0x20000610
 8000954:	20000618 	.word	0x20000618
 8000958:	200000c4 	.word	0x200000c4

0800095c <TurnOnRedLED>:

//LED ROJO para ser usado cuando el remoto esté en running
void TurnOnRedLED(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Encender el LED rojo
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000966:	4802      	ldr	r0, [pc, #8]	@ (8000970 <TurnOnRedLED+0x14>)
 8000968:	f003 fa44 	bl	8003df4 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(output_01_GPIO_Port, output_01_Pin, GPIO_PIN_SET);
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40020400 	.word	0x40020400

08000974 <TurnOffRedLED>:

void TurnOffRedLED(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // apagar el LED rojo
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800097e:	4802      	ldr	r0, [pc, #8]	@ (8000988 <TurnOffRedLED+0x14>)
 8000980:	f003 fa38 	bl	8003df4 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(output_01_GPIO_Port, output_01_Pin, GPIO_PIN_RESET);
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40020400 	.word	0x40020400

0800098c <ReadGPIO>:

void ReadGPIO(void){
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

	//llave no presionada input en 1 por pull up vía software
	if(READ_INPUT_01()){
 8000990:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000994:	481d      	ldr	r0, [pc, #116]	@ (8000a0c <ReadGPIO+0x80>)
 8000996:	f003 fa15 	bl	8003dc4 <HAL_GPIO_ReadPin>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d003      	beq.n	80009a8 <ReadGPIO+0x1c>
		HD_INPUT01 = HD_OFF;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <ReadGPIO+0x84>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	e002      	b.n	80009ae <ReadGPIO+0x22>
	}
	else{
		HD_INPUT01 = HD_ON;
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <ReadGPIO+0x84>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
	}

	if(READ_INPUT_02()){
 80009ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009b2:	4818      	ldr	r0, [pc, #96]	@ (8000a14 <ReadGPIO+0x88>)
 80009b4:	f003 fa06 	bl	8003dc4 <HAL_GPIO_ReadPin>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d003      	beq.n	80009c6 <ReadGPIO+0x3a>
		HD_INPUT02 = HD_OFF;
 80009be:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <ReadGPIO+0x84>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	705a      	strb	r2, [r3, #1]
 80009c4:	e002      	b.n	80009cc <ReadGPIO+0x40>
	}
	else{
		HD_INPUT02 = HD_ON;
 80009c6:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <ReadGPIO+0x84>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	705a      	strb	r2, [r3, #1]
	}

	if(READ_INPUT_03()){
 80009cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009d0:	4810      	ldr	r0, [pc, #64]	@ (8000a14 <ReadGPIO+0x88>)
 80009d2:	f003 f9f7 	bl	8003dc4 <HAL_GPIO_ReadPin>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d003      	beq.n	80009e4 <ReadGPIO+0x58>
		HD_INPUT03 = HD_OFF;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <ReadGPIO+0x84>)
 80009de:	2200      	movs	r2, #0
 80009e0:	709a      	strb	r2, [r3, #2]
 80009e2:	e002      	b.n	80009ea <ReadGPIO+0x5e>
	}
	else{
		HD_INPUT03 = HD_ON;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <ReadGPIO+0x84>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	709a      	strb	r2, [r3, #2]
	}

	if(READ_INPUT_04()){
 80009ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ee:	4809      	ldr	r0, [pc, #36]	@ (8000a14 <ReadGPIO+0x88>)
 80009f0:	f003 f9e8 	bl	8003dc4 <HAL_GPIO_ReadPin>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <ReadGPIO+0x76>
		HD_INPUT04 = HD_OFF;
 80009fa:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <ReadGPIO+0x84>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	70da      	strb	r2, [r3, #3]
		HD_INPUT04 = HD_ON;
	}



}
 8000a00:	e002      	b.n	8000a08 <ReadGPIO+0x7c>
		HD_INPUT04 = HD_ON;
 8000a02:	4b03      	ldr	r3, [pc, #12]	@ (8000a10 <ReadGPIO+0x84>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	70da      	strb	r2, [r3, #3]
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	200001c4 	.word	0x200001c4
 8000a14:	40021000 	.word	0x40021000

08000a18 <WriteGPIO>:

void WriteGPIO(void){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

	if (HD_OUTPUT01 == MB_ON){
 8000a1c:	4b32      	ldr	r3, [pc, #200]	@ (8000ae8 <WriteGPIO+0xd0>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d106      	bne.n	8000a32 <WriteGPIO+0x1a>
		SET_OUTPUT_01(GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a2a:	4830      	ldr	r0, [pc, #192]	@ (8000aec <WriteGPIO+0xd4>)
 8000a2c:	f003 f9e2 	bl	8003df4 <HAL_GPIO_WritePin>
 8000a30:	e005      	b.n	8000a3e <WriteGPIO+0x26>
	}
	else{
		SET_OUTPUT_01(GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a38:	482c      	ldr	r0, [pc, #176]	@ (8000aec <WriteGPIO+0xd4>)
 8000a3a:	f003 f9db 	bl	8003df4 <HAL_GPIO_WritePin>
	}
	if (HD_OUTPUT02 == MB_ON){
 8000a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae8 <WriteGPIO+0xd0>)
 8000a40:	785b      	ldrb	r3, [r3, #1]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d106      	bne.n	8000a54 <WriteGPIO+0x3c>
		SET_OUTPUT_02(GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a4c:	4827      	ldr	r0, [pc, #156]	@ (8000aec <WriteGPIO+0xd4>)
 8000a4e:	f003 f9d1 	bl	8003df4 <HAL_GPIO_WritePin>
 8000a52:	e005      	b.n	8000a60 <WriteGPIO+0x48>
	}
	else{
		SET_OUTPUT_02(GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a5a:	4824      	ldr	r0, [pc, #144]	@ (8000aec <WriteGPIO+0xd4>)
 8000a5c:	f003 f9ca 	bl	8003df4 <HAL_GPIO_WritePin>
	}
	if (HD_OUTPUT03 == MB_ON){
 8000a60:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <WriteGPIO+0xd0>)
 8000a62:	789b      	ldrb	r3, [r3, #2]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d106      	bne.n	8000a76 <WriteGPIO+0x5e>
		SET_OUTPUT_03(GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a6e:	481f      	ldr	r0, [pc, #124]	@ (8000aec <WriteGPIO+0xd4>)
 8000a70:	f003 f9c0 	bl	8003df4 <HAL_GPIO_WritePin>
 8000a74:	e005      	b.n	8000a82 <WriteGPIO+0x6a>
	}
	else{
		SET_OUTPUT_03(GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a7c:	481b      	ldr	r0, [pc, #108]	@ (8000aec <WriteGPIO+0xd4>)
 8000a7e:	f003 f9b9 	bl	8003df4 <HAL_GPIO_WritePin>
	}
	if (HD_OUTPUT04 == MB_ON){
 8000a82:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <WriteGPIO+0xd0>)
 8000a84:	78db      	ldrb	r3, [r3, #3]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d106      	bne.n	8000a98 <WriteGPIO+0x80>
		SET_OUTPUT_04(GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a90:	4816      	ldr	r0, [pc, #88]	@ (8000aec <WriteGPIO+0xd4>)
 8000a92:	f003 f9af 	bl	8003df4 <HAL_GPIO_WritePin>
 8000a96:	e005      	b.n	8000aa4 <WriteGPIO+0x8c>
	}
	else{
		SET_OUTPUT_04(GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a9e:	4813      	ldr	r0, [pc, #76]	@ (8000aec <WriteGPIO+0xd4>)
 8000aa0:	f003 f9a8 	bl	8003df4 <HAL_GPIO_WritePin>
	}
/*------------------Auxiliar Outputs --------------------------*/

	// Client connected
	if (holding_registers[MB_SERVER_STATUS] == MB_ON){
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <WriteGPIO+0xd8>)
 8000aa6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d106      	bne.n	8000aba <WriteGPIO+0xa2>
		SET_OUTPUT_STATUS(GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ab2:	4810      	ldr	r0, [pc, #64]	@ (8000af4 <WriteGPIO+0xdc>)
 8000ab4:	f003 f99e 	bl	8003df4 <HAL_GPIO_WritePin>
 8000ab8:	e005      	b.n	8000ac6 <WriteGPIO+0xae>
	}
	else{
		SET_OUTPUT_STATUS(GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ac0:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <WriteGPIO+0xdc>)
 8000ac2:	f003 f997 	bl	8003df4 <HAL_GPIO_WritePin>
	}

	//Auxiliar LED AZUL
	if (HD_OUTPUT_LED_BLUE == MB_ON){
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <WriteGPIO+0xd0>)
 8000ac8:	7adb      	ldrb	r3, [r3, #11]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d105      	bne.n	8000ada <WriteGPIO+0xc2>
		SET_OUTPUT_LED_BLUE(GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2180      	movs	r1, #128	@ 0x80
 8000ad2:	4809      	ldr	r0, [pc, #36]	@ (8000af8 <WriteGPIO+0xe0>)
 8000ad4:	f003 f98e 	bl	8003df4 <HAL_GPIO_WritePin>
	}
	else{
		SET_OUTPUT_LED_BLUE(GPIO_PIN_RESET);
	}

}
 8000ad8:	e004      	b.n	8000ae4 <WriteGPIO+0xcc>
		SET_OUTPUT_LED_BLUE(GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2180      	movs	r1, #128	@ 0x80
 8000ade:	4806      	ldr	r0, [pc, #24]	@ (8000af8 <WriteGPIO+0xe0>)
 8000ae0:	f003 f988 	bl	8003df4 <HAL_GPIO_WritePin>
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200000c4 	.word	0x200000c4
 8000aec:	40021400 	.word	0x40021400
 8000af0:	20000828 	.word	0x20000828
 8000af4:	40020c00 	.word	0x40020c00
 8000af8:	40020400 	.word	0x40020400

08000afc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4a07      	ldr	r2, [pc, #28]	@ (8000b28 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	4a06      	ldr	r2, [pc, #24]	@ (8000b2c <vApplicationGetIdleTaskMemory+0x30>)
 8000b12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2280      	movs	r2, #128	@ 0x80
 8000b18:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	200002c4 	.word	0x200002c4
 8000b2c:	20000364 	.word	0x20000364

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b5b0      	push	{r4, r5, r7, lr}
 8000b32:	b09c      	sub	sp, #112	@ 0x70
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b36:	f001 fbf5 	bl	8002324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3a:	f000 f877 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3e:	f000 f949 	bl	8000dd4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b42:	f000 f91d 	bl	8000d80 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000b46:	f000 f8db 	bl	8000d00 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of uartMutex */
  osMutexDef(uartMutex);
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000b4e:	2300      	movs	r3, #0
 8000b50:	66fb      	str	r3, [r7, #108]	@ 0x6c
  uartMutexHandle = osMutexCreate(osMutex(uartMutex));
 8000b52:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000b56:	4618      	mov	r0, r3
 8000b58:	f006 fc96 	bl	8007488 <osMutexCreate>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8000c08 <main+0xd8>)
 8000b60:	6013      	str	r3, [r2, #0]

  /* definition and creation of coilMutex */
  osMutexDef(coilMutex);
 8000b62:	2300      	movs	r3, #0
 8000b64:	663b      	str	r3, [r7, #96]	@ 0x60
 8000b66:	2300      	movs	r3, #0
 8000b68:	667b      	str	r3, [r7, #100]	@ 0x64
  coilMutexHandle = osMutexCreate(osMutex(coilMutex));
 8000b6a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f006 fc8a 	bl	8007488 <osMutexCreate>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4a25      	ldr	r2, [pc, #148]	@ (8000c0c <main+0xdc>)
 8000b78:	6013      	str	r3, [r2, #0]

  /* definition and creation of discreteMutex */
  osMutexDef(discreteMutex);
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000b7e:	2300      	movs	r3, #0
 8000b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  discreteMutexHandle = osMutexCreate(osMutex(discreteMutex));
 8000b82:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b86:	4618      	mov	r0, r3
 8000b88:	f006 fc7e 	bl	8007488 <osMutexCreate>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a20      	ldr	r2, [pc, #128]	@ (8000c10 <main+0xe0>)
 8000b90:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000b92:	4b20      	ldr	r3, [pc, #128]	@ (8000c14 <main+0xe4>)
 8000b94:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000b98:	461d      	mov	r5, r3
 8000b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ba6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f006 fc0b 	bl	80073c8 <osThreadCreate>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a18      	ldr	r2, [pc, #96]	@ (8000c18 <main+0xe8>)
 8000bb6:	6013      	str	r3, [r2, #0]

  /* definition and creation of DriverTask */
  osThreadDef(DriverTask, StartDriverTask, osPriorityNormal, 0, 128);
 8000bb8:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <main+0xec>)
 8000bba:	f107 0420 	add.w	r4, r7, #32
 8000bbe:	461d      	mov	r5, r3
 8000bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DriverTaskHandle = osThreadCreate(osThread(DriverTask), NULL);
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f006 fbf8 	bl	80073c8 <osThreadCreate>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4a11      	ldr	r2, [pc, #68]	@ (8000c20 <main+0xf0>)
 8000bdc:	6013      	str	r3, [r2, #0]

  /* definition and creation of EepromManagment */
  osThreadDef(EepromManagment, EepromReadWrite, osPriorityLow, 0, 128);
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <main+0xf4>)
 8000be0:	1d3c      	adds	r4, r7, #4
 8000be2:	461d      	mov	r5, r3
 8000be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EepromManagmentHandle = osThreadCreate(osThread(EepromManagment), NULL);
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f006 fbe7 	bl	80073c8 <osThreadCreate>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <main+0xf8>)
 8000bfe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c00:	f006 fbcb 	bl	800739a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <main+0xd4>
 8000c08:	2000060c 	.word	0x2000060c
 8000c0c:	20000610 	.word	0x20000610
 8000c10:	20000614 	.word	0x20000614
 8000c14:	08018f30 	.word	0x08018f30
 8000c18:	20000600 	.word	0x20000600
 8000c1c:	08018f58 	.word	0x08018f58
 8000c20:	20000604 	.word	0x20000604
 8000c24:	08018f84 	.word	0x08018f84
 8000c28:	20000608 	.word	0x20000608

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b094      	sub	sp, #80	@ 0x50
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 0320 	add.w	r3, r7, #32
 8000c36:	2230      	movs	r2, #48	@ 0x30
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f017 f8af 	bl	8017d9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	4b28      	ldr	r3, [pc, #160]	@ (8000cf8 <SystemClock_Config+0xcc>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c58:	4a27      	ldr	r2, [pc, #156]	@ (8000cf8 <SystemClock_Config+0xcc>)
 8000c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c60:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <SystemClock_Config+0xcc>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	4b22      	ldr	r3, [pc, #136]	@ (8000cfc <SystemClock_Config+0xd0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a21      	ldr	r2, [pc, #132]	@ (8000cfc <SystemClock_Config+0xd0>)
 8000c76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cfc <SystemClock_Config+0xd0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c92:	2302      	movs	r3, #2
 8000c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c96:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ca0:	23a8      	movs	r3, #168	@ 0xa8
 8000ca2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ca8:	2307      	movs	r3, #7
 8000caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cac:	f107 0320 	add.w	r3, r7, #32
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 f959 	bl	8004f68 <HAL_RCC_OscConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cbc:	f000 fa3e 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ccc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	2105      	movs	r1, #5
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f004 fbba 	bl	8005458 <HAL_RCC_ClockConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cea:	f000 fa27 	bl	800113c <Error_Handler>
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3750      	adds	r7, #80	@ 0x50
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40007000 	.word	0x40007000

08000d00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d06:	4a1c      	ldr	r2, [pc, #112]	@ (8000d78 <MX_I2C2_Init+0x78>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d7c <MX_I2C2_Init+0x7c>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d10:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d16:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d2a:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d30:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d36:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d3c:	480d      	ldr	r0, [pc, #52]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d3e:	f003 f873 	bl	8003e28 <HAL_I2C_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d48:	f000 f9f8 	bl	800113c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4809      	ldr	r0, [pc, #36]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d50:	f004 f88e 	bl	8004e70 <HAL_I2CEx_ConfigAnalogFilter>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000d5a:	f000 f9ef 	bl	800113c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4804      	ldr	r0, [pc, #16]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d62:	f004 f8c1 	bl	8004ee8 <HAL_I2CEx_ConfigDigitalFilter>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000d6c:	f000 f9e6 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000564 	.word	0x20000564
 8000d78:	40005800 	.word	0x40005800
 8000d7c:	00061a80 	.word	0x00061a80

08000d80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	@ (8000dd0 <MX_USART3_UART_Init+0x50>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000d8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000db8:	f005 f842 	bl	8005e40 <HAL_UART_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000dc2:	f000 f9bb 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200005b8 	.word	0x200005b8
 8000dd0:	40004800 	.word	0x40004800

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08e      	sub	sp, #56	@ 0x38
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
 8000dee:	4b8b      	ldr	r3, [pc, #556]	@ (800101c <MX_GPIO_Init+0x248>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a8a      	ldr	r2, [pc, #552]	@ (800101c <MX_GPIO_Init+0x248>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b88      	ldr	r3, [pc, #544]	@ (800101c <MX_GPIO_Init+0x248>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	623b      	str	r3, [r7, #32]
 8000e04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	4b84      	ldr	r3, [pc, #528]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a83      	ldr	r2, [pc, #524]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b81      	ldr	r3, [pc, #516]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e1e:	61fb      	str	r3, [r7, #28]
 8000e20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	4b7d      	ldr	r3, [pc, #500]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a7c      	ldr	r2, [pc, #496]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b7a      	ldr	r3, [pc, #488]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	61bb      	str	r3, [r7, #24]
 8000e3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	4b76      	ldr	r3, [pc, #472]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a75      	ldr	r2, [pc, #468]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e48:	f043 0320 	orr.w	r3, r3, #32
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b73      	ldr	r3, [pc, #460]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0320 	and.w	r3, r3, #32
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b6f      	ldr	r3, [pc, #444]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a6e      	ldr	r2, [pc, #440]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e64:	f043 0310 	orr.w	r3, r3, #16
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b6c      	ldr	r3, [pc, #432]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b68      	ldr	r3, [pc, #416]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a67      	ldr	r2, [pc, #412]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b65      	ldr	r3, [pc, #404]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	4b61      	ldr	r3, [pc, #388]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a60      	ldr	r2, [pc, #384]	@ (800101c <MX_GPIO_Init+0x248>)
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b5e      	ldr	r3, [pc, #376]	@ (800101c <MX_GPIO_Init+0x248>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b5a      	ldr	r3, [pc, #360]	@ (800101c <MX_GPIO_Init+0x248>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a59      	ldr	r2, [pc, #356]	@ (800101c <MX_GPIO_Init+0x248>)
 8000eb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b57      	ldr	r3, [pc, #348]	@ (800101c <MX_GPIO_Init+0x248>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, output_01_Pin|output_02_Pin|output_03_Pin|output_04_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000ed0:	4853      	ldr	r0, [pc, #332]	@ (8001020 <MX_GPIO_Init+0x24c>)
 8000ed2:	f002 ff8f 	bl	8003df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000edc:	4851      	ldr	r0, [pc, #324]	@ (8001024 <MX_GPIO_Init+0x250>)
 8000ede:	f002 ff89 	bl	8003df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(output_status_GPIO_Port, output_status_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ee8:	484f      	ldr	r0, [pc, #316]	@ (8001028 <MX_GPIO_Init+0x254>)
 8000eea:	f002 ff83 	bl	8003df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2140      	movs	r1, #64	@ 0x40
 8000ef2:	484e      	ldr	r0, [pc, #312]	@ (800102c <MX_GPIO_Init+0x258>)
 8000ef4:	f002 ff7e 	bl	8003df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ef8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000efe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4848      	ldr	r0, [pc, #288]	@ (8001030 <MX_GPIO_Init+0x25c>)
 8000f10:	f002 fdac 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : output_01_Pin output_02_Pin output_03_Pin output_04_Pin */
  GPIO_InitStruct.Pin = output_01_Pin|output_02_Pin|output_03_Pin|output_04_Pin;
 8000f14:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	483c      	ldr	r0, [pc, #240]	@ (8001020 <MX_GPIO_Init+0x24c>)
 8000f2e:	f002 fd9d 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : input_02_Pin input_03_Pin input_04_Pin */
  GPIO_InitStruct.Pin = input_02_Pin|input_03_Pin|input_04_Pin;
 8000f32:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	483b      	ldr	r0, [pc, #236]	@ (8001034 <MX_GPIO_Init+0x260>)
 8000f48:	f002 fd90 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000f4c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f62:	4619      	mov	r1, r3
 8000f64:	482f      	ldr	r0, [pc, #188]	@ (8001024 <MX_GPIO_Init+0x250>)
 8000f66:	f002 fd81 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : output_status_Pin */
  GPIO_InitStruct.Pin = output_status_Pin;
 8000f6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(output_status_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f80:	4619      	mov	r1, r3
 8000f82:	4829      	ldr	r0, [pc, #164]	@ (8001028 <MX_GPIO_Init+0x254>)
 8000f84:	f002 fd72 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : input_01_Pin */
  GPIO_InitStruct.Pin = input_01_Pin;
 8000f88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(input_01_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4822      	ldr	r0, [pc, #136]	@ (8001028 <MX_GPIO_Init+0x254>)
 8000f9e:	f002 fd65 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000fa2:	2340      	movs	r3, #64	@ 0x40
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	481c      	ldr	r0, [pc, #112]	@ (800102c <MX_GPIO_Init+0x258>)
 8000fba:	f002 fd57 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000fbe:	2380      	movs	r3, #128	@ 0x80
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4816      	ldr	r0, [pc, #88]	@ (800102c <MX_GPIO_Init+0x258>)
 8000fd2:	f002 fd4b 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4813      	ldr	r0, [pc, #76]	@ (8001038 <MX_GPIO_Init+0x264>)
 8000fec:	f002 fd3e 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ff0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001002:	230a      	movs	r3, #10
 8001004:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800100a:	4619      	mov	r1, r3
 800100c:	480a      	ldr	r0, [pc, #40]	@ (8001038 <MX_GPIO_Init+0x264>)
 800100e:	f002 fd2d 	bl	8003a6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001012:	bf00      	nop
 8001014:	3738      	adds	r7, #56	@ 0x38
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40021400 	.word	0x40021400
 8001024:	40020400 	.word	0x40020400
 8001028:	40020c00 	.word	0x40020c00
 800102c:	40021800 	.word	0x40021800
 8001030:	40020800 	.word	0x40020800
 8001034:	40021000 	.word	0x40021000
 8001038:	40020000 	.word	0x40020000

0800103c <SendString>:

/* USER CODE BEGIN 4 */


void SendString(const char *str) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
    // Toma el mutex antes de transmitir
    if (osMutexWait(uartMutexHandle, osWaitForever) == osOK) {
 8001044:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <SendString+0x44>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	4618      	mov	r0, r3
 800104e:	f006 fa33 	bl	80074b8 <osMutexWait>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10f      	bne.n	8001078 <SendString+0x3c>
        HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff f8c9 	bl	80001f0 <strlen>
 800105e:	4603      	mov	r3, r0
 8001060:	b29a      	uxth	r2, r3
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4806      	ldr	r0, [pc, #24]	@ (8001084 <SendString+0x48>)
 800106a:	f004 ff39 	bl	8005ee0 <HAL_UART_Transmit>
        // Libera el mutex después de transmitir
        osMutexRelease(uartMutexHandle);
 800106e:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <SendString+0x44>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f006 fa6e 	bl	8007554 <osMutexRelease>
    } else {
        // Manejo de error si no se puede tomar el mutex
        // Esto debería ser raro si usas osWaitForever
    }
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000060c 	.word	0x2000060c
 8001084:	200005b8 	.word	0x200005b8

08001088 <SendNumber>:

void SendNumber(int16_t number) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]
    char buffer[20];  // Buffer para almacenar el número como cadena
    sprintf(buffer, "%d", number);  // Convierte el número a cadena
 8001092:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	4906      	ldr	r1, [pc, #24]	@ (80010b4 <SendNumber+0x2c>)
 800109c:	4618      	mov	r0, r3
 800109e:	f016 fdf1 	bl	8017c84 <siprintf>
    SendString(buffer);  // Envia la cadena por UART
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ffc8 	bl	800103c <SendString>
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	08018fa0 	.word	0x08018fa0

080010b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80010c0:	f005 faca 	bl	8006658 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpserver_init();
 80010c4:	f000 fe88 	bl	8001dd8 <tcpserver_init>


  //const char *mensaje = "I'm alive!!!\n";
  const char *mensaje_bienvenida = "inicio Modbus TCP Remoto en modo Servidor\r";
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <StartDefaultTask+0x2c>)
 80010ca:	60fb      	str	r3, [r7, #12]

  SendString(mensaje_bienvenida);
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f7ff ffb5 	bl	800103c <SendString>

  /* Infinite loop */
  for(;;)
  {
	  //SendString(mensaje);
	  osDelay(500);
 80010d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010d6:	f006 f9c3 	bl	8007460 <osDelay>

	  osDelay(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f006 f9c0 	bl	8007460 <osDelay>
	  osDelay(500);
 80010e0:	bf00      	nop
 80010e2:	e7f6      	b.n	80010d2 <StartDefaultTask+0x1a>
 80010e4:	08018fa4 	.word	0x08018fa4

080010e8 <StartDriverTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDriverTask */
void StartDriverTask(void const * argument)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDriverTask */
  /* Infinite loop */
  for(;;)
  {
	  inputOutputControl();
 80010f0:	f7ff fbfe 	bl	80008f0 <inputOutputControl>
	  osDelay(20);
 80010f4:	2014      	movs	r0, #20
 80010f6:	f006 f9b3 	bl	8007460 <osDelay>
	  inputOutputControl();
 80010fa:	bf00      	nop
 80010fc:	e7f8      	b.n	80010f0 <StartDriverTask+0x8>

080010fe <EepromReadWrite>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EepromReadWrite */
void EepromReadWrite(void const * argument)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EepromReadWrite */
  /* Infinite loop */
  for(;;)
  {
	  detectTransitions();
 8001106:	f7ff fb33 	bl	8000770 <detectTransitions>
	  osDelay(500);
 800110a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800110e:	f006 f9a7 	bl	8007460 <osDelay>
	  detectTransitions();
 8001112:	bf00      	nop
 8001114:	e7f7      	b.n	8001106 <EepromReadWrite+0x8>
	...

08001118 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d101      	bne.n	800112e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800112a:	f001 f91d 	bl	8002368 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40001000 	.word	0x40001000

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <Error_Handler+0x8>

08001148 <mb_process>:
static uint8_t mb_process_val(uint16_t fn, uint16_t val);

static void mb_mbap_copy(uint8_t *mb_repl_buf, uint8_t *mb_req_buf);
static uint16_t mb_pdu_calculate_N(uint16_t fn, uint16_t quantity);

uint16_t mb_process(uint8_t *mb_repl_buf, uint8_t *mb_req_buf, uint16_t req_buf_len) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	4613      	mov	r3, r2
 8001154:	80fb      	strh	r3, [r7, #6]
	memset(mb_repl_buf, '\0', MB_ADU_MAXSIZE);  // clear the buffer
 8001156:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800115a:	2100      	movs	r1, #0
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f016 fe1e 	bl	8017d9e <memset>
	mb_mbap_copy(mb_repl_buf, mb_req_buf);
 8001162:	68b9      	ldr	r1, [r7, #8]
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f000 f934 	bl	80013d2 <mb_mbap_copy>
	uint16_t pduLen = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	82fb      	strh	r3, [r7, #22]

	uint8_t fn = mb_req_buf[MB_PDU_FN];
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	79db      	ldrb	r3, [r3, #7]
 8001172:	757b      	strb	r3, [r7, #21]
	switch (fn) {
 8001174:	7d7b      	ldrb	r3, [r7, #21]
 8001176:	2b10      	cmp	r3, #16
 8001178:	dc1c      	bgt.n	80011b4 <mb_process+0x6c>
 800117a:	2b0f      	cmp	r3, #15
 800117c:	da23      	bge.n	80011c6 <mb_process+0x7e>
 800117e:	2b04      	cmp	r3, #4
 8001180:	dc02      	bgt.n	8001188 <mb_process+0x40>
 8001182:	2b00      	cmp	r3, #0
 8001184:	dc04      	bgt.n	8001190 <mb_process+0x48>
 8001186:	e015      	b.n	80011b4 <mb_process+0x6c>
 8001188:	3b05      	subs	r3, #5
 800118a:	2b01      	cmp	r3, #1
 800118c:	d812      	bhi.n	80011b4 <mb_process+0x6c>
 800118e:	e008      	b.n	80011a2 <mb_process+0x5a>
	case MB_FN_READ_COILS:
	case MB_FN_READ_DISCRETE:
	case MB_FN_READ_HOLDING:
	case MB_FN_READ_INPUT:
		pduLen = mb_process_pdu_read_fn(mb_repl_buf, mb_req_buf, req_buf_len);
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	461a      	mov	r2, r3
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 f82c 	bl	80011f4 <mb_process_pdu_read_fn>
 800119c:	4603      	mov	r3, r0
 800119e:	82fb      	strh	r3, [r7, #22]
		break;
 80011a0:	e012      	b.n	80011c8 <mb_process+0x80>
	case MB_FN_WRITE_S_COIL:
	case MB_FN_WRITE_S_HOLDING:
		pduLen = mb_process_pdu_write_single_fn(mb_repl_buf, mb_req_buf, req_buf_len);
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	461a      	mov	r2, r3
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f000 f89f 	bl	80012ec <mb_process_pdu_write_single_fn>
 80011ae:	4603      	mov	r3, r0
 80011b0:	82fb      	strh	r3, [r7, #22]
		break;
 80011b2:	e009      	b.n	80011c8 <mb_process+0x80>
	case MB_FN_WRITE_M_COIL:
	case MB_FN_WRITE_M_HOLDING:
		//mb_process_write_fn(mb_repl_buf, mb_req_buf, req_buf_len);
		break;
	default:
		pduLen = mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_FN_UNSUPPORTED);
 80011b4:	7d7b      	ldrb	r3, [r7, #21]
 80011b6:	2201      	movs	r2, #1
 80011b8:	4619      	mov	r1, r3
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f000 f9aa 	bl	8001514 <mb_process_err>
 80011c0:	4603      	mov	r3, r0
 80011c2:	82fb      	strh	r3, [r7, #22]
		break;
 80011c4:	e000      	b.n	80011c8 <mb_process+0x80>
		break;
 80011c6:	bf00      	nop
	}

	mb_repl_buf[MB_MBAP_LEN_H] = (pduLen + 1) >> 8;
 80011c8:	8afb      	ldrh	r3, [r7, #22]
 80011ca:	3301      	adds	r3, #1
 80011cc:	121a      	asrs	r2, r3, #8
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3304      	adds	r3, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_LEN_L] = (pduLen + 1) & 0xff;
 80011d6:	8afb      	ldrh	r3, [r7, #22]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3305      	adds	r3, #5
 80011de:	3201      	adds	r2, #1
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	701a      	strb	r2, [r3, #0]

	return (pduLen + MB_MBAP_SIZE);
 80011e4:	8afb      	ldrh	r3, [r7, #22]
 80011e6:	3307      	adds	r3, #7
 80011e8:	b29b      	uxth	r3, r3
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <mb_process_pdu_read_fn>:

static uint16_t mb_process_pdu_read_fn(uint8_t *mb_repl_buf, uint8_t *mb_req_buf, uint16_t req_buf_len) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	4613      	mov	r3, r2
 8001200:	80fb      	strh	r3, [r7, #6]
	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	79db      	ldrb	r3, [r3, #7]
 8001206:	75fb      	strb	r3, [r7, #23]
	uint16_t start_address = mb_req_buf[MB_PDU_R_ST_ADDR_L] + (mb_req_buf[MB_PDU_R_ST_ADDR_H] << 8);
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	3309      	adds	r3, #9
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	3308      	adds	r3, #8
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	b29b      	uxth	r3, r3
 800121a:	4413      	add	r3, r2
 800121c:	82bb      	strh	r3, [r7, #20]
	uint16_t quantity = mb_req_buf[MB_PDU_R_QUANTITY_L] + (mb_req_buf[MB_PDU_R_QUANTITY_H] << 8);
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	330b      	adds	r3, #11
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	330a      	adds	r3, #10
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	b29b      	uxth	r3, r3
 8001230:	4413      	add	r3, r2
 8001232:	827b      	strh	r3, [r7, #18]

	if (mb_process_start_address(fn, start_address, quantity) != MB_EXCEPTION_OK) {
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	b29b      	uxth	r3, r3
 8001238:	8a7a      	ldrh	r2, [r7, #18]
 800123a:	8ab9      	ldrh	r1, [r7, #20]
 800123c:	4618      	mov	r0, r3
 800123e:	f000 f8eb 	bl	8001418 <mb_process_start_address>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d007      	beq.n	8001258 <mb_process_pdu_read_fn+0x64>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_ADDR);
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	2202      	movs	r2, #2
 800124c:	4619      	mov	r1, r3
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f000 f960 	bl	8001514 <mb_process_err>
 8001254:	4603      	mov	r3, r0
 8001256:	e045      	b.n	80012e4 <mb_process_pdu_read_fn+0xf0>
	} else { // form PDU content
		mb_repl_buf[MB_PDU_FN] = fn;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3307      	adds	r3, #7
 800125c:	7dfa      	ldrb	r2, [r7, #23]
 800125e:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_REPL_N] = mb_pdu_calculate_N(fn, quantity);
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	b29b      	uxth	r3, r3
 8001264:	8a7a      	ldrh	r2, [r7, #18]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f96e 	bl	800154a <mb_pdu_calculate_N>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3308      	adds	r3, #8
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	701a      	strb	r2, [r3, #0]

		switch (fn) {
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	3b01      	subs	r3, #1
 800127e:	2b03      	cmp	r3, #3
 8001280:	d826      	bhi.n	80012d0 <mb_process_pdu_read_fn+0xdc>
 8001282:	a201      	add	r2, pc, #4	@ (adr r2, 8001288 <mb_process_pdu_read_fn+0x94>)
 8001284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001288:	08001299 	.word	0x08001299
 800128c:	080012a7 	.word	0x080012a7
 8001290:	080012b5 	.word	0x080012b5
 8001294:	080012c3 	.word	0x080012c3
		case MB_FN_READ_COILS:
			read_coils(mb_repl_buf, start_address, quantity);
 8001298:	8a7a      	ldrh	r2, [r7, #18]
 800129a:	8abb      	ldrh	r3, [r7, #20]
 800129c:	4619      	mov	r1, r3
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 f980 	bl	80015a4 <read_coils>
			break;
 80012a4:	e014      	b.n	80012d0 <mb_process_pdu_read_fn+0xdc>
		case MB_FN_READ_DISCRETE:
			read_discrete(mb_repl_buf, start_address, quantity);
 80012a6:	8a7a      	ldrh	r2, [r7, #18]
 80012a8:	8abb      	ldrh	r3, [r7, #20]
 80012aa:	4619      	mov	r1, r3
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 f9c7 	bl	8001640 <read_discrete>
			break;
 80012b2:	e00d      	b.n	80012d0 <mb_process_pdu_read_fn+0xdc>
		case MB_FN_READ_HOLDING:
			read_holding(mb_repl_buf, start_address, quantity);
 80012b4:	8a7a      	ldrh	r2, [r7, #18]
 80012b6:	8abb      	ldrh	r3, [r7, #20]
 80012b8:	4619      	mov	r1, r3
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f000 fa50 	bl	8001760 <read_holding>
			break;
 80012c0:	e006      	b.n	80012d0 <mb_process_pdu_read_fn+0xdc>
		case MB_FN_READ_INPUT:
			read_inputs(mb_repl_buf, start_address, quantity);
 80012c2:	8a7a      	ldrh	r2, [r7, #18]
 80012c4:	8abb      	ldrh	r3, [r7, #20]
 80012c6:	4619      	mov	r1, r3
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 f9f9 	bl	80016c0 <read_inputs>
			break;
 80012ce:	bf00      	nop
		}

	}
	return mb_pdu_calculate_N(fn, quantity) + 2; // returns PDU size where +2 are N and fn
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	8a7a      	ldrh	r2, [r7, #18]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f936 	bl	800154a <mb_pdu_calculate_N>
 80012de:	4603      	mov	r3, r0
 80012e0:	3302      	adds	r3, #2
 80012e2:	b29b      	uxth	r3, r3
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <mb_process_pdu_write_single_fn>:

static uint16_t mb_process_pdu_write_single_fn(uint8_t *mb_repl_buf, uint8_t *mb_req_buf, uint16_t req_buf_len) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	4613      	mov	r3, r2
 80012f8:	80fb      	strh	r3, [r7, #6]
	uint8_t fn = mb_req_buf[MB_PDU_FN];
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	79db      	ldrb	r3, [r3, #7]
 80012fe:	75fb      	strb	r3, [r7, #23]
	uint16_t address = mb_req_buf[MB_PDU_W_REG_ADDR_L] + (mb_req_buf[MB_PDU_W_REG_ADDR_H] << 8);
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3309      	adds	r3, #9
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	3308      	adds	r3, #8
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b29b      	uxth	r3, r3
 8001312:	4413      	add	r3, r2
 8001314:	82bb      	strh	r3, [r7, #20]
	uint16_t valToWrite = mb_req_buf[MB_PDU_W_REG_VAL_L] + (mb_req_buf[MB_PDU_W_REG_VAL_H] << 8);
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	330b      	adds	r3, #11
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	330a      	adds	r3, #10
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b29b      	uxth	r3, r3
 8001328:	4413      	add	r3, r2
 800132a:	827b      	strh	r3, [r7, #18]

	if (mb_process_start_address(fn, address, 1) != MB_EXCEPTION_OK) {
 800132c:	7dfb      	ldrb	r3, [r7, #23]
 800132e:	b29b      	uxth	r3, r3
 8001330:	8ab9      	ldrh	r1, [r7, #20]
 8001332:	2201      	movs	r2, #1
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f86f 	bl	8001418 <mb_process_start_address>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d007      	beq.n	8001350 <mb_process_pdu_write_single_fn+0x64>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_ADDR);
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	2202      	movs	r2, #2
 8001344:	4619      	mov	r1, r3
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f000 f8e4 	bl	8001514 <mb_process_err>
 800134c:	4603      	mov	r3, r0
 800134e:	e03c      	b.n	80013ca <mb_process_pdu_write_single_fn+0xde>
	} else if (mb_process_val(fn, valToWrite) != MB_EXCEPTION_OK) {
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	b29b      	uxth	r3, r3
 8001354:	8a7a      	ldrh	r2, [r7, #18]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f8bd 	bl	80014d8 <mb_process_val>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d007      	beq.n	8001374 <mb_process_pdu_write_single_fn+0x88>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_VAL);
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	2203      	movs	r2, #3
 8001368:	4619      	mov	r1, r3
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 f8d2 	bl	8001514 <mb_process_err>
 8001370:	4603      	mov	r3, r0
 8001372:	e02a      	b.n	80013ca <mb_process_pdu_write_single_fn+0xde>
	} else { // form PDU content
		mb_repl_buf[MB_PDU_FN] = fn;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3307      	adds	r3, #7
 8001378:	7dfa      	ldrb	r2, [r7, #23]
 800137a:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_ADDR_H] = mb_req_buf[MB_PDU_W_REG_ADDR_H];
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3308      	adds	r3, #8
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	7a12      	ldrb	r2, [r2, #8]
 8001384:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_ADDR_L] = mb_req_buf[MB_PDU_W_REG_ADDR_L];
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3309      	adds	r3, #9
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	7a52      	ldrb	r2, [r2, #9]
 800138e:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_VAL_H] = mb_req_buf[MB_PDU_W_REG_VAL_H];
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	330a      	adds	r3, #10
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	7a92      	ldrb	r2, [r2, #10]
 8001398:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_VAL_L] = mb_req_buf[MB_PDU_W_REG_VAL_L];
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	330b      	adds	r3, #11
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	7ad2      	ldrb	r2, [r2, #11]
 80013a2:	701a      	strb	r2, [r3, #0]

		if(fn == MB_FN_WRITE_S_COIL) write_single_coil(address, valToWrite);
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	2b05      	cmp	r3, #5
 80013a8:	d105      	bne.n	80013b6 <mb_process_pdu_write_single_fn+0xca>
 80013aa:	8a7a      	ldrh	r2, [r7, #18]
 80013ac:	8abb      	ldrh	r3, [r7, #20]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fa17 	bl	80017e4 <write_single_coil>
		if(fn == MB_FN_WRITE_S_HOLDING) write_single_holding(address, valToWrite);
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
 80013b8:	2b06      	cmp	r3, #6
 80013ba:	d105      	bne.n	80013c8 <mb_process_pdu_write_single_fn+0xdc>
 80013bc:	8a7a      	ldrh	r2, [r7, #18]
 80013be:	8abb      	ldrh	r3, [r7, #20]
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 fa4c 	bl	8001860 <write_single_holding>
	}
	return 5; // PDU size for write single XXX command
 80013c8:	2305      	movs	r3, #5
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <mb_mbap_copy>:

static void mb_mbap_copy(uint8_t *mb_repl_buf, uint8_t *mb_req_buf) {
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
	mb_repl_buf[MB_MBAP_TRANSACTION_ID_H] = mb_req_buf[MB_MBAP_TRANSACTION_ID_H];
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	781a      	ldrb	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_TRANSACTION_ID_L] = mb_req_buf[MB_MBAP_TRANSACTION_ID_L];
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3301      	adds	r3, #1
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	7852      	ldrb	r2, [r2, #1]
 80013ec:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_PROTOCOL_ID_H] = mb_req_buf[MB_MBAP_PROTOCOL_ID_H];
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3302      	adds	r3, #2
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	7892      	ldrb	r2, [r2, #2]
 80013f6:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_PROTOCOL_ID_L] = mb_req_buf[MB_MBAP_PROTOCOL_ID_L];
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3303      	adds	r3, #3
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	78d2      	ldrb	r2, [r2, #3]
 8001400:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_CLIENT_ID] = mb_req_buf[MB_MBAP_CLIENT_ID];
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3306      	adds	r3, #6
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	7992      	ldrb	r2, [r2, #6]
 800140a:	701a      	strb	r2, [r3, #0]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <mb_process_start_address>:

static uint8_t mb_process_start_address(uint16_t fn, uint16_t start_address, uint16_t quantity) {
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
 8001422:	460b      	mov	r3, r1
 8001424:	80bb      	strh	r3, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	807b      	strh	r3, [r7, #2]
	uint8_t exception_code = MB_EXCEPTION_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	73fb      	strb	r3, [r7, #15]
	switch (fn) {
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	3b01      	subs	r3, #1
 8001432:	2b05      	cmp	r3, #5
 8001434:	d849      	bhi.n	80014ca <mb_process_start_address+0xb2>
 8001436:	a201      	add	r2, pc, #4	@ (adr r2, 800143c <mb_process_start_address+0x24>)
 8001438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143c:	08001455 	.word	0x08001455
 8001440:	08001465 	.word	0x08001465
 8001444:	08001475 	.word	0x08001475
 8001448:	08001485 	.word	0x08001485
 800144c:	08001495 	.word	0x08001495
 8001450:	080014a5 	.word	0x080014a5
	case MB_FN_READ_COILS:
		if ((start_address + quantity) > MB_COILS_Q)
 8001454:	88ba      	ldrh	r2, [r7, #4]
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	4413      	add	r3, r2
 800145a:	2bff      	cmp	r3, #255	@ 0xff
 800145c:	dd2a      	ble.n	80014b4 <mb_process_start_address+0x9c>
			exception_code = 2;
 800145e:	2302      	movs	r3, #2
 8001460:	73fb      	strb	r3, [r7, #15]
		break;
 8001462:	e027      	b.n	80014b4 <mb_process_start_address+0x9c>
	case MB_FN_READ_DISCRETE:
		if ((start_address + quantity) > MB_DISCRETE_Q)
 8001464:	88ba      	ldrh	r2, [r7, #4]
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	4413      	add	r3, r2
 800146a:	2bff      	cmp	r3, #255	@ 0xff
 800146c:	dd24      	ble.n	80014b8 <mb_process_start_address+0xa0>
			exception_code = 2;
 800146e:	2302      	movs	r3, #2
 8001470:	73fb      	strb	r3, [r7, #15]
		break;
 8001472:	e021      	b.n	80014b8 <mb_process_start_address+0xa0>
	case MB_FN_READ_HOLDING:
		if ((start_address + quantity) > MB_HOLDING_Q)
 8001474:	88ba      	ldrh	r2, [r7, #4]
 8001476:	887b      	ldrh	r3, [r7, #2]
 8001478:	4413      	add	r3, r2
 800147a:	2b19      	cmp	r3, #25
 800147c:	dd1e      	ble.n	80014bc <mb_process_start_address+0xa4>
			exception_code = 2;
 800147e:	2302      	movs	r3, #2
 8001480:	73fb      	strb	r3, [r7, #15]
		break;
 8001482:	e01b      	b.n	80014bc <mb_process_start_address+0xa4>
	case MB_FN_READ_INPUT:
		if ((start_address + quantity) > MB_INPUT_Q)
 8001484:	88ba      	ldrh	r2, [r7, #4]
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	4413      	add	r3, r2
 800148a:	2b08      	cmp	r3, #8
 800148c:	dd18      	ble.n	80014c0 <mb_process_start_address+0xa8>
			exception_code = 2;
 800148e:	2302      	movs	r3, #2
 8001490:	73fb      	strb	r3, [r7, #15]
		break;
 8001492:	e015      	b.n	80014c0 <mb_process_start_address+0xa8>

	case MB_FN_WRITE_S_COIL:
		if ((start_address + quantity) > MB_COILS_Q)
 8001494:	88ba      	ldrh	r2, [r7, #4]
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	4413      	add	r3, r2
 800149a:	2bff      	cmp	r3, #255	@ 0xff
 800149c:	dd12      	ble.n	80014c4 <mb_process_start_address+0xac>
			exception_code = 2;
 800149e:	2302      	movs	r3, #2
 80014a0:	73fb      	strb	r3, [r7, #15]
		break;
 80014a2:	e00f      	b.n	80014c4 <mb_process_start_address+0xac>
	case MB_FN_WRITE_S_HOLDING:
		if ((start_address + quantity) > MB_HOLDING_Q)
 80014a4:	88ba      	ldrh	r2, [r7, #4]
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	4413      	add	r3, r2
 80014aa:	2b19      	cmp	r3, #25
 80014ac:	dd0c      	ble.n	80014c8 <mb_process_start_address+0xb0>
			exception_code = 2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	73fb      	strb	r3, [r7, #15]
		break;
 80014b2:	e009      	b.n	80014c8 <mb_process_start_address+0xb0>
		break;
 80014b4:	bf00      	nop
 80014b6:	e008      	b.n	80014ca <mb_process_start_address+0xb2>
		break;
 80014b8:	bf00      	nop
 80014ba:	e006      	b.n	80014ca <mb_process_start_address+0xb2>
		break;
 80014bc:	bf00      	nop
 80014be:	e004      	b.n	80014ca <mb_process_start_address+0xb2>
		break;
 80014c0:	bf00      	nop
 80014c2:	e002      	b.n	80014ca <mb_process_start_address+0xb2>
		break;
 80014c4:	bf00      	nop
 80014c6:	e000      	b.n	80014ca <mb_process_start_address+0xb2>
		break;
 80014c8:	bf00      	nop
	}
	return exception_code;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <mb_process_val>:

static uint8_t mb_process_val(uint16_t fn, uint16_t val) {
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	460a      	mov	r2, r1
 80014e2:	80fb      	strh	r3, [r7, #6]
 80014e4:	4613      	mov	r3, r2
 80014e6:	80bb      	strh	r3, [r7, #4]
	uint8_t exception_code = MB_EXCEPTION_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]
	switch (fn) {
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	2b05      	cmp	r3, #5
 80014f0:	d109      	bne.n	8001506 <mb_process_val+0x2e>
	case MB_FN_WRITE_S_COIL:
		if ((val != 0xFF00) && (val != 0x0000))
 80014f2:	88bb      	ldrh	r3, [r7, #4]
 80014f4:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 80014f8:	d004      	beq.n	8001504 <mb_process_val+0x2c>
 80014fa:	88bb      	ldrh	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <mb_process_val+0x2c>
			exception_code = 3;
 8001500:	2303      	movs	r3, #3
 8001502:	73fb      	strb	r3, [r7, #15]
		break;
 8001504:	bf00      	nop
	}
	return exception_code;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <mb_process_err>:

static uint16_t mb_process_err(uint8_t *mb_repl_buf, uint8_t fn, uint16_t exceptionCode) {
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	70fb      	strb	r3, [r7, #3]
 8001520:	4613      	mov	r3, r2
 8001522:	803b      	strh	r3, [r7, #0]
	mb_repl_buf[MB_PDU_FN] = fn | 0x80;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3307      	adds	r3, #7
 8001528:	78fa      	ldrb	r2, [r7, #3]
 800152a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_PDU_EXCEPTION_CODE] = exceptionCode;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3308      	adds	r3, #8
 8001536:	883a      	ldrh	r2, [r7, #0]
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	701a      	strb	r2, [r3, #0]
	return 2;
 800153c:	2302      	movs	r3, #2
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <mb_pdu_calculate_N>:

static uint16_t mb_pdu_calculate_N(uint16_t fn, uint16_t quantity) {
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	460a      	mov	r2, r1
 8001554:	80fb      	strh	r3, [r7, #6]
 8001556:	4613      	mov	r3, r2
 8001558:	80bb      	strh	r3, [r7, #4]
	switch (fn) {
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	2b02      	cmp	r3, #2
 800155e:	dc02      	bgt.n	8001566 <mb_pdu_calculate_N+0x1c>
 8001560:	2b00      	cmp	r3, #0
 8001562:	dc04      	bgt.n	800156e <mb_pdu_calculate_N+0x24>
 8001564:	e017      	b.n	8001596 <mb_pdu_calculate_N+0x4c>
 8001566:	3b03      	subs	r3, #3
 8001568:	2b01      	cmp	r3, #1
 800156a:	d814      	bhi.n	8001596 <mb_pdu_calculate_N+0x4c>
 800156c:	e00f      	b.n	800158e <mb_pdu_calculate_N+0x44>
	case MB_FN_READ_COILS:
	case MB_FN_READ_DISCRETE:
		if (quantity % 8 != 0)
 800156e:	88bb      	ldrh	r3, [r7, #4]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	b29b      	uxth	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <mb_pdu_calculate_N+0x3c>
			return ((quantity / 8) + 1);
 800157a:	88bb      	ldrh	r3, [r7, #4]
 800157c:	08db      	lsrs	r3, r3, #3
 800157e:	b29b      	uxth	r3, r3
 8001580:	3301      	adds	r3, #1
 8001582:	b29b      	uxth	r3, r3
 8001584:	e008      	b.n	8001598 <mb_pdu_calculate_N+0x4e>
		else
			return (quantity / 8);
 8001586:	88bb      	ldrh	r3, [r7, #4]
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	b29b      	uxth	r3, r3
 800158c:	e004      	b.n	8001598 <mb_pdu_calculate_N+0x4e>
		break;
	case MB_FN_READ_HOLDING:
	case MB_FN_READ_INPUT:
		return quantity * 2;
 800158e:	88bb      	ldrh	r3, [r7, #4]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	b29b      	uxth	r3, r3
 8001594:	e000      	b.n	8001598 <mb_pdu_calculate_N+0x4e>
		break;
	default:
		return 0;
 8001596:	2300      	movs	r3, #0
	}
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <read_coils>:

void read_coils(uint8_t *repl_buf, uint16_t address, uint16_t quantity){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	803b      	strh	r3, [r7, #0]
    //uint16_t byte_count = (quantity + 7) / 8;  // Cantidad de bytes necesarios
    //memset(response_buffer, 0, 256);            // Inicializar TODO el buffer de respuesta a 0
    //memset(response_buffer, 0, byte_count);    // Inicializar el buffer de respuesta a 0
	SendString("Reading coils coils \r");
 80015b4:	481f      	ldr	r0, [pc, #124]	@ (8001634 <read_coils+0x90>)
 80015b6:	f7ff fd41 	bl	800103c <SendString>
    for (uint16_t i = 0; i < quantity; i++) {
 80015ba:	2300      	movs	r3, #0
 80015bc:	81fb      	strh	r3, [r7, #14]
 80015be:	e02f      	b.n	8001620 <read_coils+0x7c>
        uint16_t coil_index = address + i;
 80015c0:	887a      	ldrh	r2, [r7, #2]
 80015c2:	89fb      	ldrh	r3, [r7, #14]
 80015c4:	4413      	add	r3, r2
 80015c6:	81bb      	strh	r3, [r7, #12]
        osMutexWait(coilMutexHandle, osWaitForever);
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <read_coils+0x94>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295
 80015d0:	4618      	mov	r0, r3
 80015d2:	f005 ff71 	bl	80074b8 <osMutexWait>
        if (coil_status[coil_index]) {
 80015d6:	89bb      	ldrh	r3, [r7, #12]
 80015d8:	4a18      	ldr	r2, [pc, #96]	@ (800163c <read_coils+0x98>)
 80015da:	5cd3      	ldrb	r3, [r2, r3]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d017      	beq.n	8001610 <read_coils+0x6c>
            repl_buf[(i / 8) +9 ] |= (1 << (i % 8));  // Establecer el bit correspondiente si la coil está ON
 80015e0:	89fb      	ldrh	r3, [r7, #14]
 80015e2:	08db      	lsrs	r3, r3, #3
 80015e4:	b298      	uxth	r0, r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	3309      	adds	r3, #9
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b25a      	sxtb	r2, r3
 80015f2:	89fb      	ldrh	r3, [r7, #14]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	2101      	movs	r1, #1
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b259      	sxtb	r1, r3
 8001604:	4603      	mov	r3, r0
 8001606:	3309      	adds	r3, #9
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	b2ca      	uxtb	r2, r1
 800160e:	701a      	strb	r2, [r3, #0]
													//y es mas 9 para dar lugar a fn y cantidad de bytes en
													//[7] y [8]
        }
        osMutexRelease(coilMutexHandle);
 8001610:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <read_coils+0x94>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f005 ff9d 	bl	8007554 <osMutexRelease>
    for (uint16_t i = 0; i < quantity; i++) {
 800161a:	89fb      	ldrh	r3, [r7, #14]
 800161c:	3301      	adds	r3, #1
 800161e:	81fb      	strh	r3, [r7, #14]
 8001620:	89fa      	ldrh	r2, [r7, #14]
 8001622:	883b      	ldrh	r3, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d3cb      	bcc.n	80015c0 <read_coils+0x1c>
    }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	08018fd0 	.word	0x08018fd0
 8001638:	20000610 	.word	0x20000610
 800163c:	20000618 	.word	0x20000618

08001640 <read_discrete>:

void read_discrete(uint8_t *repl_buf, uint16_t address, uint16_t quantity){
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
 800164c:	4613      	mov	r3, r2
 800164e:	803b      	strh	r3, [r7, #0]
    // NO USADO uint16_t byte_count = (quantity + 7) / 8;  // Cantidad de bytes necesarios
    //memset(response_buffer, 0, 256);            // Inicializar TODO el buffer de respuesta a 0
    //memset(response_buffer, 0, byte_count);    // Inicializar el buffer de respuesta a 0
	SendString("Reading discrete \r");
 8001650:	4819      	ldr	r0, [pc, #100]	@ (80016b8 <read_discrete+0x78>)
 8001652:	f7ff fcf3 	bl	800103c <SendString>
    for (uint16_t i = 0; i < quantity; i++) {
 8001656:	2300      	movs	r3, #0
 8001658:	81fb      	strh	r3, [r7, #14]
 800165a:	e023      	b.n	80016a4 <read_discrete+0x64>
        uint16_t discrete_index = address + i;
 800165c:	887a      	ldrh	r2, [r7, #2]
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	4413      	add	r3, r2
 8001662:	81bb      	strh	r3, [r7, #12]
        if (discrete_status[discrete_index]) {
 8001664:	89bb      	ldrh	r3, [r7, #12]
 8001666:	4a15      	ldr	r2, [pc, #84]	@ (80016bc <read_discrete+0x7c>)
 8001668:	5cd3      	ldrb	r3, [r2, r3]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d017      	beq.n	800169e <read_discrete+0x5e>
            repl_buf[(i / 8) +9 ] |= (1 << (i % 8));  // Establecer el bit correspondiente si la coil está ON
 800166e:	89fb      	ldrh	r3, [r7, #14]
 8001670:	08db      	lsrs	r3, r3, #3
 8001672:	b298      	uxth	r0, r3
 8001674:	4603      	mov	r3, r0
 8001676:	3309      	adds	r3, #9
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b25a      	sxtb	r2, r3
 8001680:	89fb      	ldrh	r3, [r7, #14]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	2101      	movs	r1, #1
 8001688:	fa01 f303 	lsl.w	r3, r1, r3
 800168c:	b25b      	sxtb	r3, r3
 800168e:	4313      	orrs	r3, r2
 8001690:	b259      	sxtb	r1, r3
 8001692:	4603      	mov	r3, r0
 8001694:	3309      	adds	r3, #9
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < quantity; i++) {
 800169e:	89fb      	ldrh	r3, [r7, #14]
 80016a0:	3301      	adds	r3, #1
 80016a2:	81fb      	strh	r3, [r7, #14]
 80016a4:	89fa      	ldrh	r2, [r7, #14]
 80016a6:	883b      	ldrh	r3, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d3d7      	bcc.n	800165c <read_discrete+0x1c>
													//y es mas 9 para dar lugar a fn y cantidad de bytes en
													//[7] y [8]
        }
    }

}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	08018fe8 	.word	0x08018fe8
 80016bc:	20000718 	.word	0x20000718

080016c0 <read_inputs>:

//Lectura de input
void read_inputs(uint8_t *repl_buf, uint16_t address, uint16_t quantity) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
 80016cc:	4613      	mov	r3, r2
 80016ce:	803b      	strh	r3, [r7, #0]
	SendString("Reading inputs \r");
 80016d0:	4820      	ldr	r0, [pc, #128]	@ (8001754 <read_inputs+0x94>)
 80016d2:	f7ff fcb3 	bl	800103c <SendString>
    // Cantidad de bytes necesarios: cada registro holding es de 2 bytes (16 bits)
    uint16_t byte_count = quantity * 2;
 80016d6:	883b      	ldrh	r3, [r7, #0]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	81bb      	strh	r3, [r7, #12]

    // Coloca la cantidad de bytes en el byte [8] del buffer de respuesta (luego de la cabecera)
    repl_buf[8] = byte_count;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3308      	adds	r3, #8
 80016e0:	89ba      	ldrh	r2, [r7, #12]
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]

    // Copiar los valores de los registros holding solicitados
    for (uint16_t i = 0; i < quantity; i++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	81fb      	strh	r3, [r7, #14]
 80016ea:	e02a      	b.n	8001742 <read_inputs+0x82>
        uint16_t inputs_index = address + i;
 80016ec:	887a      	ldrh	r2, [r7, #2]
 80016ee:	89fb      	ldrh	r3, [r7, #14]
 80016f0:	4413      	add	r3, r2
 80016f2:	817b      	strh	r3, [r7, #10]

        osMutexWait(discreteMutexHandle, osWaitForever);
 80016f4:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <read_inputs+0x98>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	4618      	mov	r0, r3
 80016fe:	f005 fedb 	bl	80074b8 <osMutexWait>
        uint16_t inputs_value = input_status[inputs_index];  // Valor del registro holding
 8001702:	897b      	ldrh	r3, [r7, #10]
 8001704:	4a15      	ldr	r2, [pc, #84]	@ (800175c <read_inputs+0x9c>)
 8001706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800170a:	813b      	strh	r3, [r7, #8]
        osMutexRelease(discreteMutexHandle);
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <read_inputs+0x98>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f005 ff1f 	bl	8007554 <osMutexRelease>

        // Poner los 2 bytes del registro holding en el buffer de respuesta
        repl_buf[9 + (i * 2)]     = (inputs_value >> 8) & 0xFF;  // Byte alto
 8001716:	893b      	ldrh	r3, [r7, #8]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	b29a      	uxth	r2, r3
 800171c:	89fb      	ldrh	r3, [r7, #14]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	3309      	adds	r3, #9
 8001722:	4619      	mov	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	440b      	add	r3, r1
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	701a      	strb	r2, [r3, #0]
        repl_buf[9 + (i * 2) + 1] = inputs_value & 0xFF;         // Byte bajo
 800172c:	89fb      	ldrh	r3, [r7, #14]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	330a      	adds	r3, #10
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	893a      	ldrh	r2, [r7, #8]
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < quantity; i++) {
 800173c:	89fb      	ldrh	r3, [r7, #14]
 800173e:	3301      	adds	r3, #1
 8001740:	81fb      	strh	r3, [r7, #14]
 8001742:	89fa      	ldrh	r2, [r7, #14]
 8001744:	883b      	ldrh	r3, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d3d0      	bcc.n	80016ec <read_inputs+0x2c>
    }
}
 800174a:	bf00      	nop
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	08018ffc 	.word	0x08018ffc
 8001758:	20000614 	.word	0x20000614
 800175c:	20000818 	.word	0x20000818

08001760 <read_holding>:

//Lectura de holdings
void read_holding(uint8_t *repl_buf, uint16_t address, uint16_t quantity) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	803b      	strh	r3, [r7, #0]
	SendString("Reading holding \r");
 8001770:	481a      	ldr	r0, [pc, #104]	@ (80017dc <read_holding+0x7c>)
 8001772:	f7ff fc63 	bl	800103c <SendString>
    // Cantidad de bytes necesarios: cada registro holding es de 2 bytes (16 bits)
    uint16_t byte_count = quantity * 2;
 8001776:	883b      	ldrh	r3, [r7, #0]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	81bb      	strh	r3, [r7, #12]

    // Coloca la cantidad de bytes en el byte [8] del buffer de respuesta (luego de la cabecera)
    repl_buf[8] = byte_count;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3308      	adds	r3, #8
 8001780:	89ba      	ldrh	r2, [r7, #12]
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]

    // Copiar los valores de los registros holding solicitados
    for (uint16_t i = 0; i < quantity; i++) {
 8001786:	2300      	movs	r3, #0
 8001788:	81fb      	strh	r3, [r7, #14]
 800178a:	e01e      	b.n	80017ca <read_holding+0x6a>
        uint16_t reg_index = address + i;
 800178c:	887a      	ldrh	r2, [r7, #2]
 800178e:	89fb      	ldrh	r3, [r7, #14]
 8001790:	4413      	add	r3, r2
 8001792:	817b      	strh	r3, [r7, #10]
        uint16_t holding_value = holding_registers[reg_index];  // Valor del registro holding
 8001794:	897b      	ldrh	r3, [r7, #10]
 8001796:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <read_holding+0x80>)
 8001798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800179c:	813b      	strh	r3, [r7, #8]

        // Poner los 2 bytes del registro holding en el buffer de respuesta
        repl_buf[9 + (i * 2)]     = (holding_value >> 8) & 0xFF;  // Byte alto
 800179e:	893b      	ldrh	r3, [r7, #8]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	89fb      	ldrh	r3, [r7, #14]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	3309      	adds	r3, #9
 80017aa:	4619      	mov	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	440b      	add	r3, r1
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	701a      	strb	r2, [r3, #0]
        repl_buf[9 + (i * 2) + 1] = holding_value & 0xFF;         // Byte bajo
 80017b4:	89fb      	ldrh	r3, [r7, #14]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	330a      	adds	r3, #10
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	893a      	ldrh	r2, [r7, #8]
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < quantity; i++) {
 80017c4:	89fb      	ldrh	r3, [r7, #14]
 80017c6:	3301      	adds	r3, #1
 80017c8:	81fb      	strh	r3, [r7, #14]
 80017ca:	89fa      	ldrh	r2, [r7, #14]
 80017cc:	883b      	ldrh	r3, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d3dc      	bcc.n	800178c <read_holding+0x2c>
    }
}
 80017d2:	bf00      	nop
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	08019010 	.word	0x08019010
 80017e0:	20000828 	.word	0x20000828

080017e4 <write_single_coil>:

void write_single_coil(uint16_t address, uint16_t val) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	460a      	mov	r2, r1
 80017ee:	80fb      	strh	r3, [r7, #6]
 80017f0:	4613      	mov	r3, r2
 80017f2:	80bb      	strh	r3, [r7, #4]
	SendString("Writing coils \r");
 80017f4:	4817      	ldr	r0, [pc, #92]	@ (8001854 <write_single_coil+0x70>)
 80017f6:	f7ff fc21 	bl	800103c <SendString>
    // Verificar si el valor es válido para una coil (0xFF00 para ON, 0x0000 para OFF)
    if (val == 0xFF00) {
 80017fa:	88bb      	ldrh	r3, [r7, #4]
 80017fc:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 8001800:	d110      	bne.n	8001824 <write_single_coil+0x40>
        // Establecer la coil en ON (1)
    	osMutexWait(coilMutexHandle, osWaitForever);
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <write_single_coil+0x74>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f04f 31ff 	mov.w	r1, #4294967295
 800180a:	4618      	mov	r0, r3
 800180c:	f005 fe54 	bl	80074b8 <osMutexWait>
        coil_status[address] = 1;
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <write_single_coil+0x78>)
 8001814:	2101      	movs	r1, #1
 8001816:	54d1      	strb	r1, [r2, r3]
        osMutexRelease(coilMutexHandle);
 8001818:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <write_single_coil+0x74>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f005 fe99 	bl	8007554 <osMutexRelease>
 8001822:	e014      	b.n	800184e <write_single_coil+0x6a>
    } else if (val == 0x0000) {
 8001824:	88bb      	ldrh	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d110      	bne.n	800184c <write_single_coil+0x68>
        // Establecer la coil en OFF (0)
    	osMutexWait(coilMutexHandle, osWaitForever);
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <write_single_coil+0x74>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f04f 31ff 	mov.w	r1, #4294967295
 8001832:	4618      	mov	r0, r3
 8001834:	f005 fe40 	bl	80074b8 <osMutexWait>
        coil_status[address] = 0;
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	4a08      	ldr	r2, [pc, #32]	@ (800185c <write_single_coil+0x78>)
 800183c:	2100      	movs	r1, #0
 800183e:	54d1      	strb	r1, [r2, r3]
        osMutexRelease(coilMutexHandle);
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <write_single_coil+0x74>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f005 fe85 	bl	8007554 <osMutexRelease>
 800184a:	e000      	b.n	800184e <write_single_coil+0x6a>
    } else {
        // Valor inválido, manejar error según el protocolo Modbus
        return;
 800184c:	bf00      	nop
    }

    // Opcional: aquí podrías generar una respuesta Modbus o hacer algo con los cambios.
}
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	08019024 	.word	0x08019024
 8001858:	20000610 	.word	0x20000610
 800185c:	20000618 	.word	0x20000618

08001860 <write_single_holding>:

void write_single_holding(uint16_t address, uint16_t val) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	460a      	mov	r2, r1
 800186a:	80fb      	strh	r3, [r7, #6]
 800186c:	4613      	mov	r3, r2
 800186e:	80bb      	strh	r3, [r7, #4]
	SendString("Writing holding \r");
 8001870:	4805      	ldr	r0, [pc, #20]	@ (8001888 <write_single_holding+0x28>)
 8001872:	f7ff fbe3 	bl	800103c <SendString>
    // Escribir el valor directamente en el holding register correspondiente
    holding_registers[address] = val;
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	4904      	ldr	r1, [pc, #16]	@ (800188c <write_single_holding+0x2c>)
 800187a:	88ba      	ldrh	r2, [r7, #4]
 800187c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	08019034 	.word	0x08019034
 800188c:	20000828 	.word	0x20000828

08001890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <HAL_MspInit+0x54>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	4a11      	ldr	r2, [pc, #68]	@ (80018e4 <HAL_MspInit+0x54>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a6:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <HAL_MspInit+0x54>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_MspInit+0x54>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <HAL_MspInit+0x54>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c2:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <HAL_MspInit+0x54>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	210f      	movs	r1, #15
 80018d2:	f06f 0001 	mvn.w	r0, #1
 80018d6:	f000 fe43 	bl	8002560 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800

080018e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a19      	ldr	r2, [pc, #100]	@ (800196c <HAL_I2C_MspInit+0x84>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d12c      	bne.n	8001964 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b18      	ldr	r3, [pc, #96]	@ (8001970 <HAL_I2C_MspInit+0x88>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	4a17      	ldr	r2, [pc, #92]	@ (8001970 <HAL_I2C_MspInit+0x88>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	6313      	str	r3, [r2, #48]	@ 0x30
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <HAL_I2C_MspInit+0x88>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001926:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800192a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800192c:	2312      	movs	r3, #18
 800192e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001938:	2304      	movs	r3, #4
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	480c      	ldr	r0, [pc, #48]	@ (8001974 <HAL_I2C_MspInit+0x8c>)
 8001944:	f002 f892 	bl	8003a6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <HAL_I2C_MspInit+0x88>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	4a07      	ldr	r2, [pc, #28]	@ (8001970 <HAL_I2C_MspInit+0x88>)
 8001952:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001956:	6413      	str	r3, [r2, #64]	@ 0x40
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_I2C_MspInit+0x88>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001964:	bf00      	nop
 8001966:	3728      	adds	r7, #40	@ 0x28
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40005800 	.word	0x40005800
 8001970:	40023800 	.word	0x40023800
 8001974:	40020400 	.word	0x40020400

08001978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	@ 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a19      	ldr	r2, [pc, #100]	@ (80019fc <HAL_UART_MspInit+0x84>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d12c      	bne.n	80019f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <HAL_UART_MspInit+0x88>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	4a17      	ldr	r2, [pc, #92]	@ (8001a00 <HAL_UART_MspInit+0x88>)
 80019a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019aa:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <HAL_UART_MspInit+0x88>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <HAL_UART_MspInit+0x88>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a10      	ldr	r2, [pc, #64]	@ (8001a00 <HAL_UART_MspInit+0x88>)
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <HAL_UART_MspInit+0x88>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80019d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019e4:	2307      	movs	r3, #7
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4619      	mov	r1, r3
 80019ee:	4805      	ldr	r0, [pc, #20]	@ (8001a04 <HAL_UART_MspInit+0x8c>)
 80019f0:	f002 f83c 	bl	8003a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019f4:	bf00      	nop
 80019f6:	3728      	adds	r7, #40	@ 0x28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40004800 	.word	0x40004800
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40020c00 	.word	0x40020c00

08001a08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08e      	sub	sp, #56	@ 0x38
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	4b33      	ldr	r3, [pc, #204]	@ (8001aec <HAL_InitTick+0xe4>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	4a32      	ldr	r2, [pc, #200]	@ (8001aec <HAL_InitTick+0xe4>)
 8001a22:	f043 0310 	orr.w	r3, r3, #16
 8001a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a28:	4b30      	ldr	r3, [pc, #192]	@ (8001aec <HAL_InitTick+0xe4>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a34:	f107 0210 	add.w	r2, r7, #16
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 ff2a 	bl	8005898 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a4e:	f003 fefb 	bl	8005848 <HAL_RCC_GetPCLK1Freq>
 8001a52:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a54:	e004      	b.n	8001a60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a56:	f003 fef7 	bl	8005848 <HAL_RCC_GetPCLK1Freq>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a62:	4a23      	ldr	r2, [pc, #140]	@ (8001af0 <HAL_InitTick+0xe8>)
 8001a64:	fba2 2303 	umull	r2, r3, r2, r3
 8001a68:	0c9b      	lsrs	r3, r3, #18
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <HAL_InitTick+0xec>)
 8001a70:	4a21      	ldr	r2, [pc, #132]	@ (8001af8 <HAL_InitTick+0xf0>)
 8001a72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a74:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <HAL_InitTick+0xec>)
 8001a76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001af4 <HAL_InitTick+0xec>)
 8001a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a82:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <HAL_InitTick+0xec>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <HAL_InitTick+0xec>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8e:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <HAL_InitTick+0xec>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a94:	4817      	ldr	r0, [pc, #92]	@ (8001af4 <HAL_InitTick+0xec>)
 8001a96:	f003 ff31 	bl	80058fc <HAL_TIM_Base_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001aa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d11b      	bne.n	8001ae0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001aa8:	4812      	ldr	r0, [pc, #72]	@ (8001af4 <HAL_InitTick+0xec>)
 8001aaa:	f003 ff81 	bl	80059b0 <HAL_TIM_Base_Start_IT>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001ab4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d111      	bne.n	8001ae0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001abc:	2036      	movs	r0, #54	@ 0x36
 8001abe:	f000 fd6b 	bl	8002598 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	d808      	bhi.n	8001ada <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	2036      	movs	r0, #54	@ 0x36
 8001ace:	f000 fd47 	bl	8002560 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <HAL_InitTick+0xf4>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e002      	b.n	8001ae0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3738      	adds	r7, #56	@ 0x38
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800
 8001af0:	431bde83 	.word	0x431bde83
 8001af4:	2000085c 	.word	0x2000085c
 8001af8:	40001000 	.word	0x40001000
 8001afc:	20000004 	.word	0x20000004

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <NMI_Handler+0x4>

08001b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <HardFault_Handler+0x4>

08001b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <MemManage_Handler+0x4>

08001b18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <BusFault_Handler+0x4>

08001b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <UsageFault_Handler+0x4>

08001b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b3c:	4802      	ldr	r0, [pc, #8]	@ (8001b48 <TIM6_DAC_IRQHandler+0x10>)
 8001b3e:	f003 ffa7 	bl	8005a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000085c 	.word	0x2000085c

08001b4c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001b50:	4802      	ldr	r0, [pc, #8]	@ (8001b5c <ETH_IRQHandler+0x10>)
 8001b52:	f001 f8b5 	bl	8002cc0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200055e0 	.word	0x200055e0

08001b60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return 1;
 8001b64:	2301      	movs	r3, #1
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <_kill>:

int _kill(int pid, int sig)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b7a:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <_kill+0x20>)
 8001b7c:	2216      	movs	r2, #22
 8001b7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	20010294 	.word	0x20010294

08001b94 <_exit>:

void _exit (int status)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ffe5 	bl	8001b70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ba6:	bf00      	nop
 8001ba8:	e7fd      	b.n	8001ba6 <_exit+0x12>

08001baa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e00a      	b.n	8001bd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bbc:	f3af 8000 	nop.w
 8001bc0:	4601      	mov	r1, r0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	60ba      	str	r2, [r7, #8]
 8001bc8:	b2ca      	uxtb	r2, r1
 8001bca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	dbf0      	blt.n	8001bbc <_read+0x12>
  }

  return len;
 8001bda:	687b      	ldr	r3, [r7, #4]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e009      	b.n	8001c0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	60ba      	str	r2, [r7, #8]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	dbf1      	blt.n	8001bf6 <_write+0x12>
  }
  return len;
 8001c12:	687b      	ldr	r3, [r7, #4]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_close>:

int _close(int file)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c44:	605a      	str	r2, [r3, #4]
  return 0;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_isatty>:

int _isatty(int file)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c5c:	2301      	movs	r3, #1
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b085      	sub	sp, #20
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ce0 <_sbrk+0x5c>)
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <_sbrk+0x60>)
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c98:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <_sbrk+0x64>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <_sbrk+0x68>)
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca6:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <_sbrk+0x64>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d205      	bcs.n	8001cc0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <_sbrk+0x6c>)
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	e009      	b.n	8001cd4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	4a06      	ldr	r2, [pc, #24]	@ (8001ce8 <_sbrk+0x64>)
 8001cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	371c      	adds	r7, #28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	20030000 	.word	0x20030000
 8001ce4:	00000400 	.word	0x00000400
 8001ce8:	200008a4 	.word	0x200008a4
 8001cec:	200102a8 	.word	0x200102a8
 8001cf0:	20010294 	.word	0x20010294

08001cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <SystemInit+0x20>)
 8001cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cfe:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <SystemInit+0x20>)
 8001d00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <tcp_thread>:
static void process_client_connection(struct netconn *client_conn);
static err_t initialize_server();


// Función principal del hilo TCP
static void tcp_thread(void *arg) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    err_t server_err, accept_err;

    SendString("*************** Initial thread started and running ******************* \r");
 8001d20:	4824      	ldr	r0, [pc, #144]	@ (8001db4 <tcp_thread+0x9c>)
 8001d22:	f7ff f98b 	bl	800103c <SendString>

    while (1) {
        // Inicializar el servidor
        server_err = initialize_server();
 8001d26:	f000 f8e3 	bl	8001ef0 <initialize_server>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	73fb      	strb	r3, [r7, #15]
        if (server_err != ERR_OK) {
 8001d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d009      	beq.n	8001d4a <tcp_thread+0x32>
            //printf("Error: Reintentando iniciar el servidor en %d ms...\n", RETRY_DELAY_MS);
        	SendString("Error: Reintentando iniciar el servidor");
 8001d36:	4820      	ldr	r0, [pc, #128]	@ (8001db8 <tcp_thread+0xa0>)
 8001d38:	f7ff f980 	bl	800103c <SendString>
        	TurnOffRedLED();
 8001d3c:	f7fe fe1a 	bl	8000974 <TurnOffRedLED>
            sys_msleep(RETRY_DELAY_MS); // Esperar antes de reintentar (un sleep de la propia librería lwip)
 8001d40:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001d44:	f00c fcba 	bl	800e6bc <sys_msleep>
            continue;
 8001d48:	e033      	b.n	8001db2 <tcp_thread+0x9a>
        }

        // Aceptar conexiones entrantes
        while (1) {
            accept_err = netconn_accept(conn, &newconn);
 8001d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dbc <tcp_thread+0xa4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	491c      	ldr	r1, [pc, #112]	@ (8001dc0 <tcp_thread+0xa8>)
 8001d50:	4618      	mov	r0, r3
 8001d52:	f008 fc6d 	bl	800a630 <netconn_accept>
 8001d56:	4603      	mov	r3, r0
 8001d58:	73bb      	strb	r3, [r7, #14]
            if (accept_err == ERR_OK) {
 8001d5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10b      	bne.n	8001d7a <tcp_thread+0x62>
                //printf("Cliente conectado.\n");
            	SendString("Cliente conectado...\r");
 8001d62:	4818      	ldr	r0, [pc, #96]	@ (8001dc4 <tcp_thread+0xac>)
 8001d64:	f7ff f96a 	bl	800103c <SendString>
            	holding_registers[MB_SERVER_STATUS] = 1;
 8001d68:	4b17      	ldr	r3, [pc, #92]	@ (8001dc8 <tcp_thread+0xb0>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	861a      	strh	r2, [r3, #48]	@ 0x30
                process_client_connection(newconn); // Procesar conexión del cliente
 8001d6e:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <tcp_thread+0xa8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 f864 	bl	8001e40 <process_client_connection>
 8001d78:	e7e7      	b.n	8001d4a <tcp_thread+0x32>
            } else {
                //printf("Error al aceptar conexión (Error: %d). Reintentando...\n", accept_err);
            	SendString("Error al aceptar conexión Reintentando...\n");
 8001d7a:	4814      	ldr	r0, [pc, #80]	@ (8001dcc <tcp_thread+0xb4>)
 8001d7c:	f7ff f95e 	bl	800103c <SendString>
                break; // Salir al detectar un error en el servidor
 8001d80:	bf00      	nop
            }
        }

        // Liberar recursos del servidor en caso de error
        //printf("Cerrando servidor...\n");
        SendString("Cerrando servidor...\n");
 8001d82:	4813      	ldr	r0, [pc, #76]	@ (8001dd0 <tcp_thread+0xb8>)
 8001d84:	f7ff f95a 	bl	800103c <SendString>
        netconn_close(conn);
 8001d88:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <tcp_thread+0xa4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f008 ffef 	bl	800ad70 <netconn_close>
        netconn_delete(conn);
 8001d92:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <tcp_thread+0xa4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f008 fbca 	bl	800a530 <netconn_delete>
        conn = NULL;
 8001d9c:	4b07      	ldr	r3, [pc, #28]	@ (8001dbc <tcp_thread+0xa4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]

        // Reintentar después de un tiempo
        //printf("Reiniciando servidor en %d ms...\n", RETRY_DELAY_MS);
        SendString("Reiniciando servidor en ms...\n");
 8001da2:	480c      	ldr	r0, [pc, #48]	@ (8001dd4 <tcp_thread+0xbc>)
 8001da4:	f7ff f94a 	bl	800103c <SendString>
        sys_msleep(RETRY_DELAY_MS);  //un sleep de la propia librería lwip
 8001da8:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001dac:	f00c fc86 	bl	800e6bc <sys_msleep>
 8001db0:	e7b9      	b.n	8001d26 <tcp_thread+0xe>
        server_err = initialize_server();
 8001db2:	e7b8      	b.n	8001d26 <tcp_thread+0xe>
 8001db4:	08019048 	.word	0x08019048
 8001db8:	08019094 	.word	0x08019094
 8001dbc:	200008a8 	.word	0x200008a8
 8001dc0:	200008ac 	.word	0x200008ac
 8001dc4:	080190bc 	.word	0x080190bc
 8001dc8:	20000828 	.word	0x20000828
 8001dcc:	080190d4 	.word	0x080190d4
 8001dd0:	08019100 	.word	0x08019100
 8001dd4:	08019118 	.word	0x08019118

08001dd8 <tcpserver_init>:





void tcpserver_init(void) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af02      	add	r7, sp, #8
	sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE,
 8001dde:	2300      	movs	r3, #0
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001de6:	2200      	movs	r2, #0
 8001de8:	4903      	ldr	r1, [pc, #12]	@ (8001df8 <tcpserver_init+0x20>)
 8001dea:	4804      	ldr	r0, [pc, #16]	@ (8001dfc <tcpserver_init+0x24>)
 8001dec:	f015 fdf4 	bl	80179d8 <sys_thread_new>
			osPriorityNormal);
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	08001d19 	.word	0x08001d19
 8001dfc:	08019138 	.word	0x08019138

08001e00 <copyString>:

static void copyString(uint8_t* dest, uint8_t* src, unsigned num){
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
	for(unsigned i = 0; i != num; ++i){
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e00a      	b.n	8001e28 <copyString+0x28>
		dest[i] = src[i];
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	441a      	add	r2, r3
 8001e18:	68f9      	ldr	r1, [r7, #12]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	440b      	add	r3, r1
 8001e1e:	7812      	ldrb	r2, [r2, #0]
 8001e20:	701a      	strb	r2, [r3, #0]
	for(unsigned i = 0; i != num; ++i){
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1f0      	bne.n	8001e12 <copyString+0x12>
	}
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <process_client_connection>:


/************************************************************************/
// Función para procesar una conexión de cliente
static void process_client_connection(struct netconn *client_conn) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af02      	add	r7, sp, #8
 8001e46:	6078      	str	r0, [r7, #4]
    err_t recv_err;

    // Configurar timeout para evitar bloqueos indefinidos
    //netconn_set_recvtimeout(client_conn, 5000); // Timeout de 5 segundos

    while ((recv_err = netconn_recv(client_conn, &netbuf)) == ERR_OK) {
 8001e48:	e02d      	b.n	8001ea6 <process_client_connection+0x66>
        do {
            copyString(mb_req_buf, netbuf->p->payload, netbuf->p->len); // Obtener mensaje del cliente
 8001e4a:	4b24      	ldr	r3, [pc, #144]	@ (8001edc <process_client_connection+0x9c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	4b22      	ldr	r3, [pc, #136]	@ (8001edc <process_client_connection+0x9c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	895b      	ldrh	r3, [r3, #10]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4820      	ldr	r0, [pc, #128]	@ (8001ee0 <process_client_connection+0xa0>)
 8001e5e:	f7ff ffcf 	bl	8001e00 <copyString>
            uint16_t buf_len = netbuf->p->len;
 8001e62:	4b1e      	ldr	r3, [pc, #120]	@ (8001edc <process_client_connection+0x9c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	895b      	ldrh	r3, [r3, #10]
 8001e6a:	81bb      	strh	r3, [r7, #12]
            buf_len = mb_process(mb_repl_buf, mb_req_buf, buf_len);    // Procesar datos
 8001e6c:	89bb      	ldrh	r3, [r7, #12]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	491b      	ldr	r1, [pc, #108]	@ (8001ee0 <process_client_connection+0xa0>)
 8001e72:	481c      	ldr	r0, [pc, #112]	@ (8001ee4 <process_client_connection+0xa4>)
 8001e74:	f7ff f968 	bl	8001148 <mb_process>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	81bb      	strh	r3, [r7, #12]
            netconn_write(client_conn, mb_repl_buf, buf_len, NETCONN_COPY); // Responder al cliente
 8001e7c:	89ba      	ldrh	r2, [r7, #12]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2301      	movs	r3, #1
 8001e84:	4917      	ldr	r1, [pc, #92]	@ (8001ee4 <process_client_connection+0xa4>)
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f008 fe70 	bl	800ab6c <netconn_write_partly>
        } while (netbuf_next(netbuf) > 0);
 8001e8c:	4b13      	ldr	r3, [pc, #76]	@ (8001edc <process_client_connection+0x9c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f00a fb9f 	bl	800c5d4 <netbuf_next>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	dcd6      	bgt.n	8001e4a <process_client_connection+0xa>

        netbuf_delete(netbuf); // Liberar el buffer después de procesarlo
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <process_client_connection+0x9c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f00a fb77 	bl	800c594 <netbuf_delete>
    while ((recv_err = netconn_recv(client_conn, &netbuf)) == ERR_OK) {
 8001ea6:	490d      	ldr	r1, [pc, #52]	@ (8001edc <process_client_connection+0x9c>)
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f008 fde5 	bl	800aa78 <netconn_recv>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0c7      	beq.n	8001e4a <process_client_connection+0xa>
    }

    // Cerrar y liberar la conexión del cliente
    netconn_close(client_conn);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f008 ff58 	bl	800ad70 <netconn_close>
    netconn_delete(client_conn);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f008 fb35 	bl	800a530 <netconn_delete>
    SendString("Desconecto...\r");
 8001ec6:	4808      	ldr	r0, [pc, #32]	@ (8001ee8 <process_client_connection+0xa8>)
 8001ec8:	f7ff f8b8 	bl	800103c <SendString>
    holding_registers[MB_SERVER_STATUS] = 0;
 8001ecc:	4b07      	ldr	r3, [pc, #28]	@ (8001eec <process_client_connection+0xac>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200008b0 	.word	0x200008b0
 8001ee0:	200008b4 	.word	0x200008b4
 8001ee4:	200009b8 	.word	0x200009b8
 8001ee8:	08019144 	.word	0x08019144
 8001eec:	20000828 	.word	0x20000828

08001ef0 <initialize_server>:

// Función para inicializar la conexión TCP
static err_t initialize_server() {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
    conn = netconn_new(NETCONN_TCP);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2010      	movs	r0, #16
 8001efc:	f008 fa7a 	bl	800a3f4 <netconn_new_with_proto_and_callback>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4a27      	ldr	r2, [pc, #156]	@ (8001fa0 <initialize_server+0xb0>)
 8001f04:	6013      	str	r3, [r2, #0]
    if (conn == NULL) {
 8001f06:	4b26      	ldr	r3, [pc, #152]	@ (8001fa0 <initialize_server+0xb0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d107      	bne.n	8001f1e <initialize_server+0x2e>
        //printf("Error: No se pudo crear la conexión.\n");
    	SendString("Error: No se pudo crear la conexión.\n");
 8001f0e:	4825      	ldr	r0, [pc, #148]	@ (8001fa4 <initialize_server+0xb4>)
 8001f10:	f7ff f894 	bl	800103c <SendString>
    	TurnOffRedLED();
 8001f14:	f7fe fd2e 	bl	8000974 <TurnOffRedLED>
        return ERR_MEM;
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1c:	e03c      	b.n	8001f98 <initialize_server+0xa8>
    }


    err_t err = netconn_bind(conn, IP_ADDR_ANY, MB_TCP_PORT);
 8001f1e:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <initialize_server+0xb0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8001f26:	4920      	ldr	r1, [pc, #128]	@ (8001fa8 <initialize_server+0xb8>)
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f008 fb1d 	bl	800a568 <netconn_bind>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
    if (err != ERR_OK) {
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00f      	beq.n	8001f5a <initialize_server+0x6a>
        //printf("Error: No se pudo enlazar al puerto %d (Error: %d).\n", MB_TCP_PORT, err);
    	SendString("Error: No se pudo enlazar al puerto\n");
 8001f3a:	481c      	ldr	r0, [pc, #112]	@ (8001fac <initialize_server+0xbc>)
 8001f3c:	f7ff f87e 	bl	800103c <SendString>
    	TurnOffRedLED();
 8001f40:	f7fe fd18 	bl	8000974 <TurnOffRedLED>
        netconn_delete(conn);
 8001f44:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <initialize_server+0xb0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f008 faf1 	bl	800a530 <netconn_delete>
        conn = NULL;
 8001f4e:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <initialize_server+0xb0>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
        return err;
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	e01e      	b.n	8001f98 <initialize_server+0xa8>
    }

    osDelay(1000);
 8001f5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f5e:	f005 fa7f 	bl	8007460 <osDelay>
    SendString("Activando Keep-Alive...\r");
 8001f62:	4813      	ldr	r0, [pc, #76]	@ (8001fb0 <initialize_server+0xc0>)
 8001f64:	f7ff f86a 	bl	800103c <SendString>


    //netconn_set_keepalive(newconn, 1);
    enable_keepalive(conn);
 8001f68:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa0 <initialize_server+0xb0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 f825 	bl	8001fbc <enable_keepalive>

    netconn_listen(conn); // Escuchar conexiones entrantes
 8001f72:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <initialize_server+0xb0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	21ff      	movs	r1, #255	@ 0xff
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f008 fb2d 	bl	800a5d8 <netconn_listen_with_backlog>
    //printf("Servidor TCP escuchando en el puerto %d.\n", MB_TCP_PORT);
    SendString("Servidor TCP escuchando en el puerto: ");
 8001f7e:	480d      	ldr	r0, [pc, #52]	@ (8001fb4 <initialize_server+0xc4>)
 8001f80:	f7ff f85c 	bl	800103c <SendString>
    SendNumber(MB_TCP_PORT);
 8001f84:	f44f 70fb 	mov.w	r0, #502	@ 0x1f6
 8001f88:	f7ff f87e 	bl	8001088 <SendNumber>
    SendString("\r");
 8001f8c:	480a      	ldr	r0, [pc, #40]	@ (8001fb8 <initialize_server+0xc8>)
 8001f8e:	f7ff f855 	bl	800103c <SendString>
    TurnOnRedLED();
 8001f92:	f7fe fce3 	bl	800095c <TurnOnRedLED>
    return ERR_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	200008a8 	.word	0x200008a8
 8001fa4:	08019154 	.word	0x08019154
 8001fa8:	0801c8e4 	.word	0x0801c8e4
 8001fac:	0801917c 	.word	0x0801917c
 8001fb0:	080191a4 	.word	0x080191a4
 8001fb4:	080191c0 	.word	0x080191c0
 8001fb8:	080191e8 	.word	0x080191e8

08001fbc <enable_keepalive>:

void enable_keepalive(struct netconn *conn) {
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
    if (conn != NULL && conn->pcb.tcp != NULL) {
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d01b      	beq.n	8002002 <enable_keepalive+0x46>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d017      	beq.n	8002002 <enable_keepalive+0x46>
        struct tcp_pcb *pcb = conn->pcb.tcp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	60fb      	str	r3, [r7, #12]

        // Activar opción KEEPALIVE
        pcb->so_options |= SOF_KEEPALIVE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	7a5b      	ldrb	r3, [r3, #9]
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	725a      	strb	r2, [r3, #9]

        // Configurar parámetros de Keep-Alive
        pcb->keep_idle = TCP_KEEPIDLE_DEFAULT;     // Tiempo en ms antes del primer paquete
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001fec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;   // Intervalo entre intentos en ms
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ff6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pcb->keep_cnt = TCP_KEEPCNT_DEFAULT;       // Número máximo de intentos
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002010:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002048 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002014:	f7ff fe6e 	bl	8001cf4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002018:	480c      	ldr	r0, [pc, #48]	@ (800204c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800201a:	490d      	ldr	r1, [pc, #52]	@ (8002050 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800201c:	4a0d      	ldr	r2, [pc, #52]	@ (8002054 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002020:	e002      	b.n	8002028 <LoopCopyDataInit>

08002022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002026:	3304      	adds	r3, #4

08002028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800202c:	d3f9      	bcc.n	8002022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202e:	4a0a      	ldr	r2, [pc, #40]	@ (8002058 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002030:	4c0a      	ldr	r4, [pc, #40]	@ (800205c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002034:	e001      	b.n	800203a <LoopFillZerobss>

08002036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002038:	3204      	adds	r2, #4

0800203a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800203c:	d3fb      	bcc.n	8002036 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800203e:	f015 ff53 	bl	8017ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002042:	f7fe fd75 	bl	8000b30 <main>
  bx  lr    
 8002046:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002048:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800204c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002050:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002054:	0801c9f0 	.word	0x0801c9f0
  ldr r2, =_sbss
 8002058:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800205c:	200102a4 	.word	0x200102a4

08002060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002060:	e7fe      	b.n	8002060 <ADC_IRQHandler>

08002062 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <LAN8742_RegisterBusIO+0x28>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <LAN8742_RegisterBusIO+0x28>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <LAN8742_RegisterBusIO+0x28>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d102      	bne.n	8002090 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	e014      	b.n	80020ba <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d17c      	bne.n	80021e0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2220      	movs	r2, #32
 80020f8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	e01c      	b.n	800213a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	f107 0208 	add.w	r2, r7, #8
 8002108:	2112      	movs	r1, #18
 800210a:	6978      	ldr	r0, [r7, #20]
 800210c:	4798      	blx	r3
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	da03      	bge.n	800211c <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002114:	f06f 0304 	mvn.w	r3, #4
 8002118:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800211a:	e00b      	b.n	8002134 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 031f 	and.w	r3, r3, #31
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	429a      	cmp	r2, r3
 8002126:	d105      	bne.n	8002134 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
         break;
 8002132:	e005      	b.n	8002140 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3301      	adds	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b1f      	cmp	r3, #31
 800213e:	d9df      	bls.n	8002100 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b1f      	cmp	r3, #31
 8002146:	d902      	bls.n	800214e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002148:	f06f 0302 	mvn.w	r3, #2
 800214c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d145      	bne.n	80021e0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6810      	ldr	r0, [r2, #0]
 800215c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002160:	2100      	movs	r1, #0
 8002162:	4798      	blx	r3
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	db37      	blt.n	80021da <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6810      	ldr	r0, [r2, #0]
 8002172:	f107 0208 	add.w	r2, r7, #8
 8002176:	2100      	movs	r1, #0
 8002178:	4798      	blx	r3
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	db28      	blt.n	80021d2 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4798      	blx	r3
 8002186:	4603      	mov	r3, r0
 8002188:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800218a:	e01c      	b.n	80021c6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	4798      	blx	r3
 8002192:	4603      	mov	r3, r0
 8002194:	461a      	mov	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800219e:	d80e      	bhi.n	80021be <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6810      	ldr	r0, [r2, #0]
 80021a8:	f107 0208 	add.w	r2, r7, #8
 80021ac:	2100      	movs	r1, #0
 80021ae:	4798      	blx	r3
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	da07      	bge.n	80021c6 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 80021b6:	f06f 0304 	mvn.w	r3, #4
 80021ba:	613b      	str	r3, [r7, #16]
                 break;
 80021bc:	e010      	b.n	80021e0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80021be:	f06f 0301 	mvn.w	r3, #1
 80021c2:	613b      	str	r3, [r7, #16]
               break;
 80021c4:	e00c      	b.n	80021e0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1dd      	bne.n	800218c <LAN8742_Init+0xc6>
 80021d0:	e006      	b.n	80021e0 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80021d2:	f06f 0304 	mvn.w	r3, #4
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	e002      	b.n	80021e0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80021da:	f06f 0303 	mvn.w	r3, #3
 80021de:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d112      	bne.n	800220c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	4798      	blx	r3
 80021ec:	4603      	mov	r3, r0
 80021ee:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80021f0:	bf00      	nop
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	4798      	blx	r3
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002204:	d9f5      	bls.n	80021f2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	605a      	str	r2, [r3, #4]
   }

   return status;
 800220c:	693b      	ldr	r3, [r7, #16]
 }
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6810      	ldr	r0, [r2, #0]
 800222a:	f107 020c 	add.w	r2, r7, #12
 800222e:	2101      	movs	r1, #1
 8002230:	4798      	blx	r3
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	da02      	bge.n	800223e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002238:	f06f 0304 	mvn.w	r3, #4
 800223c:	e06e      	b.n	800231c <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6810      	ldr	r0, [r2, #0]
 8002246:	f107 020c 	add.w	r2, r7, #12
 800224a:	2101      	movs	r1, #1
 800224c:	4798      	blx	r3
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	da02      	bge.n	800225a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002254:	f06f 0304 	mvn.w	r3, #4
 8002258:	e060      	b.n	800231c <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8002264:	2301      	movs	r3, #1
 8002266:	e059      	b.n	800231c <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6810      	ldr	r0, [r2, #0]
 8002270:	f107 020c 	add.w	r2, r7, #12
 8002274:	2100      	movs	r1, #0
 8002276:	4798      	blx	r3
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	da02      	bge.n	8002284 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800227e:	f06f 0304 	mvn.w	r3, #4
 8002282:	e04b      	b.n	800231c <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d11b      	bne.n	80022c6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <LAN8742_GetLinkState+0x90>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80022a2:	2302      	movs	r3, #2
 80022a4:	e03a      	b.n	800231c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e033      	b.n	800231c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80022be:	2304      	movs	r3, #4
 80022c0:	e02c      	b.n	800231c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80022c2:	2305      	movs	r3, #5
 80022c4:	e02a      	b.n	800231c <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6810      	ldr	r0, [r2, #0]
 80022ce:	f107 020c 	add.w	r2, r7, #12
 80022d2:	211f      	movs	r1, #31
 80022d4:	4798      	blx	r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	da02      	bge.n	80022e2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80022dc:	f06f 0304 	mvn.w	r3, #4
 80022e0:	e01c      	b.n	800231c <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80022ec:	2306      	movs	r3, #6
 80022ee:	e015      	b.n	800231c <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 031c 	and.w	r3, r3, #28
 80022f6:	2b18      	cmp	r3, #24
 80022f8:	d101      	bne.n	80022fe <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80022fa:	2302      	movs	r3, #2
 80022fc:	e00e      	b.n	800231c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f003 031c 	and.w	r3, r3, #28
 8002304:	2b08      	cmp	r3, #8
 8002306:	d101      	bne.n	800230c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002308:	2303      	movs	r3, #3
 800230a:	e007      	b.n	800231c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 031c 	and.w	r3, r3, #28
 8002312:	2b14      	cmp	r3, #20
 8002314:	d101      	bne.n	800231a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002316:	2304      	movs	r3, #4
 8002318:	e000      	b.n	800231c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800231a:	2305      	movs	r3, #5
    }
  }
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002328:	4b0e      	ldr	r3, [pc, #56]	@ (8002364 <HAL_Init+0x40>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0d      	ldr	r2, [pc, #52]	@ (8002364 <HAL_Init+0x40>)
 800232e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002332:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002334:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <HAL_Init+0x40>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0a      	ldr	r2, [pc, #40]	@ (8002364 <HAL_Init+0x40>)
 800233a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800233e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002340:	4b08      	ldr	r3, [pc, #32]	@ (8002364 <HAL_Init+0x40>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a07      	ldr	r2, [pc, #28]	@ (8002364 <HAL_Init+0x40>)
 8002346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800234a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800234c:	2003      	movs	r0, #3
 800234e:	f000 f8fc 	bl	800254a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002352:	200f      	movs	r0, #15
 8002354:	f7ff fb58 	bl	8001a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002358:	f7ff fa9a 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40023c00 	.word	0x40023c00

08002368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800236c:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <HAL_IncTick+0x20>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_IncTick+0x24>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4413      	add	r3, r2
 8002378:	4a04      	ldr	r2, [pc, #16]	@ (800238c <HAL_IncTick+0x24>)
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000008 	.word	0x20000008
 800238c:	20000abc 	.word	0x20000abc

08002390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return uwTick;
 8002394:	4b03      	ldr	r3, [pc, #12]	@ (80023a4 <HAL_GetTick+0x14>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000abc 	.word	0x20000abc

080023a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff ffee 	bl	8002390 <HAL_GetTick>
 80023b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d005      	beq.n	80023ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c2:	4b0a      	ldr	r3, [pc, #40]	@ (80023ec <HAL_Delay+0x44>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ce:	bf00      	nop
 80023d0:	f7ff ffde 	bl	8002390 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d8f7      	bhi.n	80023d0 <HAL_Delay+0x28>
  {
  }
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000008 	.word	0x20000008

080023f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002400:	4b0c      	ldr	r3, [pc, #48]	@ (8002434 <__NVIC_SetPriorityGrouping+0x44>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800240c:	4013      	ands	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002418:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800241c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002422:	4a04      	ldr	r2, [pc, #16]	@ (8002434 <__NVIC_SetPriorityGrouping+0x44>)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	60d3      	str	r3, [r2, #12]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800243c:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <__NVIC_GetPriorityGrouping+0x18>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	f003 0307 	and.w	r3, r3, #7
}
 8002446:	4618      	mov	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	2b00      	cmp	r3, #0
 8002464:	db0b      	blt.n	800247e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	f003 021f 	and.w	r2, r3, #31
 800246c:	4907      	ldr	r1, [pc, #28]	@ (800248c <__NVIC_EnableIRQ+0x38>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	2001      	movs	r0, #1
 8002476:	fa00 f202 	lsl.w	r2, r0, r2
 800247a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000e100 	.word	0xe000e100

08002490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	6039      	str	r1, [r7, #0]
 800249a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	db0a      	blt.n	80024ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	490c      	ldr	r1, [pc, #48]	@ (80024dc <__NVIC_SetPriority+0x4c>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	0112      	lsls	r2, r2, #4
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	440b      	add	r3, r1
 80024b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b8:	e00a      	b.n	80024d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4908      	ldr	r1, [pc, #32]	@ (80024e0 <__NVIC_SetPriority+0x50>)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	3b04      	subs	r3, #4
 80024c8:	0112      	lsls	r2, r2, #4
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	440b      	add	r3, r1
 80024ce:	761a      	strb	r2, [r3, #24]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000e100 	.word	0xe000e100
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	@ 0x24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f1c3 0307 	rsb	r3, r3, #7
 80024fe:	2b04      	cmp	r3, #4
 8002500:	bf28      	it	cs
 8002502:	2304      	movcs	r3, #4
 8002504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3304      	adds	r3, #4
 800250a:	2b06      	cmp	r3, #6
 800250c:	d902      	bls.n	8002514 <NVIC_EncodePriority+0x30>
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3b03      	subs	r3, #3
 8002512:	e000      	b.n	8002516 <NVIC_EncodePriority+0x32>
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002518:	f04f 32ff 	mov.w	r2, #4294967295
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43da      	mvns	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	401a      	ands	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800252c:	f04f 31ff 	mov.w	r1, #4294967295
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	43d9      	mvns	r1, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800253c:	4313      	orrs	r3, r2
         );
}
 800253e:	4618      	mov	r0, r3
 8002540:	3724      	adds	r7, #36	@ 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ff4c 	bl	80023f0 <__NVIC_SetPriorityGrouping>
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002572:	f7ff ff61 	bl	8002438 <__NVIC_GetPriorityGrouping>
 8002576:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68b9      	ldr	r1, [r7, #8]
 800257c:	6978      	ldr	r0, [r7, #20]
 800257e:	f7ff ffb1 	bl	80024e4 <NVIC_EncodePriority>
 8002582:	4602      	mov	r2, r0
 8002584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ff80 	bl	8002490 <__NVIC_SetPriority>
}
 8002590:	bf00      	nop
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff ff54 	bl	8002454 <__NVIC_EnableIRQ>
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e06c      	b.n	80026a0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2223      	movs	r2, #35	@ 0x23
 80025d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f004 fc8f 	bl	8006efc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	4b31      	ldr	r3, [pc, #196]	@ (80026a8 <HAL_ETH_Init+0xf4>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	4a30      	ldr	r2, [pc, #192]	@ (80026a8 <HAL_ETH_Init+0xf4>)
 80025e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ee:	4b2e      	ldr	r3, [pc, #184]	@ (80026a8 <HAL_ETH_Init+0xf4>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80025fa:	4b2c      	ldr	r3, [pc, #176]	@ (80026ac <HAL_ETH_Init+0xf8>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4a2b      	ldr	r2, [pc, #172]	@ (80026ac <HAL_ETH_Init+0xf8>)
 8002600:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002604:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002606:	4b29      	ldr	r3, [pc, #164]	@ (80026ac <HAL_ETH_Init+0xf8>)
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	4927      	ldr	r1, [pc, #156]	@ (80026ac <HAL_ETH_Init+0xf8>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002614:	4b25      	ldr	r3, [pc, #148]	@ (80026ac <HAL_ETH_Init+0xf8>)
 8002616:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800262e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002630:	f7ff feae 	bl	8002390 <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002636:	e011      	b.n	800265c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002638:	f7ff feaa 	bl	8002390 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002646:	d909      	bls.n	800265c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2204      	movs	r2, #4
 800264c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	22e0      	movs	r2, #224	@ 0xe0
 8002654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e021      	b.n	80026a0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1e4      	bne.n	8002638 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 ff56 	bl	8003520 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fffd 	bl	8003674 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f001 f853 	bl	8003726 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	461a      	mov	r2, r3
 8002686:	2100      	movs	r1, #0
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 ffbb 	bl	8003604 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2210      	movs	r2, #16
 800269a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40013800 	.word	0x40013800

080026b0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026be:	2b10      	cmp	r3, #16
 80026c0:	d17f      	bne.n	80027c2 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2223      	movs	r2, #35	@ 0x23
 80026c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80026de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026f0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80026f4:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002708:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2204      	movs	r2, #4
 8002710:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f9f8 	bl	8002b08 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0208 	orr.w	r2, r2, #8
 8002726:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002730:	2001      	movs	r0, #1
 8002732:	f7ff fe39 	bl	80023a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0204 	orr.w	r2, r2, #4
 800274c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002756:	2001      	movs	r0, #1
 8002758:	f7ff fe26 	bl	80023a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fd7c 	bl	8003262 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800277c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002780:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002798:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 80027ac:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80027b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027b4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2223      	movs	r2, #35	@ 0x23
 80027ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
  }
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027da:	2b23      	cmp	r3, #35	@ 0x23
 80027dc:	d170      	bne.n	80028c0 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2223      	movs	r2, #35	@ 0x23
 80027e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 80027f8:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 80027fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002800:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002814:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002818:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	f023 0302 	bic.w	r3, r3, #2
 800282c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002830:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0204 	bic.w	r2, r2, #4
 8002840:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800284a:	2001      	movs	r0, #1
 800284c:	f7ff fdac 	bl	80023a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fd02 	bl	8003262 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0208 	bic.w	r2, r2, #8
 800286c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002876:	2001      	movs	r0, #1
 8002878:	f7ff fd96 	bl	80023a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	e00e      	b.n	80028a8 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	3212      	adds	r2, #18
 8002890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002894:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	3301      	adds	r3, #1
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d9ed      	bls.n	800288a <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2210      	movs	r2, #16
 80028b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e045      	b.n	800297a <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028f4:	2b23      	cmp	r3, #35	@ 0x23
 80028f6:	d13f      	bne.n	8002978 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002900:	2201      	movs	r2, #1
 8002902:	6839      	ldr	r1, [r7, #0]
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 ff7b 	bl	8003800 <ETH_Prepare_Tx_Descriptors>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d009      	beq.n	8002924 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002916:	f043 0202 	orr.w	r2, r3, #2
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e02a      	b.n	800297a <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8002924:	f3bf 8f4f 	dsb	sy
}
 8002928:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	629a      	str	r2, [r3, #40]	@ 0x28
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002938:	2b03      	cmp	r3, #3
 800293a:	d904      	bls.n	8002946 <HAL_ETH_Transmit_IT+0x7c>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002940:	1f1a      	subs	r2, r3, #4
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00d      	beq.n	8002974 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002960:	461a      	mov	r2, r3
 8002962:	2304      	movs	r3, #4
 8002964:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800296e:	461a      	mov	r2, r3
 8002970:	2300      	movs	r3, #0
 8002972:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e000      	b.n	800297a <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
  }
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b088      	sub	sp, #32
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a0:	f043 0201 	orr.w	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e0a8      	b.n	8002b00 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029b4:	2b23      	cmp	r3, #35	@ 0x23
 80029b6:	d001      	beq.n	80029bc <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0a1      	b.n	8002b00 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	3212      	adds	r2, #18
 80029c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029cc:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029d2:	f1c3 0304 	rsb	r3, r3, #4
 80029d6:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80029d8:	e06a      	b.n	8002ab0 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	69da      	ldr	r2, [r3, #28]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d103      	bne.n	8002a0a <HAL_ETH_ReadData+0x88>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d040      	beq.n	8002a8c <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00c      	beq.n	8002a4e <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002a66:	461a      	mov	r2, r3
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f004 fc20 	bl	80072b0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	441a      	add	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d902      	bls.n	8002a9e <HAL_ETH_ReadData+0x11c>
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	3b04      	subs	r3, #4
 8002a9c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	3212      	adds	r2, #18
 8002aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa8:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	3301      	adds	r3, #1
 8002aae:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	db06      	blt.n	8002ac6 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d202      	bcs.n	8002ac6 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d089      	beq.n	80029da <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	441a      	add	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f814 	bl	8002b08 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d108      	bne.n	8002afe <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	e000      	b.n	8002b00 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3720      	adds	r7, #32
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002b14:	2301      	movs	r3, #1
 8002b16:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b1c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	3212      	adds	r2, #18
 8002b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b28:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b2e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002b30:	e03d      	b.n	8002bae <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d112      	bne.n	8002b60 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002b3a:	f107 0308 	add.w	r3, r7, #8
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f004 fb86 	bl	8007250 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d102      	bne.n	8002b50 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	74fb      	strb	r3, [r7, #19]
 8002b4e:	e007      	b.n	8002b60 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	461a      	mov	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002b60:	7cfb      	ldrb	r3, [r7, #19]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d023      	beq.n	8002bae <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	4a24      	ldr	r2, [pc, #144]	@ (8002c04 <ETH_UpdateDescriptor+0xfc>)
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	e003      	b.n	8002b7e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002b7c:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	61fb      	str	r3, [r7, #28]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d902      	bls.n	8002b9c <ETH_UpdateDescriptor+0x94>
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3b04      	subs	r3, #4
 8002b9a:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	3212      	adds	r2, #18
 8002ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba6:	617b      	str	r3, [r7, #20]
      desccount--;
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <ETH_UpdateDescriptor+0xb2>
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1bb      	bne.n	8002b32 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d01a      	beq.n	8002bfa <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002bce:	f3bf 8f5f 	dmb	sy
}
 8002bd2:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6919      	ldr	r1, [r3, #16]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	18ca      	adds	r2, r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bec:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	3720      	adds	r7, #32
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	80004600 	.word	0x80004600

08002c08 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3318      	adds	r3, #24
 8002c14:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c20:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002c26:	e03f      	b.n	8002ca8 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	3304      	adds	r3, #4
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	3301      	adds	r3, #1
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002c50:	7bbb      	ldrb	r3, [r7, #14]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d028      	beq.n	8002ca8 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68d9      	ldr	r1, [r3, #12]
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	db1b      	blt.n	8002ca4 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	3304      	adds	r3, #4
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f004 fb59 	bl	8007330 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	3304      	adds	r3, #4
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	2200      	movs	r2, #0
 8002c8a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002ca2:	e001      	b.n	8002ca8 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_ETH_ReleaseTxPacket+0xac>
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1b9      	bne.n	8002c28 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd6:	2b40      	cmp	r3, #64	@ 0x40
 8002cd8:	d112      	bne.n	8002d00 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce8:	2b40      	cmp	r3, #64	@ 0x40
 8002cea:	d109      	bne.n	8002d00 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4b50      	ldr	r3, [pc, #320]	@ (8002e38 <HAL_ETH_IRQHandler+0x178>)
 8002cf8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f003 fe46 	bl	800698c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d113      	bne.n	8002d3a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d10a      	bne.n	8002d3a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002d32:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f003 fe39 	bl	80069ac <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d4c:	d14c      	bne.n	8002de8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d60:	d142      	bne.n	8002de8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d68:	f043 0208 	orr.w	r2, r3, #8
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d84:	d11a      	bne.n	8002dbc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	4b2a      	ldr	r3, [pc, #168]	@ (8002e3c <HAL_ETH_IRQHandler+0x17c>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002dac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002db0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	22e0      	movs	r2, #224	@ 0xe0
 8002db6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002dba:	e012      	b.n	8002de2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002dca:	4013      	ands	r3, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002de0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f003 fdf2 	bl	80069cc <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d10e      	bne.n	8002e14 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfc:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f81c 	bl	8002e44 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002e14:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <HAL_ETH_IRQHandler+0x180>)
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d006      	beq.n	8002e2e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002e20:	4b07      	ldr	r3, [pc, #28]	@ (8002e40 <HAL_ETH_IRQHandler+0x180>)
 8002e22:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002e26:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f815 	bl	8002e58 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	00010040 	.word	0x00010040
 8002e3c:	007e2000 	.word	0x007e2000
 8002e40:	40013c00 	.word	0x40013c00

08002e44 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f003 031c 	and.w	r3, r3, #28
 8002e88:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	02db      	lsls	r3, r3, #11
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	019b      	lsls	r3, r3, #6
 8002e9a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f023 0302 	bic.w	r3, r3, #2
 8002eaa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002ebc:	f7ff fa68 	bl	8002390 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ec2:	e00d      	b.n	8002ee0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002ec4:	f7ff fa64 	bl	8002390 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed2:	d301      	bcc.n	8002ed8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e010      	b.n	8002efa <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1ec      	bne.n	8002ec4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f003 031c 	and.w	r3, r3, #28
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	02db      	lsls	r3, r3, #11
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	019b      	lsls	r3, r3, #6
 8002f30:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f5c:	f7ff fa18 	bl	8002390 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f62:	e00d      	b.n	8002f80 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002f64:	f7ff fa14 	bl	8002390 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f72:	d301      	bcc.n	8002f78 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e009      	b.n	8002f8c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1ec      	bne.n	8002f64 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0d9      	b.n	800315c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bf14      	ite	ne
 8002fb6:	2301      	movne	r3, #1
 8002fb8:	2300      	moveq	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003012:	2b00      	cmp	r3, #0
 8003014:	bf0c      	ite	eq
 8003016:	2301      	moveq	r3, #1
 8003018:	2300      	movne	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf14      	ite	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2300      	moveq	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf0c      	ite	eq
 8003066:	2301      	moveq	r3, #1
 8003068:	2300      	movne	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003096:	2b00      	cmp	r3, #0
 8003098:	bf14      	ite	ne
 800309a:	2301      	movne	r3, #1
 800309c:	2300      	moveq	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bf14      	ite	ne
 80030c2:	2301      	movne	r3, #1
 80030c4:	2300      	moveq	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf14      	ite	ne
 80030dc:	2301      	movne	r3, #1
 80030de:	2300      	moveq	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	0c1b      	lsrs	r3, r3, #16
 800311c:	b29a      	uxth	r2, r3
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf14      	ite	ne
 800314c:	2301      	movne	r3, #1
 800314e:	2300      	moveq	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e00b      	b.n	8003194 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003182:	2b10      	cmp	r3, #16
 8003184:	d105      	bne.n	8003192 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003186:	6839      	ldr	r1, [r7, #0]
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f88f 	bl	80032ac <ETH_SetMACConfig>

    return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e000      	b.n	8003194 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
  }
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 031c 	bic.w	r3, r3, #28
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80031b4:	f002 fb3c 	bl	8005830 <HAL_RCC_GetHCLKFreq>
 80031b8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003234 <HAL_ETH_SetMDIOClockRange+0x98>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d908      	bls.n	80031d4 <HAL_ETH_SetMDIOClockRange+0x38>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003238 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d804      	bhi.n	80031d4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f043 0308 	orr.w	r3, r3, #8
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	e027      	b.n	8003224 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4a18      	ldr	r2, [pc, #96]	@ (8003238 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d908      	bls.n	80031ee <HAL_ETH_SetMDIOClockRange+0x52>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4a17      	ldr	r2, [pc, #92]	@ (800323c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d204      	bcs.n	80031ee <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f043 030c 	orr.w	r3, r3, #12
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	e01a      	b.n	8003224 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	4a12      	ldr	r2, [pc, #72]	@ (800323c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d303      	bcc.n	80031fe <HAL_ETH_SetMDIOClockRange+0x62>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4a11      	ldr	r2, [pc, #68]	@ (8003240 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d911      	bls.n	8003222 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4a0f      	ldr	r2, [pc, #60]	@ (8003240 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d908      	bls.n	8003218 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	4a0e      	ldr	r2, [pc, #56]	@ (8003244 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d804      	bhi.n	8003218 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	e005      	b.n	8003224 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f043 0310 	orr.w	r3, r3, #16
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	e000      	b.n	8003224 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003222:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	611a      	str	r2, [r3, #16]
}
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	01312cff 	.word	0x01312cff
 8003238:	02160ebf 	.word	0x02160ebf
 800323c:	03938700 	.word	0x03938700
 8003240:	05f5e0ff 	.word	0x05f5e0ff
 8003244:	08f0d17f 	.word	0x08f0d17f

08003248 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003280:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003284:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003292:	2001      	movs	r0, #1
 8003294:	f7ff f888 	bl	80023a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80032a2:	6193      	str	r3, [r2, #24]
}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4b51      	ldr	r3, [pc, #324]	@ (8003408 <ETH_SetMACConfig+0x15c>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	7c1b      	ldrb	r3, [r3, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d102      	bne.n	80032d4 <ETH_SetMACConfig+0x28>
 80032ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032d2:	e000      	b.n	80032d6 <ETH_SetMACConfig+0x2a>
 80032d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	7c5b      	ldrb	r3, [r3, #17]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <ETH_SetMACConfig+0x38>
 80032de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80032e2:	e000      	b.n	80032e6 <ETH_SetMACConfig+0x3a>
 80032e4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80032ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	7fdb      	ldrb	r3, [r3, #31]
 80032f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80032f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80032fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	7f92      	ldrb	r2, [r2, #30]
 8003300:	2a00      	cmp	r2, #0
 8003302:	d102      	bne.n	800330a <ETH_SetMACConfig+0x5e>
 8003304:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003308:	e000      	b.n	800330c <ETH_SetMACConfig+0x60>
 800330a:	2200      	movs	r2, #0
                        macconf->Speed |
 800330c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	7f1b      	ldrb	r3, [r3, #28]
 8003312:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003314:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800331a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	791b      	ldrb	r3, [r3, #4]
 8003320:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003322:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	f892 2020 	ldrb.w	r2, [r2, #32]
 800332a:	2a00      	cmp	r2, #0
 800332c:	d102      	bne.n	8003334 <ETH_SetMACConfig+0x88>
 800332e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003332:	e000      	b.n	8003336 <ETH_SetMACConfig+0x8a>
 8003334:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003336:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	7bdb      	ldrb	r3, [r3, #15]
 800333c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800333e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003344:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800334c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800334e:	4313      	orrs	r3, r2
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003366:	2001      	movs	r0, #1
 8003368:	f7ff f81e 	bl	80023a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003382:	4013      	ands	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800338a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003392:	2a00      	cmp	r2, #0
 8003394:	d101      	bne.n	800339a <ETH_SetMACConfig+0xee>
 8003396:	2280      	movs	r2, #128	@ 0x80
 8003398:	e000      	b.n	800339c <ETH_SetMACConfig+0xf0>
 800339a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800339c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80033a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80033aa:	2a01      	cmp	r2, #1
 80033ac:	d101      	bne.n	80033b2 <ETH_SetMACConfig+0x106>
 80033ae:	2208      	movs	r2, #8
 80033b0:	e000      	b.n	80033b4 <ETH_SetMACConfig+0x108>
 80033b2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80033b4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80033bc:	2a01      	cmp	r2, #1
 80033be:	d101      	bne.n	80033c4 <ETH_SetMACConfig+0x118>
 80033c0:	2204      	movs	r2, #4
 80033c2:	e000      	b.n	80033c6 <ETH_SetMACConfig+0x11a>
 80033c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80033c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80033ce:	2a01      	cmp	r2, #1
 80033d0:	d101      	bne.n	80033d6 <ETH_SetMACConfig+0x12a>
 80033d2:	2202      	movs	r2, #2
 80033d4:	e000      	b.n	80033d8 <ETH_SetMACConfig+0x12c>
 80033d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80033d8:	4313      	orrs	r3, r2
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033f0:	2001      	movs	r0, #1
 80033f2:	f7fe ffd9 	bl	80023a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	619a      	str	r2, [r3, #24]
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	ff20810f 	.word	0xff20810f

0800340c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4b3d      	ldr	r3, [pc, #244]	@ (800351c <ETH_SetDMAConfig+0x110>)
 8003426:	4013      	ands	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	7b1b      	ldrb	r3, [r3, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d102      	bne.n	8003438 <ETH_SetDMAConfig+0x2c>
 8003432:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003436:	e000      	b.n	800343a <ETH_SetDMAConfig+0x2e>
 8003438:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	7b5b      	ldrb	r3, [r3, #13]
 800343e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003440:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	7f52      	ldrb	r2, [r2, #29]
 8003446:	2a00      	cmp	r2, #0
 8003448:	d102      	bne.n	8003450 <ETH_SetDMAConfig+0x44>
 800344a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800344e:	e000      	b.n	8003452 <ETH_SetDMAConfig+0x46>
 8003450:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003452:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	7b9b      	ldrb	r3, [r3, #14]
 8003458:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800345a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003460:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	7f1b      	ldrb	r3, [r3, #28]
 8003466:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003468:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	7f9b      	ldrb	r3, [r3, #30]
 800346e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003470:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003476:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800347e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003480:	4313      	orrs	r3, r2
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003490:	461a      	mov	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034a2:	2001      	movs	r0, #1
 80034a4:	f7fe ff80 	bl	80023a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034b0:	461a      	mov	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	791b      	ldrb	r3, [r3, #4]
 80034ba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034c0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80034c6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80034cc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034d4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80034d6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034dc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80034de:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80034e4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034f2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003500:	2001      	movs	r0, #1
 8003502:	f7fe ff51 	bl	80023a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800350e:	461a      	mov	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6013      	str	r3, [r2, #0]
}
 8003514:	bf00      	nop
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	f8de3f23 	.word	0xf8de3f23

08003520 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b0a6      	sub	sp, #152	@ 0x98
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003528:	2301      	movs	r3, #1
 800352a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800352e:	2301      	movs	r3, #1
 8003530:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003534:	2300      	movs	r3, #0
 8003536:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003538:	2300      	movs	r3, #0
 800353a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003544:	2300      	movs	r3, #0
 8003546:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003550:	2300      	movs	r3, #0
 8003552:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003556:	2300      	movs	r3, #0
 8003558:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800355c:	2300      	movs	r3, #0
 800355e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003560:	2300      	movs	r3, #0
 8003562:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003566:	2300      	movs	r3, #0
 8003568:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800356a:	2300      	movs	r3, #0
 800356c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003570:	2300      	movs	r3, #0
 8003572:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003576:	2300      	movs	r3, #0
 8003578:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800357c:	2300      	movs	r3, #0
 800357e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003582:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003586:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003588:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800358c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800358e:	2300      	movs	r3, #0
 8003590:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003594:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003598:	4619      	mov	r1, r3
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff fe86 	bl	80032ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80035a4:	2301      	movs	r3, #1
 80035a6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80035ae:	2301      	movs	r3, #1
 80035b0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80035bc:	2300      	movs	r3, #0
 80035be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80035c2:	2300      	movs	r3, #0
 80035c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80035cc:	2301      	movs	r3, #1
 80035ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80035d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035d4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80035d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80035da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80035dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80035f0:	f107 0308 	add.w	r3, r7, #8
 80035f4:	4619      	mov	r1, r3
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff ff08 	bl	800340c <ETH_SetDMAConfig>
}
 80035fc:	bf00      	nop
 80035fe:	3798      	adds	r7, #152	@ 0x98
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3305      	adds	r3, #5
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	3204      	adds	r2, #4
 800361c:	7812      	ldrb	r2, [r2, #0]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	4b11      	ldr	r3, [pc, #68]	@ (800366c <ETH_MACAddressConfig+0x68>)
 8003626:	4413      	add	r3, r2
 8003628:	461a      	mov	r2, r3
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3303      	adds	r3, #3
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	061a      	lsls	r2, r3, #24
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3302      	adds	r3, #2
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	041b      	lsls	r3, r3, #16
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3301      	adds	r3, #1
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	4313      	orrs	r3, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	7812      	ldrb	r2, [r2, #0]
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <ETH_MACAddressConfig+0x6c>)
 8003656:	4413      	add	r3, r2
 8003658:	461a      	mov	r2, r3
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	6013      	str	r3, [r2, #0]
}
 800365e:	bf00      	nop
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40028040 	.word	0x40028040
 8003670:	40028044 	.word	0x40028044

08003674 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	e03e      	b.n	8003700 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68d9      	ldr	r1, [r3, #12]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	440b      	add	r3, r1
 8003692:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2200      	movs	r2, #0
 800369e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2200      	movs	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2200      	movs	r2, #0
 80036aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	3206      	adds	r2, #6
 80036b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d80c      	bhi.n	80036e4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68d9      	ldr	r1, [r3, #12]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	440b      	add	r3, r1
 80036dc:	461a      	mov	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	e004      	b.n	80036ee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	461a      	mov	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3301      	adds	r3, #1
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b03      	cmp	r3, #3
 8003704:	d9bd      	bls.n	8003682 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003718:	611a      	str	r2, [r3, #16]
}
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003726:	b480      	push	{r7}
 8003728:	b085      	sub	sp, #20
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	e046      	b.n	80037c2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6919      	ldr	r1, [r3, #16]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	440b      	add	r3, r1
 8003744:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2200      	movs	r2, #0
 8003750:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2200      	movs	r2, #0
 8003756:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2200      	movs	r2, #0
 800375c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2200      	movs	r2, #0
 8003762:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2200      	movs	r2, #0
 8003768:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003770:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8003778:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	3212      	adds	r2, #18
 800378e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d80c      	bhi.n	80037b2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6919      	ldr	r1, [r3, #16]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	440b      	add	r3, r1
 80037aa:	461a      	mov	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	60da      	str	r2, [r3, #12]
 80037b0:	e004      	b.n	80037bc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	461a      	mov	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	3301      	adds	r3, #1
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d9b5      	bls.n	8003734 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037f2:	60da      	str	r2, [r3, #12]
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003800:	b480      	push	{r7}
 8003802:	b08d      	sub	sp, #52	@ 0x34
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	3318      	adds	r3, #24
 8003810:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800381e:	2300      	movs	r3, #0
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800382a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003832:	2300      	movs	r3, #0
 8003834:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800383e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003842:	d007      	beq.n	8003854 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003848:	3304      	adds	r3, #4
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003854:	2302      	movs	r3, #2
 8003856:	e103      	b.n	8003a60 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	3301      	adds	r3, #1
 800385c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003870:	f023 031f 	bic.w	r3, r3, #31
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	6852      	ldr	r2, [r2, #4]
 8003878:	431a      	orrs	r2, r3
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	431a      	orrs	r2, r3
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	431a      	orrs	r2, r3
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80038de:	f3bf 8f5f 	dmb	sy
}
 80038e2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80038f0:	e084      	b.n	80039fc <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d006      	beq.n	8003912 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	e005      	b.n	800391e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800391e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003920:	3301      	adds	r3, #1
 8003922:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003926:	2b03      	cmp	r3, #3
 8003928:	d902      	bls.n	8003930 <ETH_Prepare_Tx_Descriptors+0x130>
 800392a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800392c:	3b04      	subs	r3, #4
 800392e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003938:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800394e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003952:	d007      	beq.n	8003964 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003958:	3304      	adds	r3, #4
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d029      	beq.n	80039b8 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800396c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003970:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003972:	2300      	movs	r3, #0
 8003974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003976:	e019      	b.n	80039ac <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8003978:	f3bf 8f5f 	dmb	sy
}
 800397c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800398a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398c:	3301      	adds	r3, #1
 800398e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003992:	2b03      	cmp	r3, #3
 8003994:	d902      	bls.n	800399c <ETH_Prepare_Tx_Descriptors+0x19c>
 8003996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003998:	3b04      	subs	r3, #4
 800399a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80039a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a8:	3301      	adds	r3, #1
 80039aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d3e1      	bcc.n	8003978 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80039b4:	2302      	movs	r3, #2
 80039b6:	e053      	b.n	8003a60 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	3301      	adds	r3, #1
 80039bc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80039d6:	f023 031f 	bic.w	r3, r3, #31
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	6852      	ldr	r2, [r2, #4]
 80039de:	431a      	orrs	r2, r3
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	3301      	adds	r3, #1
 80039e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80039ea:	f3bf 8f5f 	dmb	sy
}
 80039ee:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f47f af76 	bne.w	80038f2 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d006      	beq.n	8003a1a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	e005      	b.n	8003a26 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a36:	6979      	ldr	r1, [r7, #20]
 8003a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a46:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a48:	b672      	cpsid	i
}
 8003a4a:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	4413      	add	r3, r2
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003a5a:	b662      	cpsie	i
}
 8003a5c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3734      	adds	r7, #52	@ 0x34
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b089      	sub	sp, #36	@ 0x24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	e177      	b.n	8003d78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a88:	2201      	movs	r2, #1
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	f040 8166 	bne.w	8003d72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d005      	beq.n	8003abe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d130      	bne.n	8003b20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	2203      	movs	r2, #3
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003af4:	2201      	movs	r2, #1
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 0201 	and.w	r2, r3, #1
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d017      	beq.n	8003b5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	2203      	movs	r2, #3
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d123      	bne.n	8003bb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	08da      	lsrs	r2, r3, #3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3208      	adds	r2, #8
 8003b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	220f      	movs	r2, #15
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	08da      	lsrs	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3208      	adds	r2, #8
 8003baa:	69b9      	ldr	r1, [r7, #24]
 8003bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	2203      	movs	r2, #3
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 0203 	and.w	r2, r3, #3
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 80c0 	beq.w	8003d72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	4b66      	ldr	r3, [pc, #408]	@ (8003d90 <HAL_GPIO_Init+0x324>)
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfa:	4a65      	ldr	r2, [pc, #404]	@ (8003d90 <HAL_GPIO_Init+0x324>)
 8003bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c02:	4b63      	ldr	r3, [pc, #396]	@ (8003d90 <HAL_GPIO_Init+0x324>)
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c0e:	4a61      	ldr	r2, [pc, #388]	@ (8003d94 <HAL_GPIO_Init+0x328>)
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	089b      	lsrs	r3, r3, #2
 8003c14:	3302      	adds	r3, #2
 8003c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	220f      	movs	r2, #15
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a58      	ldr	r2, [pc, #352]	@ (8003d98 <HAL_GPIO_Init+0x32c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d037      	beq.n	8003caa <HAL_GPIO_Init+0x23e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a57      	ldr	r2, [pc, #348]	@ (8003d9c <HAL_GPIO_Init+0x330>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d031      	beq.n	8003ca6 <HAL_GPIO_Init+0x23a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a56      	ldr	r2, [pc, #344]	@ (8003da0 <HAL_GPIO_Init+0x334>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d02b      	beq.n	8003ca2 <HAL_GPIO_Init+0x236>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a55      	ldr	r2, [pc, #340]	@ (8003da4 <HAL_GPIO_Init+0x338>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d025      	beq.n	8003c9e <HAL_GPIO_Init+0x232>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a54      	ldr	r2, [pc, #336]	@ (8003da8 <HAL_GPIO_Init+0x33c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d01f      	beq.n	8003c9a <HAL_GPIO_Init+0x22e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a53      	ldr	r2, [pc, #332]	@ (8003dac <HAL_GPIO_Init+0x340>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d019      	beq.n	8003c96 <HAL_GPIO_Init+0x22a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a52      	ldr	r2, [pc, #328]	@ (8003db0 <HAL_GPIO_Init+0x344>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d013      	beq.n	8003c92 <HAL_GPIO_Init+0x226>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a51      	ldr	r2, [pc, #324]	@ (8003db4 <HAL_GPIO_Init+0x348>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00d      	beq.n	8003c8e <HAL_GPIO_Init+0x222>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a50      	ldr	r2, [pc, #320]	@ (8003db8 <HAL_GPIO_Init+0x34c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d007      	beq.n	8003c8a <HAL_GPIO_Init+0x21e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a4f      	ldr	r2, [pc, #316]	@ (8003dbc <HAL_GPIO_Init+0x350>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d101      	bne.n	8003c86 <HAL_GPIO_Init+0x21a>
 8003c82:	2309      	movs	r3, #9
 8003c84:	e012      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003c86:	230a      	movs	r3, #10
 8003c88:	e010      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	e00e      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003c8e:	2307      	movs	r3, #7
 8003c90:	e00c      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003c92:	2306      	movs	r3, #6
 8003c94:	e00a      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003c96:	2305      	movs	r3, #5
 8003c98:	e008      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003c9a:	2304      	movs	r3, #4
 8003c9c:	e006      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e004      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e002      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003caa:	2300      	movs	r3, #0
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	f002 0203 	and.w	r2, r2, #3
 8003cb2:	0092      	lsls	r2, r2, #2
 8003cb4:	4093      	lsls	r3, r2
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cbc:	4935      	ldr	r1, [pc, #212]	@ (8003d94 <HAL_GPIO_Init+0x328>)
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	089b      	lsrs	r3, r3, #2
 8003cc2:	3302      	adds	r3, #2
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cca:	4b3d      	ldr	r3, [pc, #244]	@ (8003dc0 <HAL_GPIO_Init+0x354>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cee:	4a34      	ldr	r2, [pc, #208]	@ (8003dc0 <HAL_GPIO_Init+0x354>)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cf4:	4b32      	ldr	r3, [pc, #200]	@ (8003dc0 <HAL_GPIO_Init+0x354>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d18:	4a29      	ldr	r2, [pc, #164]	@ (8003dc0 <HAL_GPIO_Init+0x354>)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d1e:	4b28      	ldr	r3, [pc, #160]	@ (8003dc0 <HAL_GPIO_Init+0x354>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	43db      	mvns	r3, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d42:	4a1f      	ldr	r2, [pc, #124]	@ (8003dc0 <HAL_GPIO_Init+0x354>)
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d48:	4b1d      	ldr	r3, [pc, #116]	@ (8003dc0 <HAL_GPIO_Init+0x354>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	43db      	mvns	r3, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4013      	ands	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d6c:	4a14      	ldr	r2, [pc, #80]	@ (8003dc0 <HAL_GPIO_Init+0x354>)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3301      	adds	r3, #1
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	2b0f      	cmp	r3, #15
 8003d7c:	f67f ae84 	bls.w	8003a88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	3724      	adds	r7, #36	@ 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40013800 	.word	0x40013800
 8003d98:	40020000 	.word	0x40020000
 8003d9c:	40020400 	.word	0x40020400
 8003da0:	40020800 	.word	0x40020800
 8003da4:	40020c00 	.word	0x40020c00
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40021400 	.word	0x40021400
 8003db0:	40021800 	.word	0x40021800
 8003db4:	40021c00 	.word	0x40021c00
 8003db8:	40022000 	.word	0x40022000
 8003dbc:	40022400 	.word	0x40022400
 8003dc0:	40013c00 	.word	0x40013c00

08003dc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	887b      	ldrh	r3, [r7, #2]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
 8003de0:	e001      	b.n	8003de6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003de2:	2300      	movs	r3, #0
 8003de4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	807b      	strh	r3, [r7, #2]
 8003e00:	4613      	mov	r3, r2
 8003e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e04:	787b      	ldrb	r3, [r7, #1]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e0a:	887a      	ldrh	r2, [r7, #2]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e10:	e003      	b.n	8003e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e12:	887b      	ldrh	r3, [r7, #2]
 8003e14:	041a      	lsls	r2, r3, #16
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	619a      	str	r2, [r3, #24]
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e12b      	b.n	8004092 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fd fd4a 	bl	80018e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2224      	movs	r2, #36	@ 0x24
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e8c:	f001 fcdc 	bl	8005848 <HAL_RCC_GetPCLK1Freq>
 8003e90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4a81      	ldr	r2, [pc, #516]	@ (800409c <HAL_I2C_Init+0x274>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d807      	bhi.n	8003eac <HAL_I2C_Init+0x84>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4a80      	ldr	r2, [pc, #512]	@ (80040a0 <HAL_I2C_Init+0x278>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	bf94      	ite	ls
 8003ea4:	2301      	movls	r3, #1
 8003ea6:	2300      	movhi	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	e006      	b.n	8003eba <HAL_I2C_Init+0x92>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a7d      	ldr	r2, [pc, #500]	@ (80040a4 <HAL_I2C_Init+0x27c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	bf94      	ite	ls
 8003eb4:	2301      	movls	r3, #1
 8003eb6:	2300      	movhi	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e0e7      	b.n	8004092 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4a78      	ldr	r2, [pc, #480]	@ (80040a8 <HAL_I2C_Init+0x280>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	0c9b      	lsrs	r3, r3, #18
 8003ecc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4a6a      	ldr	r2, [pc, #424]	@ (800409c <HAL_I2C_Init+0x274>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d802      	bhi.n	8003efc <HAL_I2C_Init+0xd4>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	e009      	b.n	8003f10 <HAL_I2C_Init+0xe8>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
 8003f06:	4a69      	ldr	r2, [pc, #420]	@ (80040ac <HAL_I2C_Init+0x284>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	099b      	lsrs	r3, r3, #6
 8003f0e:	3301      	adds	r3, #1
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	430b      	orrs	r3, r1
 8003f16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	495c      	ldr	r1, [pc, #368]	@ (800409c <HAL_I2C_Init+0x274>)
 8003f2c:	428b      	cmp	r3, r1
 8003f2e:	d819      	bhi.n	8003f64 <HAL_I2C_Init+0x13c>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1e59      	subs	r1, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f3e:	1c59      	adds	r1, r3, #1
 8003f40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f44:	400b      	ands	r3, r1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_I2C_Init+0x138>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1e59      	subs	r1, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f58:	3301      	adds	r3, #1
 8003f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5e:	e051      	b.n	8004004 <HAL_I2C_Init+0x1dc>
 8003f60:	2304      	movs	r3, #4
 8003f62:	e04f      	b.n	8004004 <HAL_I2C_Init+0x1dc>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d111      	bne.n	8003f90 <HAL_I2C_Init+0x168>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1e58      	subs	r0, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6859      	ldr	r1, [r3, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	440b      	add	r3, r1
 8003f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	e012      	b.n	8003fb6 <HAL_I2C_Init+0x18e>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1e58      	subs	r0, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6859      	ldr	r1, [r3, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	0099      	lsls	r1, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_I2C_Init+0x196>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e022      	b.n	8004004 <HAL_I2C_Init+0x1dc>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_I2C_Init+0x1bc>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1e58      	subs	r0, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6859      	ldr	r1, [r3, #4]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	440b      	add	r3, r1
 8003fd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fd8:	3301      	adds	r3, #1
 8003fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fe2:	e00f      	b.n	8004004 <HAL_I2C_Init+0x1dc>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1e58      	subs	r0, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	0099      	lsls	r1, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004000:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	6809      	ldr	r1, [r1, #0]
 8004008:	4313      	orrs	r3, r2
 800400a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69da      	ldr	r2, [r3, #28]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004032:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6911      	ldr	r1, [r2, #16]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68d2      	ldr	r2, [r2, #12]
 800403e:	4311      	orrs	r1, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	430b      	orrs	r3, r1
 8004046:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695a      	ldr	r2, [r3, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	000186a0 	.word	0x000186a0
 80040a0:	001e847f 	.word	0x001e847f
 80040a4:	003d08ff 	.word	0x003d08ff
 80040a8:	431bde83 	.word	0x431bde83
 80040ac:	10624dd3 	.word	0x10624dd3

080040b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	4608      	mov	r0, r1
 80040ba:	4611      	mov	r1, r2
 80040bc:	461a      	mov	r2, r3
 80040be:	4603      	mov	r3, r0
 80040c0:	817b      	strh	r3, [r7, #10]
 80040c2:	460b      	mov	r3, r1
 80040c4:	813b      	strh	r3, [r7, #8]
 80040c6:	4613      	mov	r3, r2
 80040c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040ca:	f7fe f961 	bl	8002390 <HAL_GetTick>
 80040ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b20      	cmp	r3, #32
 80040da:	f040 80d9 	bne.w	8004290 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	2319      	movs	r3, #25
 80040e4:	2201      	movs	r2, #1
 80040e6:	496d      	ldr	r1, [pc, #436]	@ (800429c <HAL_I2C_Mem_Write+0x1ec>)
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 fc8b 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
 80040f6:	e0cc      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_I2C_Mem_Write+0x56>
 8004102:	2302      	movs	r3, #2
 8004104:	e0c5      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b01      	cmp	r3, #1
 800411a:	d007      	beq.n	800412c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f042 0201 	orr.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800413a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2221      	movs	r2, #33	@ 0x21
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2240      	movs	r2, #64	@ 0x40
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a3a      	ldr	r2, [r7, #32]
 8004156:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800415c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4a4d      	ldr	r2, [pc, #308]	@ (80042a0 <HAL_I2C_Mem_Write+0x1f0>)
 800416c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800416e:	88f8      	ldrh	r0, [r7, #6]
 8004170:	893a      	ldrh	r2, [r7, #8]
 8004172:	8979      	ldrh	r1, [r7, #10]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	4603      	mov	r3, r0
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fac2 	bl	8004708 <I2C_RequestMemoryWrite>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d052      	beq.n	8004230 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e081      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 fd50 	bl	8004c38 <I2C_WaitOnTXEFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00d      	beq.n	80041ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d107      	bne.n	80041b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e06b      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	781a      	ldrb	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d11b      	bne.n	8004230 <HAL_I2C_Mem_Write+0x180>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d017      	beq.n	8004230 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	781a      	ldrb	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1aa      	bne.n	800418e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fd43 	bl	8004cc8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424c:	2b04      	cmp	r3, #4
 800424e:	d107      	bne.n	8004260 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800425e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e016      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	e000      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004290:	2302      	movs	r3, #2
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	00100002 	.word	0x00100002
 80042a0:	ffff0000 	.word	0xffff0000

080042a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08c      	sub	sp, #48	@ 0x30
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	461a      	mov	r2, r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	817b      	strh	r3, [r7, #10]
 80042b6:	460b      	mov	r3, r1
 80042b8:	813b      	strh	r3, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042be:	f7fe f867 	bl	8002390 <HAL_GetTick>
 80042c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	f040 8214 	bne.w	80046fa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	2319      	movs	r3, #25
 80042d8:	2201      	movs	r2, #1
 80042da:	497b      	ldr	r1, [pc, #492]	@ (80044c8 <HAL_I2C_Mem_Read+0x224>)
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 fb91 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042e8:	2302      	movs	r3, #2
 80042ea:	e207      	b.n	80046fc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_I2C_Mem_Read+0x56>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e200      	b.n	80046fc <HAL_I2C_Mem_Read+0x458>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b01      	cmp	r3, #1
 800430e:	d007      	beq.n	8004320 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800432e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2222      	movs	r2, #34	@ 0x22
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2240      	movs	r2, #64	@ 0x40
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800434a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004350:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4a5b      	ldr	r2, [pc, #364]	@ (80044cc <HAL_I2C_Mem_Read+0x228>)
 8004360:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004362:	88f8      	ldrh	r0, [r7, #6]
 8004364:	893a      	ldrh	r2, [r7, #8]
 8004366:	8979      	ldrh	r1, [r7, #10]
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	4603      	mov	r3, r0
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fa5e 	bl	8004834 <I2C_RequestMemoryRead>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e1bc      	b.n	80046fc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004386:	2b00      	cmp	r3, #0
 8004388:	d113      	bne.n	80043b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438a:	2300      	movs	r3, #0
 800438c:	623b      	str	r3, [r7, #32]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	623b      	str	r3, [r7, #32]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	623b      	str	r3, [r7, #32]
 800439e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e190      	b.n	80046d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d11b      	bne.n	80043f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	e170      	b.n	80046d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d11b      	bne.n	8004432 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004408:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004418:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441a:	2300      	movs	r3, #0
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	e150      	b.n	80046d4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004448:	e144      	b.n	80046d4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800444e:	2b03      	cmp	r3, #3
 8004450:	f200 80f1 	bhi.w	8004636 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004458:	2b01      	cmp	r3, #1
 800445a:	d123      	bne.n	80044a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800445c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800445e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 fc79 	bl	8004d58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e145      	b.n	80046fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044a2:	e117      	b.n	80046d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d14e      	bne.n	800454a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b2:	2200      	movs	r2, #0
 80044b4:	4906      	ldr	r1, [pc, #24]	@ (80044d0 <HAL_I2C_Mem_Read+0x22c>)
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 faa4 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e11a      	b.n	80046fc <HAL_I2C_Mem_Read+0x458>
 80044c6:	bf00      	nop
 80044c8:	00100002 	.word	0x00100002
 80044cc:	ffff0000 	.word	0xffff0000
 80044d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004548:	e0c4      	b.n	80046d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004550:	2200      	movs	r2, #0
 8004552:	496c      	ldr	r1, [pc, #432]	@ (8004704 <HAL_I2C_Mem_Read+0x460>)
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fa55 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0cb      	b.n	80046fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004572:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ac:	2200      	movs	r2, #0
 80045ae:	4955      	ldr	r1, [pc, #340]	@ (8004704 <HAL_I2C_Mem_Read+0x460>)
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 fa27 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e09d      	b.n	80046fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004634:	e04e      	b.n	80046d4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004638:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 fb8c 	bl	8004d58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e058      	b.n	80046fc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b04      	cmp	r3, #4
 8004688:	d124      	bne.n	80046d4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468e:	2b03      	cmp	r3, #3
 8004690:	d107      	bne.n	80046a2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046a0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f47f aeb6 	bne.w	800444a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e000      	b.n	80046fc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80046fa:	2302      	movs	r3, #2
  }
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3728      	adds	r7, #40	@ 0x28
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	00010004 	.word	0x00010004

08004708 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af02      	add	r7, sp, #8
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	4608      	mov	r0, r1
 8004712:	4611      	mov	r1, r2
 8004714:	461a      	mov	r2, r3
 8004716:	4603      	mov	r3, r0
 8004718:	817b      	strh	r3, [r7, #10]
 800471a:	460b      	mov	r3, r1
 800471c:	813b      	strh	r3, [r7, #8]
 800471e:	4613      	mov	r3, r2
 8004720:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004730:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	2200      	movs	r2, #0
 800473a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 f960 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00d      	beq.n	8004766 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004758:	d103      	bne.n	8004762 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004760:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e05f      	b.n	8004826 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004766:	897b      	ldrh	r3, [r7, #10]
 8004768:	b2db      	uxtb	r3, r3
 800476a:	461a      	mov	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004774:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	6a3a      	ldr	r2, [r7, #32]
 800477a:	492d      	ldr	r1, [pc, #180]	@ (8004830 <I2C_RequestMemoryWrite+0x128>)
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f9bb 	bl	8004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e04c      	b.n	8004826 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a4:	6a39      	ldr	r1, [r7, #32]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fa46 	bl	8004c38 <I2C_WaitOnTXEFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00d      	beq.n	80047ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d107      	bne.n	80047ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e02b      	b.n	8004826 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047ce:	88fb      	ldrh	r3, [r7, #6]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d105      	bne.n	80047e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047d4:	893b      	ldrh	r3, [r7, #8]
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	611a      	str	r2, [r3, #16]
 80047de:	e021      	b.n	8004824 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047e0:	893b      	ldrh	r3, [r7, #8]
 80047e2:	0a1b      	lsrs	r3, r3, #8
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f0:	6a39      	ldr	r1, [r7, #32]
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fa20 	bl	8004c38 <I2C_WaitOnTXEFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00d      	beq.n	800481a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	2b04      	cmp	r3, #4
 8004804:	d107      	bne.n	8004816 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004814:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e005      	b.n	8004826 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800481a:	893b      	ldrh	r3, [r7, #8]
 800481c:	b2da      	uxtb	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	00010002 	.word	0x00010002

08004834 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	4608      	mov	r0, r1
 800483e:	4611      	mov	r1, r2
 8004840:	461a      	mov	r2, r3
 8004842:	4603      	mov	r3, r0
 8004844:	817b      	strh	r3, [r7, #10]
 8004846:	460b      	mov	r3, r1
 8004848:	813b      	strh	r3, [r7, #8]
 800484a:	4613      	mov	r3, r2
 800484c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800485c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800486c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	2200      	movs	r2, #0
 8004876:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f8c2 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00d      	beq.n	80048a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004894:	d103      	bne.n	800489e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800489c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e0aa      	b.n	80049f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048a2:	897b      	ldrh	r3, [r7, #10]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	461a      	mov	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	4952      	ldr	r1, [pc, #328]	@ (8004a00 <I2C_RequestMemoryRead+0x1cc>)
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 f91d 	bl	8004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e097      	b.n	80049f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c8:	2300      	movs	r3, #0
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e0:	6a39      	ldr	r1, [r7, #32]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f9a8 	bl	8004c38 <I2C_WaitOnTXEFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00d      	beq.n	800490a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d107      	bne.n	8004906 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004904:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e076      	b.n	80049f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d105      	bne.n	800491c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004910:	893b      	ldrh	r3, [r7, #8]
 8004912:	b2da      	uxtb	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	611a      	str	r2, [r3, #16]
 800491a:	e021      	b.n	8004960 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800491c:	893b      	ldrh	r3, [r7, #8]
 800491e:	0a1b      	lsrs	r3, r3, #8
 8004920:	b29b      	uxth	r3, r3
 8004922:	b2da      	uxtb	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800492a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800492c:	6a39      	ldr	r1, [r7, #32]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f982 	bl	8004c38 <I2C_WaitOnTXEFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00d      	beq.n	8004956 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	2b04      	cmp	r3, #4
 8004940:	d107      	bne.n	8004952 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004950:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e050      	b.n	80049f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004956:	893b      	ldrh	r3, [r7, #8]
 8004958:	b2da      	uxtb	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004962:	6a39      	ldr	r1, [r7, #32]
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f967 	bl	8004c38 <I2C_WaitOnTXEFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00d      	beq.n	800498c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004974:	2b04      	cmp	r3, #4
 8004976:	d107      	bne.n	8004988 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004986:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e035      	b.n	80049f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800499a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 f82b 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00d      	beq.n	80049d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049c2:	d103      	bne.n	80049cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e013      	b.n	80049f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049d0:	897b      	ldrh	r3, [r7, #10]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	6a3a      	ldr	r2, [r7, #32]
 80049e4:	4906      	ldr	r1, [pc, #24]	@ (8004a00 <I2C_RequestMemoryRead+0x1cc>)
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f886 	bl	8004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	00010002 	.word	0x00010002

08004a04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	4613      	mov	r3, r2
 8004a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a14:	e048      	b.n	8004aa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1c:	d044      	beq.n	8004aa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1e:	f7fd fcb7 	bl	8002390 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d302      	bcc.n	8004a34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d139      	bne.n	8004aa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	0c1b      	lsrs	r3, r3, #16
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d10d      	bne.n	8004a5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	43da      	mvns	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	e00c      	b.n	8004a74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	43da      	mvns	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4013      	ands	r3, r2
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bf0c      	ite	eq
 8004a6c:	2301      	moveq	r3, #1
 8004a6e:	2300      	movne	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	461a      	mov	r2, r3
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d116      	bne.n	8004aa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a94:	f043 0220 	orr.w	r2, r3, #32
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e023      	b.n	8004af0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	0c1b      	lsrs	r3, r3, #16
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d10d      	bne.n	8004ace <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	43da      	mvns	r2, r3
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4013      	ands	r3, r2
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bf0c      	ite	eq
 8004ac4:	2301      	moveq	r3, #1
 8004ac6:	2300      	movne	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	e00c      	b.n	8004ae8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	43da      	mvns	r2, r3
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d093      	beq.n	8004a16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b06:	e071      	b.n	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b16:	d123      	bne.n	8004b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	f043 0204 	orr.w	r2, r3, #4
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e067      	b.n	8004c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	d041      	beq.n	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b68:	f7fd fc12 	bl	8002390 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d302      	bcc.n	8004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d136      	bne.n	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	0c1b      	lsrs	r3, r3, #16
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d10c      	bne.n	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	43da      	mvns	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4013      	ands	r3, r2
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	bf14      	ite	ne
 8004b9a:	2301      	movne	r3, #1
 8004b9c:	2300      	moveq	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	e00b      	b.n	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	43da      	mvns	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4013      	ands	r3, r2
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d016      	beq.n	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd8:	f043 0220 	orr.w	r2, r3, #32
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e021      	b.n	8004c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	0c1b      	lsrs	r3, r3, #16
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d10c      	bne.n	8004c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	43da      	mvns	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4013      	ands	r3, r2
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf14      	ite	ne
 8004c08:	2301      	movne	r3, #1
 8004c0a:	2300      	moveq	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	e00b      	b.n	8004c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	43da      	mvns	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bf14      	ite	ne
 8004c22:	2301      	movne	r3, #1
 8004c24:	2300      	moveq	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f47f af6d 	bne.w	8004b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c44:	e034      	b.n	8004cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 f8e3 	bl	8004e12 <I2C_IsAcknowledgeFailed>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e034      	b.n	8004cc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5c:	d028      	beq.n	8004cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5e:	f7fd fb97 	bl	8002390 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d302      	bcc.n	8004c74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d11d      	bne.n	8004cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7e:	2b80      	cmp	r3, #128	@ 0x80
 8004c80:	d016      	beq.n	8004cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9c:	f043 0220 	orr.w	r2, r3, #32
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e007      	b.n	8004cc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cba:	2b80      	cmp	r3, #128	@ 0x80
 8004cbc:	d1c3      	bne.n	8004c46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cd4:	e034      	b.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f89b 	bl	8004e12 <I2C_IsAcknowledgeFailed>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e034      	b.n	8004d50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d028      	beq.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cee:	f7fd fb4f 	bl	8002390 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d302      	bcc.n	8004d04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d11d      	bne.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d016      	beq.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2c:	f043 0220 	orr.w	r2, r3, #32
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e007      	b.n	8004d50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d1c3      	bne.n	8004cd6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d64:	e049      	b.n	8004dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b10      	cmp	r3, #16
 8004d72:	d119      	bne.n	8004da8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0210 	mvn.w	r2, #16
 8004d7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e030      	b.n	8004e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da8:	f7fd faf2 	bl	8002390 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d302      	bcc.n	8004dbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d11d      	bne.n	8004dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc8:	2b40      	cmp	r3, #64	@ 0x40
 8004dca:	d016      	beq.n	8004dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	f043 0220 	orr.w	r2, r3, #32
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e007      	b.n	8004e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e04:	2b40      	cmp	r3, #64	@ 0x40
 8004e06:	d1ae      	bne.n	8004d66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e28:	d11b      	bne.n	8004e62 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e32:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4e:	f043 0204 	orr.w	r2, r3, #4
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d129      	bne.n	8004eda <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2224      	movs	r2, #36	@ 0x24
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0210 	bic.w	r2, r2, #16
 8004eac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0201 	orr.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e000      	b.n	8004edc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004eda:	2302      	movs	r3, #2
  }
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	d12a      	bne.n	8004f58 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2224      	movs	r2, #36	@ 0x24
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0201 	bic.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f20:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004f22:	89fb      	ldrh	r3, [r7, #14]
 8004f24:	f023 030f 	bic.w	r3, r3, #15
 8004f28:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	89fb      	ldrh	r3, [r7, #14]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	89fa      	ldrh	r2, [r7, #14]
 8004f3a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e000      	b.n	8004f5a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004f58:	2302      	movs	r3, #2
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
	...

08004f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e267      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d075      	beq.n	8005072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f86:	4b88      	ldr	r3, [pc, #544]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d00c      	beq.n	8004fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f92:	4b85      	ldr	r3, [pc, #532]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d112      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f9e:	4b82      	ldr	r3, [pc, #520]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004faa:	d10b      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fac:	4b7e      	ldr	r3, [pc, #504]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d05b      	beq.n	8005070 <HAL_RCC_OscConfig+0x108>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d157      	bne.n	8005070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e242      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fcc:	d106      	bne.n	8004fdc <HAL_RCC_OscConfig+0x74>
 8004fce:	4b76      	ldr	r3, [pc, #472]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a75      	ldr	r2, [pc, #468]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8004fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	e01d      	b.n	8005018 <HAL_RCC_OscConfig+0xb0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fe4:	d10c      	bne.n	8005000 <HAL_RCC_OscConfig+0x98>
 8004fe6:	4b70      	ldr	r3, [pc, #448]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a6f      	ldr	r2, [pc, #444]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8004fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	4b6d      	ldr	r3, [pc, #436]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a6c      	ldr	r2, [pc, #432]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e00b      	b.n	8005018 <HAL_RCC_OscConfig+0xb0>
 8005000:	4b69      	ldr	r3, [pc, #420]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a68      	ldr	r2, [pc, #416]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8005006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	4b66      	ldr	r3, [pc, #408]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a65      	ldr	r2, [pc, #404]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8005012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d013      	beq.n	8005048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005020:	f7fd f9b6 	bl	8002390 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005028:	f7fd f9b2 	bl	8002390 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b64      	cmp	r3, #100	@ 0x64
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e207      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503a:	4b5b      	ldr	r3, [pc, #364]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0xc0>
 8005046:	e014      	b.n	8005072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005048:	f7fd f9a2 	bl	8002390 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005050:	f7fd f99e 	bl	8002390 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b64      	cmp	r3, #100	@ 0x64
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e1f3      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005062:	4b51      	ldr	r3, [pc, #324]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0xe8>
 800506e:	e000      	b.n	8005072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d063      	beq.n	8005146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800507e:	4b4a      	ldr	r3, [pc, #296]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00b      	beq.n	80050a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800508a:	4b47      	ldr	r3, [pc, #284]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005092:	2b08      	cmp	r3, #8
 8005094:	d11c      	bne.n	80050d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005096:	4b44      	ldr	r3, [pc, #272]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d116      	bne.n	80050d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050a2:	4b41      	ldr	r3, [pc, #260]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <HAL_RCC_OscConfig+0x152>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d001      	beq.n	80050ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e1c7      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ba:	4b3b      	ldr	r3, [pc, #236]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	4937      	ldr	r1, [pc, #220]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ce:	e03a      	b.n	8005146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d020      	beq.n	800511a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050d8:	4b34      	ldr	r3, [pc, #208]	@ (80051ac <HAL_RCC_OscConfig+0x244>)
 80050da:	2201      	movs	r2, #1
 80050dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050de:	f7fd f957 	bl	8002390 <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050e6:	f7fd f953 	bl	8002390 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e1a8      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f8:	4b2b      	ldr	r3, [pc, #172]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0f0      	beq.n	80050e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005104:	4b28      	ldr	r3, [pc, #160]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	4925      	ldr	r1, [pc, #148]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 8005114:	4313      	orrs	r3, r2
 8005116:	600b      	str	r3, [r1, #0]
 8005118:	e015      	b.n	8005146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800511a:	4b24      	ldr	r3, [pc, #144]	@ (80051ac <HAL_RCC_OscConfig+0x244>)
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fd f936 	bl	8002390 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005128:	f7fd f932 	bl	8002390 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e187      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513a:	4b1b      	ldr	r3, [pc, #108]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d036      	beq.n	80051c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d016      	beq.n	8005188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800515a:	4b15      	ldr	r3, [pc, #84]	@ (80051b0 <HAL_RCC_OscConfig+0x248>)
 800515c:	2201      	movs	r2, #1
 800515e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005160:	f7fd f916 	bl	8002390 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005168:	f7fd f912 	bl	8002390 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e167      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800517a:	4b0b      	ldr	r3, [pc, #44]	@ (80051a8 <HAL_RCC_OscConfig+0x240>)
 800517c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f0      	beq.n	8005168 <HAL_RCC_OscConfig+0x200>
 8005186:	e01b      	b.n	80051c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005188:	4b09      	ldr	r3, [pc, #36]	@ (80051b0 <HAL_RCC_OscConfig+0x248>)
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518e:	f7fd f8ff 	bl	8002390 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005194:	e00e      	b.n	80051b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005196:	f7fd f8fb 	bl	8002390 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d907      	bls.n	80051b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e150      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
 80051a8:	40023800 	.word	0x40023800
 80051ac:	42470000 	.word	0x42470000
 80051b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b4:	4b88      	ldr	r3, [pc, #544]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 80051b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1ea      	bne.n	8005196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 8097 	beq.w	80052fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ce:	2300      	movs	r3, #0
 80051d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051d2:	4b81      	ldr	r3, [pc, #516]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10f      	bne.n	80051fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	4b7d      	ldr	r3, [pc, #500]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e6:	4a7c      	ldr	r2, [pc, #496]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 80051e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80051ee:	4b7a      	ldr	r3, [pc, #488]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f6:	60bb      	str	r3, [r7, #8]
 80051f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051fa:	2301      	movs	r3, #1
 80051fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051fe:	4b77      	ldr	r3, [pc, #476]	@ (80053dc <HAL_RCC_OscConfig+0x474>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005206:	2b00      	cmp	r3, #0
 8005208:	d118      	bne.n	800523c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800520a:	4b74      	ldr	r3, [pc, #464]	@ (80053dc <HAL_RCC_OscConfig+0x474>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a73      	ldr	r2, [pc, #460]	@ (80053dc <HAL_RCC_OscConfig+0x474>)
 8005210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005216:	f7fd f8bb 	bl	8002390 <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521c:	e008      	b.n	8005230 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800521e:	f7fd f8b7 	bl	8002390 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e10c      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005230:	4b6a      	ldr	r3, [pc, #424]	@ (80053dc <HAL_RCC_OscConfig+0x474>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0f0      	beq.n	800521e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d106      	bne.n	8005252 <HAL_RCC_OscConfig+0x2ea>
 8005244:	4b64      	ldr	r3, [pc, #400]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005248:	4a63      	ldr	r2, [pc, #396]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 800524a:	f043 0301 	orr.w	r3, r3, #1
 800524e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005250:	e01c      	b.n	800528c <HAL_RCC_OscConfig+0x324>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b05      	cmp	r3, #5
 8005258:	d10c      	bne.n	8005274 <HAL_RCC_OscConfig+0x30c>
 800525a:	4b5f      	ldr	r3, [pc, #380]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 800525c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525e:	4a5e      	ldr	r2, [pc, #376]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 8005260:	f043 0304 	orr.w	r3, r3, #4
 8005264:	6713      	str	r3, [r2, #112]	@ 0x70
 8005266:	4b5c      	ldr	r3, [pc, #368]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 8005268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526a:	4a5b      	ldr	r2, [pc, #364]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	6713      	str	r3, [r2, #112]	@ 0x70
 8005272:	e00b      	b.n	800528c <HAL_RCC_OscConfig+0x324>
 8005274:	4b58      	ldr	r3, [pc, #352]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 8005276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005278:	4a57      	ldr	r2, [pc, #348]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005280:	4b55      	ldr	r3, [pc, #340]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 8005282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005284:	4a54      	ldr	r2, [pc, #336]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 8005286:	f023 0304 	bic.w	r3, r3, #4
 800528a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d015      	beq.n	80052c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005294:	f7fd f87c 	bl	8002390 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800529a:	e00a      	b.n	80052b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800529c:	f7fd f878 	bl	8002390 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e0cb      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b2:	4b49      	ldr	r3, [pc, #292]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 80052b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0ee      	beq.n	800529c <HAL_RCC_OscConfig+0x334>
 80052be:	e014      	b.n	80052ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c0:	f7fd f866 	bl	8002390 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c6:	e00a      	b.n	80052de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052c8:	f7fd f862 	bl	8002390 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e0b5      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052de:	4b3e      	ldr	r3, [pc, #248]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1ee      	bne.n	80052c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052ea:	7dfb      	ldrb	r3, [r7, #23]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d105      	bne.n	80052fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052f0:	4b39      	ldr	r3, [pc, #228]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 80052f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f4:	4a38      	ldr	r2, [pc, #224]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 80052f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 80a1 	beq.w	8005448 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005306:	4b34      	ldr	r3, [pc, #208]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 030c 	and.w	r3, r3, #12
 800530e:	2b08      	cmp	r3, #8
 8005310:	d05c      	beq.n	80053cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d141      	bne.n	800539e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800531a:	4b31      	ldr	r3, [pc, #196]	@ (80053e0 <HAL_RCC_OscConfig+0x478>)
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005320:	f7fd f836 	bl	8002390 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005328:	f7fd f832 	bl	8002390 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e087      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533a:	4b27      	ldr	r3, [pc, #156]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1f0      	bne.n	8005328 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69da      	ldr	r2, [r3, #28]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	019b      	lsls	r3, r3, #6
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535c:	085b      	lsrs	r3, r3, #1
 800535e:	3b01      	subs	r3, #1
 8005360:	041b      	lsls	r3, r3, #16
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005368:	061b      	lsls	r3, r3, #24
 800536a:	491b      	ldr	r1, [pc, #108]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 800536c:	4313      	orrs	r3, r2
 800536e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005370:	4b1b      	ldr	r3, [pc, #108]	@ (80053e0 <HAL_RCC_OscConfig+0x478>)
 8005372:	2201      	movs	r2, #1
 8005374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005376:	f7fd f80b 	bl	8002390 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800537e:	f7fd f807 	bl	8002390 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e05c      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005390:	4b11      	ldr	r3, [pc, #68]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0f0      	beq.n	800537e <HAL_RCC_OscConfig+0x416>
 800539c:	e054      	b.n	8005448 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800539e:	4b10      	ldr	r3, [pc, #64]	@ (80053e0 <HAL_RCC_OscConfig+0x478>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a4:	f7fc fff4 	bl	8002390 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ac:	f7fc fff0 	bl	8002390 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e045      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053be:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <HAL_RCC_OscConfig+0x470>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCC_OscConfig+0x444>
 80053ca:	e03d      	b.n	8005448 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d107      	bne.n	80053e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e038      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
 80053d8:	40023800 	.word	0x40023800
 80053dc:	40007000 	.word	0x40007000
 80053e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005454 <HAL_RCC_OscConfig+0x4ec>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d028      	beq.n	8005444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d121      	bne.n	8005444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800540a:	429a      	cmp	r2, r3
 800540c:	d11a      	bne.n	8005444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005414:	4013      	ands	r3, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800541a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800541c:	4293      	cmp	r3, r2
 800541e:	d111      	bne.n	8005444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542a:	085b      	lsrs	r3, r3, #1
 800542c:	3b01      	subs	r3, #1
 800542e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005430:	429a      	cmp	r2, r3
 8005432:	d107      	bne.n	8005444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005440:	429a      	cmp	r2, r3
 8005442:	d001      	beq.n	8005448 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40023800 	.word	0x40023800

08005458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0cc      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800546c:	4b68      	ldr	r3, [pc, #416]	@ (8005610 <HAL_RCC_ClockConfig+0x1b8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d90c      	bls.n	8005494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547a:	4b65      	ldr	r3, [pc, #404]	@ (8005610 <HAL_RCC_ClockConfig+0x1b8>)
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005482:	4b63      	ldr	r3, [pc, #396]	@ (8005610 <HAL_RCC_ClockConfig+0x1b8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d001      	beq.n	8005494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e0b8      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d020      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054ac:	4b59      	ldr	r3, [pc, #356]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	4a58      	ldr	r2, [pc, #352]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054c4:	4b53      	ldr	r3, [pc, #332]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	4a52      	ldr	r2, [pc, #328]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054d0:	4b50      	ldr	r3, [pc, #320]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	494d      	ldr	r1, [pc, #308]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d044      	beq.n	8005578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d107      	bne.n	8005506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f6:	4b47      	ldr	r3, [pc, #284]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d119      	bne.n	8005536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e07f      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d003      	beq.n	8005516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005512:	2b03      	cmp	r3, #3
 8005514:	d107      	bne.n	8005526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005516:	4b3f      	ldr	r3, [pc, #252]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d109      	bne.n	8005536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e06f      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005526:	4b3b      	ldr	r3, [pc, #236]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e067      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005536:	4b37      	ldr	r3, [pc, #220]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f023 0203 	bic.w	r2, r3, #3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	4934      	ldr	r1, [pc, #208]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 8005544:	4313      	orrs	r3, r2
 8005546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005548:	f7fc ff22 	bl	8002390 <HAL_GetTick>
 800554c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800554e:	e00a      	b.n	8005566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005550:	f7fc ff1e 	bl	8002390 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e04f      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005566:	4b2b      	ldr	r3, [pc, #172]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 020c 	and.w	r2, r3, #12
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	429a      	cmp	r2, r3
 8005576:	d1eb      	bne.n	8005550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005578:	4b25      	ldr	r3, [pc, #148]	@ (8005610 <HAL_RCC_ClockConfig+0x1b8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d20c      	bcs.n	80055a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005586:	4b22      	ldr	r3, [pc, #136]	@ (8005610 <HAL_RCC_ClockConfig+0x1b8>)
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800558e:	4b20      	ldr	r3, [pc, #128]	@ (8005610 <HAL_RCC_ClockConfig+0x1b8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d001      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e032      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d008      	beq.n	80055be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055ac:	4b19      	ldr	r3, [pc, #100]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	4916      	ldr	r1, [pc, #88]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d009      	beq.n	80055de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ca:	4b12      	ldr	r3, [pc, #72]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	490e      	ldr	r1, [pc, #56]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055de:	f000 f821 	bl	8005624 <HAL_RCC_GetSysClockFreq>
 80055e2:	4602      	mov	r2, r0
 80055e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	091b      	lsrs	r3, r3, #4
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	490a      	ldr	r1, [pc, #40]	@ (8005618 <HAL_RCC_ClockConfig+0x1c0>)
 80055f0:	5ccb      	ldrb	r3, [r1, r3]
 80055f2:	fa22 f303 	lsr.w	r3, r2, r3
 80055f6:	4a09      	ldr	r2, [pc, #36]	@ (800561c <HAL_RCC_ClockConfig+0x1c4>)
 80055f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055fa:	4b09      	ldr	r3, [pc, #36]	@ (8005620 <HAL_RCC_ClockConfig+0x1c8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fc fa02 	bl	8001a08 <HAL_InitTick>

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	40023c00 	.word	0x40023c00
 8005614:	40023800 	.word	0x40023800
 8005618:	0801c7ac 	.word	0x0801c7ac
 800561c:	20000000 	.word	0x20000000
 8005620:	20000004 	.word	0x20000004

08005624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005628:	b094      	sub	sp, #80	@ 0x50
 800562a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005630:	2300      	movs	r3, #0
 8005632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005634:	2300      	movs	r3, #0
 8005636:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800563c:	4b79      	ldr	r3, [pc, #484]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x200>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 030c 	and.w	r3, r3, #12
 8005644:	2b08      	cmp	r3, #8
 8005646:	d00d      	beq.n	8005664 <HAL_RCC_GetSysClockFreq+0x40>
 8005648:	2b08      	cmp	r3, #8
 800564a:	f200 80e1 	bhi.w	8005810 <HAL_RCC_GetSysClockFreq+0x1ec>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <HAL_RCC_GetSysClockFreq+0x34>
 8005652:	2b04      	cmp	r3, #4
 8005654:	d003      	beq.n	800565e <HAL_RCC_GetSysClockFreq+0x3a>
 8005656:	e0db      	b.n	8005810 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005658:	4b73      	ldr	r3, [pc, #460]	@ (8005828 <HAL_RCC_GetSysClockFreq+0x204>)
 800565a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800565c:	e0db      	b.n	8005816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800565e:	4b73      	ldr	r3, [pc, #460]	@ (800582c <HAL_RCC_GetSysClockFreq+0x208>)
 8005660:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005662:	e0d8      	b.n	8005816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005664:	4b6f      	ldr	r3, [pc, #444]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x200>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800566c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800566e:	4b6d      	ldr	r3, [pc, #436]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x200>)
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d063      	beq.n	8005742 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800567a:	4b6a      	ldr	r3, [pc, #424]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x200>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	099b      	lsrs	r3, r3, #6
 8005680:	2200      	movs	r2, #0
 8005682:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005684:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568c:	633b      	str	r3, [r7, #48]	@ 0x30
 800568e:	2300      	movs	r3, #0
 8005690:	637b      	str	r3, [r7, #52]	@ 0x34
 8005692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005696:	4622      	mov	r2, r4
 8005698:	462b      	mov	r3, r5
 800569a:	f04f 0000 	mov.w	r0, #0
 800569e:	f04f 0100 	mov.w	r1, #0
 80056a2:	0159      	lsls	r1, r3, #5
 80056a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056a8:	0150      	lsls	r0, r2, #5
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4621      	mov	r1, r4
 80056b0:	1a51      	subs	r1, r2, r1
 80056b2:	6139      	str	r1, [r7, #16]
 80056b4:	4629      	mov	r1, r5
 80056b6:	eb63 0301 	sbc.w	r3, r3, r1
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056c8:	4659      	mov	r1, fp
 80056ca:	018b      	lsls	r3, r1, #6
 80056cc:	4651      	mov	r1, sl
 80056ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056d2:	4651      	mov	r1, sl
 80056d4:	018a      	lsls	r2, r1, #6
 80056d6:	4651      	mov	r1, sl
 80056d8:	ebb2 0801 	subs.w	r8, r2, r1
 80056dc:	4659      	mov	r1, fp
 80056de:	eb63 0901 	sbc.w	r9, r3, r1
 80056e2:	f04f 0200 	mov.w	r2, #0
 80056e6:	f04f 0300 	mov.w	r3, #0
 80056ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056f6:	4690      	mov	r8, r2
 80056f8:	4699      	mov	r9, r3
 80056fa:	4623      	mov	r3, r4
 80056fc:	eb18 0303 	adds.w	r3, r8, r3
 8005700:	60bb      	str	r3, [r7, #8]
 8005702:	462b      	mov	r3, r5
 8005704:	eb49 0303 	adc.w	r3, r9, r3
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	f04f 0200 	mov.w	r2, #0
 800570e:	f04f 0300 	mov.w	r3, #0
 8005712:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005716:	4629      	mov	r1, r5
 8005718:	024b      	lsls	r3, r1, #9
 800571a:	4621      	mov	r1, r4
 800571c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005720:	4621      	mov	r1, r4
 8005722:	024a      	lsls	r2, r1, #9
 8005724:	4610      	mov	r0, r2
 8005726:	4619      	mov	r1, r3
 8005728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800572a:	2200      	movs	r2, #0
 800572c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800572e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005734:	f7fa fdb4 	bl	80002a0 <__aeabi_uldivmod>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4613      	mov	r3, r2
 800573e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005740:	e058      	b.n	80057f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005742:	4b38      	ldr	r3, [pc, #224]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x200>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	099b      	lsrs	r3, r3, #6
 8005748:	2200      	movs	r2, #0
 800574a:	4618      	mov	r0, r3
 800574c:	4611      	mov	r1, r2
 800574e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005752:	623b      	str	r3, [r7, #32]
 8005754:	2300      	movs	r3, #0
 8005756:	627b      	str	r3, [r7, #36]	@ 0x24
 8005758:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800575c:	4642      	mov	r2, r8
 800575e:	464b      	mov	r3, r9
 8005760:	f04f 0000 	mov.w	r0, #0
 8005764:	f04f 0100 	mov.w	r1, #0
 8005768:	0159      	lsls	r1, r3, #5
 800576a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800576e:	0150      	lsls	r0, r2, #5
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4641      	mov	r1, r8
 8005776:	ebb2 0a01 	subs.w	sl, r2, r1
 800577a:	4649      	mov	r1, r9
 800577c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005780:	f04f 0200 	mov.w	r2, #0
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800578c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005790:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005794:	ebb2 040a 	subs.w	r4, r2, sl
 8005798:	eb63 050b 	sbc.w	r5, r3, fp
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	00eb      	lsls	r3, r5, #3
 80057a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057aa:	00e2      	lsls	r2, r4, #3
 80057ac:	4614      	mov	r4, r2
 80057ae:	461d      	mov	r5, r3
 80057b0:	4643      	mov	r3, r8
 80057b2:	18e3      	adds	r3, r4, r3
 80057b4:	603b      	str	r3, [r7, #0]
 80057b6:	464b      	mov	r3, r9
 80057b8:	eb45 0303 	adc.w	r3, r5, r3
 80057bc:	607b      	str	r3, [r7, #4]
 80057be:	f04f 0200 	mov.w	r2, #0
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057ca:	4629      	mov	r1, r5
 80057cc:	028b      	lsls	r3, r1, #10
 80057ce:	4621      	mov	r1, r4
 80057d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057d4:	4621      	mov	r1, r4
 80057d6:	028a      	lsls	r2, r1, #10
 80057d8:	4610      	mov	r0, r2
 80057da:	4619      	mov	r1, r3
 80057dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057de:	2200      	movs	r2, #0
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	61fa      	str	r2, [r7, #28]
 80057e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057e8:	f7fa fd5a 	bl	80002a0 <__aeabi_uldivmod>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4613      	mov	r3, r2
 80057f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x200>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	0c1b      	lsrs	r3, r3, #16
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	3301      	adds	r3, #1
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005804:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005808:	fbb2 f3f3 	udiv	r3, r2, r3
 800580c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800580e:	e002      	b.n	8005816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005810:	4b05      	ldr	r3, [pc, #20]	@ (8005828 <HAL_RCC_GetSysClockFreq+0x204>)
 8005812:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005818:	4618      	mov	r0, r3
 800581a:	3750      	adds	r7, #80	@ 0x50
 800581c:	46bd      	mov	sp, r7
 800581e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005822:	bf00      	nop
 8005824:	40023800 	.word	0x40023800
 8005828:	00f42400 	.word	0x00f42400
 800582c:	007a1200 	.word	0x007a1200

08005830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005834:	4b03      	ldr	r3, [pc, #12]	@ (8005844 <HAL_RCC_GetHCLKFreq+0x14>)
 8005836:	681b      	ldr	r3, [r3, #0]
}
 8005838:	4618      	mov	r0, r3
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	20000000 	.word	0x20000000

08005848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800584c:	f7ff fff0 	bl	8005830 <HAL_RCC_GetHCLKFreq>
 8005850:	4602      	mov	r2, r0
 8005852:	4b05      	ldr	r3, [pc, #20]	@ (8005868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	0a9b      	lsrs	r3, r3, #10
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	4903      	ldr	r1, [pc, #12]	@ (800586c <HAL_RCC_GetPCLK1Freq+0x24>)
 800585e:	5ccb      	ldrb	r3, [r1, r3]
 8005860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005864:	4618      	mov	r0, r3
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40023800 	.word	0x40023800
 800586c:	0801c7bc 	.word	0x0801c7bc

08005870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005874:	f7ff ffdc 	bl	8005830 <HAL_RCC_GetHCLKFreq>
 8005878:	4602      	mov	r2, r0
 800587a:	4b05      	ldr	r3, [pc, #20]	@ (8005890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	0b5b      	lsrs	r3, r3, #13
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	4903      	ldr	r1, [pc, #12]	@ (8005894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005886:	5ccb      	ldrb	r3, [r1, r3]
 8005888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800588c:	4618      	mov	r0, r3
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40023800 	.word	0x40023800
 8005894:	0801c7bc 	.word	0x0801c7bc

08005898 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	220f      	movs	r2, #15
 80058a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80058a8:	4b12      	ldr	r3, [pc, #72]	@ (80058f4 <HAL_RCC_GetClockConfig+0x5c>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 0203 	and.w	r2, r3, #3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80058b4:	4b0f      	ldr	r3, [pc, #60]	@ (80058f4 <HAL_RCC_GetClockConfig+0x5c>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80058c0:	4b0c      	ldr	r3, [pc, #48]	@ (80058f4 <HAL_RCC_GetClockConfig+0x5c>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80058cc:	4b09      	ldr	r3, [pc, #36]	@ (80058f4 <HAL_RCC_GetClockConfig+0x5c>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	08db      	lsrs	r3, r3, #3
 80058d2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80058da:	4b07      	ldr	r3, [pc, #28]	@ (80058f8 <HAL_RCC_GetClockConfig+0x60>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 020f 	and.w	r2, r3, #15
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	601a      	str	r2, [r3, #0]
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	40023800 	.word	0x40023800
 80058f8:	40023c00 	.word	0x40023c00

080058fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e041      	b.n	8005992 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f839 	bl	800599a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3304      	adds	r3, #4
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f000 f9c0 	bl	8005cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d001      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e04e      	b.n	8005a66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a23      	ldr	r2, [pc, #140]	@ (8005a74 <HAL_TIM_Base_Start_IT+0xc4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d022      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x80>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f2:	d01d      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x80>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005a78 <HAL_TIM_Base_Start_IT+0xc8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d018      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x80>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1e      	ldr	r2, [pc, #120]	@ (8005a7c <HAL_TIM_Base_Start_IT+0xcc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d013      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x80>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8005a80 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00e      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x80>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1b      	ldr	r2, [pc, #108]	@ (8005a84 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d009      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x80>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a19      	ldr	r2, [pc, #100]	@ (8005a88 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d004      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x80>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a18      	ldr	r2, [pc, #96]	@ (8005a8c <HAL_TIM_Base_Start_IT+0xdc>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d111      	bne.n	8005a54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b06      	cmp	r3, #6
 8005a40:	d010      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f042 0201 	orr.w	r2, r2, #1
 8005a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a52:	e007      	b.n	8005a64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40010000 	.word	0x40010000
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40000800 	.word	0x40000800
 8005a80:	40000c00 	.word	0x40000c00
 8005a84:	40010400 	.word	0x40010400
 8005a88:	40014000 	.word	0x40014000
 8005a8c:	40001800 	.word	0x40001800

08005a90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d020      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01b      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0202 	mvn.w	r2, #2
 8005ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f8d2 	bl	8005c84 <HAL_TIM_IC_CaptureCallback>
 8005ae0:	e005      	b.n	8005aee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f8c4 	bl	8005c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f8d5 	bl	8005c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d020      	beq.n	8005b40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01b      	beq.n	8005b40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0204 	mvn.w	r2, #4
 8005b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2202      	movs	r2, #2
 8005b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f8ac 	bl	8005c84 <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f89e 	bl	8005c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f8af 	bl	8005c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d020      	beq.n	8005b8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d01b      	beq.n	8005b8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0208 	mvn.w	r2, #8
 8005b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2204      	movs	r2, #4
 8005b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f886 	bl	8005c84 <HAL_TIM_IC_CaptureCallback>
 8005b78:	e005      	b.n	8005b86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f878 	bl	8005c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f889 	bl	8005c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d020      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f003 0310 	and.w	r3, r3, #16
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01b      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0210 	mvn.w	r2, #16
 8005ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2208      	movs	r2, #8
 8005bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f860 	bl	8005c84 <HAL_TIM_IC_CaptureCallback>
 8005bc4:	e005      	b.n	8005bd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f852 	bl	8005c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f863 	bl	8005c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00c      	beq.n	8005bfc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0201 	mvn.w	r2, #1
 8005bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fb fa8e 	bl	8001118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00c      	beq.n	8005c20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d007      	beq.n	8005c20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f906 	bl	8005e2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00c      	beq.n	8005c44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d007      	beq.n	8005c44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f834 	bl	8005cac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00c      	beq.n	8005c68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d007      	beq.n	8005c68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f06f 0220 	mvn.w	r2, #32
 8005c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f8d8 	bl	8005e18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c68:	bf00      	nop
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a46      	ldr	r2, [pc, #280]	@ (8005dec <TIM_Base_SetConfig+0x12c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d013      	beq.n	8005d00 <TIM_Base_SetConfig+0x40>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cde:	d00f      	beq.n	8005d00 <TIM_Base_SetConfig+0x40>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a43      	ldr	r2, [pc, #268]	@ (8005df0 <TIM_Base_SetConfig+0x130>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00b      	beq.n	8005d00 <TIM_Base_SetConfig+0x40>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a42      	ldr	r2, [pc, #264]	@ (8005df4 <TIM_Base_SetConfig+0x134>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d007      	beq.n	8005d00 <TIM_Base_SetConfig+0x40>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a41      	ldr	r2, [pc, #260]	@ (8005df8 <TIM_Base_SetConfig+0x138>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_Base_SetConfig+0x40>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a40      	ldr	r2, [pc, #256]	@ (8005dfc <TIM_Base_SetConfig+0x13c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d108      	bne.n	8005d12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a35      	ldr	r2, [pc, #212]	@ (8005dec <TIM_Base_SetConfig+0x12c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d02b      	beq.n	8005d72 <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d20:	d027      	beq.n	8005d72 <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a32      	ldr	r2, [pc, #200]	@ (8005df0 <TIM_Base_SetConfig+0x130>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d023      	beq.n	8005d72 <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a31      	ldr	r2, [pc, #196]	@ (8005df4 <TIM_Base_SetConfig+0x134>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d01f      	beq.n	8005d72 <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a30      	ldr	r2, [pc, #192]	@ (8005df8 <TIM_Base_SetConfig+0x138>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d01b      	beq.n	8005d72 <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a2f      	ldr	r2, [pc, #188]	@ (8005dfc <TIM_Base_SetConfig+0x13c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d017      	beq.n	8005d72 <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a2e      	ldr	r2, [pc, #184]	@ (8005e00 <TIM_Base_SetConfig+0x140>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d013      	beq.n	8005d72 <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a2d      	ldr	r2, [pc, #180]	@ (8005e04 <TIM_Base_SetConfig+0x144>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00f      	beq.n	8005d72 <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a2c      	ldr	r2, [pc, #176]	@ (8005e08 <TIM_Base_SetConfig+0x148>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00b      	beq.n	8005d72 <TIM_Base_SetConfig+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8005e0c <TIM_Base_SetConfig+0x14c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d007      	beq.n	8005d72 <TIM_Base_SetConfig+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2a      	ldr	r2, [pc, #168]	@ (8005e10 <TIM_Base_SetConfig+0x150>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d003      	beq.n	8005d72 <TIM_Base_SetConfig+0xb2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a29      	ldr	r2, [pc, #164]	@ (8005e14 <TIM_Base_SetConfig+0x154>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d108      	bne.n	8005d84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a10      	ldr	r2, [pc, #64]	@ (8005dec <TIM_Base_SetConfig+0x12c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <TIM_Base_SetConfig+0xf8>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a12      	ldr	r2, [pc, #72]	@ (8005dfc <TIM_Base_SetConfig+0x13c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d103      	bne.n	8005dc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	691a      	ldr	r2, [r3, #16]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d105      	bne.n	8005dde <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f023 0201 	bic.w	r2, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	611a      	str	r2, [r3, #16]
  }
}
 8005dde:	bf00      	nop
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40010000 	.word	0x40010000
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40000800 	.word	0x40000800
 8005df8:	40000c00 	.word	0x40000c00
 8005dfc:	40010400 	.word	0x40010400
 8005e00:	40014000 	.word	0x40014000
 8005e04:	40014400 	.word	0x40014400
 8005e08:	40014800 	.word	0x40014800
 8005e0c:	40001800 	.word	0x40001800
 8005e10:	40001c00 	.word	0x40001c00
 8005e14:	40002000 	.word	0x40002000

08005e18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e042      	b.n	8005ed8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fb fd86 	bl	8001978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2224      	movs	r2, #36	@ 0x24
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f973 	bl	8006170 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695a      	ldr	r2, [r3, #20]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08a      	sub	sp, #40	@ 0x28
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	4613      	mov	r3, r2
 8005eee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d175      	bne.n	8005fec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <HAL_UART_Transmit+0x2c>
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e06e      	b.n	8005fee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2221      	movs	r2, #33	@ 0x21
 8005f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f1e:	f7fc fa37 	bl	8002390 <HAL_GetTick>
 8005f22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	88fa      	ldrh	r2, [r7, #6]
 8005f28:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	88fa      	ldrh	r2, [r7, #6]
 8005f2e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f38:	d108      	bne.n	8005f4c <HAL_UART_Transmit+0x6c>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d104      	bne.n	8005f4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	e003      	b.n	8005f54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f54:	e02e      	b.n	8005fb4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2180      	movs	r1, #128	@ 0x80
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f848 	bl	8005ff6 <UART_WaitOnFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e03a      	b.n	8005fee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10b      	bne.n	8005f96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	3302      	adds	r3, #2
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	e007      	b.n	8005fa6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	781a      	ldrb	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1cb      	bne.n	8005f56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2140      	movs	r1, #64	@ 0x40
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 f814 	bl	8005ff6 <UART_WaitOnFlagUntilTimeout>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e006      	b.n	8005fee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e000      	b.n	8005fee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005fec:	2302      	movs	r3, #2
  }
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3720      	adds	r7, #32
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b086      	sub	sp, #24
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	4613      	mov	r3, r2
 8006004:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006006:	e03b      	b.n	8006080 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600e:	d037      	beq.n	8006080 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006010:	f7fc f9be 	bl	8002390 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	6a3a      	ldr	r2, [r7, #32]
 800601c:	429a      	cmp	r2, r3
 800601e:	d302      	bcc.n	8006026 <UART_WaitOnFlagUntilTimeout+0x30>
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e03a      	b.n	80060a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d023      	beq.n	8006080 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b80      	cmp	r3, #128	@ 0x80
 800603c:	d020      	beq.n	8006080 <UART_WaitOnFlagUntilTimeout+0x8a>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b40      	cmp	r3, #64	@ 0x40
 8006042:	d01d      	beq.n	8006080 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b08      	cmp	r3, #8
 8006050:	d116      	bne.n	8006080 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f81d 	bl	80060a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2208      	movs	r2, #8
 8006072:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e00f      	b.n	80060a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	4013      	ands	r3, r2
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	429a      	cmp	r2, r3
 800608e:	bf0c      	ite	eq
 8006090:	2301      	moveq	r3, #1
 8006092:	2300      	movne	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	461a      	mov	r2, r3
 8006098:	79fb      	ldrb	r3, [r7, #7]
 800609a:	429a      	cmp	r2, r3
 800609c:	d0b4      	beq.n	8006008 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b095      	sub	sp, #84	@ 0x54
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	330c      	adds	r3, #12
 80060b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	330c      	adds	r3, #12
 80060ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80060d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e5      	bne.n	80060b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3314      	adds	r3, #20
 80060ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f023 0301 	bic.w	r3, r3, #1
 80060fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3314      	adds	r3, #20
 8006102:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006104:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006106:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800610a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e5      	bne.n	80060e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611c:	2b01      	cmp	r3, #1
 800611e:	d119      	bne.n	8006154 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	330c      	adds	r3, #12
 8006126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	e853 3f00 	ldrex	r3, [r3]
 800612e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f023 0310 	bic.w	r3, r3, #16
 8006136:	647b      	str	r3, [r7, #68]	@ 0x44
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	330c      	adds	r3, #12
 800613e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006140:	61ba      	str	r2, [r7, #24]
 8006142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006144:	6979      	ldr	r1, [r7, #20]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	613b      	str	r3, [r7, #16]
   return(result);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e5      	bne.n	8006120 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006162:	bf00      	nop
 8006164:	3754      	adds	r7, #84	@ 0x54
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006174:	b0c0      	sub	sp, #256	@ 0x100
 8006176:	af00      	add	r7, sp, #0
 8006178:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800617c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618c:	68d9      	ldr	r1, [r3, #12]
 800618e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	ea40 0301 	orr.w	r3, r0, r1
 8006198:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800619a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	431a      	orrs	r2, r3
 80061a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	431a      	orrs	r2, r3
 80061b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80061c8:	f021 010c 	bic.w	r1, r1, #12
 80061cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061d6:	430b      	orrs	r3, r1
 80061d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80061e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ea:	6999      	ldr	r1, [r3, #24]
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	ea40 0301 	orr.w	r3, r0, r1
 80061f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4b8f      	ldr	r3, [pc, #572]	@ (800643c <UART_SetConfig+0x2cc>)
 8006200:	429a      	cmp	r2, r3
 8006202:	d005      	beq.n	8006210 <UART_SetConfig+0xa0>
 8006204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b8d      	ldr	r3, [pc, #564]	@ (8006440 <UART_SetConfig+0x2d0>)
 800620c:	429a      	cmp	r2, r3
 800620e:	d104      	bne.n	800621a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006210:	f7ff fb2e 	bl	8005870 <HAL_RCC_GetPCLK2Freq>
 8006214:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006218:	e003      	b.n	8006222 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800621a:	f7ff fb15 	bl	8005848 <HAL_RCC_GetPCLK1Freq>
 800621e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800622c:	f040 810c 	bne.w	8006448 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006234:	2200      	movs	r2, #0
 8006236:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800623a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800623e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006242:	4622      	mov	r2, r4
 8006244:	462b      	mov	r3, r5
 8006246:	1891      	adds	r1, r2, r2
 8006248:	65b9      	str	r1, [r7, #88]	@ 0x58
 800624a:	415b      	adcs	r3, r3
 800624c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800624e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006252:	4621      	mov	r1, r4
 8006254:	eb12 0801 	adds.w	r8, r2, r1
 8006258:	4629      	mov	r1, r5
 800625a:	eb43 0901 	adc.w	r9, r3, r1
 800625e:	f04f 0200 	mov.w	r2, #0
 8006262:	f04f 0300 	mov.w	r3, #0
 8006266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800626a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800626e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006272:	4690      	mov	r8, r2
 8006274:	4699      	mov	r9, r3
 8006276:	4623      	mov	r3, r4
 8006278:	eb18 0303 	adds.w	r3, r8, r3
 800627c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006280:	462b      	mov	r3, r5
 8006282:	eb49 0303 	adc.w	r3, r9, r3
 8006286:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800628a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006296:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800629a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800629e:	460b      	mov	r3, r1
 80062a0:	18db      	adds	r3, r3, r3
 80062a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80062a4:	4613      	mov	r3, r2
 80062a6:	eb42 0303 	adc.w	r3, r2, r3
 80062aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80062ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80062b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80062b4:	f7f9 fff4 	bl	80002a0 <__aeabi_uldivmod>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4b61      	ldr	r3, [pc, #388]	@ (8006444 <UART_SetConfig+0x2d4>)
 80062be:	fba3 2302 	umull	r2, r3, r3, r2
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	011c      	lsls	r4, r3, #4
 80062c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80062d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80062d8:	4642      	mov	r2, r8
 80062da:	464b      	mov	r3, r9
 80062dc:	1891      	adds	r1, r2, r2
 80062de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80062e0:	415b      	adcs	r3, r3
 80062e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80062e8:	4641      	mov	r1, r8
 80062ea:	eb12 0a01 	adds.w	sl, r2, r1
 80062ee:	4649      	mov	r1, r9
 80062f0:	eb43 0b01 	adc.w	fp, r3, r1
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006300:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006308:	4692      	mov	sl, r2
 800630a:	469b      	mov	fp, r3
 800630c:	4643      	mov	r3, r8
 800630e:	eb1a 0303 	adds.w	r3, sl, r3
 8006312:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006316:	464b      	mov	r3, r9
 8006318:	eb4b 0303 	adc.w	r3, fp, r3
 800631c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800632c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006330:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006334:	460b      	mov	r3, r1
 8006336:	18db      	adds	r3, r3, r3
 8006338:	643b      	str	r3, [r7, #64]	@ 0x40
 800633a:	4613      	mov	r3, r2
 800633c:	eb42 0303 	adc.w	r3, r2, r3
 8006340:	647b      	str	r3, [r7, #68]	@ 0x44
 8006342:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006346:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800634a:	f7f9 ffa9 	bl	80002a0 <__aeabi_uldivmod>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4611      	mov	r1, r2
 8006354:	4b3b      	ldr	r3, [pc, #236]	@ (8006444 <UART_SetConfig+0x2d4>)
 8006356:	fba3 2301 	umull	r2, r3, r3, r1
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	2264      	movs	r2, #100	@ 0x64
 800635e:	fb02 f303 	mul.w	r3, r2, r3
 8006362:	1acb      	subs	r3, r1, r3
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800636a:	4b36      	ldr	r3, [pc, #216]	@ (8006444 <UART_SetConfig+0x2d4>)
 800636c:	fba3 2302 	umull	r2, r3, r3, r2
 8006370:	095b      	lsrs	r3, r3, #5
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006378:	441c      	add	r4, r3
 800637a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800637e:	2200      	movs	r2, #0
 8006380:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006384:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006388:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800638c:	4642      	mov	r2, r8
 800638e:	464b      	mov	r3, r9
 8006390:	1891      	adds	r1, r2, r2
 8006392:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006394:	415b      	adcs	r3, r3
 8006396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800639c:	4641      	mov	r1, r8
 800639e:	1851      	adds	r1, r2, r1
 80063a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80063a2:	4649      	mov	r1, r9
 80063a4:	414b      	adcs	r3, r1
 80063a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80063a8:	f04f 0200 	mov.w	r2, #0
 80063ac:	f04f 0300 	mov.w	r3, #0
 80063b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80063b4:	4659      	mov	r1, fp
 80063b6:	00cb      	lsls	r3, r1, #3
 80063b8:	4651      	mov	r1, sl
 80063ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063be:	4651      	mov	r1, sl
 80063c0:	00ca      	lsls	r2, r1, #3
 80063c2:	4610      	mov	r0, r2
 80063c4:	4619      	mov	r1, r3
 80063c6:	4603      	mov	r3, r0
 80063c8:	4642      	mov	r2, r8
 80063ca:	189b      	adds	r3, r3, r2
 80063cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063d0:	464b      	mov	r3, r9
 80063d2:	460a      	mov	r2, r1
 80063d4:	eb42 0303 	adc.w	r3, r2, r3
 80063d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80063ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063f0:	460b      	mov	r3, r1
 80063f2:	18db      	adds	r3, r3, r3
 80063f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063f6:	4613      	mov	r3, r2
 80063f8:	eb42 0303 	adc.w	r3, r2, r3
 80063fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006402:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006406:	f7f9 ff4b 	bl	80002a0 <__aeabi_uldivmod>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4b0d      	ldr	r3, [pc, #52]	@ (8006444 <UART_SetConfig+0x2d4>)
 8006410:	fba3 1302 	umull	r1, r3, r3, r2
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	2164      	movs	r1, #100	@ 0x64
 8006418:	fb01 f303 	mul.w	r3, r1, r3
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	3332      	adds	r3, #50	@ 0x32
 8006422:	4a08      	ldr	r2, [pc, #32]	@ (8006444 <UART_SetConfig+0x2d4>)
 8006424:	fba2 2303 	umull	r2, r3, r2, r3
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	f003 0207 	and.w	r2, r3, #7
 800642e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4422      	add	r2, r4
 8006436:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006438:	e106      	b.n	8006648 <UART_SetConfig+0x4d8>
 800643a:	bf00      	nop
 800643c:	40011000 	.word	0x40011000
 8006440:	40011400 	.word	0x40011400
 8006444:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800644c:	2200      	movs	r2, #0
 800644e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006452:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006456:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800645a:	4642      	mov	r2, r8
 800645c:	464b      	mov	r3, r9
 800645e:	1891      	adds	r1, r2, r2
 8006460:	6239      	str	r1, [r7, #32]
 8006462:	415b      	adcs	r3, r3
 8006464:	627b      	str	r3, [r7, #36]	@ 0x24
 8006466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800646a:	4641      	mov	r1, r8
 800646c:	1854      	adds	r4, r2, r1
 800646e:	4649      	mov	r1, r9
 8006470:	eb43 0501 	adc.w	r5, r3, r1
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	00eb      	lsls	r3, r5, #3
 800647e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006482:	00e2      	lsls	r2, r4, #3
 8006484:	4614      	mov	r4, r2
 8006486:	461d      	mov	r5, r3
 8006488:	4643      	mov	r3, r8
 800648a:	18e3      	adds	r3, r4, r3
 800648c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006490:	464b      	mov	r3, r9
 8006492:	eb45 0303 	adc.w	r3, r5, r3
 8006496:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800649a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	f04f 0300 	mov.w	r3, #0
 80064b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80064b6:	4629      	mov	r1, r5
 80064b8:	008b      	lsls	r3, r1, #2
 80064ba:	4621      	mov	r1, r4
 80064bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064c0:	4621      	mov	r1, r4
 80064c2:	008a      	lsls	r2, r1, #2
 80064c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80064c8:	f7f9 feea 	bl	80002a0 <__aeabi_uldivmod>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4b60      	ldr	r3, [pc, #384]	@ (8006654 <UART_SetConfig+0x4e4>)
 80064d2:	fba3 2302 	umull	r2, r3, r3, r2
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	011c      	lsls	r4, r3, #4
 80064da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80064e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80064ec:	4642      	mov	r2, r8
 80064ee:	464b      	mov	r3, r9
 80064f0:	1891      	adds	r1, r2, r2
 80064f2:	61b9      	str	r1, [r7, #24]
 80064f4:	415b      	adcs	r3, r3
 80064f6:	61fb      	str	r3, [r7, #28]
 80064f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064fc:	4641      	mov	r1, r8
 80064fe:	1851      	adds	r1, r2, r1
 8006500:	6139      	str	r1, [r7, #16]
 8006502:	4649      	mov	r1, r9
 8006504:	414b      	adcs	r3, r1
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006514:	4659      	mov	r1, fp
 8006516:	00cb      	lsls	r3, r1, #3
 8006518:	4651      	mov	r1, sl
 800651a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800651e:	4651      	mov	r1, sl
 8006520:	00ca      	lsls	r2, r1, #3
 8006522:	4610      	mov	r0, r2
 8006524:	4619      	mov	r1, r3
 8006526:	4603      	mov	r3, r0
 8006528:	4642      	mov	r2, r8
 800652a:	189b      	adds	r3, r3, r2
 800652c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006530:	464b      	mov	r3, r9
 8006532:	460a      	mov	r2, r1
 8006534:	eb42 0303 	adc.w	r3, r2, r3
 8006538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800653c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006546:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006554:	4649      	mov	r1, r9
 8006556:	008b      	lsls	r3, r1, #2
 8006558:	4641      	mov	r1, r8
 800655a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800655e:	4641      	mov	r1, r8
 8006560:	008a      	lsls	r2, r1, #2
 8006562:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006566:	f7f9 fe9b 	bl	80002a0 <__aeabi_uldivmod>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	4611      	mov	r1, r2
 8006570:	4b38      	ldr	r3, [pc, #224]	@ (8006654 <UART_SetConfig+0x4e4>)
 8006572:	fba3 2301 	umull	r2, r3, r3, r1
 8006576:	095b      	lsrs	r3, r3, #5
 8006578:	2264      	movs	r2, #100	@ 0x64
 800657a:	fb02 f303 	mul.w	r3, r2, r3
 800657e:	1acb      	subs	r3, r1, r3
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	3332      	adds	r3, #50	@ 0x32
 8006584:	4a33      	ldr	r2, [pc, #204]	@ (8006654 <UART_SetConfig+0x4e4>)
 8006586:	fba2 2303 	umull	r2, r3, r2, r3
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006590:	441c      	add	r4, r3
 8006592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006596:	2200      	movs	r2, #0
 8006598:	673b      	str	r3, [r7, #112]	@ 0x70
 800659a:	677a      	str	r2, [r7, #116]	@ 0x74
 800659c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80065a0:	4642      	mov	r2, r8
 80065a2:	464b      	mov	r3, r9
 80065a4:	1891      	adds	r1, r2, r2
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	415b      	adcs	r3, r3
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065b0:	4641      	mov	r1, r8
 80065b2:	1851      	adds	r1, r2, r1
 80065b4:	6039      	str	r1, [r7, #0]
 80065b6:	4649      	mov	r1, r9
 80065b8:	414b      	adcs	r3, r1
 80065ba:	607b      	str	r3, [r7, #4]
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	f04f 0300 	mov.w	r3, #0
 80065c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065c8:	4659      	mov	r1, fp
 80065ca:	00cb      	lsls	r3, r1, #3
 80065cc:	4651      	mov	r1, sl
 80065ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065d2:	4651      	mov	r1, sl
 80065d4:	00ca      	lsls	r2, r1, #3
 80065d6:	4610      	mov	r0, r2
 80065d8:	4619      	mov	r1, r3
 80065da:	4603      	mov	r3, r0
 80065dc:	4642      	mov	r2, r8
 80065de:	189b      	adds	r3, r3, r2
 80065e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065e2:	464b      	mov	r3, r9
 80065e4:	460a      	mov	r2, r1
 80065e6:	eb42 0303 	adc.w	r3, r2, r3
 80065ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80065f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006604:	4649      	mov	r1, r9
 8006606:	008b      	lsls	r3, r1, #2
 8006608:	4641      	mov	r1, r8
 800660a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800660e:	4641      	mov	r1, r8
 8006610:	008a      	lsls	r2, r1, #2
 8006612:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006616:	f7f9 fe43 	bl	80002a0 <__aeabi_uldivmod>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	4b0d      	ldr	r3, [pc, #52]	@ (8006654 <UART_SetConfig+0x4e4>)
 8006620:	fba3 1302 	umull	r1, r3, r3, r2
 8006624:	095b      	lsrs	r3, r3, #5
 8006626:	2164      	movs	r1, #100	@ 0x64
 8006628:	fb01 f303 	mul.w	r3, r1, r3
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	3332      	adds	r3, #50	@ 0x32
 8006632:	4a08      	ldr	r2, [pc, #32]	@ (8006654 <UART_SetConfig+0x4e4>)
 8006634:	fba2 2303 	umull	r2, r3, r2, r3
 8006638:	095b      	lsrs	r3, r3, #5
 800663a:	f003 020f 	and.w	r2, r3, #15
 800663e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4422      	add	r2, r4
 8006646:	609a      	str	r2, [r3, #8]
}
 8006648:	bf00      	nop
 800664a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800664e:	46bd      	mov	sp, r7
 8006650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006654:	51eb851f 	.word	0x51eb851f

08006658 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006658:	b5b0      	push	{r4, r5, r7, lr}
 800665a:	b08c      	sub	sp, #48	@ 0x30
 800665c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800665e:	4b1c      	ldr	r3, [pc, #112]	@ (80066d0 <MX_LWIP_Init+0x78>)
 8006660:	22c0      	movs	r2, #192	@ 0xc0
 8006662:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006664:	4b1a      	ldr	r3, [pc, #104]	@ (80066d0 <MX_LWIP_Init+0x78>)
 8006666:	22a8      	movs	r2, #168	@ 0xa8
 8006668:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800666a:	4b19      	ldr	r3, [pc, #100]	@ (80066d0 <MX_LWIP_Init+0x78>)
 800666c:	2201      	movs	r2, #1
 800666e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 130;
 8006670:	4b17      	ldr	r3, [pc, #92]	@ (80066d0 <MX_LWIP_Init+0x78>)
 8006672:	2282      	movs	r2, #130	@ 0x82
 8006674:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006676:	4b17      	ldr	r3, [pc, #92]	@ (80066d4 <MX_LWIP_Init+0x7c>)
 8006678:	22ff      	movs	r2, #255	@ 0xff
 800667a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800667c:	4b15      	ldr	r3, [pc, #84]	@ (80066d4 <MX_LWIP_Init+0x7c>)
 800667e:	22ff      	movs	r2, #255	@ 0xff
 8006680:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006682:	4b14      	ldr	r3, [pc, #80]	@ (80066d4 <MX_LWIP_Init+0x7c>)
 8006684:	22ff      	movs	r2, #255	@ 0xff
 8006686:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006688:	4b12      	ldr	r3, [pc, #72]	@ (80066d4 <MX_LWIP_Init+0x7c>)
 800668a:	2200      	movs	r2, #0
 800668c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800668e:	4b12      	ldr	r3, [pc, #72]	@ (80066d8 <MX_LWIP_Init+0x80>)
 8006690:	22c0      	movs	r2, #192	@ 0xc0
 8006692:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006694:	4b10      	ldr	r3, [pc, #64]	@ (80066d8 <MX_LWIP_Init+0x80>)
 8006696:	22a8      	movs	r2, #168	@ 0xa8
 8006698:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800669a:	4b0f      	ldr	r3, [pc, #60]	@ (80066d8 <MX_LWIP_Init+0x80>)
 800669c:	2201      	movs	r2, #1
 800669e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80066a0:	4b0d      	ldr	r3, [pc, #52]	@ (80066d8 <MX_LWIP_Init+0x80>)
 80066a2:	2201      	movs	r2, #1
 80066a4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */

  if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_RESET) {
 80066a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80066aa:	480c      	ldr	r0, [pc, #48]	@ (80066dc <MX_LWIP_Init+0x84>)
 80066ac:	f7fd fb8a 	bl	8003dc4 <HAL_GPIO_ReadPin>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d14b      	bne.n	800674e <MX_LWIP_Init+0xf6>
      // Botón no presionado
  	if (EEPROM_Read(1,0,IP_From_Eeprom,12) != HAL_OK){
 80066b6:	230c      	movs	r3, #12
 80066b8:	4a09      	ldr	r2, [pc, #36]	@ (80066e0 <MX_LWIP_Init+0x88>)
 80066ba:	2100      	movs	r1, #0
 80066bc:	2001      	movs	r0, #1
 80066be:	f7f9 ffed 	bl	800069c <EEPROM_Read>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00f      	beq.n	80066e8 <MX_LWIP_Init+0x90>
  		SendString("Error de lectura EEPROM en inicio \r");
 80066c8:	4806      	ldr	r0, [pc, #24]	@ (80066e4 <MX_LWIP_Init+0x8c>)
 80066ca:	f7fa fcb7 	bl	800103c <SendString>
 80066ce:	e03e      	b.n	800674e <MX_LWIP_Init+0xf6>
 80066d0:	20000b00 	.word	0x20000b00
 80066d4:	20000b04 	.word	0x20000b04
 80066d8:	20000b08 	.word	0x20000b08
 80066dc:	40020800 	.word	0x40020800
 80066e0:	200000b4 	.word	0x200000b4
 80066e4:	080191ec 	.word	0x080191ec
  	} else {
  	  IP_ADDRESS[0] = IP_From_Eeprom[0];
 80066e8:	4b96      	ldr	r3, [pc, #600]	@ (8006944 <MX_LWIP_Init+0x2ec>)
 80066ea:	781a      	ldrb	r2, [r3, #0]
 80066ec:	4b96      	ldr	r3, [pc, #600]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 80066ee:	701a      	strb	r2, [r3, #0]
  	  IP_ADDRESS[1] = IP_From_Eeprom[1];
 80066f0:	4b94      	ldr	r3, [pc, #592]	@ (8006944 <MX_LWIP_Init+0x2ec>)
 80066f2:	785a      	ldrb	r2, [r3, #1]
 80066f4:	4b94      	ldr	r3, [pc, #592]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 80066f6:	705a      	strb	r2, [r3, #1]
  	  IP_ADDRESS[2] = IP_From_Eeprom[2];
 80066f8:	4b92      	ldr	r3, [pc, #584]	@ (8006944 <MX_LWIP_Init+0x2ec>)
 80066fa:	789a      	ldrb	r2, [r3, #2]
 80066fc:	4b92      	ldr	r3, [pc, #584]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 80066fe:	709a      	strb	r2, [r3, #2]
  	  IP_ADDRESS[3] = IP_From_Eeprom[3];
 8006700:	4b90      	ldr	r3, [pc, #576]	@ (8006944 <MX_LWIP_Init+0x2ec>)
 8006702:	78da      	ldrb	r2, [r3, #3]
 8006704:	4b90      	ldr	r3, [pc, #576]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 8006706:	70da      	strb	r2, [r3, #3]
  	  NETMASK_ADDRESS[0] = IP_From_Eeprom[4];
 8006708:	4b8e      	ldr	r3, [pc, #568]	@ (8006944 <MX_LWIP_Init+0x2ec>)
 800670a:	791a      	ldrb	r2, [r3, #4]
 800670c:	4b8f      	ldr	r3, [pc, #572]	@ (800694c <MX_LWIP_Init+0x2f4>)
 800670e:	701a      	strb	r2, [r3, #0]
  	  NETMASK_ADDRESS[1] = IP_From_Eeprom[5];
 8006710:	4b8c      	ldr	r3, [pc, #560]	@ (8006944 <MX_LWIP_Init+0x2ec>)
 8006712:	795a      	ldrb	r2, [r3, #5]
 8006714:	4b8d      	ldr	r3, [pc, #564]	@ (800694c <MX_LWIP_Init+0x2f4>)
 8006716:	705a      	strb	r2, [r3, #1]
  	  NETMASK_ADDRESS[2] = IP_From_Eeprom[6];
 8006718:	4b8a      	ldr	r3, [pc, #552]	@ (8006944 <MX_LWIP_Init+0x2ec>)
 800671a:	799a      	ldrb	r2, [r3, #6]
 800671c:	4b8b      	ldr	r3, [pc, #556]	@ (800694c <MX_LWIP_Init+0x2f4>)
 800671e:	709a      	strb	r2, [r3, #2]
  	  NETMASK_ADDRESS[3] = IP_From_Eeprom[7];
 8006720:	4b88      	ldr	r3, [pc, #544]	@ (8006944 <MX_LWIP_Init+0x2ec>)
 8006722:	79da      	ldrb	r2, [r3, #7]
 8006724:	4b89      	ldr	r3, [pc, #548]	@ (800694c <MX_LWIP_Init+0x2f4>)
 8006726:	70da      	strb	r2, [r3, #3]
  	  GATEWAY_ADDRESS[0] = IP_From_Eeprom[8];
 8006728:	4b86      	ldr	r3, [pc, #536]	@ (8006944 <MX_LWIP_Init+0x2ec>)
 800672a:	7a1a      	ldrb	r2, [r3, #8]
 800672c:	4b88      	ldr	r3, [pc, #544]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 800672e:	701a      	strb	r2, [r3, #0]
  	  GATEWAY_ADDRESS[1] = IP_From_Eeprom[9];
 8006730:	4b84      	ldr	r3, [pc, #528]	@ (8006944 <MX_LWIP_Init+0x2ec>)
 8006732:	7a5a      	ldrb	r2, [r3, #9]
 8006734:	4b86      	ldr	r3, [pc, #536]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 8006736:	705a      	strb	r2, [r3, #1]
  	  GATEWAY_ADDRESS[2] = IP_From_Eeprom[10];
 8006738:	4b82      	ldr	r3, [pc, #520]	@ (8006944 <MX_LWIP_Init+0x2ec>)
 800673a:	7a9a      	ldrb	r2, [r3, #10]
 800673c:	4b84      	ldr	r3, [pc, #528]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 800673e:	709a      	strb	r2, [r3, #2]
  	  GATEWAY_ADDRESS[3] = IP_From_Eeprom[11];
 8006740:	4b80      	ldr	r3, [pc, #512]	@ (8006944 <MX_LWIP_Init+0x2ec>)
 8006742:	7ada      	ldrb	r2, [r3, #11]
 8006744:	4b82      	ldr	r3, [pc, #520]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 8006746:	70da      	strb	r2, [r3, #3]
  	SendString("Seteo de parámetros desde la EEPROM \r");
 8006748:	4882      	ldr	r0, [pc, #520]	@ (8006954 <MX_LWIP_Init+0x2fc>)
 800674a:	f7fa fc77 	bl	800103c <SendString>
  }

/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800674e:	2100      	movs	r1, #0
 8006750:	2000      	movs	r0, #0
 8006752:	f006 f8dd 	bl	800c910 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006756:	4b7c      	ldr	r3, [pc, #496]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	061a      	lsls	r2, r3, #24
 800675c:	4b7a      	ldr	r3, [pc, #488]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 800675e:	785b      	ldrb	r3, [r3, #1]
 8006760:	041b      	lsls	r3, r3, #16
 8006762:	431a      	orrs	r2, r3
 8006764:	4b78      	ldr	r3, [pc, #480]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 8006766:	789b      	ldrb	r3, [r3, #2]
 8006768:	021b      	lsls	r3, r3, #8
 800676a:	4313      	orrs	r3, r2
 800676c:	4a76      	ldr	r2, [pc, #472]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 800676e:	78d2      	ldrb	r2, [r2, #3]
 8006770:	4313      	orrs	r3, r2
 8006772:	061a      	lsls	r2, r3, #24
 8006774:	4b74      	ldr	r3, [pc, #464]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	0619      	lsls	r1, r3, #24
 800677a:	4b73      	ldr	r3, [pc, #460]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 800677c:	785b      	ldrb	r3, [r3, #1]
 800677e:	041b      	lsls	r3, r3, #16
 8006780:	4319      	orrs	r1, r3
 8006782:	4b71      	ldr	r3, [pc, #452]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 8006784:	789b      	ldrb	r3, [r3, #2]
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	430b      	orrs	r3, r1
 800678a:	496f      	ldr	r1, [pc, #444]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 800678c:	78c9      	ldrb	r1, [r1, #3]
 800678e:	430b      	orrs	r3, r1
 8006790:	021b      	lsls	r3, r3, #8
 8006792:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006796:	431a      	orrs	r2, r3
 8006798:	4b6b      	ldr	r3, [pc, #428]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	0619      	lsls	r1, r3, #24
 800679e:	4b6a      	ldr	r3, [pc, #424]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 80067a0:	785b      	ldrb	r3, [r3, #1]
 80067a2:	041b      	lsls	r3, r3, #16
 80067a4:	4319      	orrs	r1, r3
 80067a6:	4b68      	ldr	r3, [pc, #416]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 80067a8:	789b      	ldrb	r3, [r3, #2]
 80067aa:	021b      	lsls	r3, r3, #8
 80067ac:	430b      	orrs	r3, r1
 80067ae:	4966      	ldr	r1, [pc, #408]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 80067b0:	78c9      	ldrb	r1, [r1, #3]
 80067b2:	430b      	orrs	r3, r1
 80067b4:	0a1b      	lsrs	r3, r3, #8
 80067b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80067ba:	431a      	orrs	r2, r3
 80067bc:	4b62      	ldr	r3, [pc, #392]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	0619      	lsls	r1, r3, #24
 80067c2:	4b61      	ldr	r3, [pc, #388]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 80067c4:	785b      	ldrb	r3, [r3, #1]
 80067c6:	041b      	lsls	r3, r3, #16
 80067c8:	4319      	orrs	r1, r3
 80067ca:	4b5f      	ldr	r3, [pc, #380]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 80067cc:	789b      	ldrb	r3, [r3, #2]
 80067ce:	021b      	lsls	r3, r3, #8
 80067d0:	430b      	orrs	r3, r1
 80067d2:	495d      	ldr	r1, [pc, #372]	@ (8006948 <MX_LWIP_Init+0x2f0>)
 80067d4:	78c9      	ldrb	r1, [r1, #3]
 80067d6:	430b      	orrs	r3, r1
 80067d8:	0e1b      	lsrs	r3, r3, #24
 80067da:	4313      	orrs	r3, r2
 80067dc:	4a5e      	ldr	r2, [pc, #376]	@ (8006958 <MX_LWIP_Init+0x300>)
 80067de:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80067e0:	4b5a      	ldr	r3, [pc, #360]	@ (800694c <MX_LWIP_Init+0x2f4>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	061a      	lsls	r2, r3, #24
 80067e6:	4b59      	ldr	r3, [pc, #356]	@ (800694c <MX_LWIP_Init+0x2f4>)
 80067e8:	785b      	ldrb	r3, [r3, #1]
 80067ea:	041b      	lsls	r3, r3, #16
 80067ec:	431a      	orrs	r2, r3
 80067ee:	4b57      	ldr	r3, [pc, #348]	@ (800694c <MX_LWIP_Init+0x2f4>)
 80067f0:	789b      	ldrb	r3, [r3, #2]
 80067f2:	021b      	lsls	r3, r3, #8
 80067f4:	4313      	orrs	r3, r2
 80067f6:	4a55      	ldr	r2, [pc, #340]	@ (800694c <MX_LWIP_Init+0x2f4>)
 80067f8:	78d2      	ldrb	r2, [r2, #3]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	061a      	lsls	r2, r3, #24
 80067fe:	4b53      	ldr	r3, [pc, #332]	@ (800694c <MX_LWIP_Init+0x2f4>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	0619      	lsls	r1, r3, #24
 8006804:	4b51      	ldr	r3, [pc, #324]	@ (800694c <MX_LWIP_Init+0x2f4>)
 8006806:	785b      	ldrb	r3, [r3, #1]
 8006808:	041b      	lsls	r3, r3, #16
 800680a:	4319      	orrs	r1, r3
 800680c:	4b4f      	ldr	r3, [pc, #316]	@ (800694c <MX_LWIP_Init+0x2f4>)
 800680e:	789b      	ldrb	r3, [r3, #2]
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	430b      	orrs	r3, r1
 8006814:	494d      	ldr	r1, [pc, #308]	@ (800694c <MX_LWIP_Init+0x2f4>)
 8006816:	78c9      	ldrb	r1, [r1, #3]
 8006818:	430b      	orrs	r3, r1
 800681a:	021b      	lsls	r3, r3, #8
 800681c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006820:	431a      	orrs	r2, r3
 8006822:	4b4a      	ldr	r3, [pc, #296]	@ (800694c <MX_LWIP_Init+0x2f4>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	0619      	lsls	r1, r3, #24
 8006828:	4b48      	ldr	r3, [pc, #288]	@ (800694c <MX_LWIP_Init+0x2f4>)
 800682a:	785b      	ldrb	r3, [r3, #1]
 800682c:	041b      	lsls	r3, r3, #16
 800682e:	4319      	orrs	r1, r3
 8006830:	4b46      	ldr	r3, [pc, #280]	@ (800694c <MX_LWIP_Init+0x2f4>)
 8006832:	789b      	ldrb	r3, [r3, #2]
 8006834:	021b      	lsls	r3, r3, #8
 8006836:	430b      	orrs	r3, r1
 8006838:	4944      	ldr	r1, [pc, #272]	@ (800694c <MX_LWIP_Init+0x2f4>)
 800683a:	78c9      	ldrb	r1, [r1, #3]
 800683c:	430b      	orrs	r3, r1
 800683e:	0a1b      	lsrs	r3, r3, #8
 8006840:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006844:	431a      	orrs	r2, r3
 8006846:	4b41      	ldr	r3, [pc, #260]	@ (800694c <MX_LWIP_Init+0x2f4>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	0619      	lsls	r1, r3, #24
 800684c:	4b3f      	ldr	r3, [pc, #252]	@ (800694c <MX_LWIP_Init+0x2f4>)
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	041b      	lsls	r3, r3, #16
 8006852:	4319      	orrs	r1, r3
 8006854:	4b3d      	ldr	r3, [pc, #244]	@ (800694c <MX_LWIP_Init+0x2f4>)
 8006856:	789b      	ldrb	r3, [r3, #2]
 8006858:	021b      	lsls	r3, r3, #8
 800685a:	430b      	orrs	r3, r1
 800685c:	493b      	ldr	r1, [pc, #236]	@ (800694c <MX_LWIP_Init+0x2f4>)
 800685e:	78c9      	ldrb	r1, [r1, #3]
 8006860:	430b      	orrs	r3, r1
 8006862:	0e1b      	lsrs	r3, r3, #24
 8006864:	4313      	orrs	r3, r2
 8006866:	4a3d      	ldr	r2, [pc, #244]	@ (800695c <MX_LWIP_Init+0x304>)
 8006868:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800686a:	4b39      	ldr	r3, [pc, #228]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	061a      	lsls	r2, r3, #24
 8006870:	4b37      	ldr	r3, [pc, #220]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 8006872:	785b      	ldrb	r3, [r3, #1]
 8006874:	041b      	lsls	r3, r3, #16
 8006876:	431a      	orrs	r2, r3
 8006878:	4b35      	ldr	r3, [pc, #212]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 800687a:	789b      	ldrb	r3, [r3, #2]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	4313      	orrs	r3, r2
 8006880:	4a33      	ldr	r2, [pc, #204]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 8006882:	78d2      	ldrb	r2, [r2, #3]
 8006884:	4313      	orrs	r3, r2
 8006886:	061a      	lsls	r2, r3, #24
 8006888:	4b31      	ldr	r3, [pc, #196]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	0619      	lsls	r1, r3, #24
 800688e:	4b30      	ldr	r3, [pc, #192]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	041b      	lsls	r3, r3, #16
 8006894:	4319      	orrs	r1, r3
 8006896:	4b2e      	ldr	r3, [pc, #184]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 8006898:	789b      	ldrb	r3, [r3, #2]
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	430b      	orrs	r3, r1
 800689e:	492c      	ldr	r1, [pc, #176]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 80068a0:	78c9      	ldrb	r1, [r1, #3]
 80068a2:	430b      	orrs	r3, r1
 80068a4:	021b      	lsls	r3, r3, #8
 80068a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80068aa:	431a      	orrs	r2, r3
 80068ac:	4b28      	ldr	r3, [pc, #160]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	0619      	lsls	r1, r3, #24
 80068b2:	4b27      	ldr	r3, [pc, #156]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 80068b4:	785b      	ldrb	r3, [r3, #1]
 80068b6:	041b      	lsls	r3, r3, #16
 80068b8:	4319      	orrs	r1, r3
 80068ba:	4b25      	ldr	r3, [pc, #148]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 80068bc:	789b      	ldrb	r3, [r3, #2]
 80068be:	021b      	lsls	r3, r3, #8
 80068c0:	430b      	orrs	r3, r1
 80068c2:	4923      	ldr	r1, [pc, #140]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 80068c4:	78c9      	ldrb	r1, [r1, #3]
 80068c6:	430b      	orrs	r3, r1
 80068c8:	0a1b      	lsrs	r3, r3, #8
 80068ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80068ce:	431a      	orrs	r2, r3
 80068d0:	4b1f      	ldr	r3, [pc, #124]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	0619      	lsls	r1, r3, #24
 80068d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	041b      	lsls	r3, r3, #16
 80068dc:	4319      	orrs	r1, r3
 80068de:	4b1c      	ldr	r3, [pc, #112]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 80068e0:	789b      	ldrb	r3, [r3, #2]
 80068e2:	021b      	lsls	r3, r3, #8
 80068e4:	430b      	orrs	r3, r1
 80068e6:	491a      	ldr	r1, [pc, #104]	@ (8006950 <MX_LWIP_Init+0x2f8>)
 80068e8:	78c9      	ldrb	r1, [r1, #3]
 80068ea:	430b      	orrs	r3, r1
 80068ec:	0e1b      	lsrs	r3, r3, #24
 80068ee:	4313      	orrs	r3, r2
 80068f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006960 <MX_LWIP_Init+0x308>)
 80068f2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80068f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006964 <MX_LWIP_Init+0x30c>)
 80068f6:	9302      	str	r3, [sp, #8]
 80068f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006968 <MX_LWIP_Init+0x310>)
 80068fa:	9301      	str	r3, [sp, #4]
 80068fc:	2300      	movs	r3, #0
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	4b17      	ldr	r3, [pc, #92]	@ (8006960 <MX_LWIP_Init+0x308>)
 8006902:	4a16      	ldr	r2, [pc, #88]	@ (800695c <MX_LWIP_Init+0x304>)
 8006904:	4914      	ldr	r1, [pc, #80]	@ (8006958 <MX_LWIP_Init+0x300>)
 8006906:	4819      	ldr	r0, [pc, #100]	@ (800696c <MX_LWIP_Init+0x314>)
 8006908:	f006 fdcc 	bl	800d4a4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800690c:	4817      	ldr	r0, [pc, #92]	@ (800696c <MX_LWIP_Init+0x314>)
 800690e:	f006 ff7b 	bl	800d808 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006912:	4816      	ldr	r0, [pc, #88]	@ (800696c <MX_LWIP_Init+0x314>)
 8006914:	f006 ff88 	bl	800d828 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006918:	4915      	ldr	r1, [pc, #84]	@ (8006970 <MX_LWIP_Init+0x318>)
 800691a:	4814      	ldr	r0, [pc, #80]	@ (800696c <MX_LWIP_Init+0x314>)
 800691c:	f007 f886 	bl	800da2c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8006920:	4b14      	ldr	r3, [pc, #80]	@ (8006974 <MX_LWIP_Init+0x31c>)
 8006922:	1d3c      	adds	r4, r7, #4
 8006924:	461d      	mov	r5, r3
 8006926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800692a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800692e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8006932:	1d3b      	adds	r3, r7, #4
 8006934:	490d      	ldr	r1, [pc, #52]	@ (800696c <MX_LWIP_Init+0x314>)
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fd46 	bl	80073c8 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800693c:	bf00      	nop
 800693e:	3720      	adds	r7, #32
 8006940:	46bd      	mov	sp, r7
 8006942:	bdb0      	pop	{r4, r5, r7, pc}
 8006944:	200000b4 	.word	0x200000b4
 8006948:	20000b00 	.word	0x20000b00
 800694c:	20000b04 	.word	0x20000b04
 8006950:	20000b08 	.word	0x20000b08
 8006954:	08019210 	.word	0x08019210
 8006958:	20000af4 	.word	0x20000af4
 800695c:	20000af8 	.word	0x20000af8
 8006960:	20000afc 	.word	0x20000afc
 8006964:	0800c821 	.word	0x0800c821
 8006968:	08006e51 	.word	0x08006e51
 800696c:	20000ac0 	.word	0x20000ac0
 8006970:	08006979 	.word	0x08006979
 8006974:	08019240 	.word	0x08019240

08006978 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8006994:	4b04      	ldr	r3, [pc, #16]	@ (80069a8 <HAL_ETH_RxCpltCallback+0x1c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4618      	mov	r0, r3
 800699a:	f000 fe91 	bl	80076c0 <osSemaphoreRelease>
}
 800699e:	bf00      	nop
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	200055d8 	.word	0x200055d8

080069ac <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80069b4:	4b04      	ldr	r3, [pc, #16]	@ (80069c8 <HAL_ETH_TxCpltCallback+0x1c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fe81 	bl	80076c0 <osSemaphoreRelease>
}
 80069be:	bf00      	nop
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	200055dc 	.word	0x200055dc

080069cc <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7fc fc37 	bl	8003248 <HAL_ETH_GetDMAError>
 80069da:	4603      	mov	r3, r0
 80069dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069e0:	2b80      	cmp	r3, #128	@ 0x80
 80069e2:	d104      	bne.n	80069ee <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80069e4:	4b04      	ldr	r3, [pc, #16]	@ (80069f8 <HAL_ETH_ErrorCallback+0x2c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 fe69 	bl	80076c0 <osSemaphoreRelease>
  }
}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	200055d8 	.word	0x200055d8

080069fc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80069fc:	b5b0      	push	{r4, r5, r7, lr}
 80069fe:	b0ac      	sub	sp, #176	@ 0xb0
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8006a16:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006a1a:	2264      	movs	r2, #100	@ 0x64
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f011 f9bd 	bl	8017d9e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006a24:	4b90      	ldr	r3, [pc, #576]	@ (8006c68 <low_level_init+0x26c>)
 8006a26:	4a91      	ldr	r2, [pc, #580]	@ (8006c6c <low_level_init+0x270>)
 8006a28:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 8006a30:	2380      	movs	r3, #128	@ 0x80
 8006a32:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 8006a36:	23e1      	movs	r3, #225	@ 0xe1
 8006a38:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0x00;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0x00;
 8006a42:	2300      	movs	r3, #0
 8006a44:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x00;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 8006a4e:	4a86      	ldr	r2, [pc, #536]	@ (8006c68 <low_level_init+0x26c>)
 8006a50:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006a54:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006a56:	4b84      	ldr	r3, [pc, #528]	@ (8006c68 <low_level_init+0x26c>)
 8006a58:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a5c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006a5e:	4b82      	ldr	r3, [pc, #520]	@ (8006c68 <low_level_init+0x26c>)
 8006a60:	4a83      	ldr	r2, [pc, #524]	@ (8006c70 <low_level_init+0x274>)
 8006a62:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006a64:	4b80      	ldr	r3, [pc, #512]	@ (8006c68 <low_level_init+0x26c>)
 8006a66:	4a83      	ldr	r2, [pc, #524]	@ (8006c74 <low_level_init+0x278>)
 8006a68:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006a6a:	4b7f      	ldr	r3, [pc, #508]	@ (8006c68 <low_level_init+0x26c>)
 8006a6c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006a70:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006a72:	487d      	ldr	r0, [pc, #500]	@ (8006c68 <low_level_init+0x26c>)
 8006a74:	f7fb fd9e 	bl	80025b4 <HAL_ETH_Init>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006a7e:	2238      	movs	r2, #56	@ 0x38
 8006a80:	2100      	movs	r1, #0
 8006a82:	487d      	ldr	r0, [pc, #500]	@ (8006c78 <low_level_init+0x27c>)
 8006a84:	f011 f98b 	bl	8017d9e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006a88:	4b7b      	ldr	r3, [pc, #492]	@ (8006c78 <low_level_init+0x27c>)
 8006a8a:	2221      	movs	r2, #33	@ 0x21
 8006a8c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006a8e:	4b7a      	ldr	r3, [pc, #488]	@ (8006c78 <low_level_init+0x27c>)
 8006a90:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8006a94:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006a96:	4b78      	ldr	r3, [pc, #480]	@ (8006c78 <low_level_init+0x27c>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006a9c:	4877      	ldr	r0, [pc, #476]	@ (8006c7c <low_level_init+0x280>)
 8006a9e:	f006 fbbb 	bl	800d218 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2206      	movs	r2, #6
 8006aa6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006aaa:	4b6f      	ldr	r3, [pc, #444]	@ (8006c68 <low_level_init+0x26c>)
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	781a      	ldrb	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006ab6:	4b6c      	ldr	r3, [pc, #432]	@ (8006c68 <low_level_init+0x26c>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	785a      	ldrb	r2, [r3, #1]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006ac2:	4b69      	ldr	r3, [pc, #420]	@ (8006c68 <low_level_init+0x26c>)
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	789a      	ldrb	r2, [r3, #2]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006ace:	4b66      	ldr	r3, [pc, #408]	@ (8006c68 <low_level_init+0x26c>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	78da      	ldrb	r2, [r3, #3]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006ada:	4b63      	ldr	r3, [pc, #396]	@ (8006c68 <low_level_init+0x26c>)
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	791a      	ldrb	r2, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006ae6:	4b60      	ldr	r3, [pc, #384]	@ (8006c68 <low_level_init+0x26c>)
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	795a      	ldrb	r2, [r3, #5]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006af8:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006b00:	f043 030a 	orr.w	r3, r3, #10
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b10:	2300      	movs	r3, #0
 8006b12:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8006b14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006b18:	2101      	movs	r1, #1
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fd50 	bl	80075c0 <osSemaphoreCreate>
 8006b20:	4603      	mov	r3, r0
 8006b22:	4a57      	ldr	r2, [pc, #348]	@ (8006c80 <low_level_init+0x284>)
 8006b24:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8006b26:	2300      	movs	r3, #0
 8006b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8006b2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b32:	2101      	movs	r1, #1
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fd43 	bl	80075c0 <osSemaphoreCreate>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	4a51      	ldr	r2, [pc, #324]	@ (8006c84 <low_level_init+0x288>)
 8006b3e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8006b40:	4b4f      	ldr	r3, [pc, #316]	@ (8006c80 <low_level_init+0x284>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2100      	movs	r1, #0
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fd6c 	bl	8007624 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8006b4c:	4b4d      	ldr	r3, [pc, #308]	@ (8006c84 <low_level_init+0x288>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2100      	movs	r1, #0
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fd66 	bl	8007624 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006b58:	4b4b      	ldr	r3, [pc, #300]	@ (8006c88 <low_level_init+0x28c>)
 8006b5a:	f107 0408 	add.w	r4, r7, #8
 8006b5e:	461d      	mov	r5, r3
 8006b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006b68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006b6c:	f107 0308 	add.w	r3, r7, #8
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fc28 	bl	80073c8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006b78:	4944      	ldr	r1, [pc, #272]	@ (8006c8c <low_level_init+0x290>)
 8006b7a:	4845      	ldr	r0, [pc, #276]	@ (8006c90 <low_level_init+0x294>)
 8006b7c:	f7fb fa71 	bl	8002062 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8006b80:	4843      	ldr	r0, [pc, #268]	@ (8006c90 <low_level_init+0x294>)
 8006b82:	f7fb faa0 	bl	80020c6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006b86:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d165      	bne.n	8006c5a <low_level_init+0x25e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006b8e:	4840      	ldr	r0, [pc, #256]	@ (8006c90 <low_level_init+0x294>)
 8006b90:	f7fb fb41 	bl	8002216 <LAN8742_GetLinkState>
 8006b94:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006b98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	dc06      	bgt.n	8006bae <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f006 ff13 	bl	800d9cc <netif_set_link_down>
      netif_set_down(netif);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f006 feaa 	bl	800d900 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006bac:	e057      	b.n	8006c5e <low_level_init+0x262>
      switch (PHYLinkState)
 8006bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006bb2:	3b02      	subs	r3, #2
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d82b      	bhi.n	8006c10 <low_level_init+0x214>
 8006bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc0 <low_level_init+0x1c4>)
 8006bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbe:	bf00      	nop
 8006bc0:	08006bd1 	.word	0x08006bd1
 8006bc4:	08006be3 	.word	0x08006be3
 8006bc8:	08006bf3 	.word	0x08006bf3
 8006bcc:	08006c03 	.word	0x08006c03
        duplex = ETH_FULLDUPLEX_MODE;
 8006bd0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8006bd8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8006be0:	e01f      	b.n	8006c22 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 8006be2:	2300      	movs	r3, #0
 8006be4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8006be8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006bec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8006bf0:	e017      	b.n	8006c22 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 8006bf2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8006c00:	e00f      	b.n	8006c22 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 8006c02:	2300      	movs	r3, #0
 8006c04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8006c0e:	e008      	b.n	8006c22 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 8006c10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8006c18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8006c20:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006c22:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006c26:	4619      	mov	r1, r3
 8006c28:	480f      	ldr	r0, [pc, #60]	@ (8006c68 <low_level_init+0x26c>)
 8006c2a:	f7fc f9b3 	bl	8002f94 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8006c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c32:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 8006c34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006c38:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006c3a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006c3e:	4619      	mov	r1, r3
 8006c40:	4809      	ldr	r0, [pc, #36]	@ (8006c68 <low_level_init+0x26c>)
 8006c42:	f7fc fa91 	bl	8003168 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8006c46:	4808      	ldr	r0, [pc, #32]	@ (8006c68 <low_level_init+0x26c>)
 8006c48:	f7fb fd32 	bl	80026b0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f006 fdeb 	bl	800d828 <netif_set_up>
    netif_set_link_up(netif);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f006 fe86 	bl	800d964 <netif_set_link_up>
}
 8006c58:	e001      	b.n	8006c5e <low_level_init+0x262>
    Error_Handler();
 8006c5a:	f7fa fa6f 	bl	800113c <Error_Handler>
}
 8006c5e:	bf00      	nop
 8006c60:	37b0      	adds	r7, #176	@ 0xb0
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bdb0      	pop	{r4, r5, r7, pc}
 8006c66:	bf00      	nop
 8006c68:	200055e0 	.word	0x200055e0
 8006c6c:	40028000 	.word	0x40028000
 8006c70:	20005538 	.word	0x20005538
 8006c74:	20005498 	.word	0x20005498
 8006c78:	20005690 	.word	0x20005690
 8006c7c:	0801c7c4 	.word	0x0801c7c4
 8006c80:	200055d8 	.word	0x200055d8
 8006c84:	200055dc 	.word	0x200055dc
 8006c88:	08019264 	.word	0x08019264
 8006c8c:	2000000c 	.word	0x2000000c
 8006c90:	200056c8 	.word	0x200056c8

08006c94 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b092      	sub	sp, #72	@ 0x48
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006cac:	f107 030c 	add.w	r3, r7, #12
 8006cb0:	2230      	movs	r2, #48	@ 0x30
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f011 f872 	bl	8017d9e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006cba:	f107 030c 	add.w	r3, r7, #12
 8006cbe:	2230      	movs	r2, #48	@ 0x30
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f011 f86b 	bl	8017d9e <memset>

  for(q = p; q != NULL; q = q->next)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ccc:	e045      	b.n	8006d5a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006cce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d902      	bls.n	8006cda <low_level_output+0x46>
      return ERR_IF;
 8006cd4:	f06f 030b 	mvn.w	r3, #11
 8006cd8:	e06c      	b.n	8006db4 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8006cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cdc:	6859      	ldr	r1, [r3, #4]
 8006cde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	3348      	adds	r3, #72	@ 0x48
 8006cea:	443b      	add	r3, r7
 8006cec:	3b3c      	subs	r3, #60	@ 0x3c
 8006cee:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cf2:	895b      	ldrh	r3, [r3, #10]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	4413      	add	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	3348      	adds	r3, #72	@ 0x48
 8006d02:	443b      	add	r3, r7
 8006d04:	3b38      	subs	r3, #56	@ 0x38
 8006d06:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d011      	beq.n	8006d32 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d10:	1e5a      	subs	r2, r3, #1
 8006d12:	f107 000c 	add.w	r0, r7, #12
 8006d16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d18:	460b      	mov	r3, r1
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	440b      	add	r3, r1
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	18c1      	adds	r1, r0, r3
 8006d22:	4613      	mov	r3, r2
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	4413      	add	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	3348      	adds	r3, #72	@ 0x48
 8006d2c:	443b      	add	r3, r7
 8006d2e:	3b34      	subs	r3, #52	@ 0x34
 8006d30:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d109      	bne.n	8006d4e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	4413      	add	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	3348      	adds	r3, #72	@ 0x48
 8006d46:	443b      	add	r3, r7
 8006d48:	3b34      	subs	r3, #52	@ 0x34
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d50:	3301      	adds	r3, #1
 8006d52:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8006d54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1b6      	bne.n	8006cce <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	891b      	ldrh	r3, [r3, #8]
 8006d64:	461a      	mov	r2, r3
 8006d66:	4b15      	ldr	r3, [pc, #84]	@ (8006dbc <low_level_output+0x128>)
 8006d68:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006d6a:	4a14      	ldr	r2, [pc, #80]	@ (8006dbc <low_level_output+0x128>)
 8006d6c:	f107 030c 	add.w	r3, r7, #12
 8006d70:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006d72:	4a12      	ldr	r2, [pc, #72]	@ (8006dbc <low_level_output+0x128>)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8006d78:	6838      	ldr	r0, [r7, #0]
 8006d7a:	f007 faab 	bl	800e2d4 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8006d7e:	490f      	ldr	r1, [pc, #60]	@ (8006dbc <low_level_output+0x128>)
 8006d80:	480f      	ldr	r0, [pc, #60]	@ (8006dc0 <low_level_output+0x12c>)
 8006d82:	f7fb fda2 	bl	80028ca <HAL_ETH_Transmit_IT>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10e      	bne.n	8006daa <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8006d8c:	bf00      	nop
 8006d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc4 <low_level_output+0x130>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f04f 31ff 	mov.w	r1, #4294967295
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fc44 	bl	8007624 <osSemaphoreWait>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1f5      	bne.n	8006d8e <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8006da2:	4807      	ldr	r0, [pc, #28]	@ (8006dc0 <low_level_output+0x12c>)
 8006da4:	f7fb ff30 	bl	8002c08 <HAL_ETH_ReleaseTxPacket>
 8006da8:	e002      	b.n	8006db0 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8006daa:	6838      	ldr	r0, [r7, #0]
 8006dac:	f007 f9ec 	bl	800e188 <pbuf_free>
  }

  return errval;
 8006db0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3748      	adds	r7, #72	@ 0x48
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	20005690 	.word	0x20005690
 8006dc0:	200055e0 	.word	0x200055e0
 8006dc4:	200055dc 	.word	0x200055dc

08006dc8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006dd4:	4b07      	ldr	r3, [pc, #28]	@ (8006df4 <low_level_input+0x2c>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d105      	bne.n	8006de8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006ddc:	f107 030c 	add.w	r3, r7, #12
 8006de0:	4619      	mov	r1, r3
 8006de2:	4805      	ldr	r0, [pc, #20]	@ (8006df8 <low_level_input+0x30>)
 8006de4:	f7fb fdcd 	bl	8002982 <HAL_ETH_ReadData>
  }

  return p;
 8006de8:	68fb      	ldr	r3, [r7, #12]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	20005494 	.word	0x20005494
 8006df8:	200055e0 	.word	0x200055e0

08006dfc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8006e4c <ethernetif_input+0x50>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f04f 31ff 	mov.w	r1, #4294967295
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 fc05 	bl	8007624 <osSemaphoreWait>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1f5      	bne.n	8006e0c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006e20:	68b8      	ldr	r0, [r7, #8]
 8006e22:	f7ff ffd1 	bl	8006dc8 <low_level_input>
 8006e26:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	68b9      	ldr	r1, [r7, #8]
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	4798      	blx	r3
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d002      	beq.n	8006e44 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f007 f9a2 	bl	800e188 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1ea      	bne.n	8006e20 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006e4a:	e7df      	b.n	8006e0c <ethernetif_input+0x10>
 8006e4c:	200055d8 	.word	0x200055d8

08006e50 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <ethernetif_init+0x1c>
 8006e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006e98 <ethernetif_init+0x48>)
 8006e60:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8006e64:	490d      	ldr	r1, [pc, #52]	@ (8006e9c <ethernetif_init+0x4c>)
 8006e66:	480e      	ldr	r0, [pc, #56]	@ (8006ea0 <ethernetif_init+0x50>)
 8006e68:	f010 fefa 	bl	8017c60 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2273      	movs	r2, #115	@ 0x73
 8006e70:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2274      	movs	r2, #116	@ 0x74
 8006e78:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a09      	ldr	r2, [pc, #36]	@ (8006ea4 <ethernetif_init+0x54>)
 8006e80:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a08      	ldr	r2, [pc, #32]	@ (8006ea8 <ethernetif_init+0x58>)
 8006e86:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff fdb7 	bl	80069fc <low_level_init>

  return ERR_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	08019280 	.word	0x08019280
 8006e9c:	0801929c 	.word	0x0801929c
 8006ea0:	080192ac 	.word	0x080192ac
 8006ea4:	080159a9 	.word	0x080159a9
 8006ea8:	08006c95 	.word	0x08006c95

08006eac <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006eb8:	68f9      	ldr	r1, [r7, #12]
 8006eba:	4809      	ldr	r0, [pc, #36]	@ (8006ee0 <pbuf_free_custom+0x34>)
 8006ebc:	f006 fa9c 	bl	800d3f8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006ec0:	4b08      	ldr	r3, [pc, #32]	@ (8006ee4 <pbuf_free_custom+0x38>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d107      	bne.n	8006ed8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006ec8:	4b06      	ldr	r3, [pc, #24]	@ (8006ee4 <pbuf_free_custom+0x38>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006ece:	4b06      	ldr	r3, [pc, #24]	@ (8006ee8 <pbuf_free_custom+0x3c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fbf4 	bl	80076c0 <osSemaphoreRelease>
  }
}
 8006ed8:	bf00      	nop
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	0801c7c4 	.word	0x0801c7c4
 8006ee4:	20005494 	.word	0x20005494
 8006ee8:	200055d8 	.word	0x200055d8

08006eec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006ef0:	f7fb fa4e 	bl	8002390 <HAL_GetTick>
 8006ef4:	4603      	mov	r3, r0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08e      	sub	sp, #56	@ 0x38
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	605a      	str	r2, [r3, #4]
 8006f0e:	609a      	str	r2, [r3, #8]
 8006f10:	60da      	str	r2, [r3, #12]
 8006f12:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a59      	ldr	r2, [pc, #356]	@ (8007080 <HAL_ETH_MspInit+0x184>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	f040 80ac 	bne.w	8007078 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006f20:	2300      	movs	r3, #0
 8006f22:	623b      	str	r3, [r7, #32]
 8006f24:	4b57      	ldr	r3, [pc, #348]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f28:	4a56      	ldr	r2, [pc, #344]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006f2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006f2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f30:	4b54      	ldr	r3, [pc, #336]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f38:	623b      	str	r3, [r7, #32]
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61fb      	str	r3, [r7, #28]
 8006f40:	4b50      	ldr	r3, [pc, #320]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f44:	4a4f      	ldr	r2, [pc, #316]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006f46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f4c:	4b4d      	ldr	r3, [pc, #308]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f54:	61fb      	str	r3, [r7, #28]
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	2300      	movs	r3, #0
 8006f5a:	61bb      	str	r3, [r7, #24]
 8006f5c:	4b49      	ldr	r3, [pc, #292]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f60:	4a48      	ldr	r2, [pc, #288]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006f62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f68:	4b46      	ldr	r3, [pc, #280]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f70:	61bb      	str	r3, [r7, #24]
 8006f72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f74:	2300      	movs	r3, #0
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	4b42      	ldr	r3, [pc, #264]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7c:	4a41      	ldr	r2, [pc, #260]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006f7e:	f043 0304 	orr.w	r3, r3, #4
 8006f82:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f84:	4b3f      	ldr	r3, [pc, #252]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f90:	2300      	movs	r3, #0
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	4b3b      	ldr	r3, [pc, #236]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f98:	4a3a      	ldr	r2, [pc, #232]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006f9a:	f043 0301 	orr.w	r3, r3, #1
 8006f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fa0:	4b38      	ldr	r3, [pc, #224]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	613b      	str	r3, [r7, #16]
 8006faa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	4b34      	ldr	r3, [pc, #208]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb4:	4a33      	ldr	r2, [pc, #204]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006fb6:	f043 0302 	orr.w	r3, r3, #2
 8006fba:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fbc:	4b31      	ldr	r3, [pc, #196]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60bb      	str	r3, [r7, #8]
 8006fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd0:	4a2c      	ldr	r2, [pc, #176]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8007084 <HAL_ETH_MspInit+0x188>)
 8006fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe0:	60bb      	str	r3, [r7, #8]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006fe4:	2332      	movs	r3, #50	@ 0x32
 8006fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe8:	2302      	movs	r3, #2
 8006fea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fec:	2300      	movs	r3, #0
 8006fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006ff4:	230b      	movs	r3, #11
 8006ff6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ff8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4822      	ldr	r0, [pc, #136]	@ (8007088 <HAL_ETH_MspInit+0x18c>)
 8007000:	f7fc fd34 	bl	8003a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007004:	2386      	movs	r3, #134	@ 0x86
 8007006:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007008:	2302      	movs	r3, #2
 800700a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800700c:	2300      	movs	r3, #0
 800700e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007010:	2303      	movs	r3, #3
 8007012:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007014:	230b      	movs	r3, #11
 8007016:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800701c:	4619      	mov	r1, r3
 800701e:	481b      	ldr	r0, [pc, #108]	@ (800708c <HAL_ETH_MspInit+0x190>)
 8007020:	f7fc fd24 	bl	8003a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007024:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007028:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800702a:	2302      	movs	r3, #2
 800702c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800702e:	2300      	movs	r3, #0
 8007030:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007032:	2303      	movs	r3, #3
 8007034:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007036:	230b      	movs	r3, #11
 8007038:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800703a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800703e:	4619      	mov	r1, r3
 8007040:	4813      	ldr	r0, [pc, #76]	@ (8007090 <HAL_ETH_MspInit+0x194>)
 8007042:	f7fc fd13 	bl	8003a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8007046:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800704a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800704c:	2302      	movs	r3, #2
 800704e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007050:	2300      	movs	r3, #0
 8007052:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007054:	2303      	movs	r3, #3
 8007056:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007058:	230b      	movs	r3, #11
 800705a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800705c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007060:	4619      	mov	r1, r3
 8007062:	480c      	ldr	r0, [pc, #48]	@ (8007094 <HAL_ETH_MspInit+0x198>)
 8007064:	f7fc fd02 	bl	8003a6c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007068:	2200      	movs	r2, #0
 800706a:	2105      	movs	r1, #5
 800706c:	203d      	movs	r0, #61	@ 0x3d
 800706e:	f7fb fa77 	bl	8002560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007072:	203d      	movs	r0, #61	@ 0x3d
 8007074:	f7fb fa90 	bl	8002598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007078:	bf00      	nop
 800707a:	3738      	adds	r7, #56	@ 0x38
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	40028000 	.word	0x40028000
 8007084:	40023800 	.word	0x40023800
 8007088:	40020800 	.word	0x40020800
 800708c:	40020000 	.word	0x40020000
 8007090:	40020400 	.word	0x40020400
 8007094:	40021800 	.word	0x40021800

08007098 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800709c:	4802      	ldr	r0, [pc, #8]	@ (80070a8 <ETH_PHY_IO_Init+0x10>)
 800709e:	f7fc f87d 	bl	800319c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	200055e0 	.word	0x200055e0

080070ac <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
  return 0;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	68f9      	ldr	r1, [r7, #12]
 80070ce:	4807      	ldr	r0, [pc, #28]	@ (80070ec <ETH_PHY_IO_ReadReg+0x30>)
 80070d0:	f7fb fecc 	bl	8002e6c <HAL_ETH_ReadPHYRegister>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80070da:	f04f 33ff 	mov.w	r3, #4294967295
 80070de:	e000      	b.n	80070e2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	200055e0 	.word	0x200055e0

080070f0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	68f9      	ldr	r1, [r7, #12]
 8007102:	4807      	ldr	r0, [pc, #28]	@ (8007120 <ETH_PHY_IO_WriteReg+0x30>)
 8007104:	f7fb fefd 	bl	8002f02 <HAL_ETH_WritePHYRegister>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800710e:	f04f 33ff 	mov.w	r3, #4294967295
 8007112:	e000      	b.n	8007116 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	200055e0 	.word	0x200055e0

08007124 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007128:	f7fb f932 	bl	8002390 <HAL_GetTick>
 800712c:	4603      	mov	r3, r0
}
 800712e:	4618      	mov	r0, r3
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b0a0      	sub	sp, #128	@ 0x80
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800713c:	f107 0308 	add.w	r3, r7, #8
 8007140:	2264      	movs	r2, #100	@ 0x64
 8007142:	2100      	movs	r1, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f010 fe2a 	bl	8017d9e <memset>
  int32_t PHYLinkState = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007152:	2300      	movs	r3, #0
 8007154:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007156:	2300      	movs	r3, #0
 8007158:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800715e:	483a      	ldr	r0, [pc, #232]	@ (8007248 <ethernet_link_thread+0x114>)
 8007160:	f7fb f859 	bl	8002216 <LAN8742_GetLinkState>
 8007164:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007168:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800716c:	089b      	lsrs	r3, r3, #2
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00c      	beq.n	8007192 <ethernet_link_thread+0x5e>
 8007178:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800717a:	2b01      	cmp	r3, #1
 800717c:	dc09      	bgt.n	8007192 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800717e:	4833      	ldr	r0, [pc, #204]	@ (800724c <ethernet_link_thread+0x118>)
 8007180:	f7fb fb24 	bl	80027cc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8007184:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007186:	f006 fbbb 	bl	800d900 <netif_set_down>
    netif_set_link_down(netif);
 800718a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800718c:	f006 fc1e 	bl	800d9cc <netif_set_link_down>
 8007190:	e055      	b.n	800723e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007194:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b00      	cmp	r3, #0
 800719e:	d14e      	bne.n	800723e <ethernet_link_thread+0x10a>
 80071a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	dd4b      	ble.n	800723e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80071a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071a8:	3b02      	subs	r3, #2
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d82a      	bhi.n	8007204 <ethernet_link_thread+0xd0>
 80071ae:	a201      	add	r2, pc, #4	@ (adr r2, 80071b4 <ethernet_link_thread+0x80>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	080071c5 	.word	0x080071c5
 80071b8:	080071d7 	.word	0x080071d7
 80071bc:	080071e7 	.word	0x080071e7
 80071c0:	080071f7 	.word	0x080071f7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80071c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80071c8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80071ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80071ce:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80071d0:	2301      	movs	r3, #1
 80071d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80071d4:	e017      	b.n	8007206 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80071d6:	2300      	movs	r3, #0
 80071d8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80071da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80071de:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80071e0:	2301      	movs	r3, #1
 80071e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80071e4:	e00f      	b.n	8007206 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80071e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80071ea:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80071ec:	2300      	movs	r3, #0
 80071ee:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80071f0:	2301      	movs	r3, #1
 80071f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80071f4:	e007      	b.n	8007206 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80071f6:	2300      	movs	r3, #0
 80071f8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80071fa:	2300      	movs	r3, #0
 80071fc:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80071fe:	2301      	movs	r3, #1
 8007200:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007202:	e000      	b.n	8007206 <ethernet_link_thread+0xd2>
    default:
      break;
 8007204:	bf00      	nop
    }

    if(linkchanged)
 8007206:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007208:	2b00      	cmp	r3, #0
 800720a:	d018      	beq.n	800723e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800720c:	f107 0308 	add.w	r3, r7, #8
 8007210:	4619      	mov	r1, r3
 8007212:	480e      	ldr	r0, [pc, #56]	@ (800724c <ethernet_link_thread+0x118>)
 8007214:	f7fb febe 	bl	8002f94 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007218:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800721a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800721c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800721e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007220:	f107 0308 	add.w	r3, r7, #8
 8007224:	4619      	mov	r1, r3
 8007226:	4809      	ldr	r0, [pc, #36]	@ (800724c <ethernet_link_thread+0x118>)
 8007228:	f7fb ff9e 	bl	8003168 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800722c:	4807      	ldr	r0, [pc, #28]	@ (800724c <ethernet_link_thread+0x118>)
 800722e:	f7fb fa3f 	bl	80026b0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8007232:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007234:	f006 faf8 	bl	800d828 <netif_set_up>
      netif_set_link_up(netif);
 8007238:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800723a:	f006 fb93 	bl	800d964 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800723e:	2064      	movs	r0, #100	@ 0x64
 8007240:	f000 f90e 	bl	8007460 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007244:	e78b      	b.n	800715e <ethernet_link_thread+0x2a>
 8007246:	bf00      	nop
 8007248:	200056c8 	.word	0x200056c8
 800724c:	200055e0 	.word	0x200055e0

08007250 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af02      	add	r7, sp, #8
 8007256:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007258:	4812      	ldr	r0, [pc, #72]	@ (80072a4 <HAL_ETH_RxAllocateCallback+0x54>)
 800725a:	f006 f859 	bl	800d310 <memp_malloc_pool>
 800725e:	60f8      	str	r0, [r7, #12]
  if (p)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d014      	beq.n	8007290 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f103 0220 	add.w	r2, r3, #32
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4a0d      	ldr	r2, [pc, #52]	@ (80072a8 <HAL_ETH_RxAllocateCallback+0x58>)
 8007274:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800727e:	9201      	str	r2, [sp, #4]
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2241      	movs	r2, #65	@ 0x41
 8007286:	2100      	movs	r1, #0
 8007288:	2000      	movs	r0, #0
 800728a:	f006 fdc3 	bl	800de14 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800728e:	e005      	b.n	800729c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007290:	4b06      	ldr	r3, [pc, #24]	@ (80072ac <HAL_ETH_RxAllocateCallback+0x5c>)
 8007292:	2201      	movs	r2, #1
 8007294:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]
}
 800729c:	bf00      	nop
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	0801c7c4 	.word	0x0801c7c4
 80072a8:	08006ead 	.word	0x08006ead
 80072ac:	20005494 	.word	0x20005494

080072b0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b089      	sub	sp, #36	@ 0x24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3b20      	subs	r3, #32
 80072ce:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	2200      	movs	r2, #0
 80072da:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	887a      	ldrh	r2, [r7, #2]
 80072e0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d103      	bne.n	80072f2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	69fa      	ldr	r2, [r7, #28]
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	e003      	b.n	80072fa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69fa      	ldr	r2, [r7, #28]
 80072f8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	69fa      	ldr	r2, [r7, #28]
 80072fe:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	61fb      	str	r3, [r7, #28]
 8007306:	e009      	b.n	800731c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	891a      	ldrh	r2, [r3, #8]
 800730c:	887b      	ldrh	r3, [r7, #2]
 800730e:	4413      	add	r3, r2
 8007310:	b29a      	uxth	r2, r3
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	61fb      	str	r3, [r7, #28]
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1f2      	bne.n	8007308 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007322:	bf00      	nop
 8007324:	bf00      	nop
 8007326:	3724      	adds	r7, #36	@ 0x24
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f006 ff25 	bl	800e188 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800733e:	bf00      	nop
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007346:	b480      	push	{r7}
 8007348:	b085      	sub	sp, #20
 800734a:	af00      	add	r7, sp, #0
 800734c:	4603      	mov	r3, r0
 800734e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007354:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007358:	2b84      	cmp	r3, #132	@ 0x84
 800735a:	d005      	beq.n	8007368 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800735c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	3303      	adds	r3, #3
 8007366:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007368:	68fb      	ldr	r3, [r7, #12]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800737c:	f3ef 8305 	mrs	r3, IPSR
 8007380:	607b      	str	r3, [r7, #4]
  return(result);
 8007382:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007384:	2b00      	cmp	r3, #0
 8007386:	bf14      	ite	ne
 8007388:	2301      	movne	r3, #1
 800738a:	2300      	moveq	r3, #0
 800738c:	b2db      	uxtb	r3, r3
}
 800738e:	4618      	mov	r0, r3
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800739e:	f001 fd5f 	bl	8008e60 <vTaskStartScheduler>
  
  return osOK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80073ac:	f7ff ffe3 	bl	8007376 <inHandlerMode>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80073b6:	f001 fe79 	bl	80090ac <xTaskGetTickCountFromISR>
 80073ba:	4603      	mov	r3, r0
 80073bc:	e002      	b.n	80073c4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80073be:	f001 fe65 	bl	800908c <xTaskGetTickCount>
 80073c2:	4603      	mov	r3, r0
  }
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80073c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ca:	b089      	sub	sp, #36	@ 0x24
 80073cc:	af04      	add	r7, sp, #16
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d020      	beq.n	800741c <osThreadCreate+0x54>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d01c      	beq.n	800741c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685c      	ldr	r4, [r3, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691e      	ldr	r6, [r3, #16]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff ffa6 	bl	8007346 <makeFreeRtosPriority>
 80073fa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007404:	9202      	str	r2, [sp, #8]
 8007406:	9301      	str	r3, [sp, #4]
 8007408:	9100      	str	r1, [sp, #0]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	4632      	mov	r2, r6
 800740e:	4629      	mov	r1, r5
 8007410:	4620      	mov	r0, r4
 8007412:	f001 fb3f 	bl	8008a94 <xTaskCreateStatic>
 8007416:	4603      	mov	r3, r0
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	e01c      	b.n	8007456 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685c      	ldr	r4, [r3, #4]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007428:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007430:	4618      	mov	r0, r3
 8007432:	f7ff ff88 	bl	8007346 <makeFreeRtosPriority>
 8007436:	4602      	mov	r2, r0
 8007438:	f107 030c 	add.w	r3, r7, #12
 800743c:	9301      	str	r3, [sp, #4]
 800743e:	9200      	str	r2, [sp, #0]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	4632      	mov	r2, r6
 8007444:	4629      	mov	r1, r5
 8007446:	4620      	mov	r0, r4
 8007448:	f001 fb84 	bl	8008b54 <xTaskCreate>
 800744c:	4603      	mov	r3, r0
 800744e:	2b01      	cmp	r3, #1
 8007450:	d001      	beq.n	8007456 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007452:	2300      	movs	r3, #0
 8007454:	e000      	b.n	8007458 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007456:	68fb      	ldr	r3, [r7, #12]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007460 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <osDelay+0x16>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	e000      	b.n	8007478 <osDelay+0x18>
 8007476:	2301      	movs	r3, #1
 8007478:	4618      	mov	r0, r3
 800747a:	f001 fcbb 	bl	8008df4 <vTaskDelay>
  
  return osOK;
 800747e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d007      	beq.n	80074a8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	4619      	mov	r1, r3
 800749e:	2001      	movs	r0, #1
 80074a0:	f000 fc85 	bl	8007dae <xQueueCreateMutexStatic>
 80074a4:	4603      	mov	r3, r0
 80074a6:	e003      	b.n	80074b0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80074a8:	2001      	movs	r0, #1
 80074aa:	f000 fc68 	bl	8007d7e <xQueueCreateMutex>
 80074ae:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80074c2:	2300      	movs	r3, #0
 80074c4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <osMutexWait+0x18>
    return osErrorParameter;
 80074cc:	2380      	movs	r3, #128	@ 0x80
 80074ce:	e03a      	b.n	8007546 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074da:	d103      	bne.n	80074e4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80074dc:	f04f 33ff 	mov.w	r3, #4294967295
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	e009      	b.n	80074f8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d006      	beq.n	80074f8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <osMutexWait+0x40>
      ticks = 1;
 80074f4:	2301      	movs	r3, #1
 80074f6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80074f8:	f7ff ff3d 	bl	8007376 <inHandlerMode>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d017      	beq.n	8007532 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007502:	f107 0308 	add.w	r3, r7, #8
 8007506:	461a      	mov	r2, r3
 8007508:	2100      	movs	r1, #0
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 f88c 	bl	8008628 <xQueueReceiveFromISR>
 8007510:	4603      	mov	r3, r0
 8007512:	2b01      	cmp	r3, #1
 8007514:	d001      	beq.n	800751a <osMutexWait+0x62>
      return osErrorOS;
 8007516:	23ff      	movs	r3, #255	@ 0xff
 8007518:	e015      	b.n	8007546 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d011      	beq.n	8007544 <osMutexWait+0x8c>
 8007520:	4b0b      	ldr	r3, [pc, #44]	@ (8007550 <osMutexWait+0x98>)
 8007522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	e008      	b.n	8007544 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007532:	68f9      	ldr	r1, [r7, #12]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 ff67 	bl	8008408 <xQueueSemaphoreTake>
 800753a:	4603      	mov	r3, r0
 800753c:	2b01      	cmp	r3, #1
 800753e:	d001      	beq.n	8007544 <osMutexWait+0x8c>
    return osErrorOS;
 8007540:	23ff      	movs	r3, #255	@ 0xff
 8007542:	e000      	b.n	8007546 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	e000ed04 	.word	0xe000ed04

08007554 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800755c:	2300      	movs	r3, #0
 800755e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007560:	2300      	movs	r3, #0
 8007562:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007564:	f7ff ff07 	bl	8007376 <inHandlerMode>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d016      	beq.n	800759c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800756e:	f107 0308 	add.w	r3, r7, #8
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fdd5 	bl	8008124 <xQueueGiveFromISR>
 800757a:	4603      	mov	r3, r0
 800757c:	2b01      	cmp	r3, #1
 800757e:	d001      	beq.n	8007584 <osMutexRelease+0x30>
      return osErrorOS;
 8007580:	23ff      	movs	r3, #255	@ 0xff
 8007582:	e017      	b.n	80075b4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d013      	beq.n	80075b2 <osMutexRelease+0x5e>
 800758a:	4b0c      	ldr	r3, [pc, #48]	@ (80075bc <osMutexRelease+0x68>)
 800758c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	e00a      	b.n	80075b2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800759c:	2300      	movs	r3, #0
 800759e:	2200      	movs	r2, #0
 80075a0:	2100      	movs	r1, #0
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fc1e 	bl	8007de4 <xQueueGenericSend>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d001      	beq.n	80075b2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80075ae:	23ff      	movs	r3, #255	@ 0xff
 80075b0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80075b2:	68fb      	ldr	r3, [r7, #12]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	e000ed04 	.word	0xe000ed04

080075c0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af02      	add	r7, sp, #8
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00f      	beq.n	80075f2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d10a      	bne.n	80075ee <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	2203      	movs	r2, #3
 80075de:	9200      	str	r2, [sp, #0]
 80075e0:	2200      	movs	r2, #0
 80075e2:	2100      	movs	r1, #0
 80075e4:	2001      	movs	r0, #1
 80075e6:	f000 fad9 	bl	8007b9c <xQueueGenericCreateStatic>
 80075ea:	4603      	mov	r3, r0
 80075ec:	e016      	b.n	800761c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	e014      	b.n	800761c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d110      	bne.n	800761a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80075f8:	2203      	movs	r2, #3
 80075fa:	2100      	movs	r1, #0
 80075fc:	2001      	movs	r0, #1
 80075fe:	f000 fb4a 	bl	8007c96 <xQueueGenericCreate>
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d005      	beq.n	8007616 <osSemaphoreCreate+0x56>
 800760a:	2300      	movs	r3, #0
 800760c:	2200      	movs	r2, #0
 800760e:	2100      	movs	r1, #0
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 fbe7 	bl	8007de4 <xQueueGenericSend>
      return sema;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	e000      	b.n	800761c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800761a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800762e:	2300      	movs	r3, #0
 8007630:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007638:	2380      	movs	r3, #128	@ 0x80
 800763a:	e03a      	b.n	80076b2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007646:	d103      	bne.n	8007650 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007648:	f04f 33ff 	mov.w	r3, #4294967295
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	e009      	b.n	8007664 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d006      	beq.n	8007664 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <osSemaphoreWait+0x40>
      ticks = 1;
 8007660:	2301      	movs	r3, #1
 8007662:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007664:	f7ff fe87 	bl	8007376 <inHandlerMode>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d017      	beq.n	800769e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800766e:	f107 0308 	add.w	r3, r7, #8
 8007672:	461a      	mov	r2, r3
 8007674:	2100      	movs	r1, #0
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 ffd6 	bl	8008628 <xQueueReceiveFromISR>
 800767c:	4603      	mov	r3, r0
 800767e:	2b01      	cmp	r3, #1
 8007680:	d001      	beq.n	8007686 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007682:	23ff      	movs	r3, #255	@ 0xff
 8007684:	e015      	b.n	80076b2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d011      	beq.n	80076b0 <osSemaphoreWait+0x8c>
 800768c:	4b0b      	ldr	r3, [pc, #44]	@ (80076bc <osSemaphoreWait+0x98>)
 800768e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	e008      	b.n	80076b0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800769e:	68f9      	ldr	r1, [r7, #12]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 feb1 	bl	8008408 <xQueueSemaphoreTake>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d001      	beq.n	80076b0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80076ac:	23ff      	movs	r3, #255	@ 0xff
 80076ae:	e000      	b.n	80076b2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80076d0:	f7ff fe51 	bl	8007376 <inHandlerMode>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d016      	beq.n	8007708 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80076da:	f107 0308 	add.w	r3, r7, #8
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fd1f 	bl	8008124 <xQueueGiveFromISR>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d001      	beq.n	80076f0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80076ec:	23ff      	movs	r3, #255	@ 0xff
 80076ee:	e017      	b.n	8007720 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d013      	beq.n	800771e <osSemaphoreRelease+0x5e>
 80076f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007728 <osSemaphoreRelease+0x68>)
 80076f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	e00a      	b.n	800771e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007708:	2300      	movs	r3, #0
 800770a:	2200      	movs	r2, #0
 800770c:	2100      	movs	r1, #0
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fb68 	bl	8007de4 <xQueueGenericSend>
 8007714:	4603      	mov	r3, r0
 8007716:	2b01      	cmp	r3, #1
 8007718:	d001      	beq.n	800771e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800771a:	23ff      	movs	r3, #255	@ 0xff
 800771c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800771e:	68fb      	ldr	r3, [r7, #12]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	e000ed04 	.word	0xe000ed04

0800772c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007734:	f7ff fe1f 	bl	8007376 <inHandlerMode>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800773e:	2382      	movs	r3, #130	@ 0x82
 8007740:	e003      	b.n	800774a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f001 f830 	bl	80087a8 <vQueueDelete>

  return osOK; 
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007752:	b590      	push	{r4, r7, lr}
 8007754:	b085      	sub	sp, #20
 8007756:	af02      	add	r7, sp, #8
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d011      	beq.n	8007788 <osMessageCreate+0x36>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00d      	beq.n	8007788 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6859      	ldr	r1, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	2400      	movs	r4, #0
 800777e:	9400      	str	r4, [sp, #0]
 8007780:	f000 fa0c 	bl	8007b9c <xQueueGenericCreateStatic>
 8007784:	4603      	mov	r3, r0
 8007786:	e008      	b.n	800779a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6818      	ldr	r0, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	4619      	mov	r1, r3
 8007794:	f000 fa7f 	bl	8007c96 <xQueueGenericCreate>
 8007798:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800779a:	4618      	mov	r0, r3
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd90      	pop	{r4, r7, pc}
	...

080077a4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80077b0:	2300      	movs	r3, #0
 80077b2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <osMessagePut+0x1e>
    ticks = 1;
 80077be:	2301      	movs	r3, #1
 80077c0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80077c2:	f7ff fdd8 	bl	8007376 <inHandlerMode>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d018      	beq.n	80077fe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80077cc:	f107 0210 	add.w	r2, r7, #16
 80077d0:	f107 0108 	add.w	r1, r7, #8
 80077d4:	2300      	movs	r3, #0
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 fc06 	bl	8007fe8 <xQueueGenericSendFromISR>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d001      	beq.n	80077e6 <osMessagePut+0x42>
      return osErrorOS;
 80077e2:	23ff      	movs	r3, #255	@ 0xff
 80077e4:	e018      	b.n	8007818 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d014      	beq.n	8007816 <osMessagePut+0x72>
 80077ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007820 <osMessagePut+0x7c>)
 80077ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	e00b      	b.n	8007816 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80077fe:	f107 0108 	add.w	r1, r7, #8
 8007802:	2300      	movs	r3, #0
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 faec 	bl	8007de4 <xQueueGenericSend>
 800780c:	4603      	mov	r3, r0
 800780e:	2b01      	cmp	r3, #1
 8007810:	d001      	beq.n	8007816 <osMessagePut+0x72>
      return osErrorOS;
 8007812:	23ff      	movs	r3, #255	@ 0xff
 8007814:	e000      	b.n	8007818 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	e000ed04 	.word	0xe000ed04

08007824 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007824:	b590      	push	{r4, r7, lr}
 8007826:	b08b      	sub	sp, #44	@ 0x2c
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007834:	2300      	movs	r3, #0
 8007836:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10a      	bne.n	8007854 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800783e:	2380      	movs	r3, #128	@ 0x80
 8007840:	617b      	str	r3, [r7, #20]
    return event;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	461c      	mov	r4, r3
 8007846:	f107 0314 	add.w	r3, r7, #20
 800784a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800784e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007852:	e054      	b.n	80078fe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007854:	2300      	movs	r3, #0
 8007856:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007862:	d103      	bne.n	800786c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007864:	f04f 33ff 	mov.w	r3, #4294967295
 8007868:	627b      	str	r3, [r7, #36]	@ 0x24
 800786a:	e009      	b.n	8007880 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d006      	beq.n	8007880 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8007876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <osMessageGet+0x5c>
      ticks = 1;
 800787c:	2301      	movs	r3, #1
 800787e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007880:	f7ff fd79 	bl	8007376 <inHandlerMode>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01c      	beq.n	80078c4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800788a:	f107 0220 	add.w	r2, r7, #32
 800788e:	f107 0314 	add.w	r3, r7, #20
 8007892:	3304      	adds	r3, #4
 8007894:	4619      	mov	r1, r3
 8007896:	68b8      	ldr	r0, [r7, #8]
 8007898:	f000 fec6 	bl	8008628 <xQueueReceiveFromISR>
 800789c:	4603      	mov	r3, r0
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d102      	bne.n	80078a8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80078a2:	2310      	movs	r3, #16
 80078a4:	617b      	str	r3, [r7, #20]
 80078a6:	e001      	b.n	80078ac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d01d      	beq.n	80078ee <osMessageGet+0xca>
 80078b2:	4b15      	ldr	r3, [pc, #84]	@ (8007908 <osMessageGet+0xe4>)
 80078b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	e014      	b.n	80078ee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80078c4:	f107 0314 	add.w	r3, r7, #20
 80078c8:	3304      	adds	r3, #4
 80078ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078cc:	4619      	mov	r1, r3
 80078ce:	68b8      	ldr	r0, [r7, #8]
 80078d0:	f000 fcb8 	bl	8008244 <xQueueReceive>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d102      	bne.n	80078e0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80078da:	2310      	movs	r3, #16
 80078dc:	617b      	str	r3, [r7, #20]
 80078de:	e006      	b.n	80078ee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <osMessageGet+0xc6>
 80078e6:	2300      	movs	r3, #0
 80078e8:	e000      	b.n	80078ec <osMessageGet+0xc8>
 80078ea:	2340      	movs	r3, #64	@ 0x40
 80078ec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	461c      	mov	r4, r3
 80078f2:	f107 0314 	add.w	r3, r7, #20
 80078f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80078fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	372c      	adds	r7, #44	@ 0x2c
 8007902:	46bd      	mov	sp, r7
 8007904:	bd90      	pop	{r4, r7, pc}
 8007906:	bf00      	nop
 8007908:	e000ed04 	.word	0xe000ed04

0800790c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007914:	f7ff fd2f 	bl	8007376 <inHandlerMode>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d004      	beq.n	8007928 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 ff23 	bl	800876a <uxQueueMessagesWaitingFromISR>
 8007924:	4603      	mov	r3, r0
 8007926:	e003      	b.n	8007930 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 feff 	bl	800872c <uxQueueMessagesWaiting>
 800792e:	4603      	mov	r3, r0
  }
}
 8007930:	4618      	mov	r0, r3
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007940:	f7ff fd19 	bl	8007376 <inHandlerMode>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <osMessageDelete+0x16>
    return osErrorISR;
 800794a:	2382      	movs	r3, #130	@ 0x82
 800794c:	e003      	b.n	8007956 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 ff2a 	bl	80087a8 <vQueueDelete>

  return osOK; 
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f103 0208 	add.w	r2, r3, #8
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f04f 32ff 	mov.w	r2, #4294967295
 8007976:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f103 0208 	add.w	r2, r3, #8
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f103 0208 	add.w	r2, r3, #8
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007992:	bf00      	nop
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	689a      	ldr	r2, [r3, #8]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]
}
 80079f4:	bf00      	nop
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a16:	d103      	bne.n	8007a20 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	60fb      	str	r3, [r7, #12]
 8007a1e:	e00c      	b.n	8007a3a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3308      	adds	r3, #8
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	e002      	b.n	8007a2e <vListInsert+0x2e>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d2f6      	bcs.n	8007a28 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	601a      	str	r2, [r3, #0]
}
 8007a66:	bf00      	nop
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a72:	b480      	push	{r7}
 8007a74:	b085      	sub	sp, #20
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	6892      	ldr	r2, [r2, #8]
 8007a88:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6852      	ldr	r2, [r2, #4]
 8007a92:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d103      	bne.n	8007aa6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689a      	ldr	r2, [r3, #8]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	1e5a      	subs	r2, r3, #1
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
	...

08007ac8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10b      	bne.n	8007af4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007aee:	bf00      	nop
 8007af0:	bf00      	nop
 8007af2:	e7fd      	b.n	8007af0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007af4:	f002 f950 	bl	8009d98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b00:	68f9      	ldr	r1, [r7, #12]
 8007b02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007b04:	fb01 f303 	mul.w	r3, r1, r3
 8007b08:	441a      	add	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b24:	3b01      	subs	r3, #1
 8007b26:	68f9      	ldr	r1, [r7, #12]
 8007b28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007b2a:	fb01 f303 	mul.w	r3, r1, r3
 8007b2e:	441a      	add	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	22ff      	movs	r2, #255	@ 0xff
 8007b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	22ff      	movs	r2, #255	@ 0xff
 8007b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d114      	bne.n	8007b74 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d01a      	beq.n	8007b88 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3310      	adds	r3, #16
 8007b56:	4618      	mov	r0, r3
 8007b58:	f001 fbfe 	bl	8009358 <xTaskRemoveFromEventList>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d012      	beq.n	8007b88 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b62:	4b0d      	ldr	r3, [pc, #52]	@ (8007b98 <xQueueGenericReset+0xd0>)
 8007b64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	e009      	b.n	8007b88 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	3310      	adds	r3, #16
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7ff fef0 	bl	800795e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3324      	adds	r3, #36	@ 0x24
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff feeb 	bl	800795e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b88:	f002 f938 	bl	8009dfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b8c:	2301      	movs	r3, #1
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	e000ed04 	.word	0xe000ed04

08007b9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08e      	sub	sp, #56	@ 0x38
 8007ba0:	af02      	add	r7, sp, #8
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10b      	bne.n	8007bc8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007bc2:	bf00      	nop
 8007bc4:	bf00      	nop
 8007bc6:	e7fd      	b.n	8007bc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10b      	bne.n	8007be6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007be0:	bf00      	nop
 8007be2:	bf00      	nop
 8007be4:	e7fd      	b.n	8007be2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <xQueueGenericCreateStatic+0x56>
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <xQueueGenericCreateStatic+0x5a>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e000      	b.n	8007bf8 <xQueueGenericCreateStatic+0x5c>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10b      	bne.n	8007c14 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	623b      	str	r3, [r7, #32]
}
 8007c0e:	bf00      	nop
 8007c10:	bf00      	nop
 8007c12:	e7fd      	b.n	8007c10 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d102      	bne.n	8007c20 <xQueueGenericCreateStatic+0x84>
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <xQueueGenericCreateStatic+0x88>
 8007c20:	2301      	movs	r3, #1
 8007c22:	e000      	b.n	8007c26 <xQueueGenericCreateStatic+0x8a>
 8007c24:	2300      	movs	r3, #0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10b      	bne.n	8007c42 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	61fb      	str	r3, [r7, #28]
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	e7fd      	b.n	8007c3e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c42:	2348      	movs	r3, #72	@ 0x48
 8007c44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2b48      	cmp	r3, #72	@ 0x48
 8007c4a:	d00b      	beq.n	8007c64 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	61bb      	str	r3, [r7, #24]
}
 8007c5e:	bf00      	nop
 8007c60:	bf00      	nop
 8007c62:	e7fd      	b.n	8007c60 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c64:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00d      	beq.n	8007c8c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c78:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	4613      	mov	r3, r2
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	68b9      	ldr	r1, [r7, #8]
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 f840 	bl	8007d0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3730      	adds	r7, #48	@ 0x30
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b08a      	sub	sp, #40	@ 0x28
 8007c9a:	af02      	add	r7, sp, #8
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	60b9      	str	r1, [r7, #8]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10b      	bne.n	8007cc2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	613b      	str	r3, [r7, #16]
}
 8007cbc:	bf00      	nop
 8007cbe:	bf00      	nop
 8007cc0:	e7fd      	b.n	8007cbe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	fb02 f303 	mul.w	r3, r2, r3
 8007cca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	3348      	adds	r3, #72	@ 0x48
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f002 f983 	bl	8009fdc <pvPortMalloc>
 8007cd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d011      	beq.n	8007d02 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	3348      	adds	r3, #72	@ 0x48
 8007ce6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cf0:	79fa      	ldrb	r2, [r7, #7]
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	68b9      	ldr	r1, [r7, #8]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 f805 	bl	8007d0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d02:	69bb      	ldr	r3, [r7, #24]
	}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3720      	adds	r7, #32
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d103      	bne.n	8007d28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	69ba      	ldr	r2, [r7, #24]
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	e002      	b.n	8007d2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	69b8      	ldr	r0, [r7, #24]
 8007d3e:	f7ff fec3 	bl	8007ac8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d42:	bf00      	nop
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b082      	sub	sp, #8
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00e      	beq.n	8007d76 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2100      	movs	r1, #0
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f837 	bl	8007de4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b086      	sub	sp, #24
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	4603      	mov	r3, r0
 8007d86:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	617b      	str	r3, [r7, #20]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007d90:	79fb      	ldrb	r3, [r7, #7]
 8007d92:	461a      	mov	r2, r3
 8007d94:	6939      	ldr	r1, [r7, #16]
 8007d96:	6978      	ldr	r0, [r7, #20]
 8007d98:	f7ff ff7d 	bl	8007c96 <xQueueGenericCreate>
 8007d9c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f7ff ffd3 	bl	8007d4a <prvInitialiseMutex>

		return xNewQueue;
 8007da4:	68fb      	ldr	r3, [r7, #12]
	}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b088      	sub	sp, #32
 8007db2:	af02      	add	r7, sp, #8
 8007db4:	4603      	mov	r3, r0
 8007db6:	6039      	str	r1, [r7, #0]
 8007db8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	617b      	str	r3, [r7, #20]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	6939      	ldr	r1, [r7, #16]
 8007dcc:	6978      	ldr	r0, [r7, #20]
 8007dce:	f7ff fee5 	bl	8007b9c <xQueueGenericCreateStatic>
 8007dd2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f7ff ffb8 	bl	8007d4a <prvInitialiseMutex>

		return xNewQueue;
 8007dda:	68fb      	ldr	r3, [r7, #12]
	}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b08e      	sub	sp, #56	@ 0x38
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007df2:	2300      	movs	r3, #0
 8007df4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10b      	bne.n	8007e18 <xQueueGenericSend+0x34>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e12:	bf00      	nop
 8007e14:	bf00      	nop
 8007e16:	e7fd      	b.n	8007e14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d103      	bne.n	8007e26 <xQueueGenericSend+0x42>
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <xQueueGenericSend+0x46>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <xQueueGenericSend+0x48>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10b      	bne.n	8007e48 <xQueueGenericSend+0x64>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e42:	bf00      	nop
 8007e44:	bf00      	nop
 8007e46:	e7fd      	b.n	8007e44 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d103      	bne.n	8007e56 <xQueueGenericSend+0x72>
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d101      	bne.n	8007e5a <xQueueGenericSend+0x76>
 8007e56:	2301      	movs	r3, #1
 8007e58:	e000      	b.n	8007e5c <xQueueGenericSend+0x78>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10b      	bne.n	8007e78 <xQueueGenericSend+0x94>
	__asm volatile
 8007e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	623b      	str	r3, [r7, #32]
}
 8007e72:	bf00      	nop
 8007e74:	bf00      	nop
 8007e76:	e7fd      	b.n	8007e74 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e78:	f001 fc34 	bl	80096e4 <xTaskGetSchedulerState>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d102      	bne.n	8007e88 <xQueueGenericSend+0xa4>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <xQueueGenericSend+0xa8>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e000      	b.n	8007e8e <xQueueGenericSend+0xaa>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10b      	bne.n	8007eaa <xQueueGenericSend+0xc6>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	61fb      	str	r3, [r7, #28]
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop
 8007ea8:	e7fd      	b.n	8007ea6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007eaa:	f001 ff75 	bl	8009d98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d302      	bcc.n	8007ec0 <xQueueGenericSend+0xdc>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d129      	bne.n	8007f14 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ec6:	f000 fcab 	bl	8008820 <prvCopyDataToQueue>
 8007eca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d010      	beq.n	8007ef6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed6:	3324      	adds	r3, #36	@ 0x24
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f001 fa3d 	bl	8009358 <xTaskRemoveFromEventList>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d013      	beq.n	8007f0c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8007fe4 <xQueueGenericSend+0x200>)
 8007ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	e00a      	b.n	8007f0c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d007      	beq.n	8007f0c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007efc:	4b39      	ldr	r3, [pc, #228]	@ (8007fe4 <xQueueGenericSend+0x200>)
 8007efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f0c:	f001 ff76 	bl	8009dfc <vPortExitCritical>
				return pdPASS;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e063      	b.n	8007fdc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d103      	bne.n	8007f22 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f1a:	f001 ff6f 	bl	8009dfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e05c      	b.n	8007fdc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d106      	bne.n	8007f36 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f28:	f107 0314 	add.w	r3, r7, #20
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f001 fa77 	bl	8009420 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f32:	2301      	movs	r3, #1
 8007f34:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f36:	f001 ff61 	bl	8009dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f3a:	f000 fffb 	bl	8008f34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f3e:	f001 ff2b 	bl	8009d98 <vPortEnterCritical>
 8007f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f48:	b25b      	sxtb	r3, r3
 8007f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4e:	d103      	bne.n	8007f58 <xQueueGenericSend+0x174>
 8007f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f5e:	b25b      	sxtb	r3, r3
 8007f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f64:	d103      	bne.n	8007f6e <xQueueGenericSend+0x18a>
 8007f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f6e:	f001 ff45 	bl	8009dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f72:	1d3a      	adds	r2, r7, #4
 8007f74:	f107 0314 	add.w	r3, r7, #20
 8007f78:	4611      	mov	r1, r2
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f001 fa66 	bl	800944c <xTaskCheckForTimeOut>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d124      	bne.n	8007fd0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f88:	f000 fd42 	bl	8008a10 <prvIsQueueFull>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d018      	beq.n	8007fc4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f94:	3310      	adds	r3, #16
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	4611      	mov	r1, r2
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f001 f9b6 	bl	800930c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fa2:	f000 fccd 	bl	8008940 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007fa6:	f000 ffd3 	bl	8008f50 <xTaskResumeAll>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f47f af7c 	bne.w	8007eaa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe4 <xQueueGenericSend+0x200>)
 8007fb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	e772      	b.n	8007eaa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007fc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fc6:	f000 fcbb 	bl	8008940 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fca:	f000 ffc1 	bl	8008f50 <xTaskResumeAll>
 8007fce:	e76c      	b.n	8007eaa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007fd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fd2:	f000 fcb5 	bl	8008940 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fd6:	f000 ffbb 	bl	8008f50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007fda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3738      	adds	r7, #56	@ 0x38
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	e000ed04 	.word	0xe000ed04

08007fe8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b090      	sub	sp, #64	@ 0x40
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10b      	bne.n	8008018 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008012:	bf00      	nop
 8008014:	bf00      	nop
 8008016:	e7fd      	b.n	8008014 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d103      	bne.n	8008026 <xQueueGenericSendFromISR+0x3e>
 800801e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <xQueueGenericSendFromISR+0x42>
 8008026:	2301      	movs	r3, #1
 8008028:	e000      	b.n	800802c <xQueueGenericSendFromISR+0x44>
 800802a:	2300      	movs	r3, #0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10b      	bne.n	8008048 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008042:	bf00      	nop
 8008044:	bf00      	nop
 8008046:	e7fd      	b.n	8008044 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d103      	bne.n	8008056 <xQueueGenericSendFromISR+0x6e>
 800804e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008052:	2b01      	cmp	r3, #1
 8008054:	d101      	bne.n	800805a <xQueueGenericSendFromISR+0x72>
 8008056:	2301      	movs	r3, #1
 8008058:	e000      	b.n	800805c <xQueueGenericSendFromISR+0x74>
 800805a:	2300      	movs	r3, #0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10b      	bne.n	8008078 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	623b      	str	r3, [r7, #32]
}
 8008072:	bf00      	nop
 8008074:	bf00      	nop
 8008076:	e7fd      	b.n	8008074 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008078:	f001 ff6e 	bl	8009f58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800807c:	f3ef 8211 	mrs	r2, BASEPRI
 8008080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	61fa      	str	r2, [r7, #28]
 8008092:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008094:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008096:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800809c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d302      	bcc.n	80080aa <xQueueGenericSendFromISR+0xc2>
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d12f      	bne.n	800810a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80080aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	68b9      	ldr	r1, [r7, #8]
 80080be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80080c0:	f000 fbae 	bl	8008820 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80080c4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80080c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080cc:	d112      	bne.n	80080f4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d016      	beq.n	8008104 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d8:	3324      	adds	r3, #36	@ 0x24
 80080da:	4618      	mov	r0, r3
 80080dc:	f001 f93c 	bl	8009358 <xTaskRemoveFromEventList>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00e      	beq.n	8008104 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00b      	beq.n	8008104 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	e007      	b.n	8008104 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80080f8:	3301      	adds	r3, #1
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	b25a      	sxtb	r2, r3
 80080fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008104:	2301      	movs	r3, #1
 8008106:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008108:	e001      	b.n	800810e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800810a:	2300      	movs	r3, #0
 800810c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800810e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008110:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008118:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800811a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800811c:	4618      	mov	r0, r3
 800811e:	3740      	adds	r7, #64	@ 0x40
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08e      	sub	sp, #56	@ 0x38
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10b      	bne.n	8008150 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	623b      	str	r3, [r7, #32]
}
 800814a:	bf00      	nop
 800814c:	bf00      	nop
 800814e:	e7fd      	b.n	800814c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00b      	beq.n	8008170 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	61fb      	str	r3, [r7, #28]
}
 800816a:	bf00      	nop
 800816c:	bf00      	nop
 800816e:	e7fd      	b.n	800816c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d103      	bne.n	8008180 <xQueueGiveFromISR+0x5c>
 8008178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <xQueueGiveFromISR+0x60>
 8008180:	2301      	movs	r3, #1
 8008182:	e000      	b.n	8008186 <xQueueGiveFromISR+0x62>
 8008184:	2300      	movs	r3, #0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10b      	bne.n	80081a2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	61bb      	str	r3, [r7, #24]
}
 800819c:	bf00      	nop
 800819e:	bf00      	nop
 80081a0:	e7fd      	b.n	800819e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081a2:	f001 fed9 	bl	8009f58 <vPortValidateInterruptPriority>
	__asm volatile
 80081a6:	f3ef 8211 	mrs	r2, BASEPRI
 80081aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	617a      	str	r2, [r7, #20]
 80081bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80081be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80081c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d22b      	bcs.n	800822a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80081e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ec:	d112      	bne.n	8008214 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d016      	beq.n	8008224 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f8:	3324      	adds	r3, #36	@ 0x24
 80081fa:	4618      	mov	r0, r3
 80081fc:	f001 f8ac 	bl	8009358 <xTaskRemoveFromEventList>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00e      	beq.n	8008224 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00b      	beq.n	8008224 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2201      	movs	r2, #1
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	e007      	b.n	8008224 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008218:	3301      	adds	r3, #1
 800821a:	b2db      	uxtb	r3, r3
 800821c:	b25a      	sxtb	r2, r3
 800821e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008224:	2301      	movs	r3, #1
 8008226:	637b      	str	r3, [r7, #52]	@ 0x34
 8008228:	e001      	b.n	800822e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800822a:	2300      	movs	r3, #0
 800822c:	637b      	str	r3, [r7, #52]	@ 0x34
 800822e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008230:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f383 8811 	msr	BASEPRI, r3
}
 8008238:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800823a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800823c:	4618      	mov	r0, r3
 800823e:	3738      	adds	r7, #56	@ 0x38
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08c      	sub	sp, #48	@ 0x30
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008250:	2300      	movs	r3, #0
 8008252:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10b      	bne.n	8008276 <xQueueReceive+0x32>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	623b      	str	r3, [r7, #32]
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	e7fd      	b.n	8008272 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d103      	bne.n	8008284 <xQueueReceive+0x40>
 800827c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <xQueueReceive+0x44>
 8008284:	2301      	movs	r3, #1
 8008286:	e000      	b.n	800828a <xQueueReceive+0x46>
 8008288:	2300      	movs	r3, #0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10b      	bne.n	80082a6 <xQueueReceive+0x62>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	61fb      	str	r3, [r7, #28]
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	e7fd      	b.n	80082a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082a6:	f001 fa1d 	bl	80096e4 <xTaskGetSchedulerState>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <xQueueReceive+0x72>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <xQueueReceive+0x76>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e000      	b.n	80082bc <xQueueReceive+0x78>
 80082ba:	2300      	movs	r3, #0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10b      	bne.n	80082d8 <xQueueReceive+0x94>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	61bb      	str	r3, [r7, #24]
}
 80082d2:	bf00      	nop
 80082d4:	bf00      	nop
 80082d6:	e7fd      	b.n	80082d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082d8:	f001 fd5e 	bl	8009d98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01f      	beq.n	8008328 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082e8:	68b9      	ldr	r1, [r7, #8]
 80082ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082ec:	f000 fb02 	bl	80088f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f2:	1e5a      	subs	r2, r3, #1
 80082f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00f      	beq.n	8008320 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008302:	3310      	adds	r3, #16
 8008304:	4618      	mov	r0, r3
 8008306:	f001 f827 	bl	8009358 <xTaskRemoveFromEventList>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d007      	beq.n	8008320 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008310:	4b3c      	ldr	r3, [pc, #240]	@ (8008404 <xQueueReceive+0x1c0>)
 8008312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008320:	f001 fd6c 	bl	8009dfc <vPortExitCritical>
				return pdPASS;
 8008324:	2301      	movs	r3, #1
 8008326:	e069      	b.n	80083fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d103      	bne.n	8008336 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800832e:	f001 fd65 	bl	8009dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008332:	2300      	movs	r3, #0
 8008334:	e062      	b.n	80083fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d106      	bne.n	800834a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800833c:	f107 0310 	add.w	r3, r7, #16
 8008340:	4618      	mov	r0, r3
 8008342:	f001 f86d 	bl	8009420 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008346:	2301      	movs	r3, #1
 8008348:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800834a:	f001 fd57 	bl	8009dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800834e:	f000 fdf1 	bl	8008f34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008352:	f001 fd21 	bl	8009d98 <vPortEnterCritical>
 8008356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008358:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800835c:	b25b      	sxtb	r3, r3
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008362:	d103      	bne.n	800836c <xQueueReceive+0x128>
 8008364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800836c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008372:	b25b      	sxtb	r3, r3
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008378:	d103      	bne.n	8008382 <xQueueReceive+0x13e>
 800837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008382:	f001 fd3b 	bl	8009dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008386:	1d3a      	adds	r2, r7, #4
 8008388:	f107 0310 	add.w	r3, r7, #16
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f001 f85c 	bl	800944c <xTaskCheckForTimeOut>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d123      	bne.n	80083e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800839a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800839c:	f000 fb22 	bl	80089e4 <prvIsQueueEmpty>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d017      	beq.n	80083d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a8:	3324      	adds	r3, #36	@ 0x24
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	4611      	mov	r1, r2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 ffac 	bl	800930c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083b6:	f000 fac3 	bl	8008940 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083ba:	f000 fdc9 	bl	8008f50 <xTaskResumeAll>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d189      	bne.n	80082d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80083c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008404 <xQueueReceive+0x1c0>)
 80083c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	e780      	b.n	80082d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80083d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083d8:	f000 fab2 	bl	8008940 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083dc:	f000 fdb8 	bl	8008f50 <xTaskResumeAll>
 80083e0:	e77a      	b.n	80082d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80083e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083e4:	f000 faac 	bl	8008940 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083e8:	f000 fdb2 	bl	8008f50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083ee:	f000 faf9 	bl	80089e4 <prvIsQueueEmpty>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f43f af6f 	beq.w	80082d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3730      	adds	r7, #48	@ 0x30
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	e000ed04 	.word	0xe000ed04

08008408 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b08e      	sub	sp, #56	@ 0x38
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008412:	2300      	movs	r3, #0
 8008414:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800841a:	2300      	movs	r3, #0
 800841c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800841e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10b      	bne.n	800843c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	623b      	str	r3, [r7, #32]
}
 8008436:	bf00      	nop
 8008438:	bf00      	nop
 800843a:	e7fd      	b.n	8008438 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800843c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00b      	beq.n	800845c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	61fb      	str	r3, [r7, #28]
}
 8008456:	bf00      	nop
 8008458:	bf00      	nop
 800845a:	e7fd      	b.n	8008458 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800845c:	f001 f942 	bl	80096e4 <xTaskGetSchedulerState>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d102      	bne.n	800846c <xQueueSemaphoreTake+0x64>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <xQueueSemaphoreTake+0x68>
 800846c:	2301      	movs	r3, #1
 800846e:	e000      	b.n	8008472 <xQueueSemaphoreTake+0x6a>
 8008470:	2300      	movs	r3, #0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10b      	bne.n	800848e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	61bb      	str	r3, [r7, #24]
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	e7fd      	b.n	800848a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800848e:	f001 fc83 	bl	8009d98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008496:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849a:	2b00      	cmp	r3, #0
 800849c:	d024      	beq.n	80084e8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800849e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a0:	1e5a      	subs	r2, r3, #1
 80084a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d104      	bne.n	80084b8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80084ae:	f001 fac5 	bl	8009a3c <pvTaskIncrementMutexHeldCount>
 80084b2:	4602      	mov	r2, r0
 80084b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00f      	beq.n	80084e0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c2:	3310      	adds	r3, #16
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 ff47 	bl	8009358 <xTaskRemoveFromEventList>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084d0:	4b54      	ldr	r3, [pc, #336]	@ (8008624 <xQueueSemaphoreTake+0x21c>)
 80084d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084e0:	f001 fc8c 	bl	8009dfc <vPortExitCritical>
				return pdPASS;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e098      	b.n	800861a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d112      	bne.n	8008514 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00b      	beq.n	800850c <xQueueSemaphoreTake+0x104>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	617b      	str	r3, [r7, #20]
}
 8008506:	bf00      	nop
 8008508:	bf00      	nop
 800850a:	e7fd      	b.n	8008508 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800850c:	f001 fc76 	bl	8009dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008510:	2300      	movs	r3, #0
 8008512:	e082      	b.n	800861a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008516:	2b00      	cmp	r3, #0
 8008518:	d106      	bne.n	8008528 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800851a:	f107 030c 	add.w	r3, r7, #12
 800851e:	4618      	mov	r0, r3
 8008520:	f000 ff7e 	bl	8009420 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008524:	2301      	movs	r3, #1
 8008526:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008528:	f001 fc68 	bl	8009dfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800852c:	f000 fd02 	bl	8008f34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008530:	f001 fc32 	bl	8009d98 <vPortEnterCritical>
 8008534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008536:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800853a:	b25b      	sxtb	r3, r3
 800853c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008540:	d103      	bne.n	800854a <xQueueSemaphoreTake+0x142>
 8008542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800854a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800854c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008550:	b25b      	sxtb	r3, r3
 8008552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008556:	d103      	bne.n	8008560 <xQueueSemaphoreTake+0x158>
 8008558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008560:	f001 fc4c 	bl	8009dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008564:	463a      	mov	r2, r7
 8008566:	f107 030c 	add.w	r3, r7, #12
 800856a:	4611      	mov	r1, r2
 800856c:	4618      	mov	r0, r3
 800856e:	f000 ff6d 	bl	800944c <xTaskCheckForTimeOut>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d132      	bne.n	80085de <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008578:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800857a:	f000 fa33 	bl	80089e4 <prvIsQueueEmpty>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d026      	beq.n	80085d2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d109      	bne.n	80085a0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800858c:	f001 fc04 	bl	8009d98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	4618      	mov	r0, r3
 8008596:	f001 f8c3 	bl	8009720 <xTaskPriorityInherit>
 800859a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800859c:	f001 fc2e 	bl	8009dfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a2:	3324      	adds	r3, #36	@ 0x24
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	4611      	mov	r1, r2
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 feaf 	bl	800930c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80085b0:	f000 f9c6 	bl	8008940 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085b4:	f000 fccc 	bl	8008f50 <xTaskResumeAll>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f47f af67 	bne.w	800848e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80085c0:	4b18      	ldr	r3, [pc, #96]	@ (8008624 <xQueueSemaphoreTake+0x21c>)
 80085c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	e75d      	b.n	800848e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80085d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80085d4:	f000 f9b4 	bl	8008940 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085d8:	f000 fcba 	bl	8008f50 <xTaskResumeAll>
 80085dc:	e757      	b.n	800848e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80085de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80085e0:	f000 f9ae 	bl	8008940 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085e4:	f000 fcb4 	bl	8008f50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80085ea:	f000 f9fb 	bl	80089e4 <prvIsQueueEmpty>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f43f af4c 	beq.w	800848e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80085f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00d      	beq.n	8008618 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80085fc:	f001 fbcc 	bl	8009d98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008600:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008602:	f000 f8f5 	bl	80087f0 <prvGetDisinheritPriorityAfterTimeout>
 8008606:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800860e:	4618      	mov	r0, r3
 8008610:	f001 f984 	bl	800991c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008614:	f001 fbf2 	bl	8009dfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008618:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800861a:	4618      	mov	r0, r3
 800861c:	3738      	adds	r7, #56	@ 0x38
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	e000ed04 	.word	0xe000ed04

08008628 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08e      	sub	sp, #56	@ 0x38
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10b      	bne.n	8008656 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	623b      	str	r3, [r7, #32]
}
 8008650:	bf00      	nop
 8008652:	bf00      	nop
 8008654:	e7fd      	b.n	8008652 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d103      	bne.n	8008664 <xQueueReceiveFromISR+0x3c>
 800865c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <xQueueReceiveFromISR+0x40>
 8008664:	2301      	movs	r3, #1
 8008666:	e000      	b.n	800866a <xQueueReceiveFromISR+0x42>
 8008668:	2300      	movs	r3, #0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10b      	bne.n	8008686 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	61fb      	str	r3, [r7, #28]
}
 8008680:	bf00      	nop
 8008682:	bf00      	nop
 8008684:	e7fd      	b.n	8008682 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008686:	f001 fc67 	bl	8009f58 <vPortValidateInterruptPriority>
	__asm volatile
 800868a:	f3ef 8211 	mrs	r2, BASEPRI
 800868e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	61ba      	str	r2, [r7, #24]
 80086a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80086a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d02f      	beq.n	8008712 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086bc:	68b9      	ldr	r1, [r7, #8]
 80086be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086c0:	f000 f918 	bl	80088f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80086c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c6:	1e5a      	subs	r2, r3, #1
 80086c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80086cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80086d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d4:	d112      	bne.n	80086fc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d016      	beq.n	800870c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e0:	3310      	adds	r3, #16
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 fe38 	bl	8009358 <xTaskRemoveFromEventList>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00e      	beq.n	800870c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00b      	beq.n	800870c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	e007      	b.n	800870c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80086fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008700:	3301      	adds	r3, #1
 8008702:	b2db      	uxtb	r3, r3
 8008704:	b25a      	sxtb	r2, r3
 8008706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800870c:	2301      	movs	r3, #1
 800870e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008710:	e001      	b.n	8008716 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008712:	2300      	movs	r3, #0
 8008714:	637b      	str	r3, [r7, #52]	@ 0x34
 8008716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008718:	613b      	str	r3, [r7, #16]
	__asm volatile
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	f383 8811 	msr	BASEPRI, r3
}
 8008720:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008724:	4618      	mov	r0, r3
 8008726:	3738      	adds	r7, #56	@ 0x38
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10b      	bne.n	8008752 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	60bb      	str	r3, [r7, #8]
}
 800874c:	bf00      	nop
 800874e:	bf00      	nop
 8008750:	e7fd      	b.n	800874e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008752:	f001 fb21 	bl	8009d98 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800875a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800875c:	f001 fb4e 	bl	8009dfc <vPortExitCritical>

	return uxReturn;
 8008760:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800876a:	b480      	push	{r7}
 800876c:	b087      	sub	sp, #28
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10b      	bne.n	8008794 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	60fb      	str	r3, [r7, #12]
}
 800878e:	bf00      	nop
 8008790:	bf00      	nop
 8008792:	e7fd      	b.n	8008790 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008798:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800879a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800879c:	4618      	mov	r0, r3
 800879e:	371c      	adds	r7, #28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10b      	bne.n	80087d2 <vQueueDelete+0x2a>
	__asm volatile
 80087ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	60bb      	str	r3, [r7, #8]
}
 80087cc:	bf00      	nop
 80087ce:	bf00      	nop
 80087d0:	e7fd      	b.n	80087ce <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 f934 	bl	8008a40 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d102      	bne.n	80087e8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f001 fcc8 	bl	800a178 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80087e8:	bf00      	nop
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d006      	beq.n	800880e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f1c3 0307 	rsb	r3, r3, #7
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	e001      	b.n	8008812 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800880e:	2300      	movs	r3, #0
 8008810:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008812:	68fb      	ldr	r3, [r7, #12]
	}
 8008814:	4618      	mov	r0, r3
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800882c:	2300      	movs	r3, #0
 800882e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008834:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10d      	bne.n	800885a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d14d      	bne.n	80088e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	4618      	mov	r0, r3
 800884c:	f000 ffde 	bl	800980c <xTaskPriorityDisinherit>
 8008850:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	609a      	str	r2, [r3, #8]
 8008858:	e043      	b.n	80088e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d119      	bne.n	8008894 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6858      	ldr	r0, [r3, #4]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008868:	461a      	mov	r2, r3
 800886a:	68b9      	ldr	r1, [r7, #8]
 800886c:	f00f fb63 	bl	8017f36 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	685a      	ldr	r2, [r3, #4]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008878:	441a      	add	r2, r3
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	429a      	cmp	r2, r3
 8008888:	d32b      	bcc.n	80088e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	605a      	str	r2, [r3, #4]
 8008892:	e026      	b.n	80088e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	68d8      	ldr	r0, [r3, #12]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889c:	461a      	mov	r2, r3
 800889e:	68b9      	ldr	r1, [r7, #8]
 80088a0:	f00f fb49 	bl	8017f36 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	68da      	ldr	r2, [r3, #12]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ac:	425b      	negs	r3, r3
 80088ae:	441a      	add	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	68da      	ldr	r2, [r3, #12]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d207      	bcs.n	80088d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	689a      	ldr	r2, [r3, #8]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c8:	425b      	negs	r3, r3
 80088ca:	441a      	add	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d105      	bne.n	80088e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	3b01      	subs	r3, #1
 80088e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	1c5a      	adds	r2, r3, #1
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80088ea:	697b      	ldr	r3, [r7, #20]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008902:	2b00      	cmp	r3, #0
 8008904:	d018      	beq.n	8008938 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68da      	ldr	r2, [r3, #12]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800890e:	441a      	add	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68da      	ldr	r2, [r3, #12]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	429a      	cmp	r2, r3
 800891e:	d303      	bcc.n	8008928 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68d9      	ldr	r1, [r3, #12]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008930:	461a      	mov	r2, r3
 8008932:	6838      	ldr	r0, [r7, #0]
 8008934:	f00f faff 	bl	8017f36 <memcpy>
	}
}
 8008938:	bf00      	nop
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008948:	f001 fa26 	bl	8009d98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008952:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008954:	e011      	b.n	800897a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895a:	2b00      	cmp	r3, #0
 800895c:	d012      	beq.n	8008984 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	3324      	adds	r3, #36	@ 0x24
 8008962:	4618      	mov	r0, r3
 8008964:	f000 fcf8 	bl	8009358 <xTaskRemoveFromEventList>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800896e:	f000 fdd1 	bl	8009514 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008972:	7bfb      	ldrb	r3, [r7, #15]
 8008974:	3b01      	subs	r3, #1
 8008976:	b2db      	uxtb	r3, r3
 8008978:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800897a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800897e:	2b00      	cmp	r3, #0
 8008980:	dce9      	bgt.n	8008956 <prvUnlockQueue+0x16>
 8008982:	e000      	b.n	8008986 <prvUnlockQueue+0x46>
					break;
 8008984:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	22ff      	movs	r2, #255	@ 0xff
 800898a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800898e:	f001 fa35 	bl	8009dfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008992:	f001 fa01 	bl	8009d98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800899c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800899e:	e011      	b.n	80089c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d012      	beq.n	80089ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3310      	adds	r3, #16
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 fcd3 	bl	8009358 <xTaskRemoveFromEventList>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80089b8:	f000 fdac 	bl	8009514 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
 80089be:	3b01      	subs	r3, #1
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	dce9      	bgt.n	80089a0 <prvUnlockQueue+0x60>
 80089cc:	e000      	b.n	80089d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80089ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	22ff      	movs	r2, #255	@ 0xff
 80089d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80089d8:	f001 fa10 	bl	8009dfc <vPortExitCritical>
}
 80089dc:	bf00      	nop
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089ec:	f001 f9d4 	bl	8009d98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d102      	bne.n	80089fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80089f8:	2301      	movs	r3, #1
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	e001      	b.n	8008a02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80089fe:	2300      	movs	r3, #0
 8008a00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a02:	f001 f9fb 	bl	8009dfc <vPortExitCritical>

	return xReturn;
 8008a06:	68fb      	ldr	r3, [r7, #12]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a18:	f001 f9be 	bl	8009d98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d102      	bne.n	8008a2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	e001      	b.n	8008a32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a32:	f001 f9e3 	bl	8009dfc <vPortExitCritical>

	return xReturn;
 8008a36:	68fb      	ldr	r3, [r7, #12]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a48:	2300      	movs	r3, #0
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	e016      	b.n	8008a7c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008a4e:	4a10      	ldr	r2, [pc, #64]	@ (8008a90 <vQueueUnregisterQueue+0x50>)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	4413      	add	r3, r2
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d10b      	bne.n	8008a76 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8008a90 <vQueueUnregisterQueue+0x50>)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2100      	movs	r1, #0
 8008a64:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008a68:	4a09      	ldr	r2, [pc, #36]	@ (8008a90 <vQueueUnregisterQueue+0x50>)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	00db      	lsls	r3, r3, #3
 8008a6e:	4413      	add	r3, r2
 8008a70:	2200      	movs	r2, #0
 8008a72:	605a      	str	r2, [r3, #4]
				break;
 8008a74:	e006      	b.n	8008a84 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b07      	cmp	r3, #7
 8008a80:	d9e5      	bls.n	8008a4e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	3714      	adds	r7, #20
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr
 8008a90:	200056e8 	.word	0x200056e8

08008a94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b08e      	sub	sp, #56	@ 0x38
 8008a98:	af04      	add	r7, sp, #16
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
 8008aa0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10b      	bne.n	8008ac0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	623b      	str	r3, [r7, #32]
}
 8008aba:	bf00      	nop
 8008abc:	bf00      	nop
 8008abe:	e7fd      	b.n	8008abc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10b      	bne.n	8008ade <xTaskCreateStatic+0x4a>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	61fb      	str	r3, [r7, #28]
}
 8008ad8:	bf00      	nop
 8008ada:	bf00      	nop
 8008adc:	e7fd      	b.n	8008ada <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ade:	23a0      	movs	r3, #160	@ 0xa0
 8008ae0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	2ba0      	cmp	r3, #160	@ 0xa0
 8008ae6:	d00b      	beq.n	8008b00 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	61bb      	str	r3, [r7, #24]
}
 8008afa:	bf00      	nop
 8008afc:	bf00      	nop
 8008afe:	e7fd      	b.n	8008afc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b00:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d01e      	beq.n	8008b46 <xTaskCreateStatic+0xb2>
 8008b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d01b      	beq.n	8008b46 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b10:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b16:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b20:	2300      	movs	r3, #0
 8008b22:	9303      	str	r3, [sp, #12]
 8008b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b26:	9302      	str	r3, [sp, #8]
 8008b28:	f107 0314 	add.w	r3, r7, #20
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	68b9      	ldr	r1, [r7, #8]
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 f851 	bl	8008be0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b40:	f000 f8ee 	bl	8008d20 <prvAddNewTaskToReadyList>
 8008b44:	e001      	b.n	8008b4a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008b46:	2300      	movs	r3, #0
 8008b48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b4a:	697b      	ldr	r3, [r7, #20]
	}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3728      	adds	r7, #40	@ 0x28
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b08c      	sub	sp, #48	@ 0x30
 8008b58:	af04      	add	r7, sp, #16
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	603b      	str	r3, [r7, #0]
 8008b60:	4613      	mov	r3, r2
 8008b62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b64:	88fb      	ldrh	r3, [r7, #6]
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 fa37 	bl	8009fdc <pvPortMalloc>
 8008b6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00e      	beq.n	8008b94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b76:	20a0      	movs	r0, #160	@ 0xa0
 8008b78:	f001 fa30 	bl	8009fdc <pvPortMalloc>
 8008b7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d003      	beq.n	8008b8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b8a:	e005      	b.n	8008b98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b8c:	6978      	ldr	r0, [r7, #20]
 8008b8e:	f001 faf3 	bl	800a178 <vPortFree>
 8008b92:	e001      	b.n	8008b98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b94:	2300      	movs	r3, #0
 8008b96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d017      	beq.n	8008bce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ba6:	88fa      	ldrh	r2, [r7, #6]
 8008ba8:	2300      	movs	r3, #0
 8008baa:	9303      	str	r3, [sp, #12]
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	9302      	str	r3, [sp, #8]
 8008bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb2:	9301      	str	r3, [sp, #4]
 8008bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	68b9      	ldr	r1, [r7, #8]
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 f80f 	bl	8008be0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bc2:	69f8      	ldr	r0, [r7, #28]
 8008bc4:	f000 f8ac 	bl	8008d20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	61bb      	str	r3, [r7, #24]
 8008bcc:	e002      	b.n	8008bd4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008bce:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008bd4:	69bb      	ldr	r3, [r7, #24]
	}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3720      	adds	r7, #32
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
	...

08008be0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
 8008bec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	f023 0307 	bic.w	r3, r3, #7
 8008c06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	f003 0307 	and.w	r3, r3, #7
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00b      	beq.n	8008c2a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	617b      	str	r3, [r7, #20]
}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop
 8008c28:	e7fd      	b.n	8008c26 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d01f      	beq.n	8008c70 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c30:	2300      	movs	r3, #0
 8008c32:	61fb      	str	r3, [r7, #28]
 8008c34:	e012      	b.n	8008c5c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	7819      	ldrb	r1, [r3, #0]
 8008c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	4413      	add	r3, r2
 8008c44:	3334      	adds	r3, #52	@ 0x34
 8008c46:	460a      	mov	r2, r1
 8008c48:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	4413      	add	r3, r2
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d006      	beq.n	8008c64 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	61fb      	str	r3, [r7, #28]
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	2b0f      	cmp	r3, #15
 8008c60:	d9e9      	bls.n	8008c36 <prvInitialiseNewTask+0x56>
 8008c62:	e000      	b.n	8008c66 <prvInitialiseNewTask+0x86>
			{
				break;
 8008c64:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c6e:	e003      	b.n	8008c78 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7a:	2b06      	cmp	r3, #6
 8008c7c:	d901      	bls.n	8008c82 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c7e:	2306      	movs	r3, #6
 8008c80:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c86:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c8c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c90:	2200      	movs	r2, #0
 8008c92:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c96:	3304      	adds	r3, #4
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fe fe80 	bl	800799e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca0:	3318      	adds	r3, #24
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fe fe7b 	bl	800799e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb0:	f1c3 0207 	rsb	r2, r3, #7
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cbc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd0:	334c      	adds	r3, #76	@ 0x4c
 8008cd2:	224c      	movs	r2, #76	@ 0x4c
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f00f f861 	bl	8017d9e <memset>
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cde:	4a0d      	ldr	r2, [pc, #52]	@ (8008d14 <prvInitialiseNewTask+0x134>)
 8008ce0:	651a      	str	r2, [r3, #80]	@ 0x50
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8008d18 <prvInitialiseNewTask+0x138>)
 8008ce6:	655a      	str	r2, [r3, #84]	@ 0x54
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cea:	4a0c      	ldr	r2, [pc, #48]	@ (8008d1c <prvInitialiseNewTask+0x13c>)
 8008cec:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	68f9      	ldr	r1, [r7, #12]
 8008cf2:	69b8      	ldr	r0, [r7, #24]
 8008cf4:	f000 ff1c 	bl	8009b30 <pxPortInitialiseStack>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d002      	beq.n	8008d0a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d0a:	bf00      	nop
 8008d0c:	3720      	adds	r7, #32
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20010158 	.word	0x20010158
 8008d18:	200101c0 	.word	0x200101c0
 8008d1c:	20010228 	.word	0x20010228

08008d20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d28:	f001 f836 	bl	8009d98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8008dd8 <prvAddNewTaskToReadyList+0xb8>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3301      	adds	r3, #1
 8008d32:	4a29      	ldr	r2, [pc, #164]	@ (8008dd8 <prvAddNewTaskToReadyList+0xb8>)
 8008d34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d36:	4b29      	ldr	r3, [pc, #164]	@ (8008ddc <prvAddNewTaskToReadyList+0xbc>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d109      	bne.n	8008d52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d3e:	4a27      	ldr	r2, [pc, #156]	@ (8008ddc <prvAddNewTaskToReadyList+0xbc>)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d44:	4b24      	ldr	r3, [pc, #144]	@ (8008dd8 <prvAddNewTaskToReadyList+0xb8>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d110      	bne.n	8008d6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d4c:	f000 fc06 	bl	800955c <prvInitialiseTaskLists>
 8008d50:	e00d      	b.n	8008d6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d52:	4b23      	ldr	r3, [pc, #140]	@ (8008de0 <prvAddNewTaskToReadyList+0xc0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d109      	bne.n	8008d6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d5a:	4b20      	ldr	r3, [pc, #128]	@ (8008ddc <prvAddNewTaskToReadyList+0xbc>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d802      	bhi.n	8008d6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d68:	4a1c      	ldr	r2, [pc, #112]	@ (8008ddc <prvAddNewTaskToReadyList+0xbc>)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8008de4 <prvAddNewTaskToReadyList+0xc4>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3301      	adds	r3, #1
 8008d74:	4a1b      	ldr	r2, [pc, #108]	@ (8008de4 <prvAddNewTaskToReadyList+0xc4>)
 8008d76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	409a      	lsls	r2, r3
 8008d80:	4b19      	ldr	r3, [pc, #100]	@ (8008de8 <prvAddNewTaskToReadyList+0xc8>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	4a18      	ldr	r2, [pc, #96]	@ (8008de8 <prvAddNewTaskToReadyList+0xc8>)
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4a15      	ldr	r2, [pc, #84]	@ (8008dec <prvAddNewTaskToReadyList+0xcc>)
 8008d98:	441a      	add	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4610      	mov	r0, r2
 8008da2:	f7fe fe09 	bl	80079b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008da6:	f001 f829 	bl	8009dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008daa:	4b0d      	ldr	r3, [pc, #52]	@ (8008de0 <prvAddNewTaskToReadyList+0xc0>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00e      	beq.n	8008dd0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008db2:	4b0a      	ldr	r3, [pc, #40]	@ (8008ddc <prvAddNewTaskToReadyList+0xbc>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d207      	bcs.n	8008dd0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8008df0 <prvAddNewTaskToReadyList+0xd0>)
 8008dc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dc6:	601a      	str	r2, [r3, #0]
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dd0:	bf00      	nop
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	20005828 	.word	0x20005828
 8008ddc:	20005728 	.word	0x20005728
 8008de0:	20005834 	.word	0x20005834
 8008de4:	20005844 	.word	0x20005844
 8008de8:	20005830 	.word	0x20005830
 8008dec:	2000572c 	.word	0x2000572c
 8008df0:	e000ed04 	.word	0xe000ed04

08008df4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d018      	beq.n	8008e38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e06:	4b14      	ldr	r3, [pc, #80]	@ (8008e58 <vTaskDelay+0x64>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00b      	beq.n	8008e26 <vTaskDelay+0x32>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	60bb      	str	r3, [r7, #8]
}
 8008e20:	bf00      	nop
 8008e22:	bf00      	nop
 8008e24:	e7fd      	b.n	8008e22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e26:	f000 f885 	bl	8008f34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fe19 	bl	8009a64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e32:	f000 f88d 	bl	8008f50 <xTaskResumeAll>
 8008e36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d107      	bne.n	8008e4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008e3e:	4b07      	ldr	r3, [pc, #28]	@ (8008e5c <vTaskDelay+0x68>)
 8008e40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e44:	601a      	str	r2, [r3, #0]
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e4e:	bf00      	nop
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	20005850 	.word	0x20005850
 8008e5c:	e000ed04 	.word	0xe000ed04

08008e60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b08a      	sub	sp, #40	@ 0x28
 8008e64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e6e:	463a      	mov	r2, r7
 8008e70:	1d39      	adds	r1, r7, #4
 8008e72:	f107 0308 	add.w	r3, r7, #8
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7f7 fe40 	bl	8000afc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	9202      	str	r2, [sp, #8]
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	2300      	movs	r3, #0
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	460a      	mov	r2, r1
 8008e8e:	4921      	ldr	r1, [pc, #132]	@ (8008f14 <vTaskStartScheduler+0xb4>)
 8008e90:	4821      	ldr	r0, [pc, #132]	@ (8008f18 <vTaskStartScheduler+0xb8>)
 8008e92:	f7ff fdff 	bl	8008a94 <xTaskCreateStatic>
 8008e96:	4603      	mov	r3, r0
 8008e98:	4a20      	ldr	r2, [pc, #128]	@ (8008f1c <vTaskStartScheduler+0xbc>)
 8008e9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8008f1c <vTaskStartScheduler+0xbc>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	617b      	str	r3, [r7, #20]
 8008ea8:	e001      	b.n	8008eae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d11b      	bne.n	8008eec <vTaskStartScheduler+0x8c>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	613b      	str	r3, [r7, #16]
}
 8008ec6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ec8:	4b15      	ldr	r3, [pc, #84]	@ (8008f20 <vTaskStartScheduler+0xc0>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	334c      	adds	r3, #76	@ 0x4c
 8008ece:	4a15      	ldr	r2, [pc, #84]	@ (8008f24 <vTaskStartScheduler+0xc4>)
 8008ed0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ed2:	4b15      	ldr	r3, [pc, #84]	@ (8008f28 <vTaskStartScheduler+0xc8>)
 8008ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008eda:	4b14      	ldr	r3, [pc, #80]	@ (8008f2c <vTaskStartScheduler+0xcc>)
 8008edc:	2201      	movs	r2, #1
 8008ede:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ee0:	4b13      	ldr	r3, [pc, #76]	@ (8008f30 <vTaskStartScheduler+0xd0>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ee6:	f000 feb3 	bl	8009c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008eea:	e00f      	b.n	8008f0c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef2:	d10b      	bne.n	8008f0c <vTaskStartScheduler+0xac>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	60fb      	str	r3, [r7, #12]
}
 8008f06:	bf00      	nop
 8008f08:	bf00      	nop
 8008f0a:	e7fd      	b.n	8008f08 <vTaskStartScheduler+0xa8>
}
 8008f0c:	bf00      	nop
 8008f0e:	3718      	adds	r7, #24
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	080192d4 	.word	0x080192d4
 8008f18:	0800952d 	.word	0x0800952d
 8008f1c:	2000584c 	.word	0x2000584c
 8008f20:	20005728 	.word	0x20005728
 8008f24:	2000003c 	.word	0x2000003c
 8008f28:	20005848 	.word	0x20005848
 8008f2c:	20005834 	.word	0x20005834
 8008f30:	2000582c 	.word	0x2000582c

08008f34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f34:	b480      	push	{r7}
 8008f36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008f38:	4b04      	ldr	r3, [pc, #16]	@ (8008f4c <vTaskSuspendAll+0x18>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	4a03      	ldr	r2, [pc, #12]	@ (8008f4c <vTaskSuspendAll+0x18>)
 8008f40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008f42:	bf00      	nop
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	20005850 	.word	0x20005850

08008f50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f5e:	4b42      	ldr	r3, [pc, #264]	@ (8009068 <xTaskResumeAll+0x118>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10b      	bne.n	8008f7e <xTaskResumeAll+0x2e>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	603b      	str	r3, [r7, #0]
}
 8008f78:	bf00      	nop
 8008f7a:	bf00      	nop
 8008f7c:	e7fd      	b.n	8008f7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f7e:	f000 ff0b 	bl	8009d98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f82:	4b39      	ldr	r3, [pc, #228]	@ (8009068 <xTaskResumeAll+0x118>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	4a37      	ldr	r2, [pc, #220]	@ (8009068 <xTaskResumeAll+0x118>)
 8008f8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f8c:	4b36      	ldr	r3, [pc, #216]	@ (8009068 <xTaskResumeAll+0x118>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d161      	bne.n	8009058 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f94:	4b35      	ldr	r3, [pc, #212]	@ (800906c <xTaskResumeAll+0x11c>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d05d      	beq.n	8009058 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f9c:	e02e      	b.n	8008ffc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f9e:	4b34      	ldr	r3, [pc, #208]	@ (8009070 <xTaskResumeAll+0x120>)
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3318      	adds	r3, #24
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe fd61 	bl	8007a72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fe fd5c 	bl	8007a72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	409a      	lsls	r2, r3
 8008fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8009074 <xTaskResumeAll+0x124>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8009074 <xTaskResumeAll+0x124>)
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	4413      	add	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4a27      	ldr	r2, [pc, #156]	@ (8009078 <xTaskResumeAll+0x128>)
 8008fda:	441a      	add	r2, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	3304      	adds	r3, #4
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	f7fe fce8 	bl	80079b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fec:	4b23      	ldr	r3, [pc, #140]	@ (800907c <xTaskResumeAll+0x12c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d302      	bcc.n	8008ffc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008ff6:	4b22      	ldr	r3, [pc, #136]	@ (8009080 <xTaskResumeAll+0x130>)
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8009070 <xTaskResumeAll+0x120>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1cc      	bne.n	8008f9e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800900a:	f000 fb4b 	bl	80096a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800900e:	4b1d      	ldr	r3, [pc, #116]	@ (8009084 <xTaskResumeAll+0x134>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d010      	beq.n	800903c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800901a:	f000 f859 	bl	80090d0 <xTaskIncrementTick>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009024:	4b16      	ldr	r3, [pc, #88]	@ (8009080 <xTaskResumeAll+0x130>)
 8009026:	2201      	movs	r2, #1
 8009028:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	3b01      	subs	r3, #1
 800902e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1f1      	bne.n	800901a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009036:	4b13      	ldr	r3, [pc, #76]	@ (8009084 <xTaskResumeAll+0x134>)
 8009038:	2200      	movs	r2, #0
 800903a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800903c:	4b10      	ldr	r3, [pc, #64]	@ (8009080 <xTaskResumeAll+0x130>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d009      	beq.n	8009058 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009044:	2301      	movs	r3, #1
 8009046:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009048:	4b0f      	ldr	r3, [pc, #60]	@ (8009088 <xTaskResumeAll+0x138>)
 800904a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800904e:	601a      	str	r2, [r3, #0]
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009058:	f000 fed0 	bl	8009dfc <vPortExitCritical>

	return xAlreadyYielded;
 800905c:	68bb      	ldr	r3, [r7, #8]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	20005850 	.word	0x20005850
 800906c:	20005828 	.word	0x20005828
 8009070:	200057e8 	.word	0x200057e8
 8009074:	20005830 	.word	0x20005830
 8009078:	2000572c 	.word	0x2000572c
 800907c:	20005728 	.word	0x20005728
 8009080:	2000583c 	.word	0x2000583c
 8009084:	20005838 	.word	0x20005838
 8009088:	e000ed04 	.word	0xe000ed04

0800908c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009092:	4b05      	ldr	r3, [pc, #20]	@ (80090a8 <xTaskGetTickCount+0x1c>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009098:	687b      	ldr	r3, [r7, #4]
}
 800909a:	4618      	mov	r0, r3
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	2000582c 	.word	0x2000582c

080090ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090b2:	f000 ff51 	bl	8009f58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80090b6:	2300      	movs	r3, #0
 80090b8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80090ba:	4b04      	ldr	r3, [pc, #16]	@ (80090cc <xTaskGetTickCountFromISR+0x20>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090c0:	683b      	ldr	r3, [r7, #0]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	2000582c 	.word	0x2000582c

080090d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090d6:	2300      	movs	r3, #0
 80090d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090da:	4b4f      	ldr	r3, [pc, #316]	@ (8009218 <xTaskIncrementTick+0x148>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f040 808f 	bne.w	8009202 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090e4:	4b4d      	ldr	r3, [pc, #308]	@ (800921c <xTaskIncrementTick+0x14c>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3301      	adds	r3, #1
 80090ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090ec:	4a4b      	ldr	r2, [pc, #300]	@ (800921c <xTaskIncrementTick+0x14c>)
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d121      	bne.n	800913c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80090f8:	4b49      	ldr	r3, [pc, #292]	@ (8009220 <xTaskIncrementTick+0x150>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00b      	beq.n	800911a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	603b      	str	r3, [r7, #0]
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	e7fd      	b.n	8009116 <xTaskIncrementTick+0x46>
 800911a:	4b41      	ldr	r3, [pc, #260]	@ (8009220 <xTaskIncrementTick+0x150>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	4b40      	ldr	r3, [pc, #256]	@ (8009224 <xTaskIncrementTick+0x154>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a3e      	ldr	r2, [pc, #248]	@ (8009220 <xTaskIncrementTick+0x150>)
 8009126:	6013      	str	r3, [r2, #0]
 8009128:	4a3e      	ldr	r2, [pc, #248]	@ (8009224 <xTaskIncrementTick+0x154>)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6013      	str	r3, [r2, #0]
 800912e:	4b3e      	ldr	r3, [pc, #248]	@ (8009228 <xTaskIncrementTick+0x158>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3301      	adds	r3, #1
 8009134:	4a3c      	ldr	r2, [pc, #240]	@ (8009228 <xTaskIncrementTick+0x158>)
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	f000 fab4 	bl	80096a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800913c:	4b3b      	ldr	r3, [pc, #236]	@ (800922c <xTaskIncrementTick+0x15c>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	429a      	cmp	r2, r3
 8009144:	d348      	bcc.n	80091d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009146:	4b36      	ldr	r3, [pc, #216]	@ (8009220 <xTaskIncrementTick+0x150>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d104      	bne.n	800915a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009150:	4b36      	ldr	r3, [pc, #216]	@ (800922c <xTaskIncrementTick+0x15c>)
 8009152:	f04f 32ff 	mov.w	r2, #4294967295
 8009156:	601a      	str	r2, [r3, #0]
					break;
 8009158:	e03e      	b.n	80091d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800915a:	4b31      	ldr	r3, [pc, #196]	@ (8009220 <xTaskIncrementTick+0x150>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	429a      	cmp	r2, r3
 8009170:	d203      	bcs.n	800917a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009172:	4a2e      	ldr	r2, [pc, #184]	@ (800922c <xTaskIncrementTick+0x15c>)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009178:	e02e      	b.n	80091d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	3304      	adds	r3, #4
 800917e:	4618      	mov	r0, r3
 8009180:	f7fe fc77 	bl	8007a72 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009188:	2b00      	cmp	r3, #0
 800918a:	d004      	beq.n	8009196 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	3318      	adds	r3, #24
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe fc6e 	bl	8007a72 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919a:	2201      	movs	r2, #1
 800919c:	409a      	lsls	r2, r3
 800919e:	4b24      	ldr	r3, [pc, #144]	@ (8009230 <xTaskIncrementTick+0x160>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	4a22      	ldr	r2, [pc, #136]	@ (8009230 <xTaskIncrementTick+0x160>)
 80091a6:	6013      	str	r3, [r2, #0]
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ac:	4613      	mov	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	4413      	add	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4a1f      	ldr	r2, [pc, #124]	@ (8009234 <xTaskIncrementTick+0x164>)
 80091b6:	441a      	add	r2, r3
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	3304      	adds	r3, #4
 80091bc:	4619      	mov	r1, r3
 80091be:	4610      	mov	r0, r2
 80091c0:	f7fe fbfa 	bl	80079b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c8:	4b1b      	ldr	r3, [pc, #108]	@ (8009238 <xTaskIncrementTick+0x168>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d3b9      	bcc.n	8009146 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80091d2:	2301      	movs	r3, #1
 80091d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091d6:	e7b6      	b.n	8009146 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091d8:	4b17      	ldr	r3, [pc, #92]	@ (8009238 <xTaskIncrementTick+0x168>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091de:	4915      	ldr	r1, [pc, #84]	@ (8009234 <xTaskIncrementTick+0x164>)
 80091e0:	4613      	mov	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4413      	add	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	440b      	add	r3, r1
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d901      	bls.n	80091f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80091f0:	2301      	movs	r3, #1
 80091f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80091f4:	4b11      	ldr	r3, [pc, #68]	@ (800923c <xTaskIncrementTick+0x16c>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d007      	beq.n	800920c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80091fc:	2301      	movs	r3, #1
 80091fe:	617b      	str	r3, [r7, #20]
 8009200:	e004      	b.n	800920c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009202:	4b0f      	ldr	r3, [pc, #60]	@ (8009240 <xTaskIncrementTick+0x170>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3301      	adds	r3, #1
 8009208:	4a0d      	ldr	r2, [pc, #52]	@ (8009240 <xTaskIncrementTick+0x170>)
 800920a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800920c:	697b      	ldr	r3, [r7, #20]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20005850 	.word	0x20005850
 800921c:	2000582c 	.word	0x2000582c
 8009220:	200057e0 	.word	0x200057e0
 8009224:	200057e4 	.word	0x200057e4
 8009228:	20005840 	.word	0x20005840
 800922c:	20005848 	.word	0x20005848
 8009230:	20005830 	.word	0x20005830
 8009234:	2000572c 	.word	0x2000572c
 8009238:	20005728 	.word	0x20005728
 800923c:	2000583c 	.word	0x2000583c
 8009240:	20005838 	.word	0x20005838

08009244 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009244:	b480      	push	{r7}
 8009246:	b087      	sub	sp, #28
 8009248:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800924a:	4b2a      	ldr	r3, [pc, #168]	@ (80092f4 <vTaskSwitchContext+0xb0>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d003      	beq.n	800925a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009252:	4b29      	ldr	r3, [pc, #164]	@ (80092f8 <vTaskSwitchContext+0xb4>)
 8009254:	2201      	movs	r2, #1
 8009256:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009258:	e045      	b.n	80092e6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800925a:	4b27      	ldr	r3, [pc, #156]	@ (80092f8 <vTaskSwitchContext+0xb4>)
 800925c:	2200      	movs	r2, #0
 800925e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009260:	4b26      	ldr	r3, [pc, #152]	@ (80092fc <vTaskSwitchContext+0xb8>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	fab3 f383 	clz	r3, r3
 800926c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800926e:	7afb      	ldrb	r3, [r7, #11]
 8009270:	f1c3 031f 	rsb	r3, r3, #31
 8009274:	617b      	str	r3, [r7, #20]
 8009276:	4922      	ldr	r1, [pc, #136]	@ (8009300 <vTaskSwitchContext+0xbc>)
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	4613      	mov	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	440b      	add	r3, r1
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10b      	bne.n	80092a2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	607b      	str	r3, [r7, #4]
}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	e7fd      	b.n	800929e <vTaskSwitchContext+0x5a>
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	4613      	mov	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	4a14      	ldr	r2, [pc, #80]	@ (8009300 <vTaskSwitchContext+0xbc>)
 80092ae:	4413      	add	r3, r2
 80092b0:	613b      	str	r3, [r7, #16]
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	605a      	str	r2, [r3, #4]
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	3308      	adds	r3, #8
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d104      	bne.n	80092d2 <vTaskSwitchContext+0x8e>
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	605a      	str	r2, [r3, #4]
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	4a0a      	ldr	r2, [pc, #40]	@ (8009304 <vTaskSwitchContext+0xc0>)
 80092da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092dc:	4b09      	ldr	r3, [pc, #36]	@ (8009304 <vTaskSwitchContext+0xc0>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	334c      	adds	r3, #76	@ 0x4c
 80092e2:	4a09      	ldr	r2, [pc, #36]	@ (8009308 <vTaskSwitchContext+0xc4>)
 80092e4:	6013      	str	r3, [r2, #0]
}
 80092e6:	bf00      	nop
 80092e8:	371c      	adds	r7, #28
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	20005850 	.word	0x20005850
 80092f8:	2000583c 	.word	0x2000583c
 80092fc:	20005830 	.word	0x20005830
 8009300:	2000572c 	.word	0x2000572c
 8009304:	20005728 	.word	0x20005728
 8009308:	2000003c 	.word	0x2000003c

0800930c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10b      	bne.n	8009334 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800931c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009320:	f383 8811 	msr	BASEPRI, r3
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	60fb      	str	r3, [r7, #12]
}
 800932e:	bf00      	nop
 8009330:	bf00      	nop
 8009332:	e7fd      	b.n	8009330 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009334:	4b07      	ldr	r3, [pc, #28]	@ (8009354 <vTaskPlaceOnEventList+0x48>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	3318      	adds	r3, #24
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7fe fb5f 	bl	8007a00 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009342:	2101      	movs	r1, #1
 8009344:	6838      	ldr	r0, [r7, #0]
 8009346:	f000 fb8d 	bl	8009a64 <prvAddCurrentTaskToDelayedList>
}
 800934a:	bf00      	nop
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	20005728 	.word	0x20005728

08009358 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d10b      	bne.n	8009386 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	60fb      	str	r3, [r7, #12]
}
 8009380:	bf00      	nop
 8009382:	bf00      	nop
 8009384:	e7fd      	b.n	8009382 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	3318      	adds	r3, #24
 800938a:	4618      	mov	r0, r3
 800938c:	f7fe fb71 	bl	8007a72 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009390:	4b1d      	ldr	r3, [pc, #116]	@ (8009408 <xTaskRemoveFromEventList+0xb0>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d11c      	bne.n	80093d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	3304      	adds	r3, #4
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe fb68 	bl	8007a72 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a6:	2201      	movs	r2, #1
 80093a8:	409a      	lsls	r2, r3
 80093aa:	4b18      	ldr	r3, [pc, #96]	@ (800940c <xTaskRemoveFromEventList+0xb4>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	4a16      	ldr	r2, [pc, #88]	@ (800940c <xTaskRemoveFromEventList+0xb4>)
 80093b2:	6013      	str	r3, [r2, #0]
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093b8:	4613      	mov	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4a13      	ldr	r2, [pc, #76]	@ (8009410 <xTaskRemoveFromEventList+0xb8>)
 80093c2:	441a      	add	r2, r3
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	3304      	adds	r3, #4
 80093c8:	4619      	mov	r1, r3
 80093ca:	4610      	mov	r0, r2
 80093cc:	f7fe faf4 	bl	80079b8 <vListInsertEnd>
 80093d0:	e005      	b.n	80093de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	3318      	adds	r3, #24
 80093d6:	4619      	mov	r1, r3
 80093d8:	480e      	ldr	r0, [pc, #56]	@ (8009414 <xTaskRemoveFromEventList+0xbc>)
 80093da:	f7fe faed 	bl	80079b8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009418 <xTaskRemoveFromEventList+0xc0>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d905      	bls.n	80093f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093ec:	2301      	movs	r3, #1
 80093ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093f0:	4b0a      	ldr	r3, [pc, #40]	@ (800941c <xTaskRemoveFromEventList+0xc4>)
 80093f2:	2201      	movs	r2, #1
 80093f4:	601a      	str	r2, [r3, #0]
 80093f6:	e001      	b.n	80093fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80093f8:	2300      	movs	r3, #0
 80093fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093fc:	697b      	ldr	r3, [r7, #20]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20005850 	.word	0x20005850
 800940c:	20005830 	.word	0x20005830
 8009410:	2000572c 	.word	0x2000572c
 8009414:	200057e8 	.word	0x200057e8
 8009418:	20005728 	.word	0x20005728
 800941c:	2000583c 	.word	0x2000583c

08009420 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009428:	4b06      	ldr	r3, [pc, #24]	@ (8009444 <vTaskInternalSetTimeOutState+0x24>)
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009430:	4b05      	ldr	r3, [pc, #20]	@ (8009448 <vTaskInternalSetTimeOutState+0x28>)
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	605a      	str	r2, [r3, #4]
}
 8009438:	bf00      	nop
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	20005840 	.word	0x20005840
 8009448:	2000582c 	.word	0x2000582c

0800944c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b088      	sub	sp, #32
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10b      	bne.n	8009474 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800945c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009460:	f383 8811 	msr	BASEPRI, r3
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	613b      	str	r3, [r7, #16]
}
 800946e:	bf00      	nop
 8009470:	bf00      	nop
 8009472:	e7fd      	b.n	8009470 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10b      	bne.n	8009492 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800947a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	60fb      	str	r3, [r7, #12]
}
 800948c:	bf00      	nop
 800948e:	bf00      	nop
 8009490:	e7fd      	b.n	800948e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009492:	f000 fc81 	bl	8009d98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009496:	4b1d      	ldr	r3, [pc, #116]	@ (800950c <xTaskCheckForTimeOut+0xc0>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	69ba      	ldr	r2, [r7, #24]
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ae:	d102      	bne.n	80094b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80094b0:	2300      	movs	r3, #0
 80094b2:	61fb      	str	r3, [r7, #28]
 80094b4:	e023      	b.n	80094fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	4b15      	ldr	r3, [pc, #84]	@ (8009510 <xTaskCheckForTimeOut+0xc4>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d007      	beq.n	80094d2 <xTaskCheckForTimeOut+0x86>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	69ba      	ldr	r2, [r7, #24]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d302      	bcc.n	80094d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80094cc:	2301      	movs	r3, #1
 80094ce:	61fb      	str	r3, [r7, #28]
 80094d0:	e015      	b.n	80094fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d20b      	bcs.n	80094f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	1ad2      	subs	r2, r2, r3
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7ff ff99 	bl	8009420 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094ee:	2300      	movs	r3, #0
 80094f0:	61fb      	str	r3, [r7, #28]
 80094f2:	e004      	b.n	80094fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	2200      	movs	r2, #0
 80094f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094fa:	2301      	movs	r3, #1
 80094fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094fe:	f000 fc7d 	bl	8009dfc <vPortExitCritical>

	return xReturn;
 8009502:	69fb      	ldr	r3, [r7, #28]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3720      	adds	r7, #32
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	2000582c 	.word	0x2000582c
 8009510:	20005840 	.word	0x20005840

08009514 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009514:	b480      	push	{r7}
 8009516:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009518:	4b03      	ldr	r3, [pc, #12]	@ (8009528 <vTaskMissedYield+0x14>)
 800951a:	2201      	movs	r2, #1
 800951c:	601a      	str	r2, [r3, #0]
}
 800951e:	bf00      	nop
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	2000583c 	.word	0x2000583c

0800952c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009534:	f000 f852 	bl	80095dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009538:	4b06      	ldr	r3, [pc, #24]	@ (8009554 <prvIdleTask+0x28>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b01      	cmp	r3, #1
 800953e:	d9f9      	bls.n	8009534 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009540:	4b05      	ldr	r3, [pc, #20]	@ (8009558 <prvIdleTask+0x2c>)
 8009542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009546:	601a      	str	r2, [r3, #0]
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009550:	e7f0      	b.n	8009534 <prvIdleTask+0x8>
 8009552:	bf00      	nop
 8009554:	2000572c 	.word	0x2000572c
 8009558:	e000ed04 	.word	0xe000ed04

0800955c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009562:	2300      	movs	r3, #0
 8009564:	607b      	str	r3, [r7, #4]
 8009566:	e00c      	b.n	8009582 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	4613      	mov	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4a12      	ldr	r2, [pc, #72]	@ (80095bc <prvInitialiseTaskLists+0x60>)
 8009574:	4413      	add	r3, r2
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe f9f1 	bl	800795e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3301      	adds	r3, #1
 8009580:	607b      	str	r3, [r7, #4]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b06      	cmp	r3, #6
 8009586:	d9ef      	bls.n	8009568 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009588:	480d      	ldr	r0, [pc, #52]	@ (80095c0 <prvInitialiseTaskLists+0x64>)
 800958a:	f7fe f9e8 	bl	800795e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800958e:	480d      	ldr	r0, [pc, #52]	@ (80095c4 <prvInitialiseTaskLists+0x68>)
 8009590:	f7fe f9e5 	bl	800795e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009594:	480c      	ldr	r0, [pc, #48]	@ (80095c8 <prvInitialiseTaskLists+0x6c>)
 8009596:	f7fe f9e2 	bl	800795e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800959a:	480c      	ldr	r0, [pc, #48]	@ (80095cc <prvInitialiseTaskLists+0x70>)
 800959c:	f7fe f9df 	bl	800795e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80095a0:	480b      	ldr	r0, [pc, #44]	@ (80095d0 <prvInitialiseTaskLists+0x74>)
 80095a2:	f7fe f9dc 	bl	800795e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80095a6:	4b0b      	ldr	r3, [pc, #44]	@ (80095d4 <prvInitialiseTaskLists+0x78>)
 80095a8:	4a05      	ldr	r2, [pc, #20]	@ (80095c0 <prvInitialiseTaskLists+0x64>)
 80095aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80095ac:	4b0a      	ldr	r3, [pc, #40]	@ (80095d8 <prvInitialiseTaskLists+0x7c>)
 80095ae:	4a05      	ldr	r2, [pc, #20]	@ (80095c4 <prvInitialiseTaskLists+0x68>)
 80095b0:	601a      	str	r2, [r3, #0]
}
 80095b2:	bf00      	nop
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	2000572c 	.word	0x2000572c
 80095c0:	200057b8 	.word	0x200057b8
 80095c4:	200057cc 	.word	0x200057cc
 80095c8:	200057e8 	.word	0x200057e8
 80095cc:	200057fc 	.word	0x200057fc
 80095d0:	20005814 	.word	0x20005814
 80095d4:	200057e0 	.word	0x200057e0
 80095d8:	200057e4 	.word	0x200057e4

080095dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095e2:	e019      	b.n	8009618 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80095e4:	f000 fbd8 	bl	8009d98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095e8:	4b10      	ldr	r3, [pc, #64]	@ (800962c <prvCheckTasksWaitingTermination+0x50>)
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	3304      	adds	r3, #4
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fe fa3c 	bl	8007a72 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009630 <prvCheckTasksWaitingTermination+0x54>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3b01      	subs	r3, #1
 8009600:	4a0b      	ldr	r2, [pc, #44]	@ (8009630 <prvCheckTasksWaitingTermination+0x54>)
 8009602:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009604:	4b0b      	ldr	r3, [pc, #44]	@ (8009634 <prvCheckTasksWaitingTermination+0x58>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	3b01      	subs	r3, #1
 800960a:	4a0a      	ldr	r2, [pc, #40]	@ (8009634 <prvCheckTasksWaitingTermination+0x58>)
 800960c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800960e:	f000 fbf5 	bl	8009dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f810 	bl	8009638 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009618:	4b06      	ldr	r3, [pc, #24]	@ (8009634 <prvCheckTasksWaitingTermination+0x58>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1e1      	bne.n	80095e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009620:	bf00      	nop
 8009622:	bf00      	nop
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	200057fc 	.word	0x200057fc
 8009630:	20005828 	.word	0x20005828
 8009634:	20005810 	.word	0x20005810

08009638 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	334c      	adds	r3, #76	@ 0x4c
 8009644:	4618      	mov	r0, r3
 8009646:	f00e fbc3 	bl	8017dd0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009650:	2b00      	cmp	r3, #0
 8009652:	d108      	bne.n	8009666 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fd8d 	bl	800a178 <vPortFree>
				vPortFree( pxTCB );
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fd8a 	bl	800a178 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009664:	e019      	b.n	800969a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800966c:	2b01      	cmp	r3, #1
 800966e:	d103      	bne.n	8009678 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fd81 	bl	800a178 <vPortFree>
	}
 8009676:	e010      	b.n	800969a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800967e:	2b02      	cmp	r3, #2
 8009680:	d00b      	beq.n	800969a <prvDeleteTCB+0x62>
	__asm volatile
 8009682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	60fb      	str	r3, [r7, #12]
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop
 8009698:	e7fd      	b.n	8009696 <prvDeleteTCB+0x5e>
	}
 800969a:	bf00      	nop
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
	...

080096a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096aa:	4b0c      	ldr	r3, [pc, #48]	@ (80096dc <prvResetNextTaskUnblockTime+0x38>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d104      	bne.n	80096be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096b4:	4b0a      	ldr	r3, [pc, #40]	@ (80096e0 <prvResetNextTaskUnblockTime+0x3c>)
 80096b6:	f04f 32ff 	mov.w	r2, #4294967295
 80096ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80096bc:	e008      	b.n	80096d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096be:	4b07      	ldr	r3, [pc, #28]	@ (80096dc <prvResetNextTaskUnblockTime+0x38>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	4a04      	ldr	r2, [pc, #16]	@ (80096e0 <prvResetNextTaskUnblockTime+0x3c>)
 80096ce:	6013      	str	r3, [r2, #0]
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	200057e0 	.word	0x200057e0
 80096e0:	20005848 	.word	0x20005848

080096e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009718 <xTaskGetSchedulerState+0x34>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d102      	bne.n	80096f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096f2:	2301      	movs	r3, #1
 80096f4:	607b      	str	r3, [r7, #4]
 80096f6:	e008      	b.n	800970a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096f8:	4b08      	ldr	r3, [pc, #32]	@ (800971c <xTaskGetSchedulerState+0x38>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d102      	bne.n	8009706 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009700:	2302      	movs	r3, #2
 8009702:	607b      	str	r3, [r7, #4]
 8009704:	e001      	b.n	800970a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009706:	2300      	movs	r3, #0
 8009708:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800970a:	687b      	ldr	r3, [r7, #4]
	}
 800970c:	4618      	mov	r0, r3
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	20005834 	.word	0x20005834
 800971c:	20005850 	.word	0x20005850

08009720 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800972c:	2300      	movs	r3, #0
 800972e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d05e      	beq.n	80097f4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800973a:	4b31      	ldr	r3, [pc, #196]	@ (8009800 <xTaskPriorityInherit+0xe0>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009740:	429a      	cmp	r2, r3
 8009742:	d24e      	bcs.n	80097e2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	2b00      	cmp	r3, #0
 800974a:	db06      	blt.n	800975a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800974c:	4b2c      	ldr	r3, [pc, #176]	@ (8009800 <xTaskPriorityInherit+0xe0>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009752:	f1c3 0207 	rsb	r2, r3, #7
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	6959      	ldr	r1, [r3, #20]
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009762:	4613      	mov	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	4413      	add	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4a26      	ldr	r2, [pc, #152]	@ (8009804 <xTaskPriorityInherit+0xe4>)
 800976c:	4413      	add	r3, r2
 800976e:	4299      	cmp	r1, r3
 8009770:	d12f      	bne.n	80097d2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	3304      	adds	r3, #4
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe f97b 	bl	8007a72 <uxListRemove>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10a      	bne.n	8009798 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009786:	2201      	movs	r2, #1
 8009788:	fa02 f303 	lsl.w	r3, r2, r3
 800978c:	43da      	mvns	r2, r3
 800978e:	4b1e      	ldr	r3, [pc, #120]	@ (8009808 <xTaskPriorityInherit+0xe8>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4013      	ands	r3, r2
 8009794:	4a1c      	ldr	r2, [pc, #112]	@ (8009808 <xTaskPriorityInherit+0xe8>)
 8009796:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009798:	4b19      	ldr	r3, [pc, #100]	@ (8009800 <xTaskPriorityInherit+0xe0>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a6:	2201      	movs	r2, #1
 80097a8:	409a      	lsls	r2, r3
 80097aa:	4b17      	ldr	r3, [pc, #92]	@ (8009808 <xTaskPriorityInherit+0xe8>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	4a15      	ldr	r2, [pc, #84]	@ (8009808 <xTaskPriorityInherit+0xe8>)
 80097b2:	6013      	str	r3, [r2, #0]
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097b8:	4613      	mov	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4a10      	ldr	r2, [pc, #64]	@ (8009804 <xTaskPriorityInherit+0xe4>)
 80097c2:	441a      	add	r2, r3
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	3304      	adds	r3, #4
 80097c8:	4619      	mov	r1, r3
 80097ca:	4610      	mov	r0, r2
 80097cc:	f7fe f8f4 	bl	80079b8 <vListInsertEnd>
 80097d0:	e004      	b.n	80097dc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80097d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009800 <xTaskPriorityInherit+0xe0>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80097dc:	2301      	movs	r3, #1
 80097de:	60fb      	str	r3, [r7, #12]
 80097e0:	e008      	b.n	80097f4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097e6:	4b06      	ldr	r3, [pc, #24]	@ (8009800 <xTaskPriorityInherit+0xe0>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d201      	bcs.n	80097f4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80097f0:	2301      	movs	r3, #1
 80097f2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097f4:	68fb      	ldr	r3, [r7, #12]
	}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	20005728 	.word	0x20005728
 8009804:	2000572c 	.word	0x2000572c
 8009808:	20005830 	.word	0x20005830

0800980c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009818:	2300      	movs	r3, #0
 800981a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d070      	beq.n	8009904 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009822:	4b3b      	ldr	r3, [pc, #236]	@ (8009910 <xTaskPriorityDisinherit+0x104>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	429a      	cmp	r2, r3
 800982a:	d00b      	beq.n	8009844 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800982c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009830:	f383 8811 	msr	BASEPRI, r3
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	60fb      	str	r3, [r7, #12]
}
 800983e:	bf00      	nop
 8009840:	bf00      	nop
 8009842:	e7fd      	b.n	8009840 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10b      	bne.n	8009864 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800984c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009850:	f383 8811 	msr	BASEPRI, r3
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	60bb      	str	r3, [r7, #8]
}
 800985e:	bf00      	nop
 8009860:	bf00      	nop
 8009862:	e7fd      	b.n	8009860 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009868:	1e5a      	subs	r2, r3, #1
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009876:	429a      	cmp	r2, r3
 8009878:	d044      	beq.n	8009904 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800987e:	2b00      	cmp	r3, #0
 8009880:	d140      	bne.n	8009904 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	3304      	adds	r3, #4
 8009886:	4618      	mov	r0, r3
 8009888:	f7fe f8f3 	bl	8007a72 <uxListRemove>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d115      	bne.n	80098be <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009896:	491f      	ldr	r1, [pc, #124]	@ (8009914 <xTaskPriorityDisinherit+0x108>)
 8009898:	4613      	mov	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4413      	add	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	440b      	add	r3, r1
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10a      	bne.n	80098be <xTaskPriorityDisinherit+0xb2>
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ac:	2201      	movs	r2, #1
 80098ae:	fa02 f303 	lsl.w	r3, r2, r3
 80098b2:	43da      	mvns	r2, r3
 80098b4:	4b18      	ldr	r3, [pc, #96]	@ (8009918 <xTaskPriorityDisinherit+0x10c>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4013      	ands	r3, r2
 80098ba:	4a17      	ldr	r2, [pc, #92]	@ (8009918 <xTaskPriorityDisinherit+0x10c>)
 80098bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ca:	f1c3 0207 	rsb	r2, r3, #7
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d6:	2201      	movs	r2, #1
 80098d8:	409a      	lsls	r2, r3
 80098da:	4b0f      	ldr	r3, [pc, #60]	@ (8009918 <xTaskPriorityDisinherit+0x10c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4313      	orrs	r3, r2
 80098e0:	4a0d      	ldr	r2, [pc, #52]	@ (8009918 <xTaskPriorityDisinherit+0x10c>)
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098e8:	4613      	mov	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	4a08      	ldr	r2, [pc, #32]	@ (8009914 <xTaskPriorityDisinherit+0x108>)
 80098f2:	441a      	add	r2, r3
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	3304      	adds	r3, #4
 80098f8:	4619      	mov	r1, r3
 80098fa:	4610      	mov	r0, r2
 80098fc:	f7fe f85c 	bl	80079b8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009900:	2301      	movs	r3, #1
 8009902:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009904:	697b      	ldr	r3, [r7, #20]
	}
 8009906:	4618      	mov	r0, r3
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20005728 	.word	0x20005728
 8009914:	2000572c 	.word	0x2000572c
 8009918:	20005830 	.word	0x20005830

0800991c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800991c:	b580      	push	{r7, lr}
 800991e:	b088      	sub	sp, #32
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800992a:	2301      	movs	r3, #1
 800992c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d079      	beq.n	8009a28 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10b      	bne.n	8009954 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	60fb      	str	r3, [r7, #12]
}
 800994e:	bf00      	nop
 8009950:	bf00      	nop
 8009952:	e7fd      	b.n	8009950 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	429a      	cmp	r2, r3
 800995c:	d902      	bls.n	8009964 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	61fb      	str	r3, [r7, #28]
 8009962:	e002      	b.n	800996a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009968:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800996e:	69fa      	ldr	r2, [r7, #28]
 8009970:	429a      	cmp	r2, r3
 8009972:	d059      	beq.n	8009a28 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	429a      	cmp	r2, r3
 800997c:	d154      	bne.n	8009a28 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800997e:	4b2c      	ldr	r3, [pc, #176]	@ (8009a30 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	69ba      	ldr	r2, [r7, #24]
 8009984:	429a      	cmp	r2, r3
 8009986:	d10b      	bne.n	80099a0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800998c:	f383 8811 	msr	BASEPRI, r3
 8009990:	f3bf 8f6f 	isb	sy
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	60bb      	str	r3, [r7, #8]
}
 800999a:	bf00      	nop
 800999c:	bf00      	nop
 800999e:	e7fd      	b.n	800999c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	69fa      	ldr	r2, [r7, #28]
 80099aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	db04      	blt.n	80099be <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	f1c3 0207 	rsb	r2, r3, #7
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	6959      	ldr	r1, [r3, #20]
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	4613      	mov	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4413      	add	r3, r2
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	4a19      	ldr	r2, [pc, #100]	@ (8009a34 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80099ce:	4413      	add	r3, r2
 80099d0:	4299      	cmp	r1, r3
 80099d2:	d129      	bne.n	8009a28 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	3304      	adds	r3, #4
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fe f84a 	bl	8007a72 <uxListRemove>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10a      	bne.n	80099fa <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e8:	2201      	movs	r2, #1
 80099ea:	fa02 f303 	lsl.w	r3, r2, r3
 80099ee:	43da      	mvns	r2, r3
 80099f0:	4b11      	ldr	r3, [pc, #68]	@ (8009a38 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4013      	ands	r3, r2
 80099f6:	4a10      	ldr	r2, [pc, #64]	@ (8009a38 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80099f8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fe:	2201      	movs	r2, #1
 8009a00:	409a      	lsls	r2, r3
 8009a02:	4b0d      	ldr	r3, [pc, #52]	@ (8009a38 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	4a0b      	ldr	r2, [pc, #44]	@ (8009a38 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009a0a:	6013      	str	r3, [r2, #0]
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a10:	4613      	mov	r3, r2
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4413      	add	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4a06      	ldr	r2, [pc, #24]	@ (8009a34 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009a1a:	441a      	add	r2, r3
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	3304      	adds	r3, #4
 8009a20:	4619      	mov	r1, r3
 8009a22:	4610      	mov	r0, r2
 8009a24:	f7fd ffc8 	bl	80079b8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a28:	bf00      	nop
 8009a2a:	3720      	adds	r7, #32
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	20005728 	.word	0x20005728
 8009a34:	2000572c 	.word	0x2000572c
 8009a38:	20005830 	.word	0x20005830

08009a3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009a3c:	b480      	push	{r7}
 8009a3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009a40:	4b07      	ldr	r3, [pc, #28]	@ (8009a60 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d004      	beq.n	8009a52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009a48:	4b05      	ldr	r3, [pc, #20]	@ (8009a60 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009a4e:	3201      	adds	r2, #1
 8009a50:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8009a52:	4b03      	ldr	r3, [pc, #12]	@ (8009a60 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a54:	681b      	ldr	r3, [r3, #0]
	}
 8009a56:	4618      	mov	r0, r3
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	20005728 	.word	0x20005728

08009a64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a6e:	4b29      	ldr	r3, [pc, #164]	@ (8009b14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a74:	4b28      	ldr	r3, [pc, #160]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3304      	adds	r3, #4
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fd fff9 	bl	8007a72 <uxListRemove>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10b      	bne.n	8009a9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009a86:	4b24      	ldr	r3, [pc, #144]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a92:	43da      	mvns	r2, r3
 8009a94:	4b21      	ldr	r3, [pc, #132]	@ (8009b1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4013      	ands	r3, r2
 8009a9a:	4a20      	ldr	r2, [pc, #128]	@ (8009b1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa4:	d10a      	bne.n	8009abc <prvAddCurrentTaskToDelayedList+0x58>
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d007      	beq.n	8009abc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aac:	4b1a      	ldr	r3, [pc, #104]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	481a      	ldr	r0, [pc, #104]	@ (8009b20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009ab6:	f7fd ff7f 	bl	80079b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009aba:	e026      	b.n	8009b0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ac4:	4b14      	ldr	r3, [pc, #80]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d209      	bcs.n	8009ae8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ad4:	4b13      	ldr	r3, [pc, #76]	@ (8009b24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	3304      	adds	r3, #4
 8009ade:	4619      	mov	r1, r3
 8009ae0:	4610      	mov	r0, r2
 8009ae2:	f7fd ff8d 	bl	8007a00 <vListInsert>
}
 8009ae6:	e010      	b.n	8009b0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8009b28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	4b0a      	ldr	r3, [pc, #40]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	3304      	adds	r3, #4
 8009af2:	4619      	mov	r1, r3
 8009af4:	4610      	mov	r0, r2
 8009af6:	f7fd ff83 	bl	8007a00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009afa:	4b0c      	ldr	r3, [pc, #48]	@ (8009b2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d202      	bcs.n	8009b0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009b04:	4a09      	ldr	r2, [pc, #36]	@ (8009b2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	6013      	str	r3, [r2, #0]
}
 8009b0a:	bf00      	nop
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	2000582c 	.word	0x2000582c
 8009b18:	20005728 	.word	0x20005728
 8009b1c:	20005830 	.word	0x20005830
 8009b20:	20005814 	.word	0x20005814
 8009b24:	200057e4 	.word	0x200057e4
 8009b28:	200057e0 	.word	0x200057e0
 8009b2c:	20005848 	.word	0x20005848

08009b30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	3b04      	subs	r3, #4
 8009b40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009b48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	3b04      	subs	r3, #4
 8009b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	f023 0201 	bic.w	r2, r3, #1
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	3b04      	subs	r3, #4
 8009b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b60:	4a0c      	ldr	r2, [pc, #48]	@ (8009b94 <pxPortInitialiseStack+0x64>)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	3b14      	subs	r3, #20
 8009b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	3b04      	subs	r3, #4
 8009b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f06f 0202 	mvn.w	r2, #2
 8009b7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	3b20      	subs	r3, #32
 8009b84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b86:	68fb      	ldr	r3, [r7, #12]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	08009b99 	.word	0x08009b99

08009b98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ba2:	4b13      	ldr	r3, [pc, #76]	@ (8009bf0 <prvTaskExitError+0x58>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009baa:	d00b      	beq.n	8009bc4 <prvTaskExitError+0x2c>
	__asm volatile
 8009bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb0:	f383 8811 	msr	BASEPRI, r3
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	60fb      	str	r3, [r7, #12]
}
 8009bbe:	bf00      	nop
 8009bc0:	bf00      	nop
 8009bc2:	e7fd      	b.n	8009bc0 <prvTaskExitError+0x28>
	__asm volatile
 8009bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	60bb      	str	r3, [r7, #8]
}
 8009bd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bd8:	bf00      	nop
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d0fc      	beq.n	8009bda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009be0:	bf00      	nop
 8009be2:	bf00      	nop
 8009be4:	3714      	adds	r7, #20
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	20000020 	.word	0x20000020
	...

08009c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c00:	4b07      	ldr	r3, [pc, #28]	@ (8009c20 <pxCurrentTCBConst2>)
 8009c02:	6819      	ldr	r1, [r3, #0]
 8009c04:	6808      	ldr	r0, [r1, #0]
 8009c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0a:	f380 8809 	msr	PSP, r0
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f04f 0000 	mov.w	r0, #0
 8009c16:	f380 8811 	msr	BASEPRI, r0
 8009c1a:	4770      	bx	lr
 8009c1c:	f3af 8000 	nop.w

08009c20 <pxCurrentTCBConst2>:
 8009c20:	20005728 	.word	0x20005728
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c24:	bf00      	nop
 8009c26:	bf00      	nop

08009c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c28:	4808      	ldr	r0, [pc, #32]	@ (8009c4c <prvPortStartFirstTask+0x24>)
 8009c2a:	6800      	ldr	r0, [r0, #0]
 8009c2c:	6800      	ldr	r0, [r0, #0]
 8009c2e:	f380 8808 	msr	MSP, r0
 8009c32:	f04f 0000 	mov.w	r0, #0
 8009c36:	f380 8814 	msr	CONTROL, r0
 8009c3a:	b662      	cpsie	i
 8009c3c:	b661      	cpsie	f
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	df00      	svc	0
 8009c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c4a:	bf00      	nop
 8009c4c:	e000ed08 	.word	0xe000ed08

08009c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c56:	4b47      	ldr	r3, [pc, #284]	@ (8009d74 <xPortStartScheduler+0x124>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a47      	ldr	r2, [pc, #284]	@ (8009d78 <xPortStartScheduler+0x128>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d10b      	bne.n	8009c78 <xPortStartScheduler+0x28>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	613b      	str	r3, [r7, #16]
}
 8009c72:	bf00      	nop
 8009c74:	bf00      	nop
 8009c76:	e7fd      	b.n	8009c74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c78:	4b3e      	ldr	r3, [pc, #248]	@ (8009d74 <xPortStartScheduler+0x124>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a3f      	ldr	r2, [pc, #252]	@ (8009d7c <xPortStartScheduler+0x12c>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d10b      	bne.n	8009c9a <xPortStartScheduler+0x4a>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	60fb      	str	r3, [r7, #12]
}
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop
 8009c98:	e7fd      	b.n	8009c96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c9a:	4b39      	ldr	r3, [pc, #228]	@ (8009d80 <xPortStartScheduler+0x130>)
 8009c9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	22ff      	movs	r2, #255	@ 0xff
 8009caa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009cb4:	78fb      	ldrb	r3, [r7, #3]
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009cbc:	b2da      	uxtb	r2, r3
 8009cbe:	4b31      	ldr	r3, [pc, #196]	@ (8009d84 <xPortStartScheduler+0x134>)
 8009cc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009cc2:	4b31      	ldr	r3, [pc, #196]	@ (8009d88 <xPortStartScheduler+0x138>)
 8009cc4:	2207      	movs	r2, #7
 8009cc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cc8:	e009      	b.n	8009cde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009cca:	4b2f      	ldr	r3, [pc, #188]	@ (8009d88 <xPortStartScheduler+0x138>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8009d88 <xPortStartScheduler+0x138>)
 8009cd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009cd4:	78fb      	ldrb	r3, [r7, #3]
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	005b      	lsls	r3, r3, #1
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cde:	78fb      	ldrb	r3, [r7, #3]
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ce6:	2b80      	cmp	r3, #128	@ 0x80
 8009ce8:	d0ef      	beq.n	8009cca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009cea:	4b27      	ldr	r3, [pc, #156]	@ (8009d88 <xPortStartScheduler+0x138>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f1c3 0307 	rsb	r3, r3, #7
 8009cf2:	2b04      	cmp	r3, #4
 8009cf4:	d00b      	beq.n	8009d0e <xPortStartScheduler+0xbe>
	__asm volatile
 8009cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cfa:	f383 8811 	msr	BASEPRI, r3
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f3bf 8f4f 	dsb	sy
 8009d06:	60bb      	str	r3, [r7, #8]
}
 8009d08:	bf00      	nop
 8009d0a:	bf00      	nop
 8009d0c:	e7fd      	b.n	8009d0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8009d88 <xPortStartScheduler+0x138>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	021b      	lsls	r3, r3, #8
 8009d14:	4a1c      	ldr	r2, [pc, #112]	@ (8009d88 <xPortStartScheduler+0x138>)
 8009d16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d18:	4b1b      	ldr	r3, [pc, #108]	@ (8009d88 <xPortStartScheduler+0x138>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d20:	4a19      	ldr	r2, [pc, #100]	@ (8009d88 <xPortStartScheduler+0x138>)
 8009d22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d2c:	4b17      	ldr	r3, [pc, #92]	@ (8009d8c <xPortStartScheduler+0x13c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a16      	ldr	r2, [pc, #88]	@ (8009d8c <xPortStartScheduler+0x13c>)
 8009d32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009d36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d38:	4b14      	ldr	r3, [pc, #80]	@ (8009d8c <xPortStartScheduler+0x13c>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a13      	ldr	r2, [pc, #76]	@ (8009d8c <xPortStartScheduler+0x13c>)
 8009d3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009d42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d44:	f000 f8da 	bl	8009efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d48:	4b11      	ldr	r3, [pc, #68]	@ (8009d90 <xPortStartScheduler+0x140>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d4e:	f000 f8f9 	bl	8009f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d52:	4b10      	ldr	r3, [pc, #64]	@ (8009d94 <xPortStartScheduler+0x144>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a0f      	ldr	r2, [pc, #60]	@ (8009d94 <xPortStartScheduler+0x144>)
 8009d58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009d5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d5e:	f7ff ff63 	bl	8009c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d62:	f7ff fa6f 	bl	8009244 <vTaskSwitchContext>
	prvTaskExitError();
 8009d66:	f7ff ff17 	bl	8009b98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3718      	adds	r7, #24
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	e000ed00 	.word	0xe000ed00
 8009d78:	410fc271 	.word	0x410fc271
 8009d7c:	410fc270 	.word	0x410fc270
 8009d80:	e000e400 	.word	0xe000e400
 8009d84:	20005854 	.word	0x20005854
 8009d88:	20005858 	.word	0x20005858
 8009d8c:	e000ed20 	.word	0xe000ed20
 8009d90:	20000020 	.word	0x20000020
 8009d94:	e000ef34 	.word	0xe000ef34

08009d98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	607b      	str	r3, [r7, #4]
}
 8009db0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009db2:	4b10      	ldr	r3, [pc, #64]	@ (8009df4 <vPortEnterCritical+0x5c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3301      	adds	r3, #1
 8009db8:	4a0e      	ldr	r2, [pc, #56]	@ (8009df4 <vPortEnterCritical+0x5c>)
 8009dba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8009df4 <vPortEnterCritical+0x5c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d110      	bne.n	8009de6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8009df8 <vPortEnterCritical+0x60>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00b      	beq.n	8009de6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	603b      	str	r3, [r7, #0]
}
 8009de0:	bf00      	nop
 8009de2:	bf00      	nop
 8009de4:	e7fd      	b.n	8009de2 <vPortEnterCritical+0x4a>
	}
}
 8009de6:	bf00      	nop
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	20000020 	.word	0x20000020
 8009df8:	e000ed04 	.word	0xe000ed04

08009dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e02:	4b12      	ldr	r3, [pc, #72]	@ (8009e4c <vPortExitCritical+0x50>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10b      	bne.n	8009e22 <vPortExitCritical+0x26>
	__asm volatile
 8009e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	607b      	str	r3, [r7, #4]
}
 8009e1c:	bf00      	nop
 8009e1e:	bf00      	nop
 8009e20:	e7fd      	b.n	8009e1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e22:	4b0a      	ldr	r3, [pc, #40]	@ (8009e4c <vPortExitCritical+0x50>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3b01      	subs	r3, #1
 8009e28:	4a08      	ldr	r2, [pc, #32]	@ (8009e4c <vPortExitCritical+0x50>)
 8009e2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e2c:	4b07      	ldr	r3, [pc, #28]	@ (8009e4c <vPortExitCritical+0x50>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d105      	bne.n	8009e40 <vPortExitCritical+0x44>
 8009e34:	2300      	movs	r3, #0
 8009e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	f383 8811 	msr	BASEPRI, r3
}
 8009e3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	20000020 	.word	0x20000020

08009e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e50:	f3ef 8009 	mrs	r0, PSP
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	4b15      	ldr	r3, [pc, #84]	@ (8009eb0 <pxCurrentTCBConst>)
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	f01e 0f10 	tst.w	lr, #16
 8009e60:	bf08      	it	eq
 8009e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e6a:	6010      	str	r0, [r2, #0]
 8009e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009e74:	f380 8811 	msr	BASEPRI, r0
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f7ff f9e0 	bl	8009244 <vTaskSwitchContext>
 8009e84:	f04f 0000 	mov.w	r0, #0
 8009e88:	f380 8811 	msr	BASEPRI, r0
 8009e8c:	bc09      	pop	{r0, r3}
 8009e8e:	6819      	ldr	r1, [r3, #0]
 8009e90:	6808      	ldr	r0, [r1, #0]
 8009e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e96:	f01e 0f10 	tst.w	lr, #16
 8009e9a:	bf08      	it	eq
 8009e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ea0:	f380 8809 	msr	PSP, r0
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	f3af 8000 	nop.w

08009eb0 <pxCurrentTCBConst>:
 8009eb0:	20005728 	.word	0x20005728
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009eb4:	bf00      	nop
 8009eb6:	bf00      	nop

08009eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	607b      	str	r3, [r7, #4]
}
 8009ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ed2:	f7ff f8fd 	bl	80090d0 <xTaskIncrementTick>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d003      	beq.n	8009ee4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009edc:	4b06      	ldr	r3, [pc, #24]	@ (8009ef8 <SysTick_Handler+0x40>)
 8009ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	f383 8811 	msr	BASEPRI, r3
}
 8009eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ef0:	bf00      	nop
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	e000ed04 	.word	0xe000ed04

08009efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009efc:	b480      	push	{r7}
 8009efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f00:	4b0b      	ldr	r3, [pc, #44]	@ (8009f30 <vPortSetupTimerInterrupt+0x34>)
 8009f02:	2200      	movs	r2, #0
 8009f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f06:	4b0b      	ldr	r3, [pc, #44]	@ (8009f34 <vPortSetupTimerInterrupt+0x38>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f38 <vPortSetupTimerInterrupt+0x3c>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a0a      	ldr	r2, [pc, #40]	@ (8009f3c <vPortSetupTimerInterrupt+0x40>)
 8009f12:	fba2 2303 	umull	r2, r3, r2, r3
 8009f16:	099b      	lsrs	r3, r3, #6
 8009f18:	4a09      	ldr	r2, [pc, #36]	@ (8009f40 <vPortSetupTimerInterrupt+0x44>)
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f1e:	4b04      	ldr	r3, [pc, #16]	@ (8009f30 <vPortSetupTimerInterrupt+0x34>)
 8009f20:	2207      	movs	r2, #7
 8009f22:	601a      	str	r2, [r3, #0]
}
 8009f24:	bf00      	nop
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	e000e010 	.word	0xe000e010
 8009f34:	e000e018 	.word	0xe000e018
 8009f38:	20000000 	.word	0x20000000
 8009f3c:	10624dd3 	.word	0x10624dd3
 8009f40:	e000e014 	.word	0xe000e014

08009f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009f54 <vPortEnableVFP+0x10>
 8009f48:	6801      	ldr	r1, [r0, #0]
 8009f4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009f4e:	6001      	str	r1, [r0, #0]
 8009f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f52:	bf00      	nop
 8009f54:	e000ed88 	.word	0xe000ed88

08009f58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f5e:	f3ef 8305 	mrs	r3, IPSR
 8009f62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2b0f      	cmp	r3, #15
 8009f68:	d915      	bls.n	8009f96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f6a:	4a18      	ldr	r2, [pc, #96]	@ (8009fcc <vPortValidateInterruptPriority+0x74>)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4413      	add	r3, r2
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f74:	4b16      	ldr	r3, [pc, #88]	@ (8009fd0 <vPortValidateInterruptPriority+0x78>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	7afa      	ldrb	r2, [r7, #11]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d20b      	bcs.n	8009f96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	607b      	str	r3, [r7, #4]
}
 8009f90:	bf00      	nop
 8009f92:	bf00      	nop
 8009f94:	e7fd      	b.n	8009f92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f96:	4b0f      	ldr	r3, [pc, #60]	@ (8009fd4 <vPortValidateInterruptPriority+0x7c>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8009fd8 <vPortValidateInterruptPriority+0x80>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d90b      	bls.n	8009fbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009faa:	f383 8811 	msr	BASEPRI, r3
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	603b      	str	r3, [r7, #0]
}
 8009fb8:	bf00      	nop
 8009fba:	bf00      	nop
 8009fbc:	e7fd      	b.n	8009fba <vPortValidateInterruptPriority+0x62>
	}
 8009fbe:	bf00      	nop
 8009fc0:	3714      	adds	r7, #20
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	e000e3f0 	.word	0xe000e3f0
 8009fd0:	20005854 	.word	0x20005854
 8009fd4:	e000ed0c 	.word	0xe000ed0c
 8009fd8:	20005858 	.word	0x20005858

08009fdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08a      	sub	sp, #40	@ 0x28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009fe8:	f7fe ffa4 	bl	8008f34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009fec:	4b5c      	ldr	r3, [pc, #368]	@ (800a160 <pvPortMalloc+0x184>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d101      	bne.n	8009ff8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ff4:	f000 f924 	bl	800a240 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ff8:	4b5a      	ldr	r3, [pc, #360]	@ (800a164 <pvPortMalloc+0x188>)
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4013      	ands	r3, r2
 800a000:	2b00      	cmp	r3, #0
 800a002:	f040 8095 	bne.w	800a130 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d01e      	beq.n	800a04a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a00c:	2208      	movs	r2, #8
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4413      	add	r3, r2
 800a012:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f003 0307 	and.w	r3, r3, #7
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d015      	beq.n	800a04a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f023 0307 	bic.w	r3, r3, #7
 800a024:	3308      	adds	r3, #8
 800a026:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f003 0307 	and.w	r3, r3, #7
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00b      	beq.n	800a04a <pvPortMalloc+0x6e>
	__asm volatile
 800a032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a036:	f383 8811 	msr	BASEPRI, r3
 800a03a:	f3bf 8f6f 	isb	sy
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	617b      	str	r3, [r7, #20]
}
 800a044:	bf00      	nop
 800a046:	bf00      	nop
 800a048:	e7fd      	b.n	800a046 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d06f      	beq.n	800a130 <pvPortMalloc+0x154>
 800a050:	4b45      	ldr	r3, [pc, #276]	@ (800a168 <pvPortMalloc+0x18c>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	429a      	cmp	r2, r3
 800a058:	d86a      	bhi.n	800a130 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a05a:	4b44      	ldr	r3, [pc, #272]	@ (800a16c <pvPortMalloc+0x190>)
 800a05c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a05e:	4b43      	ldr	r3, [pc, #268]	@ (800a16c <pvPortMalloc+0x190>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a064:	e004      	b.n	800a070 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a068:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	429a      	cmp	r2, r3
 800a078:	d903      	bls.n	800a082 <pvPortMalloc+0xa6>
 800a07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1f1      	bne.n	800a066 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a082:	4b37      	ldr	r3, [pc, #220]	@ (800a160 <pvPortMalloc+0x184>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a088:	429a      	cmp	r2, r3
 800a08a:	d051      	beq.n	800a130 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2208      	movs	r2, #8
 800a092:	4413      	add	r3, r2
 800a094:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a0:	685a      	ldr	r2, [r3, #4]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	1ad2      	subs	r2, r2, r3
 800a0a6:	2308      	movs	r3, #8
 800a0a8:	005b      	lsls	r3, r3, #1
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d920      	bls.n	800a0f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	f003 0307 	and.w	r3, r3, #7
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00b      	beq.n	800a0d8 <pvPortMalloc+0xfc>
	__asm volatile
 800a0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	613b      	str	r3, [r7, #16]
}
 800a0d2:	bf00      	nop
 800a0d4:	bf00      	nop
 800a0d6:	e7fd      	b.n	800a0d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0da:	685a      	ldr	r2, [r3, #4]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	1ad2      	subs	r2, r2, r3
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0ea:	69b8      	ldr	r0, [r7, #24]
 800a0ec:	f000 f90a 	bl	800a304 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0f0:	4b1d      	ldr	r3, [pc, #116]	@ (800a168 <pvPortMalloc+0x18c>)
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	4a1b      	ldr	r2, [pc, #108]	@ (800a168 <pvPortMalloc+0x18c>)
 800a0fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0fe:	4b1a      	ldr	r3, [pc, #104]	@ (800a168 <pvPortMalloc+0x18c>)
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	4b1b      	ldr	r3, [pc, #108]	@ (800a170 <pvPortMalloc+0x194>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	429a      	cmp	r2, r3
 800a108:	d203      	bcs.n	800a112 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a10a:	4b17      	ldr	r3, [pc, #92]	@ (800a168 <pvPortMalloc+0x18c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a18      	ldr	r2, [pc, #96]	@ (800a170 <pvPortMalloc+0x194>)
 800a110:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	4b13      	ldr	r3, [pc, #76]	@ (800a164 <pvPortMalloc+0x188>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	431a      	orrs	r2, r3
 800a11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a122:	2200      	movs	r2, #0
 800a124:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a126:	4b13      	ldr	r3, [pc, #76]	@ (800a174 <pvPortMalloc+0x198>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	3301      	adds	r3, #1
 800a12c:	4a11      	ldr	r2, [pc, #68]	@ (800a174 <pvPortMalloc+0x198>)
 800a12e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a130:	f7fe ff0e 	bl	8008f50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	f003 0307 	and.w	r3, r3, #7
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00b      	beq.n	800a156 <pvPortMalloc+0x17a>
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	60fb      	str	r3, [r7, #12]
}
 800a150:	bf00      	nop
 800a152:	bf00      	nop
 800a154:	e7fd      	b.n	800a152 <pvPortMalloc+0x176>
	return pvReturn;
 800a156:	69fb      	ldr	r3, [r7, #28]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3728      	adds	r7, #40	@ 0x28
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	2000a684 	.word	0x2000a684
 800a164:	2000a698 	.word	0x2000a698
 800a168:	2000a688 	.word	0x2000a688
 800a16c:	2000a67c 	.word	0x2000a67c
 800a170:	2000a68c 	.word	0x2000a68c
 800a174:	2000a690 	.word	0x2000a690

0800a178 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b086      	sub	sp, #24
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d04f      	beq.n	800a22a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a18a:	2308      	movs	r3, #8
 800a18c:	425b      	negs	r3, r3
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	4413      	add	r3, r2
 800a192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	685a      	ldr	r2, [r3, #4]
 800a19c:	4b25      	ldr	r3, [pc, #148]	@ (800a234 <vPortFree+0xbc>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10b      	bne.n	800a1be <vPortFree+0x46>
	__asm volatile
 800a1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	60fb      	str	r3, [r7, #12]
}
 800a1b8:	bf00      	nop
 800a1ba:	bf00      	nop
 800a1bc:	e7fd      	b.n	800a1ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00b      	beq.n	800a1de <vPortFree+0x66>
	__asm volatile
 800a1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	60bb      	str	r3, [r7, #8]
}
 800a1d8:	bf00      	nop
 800a1da:	bf00      	nop
 800a1dc:	e7fd      	b.n	800a1da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	4b14      	ldr	r3, [pc, #80]	@ (800a234 <vPortFree+0xbc>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d01e      	beq.n	800a22a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d11a      	bne.n	800a22a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	685a      	ldr	r2, [r3, #4]
 800a1f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a234 <vPortFree+0xbc>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	43db      	mvns	r3, r3
 800a1fe:	401a      	ands	r2, r3
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a204:	f7fe fe96 	bl	8008f34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	4b0a      	ldr	r3, [pc, #40]	@ (800a238 <vPortFree+0xc0>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4413      	add	r3, r2
 800a212:	4a09      	ldr	r2, [pc, #36]	@ (800a238 <vPortFree+0xc0>)
 800a214:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a216:	6938      	ldr	r0, [r7, #16]
 800a218:	f000 f874 	bl	800a304 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a21c:	4b07      	ldr	r3, [pc, #28]	@ (800a23c <vPortFree+0xc4>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3301      	adds	r3, #1
 800a222:	4a06      	ldr	r2, [pc, #24]	@ (800a23c <vPortFree+0xc4>)
 800a224:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a226:	f7fe fe93 	bl	8008f50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a22a:	bf00      	nop
 800a22c:	3718      	adds	r7, #24
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	2000a698 	.word	0x2000a698
 800a238:	2000a688 	.word	0x2000a688
 800a23c:	2000a694 	.word	0x2000a694

0800a240 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a246:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800a24a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a24c:	4b27      	ldr	r3, [pc, #156]	@ (800a2ec <prvHeapInit+0xac>)
 800a24e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f003 0307 	and.w	r3, r3, #7
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00c      	beq.n	800a274 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	3307      	adds	r3, #7
 800a25e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f023 0307 	bic.w	r3, r3, #7
 800a266:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	4a1f      	ldr	r2, [pc, #124]	@ (800a2ec <prvHeapInit+0xac>)
 800a270:	4413      	add	r3, r2
 800a272:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a278:	4a1d      	ldr	r2, [pc, #116]	@ (800a2f0 <prvHeapInit+0xb0>)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a27e:	4b1c      	ldr	r3, [pc, #112]	@ (800a2f0 <prvHeapInit+0xb0>)
 800a280:	2200      	movs	r2, #0
 800a282:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	4413      	add	r3, r2
 800a28a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a28c:	2208      	movs	r2, #8
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	1a9b      	subs	r3, r3, r2
 800a292:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f023 0307 	bic.w	r3, r3, #7
 800a29a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	4a15      	ldr	r2, [pc, #84]	@ (800a2f4 <prvHeapInit+0xb4>)
 800a2a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a2a2:	4b14      	ldr	r3, [pc, #80]	@ (800a2f4 <prvHeapInit+0xb4>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a2aa:	4b12      	ldr	r3, [pc, #72]	@ (800a2f4 <prvHeapInit+0xb4>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	1ad2      	subs	r2, r2, r3
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a2c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f4 <prvHeapInit+0xb4>)
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	4a0a      	ldr	r2, [pc, #40]	@ (800a2f8 <prvHeapInit+0xb8>)
 800a2ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	4a09      	ldr	r2, [pc, #36]	@ (800a2fc <prvHeapInit+0xbc>)
 800a2d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a2d8:	4b09      	ldr	r3, [pc, #36]	@ (800a300 <prvHeapInit+0xc0>)
 800a2da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a2de:	601a      	str	r2, [r3, #0]
}
 800a2e0:	bf00      	nop
 800a2e2:	3714      	adds	r7, #20
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	2000585c 	.word	0x2000585c
 800a2f0:	2000a67c 	.word	0x2000a67c
 800a2f4:	2000a684 	.word	0x2000a684
 800a2f8:	2000a68c 	.word	0x2000a68c
 800a2fc:	2000a688 	.word	0x2000a688
 800a300:	2000a698 	.word	0x2000a698

0800a304 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a30c:	4b28      	ldr	r3, [pc, #160]	@ (800a3b0 <prvInsertBlockIntoFreeList+0xac>)
 800a30e:	60fb      	str	r3, [r7, #12]
 800a310:	e002      	b.n	800a318 <prvInsertBlockIntoFreeList+0x14>
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	60fb      	str	r3, [r7, #12]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d8f7      	bhi.n	800a312 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	4413      	add	r3, r2
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	429a      	cmp	r2, r3
 800a332:	d108      	bne.n	800a346 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	441a      	add	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	441a      	add	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	429a      	cmp	r2, r3
 800a358:	d118      	bne.n	800a38c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	4b15      	ldr	r3, [pc, #84]	@ (800a3b4 <prvInsertBlockIntoFreeList+0xb0>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	429a      	cmp	r2, r3
 800a364:	d00d      	beq.n	800a382 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	441a      	add	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	e008      	b.n	800a394 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a382:	4b0c      	ldr	r3, [pc, #48]	@ (800a3b4 <prvInsertBlockIntoFreeList+0xb0>)
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	601a      	str	r2, [r3, #0]
 800a38a:	e003      	b.n	800a394 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d002      	beq.n	800a3a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3a2:	bf00      	nop
 800a3a4:	3714      	adds	r7, #20
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	2000a67c 	.word	0x2000a67c
 800a3b4:	2000a684 	.word	0x2000a684

0800a3b8 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	330c      	adds	r3, #12
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	6839      	ldr	r1, [r7, #0]
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f002 fa89 	bl	800c8e4 <tcpip_send_msg_wait_sem>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a3d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d103      	bne.n	800a3e6 <netconn_apimsg+0x2e>
    return apimsg->err;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a3e4:	e001      	b.n	800a3ea <netconn_apimsg+0x32>
  }
  return err;
 800a3e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
	...

0800a3f4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08c      	sub	sp, #48	@ 0x30
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	603a      	str	r2, [r7, #0]
 800a3fe:	71fb      	strb	r3, [r7, #7]
 800a400:	460b      	mov	r3, r1
 800a402:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a404:	79fb      	ldrb	r3, [r7, #7]
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	4618      	mov	r0, r3
 800a40a:	f001 f949 	bl	800b6a0 <netconn_alloc>
 800a40e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800a410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a412:	2b00      	cmp	r3, #0
 800a414:	d054      	beq.n	800a4c0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a416:	79bb      	ldrb	r3, [r7, #6]
 800a418:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a41c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a41e:	f107 0308 	add.w	r3, r7, #8
 800a422:	4619      	mov	r1, r3
 800a424:	4829      	ldr	r0, [pc, #164]	@ (800a4cc <netconn_new_with_proto_and_callback+0xd8>)
 800a426:	f7ff ffc7 	bl	800a3b8 <netconn_apimsg>
 800a42a:	4603      	mov	r3, r0
 800a42c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800a430:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800a434:	2b00      	cmp	r3, #0
 800a436:	d043      	beq.n	800a4c0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d005      	beq.n	800a44c <netconn_new_with_proto_and_callback+0x58>
 800a440:	4b23      	ldr	r3, [pc, #140]	@ (800a4d0 <netconn_new_with_proto_and_callback+0xdc>)
 800a442:	22a3      	movs	r2, #163	@ 0xa3
 800a444:	4923      	ldr	r1, [pc, #140]	@ (800a4d4 <netconn_new_with_proto_and_callback+0xe0>)
 800a446:	4824      	ldr	r0, [pc, #144]	@ (800a4d8 <netconn_new_with_proto_and_callback+0xe4>)
 800a448:	f00d fc0a 	bl	8017c60 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a44e:	3310      	adds	r3, #16
 800a450:	4618      	mov	r0, r3
 800a452:	f00d f9cc 	bl	80177ee <sys_mbox_valid>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d105      	bne.n	800a468 <netconn_new_with_proto_and_callback+0x74>
 800a45c:	4b1c      	ldr	r3, [pc, #112]	@ (800a4d0 <netconn_new_with_proto_and_callback+0xdc>)
 800a45e:	22a4      	movs	r2, #164	@ 0xa4
 800a460:	491e      	ldr	r1, [pc, #120]	@ (800a4dc <netconn_new_with_proto_and_callback+0xe8>)
 800a462:	481d      	ldr	r0, [pc, #116]	@ (800a4d8 <netconn_new_with_proto_and_callback+0xe4>)
 800a464:	f00d fbfc 	bl	8017c60 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a46a:	3314      	adds	r3, #20
 800a46c:	4618      	mov	r0, r3
 800a46e:	f00d f9be 	bl	80177ee <sys_mbox_valid>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d005      	beq.n	800a484 <netconn_new_with_proto_and_callback+0x90>
 800a478:	4b15      	ldr	r3, [pc, #84]	@ (800a4d0 <netconn_new_with_proto_and_callback+0xdc>)
 800a47a:	22a6      	movs	r2, #166	@ 0xa6
 800a47c:	4918      	ldr	r1, [pc, #96]	@ (800a4e0 <netconn_new_with_proto_and_callback+0xec>)
 800a47e:	4816      	ldr	r0, [pc, #88]	@ (800a4d8 <netconn_new_with_proto_and_callback+0xe4>)
 800a480:	f00d fbee 	bl	8017c60 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a486:	330c      	adds	r3, #12
 800a488:	4618      	mov	r0, r3
 800a48a:	f00d fa41 	bl	8017910 <sys_sem_valid>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d105      	bne.n	800a4a0 <netconn_new_with_proto_and_callback+0xac>
 800a494:	4b0e      	ldr	r3, [pc, #56]	@ (800a4d0 <netconn_new_with_proto_and_callback+0xdc>)
 800a496:	22a9      	movs	r2, #169	@ 0xa9
 800a498:	4912      	ldr	r1, [pc, #72]	@ (800a4e4 <netconn_new_with_proto_and_callback+0xf0>)
 800a49a:	480f      	ldr	r0, [pc, #60]	@ (800a4d8 <netconn_new_with_proto_and_callback+0xe4>)
 800a49c:	f00d fbe0 	bl	8017c60 <iprintf>
      sys_sem_free(&conn->op_completed);
 800a4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a2:	330c      	adds	r3, #12
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f00d fa26 	bl	80178f6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ac:	3310      	adds	r3, #16
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f00d f916 	bl	80176e0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a4b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4b6:	2007      	movs	r0, #7
 800a4b8:	f002 ffc2 	bl	800d440 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e000      	b.n	800a4c2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3730      	adds	r7, #48	@ 0x30
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	0800b675 	.word	0x0800b675
 800a4d0:	080192dc 	.word	0x080192dc
 800a4d4:	08019310 	.word	0x08019310
 800a4d8:	08019334 	.word	0x08019334
 800a4dc:	0801935c 	.word	0x0801935c
 800a4e0:	08019374 	.word	0x08019374
 800a4e4:	08019398 	.word	0x08019398

0800a4e8 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b08c      	sub	sp, #48	@ 0x30
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	e014      	b.n	800a524 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a4fe:	2329      	movs	r3, #41	@ 0x29
 800a500:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a502:	f107 030c 	add.w	r3, r7, #12
 800a506:	4619      	mov	r1, r3
 800a508:	4808      	ldr	r0, [pc, #32]	@ (800a52c <netconn_prepare_delete+0x44>)
 800a50a:	f7ff ff55 	bl	800a3b8 <netconn_apimsg>
 800a50e:	4603      	mov	r3, r0
 800a510:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a514:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d002      	beq.n	800a522 <netconn_prepare_delete+0x3a>
    return err;
 800a51c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a520:	e000      	b.n	800a524 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a522:	2300      	movs	r3, #0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3730      	adds	r7, #48	@ 0x30
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	0800bbe9 	.word	0x0800bbe9

0800a530 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d101      	bne.n	800a542 <netconn_delete+0x12>
    return ERR_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	e00d      	b.n	800a55e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7ff ffd0 	bl	800a4e8 <netconn_prepare_delete>
 800a548:	4603      	mov	r3, r0
 800a54a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a54c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d102      	bne.n	800a55a <netconn_delete+0x2a>
    netconn_free(conn);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f001 f915 	bl	800b784 <netconn_free>
  }
  return err;
 800a55a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
	...

0800a568 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b08e      	sub	sp, #56	@ 0x38
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	4613      	mov	r3, r2
 800a574:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d109      	bne.n	800a590 <netconn_bind+0x28>
 800a57c:	4b11      	ldr	r3, [pc, #68]	@ (800a5c4 <netconn_bind+0x5c>)
 800a57e:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800a582:	4911      	ldr	r1, [pc, #68]	@ (800a5c8 <netconn_bind+0x60>)
 800a584:	4811      	ldr	r0, [pc, #68]	@ (800a5cc <netconn_bind+0x64>)
 800a586:	f00d fb6b 	bl	8017c60 <iprintf>
 800a58a:	f06f 030f 	mvn.w	r3, #15
 800a58e:	e015      	b.n	800a5bc <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d101      	bne.n	800a59a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800a596:	4b0e      	ldr	r3, [pc, #56]	@ (800a5d0 <netconn_bind+0x68>)
 800a598:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a5a2:	88fb      	ldrh	r3, [r7, #6]
 800a5a4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800a5a6:	f107 0314 	add.w	r3, r7, #20
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	4809      	ldr	r0, [pc, #36]	@ (800a5d4 <netconn_bind+0x6c>)
 800a5ae:	f7ff ff03 	bl	800a3b8 <netconn_apimsg>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a5b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3738      	adds	r7, #56	@ 0x38
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	080192dc 	.word	0x080192dc
 800a5c8:	08019414 	.word	0x08019414
 800a5cc:	08019334 	.word	0x08019334
 800a5d0:	0801c8e4 	.word	0x0801c8e4
 800a5d4:	0800bdb5 	.word	0x0800bdb5

0800a5d8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b08c      	sub	sp, #48	@ 0x30
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d109      	bne.n	800a5fe <netconn_listen_with_backlog+0x26>
 800a5ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a620 <netconn_listen_with_backlog+0x48>)
 800a5ec:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800a5f0:	490c      	ldr	r1, [pc, #48]	@ (800a624 <netconn_listen_with_backlog+0x4c>)
 800a5f2:	480d      	ldr	r0, [pc, #52]	@ (800a628 <netconn_listen_with_backlog+0x50>)
 800a5f4:	f00d fb34 	bl	8017c60 <iprintf>
 800a5f8:	f06f 030f 	mvn.w	r3, #15
 800a5fc:	e00c      	b.n	800a618 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800a602:	f107 030c 	add.w	r3, r7, #12
 800a606:	4619      	mov	r1, r3
 800a608:	4808      	ldr	r0, [pc, #32]	@ (800a62c <netconn_listen_with_backlog+0x54>)
 800a60a:	f7ff fed5 	bl	800a3b8 <netconn_apimsg>
 800a60e:	4603      	mov	r3, r0
 800a610:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a614:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3730      	adds	r7, #48	@ 0x30
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	080192dc 	.word	0x080192dc
 800a624:	08019494 	.word	0x08019494
 800a628:	08019334 	.word	0x08019334
 800a62c:	0800be29 	.word	0x0800be29

0800a630 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d109      	bne.n	800a654 <netconn_accept+0x24>
 800a640:	4b42      	ldr	r3, [pc, #264]	@ (800a74c <netconn_accept+0x11c>)
 800a642:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a646:	4942      	ldr	r1, [pc, #264]	@ (800a750 <netconn_accept+0x120>)
 800a648:	4842      	ldr	r0, [pc, #264]	@ (800a754 <netconn_accept+0x124>)
 800a64a:	f00d fb09 	bl	8017c60 <iprintf>
 800a64e:	f06f 030f 	mvn.w	r3, #15
 800a652:	e077      	b.n	800a744 <netconn_accept+0x114>
  *new_conn = NULL;
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2200      	movs	r2, #0
 800a658:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d109      	bne.n	800a674 <netconn_accept+0x44>
 800a660:	4b3a      	ldr	r3, [pc, #232]	@ (800a74c <netconn_accept+0x11c>)
 800a662:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800a666:	493c      	ldr	r1, [pc, #240]	@ (800a758 <netconn_accept+0x128>)
 800a668:	483a      	ldr	r0, [pc, #232]	@ (800a754 <netconn_accept+0x124>)
 800a66a:	f00d faf9 	bl	8017c60 <iprintf>
 800a66e:	f06f 030f 	mvn.w	r3, #15
 800a672:	e067      	b.n	800a744 <netconn_accept+0x114>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fb88 	bl	800ad8a <netconn_err>
 800a67a:	4603      	mov	r3, r0
 800a67c:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800a67e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d002      	beq.n	800a68c <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800a686:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a68a:	e05b      	b.n	800a744 <netconn_accept+0x114>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	3314      	adds	r3, #20
 800a690:	4618      	mov	r0, r3
 800a692:	f00d f8ac 	bl	80177ee <sys_mbox_valid>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d006      	beq.n	800a6aa <netconn_accept+0x7a>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d002      	beq.n	800a6b0 <netconn_accept+0x80>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800a6aa:	f06f 030e 	mvn.w	r3, #14
 800a6ae:	e049      	b.n	800a744 <netconn_accept+0x114>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a6b6:	f003 0302 	and.w	r3, r3, #2
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00e      	beq.n	800a6dc <netconn_accept+0xac>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	3314      	adds	r3, #20
 800a6c2:	f107 020c 	add.w	r2, r7, #12
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f00d f874 	bl	80177b6 <sys_arch_mbox_tryfetch>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d4:	d113      	bne.n	800a6fe <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800a6d6:	f06f 0306 	mvn.w	r3, #6
 800a6da:	e033      	b.n	800a744 <netconn_accept+0x114>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f103 0014 	add.w	r0, r3, #20
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	69da      	ldr	r2, [r3, #28]
 800a6e6:	f107 030c 	add.w	r3, r7, #12
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	f00d f824 	bl	8017738 <sys_arch_mbox_fetch>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f6:	d102      	bne.n	800a6fe <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 800a6f8:	f06f 0302 	mvn.w	r3, #2
 800a6fc:	e022      	b.n	800a744 <netconn_accept+0x114>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a702:	2b00      	cmp	r3, #0
 800a704:	d005      	beq.n	800a712 <netconn_accept+0xe2>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a70a:	2200      	movs	r2, #0
 800a70c:	2101      	movs	r1, #1
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f107 0213 	add.w	r2, r7, #19
 800a718:	4611      	mov	r1, r2
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 fb86 	bl	800ae2c <lwip_netconn_is_err_msg>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d002      	beq.n	800a72c <netconn_accept+0xfc>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800a726:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a72a:	e00b      	b.n	800a744 <netconn_accept+0x114>
  }
  if (accept_ptr == NULL) {
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d102      	bne.n	800a738 <netconn_accept+0x108>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800a732:	f06f 030e 	mvn.w	r3, #14
 800a736:	e005      	b.n	800a744 <netconn_accept+0x114>
  }
  newconn = (struct netconn *)accept_ptr;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a742:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a744:	4618      	mov	r0, r3
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	080192dc 	.word	0x080192dc
 800a750:	080194b4 	.word	0x080194b4
 800a754:	08019334 	.word	0x08019334
 800a758:	080194d4 	.word	0x080194d4

0800a75c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b088      	sub	sp, #32
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	4613      	mov	r3, r2
 800a768:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800a76a:	2300      	movs	r3, #0
 800a76c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d109      	bne.n	800a788 <netconn_recv_data+0x2c>
 800a774:	4b5e      	ldr	r3, [pc, #376]	@ (800a8f0 <netconn_recv_data+0x194>)
 800a776:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800a77a:	495e      	ldr	r1, [pc, #376]	@ (800a8f4 <netconn_recv_data+0x198>)
 800a77c:	485e      	ldr	r0, [pc, #376]	@ (800a8f8 <netconn_recv_data+0x19c>)
 800a77e:	f00d fa6f 	bl	8017c60 <iprintf>
 800a782:	f06f 030f 	mvn.w	r3, #15
 800a786:	e0ae      	b.n	800a8e6 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	2200      	movs	r2, #0
 800a78c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d109      	bne.n	800a7a8 <netconn_recv_data+0x4c>
 800a794:	4b56      	ldr	r3, [pc, #344]	@ (800a8f0 <netconn_recv_data+0x194>)
 800a796:	f240 224a 	movw	r2, #586	@ 0x24a
 800a79a:	4958      	ldr	r1, [pc, #352]	@ (800a8fc <netconn_recv_data+0x1a0>)
 800a79c:	4856      	ldr	r0, [pc, #344]	@ (800a8f8 <netconn_recv_data+0x19c>)
 800a79e:	f00d fa5f 	bl	8017c60 <iprintf>
 800a7a2:	f06f 030f 	mvn.w	r3, #15
 800a7a6:	e09e      	b.n	800a8e6 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3310      	adds	r3, #16
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f00d f81e 	bl	80177ee <sys_mbox_valid>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10e      	bne.n	800a7d6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f000 fae6 	bl	800ad8a <netconn_err>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800a7c2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d002      	beq.n	800a7d0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a7ca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a7ce:	e08a      	b.n	800a8e6 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 800a7d0:	f06f 030a 	mvn.w	r3, #10
 800a7d4:	e087      	b.n	800a8e6 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a7dc:	f003 0302 	and.w	r3, r3, #2
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d110      	bne.n	800a806 <netconn_recv_data+0xaa>
 800a7e4:	79fb      	ldrb	r3, [r7, #7]
 800a7e6:	f003 0304 	and.w	r3, r3, #4
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10b      	bne.n	800a806 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a7f4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d104      	bne.n	800a806 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d024      	beq.n	800a850 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	3310      	adds	r3, #16
 800a80a:	f107 0218 	add.w	r2, r7, #24
 800a80e:	4611      	mov	r1, r2
 800a810:	4618      	mov	r0, r3
 800a812:	f00c ffd0 	bl	80177b6 <sys_arch_mbox_tryfetch>
 800a816:	4603      	mov	r3, r0
 800a818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a81c:	d129      	bne.n	800a872 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f000 fab3 	bl	800ad8a <netconn_err>
 800a824:	4603      	mov	r3, r0
 800a826:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800a828:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 800a830:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a834:	e057      	b.n	800a8e6 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a83c:	f003 0301 	and.w	r3, r3, #1
 800a840:	2b00      	cmp	r3, #0
 800a842:	d002      	beq.n	800a84a <netconn_recv_data+0xee>
        return ERR_CONN;
 800a844:	f06f 030a 	mvn.w	r3, #10
 800a848:	e04d      	b.n	800a8e6 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 800a84a:	f06f 0306 	mvn.w	r3, #6
 800a84e:	e04a      	b.n	800a8e6 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f103 0010 	add.w	r0, r3, #16
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	69da      	ldr	r2, [r3, #28]
 800a85a:	f107 0318 	add.w	r3, r7, #24
 800a85e:	4619      	mov	r1, r3
 800a860:	f00c ff6a 	bl	8017738 <sys_arch_mbox_fetch>
 800a864:	4603      	mov	r3, r0
 800a866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86a:	d102      	bne.n	800a872 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 800a86c:	f06f 0302 	mvn.w	r3, #2
 800a870:	e039      	b.n	800a8e6 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a87a:	2b10      	cmp	r3, #16
 800a87c:	d117      	bne.n	800a8ae <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	f107 0217 	add.w	r2, r7, #23
 800a884:	4611      	mov	r1, r2
 800a886:	4618      	mov	r0, r3
 800a888:	f000 fad0 	bl	800ae2c <lwip_netconn_is_err_msg>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d009      	beq.n	800a8a6 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a892:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a896:	f113 0f0f 	cmn.w	r3, #15
 800a89a:	d101      	bne.n	800a8a0 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	e022      	b.n	800a8e6 <netconn_recv_data+0x18a>
      }
      return err;
 800a8a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8a4:	e01f      	b.n	800a8e6 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	891b      	ldrh	r3, [r3, #8]
 800a8aa:	83fb      	strh	r3, [r7, #30]
 800a8ac:	e00d      	b.n	800a8ca <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d106      	bne.n	800a8c2 <netconn_recv_data+0x166>
 800a8b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a8f0 <netconn_recv_data+0x194>)
 800a8b6:	f240 2291 	movw	r2, #657	@ 0x291
 800a8ba:	4911      	ldr	r1, [pc, #68]	@ (800a900 <netconn_recv_data+0x1a4>)
 800a8bc:	480e      	ldr	r0, [pc, #56]	@ (800a8f8 <netconn_recv_data+0x19c>)
 800a8be:	f00d f9cf 	bl	8017c60 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	891b      	ldrh	r3, [r3, #8]
 800a8c8:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d005      	beq.n	800a8de <netconn_recv_data+0x182>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d6:	8bfa      	ldrh	r2, [r7, #30]
 800a8d8:	2101      	movs	r1, #1
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a8de:	69ba      	ldr	r2, [r7, #24]
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3720      	adds	r7, #32
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	080192dc 	.word	0x080192dc
 800a8f4:	080194f4 	.word	0x080194f4
 800a8f8:	08019334 	.word	0x08019334
 800a8fc:	08019514 	.word	0x08019514
 800a900:	08019530 	.word	0x08019530

0800a904 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d005      	beq.n	800a922 <netconn_tcp_recvd_msg+0x1e>
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a91e:	2b10      	cmp	r3, #16
 800a920:	d009      	beq.n	800a936 <netconn_tcp_recvd_msg+0x32>
 800a922:	4b0c      	ldr	r3, [pc, #48]	@ (800a954 <netconn_tcp_recvd_msg+0x50>)
 800a924:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800a928:	490b      	ldr	r1, [pc, #44]	@ (800a958 <netconn_tcp_recvd_msg+0x54>)
 800a92a:	480c      	ldr	r0, [pc, #48]	@ (800a95c <netconn_tcp_recvd_msg+0x58>)
 800a92c:	f00d f998 	bl	8017c60 <iprintf>
 800a930:	f06f 030f 	mvn.w	r3, #15
 800a934:	e00a      	b.n	800a94c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	68ba      	ldr	r2, [r7, #8]
 800a940:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a942:	6879      	ldr	r1, [r7, #4]
 800a944:	4806      	ldr	r0, [pc, #24]	@ (800a960 <netconn_tcp_recvd_msg+0x5c>)
 800a946:	f7ff fd37 	bl	800a3b8 <netconn_apimsg>
 800a94a:	4603      	mov	r3, r0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	080192dc 	.word	0x080192dc
 800a958:	0801953c 	.word	0x0801953c
 800a95c:	08019334 	.word	0x08019334
 800a960:	0800bf59 	.word	0x0800bf59

0800a964 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b090      	sub	sp, #64	@ 0x40
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	4613      	mov	r3, r2
 800a970:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3310      	adds	r3, #16
 800a976:	4618      	mov	r0, r3
 800a978:	f00c ff39 	bl	80177ee <sys_mbox_valid>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d102      	bne.n	800a988 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a982:	f06f 030a 	mvn.w	r3, #10
 800a986:	e072      	b.n	800aa6e <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a98e:	b25b      	sxtb	r3, r3
 800a990:	2b00      	cmp	r3, #0
 800a992:	da09      	bge.n	800a9a8 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a99a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a99e:	b2da      	uxtb	r2, r3
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 800a9a6:	e03b      	b.n	800aa20 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a9a8:	79fb      	ldrb	r3, [r7, #7]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	68b9      	ldr	r1, [r7, #8]
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f7ff fed4 	bl	800a75c <netconn_recv_data>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800a9ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d002      	beq.n	800a9c8 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a9c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a9c6:	e052      	b.n	800aa6e <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a9ce:	79fb      	ldrb	r3, [r7, #7]
 800a9d0:	f003 0308 	and.w	r3, r3, #8
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10e      	bne.n	800a9f6 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d002      	beq.n	800a9e4 <netconn_recv_data_tcp+0x80>
 800a9de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e0:	891b      	ldrh	r3, [r3, #8]
 800a9e2:	e000      	b.n	800a9e6 <netconn_recv_data_tcp+0x82>
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a9e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a9ea:	f107 0214 	add.w	r2, r7, #20
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f7ff ff87 	bl	800a904 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d136      	bne.n	800aa6a <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 800a9fc:	79fb      	ldrb	r3, [r7, #7]
 800a9fe:	f003 0310 	and.w	r3, r3, #16
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00b      	beq.n	800aa1e <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aa0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 800aa18:	f06f 0306 	mvn.w	r3, #6
 800aa1c:	e027      	b.n	800aa6e <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 800aa1e:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d005      	beq.n	800aa34 <netconn_recv_data_tcp+0xd0>
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	2101      	movs	r1, #1
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10f      	bne.n	800aa5c <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 f9a4 	bl	800ad8a <netconn_err>
 800aa42:	4603      	mov	r3, r0
 800aa44:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800aa48:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d002      	beq.n	800aa56 <netconn_recv_data_tcp+0xf2>
          return err;
 800aa50:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800aa54:	e00b      	b.n	800aa6e <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 800aa56:	f06f 030d 	mvn.w	r3, #13
 800aa5a:	e008      	b.n	800aa6e <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f000 f956 	bl	800ad10 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800aa64:	f06f 030e 	mvn.w	r3, #14
 800aa68:	e001      	b.n	800aa6e <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 800aa6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3740      	adds	r7, #64	@ 0x40
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
	...

0800aa78 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800aa82:	2300      	movs	r3, #0
 800aa84:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d109      	bne.n	800aaa0 <netconn_recv+0x28>
 800aa8c:	4b32      	ldr	r3, [pc, #200]	@ (800ab58 <netconn_recv+0xe0>)
 800aa8e:	f240 3263 	movw	r2, #867	@ 0x363
 800aa92:	4932      	ldr	r1, [pc, #200]	@ (800ab5c <netconn_recv+0xe4>)
 800aa94:	4832      	ldr	r0, [pc, #200]	@ (800ab60 <netconn_recv+0xe8>)
 800aa96:	f00d f8e3 	bl	8017c60 <iprintf>
 800aa9a:	f06f 030f 	mvn.w	r3, #15
 800aa9e:	e056      	b.n	800ab4e <netconn_recv+0xd6>
  *new_buf = NULL;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d109      	bne.n	800aac0 <netconn_recv+0x48>
 800aaac:	4b2a      	ldr	r3, [pc, #168]	@ (800ab58 <netconn_recv+0xe0>)
 800aaae:	f240 3265 	movw	r2, #869	@ 0x365
 800aab2:	492c      	ldr	r1, [pc, #176]	@ (800ab64 <netconn_recv+0xec>)
 800aab4:	482a      	ldr	r0, [pc, #168]	@ (800ab60 <netconn_recv+0xe8>)
 800aab6:	f00d f8d3 	bl	8017c60 <iprintf>
 800aaba:	f06f 030f 	mvn.w	r3, #15
 800aabe:	e046      	b.n	800ab4e <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aac8:	2b10      	cmp	r3, #16
 800aaca:	d13a      	bne.n	800ab42 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800aacc:	2300      	movs	r3, #0
 800aace:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800aad0:	2006      	movs	r0, #6
 800aad2:	f002 fc3f 	bl	800d354 <memp_malloc>
 800aad6:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d102      	bne.n	800aae4 <netconn_recv+0x6c>
      return ERR_MEM;
 800aade:	f04f 33ff 	mov.w	r3, #4294967295
 800aae2:	e034      	b.n	800ab4e <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800aae4:	f107 030c 	add.w	r3, r7, #12
 800aae8:	2200      	movs	r2, #0
 800aaea:	4619      	mov	r1, r3
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f7ff ff39 	bl	800a964 <netconn_recv_data_tcp>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800aaf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d006      	beq.n	800ab0c <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800aafe:	6979      	ldr	r1, [r7, #20]
 800ab00:	2006      	movs	r0, #6
 800ab02:	f002 fc9d 	bl	800d440 <memp_free>
      return err;
 800ab06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab0a:	e020      	b.n	800ab4e <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d106      	bne.n	800ab20 <netconn_recv+0xa8>
 800ab12:	4b11      	ldr	r3, [pc, #68]	@ (800ab58 <netconn_recv+0xe0>)
 800ab14:	f240 3279 	movw	r2, #889	@ 0x379
 800ab18:	4913      	ldr	r1, [pc, #76]	@ (800ab68 <netconn_recv+0xf0>)
 800ab1a:	4811      	ldr	r0, [pc, #68]	@ (800ab60 <netconn_recv+0xe8>)
 800ab1c:	f00d f8a0 	bl	8017c60 <iprintf>

    buf->p = p;
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	2200      	movs	r2, #0
 800ab36:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	697a      	ldr	r2, [r7, #20]
 800ab3c:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	e005      	b.n	800ab4e <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800ab42:	2200      	movs	r2, #0
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7ff fe08 	bl	800a75c <netconn_recv_data>
 800ab4c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3718      	adds	r7, #24
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	080192dc 	.word	0x080192dc
 800ab5c:	080194f4 	.word	0x080194f4
 800ab60:	08019334 	.word	0x08019334
 800ab64:	08019514 	.word	0x08019514
 800ab68:	0801958c 	.word	0x0801958c

0800ab6c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b088      	sub	sp, #32
 800ab70:	af02      	add	r7, sp, #8
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
 800ab78:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800ab82:	78fa      	ldrb	r2, [r7, #3]
 800ab84:	f107 0110 	add.w	r1, r7, #16
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	9300      	str	r3, [sp, #0]
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	2201      	movs	r2, #1
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f000 f805 	bl	800aba0 <netconn_write_vectors_partly>
 800ab96:	4603      	mov	r3, r0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3718      	adds	r7, #24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b092      	sub	sp, #72	@ 0x48
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	4611      	mov	r1, r2
 800abac:	461a      	mov	r2, r3
 800abae:	460b      	mov	r3, r1
 800abb0:	80fb      	strh	r3, [r7, #6]
 800abb2:	4613      	mov	r3, r2
 800abb4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d109      	bne.n	800abd0 <netconn_write_vectors_partly+0x30>
 800abbc:	4b4e      	ldr	r3, [pc, #312]	@ (800acf8 <netconn_write_vectors_partly+0x158>)
 800abbe:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800abc2:	494e      	ldr	r1, [pc, #312]	@ (800acfc <netconn_write_vectors_partly+0x15c>)
 800abc4:	484e      	ldr	r0, [pc, #312]	@ (800ad00 <netconn_write_vectors_partly+0x160>)
 800abc6:	f00d f84b 	bl	8017c60 <iprintf>
 800abca:	f06f 030f 	mvn.w	r3, #15
 800abce:	e08f      	b.n	800acf0 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800abd8:	2b10      	cmp	r3, #16
 800abda:	d009      	beq.n	800abf0 <netconn_write_vectors_partly+0x50>
 800abdc:	4b46      	ldr	r3, [pc, #280]	@ (800acf8 <netconn_write_vectors_partly+0x158>)
 800abde:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800abe2:	4948      	ldr	r1, [pc, #288]	@ (800ad04 <netconn_write_vectors_partly+0x164>)
 800abe4:	4846      	ldr	r0, [pc, #280]	@ (800ad00 <netconn_write_vectors_partly+0x160>)
 800abe6:	f00d f83b 	bl	8017c60 <iprintf>
 800abea:	f06f 0305 	mvn.w	r3, #5
 800abee:	e07f      	b.n	800acf0 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800abf6:	f003 0302 	and.w	r3, r3, #2
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d104      	bne.n	800ac08 <netconn_write_vectors_partly+0x68>
 800abfe:	797b      	ldrb	r3, [r7, #5]
 800ac00:	f003 0304 	and.w	r3, r3, #4
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d001      	beq.n	800ac0c <netconn_write_vectors_partly+0x6c>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e000      	b.n	800ac0e <netconn_write_vectors_partly+0x6e>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800ac12:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d005      	beq.n	800ac26 <netconn_write_vectors_partly+0x86>
 800ac1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d102      	bne.n	800ac26 <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800ac20:	f06f 0305 	mvn.w	r3, #5
 800ac24:	e064      	b.n	800acf0 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 800ac26:	2300      	movs	r3, #0
 800ac28:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac2e:	e015      	b.n	800ac5c <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 800ac30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac32:	00db      	lsls	r3, r3, #3
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	4413      	add	r3, r2
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac3c:	4413      	add	r3, r2
 800ac3e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800ac40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac42:	00db      	lsls	r3, r3, #3
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	4413      	add	r3, r2
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d202      	bcs.n	800ac56 <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 800ac50:	f06f 0305 	mvn.w	r3, #5
 800ac54:	e04c      	b.n	800acf0 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 800ac56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac58:	3301      	adds	r3, #1
 800ac5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac5c:	88fb      	ldrh	r3, [r7, #6]
 800ac5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac60:	429a      	cmp	r2, r3
 800ac62:	dbe5      	blt.n	800ac30 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 800ac64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d101      	bne.n	800ac6e <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	e040      	b.n	800acf0 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 800ac6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	da0a      	bge.n	800ac8a <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800ac74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d102      	bne.n	800ac80 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 800ac7a:	f06f 0305 	mvn.w	r3, #5
 800ac7e:	e037      	b.n	800acf0 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800ac80:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ac84:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800ac86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac88:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800ac92:	88fb      	ldrh	r3, [r7, #6]
 800ac94:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800ac9a:	797b      	ldrb	r3, [r7, #5]
 800ac9c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800aca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800aca8:	f107 0314 	add.w	r3, r7, #20
 800acac:	4619      	mov	r1, r3
 800acae:	4816      	ldr	r0, [pc, #88]	@ (800ad08 <netconn_write_vectors_partly+0x168>)
 800acb0:	f7ff fb82 	bl	800a3b8 <netconn_apimsg>
 800acb4:	4603      	mov	r3, r0
 800acb6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800acba:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d114      	bne.n	800acec <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 800acc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d002      	beq.n	800acce <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800acc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800accc:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800acce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d10a      	bne.n	800acec <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800acd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acda:	429a      	cmp	r2, r3
 800acdc:	d006      	beq.n	800acec <netconn_write_vectors_partly+0x14c>
 800acde:	4b06      	ldr	r3, [pc, #24]	@ (800acf8 <netconn_write_vectors_partly+0x158>)
 800ace0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ace4:	4909      	ldr	r1, [pc, #36]	@ (800ad0c <netconn_write_vectors_partly+0x16c>)
 800ace6:	4806      	ldr	r0, [pc, #24]	@ (800ad00 <netconn_write_vectors_partly+0x160>)
 800ace8:	f00c ffba 	bl	8017c60 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800acec:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3748      	adds	r7, #72	@ 0x48
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	080192dc 	.word	0x080192dc
 800acfc:	080195b4 	.word	0x080195b4
 800ad00:	08019334 	.word	0x08019334
 800ad04:	080195d0 	.word	0x080195d0
 800ad08:	0800c365 	.word	0x0800c365
 800ad0c:	080195f4 	.word	0x080195f4

0800ad10 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b08c      	sub	sp, #48	@ 0x30
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d109      	bne.n	800ad36 <netconn_close_shutdown+0x26>
 800ad22:	4b0f      	ldr	r3, [pc, #60]	@ (800ad60 <netconn_close_shutdown+0x50>)
 800ad24:	f240 4247 	movw	r2, #1095	@ 0x447
 800ad28:	490e      	ldr	r1, [pc, #56]	@ (800ad64 <netconn_close_shutdown+0x54>)
 800ad2a:	480f      	ldr	r0, [pc, #60]	@ (800ad68 <netconn_close_shutdown+0x58>)
 800ad2c:	f00c ff98 	bl	8017c60 <iprintf>
 800ad30:	f06f 030f 	mvn.w	r3, #15
 800ad34:	e010      	b.n	800ad58 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800ad3a:	78fb      	ldrb	r3, [r7, #3]
 800ad3c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ad3e:	2329      	movs	r3, #41	@ 0x29
 800ad40:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800ad42:	f107 030c 	add.w	r3, r7, #12
 800ad46:	4619      	mov	r1, r3
 800ad48:	4808      	ldr	r0, [pc, #32]	@ (800ad6c <netconn_close_shutdown+0x5c>)
 800ad4a:	f7ff fb35 	bl	800a3b8 <netconn_apimsg>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ad54:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3730      	adds	r7, #48	@ 0x30
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	080192dc 	.word	0x080192dc
 800ad64:	08019618 	.word	0x08019618
 800ad68:	08019334 	.word	0x08019334
 800ad6c:	0800c47d 	.word	0x0800c47d

0800ad70 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800ad78:	2103      	movs	r1, #3
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7ff ffc8 	bl	800ad10 <netconn_close_shutdown>
 800ad80:	4603      	mov	r3, r0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b084      	sub	sp, #16
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d101      	bne.n	800ad9c <netconn_err+0x12>
    return ERR_OK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	e00d      	b.n	800adb8 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800ad9c:	f00c fe42 	bl	8017a24 <sys_arch_protect>
 800ada0:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	7a1b      	ldrb	r3, [r3, #8]
 800ada6:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f00c fe46 	bl	8017a40 <sys_arch_unprotect>
  return err;
 800adb4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	4603      	mov	r3, r0
 800adc8:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800adca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adce:	f113 0f0d 	cmn.w	r3, #13
 800add2:	d009      	beq.n	800ade8 <lwip_netconn_err_to_msg+0x28>
 800add4:	f113 0f0d 	cmn.w	r3, #13
 800add8:	dc0c      	bgt.n	800adf4 <lwip_netconn_err_to_msg+0x34>
 800adda:	f113 0f0f 	cmn.w	r3, #15
 800adde:	d007      	beq.n	800adf0 <lwip_netconn_err_to_msg+0x30>
 800ade0:	f113 0f0e 	cmn.w	r3, #14
 800ade4:	d002      	beq.n	800adec <lwip_netconn_err_to_msg+0x2c>
 800ade6:	e005      	b.n	800adf4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800ade8:	4b0a      	ldr	r3, [pc, #40]	@ (800ae14 <lwip_netconn_err_to_msg+0x54>)
 800adea:	e00e      	b.n	800ae0a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800adec:	4b0a      	ldr	r3, [pc, #40]	@ (800ae18 <lwip_netconn_err_to_msg+0x58>)
 800adee:	e00c      	b.n	800ae0a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800adf0:	4b0a      	ldr	r3, [pc, #40]	@ (800ae1c <lwip_netconn_err_to_msg+0x5c>)
 800adf2:	e00a      	b.n	800ae0a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800adf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d005      	beq.n	800ae08 <lwip_netconn_err_to_msg+0x48>
 800adfc:	4b08      	ldr	r3, [pc, #32]	@ (800ae20 <lwip_netconn_err_to_msg+0x60>)
 800adfe:	227d      	movs	r2, #125	@ 0x7d
 800ae00:	4908      	ldr	r1, [pc, #32]	@ (800ae24 <lwip_netconn_err_to_msg+0x64>)
 800ae02:	4809      	ldr	r0, [pc, #36]	@ (800ae28 <lwip_netconn_err_to_msg+0x68>)
 800ae04:	f00c ff2c 	bl	8017c60 <iprintf>
      return NULL;
 800ae08:	2300      	movs	r3, #0
  }
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3708      	adds	r7, #8
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	0801c7d0 	.word	0x0801c7d0
 800ae18:	0801c7d1 	.word	0x0801c7d1
 800ae1c:	0801c7d2 	.word	0x0801c7d2
 800ae20:	08019634 	.word	0x08019634
 800ae24:	08019668 	.word	0x08019668
 800ae28:	08019678 	.word	0x08019678

0800ae2c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d105      	bne.n	800ae48 <lwip_netconn_is_err_msg+0x1c>
 800ae3c:	4b12      	ldr	r3, [pc, #72]	@ (800ae88 <lwip_netconn_is_err_msg+0x5c>)
 800ae3e:	2285      	movs	r2, #133	@ 0x85
 800ae40:	4912      	ldr	r1, [pc, #72]	@ (800ae8c <lwip_netconn_is_err_msg+0x60>)
 800ae42:	4813      	ldr	r0, [pc, #76]	@ (800ae90 <lwip_netconn_is_err_msg+0x64>)
 800ae44:	f00c ff0c 	bl	8017c60 <iprintf>

  if (msg == &netconn_aborted) {
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a12      	ldr	r2, [pc, #72]	@ (800ae94 <lwip_netconn_is_err_msg+0x68>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d104      	bne.n	800ae5a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	22f3      	movs	r2, #243	@ 0xf3
 800ae54:	701a      	strb	r2, [r3, #0]
    return 1;
 800ae56:	2301      	movs	r3, #1
 800ae58:	e012      	b.n	800ae80 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a0e      	ldr	r2, [pc, #56]	@ (800ae98 <lwip_netconn_is_err_msg+0x6c>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d104      	bne.n	800ae6c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	22f2      	movs	r2, #242	@ 0xf2
 800ae66:	701a      	strb	r2, [r3, #0]
    return 1;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e009      	b.n	800ae80 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a0b      	ldr	r2, [pc, #44]	@ (800ae9c <lwip_netconn_is_err_msg+0x70>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d104      	bne.n	800ae7e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	22f1      	movs	r2, #241	@ 0xf1
 800ae78:	701a      	strb	r2, [r3, #0]
    return 1;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e000      	b.n	800ae80 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	08019634 	.word	0x08019634
 800ae8c:	080196a0 	.word	0x080196a0
 800ae90:	08019678 	.word	0x08019678
 800ae94:	0801c7d0 	.word	0x0801c7d0
 800ae98:	0801c7d1 	.word	0x0801c7d1
 800ae9c:	0801c7d2 	.word	0x0801c7d2

0800aea0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b088      	sub	sp, #32
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
 800aeac:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d105      	bne.n	800aec0 <recv_udp+0x20>
 800aeb4:	4b34      	ldr	r3, [pc, #208]	@ (800af88 <recv_udp+0xe8>)
 800aeb6:	22e5      	movs	r2, #229	@ 0xe5
 800aeb8:	4934      	ldr	r1, [pc, #208]	@ (800af8c <recv_udp+0xec>)
 800aeba:	4835      	ldr	r0, [pc, #212]	@ (800af90 <recv_udp+0xf0>)
 800aebc:	f00c fed0 	bl	8017c60 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d105      	bne.n	800aed2 <recv_udp+0x32>
 800aec6:	4b30      	ldr	r3, [pc, #192]	@ (800af88 <recv_udp+0xe8>)
 800aec8:	22e6      	movs	r2, #230	@ 0xe6
 800aeca:	4932      	ldr	r1, [pc, #200]	@ (800af94 <recv_udp+0xf4>)
 800aecc:	4830      	ldr	r0, [pc, #192]	@ (800af90 <recv_udp+0xf0>)
 800aece:	f00c fec7 	bl	8017c60 <iprintf>
  conn = (struct netconn *)arg;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d103      	bne.n	800aee4 <recv_udp+0x44>
    pbuf_free(p);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f003 f953 	bl	800e188 <pbuf_free>
    return;
 800aee2:	e04d      	b.n	800af80 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	68ba      	ldr	r2, [r7, #8]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d005      	beq.n	800aefa <recv_udp+0x5a>
 800aeee:	4b26      	ldr	r3, [pc, #152]	@ (800af88 <recv_udp+0xe8>)
 800aef0:	22ee      	movs	r2, #238	@ 0xee
 800aef2:	4929      	ldr	r1, [pc, #164]	@ (800af98 <recv_udp+0xf8>)
 800aef4:	4826      	ldr	r0, [pc, #152]	@ (800af90 <recv_udp+0xf0>)
 800aef6:	f00c feb3 	bl	8017c60 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	3310      	adds	r3, #16
 800aefe:	4618      	mov	r0, r3
 800af00:	f00c fc75 	bl	80177ee <sys_mbox_valid>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d103      	bne.n	800af12 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f003 f93c 	bl	800e188 <pbuf_free>
    return;
 800af10:	e036      	b.n	800af80 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800af12:	2006      	movs	r0, #6
 800af14:	f002 fa1e 	bl	800d354 <memp_malloc>
 800af18:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d103      	bne.n	800af28 <recv_udp+0x88>
    pbuf_free(p);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f003 f931 	bl	800e188 <pbuf_free>
    return;
 800af26:	e02b      	b.n	800af80 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d002      	beq.n	800af40 <recv_udp+0xa0>
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	e000      	b.n	800af42 <recv_udp+0xa2>
 800af40:	2300      	movs	r3, #0
 800af42:	69ba      	ldr	r2, [r7, #24]
 800af44:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800af4a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	891b      	ldrh	r3, [r3, #8]
 800af50:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	3310      	adds	r3, #16
 800af56:	69b9      	ldr	r1, [r7, #24]
 800af58:	4618      	mov	r0, r3
 800af5a:	f00c fbd3 	bl	8017704 <sys_mbox_trypost>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d003      	beq.n	800af6c <recv_udp+0xcc>
    netbuf_delete(buf);
 800af64:	69b8      	ldr	r0, [r7, #24]
 800af66:	f001 fb15 	bl	800c594 <netbuf_delete>
    return;
 800af6a:	e009      	b.n	800af80 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af70:	2b00      	cmp	r3, #0
 800af72:	d005      	beq.n	800af80 <recv_udp+0xe0>
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af78:	8afa      	ldrh	r2, [r7, #22]
 800af7a:	2100      	movs	r1, #0
 800af7c:	69f8      	ldr	r0, [r7, #28]
 800af7e:	4798      	blx	r3
  }
}
 800af80:	3720      	adds	r7, #32
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	08019634 	.word	0x08019634
 800af8c:	080196ac 	.word	0x080196ac
 800af90:	08019678 	.word	0x08019678
 800af94:	080196d0 	.word	0x080196d0
 800af98:	080196f0 	.word	0x080196f0

0800af9c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b088      	sub	sp, #32
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d106      	bne.n	800afbe <recv_tcp+0x22>
 800afb0:	4b36      	ldr	r3, [pc, #216]	@ (800b08c <recv_tcp+0xf0>)
 800afb2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800afb6:	4936      	ldr	r1, [pc, #216]	@ (800b090 <recv_tcp+0xf4>)
 800afb8:	4836      	ldr	r0, [pc, #216]	@ (800b094 <recv_tcp+0xf8>)
 800afba:	f00c fe51 	bl	8017c60 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d106      	bne.n	800afd2 <recv_tcp+0x36>
 800afc4:	4b31      	ldr	r3, [pc, #196]	@ (800b08c <recv_tcp+0xf0>)
 800afc6:	f240 122d 	movw	r2, #301	@ 0x12d
 800afca:	4933      	ldr	r1, [pc, #204]	@ (800b098 <recv_tcp+0xfc>)
 800afcc:	4831      	ldr	r0, [pc, #196]	@ (800b094 <recv_tcp+0xf8>)
 800afce:	f00c fe47 	bl	8017c60 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800afd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d006      	beq.n	800afe8 <recv_tcp+0x4c>
 800afda:	4b2c      	ldr	r3, [pc, #176]	@ (800b08c <recv_tcp+0xf0>)
 800afdc:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800afe0:	492e      	ldr	r1, [pc, #184]	@ (800b09c <recv_tcp+0x100>)
 800afe2:	482c      	ldr	r0, [pc, #176]	@ (800b094 <recv_tcp+0xf8>)
 800afe4:	f00c fe3c 	bl	8017c60 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d102      	bne.n	800aff8 <recv_tcp+0x5c>
    return ERR_VAL;
 800aff2:	f06f 0305 	mvn.w	r3, #5
 800aff6:	e045      	b.n	800b084 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	429a      	cmp	r2, r3
 800b000:	d006      	beq.n	800b010 <recv_tcp+0x74>
 800b002:	4b22      	ldr	r3, [pc, #136]	@ (800b08c <recv_tcp+0xf0>)
 800b004:	f240 1235 	movw	r2, #309	@ 0x135
 800b008:	4925      	ldr	r1, [pc, #148]	@ (800b0a0 <recv_tcp+0x104>)
 800b00a:	4822      	ldr	r0, [pc, #136]	@ (800b094 <recv_tcp+0xf8>)
 800b00c:	f00c fe28 	bl	8017c60 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	3310      	adds	r3, #16
 800b014:	4618      	mov	r0, r3
 800b016:	f00c fbea 	bl	80177ee <sys_mbox_valid>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10d      	bne.n	800b03c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d008      	beq.n	800b038 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	891b      	ldrh	r3, [r3, #8]
 800b02a:	4619      	mov	r1, r3
 800b02c:	68b8      	ldr	r0, [r7, #8]
 800b02e:	f004 f885 	bl	800f13c <tcp_recved>
      pbuf_free(p);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f003 f8a8 	bl	800e188 <pbuf_free>
    }
    return ERR_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	e023      	b.n	800b084 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d005      	beq.n	800b04e <recv_tcp+0xb2>
    msg = p;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	891b      	ldrh	r3, [r3, #8]
 800b04a:	83fb      	strh	r3, [r7, #30]
 800b04c:	e003      	b.n	800b056 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b04e:	4b15      	ldr	r3, [pc, #84]	@ (800b0a4 <recv_tcp+0x108>)
 800b050:	61bb      	str	r3, [r7, #24]
    len = 0;
 800b052:	2300      	movs	r3, #0
 800b054:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	3310      	adds	r3, #16
 800b05a:	69b9      	ldr	r1, [r7, #24]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f00c fb51 	bl	8017704 <sys_mbox_trypost>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d002      	beq.n	800b06e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800b068:	f04f 33ff 	mov.w	r3, #4294967295
 800b06c:	e00a      	b.n	800b084 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b072:	2b00      	cmp	r3, #0
 800b074:	d005      	beq.n	800b082 <recv_tcp+0xe6>
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b07a:	8bfa      	ldrh	r2, [r7, #30]
 800b07c:	2100      	movs	r1, #0
 800b07e:	6978      	ldr	r0, [r7, #20]
 800b080:	4798      	blx	r3
  }

  return ERR_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3720      	adds	r7, #32
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	08019634 	.word	0x08019634
 800b090:	08019710 	.word	0x08019710
 800b094:	08019678 	.word	0x08019678
 800b098:	08019734 	.word	0x08019734
 800b09c:	08019754 	.word	0x08019754
 800b0a0:	0801976c 	.word	0x0801976c
 800b0a4:	0801c7d2 	.word	0x0801c7d2

0800b0a8 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d106      	bne.n	800b0ca <poll_tcp+0x22>
 800b0bc:	4b2b      	ldr	r3, [pc, #172]	@ (800b16c <poll_tcp+0xc4>)
 800b0be:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800b0c2:	492b      	ldr	r1, [pc, #172]	@ (800b170 <poll_tcp+0xc8>)
 800b0c4:	482b      	ldr	r0, [pc, #172]	@ (800b174 <poll_tcp+0xcc>)
 800b0c6:	f00c fdcb 	bl	8017c60 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	785b      	ldrb	r3, [r3, #1]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d104      	bne.n	800b0dc <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b0d2:	2101      	movs	r1, #1
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f000 ff75 	bl	800bfc4 <lwip_netconn_do_writemore>
 800b0da:	e016      	b.n	800b10a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	785b      	ldrb	r3, [r3, #1]
 800b0e0:	2b04      	cmp	r3, #4
 800b0e2:	d112      	bne.n	800b10a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00a      	beq.n	800b102 <poll_tcp+0x5a>
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f0:	7a5b      	ldrb	r3, [r3, #9]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d005      	beq.n	800b102 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0fa:	7a5a      	ldrb	r2, [r3, #9]
 800b0fc:	3a01      	subs	r2, #1
 800b0fe:	b2d2      	uxtb	r2, r2
 800b100:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b102:	2101      	movs	r1, #1
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f000 fc05 	bl	800b914 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b110:	f003 0310 	and.w	r3, r3, #16
 800b114:	2b00      	cmp	r3, #0
 800b116:	d023      	beq.n	800b160 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d01f      	beq.n	800b160 <poll_tcp+0xb8>
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b128:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800b12c:	d318      	bcc.n	800b160 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b136:	2b04      	cmp	r3, #4
 800b138:	d812      	bhi.n	800b160 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b140:	f023 0310 	bic.w	r3, r3, #16
 800b144:	b2da      	uxtb	r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b150:	2b00      	cmp	r3, #0
 800b152:	d005      	beq.n	800b160 <poll_tcp+0xb8>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b158:	2200      	movs	r2, #0
 800b15a:	2102      	movs	r1, #2
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	08019634 	.word	0x08019634
 800b170:	0801978c 	.word	0x0801978c
 800b174:	08019678 	.word	0x08019678

0800b178 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b086      	sub	sp, #24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	4613      	mov	r3, r2
 800b184:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d106      	bne.n	800b19e <sent_tcp+0x26>
 800b190:	4b21      	ldr	r3, [pc, #132]	@ (800b218 <sent_tcp+0xa0>)
 800b192:	f240 1293 	movw	r2, #403	@ 0x193
 800b196:	4921      	ldr	r1, [pc, #132]	@ (800b21c <sent_tcp+0xa4>)
 800b198:	4821      	ldr	r0, [pc, #132]	@ (800b220 <sent_tcp+0xa8>)
 800b19a:	f00c fd61 	bl	8017c60 <iprintf>

  if (conn) {
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d034      	beq.n	800b20e <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	785b      	ldrb	r3, [r3, #1]
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d104      	bne.n	800b1b6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b1ac:	2101      	movs	r1, #1
 800b1ae:	6978      	ldr	r0, [r7, #20]
 800b1b0:	f000 ff08 	bl	800bfc4 <lwip_netconn_do_writemore>
 800b1b4:	e007      	b.n	800b1c6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	785b      	ldrb	r3, [r3, #1]
 800b1ba:	2b04      	cmp	r3, #4
 800b1bc:	d103      	bne.n	800b1c6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b1be:	2101      	movs	r1, #1
 800b1c0:	6978      	ldr	r0, [r7, #20]
 800b1c2:	f000 fba7 	bl	800b914 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d01f      	beq.n	800b20e <sent_tcp+0x96>
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b1d6:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800b1da:	d318      	bcc.n	800b20e <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b1e4:	2b04      	cmp	r3, #4
 800b1e6:	d812      	bhi.n	800b20e <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b1ee:	f023 0310 	bic.w	r3, r3, #16
 800b1f2:	b2da      	uxtb	r2, r3
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d005      	beq.n	800b20e <sent_tcp+0x96>
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b206:	88fa      	ldrh	r2, [r7, #6]
 800b208:	2102      	movs	r1, #2
 800b20a:	6978      	ldr	r0, [r7, #20]
 800b20c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3718      	adds	r7, #24
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	08019634 	.word	0x08019634
 800b21c:	0801978c 	.word	0x0801978c
 800b220:	08019678 	.word	0x08019678

0800b224 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b088      	sub	sp, #32
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	460b      	mov	r3, r1
 800b22e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d106      	bne.n	800b248 <err_tcp+0x24>
 800b23a:	4b61      	ldr	r3, [pc, #388]	@ (800b3c0 <err_tcp+0x19c>)
 800b23c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800b240:	4960      	ldr	r1, [pc, #384]	@ (800b3c4 <err_tcp+0x1a0>)
 800b242:	4861      	ldr	r0, [pc, #388]	@ (800b3c8 <err_tcp+0x1a4>)
 800b244:	f00c fd0c 	bl	8017c60 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800b248:	f00c fbec 	bl	8017a24 <sys_arch_protect>
 800b24c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	2200      	movs	r2, #0
 800b252:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	78fa      	ldrb	r2, [r7, #3]
 800b258:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b260:	f043 0301 	orr.w	r3, r3, #1
 800b264:	b2da      	uxtb	r2, r3
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	785b      	ldrb	r3, [r3, #1]
 800b270:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	2200      	movs	r2, #0
 800b276:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800b278:	69b8      	ldr	r0, [r7, #24]
 800b27a:	f00c fbe1 	bl	8017a40 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b282:	2b00      	cmp	r3, #0
 800b284:	d005      	beq.n	800b292 <err_tcp+0x6e>
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b28a:	2200      	movs	r2, #0
 800b28c:	2104      	movs	r1, #4
 800b28e:	69f8      	ldr	r0, [r7, #28]
 800b290:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b296:	2b00      	cmp	r3, #0
 800b298:	d005      	beq.n	800b2a6 <err_tcp+0x82>
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b29e:	2200      	movs	r2, #0
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	69f8      	ldr	r0, [r7, #28]
 800b2a4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d005      	beq.n	800b2ba <err_tcp+0x96>
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	2102      	movs	r1, #2
 800b2b6:	69f8      	ldr	r0, [r7, #28]
 800b2b8:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800b2ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7ff fd7e 	bl	800adc0 <lwip_netconn_err_to_msg>
 800b2c4:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	3310      	adds	r3, #16
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f00c fa8f 	bl	80177ee <sys_mbox_valid>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d005      	beq.n	800b2e2 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	3310      	adds	r3, #16
 800b2da:	6939      	ldr	r1, [r7, #16]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f00c fa11 	bl	8017704 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	3314      	adds	r3, #20
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f00c fa81 	bl	80177ee <sys_mbox_valid>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d005      	beq.n	800b2fe <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	3314      	adds	r3, #20
 800b2f6:	6939      	ldr	r1, [r7, #16]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f00c fa03 	bl	8017704 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b2fe:	7dfb      	ldrb	r3, [r7, #23]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d005      	beq.n	800b310 <err_tcp+0xec>
 800b304:	7dfb      	ldrb	r3, [r7, #23]
 800b306:	2b04      	cmp	r3, #4
 800b308:	d002      	beq.n	800b310 <err_tcp+0xec>
 800b30a:	7dfb      	ldrb	r3, [r7, #23]
 800b30c:	2b03      	cmp	r3, #3
 800b30e:	d146      	bne.n	800b39e <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b316:	f003 0304 	and.w	r3, r3, #4
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	bf14      	ite	ne
 800b31e:	2301      	movne	r3, #1
 800b320:	2300      	moveq	r3, #0
 800b322:	b2db      	uxtb	r3, r3
 800b324:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b32c:	f023 0304 	bic.w	r3, r3, #4
 800b330:	b2da      	uxtb	r2, r3
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d13b      	bne.n	800b3b6 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b342:	2b00      	cmp	r3, #0
 800b344:	d106      	bne.n	800b354 <err_tcp+0x130>
 800b346:	4b1e      	ldr	r3, [pc, #120]	@ (800b3c0 <err_tcp+0x19c>)
 800b348:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800b34c:	491f      	ldr	r1, [pc, #124]	@ (800b3cc <err_tcp+0x1a8>)
 800b34e:	481e      	ldr	r0, [pc, #120]	@ (800b3c8 <err_tcp+0x1a4>)
 800b350:	f00c fc86 	bl	8017c60 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800b354:	7dfb      	ldrb	r3, [r7, #23]
 800b356:	2b04      	cmp	r3, #4
 800b358:	d104      	bne.n	800b364 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b35e:	2200      	movs	r2, #0
 800b360:	711a      	strb	r2, [r3, #4]
 800b362:	e003      	b.n	800b36c <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b368:	78fa      	ldrb	r2, [r7, #3]
 800b36a:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	330c      	adds	r3, #12
 800b374:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b376:	68b8      	ldr	r0, [r7, #8]
 800b378:	f00c faca 	bl	8017910 <sys_sem_valid>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d106      	bne.n	800b390 <err_tcp+0x16c>
 800b382:	4b0f      	ldr	r3, [pc, #60]	@ (800b3c0 <err_tcp+0x19c>)
 800b384:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800b388:	4911      	ldr	r1, [pc, #68]	@ (800b3d0 <err_tcp+0x1ac>)
 800b38a:	480f      	ldr	r0, [pc, #60]	@ (800b3c8 <err_tcp+0x1a4>)
 800b38c:	f00c fc68 	bl	8017c60 <iprintf>
      conn->current_msg = NULL;
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	2200      	movs	r2, #0
 800b394:	625a      	str	r2, [r3, #36]	@ 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800b396:	68b8      	ldr	r0, [r7, #8]
 800b398:	f00c faa0 	bl	80178dc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800b39c:	e00b      	b.n	800b3b6 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d008      	beq.n	800b3b8 <err_tcp+0x194>
 800b3a6:	4b06      	ldr	r3, [pc, #24]	@ (800b3c0 <err_tcp+0x19c>)
 800b3a8:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800b3ac:	4909      	ldr	r1, [pc, #36]	@ (800b3d4 <err_tcp+0x1b0>)
 800b3ae:	4806      	ldr	r0, [pc, #24]	@ (800b3c8 <err_tcp+0x1a4>)
 800b3b0:	f00c fc56 	bl	8017c60 <iprintf>
  }
}
 800b3b4:	e000      	b.n	800b3b8 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 800b3b6:	bf00      	nop
}
 800b3b8:	bf00      	nop
 800b3ba:	3720      	adds	r7, #32
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	08019634 	.word	0x08019634
 800b3c4:	0801978c 	.word	0x0801978c
 800b3c8:	08019678 	.word	0x08019678
 800b3cc:	0801979c 	.word	0x0801979c
 800b3d0:	080197b8 	.word	0x080197b8
 800b3d4:	080197d4 	.word	0x080197d4

0800b3d8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800b3e6:	6879      	ldr	r1, [r7, #4]
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f004 fd7b 	bl	800fee4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b3ee:	490a      	ldr	r1, [pc, #40]	@ (800b418 <setup_tcp+0x40>)
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f004 fd89 	bl	800ff08 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b3f6:	4909      	ldr	r1, [pc, #36]	@ (800b41c <setup_tcp+0x44>)
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f004 fda7 	bl	800ff4c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b3fe:	2202      	movs	r2, #2
 800b400:	4907      	ldr	r1, [pc, #28]	@ (800b420 <setup_tcp+0x48>)
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f004 fdfe 	bl	8010004 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b408:	4906      	ldr	r1, [pc, #24]	@ (800b424 <setup_tcp+0x4c>)
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f004 fdc0 	bl	800ff90 <tcp_err>
}
 800b410:	bf00      	nop
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	0800af9d 	.word	0x0800af9d
 800b41c:	0800b179 	.word	0x0800b179
 800b420:	0800b0a9 	.word	0x0800b0a9
 800b424:	0800b225 	.word	0x0800b225

0800b428 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800b428:	b590      	push	{r4, r7, lr}
 800b42a:	b089      	sub	sp, #36	@ 0x24
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	4613      	mov	r3, r2
 800b434:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d102      	bne.n	800b446 <accept_function+0x1e>
    return ERR_VAL;
 800b440:	f06f 0305 	mvn.w	r3, #5
 800b444:	e0a1      	b.n	800b58a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	3314      	adds	r3, #20
 800b44a:	4618      	mov	r0, r3
 800b44c:	f00c f9cf 	bl	80177ee <sys_mbox_valid>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d102      	bne.n	800b45c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800b456:	f06f 0305 	mvn.w	r3, #5
 800b45a:	e096      	b.n	800b58a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d11b      	bne.n	800b49a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	f103 0414 	add.w	r4, r3, #20
 800b468:	f06f 000c 	mvn.w	r0, #12
 800b46c:	f7ff fca8 	bl	800adc0 <lwip_netconn_err_to_msg>
 800b470:	4603      	mov	r3, r0
 800b472:	4619      	mov	r1, r3
 800b474:	4620      	mov	r0, r4
 800b476:	f00c f945 	bl	8017704 <sys_mbox_trypost>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d109      	bne.n	800b494 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b484:	2b00      	cmp	r3, #0
 800b486:	d005      	beq.n	800b494 <accept_function+0x6c>
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b48c:	2200      	movs	r2, #0
 800b48e:	2100      	movs	r1, #0
 800b490:	69f8      	ldr	r0, [r7, #28]
 800b492:	4798      	blx	r3
    }
    return ERR_VAL;
 800b494:	f06f 0305 	mvn.w	r3, #5
 800b498:	e077      	b.n	800b58a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800b49a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d006      	beq.n	800b4b0 <accept_function+0x88>
 800b4a2:	4b3c      	ldr	r3, [pc, #240]	@ (800b594 <accept_function+0x16c>)
 800b4a4:	f240 222a 	movw	r2, #554	@ 0x22a
 800b4a8:	493b      	ldr	r1, [pc, #236]	@ (800b598 <accept_function+0x170>)
 800b4aa:	483c      	ldr	r0, [pc, #240]	@ (800b59c <accept_function+0x174>)
 800b4ac:	f00c fbd8 	bl	8017c60 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	781a      	ldrb	r2, [r3, #0]
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	4610      	mov	r0, r2
 800b4bc:	f000 f8f0 	bl	800b6a0 <netconn_alloc>
 800b4c0:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d11b      	bne.n	800b500 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	f103 0414 	add.w	r4, r3, #20
 800b4ce:	f06f 000c 	mvn.w	r0, #12
 800b4d2:	f7ff fc75 	bl	800adc0 <lwip_netconn_err_to_msg>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f00c f912 	bl	8017704 <sys_mbox_trypost>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d109      	bne.n	800b4fa <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b4e6:	69fb      	ldr	r3, [r7, #28]
 800b4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d005      	beq.n	800b4fa <accept_function+0xd2>
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	69f8      	ldr	r0, [r7, #28]
 800b4f8:	4798      	blx	r3
    }
    return ERR_MEM;
 800b4fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b4fe:	e044      	b.n	800b58a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	68ba      	ldr	r2, [r7, #8]
 800b504:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800b506:	69b8      	ldr	r0, [r7, #24]
 800b508:	f7ff ff66 	bl	800b3d8 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	3314      	adds	r3, #20
 800b510:	69b9      	ldr	r1, [r7, #24]
 800b512:	4618      	mov	r0, r3
 800b514:	f00c f8f6 	bl	8017704 <sys_mbox_trypost>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d02a      	beq.n	800b574 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800b524:	2100      	movs	r1, #0
 800b526:	6978      	ldr	r0, [r7, #20]
 800b528:	f004 fcdc 	bl	800fee4 <tcp_arg>
    tcp_recv(pcb, NULL);
 800b52c:	2100      	movs	r1, #0
 800b52e:	6978      	ldr	r0, [r7, #20]
 800b530:	f004 fcea 	bl	800ff08 <tcp_recv>
    tcp_sent(pcb, NULL);
 800b534:	2100      	movs	r1, #0
 800b536:	6978      	ldr	r0, [r7, #20]
 800b538:	f004 fd08 	bl	800ff4c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800b53c:	2200      	movs	r2, #0
 800b53e:	2100      	movs	r1, #0
 800b540:	6978      	ldr	r0, [r7, #20]
 800b542:	f004 fd5f 	bl	8010004 <tcp_poll>
    tcp_err(pcb, NULL);
 800b546:	2100      	movs	r1, #0
 800b548:	6978      	ldr	r0, [r7, #20]
 800b54a:	f004 fd21 	bl	800ff90 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	2200      	movs	r2, #0
 800b552:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	3310      	adds	r3, #16
 800b558:	4618      	mov	r0, r3
 800b55a:	f00c f8c1 	bl	80176e0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	3310      	adds	r3, #16
 800b562:	4618      	mov	r0, r3
 800b564:	f00c f954 	bl	8017810 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800b568:	69b8      	ldr	r0, [r7, #24]
 800b56a:	f000 f90b 	bl	800b784 <netconn_free>
    return ERR_MEM;
 800b56e:	f04f 33ff 	mov.w	r3, #4294967295
 800b572:	e00a      	b.n	800b58a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d005      	beq.n	800b588 <accept_function+0x160>
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b580:	2200      	movs	r2, #0
 800b582:	2100      	movs	r1, #0
 800b584:	69f8      	ldr	r0, [r7, #28]
 800b586:	4798      	blx	r3
  }

  return ERR_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3724      	adds	r7, #36	@ 0x24
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd90      	pop	{r4, r7, pc}
 800b592:	bf00      	nop
 800b594:	08019634 	.word	0x08019634
 800b598:	080197f0 	.word	0x080197f0
 800b59c:	08019678 	.word	0x08019678

0800b5a0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800b5a0:	b590      	push	{r4, r7, lr}
 800b5a2:	b085      	sub	sp, #20
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d006      	beq.n	800b5c4 <pcb_new+0x24>
 800b5b6:	4b2b      	ldr	r3, [pc, #172]	@ (800b664 <pcb_new+0xc4>)
 800b5b8:	f240 2265 	movw	r2, #613	@ 0x265
 800b5bc:	492a      	ldr	r1, [pc, #168]	@ (800b668 <pcb_new+0xc8>)
 800b5be:	482b      	ldr	r0, [pc, #172]	@ (800b66c <pcb_new+0xcc>)
 800b5c0:	f00c fb4e 	bl	8017c60 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b5ce:	2b10      	cmp	r3, #16
 800b5d0:	d022      	beq.n	800b618 <pcb_new+0x78>
 800b5d2:	2b20      	cmp	r3, #32
 800b5d4:	d133      	bne.n	800b63e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681c      	ldr	r4, [r3, #0]
 800b5da:	7bfb      	ldrb	r3, [r7, #15]
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f009 fd5a 	bl	8015096 <udp_new_ip_type>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d02a      	beq.n	800b646 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	2b22      	cmp	r3, #34	@ 0x22
 800b5f8:	d104      	bne.n	800b604 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	2201      	movs	r2, #1
 800b602:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6858      	ldr	r0, [r3, #4]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	461a      	mov	r2, r3
 800b610:	4917      	ldr	r1, [pc, #92]	@ (800b670 <pcb_new+0xd0>)
 800b612:	f009 fcc7 	bl	8014fa4 <udp_recv>
      }
      break;
 800b616:	e016      	b.n	800b646 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681c      	ldr	r4, [r3, #0]
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
 800b61e:	4618      	mov	r0, r3
 800b620:	f004 fc52 	bl	800fec8 <tcp_new_ip_type>
 800b624:	4603      	mov	r3, r0
 800b626:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00b      	beq.n	800b64a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4618      	mov	r0, r3
 800b638:	f7ff fece 	bl	800b3d8 <setup_tcp>
      }
      break;
 800b63c:	e005      	b.n	800b64a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	22fa      	movs	r2, #250	@ 0xfa
 800b642:	711a      	strb	r2, [r3, #4]
      return;
 800b644:	e00a      	b.n	800b65c <pcb_new+0xbc>
      break;
 800b646:	bf00      	nop
 800b648:	e000      	b.n	800b64c <pcb_new+0xac>
      break;
 800b64a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d102      	bne.n	800b65c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	22ff      	movs	r2, #255	@ 0xff
 800b65a:	711a      	strb	r2, [r3, #4]
  }
}
 800b65c:	3714      	adds	r7, #20
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd90      	pop	{r4, r7, pc}
 800b662:	bf00      	nop
 800b664:	08019634 	.word	0x08019634
 800b668:	08019818 	.word	0x08019818
 800b66c:	08019678 	.word	0x08019678
 800b670:	0800aea1 	.word	0x0800aea1

0800b674 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d102      	bne.n	800b696 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f7ff ff85 	bl	800b5a0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800b696:	bf00      	nop
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
	...

0800b6a0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b086      	sub	sp, #24
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	6039      	str	r1, [r7, #0]
 800b6aa:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b6b0:	2007      	movs	r0, #7
 800b6b2:	f001 fe4f 	bl	800d354 <memp_malloc>
 800b6b6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d101      	bne.n	800b6c2 <netconn_alloc+0x22>
    return NULL;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	e056      	b.n	800b770 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	79fa      	ldrb	r2, [r7, #7]
 800b6cc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b6d4:	79fb      	ldrb	r3, [r7, #7]
 800b6d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b6da:	2b10      	cmp	r3, #16
 800b6dc:	d004      	beq.n	800b6e8 <netconn_alloc+0x48>
 800b6de:	2b20      	cmp	r3, #32
 800b6e0:	d105      	bne.n	800b6ee <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800b6e2:	2306      	movs	r3, #6
 800b6e4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b6e6:	e00a      	b.n	800b6fe <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b6e8:	2306      	movs	r3, #6
 800b6ea:	617b      	str	r3, [r7, #20]
      break;
 800b6ec:	e007      	b.n	800b6fe <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b6ee:	4b22      	ldr	r3, [pc, #136]	@ (800b778 <netconn_alloc+0xd8>)
 800b6f0:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800b6f4:	4921      	ldr	r1, [pc, #132]	@ (800b77c <netconn_alloc+0xdc>)
 800b6f6:	4822      	ldr	r0, [pc, #136]	@ (800b780 <netconn_alloc+0xe0>)
 800b6f8:	f00c fab2 	bl	8017c60 <iprintf>
      goto free_and_return;
 800b6fc:	e033      	b.n	800b766 <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	3310      	adds	r3, #16
 800b702:	6979      	ldr	r1, [r7, #20]
 800b704:	4618      	mov	r0, r3
 800b706:	f00b ffc9 	bl	801769c <sys_mbox_new>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d129      	bne.n	800b764 <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	330c      	adds	r3, #12
 800b714:	2100      	movs	r1, #0
 800b716:	4618      	mov	r0, r3
 800b718:	f00c f887 	bl	801782a <sys_sem_new>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d005      	beq.n	800b72e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	3310      	adds	r3, #16
 800b726:	4618      	mov	r0, r3
 800b728:	f00b ffda 	bl	80176e0 <sys_mbox_free>
    goto free_and_return;
 800b72c:	e01b      	b.n	800b766 <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	3314      	adds	r3, #20
 800b732:	4618      	mov	r0, r3
 800b734:	f00c f86c 	bl	8017810 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f04f 32ff 	mov.w	r2, #4294967295
 800b744:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	683a      	ldr	r2, [r7, #0]
 800b74a:	629a      	str	r2, [r3, #40]	@ 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2200      	movs	r2, #0
 800b750:	625a      	str	r2, [r3, #36]	@ 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	7cfa      	ldrb	r2, [r7, #19]
 800b75c:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	e005      	b.n	800b770 <netconn_alloc+0xd0>
    goto free_and_return;
 800b764:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b766:	68f9      	ldr	r1, [r7, #12]
 800b768:	2007      	movs	r0, #7
 800b76a:	f001 fe69 	bl	800d440 <memp_free>
  return NULL;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3718      	adds	r7, #24
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	08019634 	.word	0x08019634
 800b77c:	08019838 	.word	0x08019838
 800b780:	08019678 	.word	0x08019678

0800b784 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d006      	beq.n	800b7a2 <netconn_free+0x1e>
 800b794:	4b1b      	ldr	r3, [pc, #108]	@ (800b804 <netconn_free+0x80>)
 800b796:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b79a:	491b      	ldr	r1, [pc, #108]	@ (800b808 <netconn_free+0x84>)
 800b79c:	481b      	ldr	r0, [pc, #108]	@ (800b80c <netconn_free+0x88>)
 800b79e:	f00c fa5f 	bl	8017c60 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	3310      	adds	r3, #16
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f00c f821 	bl	80177ee <sys_mbox_valid>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d006      	beq.n	800b7c0 <netconn_free+0x3c>
 800b7b2:	4b14      	ldr	r3, [pc, #80]	@ (800b804 <netconn_free+0x80>)
 800b7b4:	f240 3223 	movw	r2, #803	@ 0x323
 800b7b8:	4915      	ldr	r1, [pc, #84]	@ (800b810 <netconn_free+0x8c>)
 800b7ba:	4814      	ldr	r0, [pc, #80]	@ (800b80c <netconn_free+0x88>)
 800b7bc:	f00c fa50 	bl	8017c60 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	3314      	adds	r3, #20
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f00c f812 	bl	80177ee <sys_mbox_valid>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d006      	beq.n	800b7de <netconn_free+0x5a>
 800b7d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b804 <netconn_free+0x80>)
 800b7d2:	f240 3226 	movw	r2, #806	@ 0x326
 800b7d6:	490f      	ldr	r1, [pc, #60]	@ (800b814 <netconn_free+0x90>)
 800b7d8:	480c      	ldr	r0, [pc, #48]	@ (800b80c <netconn_free+0x88>)
 800b7da:	f00c fa41 	bl	8017c60 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	330c      	adds	r3, #12
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f00c f887 	bl	80178f6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	330c      	adds	r3, #12
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f00c f8a0 	bl	8017932 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800b7f2:	6879      	ldr	r1, [r7, #4]
 800b7f4:	2007      	movs	r0, #7
 800b7f6:	f001 fe23 	bl	800d440 <memp_free>
}
 800b7fa:	bf00      	nop
 800b7fc:	3708      	adds	r7, #8
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	08019634 	.word	0x08019634
 800b808:	08019860 	.word	0x08019860
 800b80c:	08019678 	.word	0x08019678
 800b810:	08019890 	.word	0x08019890
 800b814:	080198cc 	.word	0x080198cc

0800b818 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b086      	sub	sp, #24
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	3310      	adds	r3, #16
 800b824:	4618      	mov	r0, r3
 800b826:	f00b ffe2 	bl	80177ee <sys_mbox_valid>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d02f      	beq.n	800b890 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b830:	e018      	b.n	800b864 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b83a:	2b10      	cmp	r3, #16
 800b83c:	d10e      	bne.n	800b85c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	f107 020f 	add.w	r2, r7, #15
 800b844:	4611      	mov	r1, r2
 800b846:	4618      	mov	r0, r3
 800b848:	f7ff faf0 	bl	800ae2c <lwip_netconn_is_err_msg>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d108      	bne.n	800b864 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	4618      	mov	r0, r3
 800b856:	f002 fc97 	bl	800e188 <pbuf_free>
 800b85a:	e003      	b.n	800b864 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	4618      	mov	r0, r3
 800b860:	f000 fe98 	bl	800c594 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	3310      	adds	r3, #16
 800b868:	f107 0210 	add.w	r2, r7, #16
 800b86c:	4611      	mov	r1, r2
 800b86e:	4618      	mov	r0, r3
 800b870:	f00b ffa1 	bl	80177b6 <sys_arch_mbox_tryfetch>
 800b874:	4603      	mov	r3, r0
 800b876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87a:	d1da      	bne.n	800b832 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	3310      	adds	r3, #16
 800b880:	4618      	mov	r0, r3
 800b882:	f00b ff2d 	bl	80176e0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	3310      	adds	r3, #16
 800b88a:	4618      	mov	r0, r3
 800b88c:	f00b ffc0 	bl	8017810 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	3314      	adds	r3, #20
 800b894:	4618      	mov	r0, r3
 800b896:	f00b ffaa 	bl	80177ee <sys_mbox_valid>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d034      	beq.n	800b90a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b8a0:	e01d      	b.n	800b8de <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	f107 020e 	add.w	r2, r7, #14
 800b8a8:	4611      	mov	r1, r2
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7ff fabe 	bl	800ae2c <lwip_netconn_is_err_msg>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d113      	bne.n	800b8de <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b8ba:	6978      	ldr	r0, [r7, #20]
 800b8bc:	f7ff ffac 	bl	800b818 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d007      	beq.n	800b8d8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f003 fa6d 	bl	800edac <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b8d8:	6978      	ldr	r0, [r7, #20]
 800b8da:	f7ff ff53 	bl	800b784 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	3314      	adds	r3, #20
 800b8e2:	f107 0210 	add.w	r2, r7, #16
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f00b ff64 	bl	80177b6 <sys_arch_mbox_tryfetch>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f4:	d1d5      	bne.n	800b8a2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	3314      	adds	r3, #20
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f00b fef0 	bl	80176e0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	3314      	adds	r3, #20
 800b904:	4618      	mov	r0, r3
 800b906:	f00b ff83 	bl	8017810 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b90a:	bf00      	nop
 800b90c:	3718      	adds	r7, #24
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
	...

0800b914 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	460b      	mov	r3, r1
 800b91e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b920:	2300      	movs	r3, #0
 800b922:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d106      	bne.n	800b938 <lwip_netconn_do_close_internal+0x24>
 800b92a:	4b87      	ldr	r3, [pc, #540]	@ (800bb48 <lwip_netconn_do_close_internal+0x234>)
 800b92c:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800b930:	4986      	ldr	r1, [pc, #536]	@ (800bb4c <lwip_netconn_do_close_internal+0x238>)
 800b932:	4887      	ldr	r0, [pc, #540]	@ (800bb50 <lwip_netconn_do_close_internal+0x23c>)
 800b934:	f00c f994 	bl	8017c60 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b940:	2b10      	cmp	r3, #16
 800b942:	d006      	beq.n	800b952 <lwip_netconn_do_close_internal+0x3e>
 800b944:	4b80      	ldr	r3, [pc, #512]	@ (800bb48 <lwip_netconn_do_close_internal+0x234>)
 800b946:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800b94a:	4982      	ldr	r1, [pc, #520]	@ (800bb54 <lwip_netconn_do_close_internal+0x240>)
 800b94c:	4880      	ldr	r0, [pc, #512]	@ (800bb50 <lwip_netconn_do_close_internal+0x23c>)
 800b94e:	f00c f987 	bl	8017c60 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	785b      	ldrb	r3, [r3, #1]
 800b956:	2b04      	cmp	r3, #4
 800b958:	d006      	beq.n	800b968 <lwip_netconn_do_close_internal+0x54>
 800b95a:	4b7b      	ldr	r3, [pc, #492]	@ (800bb48 <lwip_netconn_do_close_internal+0x234>)
 800b95c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800b960:	497d      	ldr	r1, [pc, #500]	@ (800bb58 <lwip_netconn_do_close_internal+0x244>)
 800b962:	487b      	ldr	r0, [pc, #492]	@ (800bb50 <lwip_netconn_do_close_internal+0x23c>)
 800b964:	f00c f97c 	bl	8017c60 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d106      	bne.n	800b97e <lwip_netconn_do_close_internal+0x6a>
 800b970:	4b75      	ldr	r3, [pc, #468]	@ (800bb48 <lwip_netconn_do_close_internal+0x234>)
 800b972:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800b976:	4979      	ldr	r1, [pc, #484]	@ (800bb5c <lwip_netconn_do_close_internal+0x248>)
 800b978:	4875      	ldr	r0, [pc, #468]	@ (800bb50 <lwip_netconn_do_close_internal+0x23c>)
 800b97a:	f00c f971 	bl	8017c60 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b982:	2b00      	cmp	r3, #0
 800b984:	d106      	bne.n	800b994 <lwip_netconn_do_close_internal+0x80>
 800b986:	4b70      	ldr	r3, [pc, #448]	@ (800bb48 <lwip_netconn_do_close_internal+0x234>)
 800b988:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800b98c:	4974      	ldr	r1, [pc, #464]	@ (800bb60 <lwip_netconn_do_close_internal+0x24c>)
 800b98e:	4870      	ldr	r0, [pc, #448]	@ (800bb50 <lwip_netconn_do_close_internal+0x23c>)
 800b990:	f00c f966 	bl	8017c60 <iprintf>

  tpcb = conn->pcb.tcp;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b99e:	7a1b      	ldrb	r3, [r3, #8]
 800b9a0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	f003 0301 	and.w	r3, r3, #1
 800b9a8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b9aa:	7bfb      	ldrb	r3, [r7, #15]
 800b9ac:	f003 0302 	and.w	r3, r3, #2
 800b9b0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d102      	bne.n	800b9be <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	75bb      	strb	r3, [r7, #22]
 800b9bc:	e01f      	b.n	800b9fe <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b9be:	7bbb      	ldrb	r3, [r7, #14]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d00e      	beq.n	800b9e2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b9c8:	2b05      	cmp	r3, #5
 800b9ca:	d007      	beq.n	800b9dc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b9d0:	2b06      	cmp	r3, #6
 800b9d2:	d003      	beq.n	800b9dc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b9d8:	2b08      	cmp	r3, #8
 800b9da:	d102      	bne.n	800b9e2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	75bb      	strb	r3, [r7, #22]
 800b9e0:	e00d      	b.n	800b9fe <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b9e2:	7b7b      	ldrb	r3, [r7, #13]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d008      	beq.n	800b9fa <lwip_netconn_do_close_internal+0xe6>
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	8b5b      	ldrh	r3, [r3, #26]
 800b9ec:	f003 0310 	and.w	r3, r3, #16
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d002      	beq.n	800b9fa <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	75bb      	strb	r3, [r7, #22]
 800b9f8:	e001      	b.n	800b9fe <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b9fe:	7dbb      	ldrb	r3, [r7, #22]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d003      	beq.n	800ba0c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800ba04:	2100      	movs	r1, #0
 800ba06:	6938      	ldr	r0, [r7, #16]
 800ba08:	f004 fa6c 	bl	800fee4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	7d1b      	ldrb	r3, [r3, #20]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d104      	bne.n	800ba1e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800ba14:	2100      	movs	r1, #0
 800ba16:	6938      	ldr	r0, [r7, #16]
 800ba18:	f004 fadc 	bl	800ffd4 <tcp_accept>
 800ba1c:	e01d      	b.n	800ba5a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800ba1e:	7bbb      	ldrb	r3, [r7, #14]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d007      	beq.n	800ba34 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800ba24:	2100      	movs	r1, #0
 800ba26:	6938      	ldr	r0, [r7, #16]
 800ba28:	f004 fa6e 	bl	800ff08 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	6938      	ldr	r0, [r7, #16]
 800ba30:	f004 fad0 	bl	800ffd4 <tcp_accept>
    }
    if (shut_tx) {
 800ba34:	7b7b      	ldrb	r3, [r7, #13]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d003      	beq.n	800ba42 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	6938      	ldr	r0, [r7, #16]
 800ba3e:	f004 fa85 	bl	800ff4c <tcp_sent>
    }
    if (shut_close) {
 800ba42:	7dbb      	ldrb	r3, [r7, #22]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d008      	beq.n	800ba5a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800ba48:	2200      	movs	r2, #0
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	6938      	ldr	r0, [r7, #16]
 800ba4e:	f004 fad9 	bl	8010004 <tcp_poll>
      tcp_err(tpcb, NULL);
 800ba52:	2100      	movs	r1, #0
 800ba54:	6938      	ldr	r0, [r7, #16]
 800ba56:	f004 fa9b 	bl	800ff90 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800ba5a:	7dbb      	ldrb	r3, [r7, #22]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d005      	beq.n	800ba6c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800ba60:	6938      	ldr	r0, [r7, #16]
 800ba62:	f003 f85d 	bl	800eb20 <tcp_close>
 800ba66:	4603      	mov	r3, r0
 800ba68:	75fb      	strb	r3, [r7, #23]
 800ba6a:	e007      	b.n	800ba7c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800ba6c:	7bbb      	ldrb	r3, [r7, #14]
 800ba6e:	7b7a      	ldrb	r2, [r7, #13]
 800ba70:	4619      	mov	r1, r3
 800ba72:	6938      	ldr	r0, [r7, #16]
 800ba74:	f003 f880 	bl	800eb78 <tcp_shutdown>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800ba7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d102      	bne.n	800ba8a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800ba84:	2301      	movs	r3, #1
 800ba86:	757b      	strb	r3, [r7, #21]
 800ba88:	e016      	b.n	800bab8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800ba8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba92:	d10f      	bne.n	800bab4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba98:	7a5b      	ldrb	r3, [r3, #9]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d10c      	bne.n	800bab8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800baa2:	7dbb      	ldrb	r3, [r7, #22]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d007      	beq.n	800bab8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800baa8:	6938      	ldr	r0, [r7, #16]
 800baaa:	f003 f97f 	bl	800edac <tcp_abort>
          err = ERR_OK;
 800baae:	2300      	movs	r3, #0
 800bab0:	75fb      	strb	r3, [r7, #23]
 800bab2:	e001      	b.n	800bab8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800bab4:	2301      	movs	r3, #1
 800bab6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800bab8:	7d7b      	ldrb	r3, [r7, #21]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d052      	beq.n	800bb64 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	330c      	adds	r3, #12
 800bac6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bacc:	7dfa      	ldrb	r2, [r7, #23]
 800bace:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2200      	movs	r2, #0
 800bad4:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800badc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d129      	bne.n	800bb38 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800bae4:	7dbb      	ldrb	r3, [r7, #22]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00c      	beq.n	800bb04 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d005      	beq.n	800bb04 <lwip_netconn_do_close_internal+0x1f0>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bafc:	2200      	movs	r2, #0
 800bafe:	2104      	movs	r1, #4
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	4798      	blx	r3
      }
      if (shut_rx) {
 800bb04:	7bbb      	ldrb	r3, [r7, #14]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d009      	beq.n	800bb1e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d005      	beq.n	800bb1e <lwip_netconn_do_close_internal+0x20a>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb16:	2200      	movs	r2, #0
 800bb18:	2100      	movs	r1, #0
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	4798      	blx	r3
      }
      if (shut_tx) {
 800bb1e:	7b7b      	ldrb	r3, [r7, #13]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d009      	beq.n	800bb38 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d005      	beq.n	800bb38 <lwip_netconn_do_close_internal+0x224>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb30:	2200      	movs	r2, #0
 800bb32:	2102      	movs	r1, #2
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800bb38:	78fb      	ldrb	r3, [r7, #3]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d002      	beq.n	800bb44 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800bb3e:	68b8      	ldr	r0, [r7, #8]
 800bb40:	f00b fecc 	bl	80178dc <sys_sem_signal>
    }
    return ERR_OK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	e03c      	b.n	800bbc2 <lwip_netconn_do_close_internal+0x2ae>
 800bb48:	08019634 	.word	0x08019634
 800bb4c:	08019908 	.word	0x08019908
 800bb50:	08019678 	.word	0x08019678
 800bb54:	08019918 	.word	0x08019918
 800bb58:	08019938 	.word	0x08019938
 800bb5c:	0801995c 	.word	0x0801995c
 800bb60:	0801979c 	.word	0x0801979c
  }
  if (!close_finished) {
 800bb64:	7d7b      	ldrb	r3, [r7, #21]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d11e      	bne.n	800bba8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	7d1b      	ldrb	r3, [r3, #20]
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d106      	bne.n	800bb80 <lwip_netconn_do_close_internal+0x26c>
 800bb72:	4b16      	ldr	r3, [pc, #88]	@ (800bbcc <lwip_netconn_do_close_internal+0x2b8>)
 800bb74:	f240 4241 	movw	r2, #1089	@ 0x441
 800bb78:	4915      	ldr	r1, [pc, #84]	@ (800bbd0 <lwip_netconn_do_close_internal+0x2bc>)
 800bb7a:	4816      	ldr	r0, [pc, #88]	@ (800bbd4 <lwip_netconn_do_close_internal+0x2c0>)
 800bb7c:	f00c f870 	bl	8017c60 <iprintf>
    if (shut_tx) {
 800bb80:	7b7b      	ldrb	r3, [r7, #13]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d003      	beq.n	800bb8e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800bb86:	4914      	ldr	r1, [pc, #80]	@ (800bbd8 <lwip_netconn_do_close_internal+0x2c4>)
 800bb88:	6938      	ldr	r0, [r7, #16]
 800bb8a:	f004 f9df 	bl	800ff4c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800bb8e:	2201      	movs	r2, #1
 800bb90:	4912      	ldr	r1, [pc, #72]	@ (800bbdc <lwip_netconn_do_close_internal+0x2c8>)
 800bb92:	6938      	ldr	r0, [r7, #16]
 800bb94:	f004 fa36 	bl	8010004 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800bb98:	4911      	ldr	r1, [pc, #68]	@ (800bbe0 <lwip_netconn_do_close_internal+0x2cc>)
 800bb9a:	6938      	ldr	r0, [r7, #16]
 800bb9c:	f004 f9f8 	bl	800ff90 <tcp_err>
    tcp_arg(tpcb, conn);
 800bba0:	6879      	ldr	r1, [r7, #4]
 800bba2:	6938      	ldr	r0, [r7, #16]
 800bba4:	f004 f99e 	bl	800fee4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800bba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d106      	bne.n	800bbbe <lwip_netconn_do_close_internal+0x2aa>
 800bbb0:	4b06      	ldr	r3, [pc, #24]	@ (800bbcc <lwip_netconn_do_close_internal+0x2b8>)
 800bbb2:	f240 424d 	movw	r2, #1101	@ 0x44d
 800bbb6:	490b      	ldr	r1, [pc, #44]	@ (800bbe4 <lwip_netconn_do_close_internal+0x2d0>)
 800bbb8:	4806      	ldr	r0, [pc, #24]	@ (800bbd4 <lwip_netconn_do_close_internal+0x2c0>)
 800bbba:	f00c f851 	bl	8017c60 <iprintf>
  return err;
 800bbbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3718      	adds	r7, #24
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	08019634 	.word	0x08019634
 800bbd0:	08019970 	.word	0x08019970
 800bbd4:	08019678 	.word	0x08019678
 800bbd8:	0800b179 	.word	0x0800b179
 800bbdc:	0800b0a9 	.word	0x0800b0a9
 800bbe0:	0800b225 	.word	0x0800b225
 800bbe4:	08019994 	.word	0x08019994

0800bbe8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	785b      	ldrb	r3, [r3, #1]
 800bbfa:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800bbfc:	7afb      	ldrb	r3, [r7, #11]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00d      	beq.n	800bc1e <lwip_netconn_do_delconn+0x36>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc0c:	2b10      	cmp	r3, #16
 800bc0e:	d006      	beq.n	800bc1e <lwip_netconn_do_delconn+0x36>
 800bc10:	4b61      	ldr	r3, [pc, #388]	@ (800bd98 <lwip_netconn_do_delconn+0x1b0>)
 800bc12:	f240 425e 	movw	r2, #1118	@ 0x45e
 800bc16:	4961      	ldr	r1, [pc, #388]	@ (800bd9c <lwip_netconn_do_delconn+0x1b4>)
 800bc18:	4861      	ldr	r0, [pc, #388]	@ (800bda0 <lwip_netconn_do_delconn+0x1b8>)
 800bc1a:	f00c f821 	bl	8017c60 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800bc1e:	7afb      	ldrb	r3, [r7, #11]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d005      	beq.n	800bc30 <lwip_netconn_do_delconn+0x48>
 800bc24:	7afb      	ldrb	r3, [r7, #11]
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d002      	beq.n	800bc30 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800bc2a:	7afb      	ldrb	r3, [r7, #11]
 800bc2c:	2b03      	cmp	r3, #3
 800bc2e:	d10a      	bne.n	800bc46 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 800bc30:	7afb      	ldrb	r3, [r7, #11]
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	d10b      	bne.n	800bc4e <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bc3e:	f003 0304 	and.w	r3, r3, #4
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d103      	bne.n	800bc4e <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	22fb      	movs	r2, #251	@ 0xfb
 800bc4a:	711a      	strb	r2, [r3, #4]
 800bc4c:	e098      	b.n	800bd80 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800bc4e:	7afb      	ldrb	r3, [r7, #11]
 800bc50:	2b03      	cmp	r3, #3
 800bc52:	d10e      	bne.n	800bc72 <lwip_netconn_do_delconn+0x8a>
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bc5c:	f003 0304 	and.w	r3, r3, #4
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d106      	bne.n	800bc72 <lwip_netconn_do_delconn+0x8a>
 800bc64:	4b4c      	ldr	r3, [pc, #304]	@ (800bd98 <lwip_netconn_do_delconn+0x1b0>)
 800bc66:	f240 427a 	movw	r2, #1146	@ 0x47a
 800bc6a:	494e      	ldr	r1, [pc, #312]	@ (800bda4 <lwip_netconn_do_delconn+0x1bc>)
 800bc6c:	484c      	ldr	r0, [pc, #304]	@ (800bda0 <lwip_netconn_do_delconn+0x1b8>)
 800bc6e:	f00b fff7 	bl	8017c60 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2200      	movs	r2, #0
 800bc76:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7ff fdcb 	bl	800b818 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d05f      	beq.n	800bd4c <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc96:	2b10      	cmp	r3, #16
 800bc98:	d00d      	beq.n	800bcb6 <lwip_netconn_do_delconn+0xce>
 800bc9a:	2b20      	cmp	r3, #32
 800bc9c:	d151      	bne.n	800bd42 <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f009 f998 	bl	8014fe4 <udp_remove>
          break;
 800bcb4:	e046      	b.n	800bd44 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d006      	beq.n	800bcce <lwip_netconn_do_delconn+0xe6>
 800bcc0:	4b35      	ldr	r3, [pc, #212]	@ (800bd98 <lwip_netconn_do_delconn+0x1b0>)
 800bcc2:	f240 4294 	movw	r2, #1172	@ 0x494
 800bcc6:	4938      	ldr	r1, [pc, #224]	@ (800bda8 <lwip_netconn_do_delconn+0x1c0>)
 800bcc8:	4835      	ldr	r0, [pc, #212]	@ (800bda0 <lwip_netconn_do_delconn+0x1b8>)
 800bcca:	f00b ffc9 	bl	8017c60 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2204      	movs	r2, #4
 800bcd4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2203      	movs	r2, #3
 800bcda:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2100      	movs	r1, #0
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7ff fe12 	bl	800b914 <lwip_netconn_do_close_internal>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d04b      	beq.n	800bd8e <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	785b      	ldrb	r3, [r3, #1]
 800bcfc:	2b04      	cmp	r3, #4
 800bcfe:	d006      	beq.n	800bd0e <lwip_netconn_do_delconn+0x126>
 800bd00:	4b25      	ldr	r3, [pc, #148]	@ (800bd98 <lwip_netconn_do_delconn+0x1b0>)
 800bd02:	f240 429a 	movw	r2, #1178	@ 0x49a
 800bd06:	4929      	ldr	r1, [pc, #164]	@ (800bdac <lwip_netconn_do_delconn+0x1c4>)
 800bd08:	4825      	ldr	r0, [pc, #148]	@ (800bda0 <lwip_netconn_do_delconn+0x1b8>)
 800bd0a:	f00b ffa9 	bl	8017c60 <iprintf>
            UNLOCK_TCPIP_CORE();
 800bd0e:	4828      	ldr	r0, [pc, #160]	@ (800bdb0 <lwip_netconn_do_delconn+0x1c8>)
 800bd10:	f00b fe55 	bl	80179be <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	330c      	adds	r3, #12
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f00b fdac 	bl	801787a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800bd22:	4823      	ldr	r0, [pc, #140]	@ (800bdb0 <lwip_netconn_do_delconn+0x1c8>)
 800bd24:	f00b fe3c 	bl	80179a0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	785b      	ldrb	r3, [r3, #1]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d02d      	beq.n	800bd8e <lwip_netconn_do_delconn+0x1a6>
 800bd32:	4b19      	ldr	r3, [pc, #100]	@ (800bd98 <lwip_netconn_do_delconn+0x1b0>)
 800bd34:	f240 429e 	movw	r2, #1182	@ 0x49e
 800bd38:	491c      	ldr	r1, [pc, #112]	@ (800bdac <lwip_netconn_do_delconn+0x1c4>)
 800bd3a:	4819      	ldr	r0, [pc, #100]	@ (800bda0 <lwip_netconn_do_delconn+0x1b8>)
 800bd3c:	f00b ff90 	bl	8017c60 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800bd40:	e025      	b.n	800bd8e <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 800bd42:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d007      	beq.n	800bd66 <lwip_netconn_do_delconn+0x17e>
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	6810      	ldr	r0, [r2, #0]
 800bd60:	2200      	movs	r2, #0
 800bd62:	2100      	movs	r1, #0
 800bd64:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d007      	beq.n	800bd80 <lwip_netconn_do_delconn+0x198>
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	6810      	ldr	r0, [r2, #0]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	2102      	movs	r1, #2
 800bd7e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	330c      	adds	r3, #12
 800bd86:	4618      	mov	r0, r3
 800bd88:	f00b fdc2 	bl	8017910 <sys_sem_valid>
 800bd8c:	e000      	b.n	800bd90 <lwip_netconn_do_delconn+0x1a8>
          return;
 800bd8e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	08019634 	.word	0x08019634
 800bd9c:	080199a4 	.word	0x080199a4
 800bda0:	08019678 	.word	0x08019678
 800bda4:	080199b8 	.word	0x080199b8
 800bda8:	080199d8 	.word	0x080199d8
 800bdac:	080199f4 	.word	0x080199f4
 800bdb0:	2000a6a8 	.word	0x2000a6a8

0800bdb4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d025      	beq.n	800be16 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bdd4:	2b10      	cmp	r3, #16
 800bdd6:	d00e      	beq.n	800bdf6 <lwip_netconn_do_bind+0x42>
 800bdd8:	2b20      	cmp	r3, #32
 800bdda:	d119      	bne.n	800be10 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	6858      	ldr	r0, [r3, #4]
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	6899      	ldr	r1, [r3, #8]
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	899b      	ldrh	r3, [r3, #12]
 800bdea:	461a      	mov	r2, r3
 800bdec:	f009 f852 	bl	8014e94 <udp_bind>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	73fb      	strb	r3, [r7, #15]
        break;
 800bdf4:	e011      	b.n	800be1a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	6858      	ldr	r0, [r3, #4]
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	6899      	ldr	r1, [r3, #8]
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	899b      	ldrh	r3, [r3, #12]
 800be04:	461a      	mov	r2, r3
 800be06:	f002 ffdd 	bl	800edc4 <tcp_bind>
 800be0a:	4603      	mov	r3, r0
 800be0c:	73fb      	strb	r3, [r7, #15]
        break;
 800be0e:	e004      	b.n	800be1a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800be10:	23fa      	movs	r3, #250	@ 0xfa
 800be12:	73fb      	strb	r3, [r7, #15]
        break;
 800be14:	e001      	b.n	800be1a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800be16:	23fa      	movs	r3, #250	@ 0xfa
 800be18:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	7bfa      	ldrb	r2, [r7, #15]
 800be1e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800be20:	bf00      	nop
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d07f      	beq.n	800bf3e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800be48:	2b10      	cmp	r3, #16
 800be4a:	d175      	bne.n	800bf38 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	785b      	ldrb	r3, [r3, #1]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d165      	bne.n	800bf22 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	7d1b      	ldrb	r3, [r3, #20]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d002      	beq.n	800be68 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800be62:	23fa      	movs	r3, #250	@ 0xfa
 800be64:	72fb      	strb	r3, [r7, #11]
 800be66:	e06c      	b.n	800bf42 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800be68:	23ff      	movs	r3, #255	@ 0xff
 800be6a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	f107 020b 	add.w	r2, r7, #11
 800be76:	7cf9      	ldrb	r1, [r7, #19]
 800be78:	4618      	mov	r0, r3
 800be7a:	f003 f85b 	bl	800ef34 <tcp_listen_with_backlog_and_err>
 800be7e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d05d      	beq.n	800bf42 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	3310      	adds	r3, #16
 800be8c:	4618      	mov	r0, r3
 800be8e:	f00b fcae 	bl	80177ee <sys_mbox_valid>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00b      	beq.n	800beb0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3310      	adds	r3, #16
 800be9e:	4618      	mov	r0, r3
 800bea0:	f00b fc1e 	bl	80176e0 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	3310      	adds	r3, #16
 800beaa:	4618      	mov	r0, r3
 800beac:	f00b fcb0 	bl	8017810 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	3314      	adds	r3, #20
 800beba:	4618      	mov	r0, r3
 800bebc:	f00b fc97 	bl	80177ee <sys_mbox_valid>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d108      	bne.n	800bed8 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	3314      	adds	r3, #20
 800becc:	2106      	movs	r1, #6
 800bece:	4618      	mov	r0, r3
 800bed0:	f00b fbe4 	bl	801769c <sys_mbox_new>
 800bed4:	4603      	mov	r3, r0
 800bed6:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800bed8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d118      	bne.n	800bf12 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2202      	movs	r2, #2
 800bee6:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	685a      	ldr	r2, [r3, #4]
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4619      	mov	r1, r3
 800befc:	4610      	mov	r0, r2
 800befe:	f003 fff1 	bl	800fee4 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	4912      	ldr	r1, [pc, #72]	@ (800bf54 <lwip_netconn_do_listen+0x12c>)
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f004 f862 	bl	800ffd4 <tcp_accept>
 800bf10:	e017      	b.n	800bf42 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f002 fe04 	bl	800eb20 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	605a      	str	r2, [r3, #4]
 800bf20:	e00f      	b.n	800bf42 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	785b      	ldrb	r3, [r3, #1]
 800bf28:	2b02      	cmp	r3, #2
 800bf2a:	d102      	bne.n	800bf32 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	72fb      	strb	r3, [r7, #11]
 800bf30:	e007      	b.n	800bf42 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800bf32:	23f5      	movs	r3, #245	@ 0xf5
 800bf34:	72fb      	strb	r3, [r7, #11]
 800bf36:	e004      	b.n	800bf42 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800bf38:	23f0      	movs	r3, #240	@ 0xf0
 800bf3a:	72fb      	strb	r3, [r7, #11]
 800bf3c:	e001      	b.n	800bf42 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800bf3e:	23f5      	movs	r3, #245	@ 0xf5
 800bf40:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800bf42:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800bf4a:	bf00      	nop
 800bf4c:	3718      	adds	r7, #24
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	0800b429 	.word	0x0800b429

0800bf58 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b086      	sub	sp, #24
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	2200      	movs	r2, #0
 800bf68:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d022      	beq.n	800bfba <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bf7e:	2b10      	cmp	r3, #16
 800bf80:	d11b      	bne.n	800bfba <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf8e:	d202      	bcs.n	800bf96 <lwip_netconn_do_recv+0x3e>
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	e001      	b.n	800bf9a <lwip_netconn_do_recv+0x42>
 800bf96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bf9a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	89fa      	ldrh	r2, [r7, #14]
 800bfa4:	4611      	mov	r1, r2
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f003 f8c8 	bl	800f13c <tcp_recved>
        remaining -= recved;
 800bfac:	89fb      	ldrh	r3, [r7, #14]
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1e6      	bne.n	800bf88 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bfba:	bf00      	nop
 800bfbc:	3718      	adds	r7, #24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
	...

0800bfc4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b088      	sub	sp, #32
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d106      	bne.n	800bfe8 <lwip_netconn_do_writemore+0x24>
 800bfda:	4b61      	ldr	r3, [pc, #388]	@ (800c160 <lwip_netconn_do_writemore+0x19c>)
 800bfdc:	f240 6273 	movw	r2, #1651	@ 0x673
 800bfe0:	4960      	ldr	r1, [pc, #384]	@ (800c164 <lwip_netconn_do_writemore+0x1a0>)
 800bfe2:	4861      	ldr	r0, [pc, #388]	@ (800c168 <lwip_netconn_do_writemore+0x1a4>)
 800bfe4:	f00b fe3c 	bl	8017c60 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	785b      	ldrb	r3, [r3, #1]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d006      	beq.n	800bffe <lwip_netconn_do_writemore+0x3a>
 800bff0:	4b5b      	ldr	r3, [pc, #364]	@ (800c160 <lwip_netconn_do_writemore+0x19c>)
 800bff2:	f240 6274 	movw	r2, #1652	@ 0x674
 800bff6:	495d      	ldr	r1, [pc, #372]	@ (800c16c <lwip_netconn_do_writemore+0x1a8>)
 800bff8:	485b      	ldr	r0, [pc, #364]	@ (800c168 <lwip_netconn_do_writemore+0x1a4>)
 800bffa:	f00b fe31 	bl	8017c60 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c002:	2b00      	cmp	r3, #0
 800c004:	d106      	bne.n	800c014 <lwip_netconn_do_writemore+0x50>
 800c006:	4b56      	ldr	r3, [pc, #344]	@ (800c160 <lwip_netconn_do_writemore+0x19c>)
 800c008:	f240 6275 	movw	r2, #1653	@ 0x675
 800c00c:	4958      	ldr	r1, [pc, #352]	@ (800c170 <lwip_netconn_do_writemore+0x1ac>)
 800c00e:	4856      	ldr	r0, [pc, #344]	@ (800c168 <lwip_netconn_do_writemore+0x1a4>)
 800c010:	f00b fe26 	bl	8017c60 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d106      	bne.n	800c02a <lwip_netconn_do_writemore+0x66>
 800c01c:	4b50      	ldr	r3, [pc, #320]	@ (800c160 <lwip_netconn_do_writemore+0x19c>)
 800c01e:	f240 6276 	movw	r2, #1654	@ 0x676
 800c022:	4954      	ldr	r1, [pc, #336]	@ (800c174 <lwip_netconn_do_writemore+0x1b0>)
 800c024:	4850      	ldr	r0, [pc, #320]	@ (800c168 <lwip_netconn_do_writemore+0x1a4>)
 800c026:	f00b fe1b 	bl	8017c60 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c02e:	699a      	ldr	r2, [r3, #24]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c034:	695b      	ldr	r3, [r3, #20]
 800c036:	429a      	cmp	r2, r3
 800c038:	d306      	bcc.n	800c048 <lwip_netconn_do_writemore+0x84>
 800c03a:	4b49      	ldr	r3, [pc, #292]	@ (800c160 <lwip_netconn_do_writemore+0x19c>)
 800c03c:	f240 6277 	movw	r2, #1655	@ 0x677
 800c040:	494d      	ldr	r1, [pc, #308]	@ (800c178 <lwip_netconn_do_writemore+0x1b4>)
 800c042:	4849      	ldr	r0, [pc, #292]	@ (800c168 <lwip_netconn_do_writemore+0x1a4>)
 800c044:	f00b fe0c 	bl	8017c60 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c04c:	899b      	ldrh	r3, [r3, #12]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d106      	bne.n	800c060 <lwip_netconn_do_writemore+0x9c>
 800c052:	4b43      	ldr	r3, [pc, #268]	@ (800c160 <lwip_netconn_do_writemore+0x19c>)
 800c054:	f240 6279 	movw	r2, #1657	@ 0x679
 800c058:	4948      	ldr	r1, [pc, #288]	@ (800c17c <lwip_netconn_do_writemore+0x1b8>)
 800c05a:	4843      	ldr	r0, [pc, #268]	@ (800c168 <lwip_netconn_do_writemore+0x1a4>)
 800c05c:	f00b fe00 	bl	8017c60 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c064:	7f1b      	ldrb	r3, [r3, #28]
 800c066:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c06e:	f003 0302 	and.w	r3, r3, #2
 800c072:	2b00      	cmp	r3, #0
 800c074:	d104      	bne.n	800c080 <lwip_netconn_do_writemore+0xbc>
 800c076:	7ebb      	ldrb	r3, [r7, #26]
 800c078:	f003 0304 	and.w	r3, r3, #4
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d001      	beq.n	800c084 <lwip_netconn_do_writemore+0xc0>
 800c080:	2301      	movs	r3, #1
 800c082:	e000      	b.n	800c086 <lwip_netconn_do_writemore+0xc2>
 800c084:	2300      	movs	r3, #0
 800c086:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	4413      	add	r3, r2
 800c098:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	685a      	ldr	r2, [r3, #4]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	1ad3      	subs	r3, r2, r3
 800c0aa:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0b2:	d307      	bcc.n	800c0c4 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 800c0b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c0b8:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c0ba:	7ebb      	ldrb	r3, [r7, #26]
 800c0bc:	f043 0302 	orr.w	r3, r3, #2
 800c0c0:	76bb      	strb	r3, [r7, #26]
 800c0c2:	e001      	b.n	800c0c8 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c0d0:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800c0d2:	89fa      	ldrh	r2, [r7, #14]
 800c0d4:	8bbb      	ldrh	r3, [r7, #28]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d216      	bcs.n	800c108 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 800c0da:	89fb      	ldrh	r3, [r7, #14]
 800c0dc:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800c0de:	7e3b      	ldrb	r3, [r7, #24]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00d      	beq.n	800c100 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 800c0e4:	8bbb      	ldrh	r3, [r7, #28]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d10e      	bne.n	800c108 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ee:	699b      	ldr	r3, [r3, #24]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d102      	bne.n	800c0fa <lwip_netconn_do_writemore+0x136>
 800c0f4:	f06f 0306 	mvn.w	r3, #6
 800c0f8:	e000      	b.n	800c0fc <lwip_netconn_do_writemore+0x138>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800c0fe:	e08f      	b.n	800c220 <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800c100:	7ebb      	ldrb	r3, [r7, #26]
 800c102:	f043 0302 	orr.w	r3, r3, #2
 800c106:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10c:	691a      	ldr	r2, [r3, #16]
 800c10e:	8bbb      	ldrh	r3, [r7, #28]
 800c110:	441a      	add	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d906      	bls.n	800c12c <lwip_netconn_do_writemore+0x168>
 800c11e:	4b10      	ldr	r3, [pc, #64]	@ (800c160 <lwip_netconn_do_writemore+0x19c>)
 800c120:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800c124:	4916      	ldr	r1, [pc, #88]	@ (800c180 <lwip_netconn_do_writemore+0x1bc>)
 800c126:	4810      	ldr	r0, [pc, #64]	@ (800c168 <lwip_netconn_do_writemore+0x1a4>)
 800c128:	f00b fd9a 	bl	8017c60 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c12c:	8bbb      	ldrh	r3, [r7, #28]
 800c12e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c132:	4293      	cmp	r3, r2
 800c134:	d103      	bne.n	800c13e <lwip_netconn_do_writemore+0x17a>
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c13c:	d209      	bcs.n	800c152 <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c142:	8bba      	ldrh	r2, [r7, #28]
 800c144:	429a      	cmp	r2, r3
 800c146:	d11d      	bne.n	800c184 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c14c:	899b      	ldrh	r3, [r3, #12]
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d918      	bls.n	800c184 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 800c152:	2301      	movs	r3, #1
 800c154:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c156:	7ebb      	ldrb	r3, [r7, #26]
 800c158:	f043 0302 	orr.w	r3, r3, #2
 800c15c:	76bb      	strb	r3, [r7, #26]
 800c15e:	e013      	b.n	800c188 <lwip_netconn_do_writemore+0x1c4>
 800c160:	08019634 	.word	0x08019634
 800c164:	0801978c 	.word	0x0801978c
 800c168:	08019678 	.word	0x08019678
 800c16c:	08019a94 	.word	0x08019a94
 800c170:	0801979c 	.word	0x0801979c
 800c174:	08019ab4 	.word	0x08019ab4
 800c178:	08019acc 	.word	0x08019acc
 800c17c:	08019b0c 	.word	0x08019b0c
 800c180:	08019b34 	.word	0x08019b34
      } else {
        write_more = 0;
 800c184:	2300      	movs	r3, #0
 800c186:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6858      	ldr	r0, [r3, #4]
 800c18c:	7ebb      	ldrb	r3, [r7, #26]
 800c18e:	8bba      	ldrh	r2, [r7, #28]
 800c190:	6979      	ldr	r1, [r7, #20]
 800c192:	f006 fde3 	bl	8012d5c <tcp_write>
 800c196:	4603      	mov	r3, r0
 800c198:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800c19a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d12c      	bne.n	800c1fc <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1a6:	6999      	ldr	r1, [r3, #24]
 800c1a8:	8bba      	ldrh	r2, [r7, #28]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ae:	440a      	add	r2, r1
 800c1b0:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1b6:	6919      	ldr	r1, [r3, #16]
 800c1b8:	8bba      	ldrh	r2, [r7, #28]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1be:	440a      	add	r2, r1
 800c1c0:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1c6:	691a      	ldr	r2, [r3, #16]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d113      	bne.n	800c1fc <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1d8:	899a      	ldrh	r2, [r3, #12]
 800c1da:	3a01      	subs	r2, #1
 800c1dc:	b292      	uxth	r2, r2
 800c1de:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1e4:	899b      	ldrh	r3, [r3, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d008      	beq.n	800c1fc <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ee:	689a      	ldr	r2, [r3, #8]
 800c1f0:	3208      	adds	r2, #8
 800c1f2:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800c1fc:	7e7b      	ldrb	r3, [r7, #25]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d004      	beq.n	800c20c <lwip_netconn_do_writemore+0x248>
 800c202:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c206:	2b00      	cmp	r3, #0
 800c208:	f43f af3e 	beq.w	800c088 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800c20c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d004      	beq.n	800c21e <lwip_netconn_do_writemore+0x25a>
 800c214:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c21c:	d136      	bne.n	800c28c <lwip_netconn_do_writemore+0x2c8>
err_mem:
 800c21e:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800c220:	7e3b      	ldrb	r3, [r7, #24]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d01b      	beq.n	800c25e <lwip_netconn_do_writemore+0x29a>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c22a:	699a      	ldr	r2, [r3, #24]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c230:	695b      	ldr	r3, [r3, #20]
 800c232:	429a      	cmp	r2, r3
 800c234:	d213      	bcs.n	800c25e <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d005      	beq.n	800c24a <lwip_netconn_do_writemore+0x286>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c242:	2200      	movs	r2, #0
 800c244:	2103      	movs	r1, #3
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c250:	f043 0310 	orr.w	r3, r3, #16
 800c254:	b2da      	uxtb	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f883 2020 	strb.w	r2, [r3, #32]
 800c25c:	e016      	b.n	800c28c <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c266:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800c26a:	d305      	bcc.n	800c278 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c274:	2b04      	cmp	r3, #4
 800c276:	d909      	bls.n	800c28c <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d005      	beq.n	800c28c <lwip_netconn_do_writemore+0x2c8>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c284:	2200      	movs	r2, #0
 800c286:	2103      	movs	r1, #3
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800c28c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d11d      	bne.n	800c2d0 <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c298:	699a      	ldr	r2, [r3, #24]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c29e:	695b      	ldr	r3, [r3, #20]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d002      	beq.n	800c2aa <lwip_netconn_do_writemore+0x2e6>
 800c2a4:	7e3b      	ldrb	r3, [r7, #24]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d001      	beq.n	800c2ae <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f007 fb3c 	bl	8013930 <tcp_output>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800c2bc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c2c0:	f113 0f04 	cmn.w	r3, #4
 800c2c4:	d12c      	bne.n	800c320 <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c2c6:	7b3b      	ldrb	r3, [r7, #12]
 800c2c8:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	76fb      	strb	r3, [r7, #27]
 800c2ce:	e027      	b.n	800c320 <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 800c2d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d8:	d120      	bne.n	800c31c <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f007 fb26 	bl	8013930 <tcp_output>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800c2e8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c2ec:	f113 0f04 	cmn.w	r3, #4
 800c2f0:	d104      	bne.n	800c2fc <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c2f2:	7b7b      	ldrb	r3, [r7, #13]
 800c2f4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	76fb      	strb	r3, [r7, #27]
 800c2fa:	e011      	b.n	800c320 <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 800c2fc:	7e3b      	ldrb	r3, [r7, #24]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d00e      	beq.n	800c320 <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c306:	699b      	ldr	r3, [r3, #24]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d102      	bne.n	800c312 <lwip_netconn_do_writemore+0x34e>
 800c30c:	f06f 0306 	mvn.w	r3, #6
 800c310:	e000      	b.n	800c314 <lwip_netconn_do_writemore+0x350>
 800c312:	2300      	movs	r3, #0
 800c314:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c316:	2301      	movs	r3, #1
 800c318:	76fb      	strb	r3, [r7, #27]
 800c31a:	e001      	b.n	800c320 <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800c31c:	2301      	movs	r3, #1
 800c31e:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800c320:	7efb      	ldrb	r3, [r7, #27]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d015      	beq.n	800c352 <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	330c      	adds	r3, #12
 800c32e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c334:	7ffa      	ldrb	r2, [r7, #31]
 800c336:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c344:	78fb      	ldrb	r3, [r7, #3]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d006      	beq.n	800c358 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800c34a:	68b8      	ldr	r0, [r7, #8]
 800c34c:	f00b fac6 	bl	80178dc <sys_sem_signal>
 800c350:	e002      	b.n	800c358 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800c352:	f04f 33ff 	mov.w	r3, #4294967295
 800c356:	e000      	b.n	800c35a <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 800c358:	2300      	movs	r3, #0
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3720      	adds	r7, #32
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop

0800c364 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4618      	mov	r0, r3
 800c376:	f7fe fd08 	bl	800ad8a <netconn_err>
 800c37a:	4603      	mov	r3, r0
 800c37c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c37e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d166      	bne.n	800c454 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c390:	2b10      	cmp	r3, #16
 800c392:	d15d      	bne.n	800c450 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	785b      	ldrb	r3, [r3, #1]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d002      	beq.n	800c3a4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800c39e:	23fb      	movs	r3, #251	@ 0xfb
 800c3a0:	73fb      	strb	r3, [r7, #15]
 800c3a2:	e057      	b.n	800c454 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d04d      	beq.n	800c44a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d006      	beq.n	800c3ce <lwip_netconn_do_write+0x6a>
 800c3c0:	4b28      	ldr	r3, [pc, #160]	@ (800c464 <lwip_netconn_do_write+0x100>)
 800c3c2:	f240 7223 	movw	r2, #1827	@ 0x723
 800c3c6:	4928      	ldr	r1, [pc, #160]	@ (800c468 <lwip_netconn_do_write+0x104>)
 800c3c8:	4828      	ldr	r0, [pc, #160]	@ (800c46c <lwip_netconn_do_write+0x108>)
 800c3ca:	f00b fc49 	bl	8017c60 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	695b      	ldr	r3, [r3, #20]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d106      	bne.n	800c3e4 <lwip_netconn_do_write+0x80>
 800c3d6:	4b23      	ldr	r3, [pc, #140]	@ (800c464 <lwip_netconn_do_write+0x100>)
 800c3d8:	f240 7224 	movw	r2, #1828	@ 0x724
 800c3dc:	4924      	ldr	r1, [pc, #144]	@ (800c470 <lwip_netconn_do_write+0x10c>)
 800c3de:	4823      	ldr	r0, [pc, #140]	@ (800c46c <lwip_netconn_do_write+0x108>)
 800c3e0:	f00b fc3e 	bl	8017c60 <iprintf>
        msg->conn->current_msg = msg;
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	2100      	movs	r1, #0
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7ff fde6 	bl	800bfc4 <lwip_netconn_do_writemore>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d02e      	beq.n	800c45c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	785b      	ldrb	r3, [r3, #1]
 800c404:	2b01      	cmp	r3, #1
 800c406:	d006      	beq.n	800c416 <lwip_netconn_do_write+0xb2>
 800c408:	4b16      	ldr	r3, [pc, #88]	@ (800c464 <lwip_netconn_do_write+0x100>)
 800c40a:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800c40e:	4919      	ldr	r1, [pc, #100]	@ (800c474 <lwip_netconn_do_write+0x110>)
 800c410:	4816      	ldr	r0, [pc, #88]	@ (800c46c <lwip_netconn_do_write+0x108>)
 800c412:	f00b fc25 	bl	8017c60 <iprintf>
          UNLOCK_TCPIP_CORE();
 800c416:	4818      	ldr	r0, [pc, #96]	@ (800c478 <lwip_netconn_do_write+0x114>)
 800c418:	f00b fad1 	bl	80179be <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	330c      	adds	r3, #12
 800c422:	2100      	movs	r1, #0
 800c424:	4618      	mov	r0, r3
 800c426:	f00b fa28 	bl	801787a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c42a:	4813      	ldr	r0, [pc, #76]	@ (800c478 <lwip_netconn_do_write+0x114>)
 800c42c:	f00b fab8 	bl	80179a0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	785b      	ldrb	r3, [r3, #1]
 800c436:	2b01      	cmp	r3, #1
 800c438:	d110      	bne.n	800c45c <lwip_netconn_do_write+0xf8>
 800c43a:	4b0a      	ldr	r3, [pc, #40]	@ (800c464 <lwip_netconn_do_write+0x100>)
 800c43c:	f240 722c 	movw	r2, #1836	@ 0x72c
 800c440:	490c      	ldr	r1, [pc, #48]	@ (800c474 <lwip_netconn_do_write+0x110>)
 800c442:	480a      	ldr	r0, [pc, #40]	@ (800c46c <lwip_netconn_do_write+0x108>)
 800c444:	f00b fc0c 	bl	8017c60 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800c448:	e008      	b.n	800c45c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800c44a:	23f5      	movs	r3, #245	@ 0xf5
 800c44c:	73fb      	strb	r3, [r7, #15]
 800c44e:	e001      	b.n	800c454 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800c450:	23fa      	movs	r3, #250	@ 0xfa
 800c452:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	7bfa      	ldrb	r2, [r7, #15]
 800c458:	711a      	strb	r2, [r3, #4]
 800c45a:	e000      	b.n	800c45e <lwip_netconn_do_write+0xfa>
        return;
 800c45c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	08019634 	.word	0x08019634
 800c468:	080199d8 	.word	0x080199d8
 800c46c:	08019678 	.word	0x08019678
 800c470:	08019b60 	.word	0x08019b60
 800c474:	080199f4 	.word	0x080199f4
 800c478:	2000a6a8 	.word	0x2000a6a8

0800c47c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	785b      	ldrb	r3, [r3, #1]
 800c48e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d069      	beq.n	800c56e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800c4a4:	2b10      	cmp	r3, #16
 800c4a6:	d162      	bne.n	800c56e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c4ac:	2b03      	cmp	r3, #3
 800c4ae:	d002      	beq.n	800c4b6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c4b0:	7afb      	ldrb	r3, [r7, #11]
 800c4b2:	2b02      	cmp	r3, #2
 800c4b4:	d05b      	beq.n	800c56e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c4b6:	7afb      	ldrb	r3, [r7, #11]
 800c4b8:	2b03      	cmp	r3, #3
 800c4ba:	d103      	bne.n	800c4c4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	22f5      	movs	r2, #245	@ 0xf5
 800c4c0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c4c2:	e059      	b.n	800c578 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800c4c4:	7afb      	ldrb	r3, [r7, #11]
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d103      	bne.n	800c4d2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	22fb      	movs	r2, #251	@ 0xfb
 800c4ce:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c4d0:	e052      	b.n	800c578 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	7a1b      	ldrb	r3, [r3, #8]
 800c4d6:	f003 0301 	and.w	r3, r3, #1
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d004      	beq.n	800c4e8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7ff f998 	bl	800b818 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d006      	beq.n	800c500 <lwip_netconn_do_close+0x84>
 800c4f2:	4b23      	ldr	r3, [pc, #140]	@ (800c580 <lwip_netconn_do_close+0x104>)
 800c4f4:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800c4f8:	4922      	ldr	r1, [pc, #136]	@ (800c584 <lwip_netconn_do_close+0x108>)
 800c4fa:	4823      	ldr	r0, [pc, #140]	@ (800c588 <lwip_netconn_do_close+0x10c>)
 800c4fc:	f00b fbb0 	bl	8017c60 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2204      	movs	r2, #4
 800c506:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	68fa      	ldr	r2, [r7, #12]
 800c50e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2100      	movs	r1, #0
 800c516:	4618      	mov	r0, r3
 800c518:	f7ff f9fc 	bl	800b914 <lwip_netconn_do_close_internal>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d029      	beq.n	800c576 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	785b      	ldrb	r3, [r3, #1]
 800c528:	2b04      	cmp	r3, #4
 800c52a:	d006      	beq.n	800c53a <lwip_netconn_do_close+0xbe>
 800c52c:	4b14      	ldr	r3, [pc, #80]	@ (800c580 <lwip_netconn_do_close+0x104>)
 800c52e:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800c532:	4916      	ldr	r1, [pc, #88]	@ (800c58c <lwip_netconn_do_close+0x110>)
 800c534:	4814      	ldr	r0, [pc, #80]	@ (800c588 <lwip_netconn_do_close+0x10c>)
 800c536:	f00b fb93 	bl	8017c60 <iprintf>
        UNLOCK_TCPIP_CORE();
 800c53a:	4815      	ldr	r0, [pc, #84]	@ (800c590 <lwip_netconn_do_close+0x114>)
 800c53c:	f00b fa3f 	bl	80179be <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	330c      	adds	r3, #12
 800c546:	2100      	movs	r1, #0
 800c548:	4618      	mov	r0, r3
 800c54a:	f00b f996 	bl	801787a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c54e:	4810      	ldr	r0, [pc, #64]	@ (800c590 <lwip_netconn_do_close+0x114>)
 800c550:	f00b fa26 	bl	80179a0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	785b      	ldrb	r3, [r3, #1]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00b      	beq.n	800c576 <lwip_netconn_do_close+0xfa>
 800c55e:	4b08      	ldr	r3, [pc, #32]	@ (800c580 <lwip_netconn_do_close+0x104>)
 800c560:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800c564:	4909      	ldr	r1, [pc, #36]	@ (800c58c <lwip_netconn_do_close+0x110>)
 800c566:	4808      	ldr	r0, [pc, #32]	@ (800c588 <lwip_netconn_do_close+0x10c>)
 800c568:	f00b fb7a 	bl	8017c60 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800c56c:	e003      	b.n	800c576 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	22f5      	movs	r2, #245	@ 0xf5
 800c572:	711a      	strb	r2, [r3, #4]
 800c574:	e000      	b.n	800c578 <lwip_netconn_do_close+0xfc>
      return;
 800c576:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c578:	3710      	adds	r7, #16
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	08019634 	.word	0x08019634
 800c584:	080199d8 	.word	0x080199d8
 800c588:	08019678 	.word	0x08019678
 800c58c:	080199f4 	.word	0x080199f4
 800c590:	2000a6a8 	.word	0x2000a6a8

0800c594 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d013      	beq.n	800c5ca <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d00b      	beq.n	800c5c2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f001 fdea 	bl	800e188 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	605a      	str	r2, [r3, #4]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	685a      	ldr	r2, [r3, #4]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800c5c2:	6879      	ldr	r1, [r7, #4]
 800c5c4:	2006      	movs	r0, #6
 800c5c6:	f000 ff3b 	bl	800d440 <memp_free>
  }
}
 800c5ca:	bf00      	nop
 800c5cc:	3708      	adds	r7, #8
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
	...

0800c5d4 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d108      	bne.n	800c5f4 <netbuf_next+0x20>
 800c5e2:	4b11      	ldr	r3, [pc, #68]	@ (800c628 <netbuf_next+0x54>)
 800c5e4:	22e0      	movs	r2, #224	@ 0xe0
 800c5e6:	4911      	ldr	r1, [pc, #68]	@ (800c62c <netbuf_next+0x58>)
 800c5e8:	4811      	ldr	r0, [pc, #68]	@ (800c630 <netbuf_next+0x5c>)
 800c5ea:	f00b fb39 	bl	8017c60 <iprintf>
 800c5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f2:	e014      	b.n	800c61e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d102      	bne.n	800c604 <netbuf_next+0x30>
    return -1;
 800c5fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c602:	e00c      	b.n	800c61e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d101      	bne.n	800c61c <netbuf_next+0x48>
    return 1;
 800c618:	2301      	movs	r3, #1
 800c61a:	e000      	b.n	800c61e <netbuf_next+0x4a>
  }
  return 0;
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3708      	adds	r7, #8
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	08019b8c 	.word	0x08019b8c
 800c62c:	08019cec 	.word	0x08019cec
 800c630:	08019bdc 	.word	0x08019bdc

0800c634 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c63e:	f008 fa2f 	bl	8014aa0 <sys_timeouts_sleeptime>
 800c642:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c64a:	d10b      	bne.n	800c664 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c64c:	4813      	ldr	r0, [pc, #76]	@ (800c69c <tcpip_timeouts_mbox_fetch+0x68>)
 800c64e:	f00b f9b6 	bl	80179be <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c652:	2200      	movs	r2, #0
 800c654:	6839      	ldr	r1, [r7, #0]
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f00b f86e 	bl	8017738 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c65c:	480f      	ldr	r0, [pc, #60]	@ (800c69c <tcpip_timeouts_mbox_fetch+0x68>)
 800c65e:	f00b f99f 	bl	80179a0 <sys_mutex_lock>
    return;
 800c662:	e018      	b.n	800c696 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d102      	bne.n	800c670 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c66a:	f008 f9df 	bl	8014a2c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c66e:	e7e6      	b.n	800c63e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c670:	480a      	ldr	r0, [pc, #40]	@ (800c69c <tcpip_timeouts_mbox_fetch+0x68>)
 800c672:	f00b f9a4 	bl	80179be <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	6839      	ldr	r1, [r7, #0]
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f00b f85c 	bl	8017738 <sys_arch_mbox_fetch>
 800c680:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c682:	4806      	ldr	r0, [pc, #24]	@ (800c69c <tcpip_timeouts_mbox_fetch+0x68>)
 800c684:	f00b f98c 	bl	80179a0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c68e:	d102      	bne.n	800c696 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c690:	f008 f9cc 	bl	8014a2c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c694:	e7d3      	b.n	800c63e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	2000a6a8 	.word	0x2000a6a8

0800c6a0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c6a8:	4810      	ldr	r0, [pc, #64]	@ (800c6ec <tcpip_thread+0x4c>)
 800c6aa:	f00b f979 	bl	80179a0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c6ae:	4b10      	ldr	r3, [pc, #64]	@ (800c6f0 <tcpip_thread+0x50>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d005      	beq.n	800c6c2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c6b6:	4b0e      	ldr	r3, [pc, #56]	@ (800c6f0 <tcpip_thread+0x50>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a0e      	ldr	r2, [pc, #56]	@ (800c6f4 <tcpip_thread+0x54>)
 800c6bc:	6812      	ldr	r2, [r2, #0]
 800c6be:	4610      	mov	r0, r2
 800c6c0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c6c2:	f107 030c 	add.w	r3, r7, #12
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	480b      	ldr	r0, [pc, #44]	@ (800c6f8 <tcpip_thread+0x58>)
 800c6ca:	f7ff ffb3 	bl	800c634 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d106      	bne.n	800c6e2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c6d4:	4b09      	ldr	r3, [pc, #36]	@ (800c6fc <tcpip_thread+0x5c>)
 800c6d6:	2291      	movs	r2, #145	@ 0x91
 800c6d8:	4909      	ldr	r1, [pc, #36]	@ (800c700 <tcpip_thread+0x60>)
 800c6da:	480a      	ldr	r0, [pc, #40]	@ (800c704 <tcpip_thread+0x64>)
 800c6dc:	f00b fac0 	bl	8017c60 <iprintf>
      continue;
 800c6e0:	e003      	b.n	800c6ea <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f000 f80f 	bl	800c708 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c6ea:	e7ea      	b.n	800c6c2 <tcpip_thread+0x22>
 800c6ec:	2000a6a8 	.word	0x2000a6a8
 800c6f0:	2000a69c 	.word	0x2000a69c
 800c6f4:	2000a6a0 	.word	0x2000a6a0
 800c6f8:	2000a6a4 	.word	0x2000a6a4
 800c6fc:	08019d24 	.word	0x08019d24
 800c700:	08019d54 	.word	0x08019d54
 800c704:	08019d74 	.word	0x08019d74

0800c708 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	2b02      	cmp	r3, #2
 800c716:	d026      	beq.n	800c766 <tcpip_thread_handle_msg+0x5e>
 800c718:	2b02      	cmp	r3, #2
 800c71a:	dc2b      	bgt.n	800c774 <tcpip_thread_handle_msg+0x6c>
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d002      	beq.n	800c726 <tcpip_thread_handle_msg+0x1e>
 800c720:	2b01      	cmp	r3, #1
 800c722:	d015      	beq.n	800c750 <tcpip_thread_handle_msg+0x48>
 800c724:	e026      	b.n	800c774 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	6850      	ldr	r0, [r2, #4]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	6892      	ldr	r2, [r2, #8]
 800c732:	4611      	mov	r1, r2
 800c734:	4798      	blx	r3
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d004      	beq.n	800c746 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	4618      	mov	r0, r3
 800c742:	f001 fd21 	bl	800e188 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c746:	6879      	ldr	r1, [r7, #4]
 800c748:	2009      	movs	r0, #9
 800c74a:	f000 fe79 	bl	800d440 <memp_free>
      break;
 800c74e:	e018      	b.n	800c782 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	6892      	ldr	r2, [r2, #8]
 800c758:	4610      	mov	r0, r2
 800c75a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c75c:	6879      	ldr	r1, [r7, #4]
 800c75e:	2008      	movs	r0, #8
 800c760:	f000 fe6e 	bl	800d440 <memp_free>
      break;
 800c764:	e00d      	b.n	800c782 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	6892      	ldr	r2, [r2, #8]
 800c76e:	4610      	mov	r0, r2
 800c770:	4798      	blx	r3
      break;
 800c772:	e006      	b.n	800c782 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c774:	4b05      	ldr	r3, [pc, #20]	@ (800c78c <tcpip_thread_handle_msg+0x84>)
 800c776:	22cf      	movs	r2, #207	@ 0xcf
 800c778:	4905      	ldr	r1, [pc, #20]	@ (800c790 <tcpip_thread_handle_msg+0x88>)
 800c77a:	4806      	ldr	r0, [pc, #24]	@ (800c794 <tcpip_thread_handle_msg+0x8c>)
 800c77c:	f00b fa70 	bl	8017c60 <iprintf>
      break;
 800c780:	bf00      	nop
  }
}
 800c782:	bf00      	nop
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	08019d24 	.word	0x08019d24
 800c790:	08019d54 	.word	0x08019d54
 800c794:	08019d74 	.word	0x08019d74

0800c798 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c7a4:	481a      	ldr	r0, [pc, #104]	@ (800c810 <tcpip_inpkt+0x78>)
 800c7a6:	f00b f822 	bl	80177ee <sys_mbox_valid>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d105      	bne.n	800c7bc <tcpip_inpkt+0x24>
 800c7b0:	4b18      	ldr	r3, [pc, #96]	@ (800c814 <tcpip_inpkt+0x7c>)
 800c7b2:	22fc      	movs	r2, #252	@ 0xfc
 800c7b4:	4918      	ldr	r1, [pc, #96]	@ (800c818 <tcpip_inpkt+0x80>)
 800c7b6:	4819      	ldr	r0, [pc, #100]	@ (800c81c <tcpip_inpkt+0x84>)
 800c7b8:	f00b fa52 	bl	8017c60 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c7bc:	2009      	movs	r0, #9
 800c7be:	f000 fdc9 	bl	800d354 <memp_malloc>
 800c7c2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d102      	bne.n	800c7d0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c7ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ce:	e01a      	b.n	800c806 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c7e8:	6979      	ldr	r1, [r7, #20]
 800c7ea:	4809      	ldr	r0, [pc, #36]	@ (800c810 <tcpip_inpkt+0x78>)
 800c7ec:	f00a ff8a 	bl	8017704 <sys_mbox_trypost>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d006      	beq.n	800c804 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c7f6:	6979      	ldr	r1, [r7, #20]
 800c7f8:	2009      	movs	r0, #9
 800c7fa:	f000 fe21 	bl	800d440 <memp_free>
    return ERR_MEM;
 800c7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c802:	e000      	b.n	800c806 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c804:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c806:	4618      	mov	r0, r3
 800c808:	3718      	adds	r7, #24
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	2000a6a4 	.word	0x2000a6a4
 800c814:	08019d24 	.word	0x08019d24
 800c818:	08019d9c 	.word	0x08019d9c
 800c81c:	08019d74 	.word	0x08019d74

0800c820 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c830:	f003 0318 	and.w	r3, r3, #24
 800c834:	2b00      	cmp	r3, #0
 800c836:	d006      	beq.n	800c846 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c838:	4a08      	ldr	r2, [pc, #32]	@ (800c85c <tcpip_input+0x3c>)
 800c83a:	6839      	ldr	r1, [r7, #0]
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7ff ffab 	bl	800c798 <tcpip_inpkt>
 800c842:	4603      	mov	r3, r0
 800c844:	e005      	b.n	800c852 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c846:	4a06      	ldr	r2, [pc, #24]	@ (800c860 <tcpip_input+0x40>)
 800c848:	6839      	ldr	r1, [r7, #0]
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f7ff ffa4 	bl	800c798 <tcpip_inpkt>
 800c850:	4603      	mov	r3, r0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	080174f1 	.word	0x080174f1
 800c860:	080163f9 	.word	0x080163f9

0800c864 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c86e:	4819      	ldr	r0, [pc, #100]	@ (800c8d4 <tcpip_try_callback+0x70>)
 800c870:	f00a ffbd 	bl	80177ee <sys_mbox_valid>
 800c874:	4603      	mov	r3, r0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d106      	bne.n	800c888 <tcpip_try_callback+0x24>
 800c87a:	4b17      	ldr	r3, [pc, #92]	@ (800c8d8 <tcpip_try_callback+0x74>)
 800c87c:	f240 125d 	movw	r2, #349	@ 0x15d
 800c880:	4916      	ldr	r1, [pc, #88]	@ (800c8dc <tcpip_try_callback+0x78>)
 800c882:	4817      	ldr	r0, [pc, #92]	@ (800c8e0 <tcpip_try_callback+0x7c>)
 800c884:	f00b f9ec 	bl	8017c60 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c888:	2008      	movs	r0, #8
 800c88a:	f000 fd63 	bl	800d354 <memp_malloc>
 800c88e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d102      	bne.n	800c89c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c896:	f04f 33ff 	mov.w	r3, #4294967295
 800c89a:	e017      	b.n	800c8cc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	683a      	ldr	r2, [r7, #0]
 800c8ac:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c8ae:	68f9      	ldr	r1, [r7, #12]
 800c8b0:	4808      	ldr	r0, [pc, #32]	@ (800c8d4 <tcpip_try_callback+0x70>)
 800c8b2:	f00a ff27 	bl	8017704 <sys_mbox_trypost>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d006      	beq.n	800c8ca <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c8bc:	68f9      	ldr	r1, [r7, #12]
 800c8be:	2008      	movs	r0, #8
 800c8c0:	f000 fdbe 	bl	800d440 <memp_free>
    return ERR_MEM;
 800c8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c8:	e000      	b.n	800c8cc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c8ca:	2300      	movs	r3, #0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3710      	adds	r7, #16
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	2000a6a4 	.word	0x2000a6a4
 800c8d8:	08019d24 	.word	0x08019d24
 800c8dc:	08019d9c 	.word	0x08019d9c
 800c8e0:	08019d74 	.word	0x08019d74

0800c8e4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c8f0:	4806      	ldr	r0, [pc, #24]	@ (800c90c <tcpip_send_msg_wait_sem+0x28>)
 800c8f2:	f00b f855 	bl	80179a0 <sys_mutex_lock>
  fn(apimsg);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	68b8      	ldr	r0, [r7, #8]
 800c8fa:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c8fc:	4803      	ldr	r0, [pc, #12]	@ (800c90c <tcpip_send_msg_wait_sem+0x28>)
 800c8fe:	f00b f85e 	bl	80179be <sys_mutex_unlock>
  return ERR_OK;
 800c902:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c904:	4618      	mov	r0, r3
 800c906:	3710      	adds	r7, #16
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	2000a6a8 	.word	0x2000a6a8

0800c910 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af02      	add	r7, sp, #8
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c91a:	f000 f871 	bl	800ca00 <lwip_init>

  tcpip_init_done = initfunc;
 800c91e:	4a17      	ldr	r2, [pc, #92]	@ (800c97c <tcpip_init+0x6c>)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c924:	4a16      	ldr	r2, [pc, #88]	@ (800c980 <tcpip_init+0x70>)
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c92a:	2106      	movs	r1, #6
 800c92c:	4815      	ldr	r0, [pc, #84]	@ (800c984 <tcpip_init+0x74>)
 800c92e:	f00a feb5 	bl	801769c <sys_mbox_new>
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d006      	beq.n	800c946 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c938:	4b13      	ldr	r3, [pc, #76]	@ (800c988 <tcpip_init+0x78>)
 800c93a:	f240 2261 	movw	r2, #609	@ 0x261
 800c93e:	4913      	ldr	r1, [pc, #76]	@ (800c98c <tcpip_init+0x7c>)
 800c940:	4813      	ldr	r0, [pc, #76]	@ (800c990 <tcpip_init+0x80>)
 800c942:	f00b f98d 	bl	8017c60 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c946:	4813      	ldr	r0, [pc, #76]	@ (800c994 <tcpip_init+0x84>)
 800c948:	f00b f80e 	bl	8017968 <sys_mutex_new>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d006      	beq.n	800c960 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c952:	4b0d      	ldr	r3, [pc, #52]	@ (800c988 <tcpip_init+0x78>)
 800c954:	f240 2265 	movw	r2, #613	@ 0x265
 800c958:	490f      	ldr	r1, [pc, #60]	@ (800c998 <tcpip_init+0x88>)
 800c95a:	480d      	ldr	r0, [pc, #52]	@ (800c990 <tcpip_init+0x80>)
 800c95c:	f00b f980 	bl	8017c60 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c960:	2300      	movs	r3, #0
 800c962:	9300      	str	r3, [sp, #0]
 800c964:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c968:	2200      	movs	r2, #0
 800c96a:	490c      	ldr	r1, [pc, #48]	@ (800c99c <tcpip_init+0x8c>)
 800c96c:	480c      	ldr	r0, [pc, #48]	@ (800c9a0 <tcpip_init+0x90>)
 800c96e:	f00b f833 	bl	80179d8 <sys_thread_new>
}
 800c972:	bf00      	nop
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	2000a69c 	.word	0x2000a69c
 800c980:	2000a6a0 	.word	0x2000a6a0
 800c984:	2000a6a4 	.word	0x2000a6a4
 800c988:	08019d24 	.word	0x08019d24
 800c98c:	08019dac 	.word	0x08019dac
 800c990:	08019d74 	.word	0x08019d74
 800c994:	2000a6a8 	.word	0x2000a6a8
 800c998:	08019dd0 	.word	0x08019dd0
 800c99c:	0800c6a1 	.word	0x0800c6a1
 800c9a0:	08019df4 	.word	0x08019df4

0800c9a4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c9ae:	88fb      	ldrh	r3, [r7, #6]
 800c9b0:	021b      	lsls	r3, r3, #8
 800c9b2:	b21a      	sxth	r2, r3
 800c9b4:	88fb      	ldrh	r3, [r7, #6]
 800c9b6:	0a1b      	lsrs	r3, r3, #8
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	b21b      	sxth	r3, r3
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	b21b      	sxth	r3, r3
 800c9c0:	b29b      	uxth	r3, r3
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	370c      	adds	r7, #12
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr

0800c9ce <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c9ce:	b480      	push	{r7}
 800c9d0:	b083      	sub	sp, #12
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	061a      	lsls	r2, r3, #24
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	021b      	lsls	r3, r3, #8
 800c9de:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c9e2:	431a      	orrs	r2, r3
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	0a1b      	lsrs	r3, r3, #8
 800c9e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c9ec:	431a      	orrs	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	0e1b      	lsrs	r3, r3, #24
 800c9f2:	4313      	orrs	r3, r2
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ca06:	2300      	movs	r3, #0
 800ca08:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ca0a:	f00a ff9f 	bl	801794c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ca0e:	f000 f8d5 	bl	800cbbc <mem_init>
  memp_init();
 800ca12:	f000 fc31 	bl	800d278 <memp_init>
  pbuf_init();
  netif_init();
 800ca16:	f000 fd3d 	bl	800d494 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ca1a:	f008 f879 	bl	8014b10 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ca1e:	f001 fe6f 	bl	800e700 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ca22:	f007 ffbb 	bl	801499c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ca26:	bf00      	nop
 800ca28:	3708      	adds	r7, #8
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
	...

0800ca30 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	4603      	mov	r3, r0
 800ca38:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ca3a:	4b05      	ldr	r3, [pc, #20]	@ (800ca50 <ptr_to_mem+0x20>)
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	88fb      	ldrh	r3, [r7, #6]
 800ca40:	4413      	add	r3, r2
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	370c      	adds	r7, #12
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	2000ced8 	.word	0x2000ced8

0800ca54 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ca5c:	4b05      	ldr	r3, [pc, #20]	@ (800ca74 <mem_to_ptr+0x20>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	1ad3      	subs	r3, r2, r3
 800ca64:	b29b      	uxth	r3, r3
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	370c      	adds	r7, #12
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	2000ced8 	.word	0x2000ced8

0800ca78 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ca78:	b590      	push	{r4, r7, lr}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ca80:	4b45      	ldr	r3, [pc, #276]	@ (800cb98 <plug_holes+0x120>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d206      	bcs.n	800ca98 <plug_holes+0x20>
 800ca8a:	4b44      	ldr	r3, [pc, #272]	@ (800cb9c <plug_holes+0x124>)
 800ca8c:	f240 12df 	movw	r2, #479	@ 0x1df
 800ca90:	4943      	ldr	r1, [pc, #268]	@ (800cba0 <plug_holes+0x128>)
 800ca92:	4844      	ldr	r0, [pc, #272]	@ (800cba4 <plug_holes+0x12c>)
 800ca94:	f00b f8e4 	bl	8017c60 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ca98:	4b43      	ldr	r3, [pc, #268]	@ (800cba8 <plug_holes+0x130>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d306      	bcc.n	800cab0 <plug_holes+0x38>
 800caa2:	4b3e      	ldr	r3, [pc, #248]	@ (800cb9c <plug_holes+0x124>)
 800caa4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800caa8:	4940      	ldr	r1, [pc, #256]	@ (800cbac <plug_holes+0x134>)
 800caaa:	483e      	ldr	r0, [pc, #248]	@ (800cba4 <plug_holes+0x12c>)
 800caac:	f00b f8d8 	bl	8017c60 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	791b      	ldrb	r3, [r3, #4]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d006      	beq.n	800cac6 <plug_holes+0x4e>
 800cab8:	4b38      	ldr	r3, [pc, #224]	@ (800cb9c <plug_holes+0x124>)
 800caba:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800cabe:	493c      	ldr	r1, [pc, #240]	@ (800cbb0 <plug_holes+0x138>)
 800cac0:	4838      	ldr	r0, [pc, #224]	@ (800cba4 <plug_holes+0x12c>)
 800cac2:	f00b f8cd 	bl	8017c60 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	881b      	ldrh	r3, [r3, #0]
 800caca:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cace:	d906      	bls.n	800cade <plug_holes+0x66>
 800cad0:	4b32      	ldr	r3, [pc, #200]	@ (800cb9c <plug_holes+0x124>)
 800cad2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800cad6:	4937      	ldr	r1, [pc, #220]	@ (800cbb4 <plug_holes+0x13c>)
 800cad8:	4832      	ldr	r0, [pc, #200]	@ (800cba4 <plug_holes+0x12c>)
 800cada:	f00b f8c1 	bl	8017c60 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	881b      	ldrh	r3, [r3, #0]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7ff ffa4 	bl	800ca30 <ptr_to_mem>
 800cae8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d024      	beq.n	800cb3c <plug_holes+0xc4>
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	791b      	ldrb	r3, [r3, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d120      	bne.n	800cb3c <plug_holes+0xc4>
 800cafa:	4b2b      	ldr	r3, [pc, #172]	@ (800cba8 <plug_holes+0x130>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d01b      	beq.n	800cb3c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cb04:	4b2c      	ldr	r3, [pc, #176]	@ (800cbb8 <plug_holes+0x140>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d102      	bne.n	800cb14 <plug_holes+0x9c>
      lfree = mem;
 800cb0e:	4a2a      	ldr	r2, [pc, #168]	@ (800cbb8 <plug_holes+0x140>)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	881a      	ldrh	r2, [r3, #0]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	881b      	ldrh	r3, [r3, #0]
 800cb20:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cb24:	d00a      	beq.n	800cb3c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	881b      	ldrh	r3, [r3, #0]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7ff ff80 	bl	800ca30 <ptr_to_mem>
 800cb30:	4604      	mov	r4, r0
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7ff ff8e 	bl	800ca54 <mem_to_ptr>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	885b      	ldrh	r3, [r3, #2]
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7ff ff75 	bl	800ca30 <ptr_to_mem>
 800cb46:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cb48:	68ba      	ldr	r2, [r7, #8]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d01f      	beq.n	800cb90 <plug_holes+0x118>
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	791b      	ldrb	r3, [r3, #4]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d11b      	bne.n	800cb90 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cb58:	4b17      	ldr	r3, [pc, #92]	@ (800cbb8 <plug_holes+0x140>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d102      	bne.n	800cb68 <plug_holes+0xf0>
      lfree = pmem;
 800cb62:	4a15      	ldr	r2, [pc, #84]	@ (800cbb8 <plug_holes+0x140>)
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	881a      	ldrh	r2, [r3, #0]
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	881b      	ldrh	r3, [r3, #0]
 800cb74:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cb78:	d00a      	beq.n	800cb90 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	881b      	ldrh	r3, [r3, #0]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7ff ff56 	bl	800ca30 <ptr_to_mem>
 800cb84:	4604      	mov	r4, r0
 800cb86:	68b8      	ldr	r0, [r7, #8]
 800cb88:	f7ff ff64 	bl	800ca54 <mem_to_ptr>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cb90:	bf00      	nop
 800cb92:	3714      	adds	r7, #20
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd90      	pop	{r4, r7, pc}
 800cb98:	2000ced8 	.word	0x2000ced8
 800cb9c:	08019e04 	.word	0x08019e04
 800cba0:	08019e34 	.word	0x08019e34
 800cba4:	08019e4c 	.word	0x08019e4c
 800cba8:	2000cedc 	.word	0x2000cedc
 800cbac:	08019e74 	.word	0x08019e74
 800cbb0:	08019e90 	.word	0x08019e90
 800cbb4:	08019eac 	.word	0x08019eac
 800cbb8:	2000cee4 	.word	0x2000cee4

0800cbbc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cbc2:	4b1f      	ldr	r3, [pc, #124]	@ (800cc40 <mem_init+0x84>)
 800cbc4:	3303      	adds	r3, #3
 800cbc6:	f023 0303 	bic.w	r3, r3, #3
 800cbca:	461a      	mov	r2, r3
 800cbcc:	4b1d      	ldr	r3, [pc, #116]	@ (800cc44 <mem_init+0x88>)
 800cbce:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cbd0:	4b1c      	ldr	r3, [pc, #112]	@ (800cc44 <mem_init+0x88>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800cbdc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cbea:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800cbee:	f7ff ff1f 	bl	800ca30 <ptr_to_mem>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	4a14      	ldr	r2, [pc, #80]	@ (800cc48 <mem_init+0x8c>)
 800cbf6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cbf8:	4b13      	ldr	r3, [pc, #76]	@ (800cc48 <mem_init+0x8c>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cc00:	4b11      	ldr	r3, [pc, #68]	@ (800cc48 <mem_init+0x8c>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800cc08:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cc0a:	4b0f      	ldr	r3, [pc, #60]	@ (800cc48 <mem_init+0x8c>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800cc12:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cc14:	4b0b      	ldr	r3, [pc, #44]	@ (800cc44 <mem_init+0x88>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a0c      	ldr	r2, [pc, #48]	@ (800cc4c <mem_init+0x90>)
 800cc1a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800cc1c:	480c      	ldr	r0, [pc, #48]	@ (800cc50 <mem_init+0x94>)
 800cc1e:	f00a fea3 	bl	8017968 <sys_mutex_new>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d006      	beq.n	800cc36 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800cc28:	4b0a      	ldr	r3, [pc, #40]	@ (800cc54 <mem_init+0x98>)
 800cc2a:	f240 221f 	movw	r2, #543	@ 0x21f
 800cc2e:	490a      	ldr	r1, [pc, #40]	@ (800cc58 <mem_init+0x9c>)
 800cc30:	480a      	ldr	r0, [pc, #40]	@ (800cc5c <mem_init+0xa0>)
 800cc32:	f00b f815 	bl	8017c60 <iprintf>
  }
}
 800cc36:	bf00      	nop
 800cc38:	3708      	adds	r7, #8
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	2000a6c4 	.word	0x2000a6c4
 800cc44:	2000ced8 	.word	0x2000ced8
 800cc48:	2000cedc 	.word	0x2000cedc
 800cc4c:	2000cee4 	.word	0x2000cee4
 800cc50:	2000cee0 	.word	0x2000cee0
 800cc54:	08019e04 	.word	0x08019e04
 800cc58:	08019ed8 	.word	0x08019ed8
 800cc5c:	08019e4c 	.word	0x08019e4c

0800cc60 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b086      	sub	sp, #24
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f7ff fef3 	bl	800ca54 <mem_to_ptr>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	881b      	ldrh	r3, [r3, #0]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7ff feda 	bl	800ca30 <ptr_to_mem>
 800cc7c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	885b      	ldrh	r3, [r3, #2]
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7ff fed4 	bl	800ca30 <ptr_to_mem>
 800cc88:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	881b      	ldrh	r3, [r3, #0]
 800cc8e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cc92:	d818      	bhi.n	800ccc6 <mem_link_valid+0x66>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	885b      	ldrh	r3, [r3, #2]
 800cc98:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cc9c:	d813      	bhi.n	800ccc6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cca2:	8afa      	ldrh	r2, [r7, #22]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d004      	beq.n	800ccb2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	881b      	ldrh	r3, [r3, #0]
 800ccac:	8afa      	ldrh	r2, [r7, #22]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d109      	bne.n	800ccc6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ccb2:	4b08      	ldr	r3, [pc, #32]	@ (800ccd4 <mem_link_valid+0x74>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ccb6:	693a      	ldr	r2, [r7, #16]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d006      	beq.n	800ccca <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	885b      	ldrh	r3, [r3, #2]
 800ccc0:	8afa      	ldrh	r2, [r7, #22]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d001      	beq.n	800ccca <mem_link_valid+0x6a>
    return 0;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	e000      	b.n	800cccc <mem_link_valid+0x6c>
  }
  return 1;
 800ccca:	2301      	movs	r3, #1
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3718      	adds	r7, #24
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	2000cedc 	.word	0x2000cedc

0800ccd8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b088      	sub	sp, #32
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d070      	beq.n	800cdc8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f003 0303 	and.w	r3, r3, #3
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d00d      	beq.n	800cd0c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ccf0:	4b37      	ldr	r3, [pc, #220]	@ (800cdd0 <mem_free+0xf8>)
 800ccf2:	f240 2273 	movw	r2, #627	@ 0x273
 800ccf6:	4937      	ldr	r1, [pc, #220]	@ (800cdd4 <mem_free+0xfc>)
 800ccf8:	4837      	ldr	r0, [pc, #220]	@ (800cdd8 <mem_free+0x100>)
 800ccfa:	f00a ffb1 	bl	8017c60 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ccfe:	f00a fe91 	bl	8017a24 <sys_arch_protect>
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	68f8      	ldr	r0, [r7, #12]
 800cd06:	f00a fe9b 	bl	8017a40 <sys_arch_unprotect>
    return;
 800cd0a:	e05e      	b.n	800cdca <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	3b08      	subs	r3, #8
 800cd10:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800cd12:	4b32      	ldr	r3, [pc, #200]	@ (800cddc <mem_free+0x104>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	69fa      	ldr	r2, [r7, #28]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d306      	bcc.n	800cd2a <mem_free+0x52>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f103 020c 	add.w	r2, r3, #12
 800cd22:	4b2f      	ldr	r3, [pc, #188]	@ (800cde0 <mem_free+0x108>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d90d      	bls.n	800cd46 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cd2a:	4b29      	ldr	r3, [pc, #164]	@ (800cdd0 <mem_free+0xf8>)
 800cd2c:	f240 227f 	movw	r2, #639	@ 0x27f
 800cd30:	492c      	ldr	r1, [pc, #176]	@ (800cde4 <mem_free+0x10c>)
 800cd32:	4829      	ldr	r0, [pc, #164]	@ (800cdd8 <mem_free+0x100>)
 800cd34:	f00a ff94 	bl	8017c60 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cd38:	f00a fe74 	bl	8017a24 <sys_arch_protect>
 800cd3c:	6138      	str	r0, [r7, #16]
 800cd3e:	6938      	ldr	r0, [r7, #16]
 800cd40:	f00a fe7e 	bl	8017a40 <sys_arch_unprotect>
    return;
 800cd44:	e041      	b.n	800cdca <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cd46:	4828      	ldr	r0, [pc, #160]	@ (800cde8 <mem_free+0x110>)
 800cd48:	f00a fe2a 	bl	80179a0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	791b      	ldrb	r3, [r3, #4]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d110      	bne.n	800cd76 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cd54:	4b1e      	ldr	r3, [pc, #120]	@ (800cdd0 <mem_free+0xf8>)
 800cd56:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800cd5a:	4924      	ldr	r1, [pc, #144]	@ (800cdec <mem_free+0x114>)
 800cd5c:	481e      	ldr	r0, [pc, #120]	@ (800cdd8 <mem_free+0x100>)
 800cd5e:	f00a ff7f 	bl	8017c60 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cd62:	4821      	ldr	r0, [pc, #132]	@ (800cde8 <mem_free+0x110>)
 800cd64:	f00a fe2b 	bl	80179be <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cd68:	f00a fe5c 	bl	8017a24 <sys_arch_protect>
 800cd6c:	6178      	str	r0, [r7, #20]
 800cd6e:	6978      	ldr	r0, [r7, #20]
 800cd70:	f00a fe66 	bl	8017a40 <sys_arch_unprotect>
    return;
 800cd74:	e029      	b.n	800cdca <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800cd76:	69f8      	ldr	r0, [r7, #28]
 800cd78:	f7ff ff72 	bl	800cc60 <mem_link_valid>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d110      	bne.n	800cda4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cd82:	4b13      	ldr	r3, [pc, #76]	@ (800cdd0 <mem_free+0xf8>)
 800cd84:	f240 2295 	movw	r2, #661	@ 0x295
 800cd88:	4919      	ldr	r1, [pc, #100]	@ (800cdf0 <mem_free+0x118>)
 800cd8a:	4813      	ldr	r0, [pc, #76]	@ (800cdd8 <mem_free+0x100>)
 800cd8c:	f00a ff68 	bl	8017c60 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cd90:	4815      	ldr	r0, [pc, #84]	@ (800cde8 <mem_free+0x110>)
 800cd92:	f00a fe14 	bl	80179be <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cd96:	f00a fe45 	bl	8017a24 <sys_arch_protect>
 800cd9a:	61b8      	str	r0, [r7, #24]
 800cd9c:	69b8      	ldr	r0, [r7, #24]
 800cd9e:	f00a fe4f 	bl	8017a40 <sys_arch_unprotect>
    return;
 800cda2:	e012      	b.n	800cdca <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	2200      	movs	r2, #0
 800cda8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cdaa:	4b12      	ldr	r3, [pc, #72]	@ (800cdf4 <mem_free+0x11c>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	69fa      	ldr	r2, [r7, #28]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d202      	bcs.n	800cdba <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cdb4:	4a0f      	ldr	r2, [pc, #60]	@ (800cdf4 <mem_free+0x11c>)
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cdba:	69f8      	ldr	r0, [r7, #28]
 800cdbc:	f7ff fe5c 	bl	800ca78 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cdc0:	4809      	ldr	r0, [pc, #36]	@ (800cde8 <mem_free+0x110>)
 800cdc2:	f00a fdfc 	bl	80179be <sys_mutex_unlock>
 800cdc6:	e000      	b.n	800cdca <mem_free+0xf2>
    return;
 800cdc8:	bf00      	nop
}
 800cdca:	3720      	adds	r7, #32
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	08019e04 	.word	0x08019e04
 800cdd4:	08019ef4 	.word	0x08019ef4
 800cdd8:	08019e4c 	.word	0x08019e4c
 800cddc:	2000ced8 	.word	0x2000ced8
 800cde0:	2000cedc 	.word	0x2000cedc
 800cde4:	08019f18 	.word	0x08019f18
 800cde8:	2000cee0 	.word	0x2000cee0
 800cdec:	08019f34 	.word	0x08019f34
 800cdf0:	08019f5c 	.word	0x08019f5c
 800cdf4:	2000cee4 	.word	0x2000cee4

0800cdf8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b088      	sub	sp, #32
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	460b      	mov	r3, r1
 800ce02:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ce04:	887b      	ldrh	r3, [r7, #2]
 800ce06:	3303      	adds	r3, #3
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	f023 0303 	bic.w	r3, r3, #3
 800ce0e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ce10:	8bfb      	ldrh	r3, [r7, #30]
 800ce12:	2b0b      	cmp	r3, #11
 800ce14:	d801      	bhi.n	800ce1a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ce16:	230c      	movs	r3, #12
 800ce18:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ce1a:	8bfb      	ldrh	r3, [r7, #30]
 800ce1c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ce20:	d803      	bhi.n	800ce2a <mem_trim+0x32>
 800ce22:	8bfa      	ldrh	r2, [r7, #30]
 800ce24:	887b      	ldrh	r3, [r7, #2]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d201      	bcs.n	800ce2e <mem_trim+0x36>
    return NULL;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	e0d8      	b.n	800cfe0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ce2e:	4b6e      	ldr	r3, [pc, #440]	@ (800cfe8 <mem_trim+0x1f0>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d304      	bcc.n	800ce42 <mem_trim+0x4a>
 800ce38:	4b6c      	ldr	r3, [pc, #432]	@ (800cfec <mem_trim+0x1f4>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d306      	bcc.n	800ce50 <mem_trim+0x58>
 800ce42:	4b6b      	ldr	r3, [pc, #428]	@ (800cff0 <mem_trim+0x1f8>)
 800ce44:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800ce48:	496a      	ldr	r1, [pc, #424]	@ (800cff4 <mem_trim+0x1fc>)
 800ce4a:	486b      	ldr	r0, [pc, #428]	@ (800cff8 <mem_trim+0x200>)
 800ce4c:	f00a ff08 	bl	8017c60 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ce50:	4b65      	ldr	r3, [pc, #404]	@ (800cfe8 <mem_trim+0x1f0>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d304      	bcc.n	800ce64 <mem_trim+0x6c>
 800ce5a:	4b64      	ldr	r3, [pc, #400]	@ (800cfec <mem_trim+0x1f4>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d307      	bcc.n	800ce74 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ce64:	f00a fdde 	bl	8017a24 <sys_arch_protect>
 800ce68:	60b8      	str	r0, [r7, #8]
 800ce6a:	68b8      	ldr	r0, [r7, #8]
 800ce6c:	f00a fde8 	bl	8017a40 <sys_arch_unprotect>
    return rmem;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	e0b5      	b.n	800cfe0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	3b08      	subs	r3, #8
 800ce78:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ce7a:	69b8      	ldr	r0, [r7, #24]
 800ce7c:	f7ff fdea 	bl	800ca54 <mem_to_ptr>
 800ce80:	4603      	mov	r3, r0
 800ce82:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	881a      	ldrh	r2, [r3, #0]
 800ce88:	8afb      	ldrh	r3, [r7, #22]
 800ce8a:	1ad3      	subs	r3, r2, r3
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	3b08      	subs	r3, #8
 800ce90:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ce92:	8bfa      	ldrh	r2, [r7, #30]
 800ce94:	8abb      	ldrh	r3, [r7, #20]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d906      	bls.n	800cea8 <mem_trim+0xb0>
 800ce9a:	4b55      	ldr	r3, [pc, #340]	@ (800cff0 <mem_trim+0x1f8>)
 800ce9c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800cea0:	4956      	ldr	r1, [pc, #344]	@ (800cffc <mem_trim+0x204>)
 800cea2:	4855      	ldr	r0, [pc, #340]	@ (800cff8 <mem_trim+0x200>)
 800cea4:	f00a fedc 	bl	8017c60 <iprintf>
  if (newsize > size) {
 800cea8:	8bfa      	ldrh	r2, [r7, #30]
 800ceaa:	8abb      	ldrh	r3, [r7, #20]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d901      	bls.n	800ceb4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	e095      	b.n	800cfe0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ceb4:	8bfa      	ldrh	r2, [r7, #30]
 800ceb6:	8abb      	ldrh	r3, [r7, #20]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d101      	bne.n	800cec0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	e08f      	b.n	800cfe0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cec0:	484f      	ldr	r0, [pc, #316]	@ (800d000 <mem_trim+0x208>)
 800cec2:	f00a fd6d 	bl	80179a0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	881b      	ldrh	r3, [r3, #0]
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7ff fdb0 	bl	800ca30 <ptr_to_mem>
 800ced0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	791b      	ldrb	r3, [r3, #4]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d13f      	bne.n	800cf5a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	881b      	ldrh	r3, [r3, #0]
 800cede:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cee2:	d106      	bne.n	800cef2 <mem_trim+0xfa>
 800cee4:	4b42      	ldr	r3, [pc, #264]	@ (800cff0 <mem_trim+0x1f8>)
 800cee6:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800ceea:	4946      	ldr	r1, [pc, #280]	@ (800d004 <mem_trim+0x20c>)
 800ceec:	4842      	ldr	r0, [pc, #264]	@ (800cff8 <mem_trim+0x200>)
 800ceee:	f00a feb7 	bl	8017c60 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	881b      	ldrh	r3, [r3, #0]
 800cef6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cef8:	8afa      	ldrh	r2, [r7, #22]
 800cefa:	8bfb      	ldrh	r3, [r7, #30]
 800cefc:	4413      	add	r3, r2
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	3308      	adds	r3, #8
 800cf02:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cf04:	4b40      	ldr	r3, [pc, #256]	@ (800d008 <mem_trim+0x210>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	693a      	ldr	r2, [r7, #16]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d106      	bne.n	800cf1c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cf0e:	89fb      	ldrh	r3, [r7, #14]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7ff fd8d 	bl	800ca30 <ptr_to_mem>
 800cf16:	4603      	mov	r3, r0
 800cf18:	4a3b      	ldr	r2, [pc, #236]	@ (800d008 <mem_trim+0x210>)
 800cf1a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cf1c:	89fb      	ldrh	r3, [r7, #14]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7ff fd86 	bl	800ca30 <ptr_to_mem>
 800cf24:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	89ba      	ldrh	r2, [r7, #12]
 800cf30:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	8afa      	ldrh	r2, [r7, #22]
 800cf36:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	89fa      	ldrh	r2, [r7, #14]
 800cf3c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	881b      	ldrh	r3, [r3, #0]
 800cf42:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cf46:	d047      	beq.n	800cfd8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	881b      	ldrh	r3, [r3, #0]
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7ff fd6f 	bl	800ca30 <ptr_to_mem>
 800cf52:	4602      	mov	r2, r0
 800cf54:	89fb      	ldrh	r3, [r7, #14]
 800cf56:	8053      	strh	r3, [r2, #2]
 800cf58:	e03e      	b.n	800cfd8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cf5a:	8bfb      	ldrh	r3, [r7, #30]
 800cf5c:	f103 0214 	add.w	r2, r3, #20
 800cf60:	8abb      	ldrh	r3, [r7, #20]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d838      	bhi.n	800cfd8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cf66:	8afa      	ldrh	r2, [r7, #22]
 800cf68:	8bfb      	ldrh	r3, [r7, #30]
 800cf6a:	4413      	add	r3, r2
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	3308      	adds	r3, #8
 800cf70:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cf72:	69bb      	ldr	r3, [r7, #24]
 800cf74:	881b      	ldrh	r3, [r3, #0]
 800cf76:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cf7a:	d106      	bne.n	800cf8a <mem_trim+0x192>
 800cf7c:	4b1c      	ldr	r3, [pc, #112]	@ (800cff0 <mem_trim+0x1f8>)
 800cf7e:	f240 3216 	movw	r2, #790	@ 0x316
 800cf82:	4920      	ldr	r1, [pc, #128]	@ (800d004 <mem_trim+0x20c>)
 800cf84:	481c      	ldr	r0, [pc, #112]	@ (800cff8 <mem_trim+0x200>)
 800cf86:	f00a fe6b 	bl	8017c60 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cf8a:	89fb      	ldrh	r3, [r7, #14]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7ff fd4f 	bl	800ca30 <ptr_to_mem>
 800cf92:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cf94:	4b1c      	ldr	r3, [pc, #112]	@ (800d008 <mem_trim+0x210>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	693a      	ldr	r2, [r7, #16]
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d202      	bcs.n	800cfa4 <mem_trim+0x1ac>
      lfree = mem2;
 800cf9e:	4a1a      	ldr	r2, [pc, #104]	@ (800d008 <mem_trim+0x210>)
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	881a      	ldrh	r2, [r3, #0]
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	8afa      	ldrh	r2, [r7, #22]
 800cfb6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	89fa      	ldrh	r2, [r7, #14]
 800cfbc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	881b      	ldrh	r3, [r3, #0]
 800cfc2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cfc6:	d007      	beq.n	800cfd8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	881b      	ldrh	r3, [r3, #0]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7ff fd2f 	bl	800ca30 <ptr_to_mem>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	89fb      	ldrh	r3, [r7, #14]
 800cfd6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cfd8:	4809      	ldr	r0, [pc, #36]	@ (800d000 <mem_trim+0x208>)
 800cfda:	f00a fcf0 	bl	80179be <sys_mutex_unlock>
  return rmem;
 800cfde:	687b      	ldr	r3, [r7, #4]
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3720      	adds	r7, #32
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	2000ced8 	.word	0x2000ced8
 800cfec:	2000cedc 	.word	0x2000cedc
 800cff0:	08019e04 	.word	0x08019e04
 800cff4:	08019f90 	.word	0x08019f90
 800cff8:	08019e4c 	.word	0x08019e4c
 800cffc:	08019fa8 	.word	0x08019fa8
 800d000:	2000cee0 	.word	0x2000cee0
 800d004:	08019fc8 	.word	0x08019fc8
 800d008:	2000cee4 	.word	0x2000cee4

0800d00c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b088      	sub	sp, #32
 800d010:	af00      	add	r7, sp, #0
 800d012:	4603      	mov	r3, r0
 800d014:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d016:	88fb      	ldrh	r3, [r7, #6]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d101      	bne.n	800d020 <mem_malloc+0x14>
    return NULL;
 800d01c:	2300      	movs	r3, #0
 800d01e:	e0e2      	b.n	800d1e6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d020:	88fb      	ldrh	r3, [r7, #6]
 800d022:	3303      	adds	r3, #3
 800d024:	b29b      	uxth	r3, r3
 800d026:	f023 0303 	bic.w	r3, r3, #3
 800d02a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d02c:	8bbb      	ldrh	r3, [r7, #28]
 800d02e:	2b0b      	cmp	r3, #11
 800d030:	d801      	bhi.n	800d036 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d032:	230c      	movs	r3, #12
 800d034:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d036:	8bbb      	ldrh	r3, [r7, #28]
 800d038:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d03c:	d803      	bhi.n	800d046 <mem_malloc+0x3a>
 800d03e:	8bba      	ldrh	r2, [r7, #28]
 800d040:	88fb      	ldrh	r3, [r7, #6]
 800d042:	429a      	cmp	r2, r3
 800d044:	d201      	bcs.n	800d04a <mem_malloc+0x3e>
    return NULL;
 800d046:	2300      	movs	r3, #0
 800d048:	e0cd      	b.n	800d1e6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d04a:	4869      	ldr	r0, [pc, #420]	@ (800d1f0 <mem_malloc+0x1e4>)
 800d04c:	f00a fca8 	bl	80179a0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d050:	4b68      	ldr	r3, [pc, #416]	@ (800d1f4 <mem_malloc+0x1e8>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4618      	mov	r0, r3
 800d056:	f7ff fcfd 	bl	800ca54 <mem_to_ptr>
 800d05a:	4603      	mov	r3, r0
 800d05c:	83fb      	strh	r3, [r7, #30]
 800d05e:	e0b7      	b.n	800d1d0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d060:	8bfb      	ldrh	r3, [r7, #30]
 800d062:	4618      	mov	r0, r3
 800d064:	f7ff fce4 	bl	800ca30 <ptr_to_mem>
 800d068:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	791b      	ldrb	r3, [r3, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f040 80a7 	bne.w	800d1c2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	881b      	ldrh	r3, [r3, #0]
 800d078:	461a      	mov	r2, r3
 800d07a:	8bfb      	ldrh	r3, [r7, #30]
 800d07c:	1ad3      	subs	r3, r2, r3
 800d07e:	f1a3 0208 	sub.w	r2, r3, #8
 800d082:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d084:	429a      	cmp	r2, r3
 800d086:	f0c0 809c 	bcc.w	800d1c2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	881b      	ldrh	r3, [r3, #0]
 800d08e:	461a      	mov	r2, r3
 800d090:	8bfb      	ldrh	r3, [r7, #30]
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	f1a3 0208 	sub.w	r2, r3, #8
 800d098:	8bbb      	ldrh	r3, [r7, #28]
 800d09a:	3314      	adds	r3, #20
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d333      	bcc.n	800d108 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d0a0:	8bfa      	ldrh	r2, [r7, #30]
 800d0a2:	8bbb      	ldrh	r3, [r7, #28]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	3308      	adds	r3, #8
 800d0aa:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d0ac:	8a7b      	ldrh	r3, [r7, #18]
 800d0ae:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d0b2:	d106      	bne.n	800d0c2 <mem_malloc+0xb6>
 800d0b4:	4b50      	ldr	r3, [pc, #320]	@ (800d1f8 <mem_malloc+0x1ec>)
 800d0b6:	f240 3287 	movw	r2, #903	@ 0x387
 800d0ba:	4950      	ldr	r1, [pc, #320]	@ (800d1fc <mem_malloc+0x1f0>)
 800d0bc:	4850      	ldr	r0, [pc, #320]	@ (800d200 <mem_malloc+0x1f4>)
 800d0be:	f00a fdcf 	bl	8017c60 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d0c2:	8a7b      	ldrh	r3, [r7, #18]
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7ff fcb3 	bl	800ca30 <ptr_to_mem>
 800d0ca:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	881a      	ldrh	r2, [r3, #0]
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	8bfa      	ldrh	r2, [r7, #30]
 800d0de:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	8a7a      	ldrh	r2, [r7, #18]
 800d0e4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	881b      	ldrh	r3, [r3, #0]
 800d0f0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d0f4:	d00b      	beq.n	800d10e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	881b      	ldrh	r3, [r3, #0]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7ff fc98 	bl	800ca30 <ptr_to_mem>
 800d100:	4602      	mov	r2, r0
 800d102:	8a7b      	ldrh	r3, [r7, #18]
 800d104:	8053      	strh	r3, [r2, #2]
 800d106:	e002      	b.n	800d10e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	2201      	movs	r2, #1
 800d10c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d10e:	4b39      	ldr	r3, [pc, #228]	@ (800d1f4 <mem_malloc+0x1e8>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	697a      	ldr	r2, [r7, #20]
 800d114:	429a      	cmp	r2, r3
 800d116:	d127      	bne.n	800d168 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d118:	4b36      	ldr	r3, [pc, #216]	@ (800d1f4 <mem_malloc+0x1e8>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d11e:	e005      	b.n	800d12c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	881b      	ldrh	r3, [r3, #0]
 800d124:	4618      	mov	r0, r3
 800d126:	f7ff fc83 	bl	800ca30 <ptr_to_mem>
 800d12a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d12c:	69bb      	ldr	r3, [r7, #24]
 800d12e:	791b      	ldrb	r3, [r3, #4]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d004      	beq.n	800d13e <mem_malloc+0x132>
 800d134:	4b33      	ldr	r3, [pc, #204]	@ (800d204 <mem_malloc+0x1f8>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	69ba      	ldr	r2, [r7, #24]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d1f0      	bne.n	800d120 <mem_malloc+0x114>
          }
          lfree = cur;
 800d13e:	4a2d      	ldr	r2, [pc, #180]	@ (800d1f4 <mem_malloc+0x1e8>)
 800d140:	69bb      	ldr	r3, [r7, #24]
 800d142:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d144:	4b2b      	ldr	r3, [pc, #172]	@ (800d1f4 <mem_malloc+0x1e8>)
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	4b2e      	ldr	r3, [pc, #184]	@ (800d204 <mem_malloc+0x1f8>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d00b      	beq.n	800d168 <mem_malloc+0x15c>
 800d150:	4b28      	ldr	r3, [pc, #160]	@ (800d1f4 <mem_malloc+0x1e8>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	791b      	ldrb	r3, [r3, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d006      	beq.n	800d168 <mem_malloc+0x15c>
 800d15a:	4b27      	ldr	r3, [pc, #156]	@ (800d1f8 <mem_malloc+0x1ec>)
 800d15c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800d160:	4929      	ldr	r1, [pc, #164]	@ (800d208 <mem_malloc+0x1fc>)
 800d162:	4827      	ldr	r0, [pc, #156]	@ (800d200 <mem_malloc+0x1f4>)
 800d164:	f00a fd7c 	bl	8017c60 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d168:	4821      	ldr	r0, [pc, #132]	@ (800d1f0 <mem_malloc+0x1e4>)
 800d16a:	f00a fc28 	bl	80179be <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d16e:	8bba      	ldrh	r2, [r7, #28]
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	4413      	add	r3, r2
 800d174:	3308      	adds	r3, #8
 800d176:	4a23      	ldr	r2, [pc, #140]	@ (800d204 <mem_malloc+0x1f8>)
 800d178:	6812      	ldr	r2, [r2, #0]
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d906      	bls.n	800d18c <mem_malloc+0x180>
 800d17e:	4b1e      	ldr	r3, [pc, #120]	@ (800d1f8 <mem_malloc+0x1ec>)
 800d180:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800d184:	4921      	ldr	r1, [pc, #132]	@ (800d20c <mem_malloc+0x200>)
 800d186:	481e      	ldr	r0, [pc, #120]	@ (800d200 <mem_malloc+0x1f4>)
 800d188:	f00a fd6a 	bl	8017c60 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	f003 0303 	and.w	r3, r3, #3
 800d192:	2b00      	cmp	r3, #0
 800d194:	d006      	beq.n	800d1a4 <mem_malloc+0x198>
 800d196:	4b18      	ldr	r3, [pc, #96]	@ (800d1f8 <mem_malloc+0x1ec>)
 800d198:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800d19c:	491c      	ldr	r1, [pc, #112]	@ (800d210 <mem_malloc+0x204>)
 800d19e:	4818      	ldr	r0, [pc, #96]	@ (800d200 <mem_malloc+0x1f4>)
 800d1a0:	f00a fd5e 	bl	8017c60 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	f003 0303 	and.w	r3, r3, #3
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d006      	beq.n	800d1bc <mem_malloc+0x1b0>
 800d1ae:	4b12      	ldr	r3, [pc, #72]	@ (800d1f8 <mem_malloc+0x1ec>)
 800d1b0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800d1b4:	4917      	ldr	r1, [pc, #92]	@ (800d214 <mem_malloc+0x208>)
 800d1b6:	4812      	ldr	r0, [pc, #72]	@ (800d200 <mem_malloc+0x1f4>)
 800d1b8:	f00a fd52 	bl	8017c60 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	3308      	adds	r3, #8
 800d1c0:	e011      	b.n	800d1e6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d1c2:	8bfb      	ldrh	r3, [r7, #30]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7ff fc33 	bl	800ca30 <ptr_to_mem>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	881b      	ldrh	r3, [r3, #0]
 800d1ce:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d1d0:	8bfa      	ldrh	r2, [r7, #30]
 800d1d2:	8bbb      	ldrh	r3, [r7, #28]
 800d1d4:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	f4ff af41 	bcc.w	800d060 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d1de:	4804      	ldr	r0, [pc, #16]	@ (800d1f0 <mem_malloc+0x1e4>)
 800d1e0:	f00a fbed 	bl	80179be <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d1e4:	2300      	movs	r3, #0
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3720      	adds	r7, #32
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	2000cee0 	.word	0x2000cee0
 800d1f4:	2000cee4 	.word	0x2000cee4
 800d1f8:	08019e04 	.word	0x08019e04
 800d1fc:	08019fc8 	.word	0x08019fc8
 800d200:	08019e4c 	.word	0x08019e4c
 800d204:	2000cedc 	.word	0x2000cedc
 800d208:	08019fdc 	.word	0x08019fdc
 800d20c:	08019ff8 	.word	0x08019ff8
 800d210:	0801a028 	.word	0x0801a028
 800d214:	0801a058 	.word	0x0801a058

0800d218 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	2200      	movs	r2, #0
 800d226:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	3303      	adds	r3, #3
 800d22e:	f023 0303 	bic.w	r3, r3, #3
 800d232:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d234:	2300      	movs	r3, #0
 800d236:	60fb      	str	r3, [r7, #12]
 800d238:	e011      	b.n	800d25e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	68ba      	ldr	r2, [r7, #8]
 800d24a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	881b      	ldrh	r3, [r3, #0]
 800d250:	461a      	mov	r2, r3
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	4413      	add	r3, r2
 800d256:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	3301      	adds	r3, #1
 800d25c:	60fb      	str	r3, [r7, #12]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	885b      	ldrh	r3, [r3, #2]
 800d262:	461a      	mov	r2, r3
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	4293      	cmp	r3, r2
 800d268:	dbe7      	blt.n	800d23a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d26a:	bf00      	nop
 800d26c:	bf00      	nop
 800d26e:	3714      	adds	r7, #20
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d27e:	2300      	movs	r3, #0
 800d280:	80fb      	strh	r3, [r7, #6]
 800d282:	e009      	b.n	800d298 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d284:	88fb      	ldrh	r3, [r7, #6]
 800d286:	4a08      	ldr	r2, [pc, #32]	@ (800d2a8 <memp_init+0x30>)
 800d288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7ff ffc3 	bl	800d218 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d292:	88fb      	ldrh	r3, [r7, #6]
 800d294:	3301      	adds	r3, #1
 800d296:	80fb      	strh	r3, [r7, #6]
 800d298:	88fb      	ldrh	r3, [r7, #6]
 800d29a:	2b0c      	cmp	r3, #12
 800d29c:	d9f2      	bls.n	800d284 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d29e:	bf00      	nop
 800d2a0:	bf00      	nop
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	0801c870 	.word	0x0801c870

0800d2ac <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d2b4:	f00a fbb6 	bl	8017a24 <sys_arch_protect>
 800d2b8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d015      	beq.n	800d2f4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	68ba      	ldr	r2, [r7, #8]
 800d2ce:	6812      	ldr	r2, [r2, #0]
 800d2d0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	f003 0303 	and.w	r3, r3, #3
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d006      	beq.n	800d2ea <do_memp_malloc_pool+0x3e>
 800d2dc:	4b09      	ldr	r3, [pc, #36]	@ (800d304 <do_memp_malloc_pool+0x58>)
 800d2de:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800d2e2:	4909      	ldr	r1, [pc, #36]	@ (800d308 <do_memp_malloc_pool+0x5c>)
 800d2e4:	4809      	ldr	r0, [pc, #36]	@ (800d30c <do_memp_malloc_pool+0x60>)
 800d2e6:	f00a fcbb 	bl	8017c60 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d2ea:	68f8      	ldr	r0, [r7, #12]
 800d2ec:	f00a fba8 	bl	8017a40 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	e003      	b.n	800d2fc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d2f4:	68f8      	ldr	r0, [r7, #12]
 800d2f6:	f00a fba3 	bl	8017a40 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3710      	adds	r7, #16
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	0801a07c 	.word	0x0801a07c
 800d308:	0801a0ac 	.word	0x0801a0ac
 800d30c:	0801a0d0 	.word	0x0801a0d0

0800d310 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d106      	bne.n	800d32c <memp_malloc_pool+0x1c>
 800d31e:	4b0a      	ldr	r3, [pc, #40]	@ (800d348 <memp_malloc_pool+0x38>)
 800d320:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800d324:	4909      	ldr	r1, [pc, #36]	@ (800d34c <memp_malloc_pool+0x3c>)
 800d326:	480a      	ldr	r0, [pc, #40]	@ (800d350 <memp_malloc_pool+0x40>)
 800d328:	f00a fc9a 	bl	8017c60 <iprintf>
  if (desc == NULL) {
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d101      	bne.n	800d336 <memp_malloc_pool+0x26>
    return NULL;
 800d332:	2300      	movs	r3, #0
 800d334:	e003      	b.n	800d33e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f7ff ffb8 	bl	800d2ac <do_memp_malloc_pool>
 800d33c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3708      	adds	r7, #8
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	0801a07c 	.word	0x0801a07c
 800d34c:	0801a0f8 	.word	0x0801a0f8
 800d350:	0801a0d0 	.word	0x0801a0d0

0800d354 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	4603      	mov	r3, r0
 800d35c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d35e:	79fb      	ldrb	r3, [r7, #7]
 800d360:	2b0c      	cmp	r3, #12
 800d362:	d908      	bls.n	800d376 <memp_malloc+0x22>
 800d364:	4b0a      	ldr	r3, [pc, #40]	@ (800d390 <memp_malloc+0x3c>)
 800d366:	f240 1257 	movw	r2, #343	@ 0x157
 800d36a:	490a      	ldr	r1, [pc, #40]	@ (800d394 <memp_malloc+0x40>)
 800d36c:	480a      	ldr	r0, [pc, #40]	@ (800d398 <memp_malloc+0x44>)
 800d36e:	f00a fc77 	bl	8017c60 <iprintf>
 800d372:	2300      	movs	r3, #0
 800d374:	e008      	b.n	800d388 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d376:	79fb      	ldrb	r3, [r7, #7]
 800d378:	4a08      	ldr	r2, [pc, #32]	@ (800d39c <memp_malloc+0x48>)
 800d37a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d37e:	4618      	mov	r0, r3
 800d380:	f7ff ff94 	bl	800d2ac <do_memp_malloc_pool>
 800d384:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d386:	68fb      	ldr	r3, [r7, #12]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3710      	adds	r7, #16
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	0801a07c 	.word	0x0801a07c
 800d394:	0801a10c 	.word	0x0801a10c
 800d398:	0801a0d0 	.word	0x0801a0d0
 800d39c:	0801c870 	.word	0x0801c870

0800d3a0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	f003 0303 	and.w	r3, r3, #3
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d006      	beq.n	800d3c2 <do_memp_free_pool+0x22>
 800d3b4:	4b0d      	ldr	r3, [pc, #52]	@ (800d3ec <do_memp_free_pool+0x4c>)
 800d3b6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800d3ba:	490d      	ldr	r1, [pc, #52]	@ (800d3f0 <do_memp_free_pool+0x50>)
 800d3bc:	480d      	ldr	r0, [pc, #52]	@ (800d3f4 <do_memp_free_pool+0x54>)
 800d3be:	f00a fc4f 	bl	8017c60 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d3c6:	f00a fb2d 	bl	8017a24 <sys_arch_protect>
 800d3ca:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	68fa      	ldr	r2, [r7, #12]
 800d3dc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d3de:	68b8      	ldr	r0, [r7, #8]
 800d3e0:	f00a fb2e 	bl	8017a40 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d3e4:	bf00      	nop
 800d3e6:	3710      	adds	r7, #16
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	0801a07c 	.word	0x0801a07c
 800d3f0:	0801a12c 	.word	0x0801a12c
 800d3f4:	0801a0d0 	.word	0x0801a0d0

0800d3f8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d106      	bne.n	800d416 <memp_free_pool+0x1e>
 800d408:	4b0a      	ldr	r3, [pc, #40]	@ (800d434 <memp_free_pool+0x3c>)
 800d40a:	f240 1295 	movw	r2, #405	@ 0x195
 800d40e:	490a      	ldr	r1, [pc, #40]	@ (800d438 <memp_free_pool+0x40>)
 800d410:	480a      	ldr	r0, [pc, #40]	@ (800d43c <memp_free_pool+0x44>)
 800d412:	f00a fc25 	bl	8017c60 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d007      	beq.n	800d42c <memp_free_pool+0x34>
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d004      	beq.n	800d42c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d422:	6839      	ldr	r1, [r7, #0]
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f7ff ffbb 	bl	800d3a0 <do_memp_free_pool>
 800d42a:	e000      	b.n	800d42e <memp_free_pool+0x36>
    return;
 800d42c:	bf00      	nop
}
 800d42e:	3708      	adds	r7, #8
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	0801a07c 	.word	0x0801a07c
 800d438:	0801a0f8 	.word	0x0801a0f8
 800d43c:	0801a0d0 	.word	0x0801a0d0

0800d440 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af00      	add	r7, sp, #0
 800d446:	4603      	mov	r3, r0
 800d448:	6039      	str	r1, [r7, #0]
 800d44a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d44c:	79fb      	ldrb	r3, [r7, #7]
 800d44e:	2b0c      	cmp	r3, #12
 800d450:	d907      	bls.n	800d462 <memp_free+0x22>
 800d452:	4b0c      	ldr	r3, [pc, #48]	@ (800d484 <memp_free+0x44>)
 800d454:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800d458:	490b      	ldr	r1, [pc, #44]	@ (800d488 <memp_free+0x48>)
 800d45a:	480c      	ldr	r0, [pc, #48]	@ (800d48c <memp_free+0x4c>)
 800d45c:	f00a fc00 	bl	8017c60 <iprintf>
 800d460:	e00c      	b.n	800d47c <memp_free+0x3c>

  if (mem == NULL) {
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d008      	beq.n	800d47a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d468:	79fb      	ldrb	r3, [r7, #7]
 800d46a:	4a09      	ldr	r2, [pc, #36]	@ (800d490 <memp_free+0x50>)
 800d46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d470:	6839      	ldr	r1, [r7, #0]
 800d472:	4618      	mov	r0, r3
 800d474:	f7ff ff94 	bl	800d3a0 <do_memp_free_pool>
 800d478:	e000      	b.n	800d47c <memp_free+0x3c>
    return;
 800d47a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d47c:	3708      	adds	r7, #8
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	0801a07c 	.word	0x0801a07c
 800d488:	0801a14c 	.word	0x0801a14c
 800d48c:	0801a0d0 	.word	0x0801a0d0
 800d490:	0801c870 	.word	0x0801c870

0800d494 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d494:	b480      	push	{r7}
 800d496:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d498:	bf00      	nop
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr
	...

0800d4a4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b086      	sub	sp, #24
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
 800d4b0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d108      	bne.n	800d4ca <netif_add+0x26>
 800d4b8:	4b57      	ldr	r3, [pc, #348]	@ (800d618 <netif_add+0x174>)
 800d4ba:	f240 1227 	movw	r2, #295	@ 0x127
 800d4be:	4957      	ldr	r1, [pc, #348]	@ (800d61c <netif_add+0x178>)
 800d4c0:	4857      	ldr	r0, [pc, #348]	@ (800d620 <netif_add+0x17c>)
 800d4c2:	f00a fbcd 	bl	8017c60 <iprintf>
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	e0a2      	b.n	800d610 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d108      	bne.n	800d4e2 <netif_add+0x3e>
 800d4d0:	4b51      	ldr	r3, [pc, #324]	@ (800d618 <netif_add+0x174>)
 800d4d2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d4d6:	4953      	ldr	r1, [pc, #332]	@ (800d624 <netif_add+0x180>)
 800d4d8:	4851      	ldr	r0, [pc, #324]	@ (800d620 <netif_add+0x17c>)
 800d4da:	f00a fbc1 	bl	8017c60 <iprintf>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	e096      	b.n	800d610 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d101      	bne.n	800d4ec <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d4e8:	4b4f      	ldr	r3, [pc, #316]	@ (800d628 <netif_add+0x184>)
 800d4ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d101      	bne.n	800d4f6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d4f2:	4b4d      	ldr	r3, [pc, #308]	@ (800d628 <netif_add+0x184>)
 800d4f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d101      	bne.n	800d500 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d4fc:	4b4a      	ldr	r3, [pc, #296]	@ (800d628 <netif_add+0x184>)
 800d4fe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2200      	movs	r2, #0
 800d504:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2200      	movs	r2, #0
 800d50a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2200      	movs	r2, #0
 800d510:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	4a45      	ldr	r2, [pc, #276]	@ (800d62c <netif_add+0x188>)
 800d516:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2200      	movs	r2, #0
 800d51c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2200      	movs	r2, #0
 800d522:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2200      	movs	r2, #0
 800d52a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	6a3a      	ldr	r2, [r7, #32]
 800d530:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d532:	4b3f      	ldr	r3, [pc, #252]	@ (800d630 <netif_add+0x18c>)
 800d534:	781a      	ldrb	r2, [r3, #0]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d540:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	68b9      	ldr	r1, [r7, #8]
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f000 f913 	bl	800d774 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	4798      	blx	r3
 800d554:	4603      	mov	r3, r0
 800d556:	2b00      	cmp	r3, #0
 800d558:	d001      	beq.n	800d55e <netif_add+0xba>
    return NULL;
 800d55a:	2300      	movs	r3, #0
 800d55c:	e058      	b.n	800d610 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d564:	2bff      	cmp	r3, #255	@ 0xff
 800d566:	d103      	bne.n	800d570 <netif_add+0xcc>
        netif->num = 0;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2200      	movs	r2, #0
 800d56c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800d570:	2300      	movs	r3, #0
 800d572:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d574:	4b2f      	ldr	r3, [pc, #188]	@ (800d634 <netif_add+0x190>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	617b      	str	r3, [r7, #20]
 800d57a:	e02b      	b.n	800d5d4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d57c:	697a      	ldr	r2, [r7, #20]
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	429a      	cmp	r2, r3
 800d582:	d106      	bne.n	800d592 <netif_add+0xee>
 800d584:	4b24      	ldr	r3, [pc, #144]	@ (800d618 <netif_add+0x174>)
 800d586:	f240 128b 	movw	r2, #395	@ 0x18b
 800d58a:	492b      	ldr	r1, [pc, #172]	@ (800d638 <netif_add+0x194>)
 800d58c:	4824      	ldr	r0, [pc, #144]	@ (800d620 <netif_add+0x17c>)
 800d58e:	f00a fb67 	bl	8017c60 <iprintf>
        num_netifs++;
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	3301      	adds	r3, #1
 800d596:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	2bff      	cmp	r3, #255	@ 0xff
 800d59c:	dd06      	ble.n	800d5ac <netif_add+0x108>
 800d59e:	4b1e      	ldr	r3, [pc, #120]	@ (800d618 <netif_add+0x174>)
 800d5a0:	f240 128d 	movw	r2, #397	@ 0x18d
 800d5a4:	4925      	ldr	r1, [pc, #148]	@ (800d63c <netif_add+0x198>)
 800d5a6:	481e      	ldr	r0, [pc, #120]	@ (800d620 <netif_add+0x17c>)
 800d5a8:	f00a fb5a 	bl	8017c60 <iprintf>
        if (netif2->num == netif->num) {
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d108      	bne.n	800d5ce <netif_add+0x12a>
          netif->num++;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	b2da      	uxtb	r2, r3
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800d5cc:	e005      	b.n	800d5da <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	617b      	str	r3, [r7, #20]
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d1d0      	bne.n	800d57c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d1be      	bne.n	800d55e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d5e6:	2bfe      	cmp	r3, #254	@ 0xfe
 800d5e8:	d103      	bne.n	800d5f2 <netif_add+0x14e>
    netif_num = 0;
 800d5ea:	4b11      	ldr	r3, [pc, #68]	@ (800d630 <netif_add+0x18c>)
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	701a      	strb	r2, [r3, #0]
 800d5f0:	e006      	b.n	800d600 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	b2da      	uxtb	r2, r3
 800d5fc:	4b0c      	ldr	r3, [pc, #48]	@ (800d630 <netif_add+0x18c>)
 800d5fe:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d600:	4b0c      	ldr	r3, [pc, #48]	@ (800d634 <netif_add+0x190>)
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d608:	4a0a      	ldr	r2, [pc, #40]	@ (800d634 <netif_add+0x190>)
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d60e:	68fb      	ldr	r3, [r7, #12]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3718      	adds	r7, #24
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	0801a168 	.word	0x0801a168
 800d61c:	0801a1fc 	.word	0x0801a1fc
 800d620:	0801a1b8 	.word	0x0801a1b8
 800d624:	0801a218 	.word	0x0801a218
 800d628:	0801c8e4 	.word	0x0801c8e4
 800d62c:	0800da4f 	.word	0x0800da4f
 800d630:	2000fff4 	.word	0x2000fff4
 800d634:	2000ffec 	.word	0x2000ffec
 800d638:	0801a23c 	.word	0x0801a23c
 800d63c:	0801a250 	.word	0x0801a250

0800d640 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d64a:	6839      	ldr	r1, [r7, #0]
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f002 fe7f 	bl	8010350 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d652:	6839      	ldr	r1, [r7, #0]
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f007 fd2b 	bl	80150b0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d65a:	bf00      	nop
 800d65c:	3708      	adds	r7, #8
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
	...

0800d664 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b086      	sub	sp, #24
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d106      	bne.n	800d684 <netif_do_set_ipaddr+0x20>
 800d676:	4b1d      	ldr	r3, [pc, #116]	@ (800d6ec <netif_do_set_ipaddr+0x88>)
 800d678:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800d67c:	491c      	ldr	r1, [pc, #112]	@ (800d6f0 <netif_do_set_ipaddr+0x8c>)
 800d67e:	481d      	ldr	r0, [pc, #116]	@ (800d6f4 <netif_do_set_ipaddr+0x90>)
 800d680:	f00a faee 	bl	8017c60 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d106      	bne.n	800d698 <netif_do_set_ipaddr+0x34>
 800d68a:	4b18      	ldr	r3, [pc, #96]	@ (800d6ec <netif_do_set_ipaddr+0x88>)
 800d68c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800d690:	4917      	ldr	r1, [pc, #92]	@ (800d6f0 <netif_do_set_ipaddr+0x8c>)
 800d692:	4818      	ldr	r0, [pc, #96]	@ (800d6f4 <netif_do_set_ipaddr+0x90>)
 800d694:	f00a fae4 	bl	8017c60 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	3304      	adds	r3, #4
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d01c      	beq.n	800d6e0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	3304      	adds	r3, #4
 800d6b0:	681a      	ldr	r2, [r3, #0]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d6b6:	f107 0314 	add.w	r3, r7, #20
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f7ff ffbf 	bl	800d640 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d002      	beq.n	800d6ce <netif_do_set_ipaddr+0x6a>
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	e000      	b.n	800d6d0 <netif_do_set_ipaddr+0x6c>
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	68fa      	ldr	r2, [r7, #12]
 800d6d2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d6d4:	2101      	movs	r1, #1
 800d6d6:	68f8      	ldr	r0, [r7, #12]
 800d6d8:	f000 f8d2 	bl	800d880 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e000      	b.n	800d6e2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d6e0:	2300      	movs	r3, #0
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3718      	adds	r7, #24
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	0801a168 	.word	0x0801a168
 800d6f0:	0801a280 	.word	0x0801a280
 800d6f4:	0801a1b8 	.word	0x0801a1b8

0800d6f8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	60b9      	str	r1, [r7, #8]
 800d702:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	3308      	adds	r3, #8
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d00a      	beq.n	800d728 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d002      	beq.n	800d71e <netif_do_set_netmask+0x26>
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	e000      	b.n	800d720 <netif_do_set_netmask+0x28>
 800d71e:	2300      	movs	r3, #0
 800d720:	68fa      	ldr	r2, [r7, #12]
 800d722:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d724:	2301      	movs	r3, #1
 800d726:	e000      	b.n	800d72a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3714      	adds	r7, #20
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr

0800d736 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d736:	b480      	push	{r7}
 800d738:	b085      	sub	sp, #20
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	60f8      	str	r0, [r7, #12]
 800d73e:	60b9      	str	r1, [r7, #8]
 800d740:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	330c      	adds	r3, #12
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d00a      	beq.n	800d766 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d002      	beq.n	800d75c <netif_do_set_gw+0x26>
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	e000      	b.n	800d75e <netif_do_set_gw+0x28>
 800d75c:	2300      	movs	r3, #0
 800d75e:	68fa      	ldr	r2, [r7, #12]
 800d760:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d762:	2301      	movs	r3, #1
 800d764:	e000      	b.n	800d768 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3714      	adds	r7, #20
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b088      	sub	sp, #32
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	607a      	str	r2, [r7, #4]
 800d780:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d782:	2300      	movs	r3, #0
 800d784:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d786:	2300      	movs	r3, #0
 800d788:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d101      	bne.n	800d794 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d790:	4b1c      	ldr	r3, [pc, #112]	@ (800d804 <netif_set_addr+0x90>)
 800d792:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d101      	bne.n	800d79e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d79a:	4b1a      	ldr	r3, [pc, #104]	@ (800d804 <netif_set_addr+0x90>)
 800d79c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d101      	bne.n	800d7a8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d7a4:	4b17      	ldr	r3, [pc, #92]	@ (800d804 <netif_set_addr+0x90>)
 800d7a6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d003      	beq.n	800d7b6 <netif_set_addr+0x42>
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d101      	bne.n	800d7ba <netif_set_addr+0x46>
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	e000      	b.n	800d7bc <netif_set_addr+0x48>
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d006      	beq.n	800d7d2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d7c4:	f107 0310 	add.w	r3, r7, #16
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	68b9      	ldr	r1, [r7, #8]
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	f7ff ff49 	bl	800d664 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d7d2:	69fa      	ldr	r2, [r7, #28]
 800d7d4:	6879      	ldr	r1, [r7, #4]
 800d7d6:	68f8      	ldr	r0, [r7, #12]
 800d7d8:	f7ff ff8e 	bl	800d6f8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d7dc:	69ba      	ldr	r2, [r7, #24]
 800d7de:	6839      	ldr	r1, [r7, #0]
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f7ff ffa8 	bl	800d736 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d106      	bne.n	800d7fa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d7ec:	f107 0310 	add.w	r3, r7, #16
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	68b9      	ldr	r1, [r7, #8]
 800d7f4:	68f8      	ldr	r0, [r7, #12]
 800d7f6:	f7ff ff35 	bl	800d664 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d7fa:	bf00      	nop
 800d7fc:	3720      	adds	r7, #32
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	0801c8e4 	.word	0x0801c8e4

0800d808 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d810:	4a04      	ldr	r2, [pc, #16]	@ (800d824 <netif_set_default+0x1c>)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d816:	bf00      	nop
 800d818:	370c      	adds	r7, #12
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop
 800d824:	2000fff0 	.word	0x2000fff0

0800d828 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d107      	bne.n	800d846 <netif_set_up+0x1e>
 800d836:	4b0f      	ldr	r3, [pc, #60]	@ (800d874 <netif_set_up+0x4c>)
 800d838:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800d83c:	490e      	ldr	r1, [pc, #56]	@ (800d878 <netif_set_up+0x50>)
 800d83e:	480f      	ldr	r0, [pc, #60]	@ (800d87c <netif_set_up+0x54>)
 800d840:	f00a fa0e 	bl	8017c60 <iprintf>
 800d844:	e013      	b.n	800d86e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d84c:	f003 0301 	and.w	r3, r3, #1
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10c      	bne.n	800d86e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d85a:	f043 0301 	orr.w	r3, r3, #1
 800d85e:	b2da      	uxtb	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d866:	2103      	movs	r1, #3
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 f809 	bl	800d880 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d86e:	3708      	adds	r7, #8
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	0801a168 	.word	0x0801a168
 800d878:	0801a2f0 	.word	0x0801a2f0
 800d87c:	0801a1b8 	.word	0x0801a1b8

0800d880 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	460b      	mov	r3, r1
 800d88a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d106      	bne.n	800d8a0 <netif_issue_reports+0x20>
 800d892:	4b18      	ldr	r3, [pc, #96]	@ (800d8f4 <netif_issue_reports+0x74>)
 800d894:	f240 326d 	movw	r2, #877	@ 0x36d
 800d898:	4917      	ldr	r1, [pc, #92]	@ (800d8f8 <netif_issue_reports+0x78>)
 800d89a:	4818      	ldr	r0, [pc, #96]	@ (800d8fc <netif_issue_reports+0x7c>)
 800d89c:	f00a f9e0 	bl	8017c60 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d8a6:	f003 0304 	and.w	r3, r3, #4
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d01e      	beq.n	800d8ec <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d8b4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d017      	beq.n	800d8ec <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d8bc:	78fb      	ldrb	r3, [r7, #3]
 800d8be:	f003 0301 	and.w	r3, r3, #1
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d013      	beq.n	800d8ee <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	3304      	adds	r3, #4
 800d8ca:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00e      	beq.n	800d8ee <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d8d6:	f003 0308 	and.w	r3, r3, #8
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d007      	beq.n	800d8ee <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	3304      	adds	r3, #4
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f008 fb4d 	bl	8015f84 <etharp_request>
 800d8ea:	e000      	b.n	800d8ee <netif_issue_reports+0x6e>
    return;
 800d8ec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d8ee:	3708      	adds	r7, #8
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	0801a168 	.word	0x0801a168
 800d8f8:	0801a30c 	.word	0x0801a30c
 800d8fc:	0801a1b8 	.word	0x0801a1b8

0800d900 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d107      	bne.n	800d91e <netif_set_down+0x1e>
 800d90e:	4b12      	ldr	r3, [pc, #72]	@ (800d958 <netif_set_down+0x58>)
 800d910:	f240 329b 	movw	r2, #923	@ 0x39b
 800d914:	4911      	ldr	r1, [pc, #68]	@ (800d95c <netif_set_down+0x5c>)
 800d916:	4812      	ldr	r0, [pc, #72]	@ (800d960 <netif_set_down+0x60>)
 800d918:	f00a f9a2 	bl	8017c60 <iprintf>
 800d91c:	e019      	b.n	800d952 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d924:	f003 0301 	and.w	r3, r3, #1
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d012      	beq.n	800d952 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d932:	f023 0301 	bic.w	r3, r3, #1
 800d936:	b2da      	uxtb	r2, r3
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d944:	f003 0308 	and.w	r3, r3, #8
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d002      	beq.n	800d952 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f007 fed7 	bl	8015700 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	0801a168 	.word	0x0801a168
 800d95c:	0801a330 	.word	0x0801a330
 800d960:	0801a1b8 	.word	0x0801a1b8

0800d964 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d107      	bne.n	800d982 <netif_set_link_up+0x1e>
 800d972:	4b13      	ldr	r3, [pc, #76]	@ (800d9c0 <netif_set_link_up+0x5c>)
 800d974:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800d978:	4912      	ldr	r1, [pc, #72]	@ (800d9c4 <netif_set_link_up+0x60>)
 800d97a:	4813      	ldr	r0, [pc, #76]	@ (800d9c8 <netif_set_link_up+0x64>)
 800d97c:	f00a f970 	bl	8017c60 <iprintf>
 800d980:	e01b      	b.n	800d9ba <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d988:	f003 0304 	and.w	r3, r3, #4
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d114      	bne.n	800d9ba <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d996:	f043 0304 	orr.w	r3, r3, #4
 800d99a:	b2da      	uxtb	r2, r3
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d9a2:	2103      	movs	r1, #3
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f7ff ff6b 	bl	800d880 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	69db      	ldr	r3, [r3, #28]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d003      	beq.n	800d9ba <netif_set_link_up+0x56>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	69db      	ldr	r3, [r3, #28]
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d9ba:	3708      	adds	r7, #8
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	0801a168 	.word	0x0801a168
 800d9c4:	0801a350 	.word	0x0801a350
 800d9c8:	0801a1b8 	.word	0x0801a1b8

0800d9cc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d107      	bne.n	800d9ea <netif_set_link_down+0x1e>
 800d9da:	4b11      	ldr	r3, [pc, #68]	@ (800da20 <netif_set_link_down+0x54>)
 800d9dc:	f240 4206 	movw	r2, #1030	@ 0x406
 800d9e0:	4910      	ldr	r1, [pc, #64]	@ (800da24 <netif_set_link_down+0x58>)
 800d9e2:	4811      	ldr	r0, [pc, #68]	@ (800da28 <netif_set_link_down+0x5c>)
 800d9e4:	f00a f93c 	bl	8017c60 <iprintf>
 800d9e8:	e017      	b.n	800da1a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d9f0:	f003 0304 	and.w	r3, r3, #4
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d010      	beq.n	800da1a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d9fe:	f023 0304 	bic.w	r3, r3, #4
 800da02:	b2da      	uxtb	r2, r3
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	69db      	ldr	r3, [r3, #28]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d003      	beq.n	800da1a <netif_set_link_down+0x4e>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	69db      	ldr	r3, [r3, #28]
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	0801a168 	.word	0x0801a168
 800da24:	0801a374 	.word	0x0801a374
 800da28:	0801a1b8 	.word	0x0801a1b8

0800da2c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	683a      	ldr	r2, [r7, #0]
 800da40:	61da      	str	r2, [r3, #28]
  }
}
 800da42:	bf00      	nop
 800da44:	370c      	adds	r7, #12
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr

0800da4e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800da4e:	b480      	push	{r7}
 800da50:	b085      	sub	sp, #20
 800da52:	af00      	add	r7, sp, #0
 800da54:	60f8      	str	r0, [r7, #12]
 800da56:	60b9      	str	r1, [r7, #8]
 800da58:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800da5a:	f06f 030b 	mvn.w	r3, #11
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3714      	adds	r7, #20
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
	...

0800da6c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b085      	sub	sp, #20
 800da70:	af00      	add	r7, sp, #0
 800da72:	4603      	mov	r3, r0
 800da74:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800da76:	79fb      	ldrb	r3, [r7, #7]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d013      	beq.n	800daa4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800da7c:	4b0d      	ldr	r3, [pc, #52]	@ (800dab4 <netif_get_by_index+0x48>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	60fb      	str	r3, [r7, #12]
 800da82:	e00c      	b.n	800da9e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da8a:	3301      	adds	r3, #1
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	79fa      	ldrb	r2, [r7, #7]
 800da90:	429a      	cmp	r2, r3
 800da92:	d101      	bne.n	800da98 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	e006      	b.n	800daa6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	60fb      	str	r3, [r7, #12]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d1ef      	bne.n	800da84 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800daa4:	2300      	movs	r3, #0
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	2000ffec 	.word	0x2000ffec

0800dab8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800dabe:	f009 ffb1 	bl	8017a24 <sys_arch_protect>
 800dac2:	6038      	str	r0, [r7, #0]
 800dac4:	4b0d      	ldr	r3, [pc, #52]	@ (800dafc <pbuf_free_ooseq+0x44>)
 800dac6:	2200      	movs	r2, #0
 800dac8:	701a      	strb	r2, [r3, #0]
 800daca:	6838      	ldr	r0, [r7, #0]
 800dacc:	f009 ffb8 	bl	8017a40 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800dad0:	4b0b      	ldr	r3, [pc, #44]	@ (800db00 <pbuf_free_ooseq+0x48>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	607b      	str	r3, [r7, #4]
 800dad6:	e00a      	b.n	800daee <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d003      	beq.n	800dae8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f002 fc73 	bl	80103cc <tcp_free_ooseq>
      return;
 800dae6:	e005      	b.n	800daf4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	607b      	str	r3, [r7, #4]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d1f1      	bne.n	800dad8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800daf4:	3708      	adds	r7, #8
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	2000fff5 	.word	0x2000fff5
 800db00:	20010004 	.word	0x20010004

0800db04 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800db0c:	f7ff ffd4 	bl	800dab8 <pbuf_free_ooseq>
}
 800db10:	bf00      	nop
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800db1e:	f009 ff81 	bl	8017a24 <sys_arch_protect>
 800db22:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800db24:	4b0f      	ldr	r3, [pc, #60]	@ (800db64 <pbuf_pool_is_empty+0x4c>)
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800db2a:	4b0e      	ldr	r3, [pc, #56]	@ (800db64 <pbuf_pool_is_empty+0x4c>)
 800db2c:	2201      	movs	r2, #1
 800db2e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f009 ff85 	bl	8017a40 <sys_arch_unprotect>

  if (!queued) {
 800db36:	78fb      	ldrb	r3, [r7, #3]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d10f      	bne.n	800db5c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800db3c:	2100      	movs	r1, #0
 800db3e:	480a      	ldr	r0, [pc, #40]	@ (800db68 <pbuf_pool_is_empty+0x50>)
 800db40:	f7fe fe90 	bl	800c864 <tcpip_try_callback>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d008      	beq.n	800db5c <pbuf_pool_is_empty+0x44>
 800db4a:	f009 ff6b 	bl	8017a24 <sys_arch_protect>
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	4b04      	ldr	r3, [pc, #16]	@ (800db64 <pbuf_pool_is_empty+0x4c>)
 800db52:	2200      	movs	r2, #0
 800db54:	701a      	strb	r2, [r3, #0]
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f009 ff72 	bl	8017a40 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800db5c:	bf00      	nop
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	2000fff5 	.word	0x2000fff5
 800db68:	0800db05 	.word	0x0800db05

0800db6c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b085      	sub	sp, #20
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	4611      	mov	r1, r2
 800db78:	461a      	mov	r2, r3
 800db7a:	460b      	mov	r3, r1
 800db7c:	80fb      	strh	r3, [r7, #6]
 800db7e:	4613      	mov	r3, r2
 800db80:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2200      	movs	r2, #0
 800db86:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	68ba      	ldr	r2, [r7, #8]
 800db8c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	88fa      	ldrh	r2, [r7, #6]
 800db92:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	88ba      	ldrh	r2, [r7, #4]
 800db98:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800db9a:	8b3b      	ldrh	r3, [r7, #24]
 800db9c:	b2da      	uxtb	r2, r3
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	7f3a      	ldrb	r2, [r7, #28]
 800dba6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2201      	movs	r2, #1
 800dbac:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	73da      	strb	r2, [r3, #15]
}
 800dbb4:	bf00      	nop
 800dbb6:	3714      	adds	r7, #20
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b08c      	sub	sp, #48	@ 0x30
 800dbc4:	af02      	add	r7, sp, #8
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	71fb      	strb	r3, [r7, #7]
 800dbca:	460b      	mov	r3, r1
 800dbcc:	80bb      	strh	r3, [r7, #4]
 800dbce:	4613      	mov	r3, r2
 800dbd0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800dbd2:	79fb      	ldrb	r3, [r7, #7]
 800dbd4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800dbd6:	887b      	ldrh	r3, [r7, #2]
 800dbd8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800dbdc:	d07f      	beq.n	800dcde <pbuf_alloc+0x11e>
 800dbde:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800dbe2:	f300 80c8 	bgt.w	800dd76 <pbuf_alloc+0x1b6>
 800dbe6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800dbea:	d010      	beq.n	800dc0e <pbuf_alloc+0x4e>
 800dbec:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800dbf0:	f300 80c1 	bgt.w	800dd76 <pbuf_alloc+0x1b6>
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d002      	beq.n	800dbfe <pbuf_alloc+0x3e>
 800dbf8:	2b41      	cmp	r3, #65	@ 0x41
 800dbfa:	f040 80bc 	bne.w	800dd76 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800dbfe:	887a      	ldrh	r2, [r7, #2]
 800dc00:	88bb      	ldrh	r3, [r7, #4]
 800dc02:	4619      	mov	r1, r3
 800dc04:	2000      	movs	r0, #0
 800dc06:	f000 f8d1 	bl	800ddac <pbuf_alloc_reference>
 800dc0a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800dc0c:	e0bd      	b.n	800dd8a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800dc12:	2300      	movs	r3, #0
 800dc14:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800dc16:	88bb      	ldrh	r3, [r7, #4]
 800dc18:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800dc1a:	200c      	movs	r0, #12
 800dc1c:	f7ff fb9a 	bl	800d354 <memp_malloc>
 800dc20:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d109      	bne.n	800dc3c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800dc28:	f7ff ff76 	bl	800db18 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d002      	beq.n	800dc38 <pbuf_alloc+0x78>
            pbuf_free(p);
 800dc32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dc34:	f000 faa8 	bl	800e188 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	e0a7      	b.n	800dd8c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dc3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc3e:	3303      	adds	r3, #3
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	f023 0303 	bic.w	r3, r3, #3
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	8b7a      	ldrh	r2, [r7, #26]
 800dc50:	4293      	cmp	r3, r2
 800dc52:	bf28      	it	cs
 800dc54:	4613      	movcs	r3, r2
 800dc56:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dc58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc5a:	3310      	adds	r3, #16
 800dc5c:	693a      	ldr	r2, [r7, #16]
 800dc5e:	4413      	add	r3, r2
 800dc60:	3303      	adds	r3, #3
 800dc62:	f023 0303 	bic.w	r3, r3, #3
 800dc66:	4618      	mov	r0, r3
 800dc68:	89f9      	ldrh	r1, [r7, #14]
 800dc6a:	8b7a      	ldrh	r2, [r7, #26]
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	9301      	str	r3, [sp, #4]
 800dc70:	887b      	ldrh	r3, [r7, #2]
 800dc72:	9300      	str	r3, [sp, #0]
 800dc74:	460b      	mov	r3, r1
 800dc76:	4601      	mov	r1, r0
 800dc78:	6938      	ldr	r0, [r7, #16]
 800dc7a:	f7ff ff77 	bl	800db6c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	f003 0303 	and.w	r3, r3, #3
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d006      	beq.n	800dc98 <pbuf_alloc+0xd8>
 800dc8a:	4b42      	ldr	r3, [pc, #264]	@ (800dd94 <pbuf_alloc+0x1d4>)
 800dc8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dc90:	4941      	ldr	r1, [pc, #260]	@ (800dd98 <pbuf_alloc+0x1d8>)
 800dc92:	4842      	ldr	r0, [pc, #264]	@ (800dd9c <pbuf_alloc+0x1dc>)
 800dc94:	f009 ffe4 	bl	8017c60 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800dc98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc9a:	3303      	adds	r3, #3
 800dc9c:	f023 0303 	bic.w	r3, r3, #3
 800dca0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800dca4:	d106      	bne.n	800dcb4 <pbuf_alloc+0xf4>
 800dca6:	4b3b      	ldr	r3, [pc, #236]	@ (800dd94 <pbuf_alloc+0x1d4>)
 800dca8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800dcac:	493c      	ldr	r1, [pc, #240]	@ (800dda0 <pbuf_alloc+0x1e0>)
 800dcae:	483b      	ldr	r0, [pc, #236]	@ (800dd9c <pbuf_alloc+0x1dc>)
 800dcb0:	f009 ffd6 	bl	8017c60 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d102      	bne.n	800dcc0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	627b      	str	r3, [r7, #36]	@ 0x24
 800dcbe:	e002      	b.n	800dcc6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	693a      	ldr	r2, [r7, #16]
 800dcc4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800dcca:	8b7a      	ldrh	r2, [r7, #26]
 800dccc:	89fb      	ldrh	r3, [r7, #14]
 800dcce:	1ad3      	subs	r3, r2, r3
 800dcd0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800dcd6:	8b7b      	ldrh	r3, [r7, #26]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d19e      	bne.n	800dc1a <pbuf_alloc+0x5a>
      break;
 800dcdc:	e055      	b.n	800dd8a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800dcde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dce0:	3303      	adds	r3, #3
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	f023 0303 	bic.w	r3, r3, #3
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	88bb      	ldrh	r3, [r7, #4]
 800dcec:	3303      	adds	r3, #3
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	f023 0303 	bic.w	r3, r3, #3
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	4413      	add	r3, r2
 800dcf8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800dcfa:	8b3b      	ldrh	r3, [r7, #24]
 800dcfc:	3310      	adds	r3, #16
 800dcfe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dd00:	8b3a      	ldrh	r2, [r7, #24]
 800dd02:	88bb      	ldrh	r3, [r7, #4]
 800dd04:	3303      	adds	r3, #3
 800dd06:	f023 0303 	bic.w	r3, r3, #3
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d306      	bcc.n	800dd1c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800dd0e:	8afa      	ldrh	r2, [r7, #22]
 800dd10:	88bb      	ldrh	r3, [r7, #4]
 800dd12:	3303      	adds	r3, #3
 800dd14:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d201      	bcs.n	800dd20 <pbuf_alloc+0x160>
        return NULL;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	e035      	b.n	800dd8c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800dd20:	8afb      	ldrh	r3, [r7, #22]
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7ff f972 	bl	800d00c <mem_malloc>
 800dd28:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d101      	bne.n	800dd34 <pbuf_alloc+0x174>
        return NULL;
 800dd30:	2300      	movs	r3, #0
 800dd32:	e02b      	b.n	800dd8c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800dd34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dd36:	3310      	adds	r3, #16
 800dd38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd3a:	4413      	add	r3, r2
 800dd3c:	3303      	adds	r3, #3
 800dd3e:	f023 0303 	bic.w	r3, r3, #3
 800dd42:	4618      	mov	r0, r3
 800dd44:	88b9      	ldrh	r1, [r7, #4]
 800dd46:	88ba      	ldrh	r2, [r7, #4]
 800dd48:	2300      	movs	r3, #0
 800dd4a:	9301      	str	r3, [sp, #4]
 800dd4c:	887b      	ldrh	r3, [r7, #2]
 800dd4e:	9300      	str	r3, [sp, #0]
 800dd50:	460b      	mov	r3, r1
 800dd52:	4601      	mov	r1, r0
 800dd54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dd56:	f7ff ff09 	bl	800db6c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800dd5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	f003 0303 	and.w	r3, r3, #3
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d010      	beq.n	800dd88 <pbuf_alloc+0x1c8>
 800dd66:	4b0b      	ldr	r3, [pc, #44]	@ (800dd94 <pbuf_alloc+0x1d4>)
 800dd68:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800dd6c:	490d      	ldr	r1, [pc, #52]	@ (800dda4 <pbuf_alloc+0x1e4>)
 800dd6e:	480b      	ldr	r0, [pc, #44]	@ (800dd9c <pbuf_alloc+0x1dc>)
 800dd70:	f009 ff76 	bl	8017c60 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800dd74:	e008      	b.n	800dd88 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800dd76:	4b07      	ldr	r3, [pc, #28]	@ (800dd94 <pbuf_alloc+0x1d4>)
 800dd78:	f240 1227 	movw	r2, #295	@ 0x127
 800dd7c:	490a      	ldr	r1, [pc, #40]	@ (800dda8 <pbuf_alloc+0x1e8>)
 800dd7e:	4807      	ldr	r0, [pc, #28]	@ (800dd9c <pbuf_alloc+0x1dc>)
 800dd80:	f009 ff6e 	bl	8017c60 <iprintf>
      return NULL;
 800dd84:	2300      	movs	r3, #0
 800dd86:	e001      	b.n	800dd8c <pbuf_alloc+0x1cc>
      break;
 800dd88:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800dd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3728      	adds	r7, #40	@ 0x28
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	0801a398 	.word	0x0801a398
 800dd98:	0801a3c8 	.word	0x0801a3c8
 800dd9c:	0801a3f8 	.word	0x0801a3f8
 800dda0:	0801a420 	.word	0x0801a420
 800dda4:	0801a454 	.word	0x0801a454
 800dda8:	0801a480 	.word	0x0801a480

0800ddac <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b086      	sub	sp, #24
 800ddb0:	af02      	add	r7, sp, #8
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	807b      	strh	r3, [r7, #2]
 800ddb8:	4613      	mov	r3, r2
 800ddba:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ddbc:	883b      	ldrh	r3, [r7, #0]
 800ddbe:	2b41      	cmp	r3, #65	@ 0x41
 800ddc0:	d009      	beq.n	800ddd6 <pbuf_alloc_reference+0x2a>
 800ddc2:	883b      	ldrh	r3, [r7, #0]
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d006      	beq.n	800ddd6 <pbuf_alloc_reference+0x2a>
 800ddc8:	4b0f      	ldr	r3, [pc, #60]	@ (800de08 <pbuf_alloc_reference+0x5c>)
 800ddca:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800ddce:	490f      	ldr	r1, [pc, #60]	@ (800de0c <pbuf_alloc_reference+0x60>)
 800ddd0:	480f      	ldr	r0, [pc, #60]	@ (800de10 <pbuf_alloc_reference+0x64>)
 800ddd2:	f009 ff45 	bl	8017c60 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ddd6:	200b      	movs	r0, #11
 800ddd8:	f7ff fabc 	bl	800d354 <memp_malloc>
 800dddc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d101      	bne.n	800dde8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800dde4:	2300      	movs	r3, #0
 800dde6:	e00b      	b.n	800de00 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800dde8:	8879      	ldrh	r1, [r7, #2]
 800ddea:	887a      	ldrh	r2, [r7, #2]
 800ddec:	2300      	movs	r3, #0
 800ddee:	9301      	str	r3, [sp, #4]
 800ddf0:	883b      	ldrh	r3, [r7, #0]
 800ddf2:	9300      	str	r3, [sp, #0]
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	6879      	ldr	r1, [r7, #4]
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f7ff feb7 	bl	800db6c <pbuf_init_alloced_pbuf>
  return p;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
}
 800de00:	4618      	mov	r0, r3
 800de02:	3710      	adds	r7, #16
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	0801a398 	.word	0x0801a398
 800de0c:	0801a49c 	.word	0x0801a49c
 800de10:	0801a3f8 	.word	0x0801a3f8

0800de14 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b088      	sub	sp, #32
 800de18:	af02      	add	r7, sp, #8
 800de1a:	607b      	str	r3, [r7, #4]
 800de1c:	4603      	mov	r3, r0
 800de1e:	73fb      	strb	r3, [r7, #15]
 800de20:	460b      	mov	r3, r1
 800de22:	81bb      	strh	r3, [r7, #12]
 800de24:	4613      	mov	r3, r2
 800de26:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800de28:	7bfb      	ldrb	r3, [r7, #15]
 800de2a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800de2c:	8a7b      	ldrh	r3, [r7, #18]
 800de2e:	3303      	adds	r3, #3
 800de30:	f023 0203 	bic.w	r2, r3, #3
 800de34:	89bb      	ldrh	r3, [r7, #12]
 800de36:	441a      	add	r2, r3
 800de38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d901      	bls.n	800de42 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800de3e:	2300      	movs	r3, #0
 800de40:	e018      	b.n	800de74 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800de42:	6a3b      	ldr	r3, [r7, #32]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d007      	beq.n	800de58 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800de48:	8a7b      	ldrh	r3, [r7, #18]
 800de4a:	3303      	adds	r3, #3
 800de4c:	f023 0303 	bic.w	r3, r3, #3
 800de50:	6a3a      	ldr	r2, [r7, #32]
 800de52:	4413      	add	r3, r2
 800de54:	617b      	str	r3, [r7, #20]
 800de56:	e001      	b.n	800de5c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800de58:	2300      	movs	r3, #0
 800de5a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	89b9      	ldrh	r1, [r7, #12]
 800de60:	89ba      	ldrh	r2, [r7, #12]
 800de62:	2302      	movs	r3, #2
 800de64:	9301      	str	r3, [sp, #4]
 800de66:	897b      	ldrh	r3, [r7, #10]
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	460b      	mov	r3, r1
 800de6c:	6979      	ldr	r1, [r7, #20]
 800de6e:	f7ff fe7d 	bl	800db6c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800de72:	687b      	ldr	r3, [r7, #4]
}
 800de74:	4618      	mov	r0, r3
 800de76:	3718      	adds	r7, #24
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b084      	sub	sp, #16
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	460b      	mov	r3, r1
 800de86:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d106      	bne.n	800de9c <pbuf_realloc+0x20>
 800de8e:	4b3a      	ldr	r3, [pc, #232]	@ (800df78 <pbuf_realloc+0xfc>)
 800de90:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800de94:	4939      	ldr	r1, [pc, #228]	@ (800df7c <pbuf_realloc+0x100>)
 800de96:	483a      	ldr	r0, [pc, #232]	@ (800df80 <pbuf_realloc+0x104>)
 800de98:	f009 fee2 	bl	8017c60 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	891b      	ldrh	r3, [r3, #8]
 800dea0:	887a      	ldrh	r2, [r7, #2]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d263      	bcs.n	800df6e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	891a      	ldrh	r2, [r3, #8]
 800deaa:	887b      	ldrh	r3, [r7, #2]
 800deac:	1ad3      	subs	r3, r2, r3
 800deae:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800deb0:	887b      	ldrh	r3, [r7, #2]
 800deb2:	817b      	strh	r3, [r7, #10]
  q = p;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800deb8:	e018      	b.n	800deec <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	895b      	ldrh	r3, [r3, #10]
 800debe:	897a      	ldrh	r2, [r7, #10]
 800dec0:	1ad3      	subs	r3, r2, r3
 800dec2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	891a      	ldrh	r2, [r3, #8]
 800dec8:	893b      	ldrh	r3, [r7, #8]
 800deca:	1ad3      	subs	r3, r2, r3
 800decc:	b29a      	uxth	r2, r3
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d106      	bne.n	800deec <pbuf_realloc+0x70>
 800dede:	4b26      	ldr	r3, [pc, #152]	@ (800df78 <pbuf_realloc+0xfc>)
 800dee0:	f240 12af 	movw	r2, #431	@ 0x1af
 800dee4:	4927      	ldr	r1, [pc, #156]	@ (800df84 <pbuf_realloc+0x108>)
 800dee6:	4826      	ldr	r0, [pc, #152]	@ (800df80 <pbuf_realloc+0x104>)
 800dee8:	f009 feba 	bl	8017c60 <iprintf>
  while (rem_len > q->len) {
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	895b      	ldrh	r3, [r3, #10]
 800def0:	897a      	ldrh	r2, [r7, #10]
 800def2:	429a      	cmp	r2, r3
 800def4:	d8e1      	bhi.n	800deba <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	7b1b      	ldrb	r3, [r3, #12]
 800defa:	f003 030f 	and.w	r3, r3, #15
 800defe:	2b00      	cmp	r3, #0
 800df00:	d121      	bne.n	800df46 <pbuf_realloc+0xca>
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	895b      	ldrh	r3, [r3, #10]
 800df06:	897a      	ldrh	r2, [r7, #10]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d01c      	beq.n	800df46 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	7b5b      	ldrb	r3, [r3, #13]
 800df10:	f003 0302 	and.w	r3, r3, #2
 800df14:	2b00      	cmp	r3, #0
 800df16:	d116      	bne.n	800df46 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	685a      	ldr	r2, [r3, #4]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	1ad3      	subs	r3, r2, r3
 800df20:	b29a      	uxth	r2, r3
 800df22:	897b      	ldrh	r3, [r7, #10]
 800df24:	4413      	add	r3, r2
 800df26:	b29b      	uxth	r3, r3
 800df28:	4619      	mov	r1, r3
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f7fe ff64 	bl	800cdf8 <mem_trim>
 800df30:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d106      	bne.n	800df46 <pbuf_realloc+0xca>
 800df38:	4b0f      	ldr	r3, [pc, #60]	@ (800df78 <pbuf_realloc+0xfc>)
 800df3a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800df3e:	4912      	ldr	r1, [pc, #72]	@ (800df88 <pbuf_realloc+0x10c>)
 800df40:	480f      	ldr	r0, [pc, #60]	@ (800df80 <pbuf_realloc+0x104>)
 800df42:	f009 fe8d 	bl	8017c60 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	897a      	ldrh	r2, [r7, #10]
 800df4a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	895a      	ldrh	r2, [r3, #10]
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d004      	beq.n	800df66 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4618      	mov	r0, r3
 800df62:	f000 f911 	bl	800e188 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2200      	movs	r2, #0
 800df6a:	601a      	str	r2, [r3, #0]
 800df6c:	e000      	b.n	800df70 <pbuf_realloc+0xf4>
    return;
 800df6e:	bf00      	nop

}
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	0801a398 	.word	0x0801a398
 800df7c:	0801a4b0 	.word	0x0801a4b0
 800df80:	0801a3f8 	.word	0x0801a3f8
 800df84:	0801a4c8 	.word	0x0801a4c8
 800df88:	0801a4e0 	.word	0x0801a4e0

0800df8c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b086      	sub	sp, #24
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	4613      	mov	r3, r2
 800df98:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d106      	bne.n	800dfae <pbuf_add_header_impl+0x22>
 800dfa0:	4b2b      	ldr	r3, [pc, #172]	@ (800e050 <pbuf_add_header_impl+0xc4>)
 800dfa2:	f240 12df 	movw	r2, #479	@ 0x1df
 800dfa6:	492b      	ldr	r1, [pc, #172]	@ (800e054 <pbuf_add_header_impl+0xc8>)
 800dfa8:	482b      	ldr	r0, [pc, #172]	@ (800e058 <pbuf_add_header_impl+0xcc>)
 800dfaa:	f009 fe59 	bl	8017c60 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d003      	beq.n	800dfbc <pbuf_add_header_impl+0x30>
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dfba:	d301      	bcc.n	800dfc0 <pbuf_add_header_impl+0x34>
    return 1;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e043      	b.n	800e048 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d101      	bne.n	800dfca <pbuf_add_header_impl+0x3e>
    return 0;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	e03e      	b.n	800e048 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	891a      	ldrh	r2, [r3, #8]
 800dfd2:	8a7b      	ldrh	r3, [r7, #18]
 800dfd4:	4413      	add	r3, r2
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	8a7a      	ldrh	r2, [r7, #18]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d901      	bls.n	800dfe2 <pbuf_add_header_impl+0x56>
    return 1;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e032      	b.n	800e048 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	7b1b      	ldrb	r3, [r3, #12]
 800dfe6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dfe8:	8a3b      	ldrh	r3, [r7, #16]
 800dfea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d00c      	beq.n	800e00c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	685a      	ldr	r2, [r3, #4]
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	425b      	negs	r3, r3
 800dffa:	4413      	add	r3, r2
 800dffc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	3310      	adds	r3, #16
 800e002:	697a      	ldr	r2, [r7, #20]
 800e004:	429a      	cmp	r2, r3
 800e006:	d20d      	bcs.n	800e024 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e008:	2301      	movs	r3, #1
 800e00a:	e01d      	b.n	800e048 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e00c:	79fb      	ldrb	r3, [r7, #7]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d006      	beq.n	800e020 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	685a      	ldr	r2, [r3, #4]
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	425b      	negs	r3, r3
 800e01a:	4413      	add	r3, r2
 800e01c:	617b      	str	r3, [r7, #20]
 800e01e:	e001      	b.n	800e024 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e020:	2301      	movs	r3, #1
 800e022:	e011      	b.n	800e048 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	697a      	ldr	r2, [r7, #20]
 800e028:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	895a      	ldrh	r2, [r3, #10]
 800e02e:	8a7b      	ldrh	r3, [r7, #18]
 800e030:	4413      	add	r3, r2
 800e032:	b29a      	uxth	r2, r3
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	891a      	ldrh	r2, [r3, #8]
 800e03c:	8a7b      	ldrh	r3, [r7, #18]
 800e03e:	4413      	add	r3, r2
 800e040:	b29a      	uxth	r2, r3
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	811a      	strh	r2, [r3, #8]


  return 0;
 800e046:	2300      	movs	r3, #0
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3718      	adds	r7, #24
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	0801a398 	.word	0x0801a398
 800e054:	0801a4fc 	.word	0x0801a4fc
 800e058:	0801a3f8 	.word	0x0801a3f8

0800e05c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e066:	2200      	movs	r2, #0
 800e068:	6839      	ldr	r1, [r7, #0]
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f7ff ff8e 	bl	800df8c <pbuf_add_header_impl>
 800e070:	4603      	mov	r3, r0
}
 800e072:	4618      	mov	r0, r3
 800e074:	3708      	adds	r7, #8
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
	...

0800e07c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d106      	bne.n	800e09a <pbuf_remove_header+0x1e>
 800e08c:	4b20      	ldr	r3, [pc, #128]	@ (800e110 <pbuf_remove_header+0x94>)
 800e08e:	f240 224b 	movw	r2, #587	@ 0x24b
 800e092:	4920      	ldr	r1, [pc, #128]	@ (800e114 <pbuf_remove_header+0x98>)
 800e094:	4820      	ldr	r0, [pc, #128]	@ (800e118 <pbuf_remove_header+0x9c>)
 800e096:	f009 fde3 	bl	8017c60 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d003      	beq.n	800e0a8 <pbuf_remove_header+0x2c>
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e0a6:	d301      	bcc.n	800e0ac <pbuf_remove_header+0x30>
    return 1;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	e02c      	b.n	800e106 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d101      	bne.n	800e0b6 <pbuf_remove_header+0x3a>
    return 0;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	e027      	b.n	800e106 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	895b      	ldrh	r3, [r3, #10]
 800e0be:	89fa      	ldrh	r2, [r7, #14]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d908      	bls.n	800e0d6 <pbuf_remove_header+0x5a>
 800e0c4:	4b12      	ldr	r3, [pc, #72]	@ (800e110 <pbuf_remove_header+0x94>)
 800e0c6:	f240 2255 	movw	r2, #597	@ 0x255
 800e0ca:	4914      	ldr	r1, [pc, #80]	@ (800e11c <pbuf_remove_header+0xa0>)
 800e0cc:	4812      	ldr	r0, [pc, #72]	@ (800e118 <pbuf_remove_header+0x9c>)
 800e0ce:	f009 fdc7 	bl	8017c60 <iprintf>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	e017      	b.n	800e106 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	685a      	ldr	r2, [r3, #4]
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	441a      	add	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	895a      	ldrh	r2, [r3, #10]
 800e0ec:	89fb      	ldrh	r3, [r7, #14]
 800e0ee:	1ad3      	subs	r3, r2, r3
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	891a      	ldrh	r2, [r3, #8]
 800e0fa:	89fb      	ldrh	r3, [r7, #14]
 800e0fc:	1ad3      	subs	r3, r2, r3
 800e0fe:	b29a      	uxth	r2, r3
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e104:	2300      	movs	r3, #0
}
 800e106:	4618      	mov	r0, r3
 800e108:	3710      	adds	r7, #16
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}
 800e10e:	bf00      	nop
 800e110:	0801a398 	.word	0x0801a398
 800e114:	0801a4fc 	.word	0x0801a4fc
 800e118:	0801a3f8 	.word	0x0801a3f8
 800e11c:	0801a508 	.word	0x0801a508

0800e120 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	460b      	mov	r3, r1
 800e12a:	807b      	strh	r3, [r7, #2]
 800e12c:	4613      	mov	r3, r2
 800e12e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e130:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e134:	2b00      	cmp	r3, #0
 800e136:	da08      	bge.n	800e14a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e138:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e13c:	425b      	negs	r3, r3
 800e13e:	4619      	mov	r1, r3
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f7ff ff9b 	bl	800e07c <pbuf_remove_header>
 800e146:	4603      	mov	r3, r0
 800e148:	e007      	b.n	800e15a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e14a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e14e:	787a      	ldrb	r2, [r7, #1]
 800e150:	4619      	mov	r1, r3
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f7ff ff1a 	bl	800df8c <pbuf_add_header_impl>
 800e158:	4603      	mov	r3, r0
  }
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3708      	adds	r7, #8
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b082      	sub	sp, #8
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
 800e16a:	460b      	mov	r3, r1
 800e16c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e16e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e172:	2201      	movs	r2, #1
 800e174:	4619      	mov	r1, r3
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f7ff ffd2 	bl	800e120 <pbuf_header_impl>
 800e17c:	4603      	mov	r3, r0
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3708      	adds	r7, #8
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
	...

0800e188 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b088      	sub	sp, #32
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d10b      	bne.n	800e1ae <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d106      	bne.n	800e1aa <pbuf_free+0x22>
 800e19c:	4b3b      	ldr	r3, [pc, #236]	@ (800e28c <pbuf_free+0x104>)
 800e19e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800e1a2:	493b      	ldr	r1, [pc, #236]	@ (800e290 <pbuf_free+0x108>)
 800e1a4:	483b      	ldr	r0, [pc, #236]	@ (800e294 <pbuf_free+0x10c>)
 800e1a6:	f009 fd5b 	bl	8017c60 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	e069      	b.n	800e282 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e1b2:	e062      	b.n	800e27a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e1b4:	f009 fc36 	bl	8017a24 <sys_arch_protect>
 800e1b8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	7b9b      	ldrb	r3, [r3, #14]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d106      	bne.n	800e1d0 <pbuf_free+0x48>
 800e1c2:	4b32      	ldr	r3, [pc, #200]	@ (800e28c <pbuf_free+0x104>)
 800e1c4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800e1c8:	4933      	ldr	r1, [pc, #204]	@ (800e298 <pbuf_free+0x110>)
 800e1ca:	4832      	ldr	r0, [pc, #200]	@ (800e294 <pbuf_free+0x10c>)
 800e1cc:	f009 fd48 	bl	8017c60 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	7b9b      	ldrb	r3, [r3, #14]
 800e1d4:	3b01      	subs	r3, #1
 800e1d6:	b2da      	uxtb	r2, r3
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	739a      	strb	r2, [r3, #14]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	7b9b      	ldrb	r3, [r3, #14]
 800e1e0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e1e2:	69b8      	ldr	r0, [r7, #24]
 800e1e4:	f009 fc2c 	bl	8017a40 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e1e8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d143      	bne.n	800e276 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	7b1b      	ldrb	r3, [r3, #12]
 800e1f8:	f003 030f 	and.w	r3, r3, #15
 800e1fc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	7b5b      	ldrb	r3, [r3, #13]
 800e202:	f003 0302 	and.w	r3, r3, #2
 800e206:	2b00      	cmp	r3, #0
 800e208:	d011      	beq.n	800e22e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d106      	bne.n	800e224 <pbuf_free+0x9c>
 800e216:	4b1d      	ldr	r3, [pc, #116]	@ (800e28c <pbuf_free+0x104>)
 800e218:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800e21c:	491f      	ldr	r1, [pc, #124]	@ (800e29c <pbuf_free+0x114>)
 800e21e:	481d      	ldr	r0, [pc, #116]	@ (800e294 <pbuf_free+0x10c>)
 800e220:	f009 fd1e 	bl	8017c60 <iprintf>
        pc->custom_free_function(p);
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	691b      	ldr	r3, [r3, #16]
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	4798      	blx	r3
 800e22c:	e01d      	b.n	800e26a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e22e:	7bfb      	ldrb	r3, [r7, #15]
 800e230:	2b02      	cmp	r3, #2
 800e232:	d104      	bne.n	800e23e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e234:	6879      	ldr	r1, [r7, #4]
 800e236:	200c      	movs	r0, #12
 800e238:	f7ff f902 	bl	800d440 <memp_free>
 800e23c:	e015      	b.n	800e26a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e23e:	7bfb      	ldrb	r3, [r7, #15]
 800e240:	2b01      	cmp	r3, #1
 800e242:	d104      	bne.n	800e24e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e244:	6879      	ldr	r1, [r7, #4]
 800e246:	200b      	movs	r0, #11
 800e248:	f7ff f8fa 	bl	800d440 <memp_free>
 800e24c:	e00d      	b.n	800e26a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e24e:	7bfb      	ldrb	r3, [r7, #15]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d103      	bne.n	800e25c <pbuf_free+0xd4>
          mem_free(p);
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f7fe fd3f 	bl	800ccd8 <mem_free>
 800e25a:	e006      	b.n	800e26a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e25c:	4b0b      	ldr	r3, [pc, #44]	@ (800e28c <pbuf_free+0x104>)
 800e25e:	f240 320f 	movw	r2, #783	@ 0x30f
 800e262:	490f      	ldr	r1, [pc, #60]	@ (800e2a0 <pbuf_free+0x118>)
 800e264:	480b      	ldr	r0, [pc, #44]	@ (800e294 <pbuf_free+0x10c>)
 800e266:	f009 fcfb 	bl	8017c60 <iprintf>
        }
      }
      count++;
 800e26a:	7ffb      	ldrb	r3, [r7, #31]
 800e26c:	3301      	adds	r3, #1
 800e26e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	607b      	str	r3, [r7, #4]
 800e274:	e001      	b.n	800e27a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e276:	2300      	movs	r3, #0
 800e278:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d199      	bne.n	800e1b4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e280:	7ffb      	ldrb	r3, [r7, #31]
}
 800e282:	4618      	mov	r0, r3
 800e284:	3720      	adds	r7, #32
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	0801a398 	.word	0x0801a398
 800e290:	0801a4fc 	.word	0x0801a4fc
 800e294:	0801a3f8 	.word	0x0801a3f8
 800e298:	0801a528 	.word	0x0801a528
 800e29c:	0801a540 	.word	0x0801a540
 800e2a0:	0801a564 	.word	0x0801a564

0800e2a4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b085      	sub	sp, #20
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e2b0:	e005      	b.n	800e2be <pbuf_clen+0x1a>
    ++len;
 800e2b2:	89fb      	ldrh	r3, [r7, #14]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d1f6      	bne.n	800e2b2 <pbuf_clen+0xe>
  }
  return len;
 800e2c4:	89fb      	ldrh	r3, [r7, #14]
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3714      	adds	r7, #20
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d0:	4770      	bx	lr
	...

0800e2d4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d016      	beq.n	800e310 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e2e2:	f009 fb9f 	bl	8017a24 <sys_arch_protect>
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	7b9b      	ldrb	r3, [r3, #14]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	b2da      	uxtb	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	739a      	strb	r2, [r3, #14]
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	f009 fba3 	bl	8017a40 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	7b9b      	ldrb	r3, [r3, #14]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d106      	bne.n	800e310 <pbuf_ref+0x3c>
 800e302:	4b05      	ldr	r3, [pc, #20]	@ (800e318 <pbuf_ref+0x44>)
 800e304:	f240 3242 	movw	r2, #834	@ 0x342
 800e308:	4904      	ldr	r1, [pc, #16]	@ (800e31c <pbuf_ref+0x48>)
 800e30a:	4805      	ldr	r0, [pc, #20]	@ (800e320 <pbuf_ref+0x4c>)
 800e30c:	f009 fca8 	bl	8017c60 <iprintf>
  }
}
 800e310:	bf00      	nop
 800e312:	3710      	adds	r7, #16
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	0801a398 	.word	0x0801a398
 800e31c:	0801a578 	.word	0x0801a578
 800e320:	0801a3f8 	.word	0x0801a3f8

0800e324 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d002      	beq.n	800e33a <pbuf_cat+0x16>
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d107      	bne.n	800e34a <pbuf_cat+0x26>
 800e33a:	4b20      	ldr	r3, [pc, #128]	@ (800e3bc <pbuf_cat+0x98>)
 800e33c:	f240 3259 	movw	r2, #857	@ 0x359
 800e340:	491f      	ldr	r1, [pc, #124]	@ (800e3c0 <pbuf_cat+0x9c>)
 800e342:	4820      	ldr	r0, [pc, #128]	@ (800e3c4 <pbuf_cat+0xa0>)
 800e344:	f009 fc8c 	bl	8017c60 <iprintf>
 800e348:	e034      	b.n	800e3b4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	60fb      	str	r3, [r7, #12]
 800e34e:	e00a      	b.n	800e366 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	891a      	ldrh	r2, [r3, #8]
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	891b      	ldrh	r3, [r3, #8]
 800e358:	4413      	add	r3, r2
 800e35a:	b29a      	uxth	r2, r3
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	60fb      	str	r3, [r7, #12]
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d1f0      	bne.n	800e350 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	891a      	ldrh	r2, [r3, #8]
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	895b      	ldrh	r3, [r3, #10]
 800e376:	429a      	cmp	r2, r3
 800e378:	d006      	beq.n	800e388 <pbuf_cat+0x64>
 800e37a:	4b10      	ldr	r3, [pc, #64]	@ (800e3bc <pbuf_cat+0x98>)
 800e37c:	f240 3262 	movw	r2, #866	@ 0x362
 800e380:	4911      	ldr	r1, [pc, #68]	@ (800e3c8 <pbuf_cat+0xa4>)
 800e382:	4810      	ldr	r0, [pc, #64]	@ (800e3c4 <pbuf_cat+0xa0>)
 800e384:	f009 fc6c 	bl	8017c60 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d006      	beq.n	800e39e <pbuf_cat+0x7a>
 800e390:	4b0a      	ldr	r3, [pc, #40]	@ (800e3bc <pbuf_cat+0x98>)
 800e392:	f240 3263 	movw	r2, #867	@ 0x363
 800e396:	490d      	ldr	r1, [pc, #52]	@ (800e3cc <pbuf_cat+0xa8>)
 800e398:	480a      	ldr	r0, [pc, #40]	@ (800e3c4 <pbuf_cat+0xa0>)
 800e39a:	f009 fc61 	bl	8017c60 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	891a      	ldrh	r2, [r3, #8]
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	891b      	ldrh	r3, [r3, #8]
 800e3a6:	4413      	add	r3, r2
 800e3a8:	b29a      	uxth	r2, r3
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	683a      	ldr	r2, [r7, #0]
 800e3b2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	0801a398 	.word	0x0801a398
 800e3c0:	0801a58c 	.word	0x0801a58c
 800e3c4:	0801a3f8 	.word	0x0801a3f8
 800e3c8:	0801a5c4 	.word	0x0801a5c4
 800e3cc:	0801a5f4 	.word	0x0801a5f4

0800e3d0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b086      	sub	sp, #24
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	617b      	str	r3, [r7, #20]
 800e3de:	2300      	movs	r3, #0
 800e3e0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d008      	beq.n	800e3fa <pbuf_copy+0x2a>
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d005      	beq.n	800e3fa <pbuf_copy+0x2a>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	891a      	ldrh	r2, [r3, #8]
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	891b      	ldrh	r3, [r3, #8]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d209      	bcs.n	800e40e <pbuf_copy+0x3e>
 800e3fa:	4b57      	ldr	r3, [pc, #348]	@ (800e558 <pbuf_copy+0x188>)
 800e3fc:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800e400:	4956      	ldr	r1, [pc, #344]	@ (800e55c <pbuf_copy+0x18c>)
 800e402:	4857      	ldr	r0, [pc, #348]	@ (800e560 <pbuf_copy+0x190>)
 800e404:	f009 fc2c 	bl	8017c60 <iprintf>
 800e408:	f06f 030f 	mvn.w	r3, #15
 800e40c:	e09f      	b.n	800e54e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	895b      	ldrh	r3, [r3, #10]
 800e412:	461a      	mov	r2, r3
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	1ad2      	subs	r2, r2, r3
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	895b      	ldrh	r3, [r3, #10]
 800e41c:	4619      	mov	r1, r3
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	1acb      	subs	r3, r1, r3
 800e422:	429a      	cmp	r2, r3
 800e424:	d306      	bcc.n	800e434 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	895b      	ldrh	r3, [r3, #10]
 800e42a:	461a      	mov	r2, r3
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	1ad3      	subs	r3, r2, r3
 800e430:	60fb      	str	r3, [r7, #12]
 800e432:	e005      	b.n	800e440 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	895b      	ldrh	r3, [r3, #10]
 800e438:	461a      	mov	r2, r3
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	1ad3      	subs	r3, r2, r3
 800e43e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	685a      	ldr	r2, [r3, #4]
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	18d0      	adds	r0, r2, r3
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	685a      	ldr	r2, [r3, #4]
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	4413      	add	r3, r2
 800e450:	68fa      	ldr	r2, [r7, #12]
 800e452:	4619      	mov	r1, r3
 800e454:	f009 fd6f 	bl	8017f36 <memcpy>
    offset_to += len;
 800e458:	697a      	ldr	r2, [r7, #20]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	4413      	add	r3, r2
 800e45e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e460:	693a      	ldr	r2, [r7, #16]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	4413      	add	r3, r2
 800e466:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	895b      	ldrh	r3, [r3, #10]
 800e46c:	461a      	mov	r2, r3
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	4293      	cmp	r3, r2
 800e472:	d906      	bls.n	800e482 <pbuf_copy+0xb2>
 800e474:	4b38      	ldr	r3, [pc, #224]	@ (800e558 <pbuf_copy+0x188>)
 800e476:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800e47a:	493a      	ldr	r1, [pc, #232]	@ (800e564 <pbuf_copy+0x194>)
 800e47c:	4838      	ldr	r0, [pc, #224]	@ (800e560 <pbuf_copy+0x190>)
 800e47e:	f009 fbef 	bl	8017c60 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	895b      	ldrh	r3, [r3, #10]
 800e486:	461a      	mov	r2, r3
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d906      	bls.n	800e49c <pbuf_copy+0xcc>
 800e48e:	4b32      	ldr	r3, [pc, #200]	@ (800e558 <pbuf_copy+0x188>)
 800e490:	f240 32da 	movw	r2, #986	@ 0x3da
 800e494:	4934      	ldr	r1, [pc, #208]	@ (800e568 <pbuf_copy+0x198>)
 800e496:	4832      	ldr	r0, [pc, #200]	@ (800e560 <pbuf_copy+0x190>)
 800e498:	f009 fbe2 	bl	8017c60 <iprintf>
    if (offset_from >= p_from->len) {
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	895b      	ldrh	r3, [r3, #10]
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d304      	bcc.n	800e4b2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	895b      	ldrh	r3, [r3, #10]
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d114      	bne.n	800e4e8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d10c      	bne.n	800e4e8 <pbuf_copy+0x118>
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d009      	beq.n	800e4e8 <pbuf_copy+0x118>
 800e4d4:	4b20      	ldr	r3, [pc, #128]	@ (800e558 <pbuf_copy+0x188>)
 800e4d6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800e4da:	4924      	ldr	r1, [pc, #144]	@ (800e56c <pbuf_copy+0x19c>)
 800e4dc:	4820      	ldr	r0, [pc, #128]	@ (800e560 <pbuf_copy+0x190>)
 800e4de:	f009 fbbf 	bl	8017c60 <iprintf>
 800e4e2:	f06f 030f 	mvn.w	r3, #15
 800e4e6:	e032      	b.n	800e54e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d013      	beq.n	800e516 <pbuf_copy+0x146>
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	895a      	ldrh	r2, [r3, #10]
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	891b      	ldrh	r3, [r3, #8]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d10d      	bne.n	800e516 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d009      	beq.n	800e516 <pbuf_copy+0x146>
 800e502:	4b15      	ldr	r3, [pc, #84]	@ (800e558 <pbuf_copy+0x188>)
 800e504:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800e508:	4919      	ldr	r1, [pc, #100]	@ (800e570 <pbuf_copy+0x1a0>)
 800e50a:	4815      	ldr	r0, [pc, #84]	@ (800e560 <pbuf_copy+0x190>)
 800e50c:	f009 fba8 	bl	8017c60 <iprintf>
 800e510:	f06f 0305 	mvn.w	r3, #5
 800e514:	e01b      	b.n	800e54e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d013      	beq.n	800e544 <pbuf_copy+0x174>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	895a      	ldrh	r2, [r3, #10]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	891b      	ldrh	r3, [r3, #8]
 800e524:	429a      	cmp	r2, r3
 800e526:	d10d      	bne.n	800e544 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d009      	beq.n	800e544 <pbuf_copy+0x174>
 800e530:	4b09      	ldr	r3, [pc, #36]	@ (800e558 <pbuf_copy+0x188>)
 800e532:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e536:	490e      	ldr	r1, [pc, #56]	@ (800e570 <pbuf_copy+0x1a0>)
 800e538:	4809      	ldr	r0, [pc, #36]	@ (800e560 <pbuf_copy+0x190>)
 800e53a:	f009 fb91 	bl	8017c60 <iprintf>
 800e53e:	f06f 0305 	mvn.w	r3, #5
 800e542:	e004      	b.n	800e54e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	f47f af61 	bne.w	800e40e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e54c:	2300      	movs	r3, #0
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3718      	adds	r7, #24
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	0801a398 	.word	0x0801a398
 800e55c:	0801a640 	.word	0x0801a640
 800e560:	0801a3f8 	.word	0x0801a3f8
 800e564:	0801a670 	.word	0x0801a670
 800e568:	0801a688 	.word	0x0801a688
 800e56c:	0801a6a4 	.word	0x0801a6a4
 800e570:	0801a6b4 	.word	0x0801a6b4

0800e574 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b088      	sub	sp, #32
 800e578:	af00      	add	r7, sp, #0
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	60b9      	str	r1, [r7, #8]
 800e57e:	4611      	mov	r1, r2
 800e580:	461a      	mov	r2, r3
 800e582:	460b      	mov	r3, r1
 800e584:	80fb      	strh	r3, [r7, #6]
 800e586:	4613      	mov	r3, r2
 800e588:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e58a:	2300      	movs	r3, #0
 800e58c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e58e:	2300      	movs	r3, #0
 800e590:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d108      	bne.n	800e5aa <pbuf_copy_partial+0x36>
 800e598:	4b2b      	ldr	r3, [pc, #172]	@ (800e648 <pbuf_copy_partial+0xd4>)
 800e59a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800e59e:	492b      	ldr	r1, [pc, #172]	@ (800e64c <pbuf_copy_partial+0xd8>)
 800e5a0:	482b      	ldr	r0, [pc, #172]	@ (800e650 <pbuf_copy_partial+0xdc>)
 800e5a2:	f009 fb5d 	bl	8017c60 <iprintf>
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	e04a      	b.n	800e640 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d108      	bne.n	800e5c2 <pbuf_copy_partial+0x4e>
 800e5b0:	4b25      	ldr	r3, [pc, #148]	@ (800e648 <pbuf_copy_partial+0xd4>)
 800e5b2:	f240 420b 	movw	r2, #1035	@ 0x40b
 800e5b6:	4927      	ldr	r1, [pc, #156]	@ (800e654 <pbuf_copy_partial+0xe0>)
 800e5b8:	4825      	ldr	r0, [pc, #148]	@ (800e650 <pbuf_copy_partial+0xdc>)
 800e5ba:	f009 fb51 	bl	8017c60 <iprintf>
 800e5be:	2300      	movs	r3, #0
 800e5c0:	e03e      	b.n	800e640 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	61fb      	str	r3, [r7, #28]
 800e5c6:	e034      	b.n	800e632 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e5c8:	88bb      	ldrh	r3, [r7, #4]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d00a      	beq.n	800e5e4 <pbuf_copy_partial+0x70>
 800e5ce:	69fb      	ldr	r3, [r7, #28]
 800e5d0:	895b      	ldrh	r3, [r3, #10]
 800e5d2:	88ba      	ldrh	r2, [r7, #4]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d305      	bcc.n	800e5e4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	895b      	ldrh	r3, [r3, #10]
 800e5dc:	88ba      	ldrh	r2, [r7, #4]
 800e5de:	1ad3      	subs	r3, r2, r3
 800e5e0:	80bb      	strh	r3, [r7, #4]
 800e5e2:	e023      	b.n	800e62c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e5e4:	69fb      	ldr	r3, [r7, #28]
 800e5e6:	895a      	ldrh	r2, [r3, #10]
 800e5e8:	88bb      	ldrh	r3, [r7, #4]
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e5ee:	8b3a      	ldrh	r2, [r7, #24]
 800e5f0:	88fb      	ldrh	r3, [r7, #6]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d901      	bls.n	800e5fa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e5f6:	88fb      	ldrh	r3, [r7, #6]
 800e5f8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e5fa:	8b7b      	ldrh	r3, [r7, #26]
 800e5fc:	68ba      	ldr	r2, [r7, #8]
 800e5fe:	18d0      	adds	r0, r2, r3
 800e600:	69fb      	ldr	r3, [r7, #28]
 800e602:	685a      	ldr	r2, [r3, #4]
 800e604:	88bb      	ldrh	r3, [r7, #4]
 800e606:	4413      	add	r3, r2
 800e608:	8b3a      	ldrh	r2, [r7, #24]
 800e60a:	4619      	mov	r1, r3
 800e60c:	f009 fc93 	bl	8017f36 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e610:	8afa      	ldrh	r2, [r7, #22]
 800e612:	8b3b      	ldrh	r3, [r7, #24]
 800e614:	4413      	add	r3, r2
 800e616:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e618:	8b7a      	ldrh	r2, [r7, #26]
 800e61a:	8b3b      	ldrh	r3, [r7, #24]
 800e61c:	4413      	add	r3, r2
 800e61e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e620:	88fa      	ldrh	r2, [r7, #6]
 800e622:	8b3b      	ldrh	r3, [r7, #24]
 800e624:	1ad3      	subs	r3, r2, r3
 800e626:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e628:	2300      	movs	r3, #0
 800e62a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	61fb      	str	r3, [r7, #28]
 800e632:	88fb      	ldrh	r3, [r7, #6]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d002      	beq.n	800e63e <pbuf_copy_partial+0xca>
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d1c4      	bne.n	800e5c8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e63e:	8afb      	ldrh	r3, [r7, #22]
}
 800e640:	4618      	mov	r0, r3
 800e642:	3720      	adds	r7, #32
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}
 800e648:	0801a398 	.word	0x0801a398
 800e64c:	0801a6e0 	.word	0x0801a6e0
 800e650:	0801a3f8 	.word	0x0801a3f8
 800e654:	0801a700 	.word	0x0801a700

0800e658 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	4603      	mov	r3, r0
 800e660:	603a      	str	r2, [r7, #0]
 800e662:	71fb      	strb	r3, [r7, #7]
 800e664:	460b      	mov	r3, r1
 800e666:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	8919      	ldrh	r1, [r3, #8]
 800e66c:	88ba      	ldrh	r2, [r7, #4]
 800e66e:	79fb      	ldrb	r3, [r7, #7]
 800e670:	4618      	mov	r0, r3
 800e672:	f7ff faa5 	bl	800dbc0 <pbuf_alloc>
 800e676:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d101      	bne.n	800e682 <pbuf_clone+0x2a>
    return NULL;
 800e67e:	2300      	movs	r3, #0
 800e680:	e011      	b.n	800e6a6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e682:	6839      	ldr	r1, [r7, #0]
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	f7ff fea3 	bl	800e3d0 <pbuf_copy>
 800e68a:	4603      	mov	r3, r0
 800e68c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e68e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d006      	beq.n	800e6a4 <pbuf_clone+0x4c>
 800e696:	4b06      	ldr	r3, [pc, #24]	@ (800e6b0 <pbuf_clone+0x58>)
 800e698:	f240 5224 	movw	r2, #1316	@ 0x524
 800e69c:	4905      	ldr	r1, [pc, #20]	@ (800e6b4 <pbuf_clone+0x5c>)
 800e69e:	4806      	ldr	r0, [pc, #24]	@ (800e6b8 <pbuf_clone+0x60>)
 800e6a0:	f009 fade 	bl	8017c60 <iprintf>
  return q;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3710      	adds	r7, #16
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	0801a398 	.word	0x0801a398
 800e6b4:	0801a80c 	.word	0x0801a80c
 800e6b8:	0801a3f8 	.word	0x0801a3f8

0800e6bc <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  if (ms > 0) {
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d016      	beq.n	800e6f8 <sys_msleep+0x3c>
    sys_sem_t delaysem;
    err_t err = sys_sem_new(&delaysem, 0);
 800e6ca:	f107 0308 	add.w	r3, r7, #8
 800e6ce:	2100      	movs	r1, #0
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f009 f8aa 	bl	801782a <sys_sem_new>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e6da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d10a      	bne.n	800e6f8 <sys_msleep+0x3c>
      sys_arch_sem_wait(&delaysem, ms);
 800e6e2:	f107 0308 	add.w	r3, r7, #8
 800e6e6:	6879      	ldr	r1, [r7, #4]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f009 f8c6 	bl	801787a <sys_arch_sem_wait>
      sys_sem_free(&delaysem);
 800e6ee:	f107 0308 	add.w	r3, r7, #8
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f009 f8ff 	bl	80178f6 <sys_sem_free>
    }
  }
}
 800e6f8:	bf00      	nop
 800e6fa:	3710      	adds	r7, #16
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e704:	f009 f9ac 	bl	8017a60 <rand>
 800e708:	4603      	mov	r3, r0
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e710:	b29b      	uxth	r3, r3
 800e712:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e716:	b29a      	uxth	r2, r3
 800e718:	4b01      	ldr	r3, [pc, #4]	@ (800e720 <tcp_init+0x20>)
 800e71a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e71c:	bf00      	nop
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	20000024 	.word	0x20000024

0800e724 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	7d1b      	ldrb	r3, [r3, #20]
 800e730:	2b01      	cmp	r3, #1
 800e732:	d105      	bne.n	800e740 <tcp_free+0x1c>
 800e734:	4b06      	ldr	r3, [pc, #24]	@ (800e750 <tcp_free+0x2c>)
 800e736:	22d4      	movs	r2, #212	@ 0xd4
 800e738:	4906      	ldr	r1, [pc, #24]	@ (800e754 <tcp_free+0x30>)
 800e73a:	4807      	ldr	r0, [pc, #28]	@ (800e758 <tcp_free+0x34>)
 800e73c:	f009 fa90 	bl	8017c60 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e740:	6879      	ldr	r1, [r7, #4]
 800e742:	2001      	movs	r0, #1
 800e744:	f7fe fe7c 	bl	800d440 <memp_free>
}
 800e748:	bf00      	nop
 800e74a:	3708      	adds	r7, #8
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	0801a898 	.word	0x0801a898
 800e754:	0801a8c8 	.word	0x0801a8c8
 800e758:	0801a8dc 	.word	0x0801a8dc

0800e75c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	7d1b      	ldrb	r3, [r3, #20]
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d105      	bne.n	800e778 <tcp_free_listen+0x1c>
 800e76c:	4b06      	ldr	r3, [pc, #24]	@ (800e788 <tcp_free_listen+0x2c>)
 800e76e:	22df      	movs	r2, #223	@ 0xdf
 800e770:	4906      	ldr	r1, [pc, #24]	@ (800e78c <tcp_free_listen+0x30>)
 800e772:	4807      	ldr	r0, [pc, #28]	@ (800e790 <tcp_free_listen+0x34>)
 800e774:	f009 fa74 	bl	8017c60 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e778:	6879      	ldr	r1, [r7, #4]
 800e77a:	2002      	movs	r0, #2
 800e77c:	f7fe fe60 	bl	800d440 <memp_free>
}
 800e780:	bf00      	nop
 800e782:	3708      	adds	r7, #8
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	0801a898 	.word	0x0801a898
 800e78c:	0801a904 	.word	0x0801a904
 800e790:	0801a8dc 	.word	0x0801a8dc

0800e794 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e798:	f001 f8ac 	bl	800f8f4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e79c:	4b07      	ldr	r3, [pc, #28]	@ (800e7bc <tcp_tmr+0x28>)
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	b2da      	uxtb	r2, r3
 800e7a4:	4b05      	ldr	r3, [pc, #20]	@ (800e7bc <tcp_tmr+0x28>)
 800e7a6:	701a      	strb	r2, [r3, #0]
 800e7a8:	4b04      	ldr	r3, [pc, #16]	@ (800e7bc <tcp_tmr+0x28>)
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	f003 0301 	and.w	r3, r3, #1
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d001      	beq.n	800e7b8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e7b4:	f000 fd58 	bl	800f268 <tcp_slowtmr>
  }
}
 800e7b8:	bf00      	nop
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	2001000d 	.word	0x2001000d

0800e7c0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d105      	bne.n	800e7dc <tcp_remove_listener+0x1c>
 800e7d0:	4b0d      	ldr	r3, [pc, #52]	@ (800e808 <tcp_remove_listener+0x48>)
 800e7d2:	22ff      	movs	r2, #255	@ 0xff
 800e7d4:	490d      	ldr	r1, [pc, #52]	@ (800e80c <tcp_remove_listener+0x4c>)
 800e7d6:	480e      	ldr	r0, [pc, #56]	@ (800e810 <tcp_remove_listener+0x50>)
 800e7d8:	f009 fa42 	bl	8017c60 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	60fb      	str	r3, [r7, #12]
 800e7e0:	e00a      	b.n	800e7f8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7e6:	683a      	ldr	r2, [r7, #0]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d102      	bne.n	800e7f2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	60fb      	str	r3, [r7, #12]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d1f1      	bne.n	800e7e2 <tcp_remove_listener+0x22>
    }
  }
}
 800e7fe:	bf00      	nop
 800e800:	bf00      	nop
 800e802:	3710      	adds	r7, #16
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}
 800e808:	0801a898 	.word	0x0801a898
 800e80c:	0801a920 	.word	0x0801a920
 800e810:	0801a8dc 	.word	0x0801a8dc

0800e814 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d106      	bne.n	800e830 <tcp_listen_closed+0x1c>
 800e822:	4b14      	ldr	r3, [pc, #80]	@ (800e874 <tcp_listen_closed+0x60>)
 800e824:	f240 1211 	movw	r2, #273	@ 0x111
 800e828:	4913      	ldr	r1, [pc, #76]	@ (800e878 <tcp_listen_closed+0x64>)
 800e82a:	4814      	ldr	r0, [pc, #80]	@ (800e87c <tcp_listen_closed+0x68>)
 800e82c:	f009 fa18 	bl	8017c60 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	7d1b      	ldrb	r3, [r3, #20]
 800e834:	2b01      	cmp	r3, #1
 800e836:	d006      	beq.n	800e846 <tcp_listen_closed+0x32>
 800e838:	4b0e      	ldr	r3, [pc, #56]	@ (800e874 <tcp_listen_closed+0x60>)
 800e83a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800e83e:	4910      	ldr	r1, [pc, #64]	@ (800e880 <tcp_listen_closed+0x6c>)
 800e840:	480e      	ldr	r0, [pc, #56]	@ (800e87c <tcp_listen_closed+0x68>)
 800e842:	f009 fa0d 	bl	8017c60 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e846:	2301      	movs	r3, #1
 800e848:	60fb      	str	r3, [r7, #12]
 800e84a:	e00b      	b.n	800e864 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e84c:	4a0d      	ldr	r2, [pc, #52]	@ (800e884 <tcp_listen_closed+0x70>)
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	6879      	ldr	r1, [r7, #4]
 800e858:	4618      	mov	r0, r3
 800e85a:	f7ff ffb1 	bl	800e7c0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	3301      	adds	r3, #1
 800e862:	60fb      	str	r3, [r7, #12]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2b03      	cmp	r3, #3
 800e868:	d9f0      	bls.n	800e84c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e86a:	bf00      	nop
 800e86c:	bf00      	nop
 800e86e:	3710      	adds	r7, #16
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	0801a898 	.word	0x0801a898
 800e878:	0801a948 	.word	0x0801a948
 800e87c:	0801a8dc 	.word	0x0801a8dc
 800e880:	0801a954 	.word	0x0801a954
 800e884:	0801c8bc 	.word	0x0801c8bc

0800e888 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e888:	b5b0      	push	{r4, r5, r7, lr}
 800e88a:	b088      	sub	sp, #32
 800e88c:	af04      	add	r7, sp, #16
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	460b      	mov	r3, r1
 800e892:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d106      	bne.n	800e8a8 <tcp_close_shutdown+0x20>
 800e89a:	4b63      	ldr	r3, [pc, #396]	@ (800ea28 <tcp_close_shutdown+0x1a0>)
 800e89c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800e8a0:	4962      	ldr	r1, [pc, #392]	@ (800ea2c <tcp_close_shutdown+0x1a4>)
 800e8a2:	4863      	ldr	r0, [pc, #396]	@ (800ea30 <tcp_close_shutdown+0x1a8>)
 800e8a4:	f009 f9dc 	bl	8017c60 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e8a8:	78fb      	ldrb	r3, [r7, #3]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d066      	beq.n	800e97c <tcp_close_shutdown+0xf4>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	7d1b      	ldrb	r3, [r3, #20]
 800e8b2:	2b04      	cmp	r3, #4
 800e8b4:	d003      	beq.n	800e8be <tcp_close_shutdown+0x36>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	7d1b      	ldrb	r3, [r3, #20]
 800e8ba:	2b07      	cmp	r3, #7
 800e8bc:	d15e      	bne.n	800e97c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d104      	bne.n	800e8d0 <tcp_close_shutdown+0x48>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8ca:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e8ce:	d055      	beq.n	800e97c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	8b5b      	ldrh	r3, [r3, #26]
 800e8d4:	f003 0310 	and.w	r3, r3, #16
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d106      	bne.n	800e8ea <tcp_close_shutdown+0x62>
 800e8dc:	4b52      	ldr	r3, [pc, #328]	@ (800ea28 <tcp_close_shutdown+0x1a0>)
 800e8de:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800e8e2:	4954      	ldr	r1, [pc, #336]	@ (800ea34 <tcp_close_shutdown+0x1ac>)
 800e8e4:	4852      	ldr	r0, [pc, #328]	@ (800ea30 <tcp_close_shutdown+0x1a8>)
 800e8e6:	f009 f9bb 	bl	8017c60 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e8f2:	687d      	ldr	r5, [r7, #4]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	3304      	adds	r3, #4
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	8ad2      	ldrh	r2, [r2, #22]
 800e8fc:	6879      	ldr	r1, [r7, #4]
 800e8fe:	8b09      	ldrh	r1, [r1, #24]
 800e900:	9102      	str	r1, [sp, #8]
 800e902:	9201      	str	r2, [sp, #4]
 800e904:	9300      	str	r3, [sp, #0]
 800e906:	462b      	mov	r3, r5
 800e908:	4622      	mov	r2, r4
 800e90a:	4601      	mov	r1, r0
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f005 fdc3 	bl	8014498 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f001 fba6 	bl	8010064 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e918:	4b47      	ldr	r3, [pc, #284]	@ (800ea38 <tcp_close_shutdown+0x1b0>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	429a      	cmp	r2, r3
 800e920:	d105      	bne.n	800e92e <tcp_close_shutdown+0xa6>
 800e922:	4b45      	ldr	r3, [pc, #276]	@ (800ea38 <tcp_close_shutdown+0x1b0>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	68db      	ldr	r3, [r3, #12]
 800e928:	4a43      	ldr	r2, [pc, #268]	@ (800ea38 <tcp_close_shutdown+0x1b0>)
 800e92a:	6013      	str	r3, [r2, #0]
 800e92c:	e013      	b.n	800e956 <tcp_close_shutdown+0xce>
 800e92e:	4b42      	ldr	r3, [pc, #264]	@ (800ea38 <tcp_close_shutdown+0x1b0>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	60fb      	str	r3, [r7, #12]
 800e934:	e00c      	b.n	800e950 <tcp_close_shutdown+0xc8>
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	68db      	ldr	r3, [r3, #12]
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d104      	bne.n	800e94a <tcp_close_shutdown+0xc2>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	68da      	ldr	r2, [r3, #12]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	60da      	str	r2, [r3, #12]
 800e948:	e005      	b.n	800e956 <tcp_close_shutdown+0xce>
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	68db      	ldr	r3, [r3, #12]
 800e94e:	60fb      	str	r3, [r7, #12]
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d1ef      	bne.n	800e936 <tcp_close_shutdown+0xae>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2200      	movs	r2, #0
 800e95a:	60da      	str	r2, [r3, #12]
 800e95c:	4b37      	ldr	r3, [pc, #220]	@ (800ea3c <tcp_close_shutdown+0x1b4>)
 800e95e:	2201      	movs	r2, #1
 800e960:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e962:	4b37      	ldr	r3, [pc, #220]	@ (800ea40 <tcp_close_shutdown+0x1b8>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d102      	bne.n	800e972 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e96c:	f004 f83a 	bl	80129e4 <tcp_trigger_input_pcb_close>
 800e970:	e002      	b.n	800e978 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f7ff fed6 	bl	800e724 <tcp_free>
      }
      return ERR_OK;
 800e978:	2300      	movs	r3, #0
 800e97a:	e050      	b.n	800ea1e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	7d1b      	ldrb	r3, [r3, #20]
 800e980:	2b02      	cmp	r3, #2
 800e982:	d03b      	beq.n	800e9fc <tcp_close_shutdown+0x174>
 800e984:	2b02      	cmp	r3, #2
 800e986:	dc44      	bgt.n	800ea12 <tcp_close_shutdown+0x18a>
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d002      	beq.n	800e992 <tcp_close_shutdown+0x10a>
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d02a      	beq.n	800e9e6 <tcp_close_shutdown+0x15e>
 800e990:	e03f      	b.n	800ea12 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	8adb      	ldrh	r3, [r3, #22]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d021      	beq.n	800e9de <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e99a:	4b2a      	ldr	r3, [pc, #168]	@ (800ea44 <tcp_close_shutdown+0x1bc>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d105      	bne.n	800e9b0 <tcp_close_shutdown+0x128>
 800e9a4:	4b27      	ldr	r3, [pc, #156]	@ (800ea44 <tcp_close_shutdown+0x1bc>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	68db      	ldr	r3, [r3, #12]
 800e9aa:	4a26      	ldr	r2, [pc, #152]	@ (800ea44 <tcp_close_shutdown+0x1bc>)
 800e9ac:	6013      	str	r3, [r2, #0]
 800e9ae:	e013      	b.n	800e9d8 <tcp_close_shutdown+0x150>
 800e9b0:	4b24      	ldr	r3, [pc, #144]	@ (800ea44 <tcp_close_shutdown+0x1bc>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	60bb      	str	r3, [r7, #8]
 800e9b6:	e00c      	b.n	800e9d2 <tcp_close_shutdown+0x14a>
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	68db      	ldr	r3, [r3, #12]
 800e9bc:	687a      	ldr	r2, [r7, #4]
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d104      	bne.n	800e9cc <tcp_close_shutdown+0x144>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	68da      	ldr	r2, [r3, #12]
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	60da      	str	r2, [r3, #12]
 800e9ca:	e005      	b.n	800e9d8 <tcp_close_shutdown+0x150>
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	68db      	ldr	r3, [r3, #12]
 800e9d0:	60bb      	str	r3, [r7, #8]
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d1ef      	bne.n	800e9b8 <tcp_close_shutdown+0x130>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f7ff fea0 	bl	800e724 <tcp_free>
      break;
 800e9e4:	e01a      	b.n	800ea1c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f7ff ff14 	bl	800e814 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e9ec:	6879      	ldr	r1, [r7, #4]
 800e9ee:	4816      	ldr	r0, [pc, #88]	@ (800ea48 <tcp_close_shutdown+0x1c0>)
 800e9f0:	f001 fb88 	bl	8010104 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f7ff feb1 	bl	800e75c <tcp_free_listen>
      break;
 800e9fa:	e00f      	b.n	800ea1c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e9fc:	6879      	ldr	r1, [r7, #4]
 800e9fe:	480e      	ldr	r0, [pc, #56]	@ (800ea38 <tcp_close_shutdown+0x1b0>)
 800ea00:	f001 fb80 	bl	8010104 <tcp_pcb_remove>
 800ea04:	4b0d      	ldr	r3, [pc, #52]	@ (800ea3c <tcp_close_shutdown+0x1b4>)
 800ea06:	2201      	movs	r2, #1
 800ea08:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f7ff fe8a 	bl	800e724 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ea10:	e004      	b.n	800ea1c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 f81a 	bl	800ea4c <tcp_close_shutdown_fin>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	e000      	b.n	800ea1e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ea1c:	2300      	movs	r3, #0
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3710      	adds	r7, #16
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bdb0      	pop	{r4, r5, r7, pc}
 800ea26:	bf00      	nop
 800ea28:	0801a898 	.word	0x0801a898
 800ea2c:	0801a96c 	.word	0x0801a96c
 800ea30:	0801a8dc 	.word	0x0801a8dc
 800ea34:	0801a98c 	.word	0x0801a98c
 800ea38:	20010004 	.word	0x20010004
 800ea3c:	2001000c 	.word	0x2001000c
 800ea40:	20010044 	.word	0x20010044
 800ea44:	2000fffc 	.word	0x2000fffc
 800ea48:	20010000 	.word	0x20010000

0800ea4c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d106      	bne.n	800ea68 <tcp_close_shutdown_fin+0x1c>
 800ea5a:	4b2e      	ldr	r3, [pc, #184]	@ (800eb14 <tcp_close_shutdown_fin+0xc8>)
 800ea5c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800ea60:	492d      	ldr	r1, [pc, #180]	@ (800eb18 <tcp_close_shutdown_fin+0xcc>)
 800ea62:	482e      	ldr	r0, [pc, #184]	@ (800eb1c <tcp_close_shutdown_fin+0xd0>)
 800ea64:	f009 f8fc 	bl	8017c60 <iprintf>

  switch (pcb->state) {
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	7d1b      	ldrb	r3, [r3, #20]
 800ea6c:	2b07      	cmp	r3, #7
 800ea6e:	d020      	beq.n	800eab2 <tcp_close_shutdown_fin+0x66>
 800ea70:	2b07      	cmp	r3, #7
 800ea72:	dc2b      	bgt.n	800eacc <tcp_close_shutdown_fin+0x80>
 800ea74:	2b03      	cmp	r3, #3
 800ea76:	d002      	beq.n	800ea7e <tcp_close_shutdown_fin+0x32>
 800ea78:	2b04      	cmp	r3, #4
 800ea7a:	d00d      	beq.n	800ea98 <tcp_close_shutdown_fin+0x4c>
 800ea7c:	e026      	b.n	800eacc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f004 fe18 	bl	80136b4 <tcp_send_fin>
 800ea84:	4603      	mov	r3, r0
 800ea86:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ea88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d11f      	bne.n	800ead0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2205      	movs	r2, #5
 800ea94:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ea96:	e01b      	b.n	800ead0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f004 fe0b 	bl	80136b4 <tcp_send_fin>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eaa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d114      	bne.n	800ead4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2205      	movs	r2, #5
 800eaae:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eab0:	e010      	b.n	800ead4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f004 fdfe 	bl	80136b4 <tcp_send_fin>
 800eab8:	4603      	mov	r3, r0
 800eaba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eabc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d109      	bne.n	800ead8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2209      	movs	r2, #9
 800eac8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eaca:	e005      	b.n	800ead8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800eacc:	2300      	movs	r3, #0
 800eace:	e01c      	b.n	800eb0a <tcp_close_shutdown_fin+0xbe>
      break;
 800ead0:	bf00      	nop
 800ead2:	e002      	b.n	800eada <tcp_close_shutdown_fin+0x8e>
      break;
 800ead4:	bf00      	nop
 800ead6:	e000      	b.n	800eada <tcp_close_shutdown_fin+0x8e>
      break;
 800ead8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800eada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d103      	bne.n	800eaea <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f004 ff24 	bl	8013930 <tcp_output>
 800eae8:	e00d      	b.n	800eb06 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800eaea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaf2:	d108      	bne.n	800eb06 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	8b5b      	ldrh	r3, [r3, #26]
 800eaf8:	f043 0308 	orr.w	r3, r3, #8
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800eb02:	2300      	movs	r3, #0
 800eb04:	e001      	b.n	800eb0a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800eb06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	0801a898 	.word	0x0801a898
 800eb18:	0801a948 	.word	0x0801a948
 800eb1c:	0801a8dc 	.word	0x0801a8dc

0800eb20 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d109      	bne.n	800eb42 <tcp_close+0x22>
 800eb2e:	4b0f      	ldr	r3, [pc, #60]	@ (800eb6c <tcp_close+0x4c>)
 800eb30:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800eb34:	490e      	ldr	r1, [pc, #56]	@ (800eb70 <tcp_close+0x50>)
 800eb36:	480f      	ldr	r0, [pc, #60]	@ (800eb74 <tcp_close+0x54>)
 800eb38:	f009 f892 	bl	8017c60 <iprintf>
 800eb3c:	f06f 030f 	mvn.w	r3, #15
 800eb40:	e00f      	b.n	800eb62 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	7d1b      	ldrb	r3, [r3, #20]
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d006      	beq.n	800eb58 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	8b5b      	ldrh	r3, [r3, #26]
 800eb4e:	f043 0310 	orr.w	r3, r3, #16
 800eb52:	b29a      	uxth	r2, r3
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800eb58:	2101      	movs	r1, #1
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f7ff fe94 	bl	800e888 <tcp_close_shutdown>
 800eb60:	4603      	mov	r3, r0
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3708      	adds	r7, #8
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	0801a898 	.word	0x0801a898
 800eb70:	0801a9a8 	.word	0x0801a9a8
 800eb74:	0801a8dc 	.word	0x0801a8dc

0800eb78 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d109      	bne.n	800eb9e <tcp_shutdown+0x26>
 800eb8a:	4b26      	ldr	r3, [pc, #152]	@ (800ec24 <tcp_shutdown+0xac>)
 800eb8c:	f240 2207 	movw	r2, #519	@ 0x207
 800eb90:	4925      	ldr	r1, [pc, #148]	@ (800ec28 <tcp_shutdown+0xb0>)
 800eb92:	4826      	ldr	r0, [pc, #152]	@ (800ec2c <tcp_shutdown+0xb4>)
 800eb94:	f009 f864 	bl	8017c60 <iprintf>
 800eb98:	f06f 030f 	mvn.w	r3, #15
 800eb9c:	e03d      	b.n	800ec1a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	7d1b      	ldrb	r3, [r3, #20]
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d102      	bne.n	800ebac <tcp_shutdown+0x34>
    return ERR_CONN;
 800eba6:	f06f 030a 	mvn.w	r3, #10
 800ebaa:	e036      	b.n	800ec1a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d01b      	beq.n	800ebea <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	8b5b      	ldrh	r3, [r3, #26]
 800ebb6:	f043 0310 	orr.w	r3, r3, #16
 800ebba:	b29a      	uxth	r2, r3
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d005      	beq.n	800ebd2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800ebc6:	2101      	movs	r1, #1
 800ebc8:	68f8      	ldr	r0, [r7, #12]
 800ebca:	f7ff fe5d 	bl	800e888 <tcp_close_shutdown>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	e023      	b.n	800ec1a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d007      	beq.n	800ebea <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7ff fad2 	bl	800e188 <pbuf_free>
      pcb->refused_data = NULL;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d013      	beq.n	800ec18 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	7d1b      	ldrb	r3, [r3, #20]
 800ebf4:	2b04      	cmp	r3, #4
 800ebf6:	dc02      	bgt.n	800ebfe <tcp_shutdown+0x86>
 800ebf8:	2b03      	cmp	r3, #3
 800ebfa:	da02      	bge.n	800ec02 <tcp_shutdown+0x8a>
 800ebfc:	e009      	b.n	800ec12 <tcp_shutdown+0x9a>
 800ebfe:	2b07      	cmp	r3, #7
 800ec00:	d107      	bne.n	800ec12 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	4619      	mov	r1, r3
 800ec08:	68f8      	ldr	r0, [r7, #12]
 800ec0a:	f7ff fe3d 	bl	800e888 <tcp_close_shutdown>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	e003      	b.n	800ec1a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800ec12:	f06f 030a 	mvn.w	r3, #10
 800ec16:	e000      	b.n	800ec1a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800ec18:	2300      	movs	r3, #0
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3710      	adds	r7, #16
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	0801a898 	.word	0x0801a898
 800ec28:	0801a9c0 	.word	0x0801a9c0
 800ec2c:	0801a8dc 	.word	0x0801a8dc

0800ec30 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b08e      	sub	sp, #56	@ 0x38
 800ec34:	af04      	add	r7, sp, #16
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d107      	bne.n	800ec50 <tcp_abandon+0x20>
 800ec40:	4b52      	ldr	r3, [pc, #328]	@ (800ed8c <tcp_abandon+0x15c>)
 800ec42:	f240 223d 	movw	r2, #573	@ 0x23d
 800ec46:	4952      	ldr	r1, [pc, #328]	@ (800ed90 <tcp_abandon+0x160>)
 800ec48:	4852      	ldr	r0, [pc, #328]	@ (800ed94 <tcp_abandon+0x164>)
 800ec4a:	f009 f809 	bl	8017c60 <iprintf>
 800ec4e:	e099      	b.n	800ed84 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	7d1b      	ldrb	r3, [r3, #20]
 800ec54:	2b01      	cmp	r3, #1
 800ec56:	d106      	bne.n	800ec66 <tcp_abandon+0x36>
 800ec58:	4b4c      	ldr	r3, [pc, #304]	@ (800ed8c <tcp_abandon+0x15c>)
 800ec5a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800ec5e:	494e      	ldr	r1, [pc, #312]	@ (800ed98 <tcp_abandon+0x168>)
 800ec60:	484c      	ldr	r0, [pc, #304]	@ (800ed94 <tcp_abandon+0x164>)
 800ec62:	f008 fffd 	bl	8017c60 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	7d1b      	ldrb	r3, [r3, #20]
 800ec6a:	2b0a      	cmp	r3, #10
 800ec6c:	d107      	bne.n	800ec7e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ec6e:	6879      	ldr	r1, [r7, #4]
 800ec70:	484a      	ldr	r0, [pc, #296]	@ (800ed9c <tcp_abandon+0x16c>)
 800ec72:	f001 fa47 	bl	8010104 <tcp_pcb_remove>
    tcp_free(pcb);
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f7ff fd54 	bl	800e724 <tcp_free>
 800ec7c:	e082      	b.n	800ed84 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800ec82:	2300      	movs	r3, #0
 800ec84:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec8a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec90:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec98:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	691b      	ldr	r3, [r3, #16]
 800ec9e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	7d1b      	ldrb	r3, [r3, #20]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d126      	bne.n	800ecf6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	8adb      	ldrh	r3, [r3, #22]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d02e      	beq.n	800ed0e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ecb0:	4b3b      	ldr	r3, [pc, #236]	@ (800eda0 <tcp_abandon+0x170>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	687a      	ldr	r2, [r7, #4]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d105      	bne.n	800ecc6 <tcp_abandon+0x96>
 800ecba:	4b39      	ldr	r3, [pc, #228]	@ (800eda0 <tcp_abandon+0x170>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	68db      	ldr	r3, [r3, #12]
 800ecc0:	4a37      	ldr	r2, [pc, #220]	@ (800eda0 <tcp_abandon+0x170>)
 800ecc2:	6013      	str	r3, [r2, #0]
 800ecc4:	e013      	b.n	800ecee <tcp_abandon+0xbe>
 800ecc6:	4b36      	ldr	r3, [pc, #216]	@ (800eda0 <tcp_abandon+0x170>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	61fb      	str	r3, [r7, #28]
 800eccc:	e00c      	b.n	800ece8 <tcp_abandon+0xb8>
 800ecce:	69fb      	ldr	r3, [r7, #28]
 800ecd0:	68db      	ldr	r3, [r3, #12]
 800ecd2:	687a      	ldr	r2, [r7, #4]
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d104      	bne.n	800ece2 <tcp_abandon+0xb2>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	68da      	ldr	r2, [r3, #12]
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	60da      	str	r2, [r3, #12]
 800ece0:	e005      	b.n	800ecee <tcp_abandon+0xbe>
 800ece2:	69fb      	ldr	r3, [r7, #28]
 800ece4:	68db      	ldr	r3, [r3, #12]
 800ece6:	61fb      	str	r3, [r7, #28]
 800ece8:	69fb      	ldr	r3, [r7, #28]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d1ef      	bne.n	800ecce <tcp_abandon+0x9e>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	60da      	str	r2, [r3, #12]
 800ecf4:	e00b      	b.n	800ed0e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	8adb      	ldrh	r3, [r3, #22]
 800ecfe:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ed00:	6879      	ldr	r1, [r7, #4]
 800ed02:	4828      	ldr	r0, [pc, #160]	@ (800eda4 <tcp_abandon+0x174>)
 800ed04:	f001 f9fe 	bl	8010104 <tcp_pcb_remove>
 800ed08:	4b27      	ldr	r3, [pc, #156]	@ (800eda8 <tcp_abandon+0x178>)
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d004      	beq.n	800ed20 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f000 feca 	bl	800fab4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d004      	beq.n	800ed32 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f000 fec1 	bl	800fab4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d004      	beq.n	800ed44 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f000 feb8 	bl	800fab4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ed44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d00e      	beq.n	800ed68 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ed4a:	6879      	ldr	r1, [r7, #4]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	3304      	adds	r3, #4
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	8b12      	ldrh	r2, [r2, #24]
 800ed54:	9202      	str	r2, [sp, #8]
 800ed56:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ed58:	9201      	str	r2, [sp, #4]
 800ed5a:	9300      	str	r3, [sp, #0]
 800ed5c:	460b      	mov	r3, r1
 800ed5e:	697a      	ldr	r2, [r7, #20]
 800ed60:	69b9      	ldr	r1, [r7, #24]
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f005 fb98 	bl	8014498 <tcp_rst>
    }
    last_state = pcb->state;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	7d1b      	ldrb	r3, [r3, #20]
 800ed6c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f7ff fcd8 	bl	800e724 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d004      	beq.n	800ed84 <tcp_abandon+0x154>
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	f06f 010c 	mvn.w	r1, #12
 800ed80:	68f8      	ldr	r0, [r7, #12]
 800ed82:	4798      	blx	r3
  }
}
 800ed84:	3728      	adds	r7, #40	@ 0x28
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	0801a898 	.word	0x0801a898
 800ed90:	0801a9dc 	.word	0x0801a9dc
 800ed94:	0801a8dc 	.word	0x0801a8dc
 800ed98:	0801a9f8 	.word	0x0801a9f8
 800ed9c:	20010008 	.word	0x20010008
 800eda0:	2000fffc 	.word	0x2000fffc
 800eda4:	20010004 	.word	0x20010004
 800eda8:	2001000c 	.word	0x2001000c

0800edac <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800edb4:	2101      	movs	r1, #1
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f7ff ff3a 	bl	800ec30 <tcp_abandon>
}
 800edbc:	bf00      	nop
 800edbe:	3708      	adds	r7, #8
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b088      	sub	sp, #32
 800edc8:	af00      	add	r7, sp, #0
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	4613      	mov	r3, r2
 800edd0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800edd2:	2304      	movs	r3, #4
 800edd4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d101      	bne.n	800ede0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800eddc:	4b3e      	ldr	r3, [pc, #248]	@ (800eed8 <tcp_bind+0x114>)
 800edde:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d109      	bne.n	800edfa <tcp_bind+0x36>
 800ede6:	4b3d      	ldr	r3, [pc, #244]	@ (800eedc <tcp_bind+0x118>)
 800ede8:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800edec:	493c      	ldr	r1, [pc, #240]	@ (800eee0 <tcp_bind+0x11c>)
 800edee:	483d      	ldr	r0, [pc, #244]	@ (800eee4 <tcp_bind+0x120>)
 800edf0:	f008 ff36 	bl	8017c60 <iprintf>
 800edf4:	f06f 030f 	mvn.w	r3, #15
 800edf8:	e06a      	b.n	800eed0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	7d1b      	ldrb	r3, [r3, #20]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d009      	beq.n	800ee16 <tcp_bind+0x52>
 800ee02:	4b36      	ldr	r3, [pc, #216]	@ (800eedc <tcp_bind+0x118>)
 800ee04:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ee08:	4937      	ldr	r1, [pc, #220]	@ (800eee8 <tcp_bind+0x124>)
 800ee0a:	4836      	ldr	r0, [pc, #216]	@ (800eee4 <tcp_bind+0x120>)
 800ee0c:	f008 ff28 	bl	8017c60 <iprintf>
 800ee10:	f06f 0305 	mvn.w	r3, #5
 800ee14:	e05c      	b.n	800eed0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ee16:	88fb      	ldrh	r3, [r7, #6]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d109      	bne.n	800ee30 <tcp_bind+0x6c>
    port = tcp_new_port();
 800ee1c:	f000 f9de 	bl	800f1dc <tcp_new_port>
 800ee20:	4603      	mov	r3, r0
 800ee22:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ee24:	88fb      	ldrh	r3, [r7, #6]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d135      	bne.n	800ee96 <tcp_bind+0xd2>
      return ERR_BUF;
 800ee2a:	f06f 0301 	mvn.w	r3, #1
 800ee2e:	e04f      	b.n	800eed0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ee30:	2300      	movs	r3, #0
 800ee32:	61fb      	str	r3, [r7, #28]
 800ee34:	e02b      	b.n	800ee8e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ee36:	4a2d      	ldr	r2, [pc, #180]	@ (800eeec <tcp_bind+0x128>)
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	61bb      	str	r3, [r7, #24]
 800ee42:	e01e      	b.n	800ee82 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ee44:	69bb      	ldr	r3, [r7, #24]
 800ee46:	8adb      	ldrh	r3, [r3, #22]
 800ee48:	88fa      	ldrh	r2, [r7, #6]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d116      	bne.n	800ee7c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ee4e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d010      	beq.n	800ee76 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ee54:	69bb      	ldr	r3, [r7, #24]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d00c      	beq.n	800ee76 <tcp_bind+0xb2>
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d009      	beq.n	800ee76 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d005      	beq.n	800ee76 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ee6a:	69bb      	ldr	r3, [r7, #24]
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d102      	bne.n	800ee7c <tcp_bind+0xb8>
              return ERR_USE;
 800ee76:	f06f 0307 	mvn.w	r3, #7
 800ee7a:	e029      	b.n	800eed0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	68db      	ldr	r3, [r3, #12]
 800ee80:	61bb      	str	r3, [r7, #24]
 800ee82:	69bb      	ldr	r3, [r7, #24]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d1dd      	bne.n	800ee44 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	61fb      	str	r3, [r7, #28]
 800ee8e:	69fa      	ldr	r2, [r7, #28]
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	dbcf      	blt.n	800ee36 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d00c      	beq.n	800eeb6 <tcp_bind+0xf2>
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d008      	beq.n	800eeb6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d002      	beq.n	800eeb0 <tcp_bind+0xec>
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	e000      	b.n	800eeb2 <tcp_bind+0xee>
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	68fa      	ldr	r2, [r7, #12]
 800eeb4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	88fa      	ldrh	r2, [r7, #6]
 800eeba:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800eebc:	4b0c      	ldr	r3, [pc, #48]	@ (800eef0 <tcp_bind+0x12c>)
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	60da      	str	r2, [r3, #12]
 800eec4:	4a0a      	ldr	r2, [pc, #40]	@ (800eef0 <tcp_bind+0x12c>)
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	6013      	str	r3, [r2, #0]
 800eeca:	f005 fca7 	bl	801481c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800eece:	2300      	movs	r3, #0
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3720      	adds	r7, #32
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	0801c8e4 	.word	0x0801c8e4
 800eedc:	0801a898 	.word	0x0801a898
 800eee0:	0801aa2c 	.word	0x0801aa2c
 800eee4:	0801a8dc 	.word	0x0801a8dc
 800eee8:	0801aa44 	.word	0x0801aa44
 800eeec:	0801c8bc 	.word	0x0801c8bc
 800eef0:	2000fffc 	.word	0x2000fffc

0800eef4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b084      	sub	sp, #16
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	4613      	mov	r3, r2
 800ef00:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d106      	bne.n	800ef16 <tcp_accept_null+0x22>
 800ef08:	4b07      	ldr	r3, [pc, #28]	@ (800ef28 <tcp_accept_null+0x34>)
 800ef0a:	f240 320f 	movw	r2, #783	@ 0x30f
 800ef0e:	4907      	ldr	r1, [pc, #28]	@ (800ef2c <tcp_accept_null+0x38>)
 800ef10:	4807      	ldr	r0, [pc, #28]	@ (800ef30 <tcp_accept_null+0x3c>)
 800ef12:	f008 fea5 	bl	8017c60 <iprintf>

  tcp_abort(pcb);
 800ef16:	68b8      	ldr	r0, [r7, #8]
 800ef18:	f7ff ff48 	bl	800edac <tcp_abort>

  return ERR_ABRT;
 800ef1c:	f06f 030c 	mvn.w	r3, #12
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3710      	adds	r7, #16
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	0801a898 	.word	0x0801a898
 800ef2c:	0801aa6c 	.word	0x0801aa6c
 800ef30:	0801a8dc 	.word	0x0801a8dc

0800ef34 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b088      	sub	sp, #32
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	607a      	str	r2, [r7, #4]
 800ef40:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800ef42:	2300      	movs	r3, #0
 800ef44:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d109      	bne.n	800ef60 <tcp_listen_with_backlog_and_err+0x2c>
 800ef4c:	4b47      	ldr	r3, [pc, #284]	@ (800f06c <tcp_listen_with_backlog_and_err+0x138>)
 800ef4e:	f240 3259 	movw	r2, #857	@ 0x359
 800ef52:	4947      	ldr	r1, [pc, #284]	@ (800f070 <tcp_listen_with_backlog_and_err+0x13c>)
 800ef54:	4847      	ldr	r0, [pc, #284]	@ (800f074 <tcp_listen_with_backlog_and_err+0x140>)
 800ef56:	f008 fe83 	bl	8017c60 <iprintf>
 800ef5a:	23f0      	movs	r3, #240	@ 0xf0
 800ef5c:	76fb      	strb	r3, [r7, #27]
 800ef5e:	e079      	b.n	800f054 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	7d1b      	ldrb	r3, [r3, #20]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d009      	beq.n	800ef7c <tcp_listen_with_backlog_and_err+0x48>
 800ef68:	4b40      	ldr	r3, [pc, #256]	@ (800f06c <tcp_listen_with_backlog_and_err+0x138>)
 800ef6a:	f240 325a 	movw	r2, #858	@ 0x35a
 800ef6e:	4942      	ldr	r1, [pc, #264]	@ (800f078 <tcp_listen_with_backlog_and_err+0x144>)
 800ef70:	4840      	ldr	r0, [pc, #256]	@ (800f074 <tcp_listen_with_backlog_and_err+0x140>)
 800ef72:	f008 fe75 	bl	8017c60 <iprintf>
 800ef76:	23f1      	movs	r3, #241	@ 0xf1
 800ef78:	76fb      	strb	r3, [r7, #27]
 800ef7a:	e06b      	b.n	800f054 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	7d1b      	ldrb	r3, [r3, #20]
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d104      	bne.n	800ef8e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800ef88:	23f7      	movs	r3, #247	@ 0xf7
 800ef8a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ef8c:	e062      	b.n	800f054 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ef8e:	2002      	movs	r0, #2
 800ef90:	f7fe f9e0 	bl	800d354 <memp_malloc>
 800ef94:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800ef96:	69fb      	ldr	r3, [r7, #28]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d102      	bne.n	800efa2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800ef9c:	23ff      	movs	r3, #255	@ 0xff
 800ef9e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800efa0:	e058      	b.n	800f054 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	691a      	ldr	r2, [r3, #16]
 800efa6:	69fb      	ldr	r3, [r7, #28]
 800efa8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	8ada      	ldrh	r2, [r3, #22]
 800efae:	69fb      	ldr	r3, [r7, #28]
 800efb0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800efb2:	69fb      	ldr	r3, [r7, #28]
 800efb4:	2201      	movs	r2, #1
 800efb6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	7d5a      	ldrb	r2, [r3, #21]
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	7a5a      	ldrb	r2, [r3, #9]
 800efc4:	69fb      	ldr	r3, [r7, #28]
 800efc6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	2200      	movs	r2, #0
 800efcc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	7ada      	ldrb	r2, [r3, #11]
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	7a9a      	ldrb	r2, [r3, #10]
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681a      	ldr	r2, [r3, #0]
 800efe2:	69fb      	ldr	r3, [r7, #28]
 800efe4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	8adb      	ldrh	r3, [r3, #22]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d021      	beq.n	800f032 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800efee:	4b23      	ldr	r3, [pc, #140]	@ (800f07c <tcp_listen_with_backlog_and_err+0x148>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	68fa      	ldr	r2, [r7, #12]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d105      	bne.n	800f004 <tcp_listen_with_backlog_and_err+0xd0>
 800eff8:	4b20      	ldr	r3, [pc, #128]	@ (800f07c <tcp_listen_with_backlog_and_err+0x148>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	68db      	ldr	r3, [r3, #12]
 800effe:	4a1f      	ldr	r2, [pc, #124]	@ (800f07c <tcp_listen_with_backlog_and_err+0x148>)
 800f000:	6013      	str	r3, [r2, #0]
 800f002:	e013      	b.n	800f02c <tcp_listen_with_backlog_and_err+0xf8>
 800f004:	4b1d      	ldr	r3, [pc, #116]	@ (800f07c <tcp_listen_with_backlog_and_err+0x148>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	617b      	str	r3, [r7, #20]
 800f00a:	e00c      	b.n	800f026 <tcp_listen_with_backlog_and_err+0xf2>
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	68db      	ldr	r3, [r3, #12]
 800f010:	68fa      	ldr	r2, [r7, #12]
 800f012:	429a      	cmp	r2, r3
 800f014:	d104      	bne.n	800f020 <tcp_listen_with_backlog_and_err+0xec>
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	68da      	ldr	r2, [r3, #12]
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	60da      	str	r2, [r3, #12]
 800f01e:	e005      	b.n	800f02c <tcp_listen_with_backlog_and_err+0xf8>
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	68db      	ldr	r3, [r3, #12]
 800f024:	617b      	str	r3, [r7, #20]
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d1ef      	bne.n	800f00c <tcp_listen_with_backlog_and_err+0xd8>
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2200      	movs	r2, #0
 800f030:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f032:	68f8      	ldr	r0, [r7, #12]
 800f034:	f7ff fb76 	bl	800e724 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f038:	69fb      	ldr	r3, [r7, #28]
 800f03a:	4a11      	ldr	r2, [pc, #68]	@ (800f080 <tcp_listen_with_backlog_and_err+0x14c>)
 800f03c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f03e:	4b11      	ldr	r3, [pc, #68]	@ (800f084 <tcp_listen_with_backlog_and_err+0x150>)
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	69fb      	ldr	r3, [r7, #28]
 800f044:	60da      	str	r2, [r3, #12]
 800f046:	4a0f      	ldr	r2, [pc, #60]	@ (800f084 <tcp_listen_with_backlog_and_err+0x150>)
 800f048:	69fb      	ldr	r3, [r7, #28]
 800f04a:	6013      	str	r3, [r2, #0]
 800f04c:	f005 fbe6 	bl	801481c <tcp_timer_needed>
  res = ERR_OK;
 800f050:	2300      	movs	r3, #0
 800f052:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d002      	beq.n	800f060 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	7efa      	ldrb	r2, [r7, #27]
 800f05e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f060:	69fb      	ldr	r3, [r7, #28]
}
 800f062:	4618      	mov	r0, r3
 800f064:	3720      	adds	r7, #32
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	0801a898 	.word	0x0801a898
 800f070:	0801aa8c 	.word	0x0801aa8c
 800f074:	0801a8dc 	.word	0x0801a8dc
 800f078:	0801aabc 	.word	0x0801aabc
 800f07c:	2000fffc 	.word	0x2000fffc
 800f080:	0800eef5 	.word	0x0800eef5
 800f084:	20010000 	.word	0x20010000

0800f088 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d106      	bne.n	800f0a4 <tcp_update_rcv_ann_wnd+0x1c>
 800f096:	4b25      	ldr	r3, [pc, #148]	@ (800f12c <tcp_update_rcv_ann_wnd+0xa4>)
 800f098:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800f09c:	4924      	ldr	r1, [pc, #144]	@ (800f130 <tcp_update_rcv_ann_wnd+0xa8>)
 800f09e:	4825      	ldr	r0, [pc, #148]	@ (800f134 <tcp_update_rcv_ann_wnd+0xac>)
 800f0a0:	f008 fdde 	bl	8017c60 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0a8:	687a      	ldr	r2, [r7, #4]
 800f0aa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800f0ac:	4413      	add	r3, r2
 800f0ae:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0b4:	687a      	ldr	r2, [r7, #4]
 800f0b6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800f0b8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800f0bc:	bf28      	it	cs
 800f0be:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800f0c2:	b292      	uxth	r2, r2
 800f0c4:	4413      	add	r3, r2
 800f0c6:	68fa      	ldr	r2, [r7, #12]
 800f0c8:	1ad3      	subs	r3, r2, r3
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	db08      	blt.n	800f0e0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0da:	68fa      	ldr	r2, [r7, #12]
 800f0dc:	1ad3      	subs	r3, r2, r3
 800f0de:	e020      	b.n	800f122 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0e8:	1ad3      	subs	r3, r2, r3
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	dd03      	ble.n	800f0f6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f0f4:	e014      	b.n	800f120 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0fe:	1ad3      	subs	r3, r2, r3
 800f100:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f108:	d306      	bcc.n	800f118 <tcp_update_rcv_ann_wnd+0x90>
 800f10a:	4b08      	ldr	r3, [pc, #32]	@ (800f12c <tcp_update_rcv_ann_wnd+0xa4>)
 800f10c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800f110:	4909      	ldr	r1, [pc, #36]	@ (800f138 <tcp_update_rcv_ann_wnd+0xb0>)
 800f112:	4808      	ldr	r0, [pc, #32]	@ (800f134 <tcp_update_rcv_ann_wnd+0xac>)
 800f114:	f008 fda4 	bl	8017c60 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	b29a      	uxth	r2, r3
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800f120:	2300      	movs	r3, #0
  }
}
 800f122:	4618      	mov	r0, r3
 800f124:	3710      	adds	r7, #16
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	bf00      	nop
 800f12c:	0801a898 	.word	0x0801a898
 800f130:	0801aaf4 	.word	0x0801aaf4
 800f134:	0801a8dc 	.word	0x0801a8dc
 800f138:	0801ab18 	.word	0x0801ab18

0800f13c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b084      	sub	sp, #16
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	460b      	mov	r3, r1
 800f146:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d107      	bne.n	800f15e <tcp_recved+0x22>
 800f14e:	4b1f      	ldr	r3, [pc, #124]	@ (800f1cc <tcp_recved+0x90>)
 800f150:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800f154:	491e      	ldr	r1, [pc, #120]	@ (800f1d0 <tcp_recved+0x94>)
 800f156:	481f      	ldr	r0, [pc, #124]	@ (800f1d4 <tcp_recved+0x98>)
 800f158:	f008 fd82 	bl	8017c60 <iprintf>
 800f15c:	e032      	b.n	800f1c4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	7d1b      	ldrb	r3, [r3, #20]
 800f162:	2b01      	cmp	r3, #1
 800f164:	d106      	bne.n	800f174 <tcp_recved+0x38>
 800f166:	4b19      	ldr	r3, [pc, #100]	@ (800f1cc <tcp_recved+0x90>)
 800f168:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800f16c:	491a      	ldr	r1, [pc, #104]	@ (800f1d8 <tcp_recved+0x9c>)
 800f16e:	4819      	ldr	r0, [pc, #100]	@ (800f1d4 <tcp_recved+0x98>)
 800f170:	f008 fd76 	bl	8017c60 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f178:	887b      	ldrh	r3, [r7, #2]
 800f17a:	4413      	add	r3, r2
 800f17c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f17e:	89fb      	ldrh	r3, [r7, #14]
 800f180:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f184:	d804      	bhi.n	800f190 <tcp_recved+0x54>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f18a:	89fa      	ldrh	r2, [r7, #14]
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d204      	bcs.n	800f19a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800f196:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f198:	e002      	b.n	800f1a0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	89fa      	ldrh	r2, [r7, #14]
 800f19e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f7ff ff71 	bl	800f088 <tcp_update_rcv_ann_wnd>
 800f1a6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800f1ae:	d309      	bcc.n	800f1c4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	8b5b      	ldrh	r3, [r3, #26]
 800f1b4:	f043 0302 	orr.w	r3, r3, #2
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f004 fbb6 	bl	8013930 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f1c4:	3710      	adds	r7, #16
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	0801a898 	.word	0x0801a898
 800f1d0:	0801ab34 	.word	0x0801ab34
 800f1d4:	0801a8dc 	.word	0x0801a8dc
 800f1d8:	0801ab4c 	.word	0x0801ab4c

0800f1dc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b083      	sub	sp, #12
 800f1e0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f1e6:	4b1e      	ldr	r3, [pc, #120]	@ (800f260 <tcp_new_port+0x84>)
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	b29a      	uxth	r2, r3
 800f1ee:	4b1c      	ldr	r3, [pc, #112]	@ (800f260 <tcp_new_port+0x84>)
 800f1f0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f1f2:	4b1b      	ldr	r3, [pc, #108]	@ (800f260 <tcp_new_port+0x84>)
 800f1f4:	881b      	ldrh	r3, [r3, #0]
 800f1f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d103      	bne.n	800f206 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f1fe:	4b18      	ldr	r3, [pc, #96]	@ (800f260 <tcp_new_port+0x84>)
 800f200:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800f204:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f206:	2300      	movs	r3, #0
 800f208:	71fb      	strb	r3, [r7, #7]
 800f20a:	e01e      	b.n	800f24a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f20c:	79fb      	ldrb	r3, [r7, #7]
 800f20e:	4a15      	ldr	r2, [pc, #84]	@ (800f264 <tcp_new_port+0x88>)
 800f210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	603b      	str	r3, [r7, #0]
 800f218:	e011      	b.n	800f23e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	8ada      	ldrh	r2, [r3, #22]
 800f21e:	4b10      	ldr	r3, [pc, #64]	@ (800f260 <tcp_new_port+0x84>)
 800f220:	881b      	ldrh	r3, [r3, #0]
 800f222:	429a      	cmp	r2, r3
 800f224:	d108      	bne.n	800f238 <tcp_new_port+0x5c>
        n++;
 800f226:	88bb      	ldrh	r3, [r7, #4]
 800f228:	3301      	adds	r3, #1
 800f22a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f22c:	88bb      	ldrh	r3, [r7, #4]
 800f22e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f232:	d3d8      	bcc.n	800f1e6 <tcp_new_port+0xa>
          return 0;
 800f234:	2300      	movs	r3, #0
 800f236:	e00d      	b.n	800f254 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	68db      	ldr	r3, [r3, #12]
 800f23c:	603b      	str	r3, [r7, #0]
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d1ea      	bne.n	800f21a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f244:	79fb      	ldrb	r3, [r7, #7]
 800f246:	3301      	adds	r3, #1
 800f248:	71fb      	strb	r3, [r7, #7]
 800f24a:	79fb      	ldrb	r3, [r7, #7]
 800f24c:	2b03      	cmp	r3, #3
 800f24e:	d9dd      	bls.n	800f20c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f250:	4b03      	ldr	r3, [pc, #12]	@ (800f260 <tcp_new_port+0x84>)
 800f252:	881b      	ldrh	r3, [r3, #0]
}
 800f254:	4618      	mov	r0, r3
 800f256:	370c      	adds	r7, #12
 800f258:	46bd      	mov	sp, r7
 800f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25e:	4770      	bx	lr
 800f260:	20000024 	.word	0x20000024
 800f264:	0801c8bc 	.word	0x0801c8bc

0800f268 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f268:	b5b0      	push	{r4, r5, r7, lr}
 800f26a:	b090      	sub	sp, #64	@ 0x40
 800f26c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f26e:	2300      	movs	r3, #0
 800f270:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800f274:	4b95      	ldr	r3, [pc, #596]	@ (800f4cc <tcp_slowtmr+0x264>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	3301      	adds	r3, #1
 800f27a:	4a94      	ldr	r2, [pc, #592]	@ (800f4cc <tcp_slowtmr+0x264>)
 800f27c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f27e:	4b94      	ldr	r3, [pc, #592]	@ (800f4d0 <tcp_slowtmr+0x268>)
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	3301      	adds	r3, #1
 800f284:	b2da      	uxtb	r2, r3
 800f286:	4b92      	ldr	r3, [pc, #584]	@ (800f4d0 <tcp_slowtmr+0x268>)
 800f288:	701a      	strb	r2, [r3, #0]
 800f28a:	e000      	b.n	800f28e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800f28c:	bf00      	nop
  prev = NULL;
 800f28e:	2300      	movs	r3, #0
 800f290:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800f292:	4b90      	ldr	r3, [pc, #576]	@ (800f4d4 <tcp_slowtmr+0x26c>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f298:	e2b7      	b.n	800f80a <tcp_slowtmr+0x5a2>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f29c:	7d1b      	ldrb	r3, [r3, #20]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d106      	bne.n	800f2b0 <tcp_slowtmr+0x48>
 800f2a2:	4b8d      	ldr	r3, [pc, #564]	@ (800f4d8 <tcp_slowtmr+0x270>)
 800f2a4:	f240 42be 	movw	r2, #1214	@ 0x4be
 800f2a8:	498c      	ldr	r1, [pc, #560]	@ (800f4dc <tcp_slowtmr+0x274>)
 800f2aa:	488d      	ldr	r0, [pc, #564]	@ (800f4e0 <tcp_slowtmr+0x278>)
 800f2ac:	f008 fcd8 	bl	8017c60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2b2:	7d1b      	ldrb	r3, [r3, #20]
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d106      	bne.n	800f2c6 <tcp_slowtmr+0x5e>
 800f2b8:	4b87      	ldr	r3, [pc, #540]	@ (800f4d8 <tcp_slowtmr+0x270>)
 800f2ba:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800f2be:	4989      	ldr	r1, [pc, #548]	@ (800f4e4 <tcp_slowtmr+0x27c>)
 800f2c0:	4887      	ldr	r0, [pc, #540]	@ (800f4e0 <tcp_slowtmr+0x278>)
 800f2c2:	f008 fccd 	bl	8017c60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2c8:	7d1b      	ldrb	r3, [r3, #20]
 800f2ca:	2b0a      	cmp	r3, #10
 800f2cc:	d106      	bne.n	800f2dc <tcp_slowtmr+0x74>
 800f2ce:	4b82      	ldr	r3, [pc, #520]	@ (800f4d8 <tcp_slowtmr+0x270>)
 800f2d0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800f2d4:	4984      	ldr	r1, [pc, #528]	@ (800f4e8 <tcp_slowtmr+0x280>)
 800f2d6:	4882      	ldr	r0, [pc, #520]	@ (800f4e0 <tcp_slowtmr+0x278>)
 800f2d8:	f008 fcc2 	bl	8017c60 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2de:	7f9a      	ldrb	r2, [r3, #30]
 800f2e0:	4b7b      	ldr	r3, [pc, #492]	@ (800f4d0 <tcp_slowtmr+0x268>)
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d105      	bne.n	800f2f4 <tcp_slowtmr+0x8c>
      prev = pcb;
 800f2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800f2f2:	e28a      	b.n	800f80a <tcp_slowtmr+0x5a2>
    pcb->last_timer = tcp_timer_ctr;
 800f2f4:	4b76      	ldr	r3, [pc, #472]	@ (800f4d0 <tcp_slowtmr+0x268>)
 800f2f6:	781a      	ldrb	r2, [r3, #0]
 800f2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2fa:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800f302:	2300      	movs	r3, #0
 800f304:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f30a:	7d1b      	ldrb	r3, [r3, #20]
 800f30c:	2b02      	cmp	r3, #2
 800f30e:	d10a      	bne.n	800f326 <tcp_slowtmr+0xbe>
 800f310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f312:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f316:	2b05      	cmp	r3, #5
 800f318:	d905      	bls.n	800f326 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800f31a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f31e:	3301      	adds	r3, #1
 800f320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f324:	e11e      	b.n	800f564 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f328:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f32c:	2b0b      	cmp	r3, #11
 800f32e:	d905      	bls.n	800f33c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800f330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f334:	3301      	adds	r3, #1
 800f336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f33a:	e113      	b.n	800f564 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800f33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f33e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800f342:	2b00      	cmp	r3, #0
 800f344:	d075      	beq.n	800f432 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d006      	beq.n	800f35c <tcp_slowtmr+0xf4>
 800f34e:	4b62      	ldr	r3, [pc, #392]	@ (800f4d8 <tcp_slowtmr+0x270>)
 800f350:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800f354:	4965      	ldr	r1, [pc, #404]	@ (800f4ec <tcp_slowtmr+0x284>)
 800f356:	4862      	ldr	r0, [pc, #392]	@ (800f4e0 <tcp_slowtmr+0x278>)
 800f358:	f008 fc82 	bl	8017c60 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f35e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f360:	2b00      	cmp	r3, #0
 800f362:	d106      	bne.n	800f372 <tcp_slowtmr+0x10a>
 800f364:	4b5c      	ldr	r3, [pc, #368]	@ (800f4d8 <tcp_slowtmr+0x270>)
 800f366:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800f36a:	4961      	ldr	r1, [pc, #388]	@ (800f4f0 <tcp_slowtmr+0x288>)
 800f36c:	485c      	ldr	r0, [pc, #368]	@ (800f4e0 <tcp_slowtmr+0x278>)
 800f36e:	f008 fc77 	bl	8017c60 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f374:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800f378:	2b0b      	cmp	r3, #11
 800f37a:	d905      	bls.n	800f388 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800f37c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f380:	3301      	adds	r3, #1
 800f382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f386:	e0ed      	b.n	800f564 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f38a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800f38e:	3b01      	subs	r3, #1
 800f390:	4a58      	ldr	r2, [pc, #352]	@ (800f4f4 <tcp_slowtmr+0x28c>)
 800f392:	5cd3      	ldrb	r3, [r2, r3]
 800f394:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f398:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800f39c:	7c7a      	ldrb	r2, [r7, #17]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d907      	bls.n	800f3b2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800f3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3a4:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	b2da      	uxtb	r2, r3
 800f3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
          if (pcb->persist_cnt >= backoff_cnt) {
 800f3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3b4:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800f3b8:	7c7a      	ldrb	r2, [r7, #17]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	f200 80d2 	bhi.w	800f564 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800f3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d108      	bne.n	800f3e0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f3ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f3d0:	f005 f956 	bl	8014680 <tcp_zero_window_probe>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d014      	beq.n	800f404 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800f3da:	2300      	movs	r3, #0
 800f3dc:	623b      	str	r3, [r7, #32]
 800f3de:	e011      	b.n	800f404 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f3ea:	f004 f81b 	bl	8013424 <tcp_split_unsent_seg>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d107      	bne.n	800f404 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800f3f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f3f6:	f004 fa9b 	bl	8013930 <tcp_output>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d101      	bne.n	800f404 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800f400:	2300      	movs	r3, #0
 800f402:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800f404:	6a3b      	ldr	r3, [r7, #32]
 800f406:	2b00      	cmp	r3, #0
 800f408:	f000 80ac 	beq.w	800f564 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800f40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f40e:	2200      	movs	r2, #0
 800f410:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f416:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800f41a:	2b06      	cmp	r3, #6
 800f41c:	f200 80a2 	bhi.w	800f564 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800f420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f422:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800f426:	3301      	adds	r3, #1
 800f428:	b2da      	uxtb	r2, r3
 800f42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f42c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 800f430:	e098      	b.n	800f564 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f434:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f438:	2b00      	cmp	r3, #0
 800f43a:	db0f      	blt.n	800f45c <tcp_slowtmr+0x1f4>
 800f43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f43e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f442:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f446:	4293      	cmp	r3, r2
 800f448:	d008      	beq.n	800f45c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800f44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f44c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f450:	b29b      	uxth	r3, r3
 800f452:	3301      	adds	r3, #1
 800f454:	b29b      	uxth	r3, r3
 800f456:	b21a      	sxth	r2, r3
 800f458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f45a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800f45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f45e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800f462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f464:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f468:	429a      	cmp	r2, r3
 800f46a:	db7b      	blt.n	800f564 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f46c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f46e:	f004 fd53 	bl	8013f18 <tcp_rexmit_rto_prepare>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d007      	beq.n	800f488 <tcp_slowtmr+0x220>
 800f478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f47a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d171      	bne.n	800f564 <tcp_slowtmr+0x2fc>
 800f480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f484:	2b00      	cmp	r3, #0
 800f486:	d06d      	beq.n	800f564 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800f488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f48a:	7d1b      	ldrb	r3, [r3, #20]
 800f48c:	2b02      	cmp	r3, #2
 800f48e:	d03a      	beq.n	800f506 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f492:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f496:	2b0c      	cmp	r3, #12
 800f498:	bf28      	it	cs
 800f49a:	230c      	movcs	r3, #12
 800f49c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f4a4:	10db      	asrs	r3, r3, #3
 800f4a6:	b21b      	sxth	r3, r3
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f4b0:	4413      	add	r3, r2
 800f4b2:	7efa      	ldrb	r2, [r7, #27]
 800f4b4:	4910      	ldr	r1, [pc, #64]	@ (800f4f8 <tcp_slowtmr+0x290>)
 800f4b6:	5c8a      	ldrb	r2, [r1, r2]
 800f4b8:	4093      	lsls	r3, r2
 800f4ba:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	dc1a      	bgt.n	800f4fc <tcp_slowtmr+0x294>
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	b21a      	sxth	r2, r3
 800f4ca:	e019      	b.n	800f500 <tcp_slowtmr+0x298>
 800f4cc:	2000fff8 	.word	0x2000fff8
 800f4d0:	2001000e 	.word	0x2001000e
 800f4d4:	20010004 	.word	0x20010004
 800f4d8:	0801a898 	.word	0x0801a898
 800f4dc:	0801abdc 	.word	0x0801abdc
 800f4e0:	0801a8dc 	.word	0x0801a8dc
 800f4e4:	0801ac08 	.word	0x0801ac08
 800f4e8:	0801ac34 	.word	0x0801ac34
 800f4ec:	0801ac64 	.word	0x0801ac64
 800f4f0:	0801ac98 	.word	0x0801ac98
 800f4f4:	0801c8b4 	.word	0x0801c8b4
 800f4f8:	0801c8a4 	.word	0x0801c8a4
 800f4fc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f502:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800f506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f508:	2200      	movs	r2, #0
 800f50a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f50e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f514:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f518:	4293      	cmp	r3, r2
 800f51a:	bf28      	it	cs
 800f51c:	4613      	movcs	r3, r2
 800f51e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f520:	8a7b      	ldrh	r3, [r7, #18]
 800f522:	085b      	lsrs	r3, r3, #1
 800f524:	b29a      	uxth	r2, r3
 800f526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f528:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f52e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f534:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f536:	005b      	lsls	r3, r3, #1
 800f538:	b29b      	uxth	r3, r3
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d206      	bcs.n	800f54c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f540:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f542:	005b      	lsls	r3, r3, #1
 800f544:	b29a      	uxth	r2, r3
 800f546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f548:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800f54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f54e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800f550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f552:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800f556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f558:	2200      	movs	r2, #0
 800f55a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800f55e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f560:	f004 fd4a 	bl	8013ff8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800f564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f566:	7d1b      	ldrb	r3, [r3, #20]
 800f568:	2b06      	cmp	r3, #6
 800f56a:	d111      	bne.n	800f590 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800f56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f56e:	8b5b      	ldrh	r3, [r3, #26]
 800f570:	f003 0310 	and.w	r3, r3, #16
 800f574:	2b00      	cmp	r3, #0
 800f576:	d00b      	beq.n	800f590 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f578:	4b94      	ldr	r3, [pc, #592]	@ (800f7cc <tcp_slowtmr+0x564>)
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f57e:	6a1b      	ldr	r3, [r3, #32]
 800f580:	1ad3      	subs	r3, r2, r3
 800f582:	2b28      	cmp	r3, #40	@ 0x28
 800f584:	d904      	bls.n	800f590 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800f586:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f58a:	3301      	adds	r3, #1
 800f58c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f592:	7a5b      	ldrb	r3, [r3, #9]
 800f594:	f003 0308 	and.w	r3, r3, #8
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d053      	beq.n	800f644 <tcp_slowtmr+0x3dc>
        ((pcb->state == ESTABLISHED) ||
 800f59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f59e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f5a0:	2b04      	cmp	r3, #4
 800f5a2:	d003      	beq.n	800f5ac <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800f5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5a6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f5a8:	2b07      	cmp	r3, #7
 800f5aa:	d14b      	bne.n	800f644 <tcp_slowtmr+0x3dc>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f5ac:	4b87      	ldr	r3, [pc, #540]	@ (800f7cc <tcp_slowtmr+0x564>)
 800f5ae:	681a      	ldr	r2, [r3, #0]
 800f5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5b2:	6a1b      	ldr	r3, [r3, #32]
 800f5b4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5b8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f5c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f5c4:	f8d0 0098 	ldr.w	r0, [r0, #152]	@ 0x98
 800f5c8:	fb00 f303 	mul.w	r3, r0, r3
 800f5cc:	440b      	add	r3, r1
 800f5ce:	4980      	ldr	r1, [pc, #512]	@ (800f7d0 <tcp_slowtmr+0x568>)
 800f5d0:	fba1 1303 	umull	r1, r3, r1, r3
 800f5d4:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d90a      	bls.n	800f5f0 <tcp_slowtmr+0x388>
        ++pcb_remove;
 800f5da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f5de:	3301      	adds	r3, #1
 800f5e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800f5e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f5ee:	e029      	b.n	800f644 <tcp_slowtmr+0x3dc>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f5f0:	4b76      	ldr	r3, [pc, #472]	@ (800f7cc <tcp_slowtmr+0x564>)
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f6:	6a1b      	ldr	r3, [r3, #32]
 800f5f8:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5fc:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f602:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800f606:	4618      	mov	r0, r3
 800f608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f60a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f60e:	fb00 f303 	mul.w	r3, r0, r3
 800f612:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f614:	496e      	ldr	r1, [pc, #440]	@ (800f7d0 <tcp_slowtmr+0x568>)
 800f616:	fba1 1303 	umull	r1, r3, r1, r3
 800f61a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d911      	bls.n	800f644 <tcp_slowtmr+0x3dc>
        err = tcp_keepalive(pcb);
 800f620:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f622:	f004 ffed 	bl	8014600 <tcp_keepalive>
 800f626:	4603      	mov	r3, r0
 800f628:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800f62c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f630:	2b00      	cmp	r3, #0
 800f632:	d107      	bne.n	800f644 <tcp_slowtmr+0x3dc>
          pcb->keep_cnt_sent++;
 800f634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f636:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800f63a:	3301      	adds	r3, #1
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f640:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
    if (pcb->ooseq != NULL &&
 800f644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d011      	beq.n	800f670 <tcp_slowtmr+0x408>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f64c:	4b5f      	ldr	r3, [pc, #380]	@ (800f7cc <tcp_slowtmr+0x564>)
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f652:	6a1b      	ldr	r3, [r3, #32]
 800f654:	1ad2      	subs	r2, r2, r3
 800f656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f658:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f65c:	4619      	mov	r1, r3
 800f65e:	460b      	mov	r3, r1
 800f660:	005b      	lsls	r3, r3, #1
 800f662:	440b      	add	r3, r1
 800f664:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f666:	429a      	cmp	r2, r3
 800f668:	d302      	bcc.n	800f670 <tcp_slowtmr+0x408>
      tcp_free_ooseq(pcb);
 800f66a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f66c:	f000 feae 	bl	80103cc <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800f670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f672:	7d1b      	ldrb	r3, [r3, #20]
 800f674:	2b03      	cmp	r3, #3
 800f676:	d10b      	bne.n	800f690 <tcp_slowtmr+0x428>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f678:	4b54      	ldr	r3, [pc, #336]	@ (800f7cc <tcp_slowtmr+0x564>)
 800f67a:	681a      	ldr	r2, [r3, #0]
 800f67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f67e:	6a1b      	ldr	r3, [r3, #32]
 800f680:	1ad3      	subs	r3, r2, r3
 800f682:	2b28      	cmp	r3, #40	@ 0x28
 800f684:	d904      	bls.n	800f690 <tcp_slowtmr+0x428>
        ++pcb_remove;
 800f686:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f68a:	3301      	adds	r3, #1
 800f68c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800f690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f692:	7d1b      	ldrb	r3, [r3, #20]
 800f694:	2b09      	cmp	r3, #9
 800f696:	d10b      	bne.n	800f6b0 <tcp_slowtmr+0x448>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f698:	4b4c      	ldr	r3, [pc, #304]	@ (800f7cc <tcp_slowtmr+0x564>)
 800f69a:	681a      	ldr	r2, [r3, #0]
 800f69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f69e:	6a1b      	ldr	r3, [r3, #32]
 800f6a0:	1ad3      	subs	r3, r2, r3
 800f6a2:	2bf0      	cmp	r3, #240	@ 0xf0
 800f6a4:	d904      	bls.n	800f6b0 <tcp_slowtmr+0x448>
        ++pcb_remove;
 800f6a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800f6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d060      	beq.n	800f77a <tcp_slowtmr+0x512>
      tcp_err_fn err_fn = pcb->errf;
 800f6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6be:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800f6c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f6c2:	f000 fccf 	bl	8010064 <tcp_pcb_purge>
      if (prev != NULL) {
 800f6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d010      	beq.n	800f6ee <tcp_slowtmr+0x486>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f6cc:	4b41      	ldr	r3, [pc, #260]	@ (800f7d4 <tcp_slowtmr+0x56c>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d106      	bne.n	800f6e4 <tcp_slowtmr+0x47c>
 800f6d6:	4b40      	ldr	r3, [pc, #256]	@ (800f7d8 <tcp_slowtmr+0x570>)
 800f6d8:	f240 526d 	movw	r2, #1389	@ 0x56d
 800f6dc:	493f      	ldr	r1, [pc, #252]	@ (800f7dc <tcp_slowtmr+0x574>)
 800f6de:	4840      	ldr	r0, [pc, #256]	@ (800f7e0 <tcp_slowtmr+0x578>)
 800f6e0:	f008 fabe 	bl	8017c60 <iprintf>
        prev->next = pcb->next;
 800f6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6e6:	68da      	ldr	r2, [r3, #12]
 800f6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ea:	60da      	str	r2, [r3, #12]
 800f6ec:	e00f      	b.n	800f70e <tcp_slowtmr+0x4a6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f6ee:	4b39      	ldr	r3, [pc, #228]	@ (800f7d4 <tcp_slowtmr+0x56c>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d006      	beq.n	800f706 <tcp_slowtmr+0x49e>
 800f6f8:	4b37      	ldr	r3, [pc, #220]	@ (800f7d8 <tcp_slowtmr+0x570>)
 800f6fa:	f240 5271 	movw	r2, #1393	@ 0x571
 800f6fe:	4939      	ldr	r1, [pc, #228]	@ (800f7e4 <tcp_slowtmr+0x57c>)
 800f700:	4837      	ldr	r0, [pc, #220]	@ (800f7e0 <tcp_slowtmr+0x578>)
 800f702:	f008 faad 	bl	8017c60 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f708:	68db      	ldr	r3, [r3, #12]
 800f70a:	4a32      	ldr	r2, [pc, #200]	@ (800f7d4 <tcp_slowtmr+0x56c>)
 800f70c:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800f70e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f712:	2b00      	cmp	r3, #0
 800f714:	d013      	beq.n	800f73e <tcp_slowtmr+0x4d6>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f718:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800f71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f71c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f71e:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800f720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f722:	3304      	adds	r3, #4
 800f724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f726:	8ad2      	ldrh	r2, [r2, #22]
 800f728:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f72a:	8b09      	ldrh	r1, [r1, #24]
 800f72c:	9102      	str	r1, [sp, #8]
 800f72e:	9201      	str	r2, [sp, #4]
 800f730:	9300      	str	r3, [sp, #0]
 800f732:	462b      	mov	r3, r5
 800f734:	4622      	mov	r2, r4
 800f736:	4601      	mov	r1, r0
 800f738:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f73a:	f004 fead 	bl	8014498 <tcp_rst>
      err_arg = pcb->callback_arg;
 800f73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f740:	691b      	ldr	r3, [r3, #16]
 800f742:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f746:	7d1b      	ldrb	r3, [r3, #20]
 800f748:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f74c:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f750:	68db      	ldr	r3, [r3, #12]
 800f752:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f754:	6838      	ldr	r0, [r7, #0]
 800f756:	f7fe ffe5 	bl	800e724 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800f75a:	4b23      	ldr	r3, [pc, #140]	@ (800f7e8 <tcp_slowtmr+0x580>)
 800f75c:	2200      	movs	r2, #0
 800f75e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d004      	beq.n	800f770 <tcp_slowtmr+0x508>
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f06f 010c 	mvn.w	r1, #12
 800f76c:	68b8      	ldr	r0, [r7, #8]
 800f76e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f770:	4b1d      	ldr	r3, [pc, #116]	@ (800f7e8 <tcp_slowtmr+0x580>)
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d048      	beq.n	800f80a <tcp_slowtmr+0x5a2>
        goto tcp_slowtmr_start;
 800f778:	e589      	b.n	800f28e <tcp_slowtmr+0x26>
      prev = pcb;
 800f77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f77c:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f780:	68db      	ldr	r3, [r3, #12]
 800f782:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800f784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f786:	7f1b      	ldrb	r3, [r3, #28]
 800f788:	3301      	adds	r3, #1
 800f78a:	b2da      	uxtb	r2, r3
 800f78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f78e:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f792:	7f1a      	ldrb	r2, [r3, #28]
 800f794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f796:	7f5b      	ldrb	r3, [r3, #29]
 800f798:	429a      	cmp	r2, r3
 800f79a:	d336      	bcc.n	800f80a <tcp_slowtmr+0x5a2>
        prev->polltmr = 0;
 800f79c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f79e:	2200      	movs	r2, #0
 800f7a0:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800f7a2:	4b11      	ldr	r3, [pc, #68]	@ (800f7e8 <tcp_slowtmr+0x580>)
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d01c      	beq.n	800f7ec <tcp_slowtmr+0x584>
 800f7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f7b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f7ba:	6912      	ldr	r2, [r2, #16]
 800f7bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f7be:	4610      	mov	r0, r2
 800f7c0:	4798      	blx	r3
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800f7c8:	e013      	b.n	800f7f2 <tcp_slowtmr+0x58a>
 800f7ca:	bf00      	nop
 800f7cc:	2000fff8 	.word	0x2000fff8
 800f7d0:	10624dd3 	.word	0x10624dd3
 800f7d4:	20010004 	.word	0x20010004
 800f7d8:	0801a898 	.word	0x0801a898
 800f7dc:	0801acd0 	.word	0x0801acd0
 800f7e0:	0801a8dc 	.word	0x0801a8dc
 800f7e4:	0801acfc 	.word	0x0801acfc
 800f7e8:	2001000c 	.word	0x2001000c
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800f7f2:	4b38      	ldr	r3, [pc, #224]	@ (800f8d4 <tcp_slowtmr+0x66c>)
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	f47f ad48 	bne.w	800f28c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f7fc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f800:	2b00      	cmp	r3, #0
 800f802:	d102      	bne.n	800f80a <tcp_slowtmr+0x5a2>
          tcp_output(prev);
 800f804:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f806:	f004 f893 	bl	8013930 <tcp_output>
  while (pcb != NULL) {
 800f80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	f47f ad44 	bne.w	800f29a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f812:	2300      	movs	r3, #0
 800f814:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800f816:	4b30      	ldr	r3, [pc, #192]	@ (800f8d8 <tcp_slowtmr+0x670>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f81c:	e052      	b.n	800f8c4 <tcp_slowtmr+0x65c>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f81e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f820:	7d1b      	ldrb	r3, [r3, #20]
 800f822:	2b0a      	cmp	r3, #10
 800f824:	d006      	beq.n	800f834 <tcp_slowtmr+0x5cc>
 800f826:	4b2d      	ldr	r3, [pc, #180]	@ (800f8dc <tcp_slowtmr+0x674>)
 800f828:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800f82c:	492c      	ldr	r1, [pc, #176]	@ (800f8e0 <tcp_slowtmr+0x678>)
 800f82e:	482d      	ldr	r0, [pc, #180]	@ (800f8e4 <tcp_slowtmr+0x67c>)
 800f830:	f008 fa16 	bl	8017c60 <iprintf>
    pcb_remove = 0;
 800f834:	2300      	movs	r3, #0
 800f836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f83a:	4b2b      	ldr	r3, [pc, #172]	@ (800f8e8 <tcp_slowtmr+0x680>)
 800f83c:	681a      	ldr	r2, [r3, #0]
 800f83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f840:	6a1b      	ldr	r3, [r3, #32]
 800f842:	1ad3      	subs	r3, r2, r3
 800f844:	2bf0      	cmp	r3, #240	@ 0xf0
 800f846:	d904      	bls.n	800f852 <tcp_slowtmr+0x5ea>
      ++pcb_remove;
 800f848:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f84c:	3301      	adds	r3, #1
 800f84e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f852:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f856:	2b00      	cmp	r3, #0
 800f858:	d02f      	beq.n	800f8ba <tcp_slowtmr+0x652>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f85a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f85c:	f000 fc02 	bl	8010064 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f862:	2b00      	cmp	r3, #0
 800f864:	d010      	beq.n	800f888 <tcp_slowtmr+0x620>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f866:	4b1c      	ldr	r3, [pc, #112]	@ (800f8d8 <tcp_slowtmr+0x670>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d106      	bne.n	800f87e <tcp_slowtmr+0x616>
 800f870:	4b1a      	ldr	r3, [pc, #104]	@ (800f8dc <tcp_slowtmr+0x674>)
 800f872:	f240 52af 	movw	r2, #1455	@ 0x5af
 800f876:	491d      	ldr	r1, [pc, #116]	@ (800f8ec <tcp_slowtmr+0x684>)
 800f878:	481a      	ldr	r0, [pc, #104]	@ (800f8e4 <tcp_slowtmr+0x67c>)
 800f87a:	f008 f9f1 	bl	8017c60 <iprintf>
        prev->next = pcb->next;
 800f87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f880:	68da      	ldr	r2, [r3, #12]
 800f882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f884:	60da      	str	r2, [r3, #12]
 800f886:	e00f      	b.n	800f8a8 <tcp_slowtmr+0x640>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f888:	4b13      	ldr	r3, [pc, #76]	@ (800f8d8 <tcp_slowtmr+0x670>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f88e:	429a      	cmp	r2, r3
 800f890:	d006      	beq.n	800f8a0 <tcp_slowtmr+0x638>
 800f892:	4b12      	ldr	r3, [pc, #72]	@ (800f8dc <tcp_slowtmr+0x674>)
 800f894:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800f898:	4915      	ldr	r1, [pc, #84]	@ (800f8f0 <tcp_slowtmr+0x688>)
 800f89a:	4812      	ldr	r0, [pc, #72]	@ (800f8e4 <tcp_slowtmr+0x67c>)
 800f89c:	f008 f9e0 	bl	8017c60 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8a2:	68db      	ldr	r3, [r3, #12]
 800f8a4:	4a0c      	ldr	r2, [pc, #48]	@ (800f8d8 <tcp_slowtmr+0x670>)
 800f8a6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8aa:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8ae:	68db      	ldr	r3, [r3, #12]
 800f8b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f8b2:	69f8      	ldr	r0, [r7, #28]
 800f8b4:	f7fe ff36 	bl	800e724 <tcp_free>
 800f8b8:	e004      	b.n	800f8c4 <tcp_slowtmr+0x65c>
    } else {
      prev = pcb;
 800f8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d1a9      	bne.n	800f81e <tcp_slowtmr+0x5b6>
    }
  }
}
 800f8ca:	bf00      	nop
 800f8cc:	bf00      	nop
 800f8ce:	3730      	adds	r7, #48	@ 0x30
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bdb0      	pop	{r4, r5, r7, pc}
 800f8d4:	2001000c 	.word	0x2001000c
 800f8d8:	20010008 	.word	0x20010008
 800f8dc:	0801a898 	.word	0x0801a898
 800f8e0:	0801ad28 	.word	0x0801ad28
 800f8e4:	0801a8dc 	.word	0x0801a8dc
 800f8e8:	2000fff8 	.word	0x2000fff8
 800f8ec:	0801ad58 	.word	0x0801ad58
 800f8f0:	0801ad80 	.word	0x0801ad80

0800f8f4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f8fa:	4b2d      	ldr	r3, [pc, #180]	@ (800f9b0 <tcp_fasttmr+0xbc>)
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	3301      	adds	r3, #1
 800f900:	b2da      	uxtb	r2, r3
 800f902:	4b2b      	ldr	r3, [pc, #172]	@ (800f9b0 <tcp_fasttmr+0xbc>)
 800f904:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f906:	4b2b      	ldr	r3, [pc, #172]	@ (800f9b4 <tcp_fasttmr+0xc0>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f90c:	e048      	b.n	800f9a0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	7f9a      	ldrb	r2, [r3, #30]
 800f912:	4b27      	ldr	r3, [pc, #156]	@ (800f9b0 <tcp_fasttmr+0xbc>)
 800f914:	781b      	ldrb	r3, [r3, #0]
 800f916:	429a      	cmp	r2, r3
 800f918:	d03f      	beq.n	800f99a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f91a:	4b25      	ldr	r3, [pc, #148]	@ (800f9b0 <tcp_fasttmr+0xbc>)
 800f91c:	781a      	ldrb	r2, [r3, #0]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	8b5b      	ldrh	r3, [r3, #26]
 800f926:	f003 0301 	and.w	r3, r3, #1
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d010      	beq.n	800f950 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	8b5b      	ldrh	r3, [r3, #26]
 800f932:	f043 0302 	orr.w	r3, r3, #2
 800f936:	b29a      	uxth	r2, r3
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f003 fff7 	bl	8013930 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	8b5b      	ldrh	r3, [r3, #26]
 800f946:	f023 0303 	bic.w	r3, r3, #3
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	8b5b      	ldrh	r3, [r3, #26]
 800f954:	f003 0308 	and.w	r3, r3, #8
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d009      	beq.n	800f970 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	8b5b      	ldrh	r3, [r3, #26]
 800f960:	f023 0308 	bic.w	r3, r3, #8
 800f964:	b29a      	uxth	r2, r3
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f7ff f86e 	bl	800ea4c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	68db      	ldr	r3, [r3, #12]
 800f974:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d00a      	beq.n	800f994 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f97e:	4b0e      	ldr	r3, [pc, #56]	@ (800f9b8 <tcp_fasttmr+0xc4>)
 800f980:	2200      	movs	r2, #0
 800f982:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f000 f819 	bl	800f9bc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f98a:	4b0b      	ldr	r3, [pc, #44]	@ (800f9b8 <tcp_fasttmr+0xc4>)
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d000      	beq.n	800f994 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f992:	e7b8      	b.n	800f906 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	607b      	str	r3, [r7, #4]
 800f998:	e002      	b.n	800f9a0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	68db      	ldr	r3, [r3, #12]
 800f99e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d1b3      	bne.n	800f90e <tcp_fasttmr+0x1a>
    }
  }
}
 800f9a6:	bf00      	nop
 800f9a8:	bf00      	nop
 800f9aa:	3708      	adds	r7, #8
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}
 800f9b0:	2001000e 	.word	0x2001000e
 800f9b4:	20010004 	.word	0x20010004
 800f9b8:	2001000c 	.word	0x2001000c

0800f9bc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f9bc:	b590      	push	{r4, r7, lr}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d109      	bne.n	800f9de <tcp_process_refused_data+0x22>
 800f9ca:	4b37      	ldr	r3, [pc, #220]	@ (800faa8 <tcp_process_refused_data+0xec>)
 800f9cc:	f240 6209 	movw	r2, #1545	@ 0x609
 800f9d0:	4936      	ldr	r1, [pc, #216]	@ (800faac <tcp_process_refused_data+0xf0>)
 800f9d2:	4837      	ldr	r0, [pc, #220]	@ (800fab0 <tcp_process_refused_data+0xf4>)
 800f9d4:	f008 f944 	bl	8017c60 <iprintf>
 800f9d8:	f06f 030f 	mvn.w	r3, #15
 800f9dc:	e060      	b.n	800faa0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f9e2:	7b5b      	ldrb	r3, [r3, #13]
 800f9e4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f9ea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d00b      	beq.n	800fa14 <tcp_process_refused_data+0x58>
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6918      	ldr	r0, [r3, #16]
 800fa06:	2300      	movs	r3, #0
 800fa08:	68ba      	ldr	r2, [r7, #8]
 800fa0a:	6879      	ldr	r1, [r7, #4]
 800fa0c:	47a0      	blx	r4
 800fa0e:	4603      	mov	r3, r0
 800fa10:	73fb      	strb	r3, [r7, #15]
 800fa12:	e007      	b.n	800fa24 <tcp_process_refused_data+0x68>
 800fa14:	2300      	movs	r3, #0
 800fa16:	68ba      	ldr	r2, [r7, #8]
 800fa18:	6879      	ldr	r1, [r7, #4]
 800fa1a:	2000      	movs	r0, #0
 800fa1c:	f000 f8a4 	bl	800fb68 <tcp_recv_null>
 800fa20:	4603      	mov	r3, r0
 800fa22:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800fa24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d12a      	bne.n	800fa82 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800fa2c:	7bbb      	ldrb	r3, [r7, #14]
 800fa2e:	f003 0320 	and.w	r3, r3, #32
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d033      	beq.n	800fa9e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa3a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fa3e:	d005      	beq.n	800fa4c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa44:	3301      	adds	r3, #1
 800fa46:	b29a      	uxth	r2, r3
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d00b      	beq.n	800fa6e <tcp_process_refused_data+0xb2>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6918      	ldr	r0, [r3, #16]
 800fa60:	2300      	movs	r3, #0
 800fa62:	2200      	movs	r2, #0
 800fa64:	6879      	ldr	r1, [r7, #4]
 800fa66:	47a0      	blx	r4
 800fa68:	4603      	mov	r3, r0
 800fa6a:	73fb      	strb	r3, [r7, #15]
 800fa6c:	e001      	b.n	800fa72 <tcp_process_refused_data+0xb6>
 800fa6e:	2300      	movs	r3, #0
 800fa70:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800fa72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa76:	f113 0f0d 	cmn.w	r3, #13
 800fa7a:	d110      	bne.n	800fa9e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800fa7c:	f06f 030c 	mvn.w	r3, #12
 800fa80:	e00e      	b.n	800faa0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800fa82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa86:	f113 0f0d 	cmn.w	r3, #13
 800fa8a:	d102      	bne.n	800fa92 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800fa8c:	f06f 030c 	mvn.w	r3, #12
 800fa90:	e006      	b.n	800faa0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	68ba      	ldr	r2, [r7, #8]
 800fa96:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800fa98:	f06f 0304 	mvn.w	r3, #4
 800fa9c:	e000      	b.n	800faa0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800fa9e:	2300      	movs	r3, #0
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3714      	adds	r7, #20
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd90      	pop	{r4, r7, pc}
 800faa8:	0801a898 	.word	0x0801a898
 800faac:	0801ada8 	.word	0x0801ada8
 800fab0:	0801a8dc 	.word	0x0801a8dc

0800fab4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fabc:	e007      	b.n	800face <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f000 f80a 	bl	800fade <tcp_seg_free>
    seg = next;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d1f4      	bne.n	800fabe <tcp_segs_free+0xa>
  }
}
 800fad4:	bf00      	nop
 800fad6:	bf00      	nop
 800fad8:	3710      	adds	r7, #16
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}

0800fade <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fade:	b580      	push	{r7, lr}
 800fae0:	b082      	sub	sp, #8
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d00c      	beq.n	800fb06 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d004      	beq.n	800fafe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7fe fb45 	bl	800e188 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800fafe:	6879      	ldr	r1, [r7, #4]
 800fb00:	2003      	movs	r0, #3
 800fb02:	f7fd fc9d 	bl	800d440 <memp_free>
  }
}
 800fb06:	bf00      	nop
 800fb08:	3708      	adds	r7, #8
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
	...

0800fb10 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b084      	sub	sp, #16
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d106      	bne.n	800fb2c <tcp_seg_copy+0x1c>
 800fb1e:	4b0f      	ldr	r3, [pc, #60]	@ (800fb5c <tcp_seg_copy+0x4c>)
 800fb20:	f240 6282 	movw	r2, #1666	@ 0x682
 800fb24:	490e      	ldr	r1, [pc, #56]	@ (800fb60 <tcp_seg_copy+0x50>)
 800fb26:	480f      	ldr	r0, [pc, #60]	@ (800fb64 <tcp_seg_copy+0x54>)
 800fb28:	f008 f89a 	bl	8017c60 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800fb2c:	2003      	movs	r0, #3
 800fb2e:	f7fd fc11 	bl	800d354 <memp_malloc>
 800fb32:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d101      	bne.n	800fb3e <tcp_seg_copy+0x2e>
    return NULL;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	e00a      	b.n	800fb54 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800fb3e:	2210      	movs	r2, #16
 800fb40:	6879      	ldr	r1, [r7, #4]
 800fb42:	68f8      	ldr	r0, [r7, #12]
 800fb44:	f008 f9f7 	bl	8017f36 <memcpy>
  pbuf_ref(cseg->p);
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7fe fbc1 	bl	800e2d4 <pbuf_ref>
  return cseg;
 800fb52:	68fb      	ldr	r3, [r7, #12]
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3710      	adds	r7, #16
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	0801a898 	.word	0x0801a898
 800fb60:	0801adec 	.word	0x0801adec
 800fb64:	0801a8dc 	.word	0x0801a8dc

0800fb68 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	60f8      	str	r0, [r7, #12]
 800fb70:	60b9      	str	r1, [r7, #8]
 800fb72:	607a      	str	r2, [r7, #4]
 800fb74:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d109      	bne.n	800fb90 <tcp_recv_null+0x28>
 800fb7c:	4b12      	ldr	r3, [pc, #72]	@ (800fbc8 <tcp_recv_null+0x60>)
 800fb7e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800fb82:	4912      	ldr	r1, [pc, #72]	@ (800fbcc <tcp_recv_null+0x64>)
 800fb84:	4812      	ldr	r0, [pc, #72]	@ (800fbd0 <tcp_recv_null+0x68>)
 800fb86:	f008 f86b 	bl	8017c60 <iprintf>
 800fb8a:	f06f 030f 	mvn.w	r3, #15
 800fb8e:	e016      	b.n	800fbbe <tcp_recv_null+0x56>

  if (p != NULL) {
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d009      	beq.n	800fbaa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	891b      	ldrh	r3, [r3, #8]
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	68b8      	ldr	r0, [r7, #8]
 800fb9e:	f7ff facd 	bl	800f13c <tcp_recved>
    pbuf_free(p);
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f7fe faf0 	bl	800e188 <pbuf_free>
 800fba8:	e008      	b.n	800fbbc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800fbaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d104      	bne.n	800fbbc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800fbb2:	68b8      	ldr	r0, [r7, #8]
 800fbb4:	f7fe ffb4 	bl	800eb20 <tcp_close>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	e000      	b.n	800fbbe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800fbbc:	2300      	movs	r3, #0
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
 800fbc6:	bf00      	nop
 800fbc8:	0801a898 	.word	0x0801a898
 800fbcc:	0801ae08 	.word	0x0801ae08
 800fbd0:	0801a8dc 	.word	0x0801a8dc

0800fbd4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b086      	sub	sp, #24
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	4603      	mov	r3, r0
 800fbdc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800fbde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	db01      	blt.n	800fbea <tcp_kill_prio+0x16>
 800fbe6:	79fb      	ldrb	r3, [r7, #7]
 800fbe8:	e000      	b.n	800fbec <tcp_kill_prio+0x18>
 800fbea:	237f      	movs	r3, #127	@ 0x7f
 800fbec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800fbee:	7afb      	ldrb	r3, [r7, #11]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d034      	beq.n	800fc5e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800fbf4:	7afb      	ldrb	r3, [r7, #11]
 800fbf6:	3b01      	subs	r3, #1
 800fbf8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc02:	4b19      	ldr	r3, [pc, #100]	@ (800fc68 <tcp_kill_prio+0x94>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	617b      	str	r3, [r7, #20]
 800fc08:	e01f      	b.n	800fc4a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	7d5b      	ldrb	r3, [r3, #21]
 800fc0e:	7afa      	ldrb	r2, [r7, #11]
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d80c      	bhi.n	800fc2e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800fc18:	7afa      	ldrb	r2, [r7, #11]
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d112      	bne.n	800fc44 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fc1e:	4b13      	ldr	r3, [pc, #76]	@ (800fc6c <tcp_kill_prio+0x98>)
 800fc20:	681a      	ldr	r2, [r3, #0]
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	6a1b      	ldr	r3, [r3, #32]
 800fc26:	1ad3      	subs	r3, r2, r3
 800fc28:	68fa      	ldr	r2, [r7, #12]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d80a      	bhi.n	800fc44 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800fc2e:	4b0f      	ldr	r3, [pc, #60]	@ (800fc6c <tcp_kill_prio+0x98>)
 800fc30:	681a      	ldr	r2, [r3, #0]
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	6a1b      	ldr	r3, [r3, #32]
 800fc36:	1ad3      	subs	r3, r2, r3
 800fc38:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	7d5b      	ldrb	r3, [r3, #21]
 800fc42:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	617b      	str	r3, [r7, #20]
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d1dc      	bne.n	800fc0a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d004      	beq.n	800fc60 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fc56:	6938      	ldr	r0, [r7, #16]
 800fc58:	f7ff f8a8 	bl	800edac <tcp_abort>
 800fc5c:	e000      	b.n	800fc60 <tcp_kill_prio+0x8c>
    return;
 800fc5e:	bf00      	nop
  }
}
 800fc60:	3718      	adds	r7, #24
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}
 800fc66:	bf00      	nop
 800fc68:	20010004 	.word	0x20010004
 800fc6c:	2000fff8 	.word	0x2000fff8

0800fc70 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b086      	sub	sp, #24
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	4603      	mov	r3, r0
 800fc78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800fc7a:	79fb      	ldrb	r3, [r7, #7]
 800fc7c:	2b08      	cmp	r3, #8
 800fc7e:	d009      	beq.n	800fc94 <tcp_kill_state+0x24>
 800fc80:	79fb      	ldrb	r3, [r7, #7]
 800fc82:	2b09      	cmp	r3, #9
 800fc84:	d006      	beq.n	800fc94 <tcp_kill_state+0x24>
 800fc86:	4b1a      	ldr	r3, [pc, #104]	@ (800fcf0 <tcp_kill_state+0x80>)
 800fc88:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800fc8c:	4919      	ldr	r1, [pc, #100]	@ (800fcf4 <tcp_kill_state+0x84>)
 800fc8e:	481a      	ldr	r0, [pc, #104]	@ (800fcf8 <tcp_kill_state+0x88>)
 800fc90:	f007 ffe6 	bl	8017c60 <iprintf>

  inactivity = 0;
 800fc94:	2300      	movs	r3, #0
 800fc96:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc9c:	4b17      	ldr	r3, [pc, #92]	@ (800fcfc <tcp_kill_state+0x8c>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	617b      	str	r3, [r7, #20]
 800fca2:	e017      	b.n	800fcd4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	7d1b      	ldrb	r3, [r3, #20]
 800fca8:	79fa      	ldrb	r2, [r7, #7]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d10f      	bne.n	800fcce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fcae:	4b14      	ldr	r3, [pc, #80]	@ (800fd00 <tcp_kill_state+0x90>)
 800fcb0:	681a      	ldr	r2, [r3, #0]
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	6a1b      	ldr	r3, [r3, #32]
 800fcb6:	1ad3      	subs	r3, r2, r3
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d807      	bhi.n	800fcce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800fcbe:	4b10      	ldr	r3, [pc, #64]	@ (800fd00 <tcp_kill_state+0x90>)
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	6a1b      	ldr	r3, [r3, #32]
 800fcc6:	1ad3      	subs	r3, r2, r3
 800fcc8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcce:	697b      	ldr	r3, [r7, #20]
 800fcd0:	68db      	ldr	r3, [r3, #12]
 800fcd2:	617b      	str	r3, [r7, #20]
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d1e4      	bne.n	800fca4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d003      	beq.n	800fce8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800fce0:	2100      	movs	r1, #0
 800fce2:	6938      	ldr	r0, [r7, #16]
 800fce4:	f7fe ffa4 	bl	800ec30 <tcp_abandon>
  }
}
 800fce8:	bf00      	nop
 800fcea:	3718      	adds	r7, #24
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}
 800fcf0:	0801a898 	.word	0x0801a898
 800fcf4:	0801ae24 	.word	0x0801ae24
 800fcf8:	0801a8dc 	.word	0x0801a8dc
 800fcfc:	20010004 	.word	0x20010004
 800fd00:	2000fff8 	.word	0x2000fff8

0800fd04 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b084      	sub	sp, #16
 800fd08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd12:	4b12      	ldr	r3, [pc, #72]	@ (800fd5c <tcp_kill_timewait+0x58>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	60fb      	str	r3, [r7, #12]
 800fd18:	e012      	b.n	800fd40 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fd1a:	4b11      	ldr	r3, [pc, #68]	@ (800fd60 <tcp_kill_timewait+0x5c>)
 800fd1c:	681a      	ldr	r2, [r3, #0]
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	6a1b      	ldr	r3, [r3, #32]
 800fd22:	1ad3      	subs	r3, r2, r3
 800fd24:	687a      	ldr	r2, [r7, #4]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d807      	bhi.n	800fd3a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800fd2a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd60 <tcp_kill_timewait+0x5c>)
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	6a1b      	ldr	r3, [r3, #32]
 800fd32:	1ad3      	subs	r3, r2, r3
 800fd34:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	68db      	ldr	r3, [r3, #12]
 800fd3e:	60fb      	str	r3, [r7, #12]
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d1e9      	bne.n	800fd1a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d002      	beq.n	800fd52 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fd4c:	68b8      	ldr	r0, [r7, #8]
 800fd4e:	f7ff f82d 	bl	800edac <tcp_abort>
  }
}
 800fd52:	bf00      	nop
 800fd54:	3710      	adds	r7, #16
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	20010008 	.word	0x20010008
 800fd60:	2000fff8 	.word	0x2000fff8

0800fd64 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800fd6a:	4b10      	ldr	r3, [pc, #64]	@ (800fdac <tcp_handle_closepend+0x48>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fd70:	e014      	b.n	800fd9c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	8b5b      	ldrh	r3, [r3, #26]
 800fd7c:	f003 0308 	and.w	r3, r3, #8
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d009      	beq.n	800fd98 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	8b5b      	ldrh	r3, [r3, #26]
 800fd88:	f023 0308 	bic.w	r3, r3, #8
 800fd8c:	b29a      	uxth	r2, r3
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f7fe fe5a 	bl	800ea4c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d1e7      	bne.n	800fd72 <tcp_handle_closepend+0xe>
  }
}
 800fda2:	bf00      	nop
 800fda4:	bf00      	nop
 800fda6:	3708      	adds	r7, #8
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	20010004 	.word	0x20010004

0800fdb0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fdba:	2001      	movs	r0, #1
 800fdbc:	f7fd faca 	bl	800d354 <memp_malloc>
 800fdc0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d126      	bne.n	800fe16 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fdc8:	f7ff ffcc 	bl	800fd64 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fdcc:	f7ff ff9a 	bl	800fd04 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fdd0:	2001      	movs	r0, #1
 800fdd2:	f7fd fabf 	bl	800d354 <memp_malloc>
 800fdd6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d11b      	bne.n	800fe16 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fdde:	2009      	movs	r0, #9
 800fde0:	f7ff ff46 	bl	800fc70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fde4:	2001      	movs	r0, #1
 800fde6:	f7fd fab5 	bl	800d354 <memp_malloc>
 800fdea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d111      	bne.n	800fe16 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fdf2:	2008      	movs	r0, #8
 800fdf4:	f7ff ff3c 	bl	800fc70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fdf8:	2001      	movs	r0, #1
 800fdfa:	f7fd faab 	bl	800d354 <memp_malloc>
 800fdfe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d107      	bne.n	800fe16 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fe06:	79fb      	ldrb	r3, [r7, #7]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7ff fee3 	bl	800fbd4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fe0e:	2001      	movs	r0, #1
 800fe10:	f7fd faa0 	bl	800d354 <memp_malloc>
 800fe14:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d049      	beq.n	800feb0 <tcp_alloc+0x100>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fe1c:	22a4      	movs	r2, #164	@ 0xa4
 800fe1e:	2100      	movs	r1, #0
 800fe20:	68f8      	ldr	r0, [r7, #12]
 800fe22:	f007 ffbc 	bl	8017d9e <memset>
    pcb->prio = prio;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	79fa      	ldrb	r2, [r7, #7]
 800fe2a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800fe32:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800fe3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	22ff      	movs	r2, #255	@ 0xff
 800fe4a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fe52:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2206      	movs	r2, #6
 800fe58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	2206      	movs	r2, #6
 800fe60:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe68:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800fe72:	4b12      	ldr	r3, [pc, #72]	@ (800febc <tcp_alloc+0x10c>)
 800fe74:	681a      	ldr	r2, [r3, #0]
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fe7a:	4b11      	ldr	r3, [pc, #68]	@ (800fec0 <tcp_alloc+0x110>)
 800fe7c:	781a      	ldrb	r2, [r3, #0]
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800fe88:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	4a0d      	ldr	r2, [pc, #52]	@ (800fec4 <tcp_alloc+0x114>)
 800fe90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	f242 7210 	movw	r2, #10000	@ 0x2710
 800fe9a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fea4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2203      	movs	r2, #3
 800feac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800feb0:	68fb      	ldr	r3, [r7, #12]
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3710      	adds	r7, #16
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	2000fff8 	.word	0x2000fff8
 800fec0:	2001000e 	.word	0x2001000e
 800fec4:	0800fb69 	.word	0x0800fb69

0800fec8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	4603      	mov	r3, r0
 800fed0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800fed2:	2040      	movs	r0, #64	@ 0x40
 800fed4:	f7ff ff6c 	bl	800fdb0 <tcp_alloc>
 800fed8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800feda:	68fb      	ldr	r3, [r7, #12]
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3710      	adds	r7, #16
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d002      	beq.n	800fefa <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	683a      	ldr	r2, [r7, #0]
 800fef8:	611a      	str	r2, [r3, #16]
  }
}
 800fefa:	bf00      	nop
 800fefc:	370c      	adds	r7, #12
 800fefe:	46bd      	mov	sp, r7
 800ff00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff04:	4770      	bx	lr
	...

0800ff08 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d00e      	beq.n	800ff36 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	7d1b      	ldrb	r3, [r3, #20]
 800ff1c:	2b01      	cmp	r3, #1
 800ff1e:	d106      	bne.n	800ff2e <tcp_recv+0x26>
 800ff20:	4b07      	ldr	r3, [pc, #28]	@ (800ff40 <tcp_recv+0x38>)
 800ff22:	f240 72df 	movw	r2, #2015	@ 0x7df
 800ff26:	4907      	ldr	r1, [pc, #28]	@ (800ff44 <tcp_recv+0x3c>)
 800ff28:	4807      	ldr	r0, [pc, #28]	@ (800ff48 <tcp_recv+0x40>)
 800ff2a:	f007 fe99 	bl	8017c60 <iprintf>
    pcb->recv = recv;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	683a      	ldr	r2, [r7, #0]
 800ff32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800ff36:	bf00      	nop
 800ff38:	3708      	adds	r7, #8
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	0801a898 	.word	0x0801a898
 800ff44:	0801ae34 	.word	0x0801ae34
 800ff48:	0801a8dc 	.word	0x0801a8dc

0800ff4c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d00e      	beq.n	800ff7a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	7d1b      	ldrb	r3, [r3, #20]
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d106      	bne.n	800ff72 <tcp_sent+0x26>
 800ff64:	4b07      	ldr	r3, [pc, #28]	@ (800ff84 <tcp_sent+0x38>)
 800ff66:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800ff6a:	4907      	ldr	r1, [pc, #28]	@ (800ff88 <tcp_sent+0x3c>)
 800ff6c:	4807      	ldr	r0, [pc, #28]	@ (800ff8c <tcp_sent+0x40>)
 800ff6e:	f007 fe77 	bl	8017c60 <iprintf>
    pcb->sent = sent;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	683a      	ldr	r2, [r7, #0]
 800ff76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800ff7a:	bf00      	nop
 800ff7c:	3708      	adds	r7, #8
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
 800ff82:	bf00      	nop
 800ff84:	0801a898 	.word	0x0801a898
 800ff88:	0801ae5c 	.word	0x0801ae5c
 800ff8c:	0801a8dc 	.word	0x0801a8dc

0800ff90 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d00e      	beq.n	800ffbe <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	7d1b      	ldrb	r3, [r3, #20]
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d106      	bne.n	800ffb6 <tcp_err+0x26>
 800ffa8:	4b07      	ldr	r3, [pc, #28]	@ (800ffc8 <tcp_err+0x38>)
 800ffaa:	f640 020d 	movw	r2, #2061	@ 0x80d
 800ffae:	4907      	ldr	r1, [pc, #28]	@ (800ffcc <tcp_err+0x3c>)
 800ffb0:	4807      	ldr	r0, [pc, #28]	@ (800ffd0 <tcp_err+0x40>)
 800ffb2:	f007 fe55 	bl	8017c60 <iprintf>
    pcb->errf = err;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	683a      	ldr	r2, [r7, #0]
 800ffba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800ffbe:	bf00      	nop
 800ffc0:	3708      	adds	r7, #8
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	0801a898 	.word	0x0801a898
 800ffcc:	0801ae84 	.word	0x0801ae84
 800ffd0:	0801a8dc 	.word	0x0801a8dc

0800ffd4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b085      	sub	sp, #20
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d008      	beq.n	800fff6 <tcp_accept+0x22>
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	7d1b      	ldrb	r3, [r3, #20]
 800ffe8:	2b01      	cmp	r3, #1
 800ffea:	d104      	bne.n	800fff6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	683a      	ldr	r2, [r7, #0]
 800fff4:	619a      	str	r2, [r3, #24]
  }
}
 800fff6:	bf00      	nop
 800fff8:	3714      	adds	r7, #20
 800fffa:	46bd      	mov	sp, r7
 800fffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010000:	4770      	bx	lr
	...

08010004 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b084      	sub	sp, #16
 8010008:	af00      	add	r7, sp, #0
 801000a:	60f8      	str	r0, [r7, #12]
 801000c:	60b9      	str	r1, [r7, #8]
 801000e:	4613      	mov	r3, r2
 8010010:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d107      	bne.n	8010028 <tcp_poll+0x24>
 8010018:	4b0e      	ldr	r3, [pc, #56]	@ (8010054 <tcp_poll+0x50>)
 801001a:	f640 023d 	movw	r2, #2109	@ 0x83d
 801001e:	490e      	ldr	r1, [pc, #56]	@ (8010058 <tcp_poll+0x54>)
 8010020:	480e      	ldr	r0, [pc, #56]	@ (801005c <tcp_poll+0x58>)
 8010022:	f007 fe1d 	bl	8017c60 <iprintf>
 8010026:	e011      	b.n	801004c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	7d1b      	ldrb	r3, [r3, #20]
 801002c:	2b01      	cmp	r3, #1
 801002e:	d106      	bne.n	801003e <tcp_poll+0x3a>
 8010030:	4b08      	ldr	r3, [pc, #32]	@ (8010054 <tcp_poll+0x50>)
 8010032:	f640 023e 	movw	r2, #2110	@ 0x83e
 8010036:	490a      	ldr	r1, [pc, #40]	@ (8010060 <tcp_poll+0x5c>)
 8010038:	4808      	ldr	r0, [pc, #32]	@ (801005c <tcp_poll+0x58>)
 801003a:	f007 fe11 	bl	8017c60 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	68ba      	ldr	r2, [r7, #8]
 8010042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	79fa      	ldrb	r2, [r7, #7]
 801004a:	775a      	strb	r2, [r3, #29]
}
 801004c:	3710      	adds	r7, #16
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}
 8010052:	bf00      	nop
 8010054:	0801a898 	.word	0x0801a898
 8010058:	0801aeac 	.word	0x0801aeac
 801005c:	0801a8dc 	.word	0x0801a8dc
 8010060:	0801aec4 	.word	0x0801aec4

08010064 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d107      	bne.n	8010082 <tcp_pcb_purge+0x1e>
 8010072:	4b21      	ldr	r3, [pc, #132]	@ (80100f8 <tcp_pcb_purge+0x94>)
 8010074:	f640 0251 	movw	r2, #2129	@ 0x851
 8010078:	4920      	ldr	r1, [pc, #128]	@ (80100fc <tcp_pcb_purge+0x98>)
 801007a:	4821      	ldr	r0, [pc, #132]	@ (8010100 <tcp_pcb_purge+0x9c>)
 801007c:	f007 fdf0 	bl	8017c60 <iprintf>
 8010080:	e037      	b.n	80100f2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	7d1b      	ldrb	r3, [r3, #20]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d033      	beq.n	80100f2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801008e:	2b0a      	cmp	r3, #10
 8010090:	d02f      	beq.n	80100f2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010096:	2b01      	cmp	r3, #1
 8010098:	d02b      	beq.n	80100f2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d007      	beq.n	80100b2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7fe f86e 	bl	800e188 <pbuf_free>
      pcb->refused_data = NULL;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2200      	movs	r2, #0
 80100b0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d002      	beq.n	80100c0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f000 f986 	bl	80103cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80100c6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7ff fcf1 	bl	800fab4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7ff fcec 	bl	800fab4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2200      	movs	r2, #0
 80100e0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2200      	movs	r2, #0
 80100ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80100f2:	3708      	adds	r7, #8
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}
 80100f8:	0801a898 	.word	0x0801a898
 80100fc:	0801aee4 	.word	0x0801aee4
 8010100:	0801a8dc 	.word	0x0801a8dc

08010104 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b084      	sub	sp, #16
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d106      	bne.n	8010122 <tcp_pcb_remove+0x1e>
 8010114:	4b3e      	ldr	r3, [pc, #248]	@ (8010210 <tcp_pcb_remove+0x10c>)
 8010116:	f640 0283 	movw	r2, #2179	@ 0x883
 801011a:	493e      	ldr	r1, [pc, #248]	@ (8010214 <tcp_pcb_remove+0x110>)
 801011c:	483e      	ldr	r0, [pc, #248]	@ (8010218 <tcp_pcb_remove+0x114>)
 801011e:	f007 fd9f 	bl	8017c60 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d106      	bne.n	8010136 <tcp_pcb_remove+0x32>
 8010128:	4b39      	ldr	r3, [pc, #228]	@ (8010210 <tcp_pcb_remove+0x10c>)
 801012a:	f640 0284 	movw	r2, #2180	@ 0x884
 801012e:	493b      	ldr	r1, [pc, #236]	@ (801021c <tcp_pcb_remove+0x118>)
 8010130:	4839      	ldr	r0, [pc, #228]	@ (8010218 <tcp_pcb_remove+0x114>)
 8010132:	f007 fd95 	bl	8017c60 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	683a      	ldr	r2, [r7, #0]
 801013c:	429a      	cmp	r2, r3
 801013e:	d105      	bne.n	801014c <tcp_pcb_remove+0x48>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	68da      	ldr	r2, [r3, #12]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	601a      	str	r2, [r3, #0]
 801014a:	e013      	b.n	8010174 <tcp_pcb_remove+0x70>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	60fb      	str	r3, [r7, #12]
 8010152:	e00c      	b.n	801016e <tcp_pcb_remove+0x6a>
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	68db      	ldr	r3, [r3, #12]
 8010158:	683a      	ldr	r2, [r7, #0]
 801015a:	429a      	cmp	r2, r3
 801015c:	d104      	bne.n	8010168 <tcp_pcb_remove+0x64>
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	68da      	ldr	r2, [r3, #12]
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	60da      	str	r2, [r3, #12]
 8010166:	e005      	b.n	8010174 <tcp_pcb_remove+0x70>
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	68db      	ldr	r3, [r3, #12]
 801016c:	60fb      	str	r3, [r7, #12]
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d1ef      	bne.n	8010154 <tcp_pcb_remove+0x50>
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	2200      	movs	r2, #0
 8010178:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801017a:	6838      	ldr	r0, [r7, #0]
 801017c:	f7ff ff72 	bl	8010064 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	7d1b      	ldrb	r3, [r3, #20]
 8010184:	2b0a      	cmp	r3, #10
 8010186:	d013      	beq.n	80101b0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801018c:	2b01      	cmp	r3, #1
 801018e:	d00f      	beq.n	80101b0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	8b5b      	ldrh	r3, [r3, #26]
 8010194:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010198:	2b00      	cmp	r3, #0
 801019a:	d009      	beq.n	80101b0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	8b5b      	ldrh	r3, [r3, #26]
 80101a0:	f043 0302 	orr.w	r3, r3, #2
 80101a4:	b29a      	uxth	r2, r3
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80101aa:	6838      	ldr	r0, [r7, #0]
 80101ac:	f003 fbc0 	bl	8013930 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	7d1b      	ldrb	r3, [r3, #20]
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	d020      	beq.n	80101fa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d006      	beq.n	80101ce <tcp_pcb_remove+0xca>
 80101c0:	4b13      	ldr	r3, [pc, #76]	@ (8010210 <tcp_pcb_remove+0x10c>)
 80101c2:	f640 0293 	movw	r2, #2195	@ 0x893
 80101c6:	4916      	ldr	r1, [pc, #88]	@ (8010220 <tcp_pcb_remove+0x11c>)
 80101c8:	4813      	ldr	r0, [pc, #76]	@ (8010218 <tcp_pcb_remove+0x114>)
 80101ca:	f007 fd49 	bl	8017c60 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d006      	beq.n	80101e4 <tcp_pcb_remove+0xe0>
 80101d6:	4b0e      	ldr	r3, [pc, #56]	@ (8010210 <tcp_pcb_remove+0x10c>)
 80101d8:	f640 0294 	movw	r2, #2196	@ 0x894
 80101dc:	4911      	ldr	r1, [pc, #68]	@ (8010224 <tcp_pcb_remove+0x120>)
 80101de:	480e      	ldr	r0, [pc, #56]	@ (8010218 <tcp_pcb_remove+0x114>)
 80101e0:	f007 fd3e 	bl	8017c60 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d006      	beq.n	80101fa <tcp_pcb_remove+0xf6>
 80101ec:	4b08      	ldr	r3, [pc, #32]	@ (8010210 <tcp_pcb_remove+0x10c>)
 80101ee:	f640 0296 	movw	r2, #2198	@ 0x896
 80101f2:	490d      	ldr	r1, [pc, #52]	@ (8010228 <tcp_pcb_remove+0x124>)
 80101f4:	4808      	ldr	r0, [pc, #32]	@ (8010218 <tcp_pcb_remove+0x114>)
 80101f6:	f007 fd33 	bl	8017c60 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	2200      	movs	r2, #0
 80101fe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	2200      	movs	r2, #0
 8010204:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010206:	bf00      	nop
 8010208:	3710      	adds	r7, #16
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
 801020e:	bf00      	nop
 8010210:	0801a898 	.word	0x0801a898
 8010214:	0801af00 	.word	0x0801af00
 8010218:	0801a8dc 	.word	0x0801a8dc
 801021c:	0801af1c 	.word	0x0801af1c
 8010220:	0801af3c 	.word	0x0801af3c
 8010224:	0801af54 	.word	0x0801af54
 8010228:	0801af70 	.word	0x0801af70

0801022c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b082      	sub	sp, #8
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d106      	bne.n	8010248 <tcp_next_iss+0x1c>
 801023a:	4b0a      	ldr	r3, [pc, #40]	@ (8010264 <tcp_next_iss+0x38>)
 801023c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8010240:	4909      	ldr	r1, [pc, #36]	@ (8010268 <tcp_next_iss+0x3c>)
 8010242:	480a      	ldr	r0, [pc, #40]	@ (801026c <tcp_next_iss+0x40>)
 8010244:	f007 fd0c 	bl	8017c60 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010248:	4b09      	ldr	r3, [pc, #36]	@ (8010270 <tcp_next_iss+0x44>)
 801024a:	681a      	ldr	r2, [r3, #0]
 801024c:	4b09      	ldr	r3, [pc, #36]	@ (8010274 <tcp_next_iss+0x48>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	4413      	add	r3, r2
 8010252:	4a07      	ldr	r2, [pc, #28]	@ (8010270 <tcp_next_iss+0x44>)
 8010254:	6013      	str	r3, [r2, #0]
  return iss;
 8010256:	4b06      	ldr	r3, [pc, #24]	@ (8010270 <tcp_next_iss+0x44>)
 8010258:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801025a:	4618      	mov	r0, r3
 801025c:	3708      	adds	r7, #8
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}
 8010262:	bf00      	nop
 8010264:	0801a898 	.word	0x0801a898
 8010268:	0801af88 	.word	0x0801af88
 801026c:	0801a8dc 	.word	0x0801a8dc
 8010270:	20000028 	.word	0x20000028
 8010274:	2000fff8 	.word	0x2000fff8

08010278 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b086      	sub	sp, #24
 801027c:	af00      	add	r7, sp, #0
 801027e:	4603      	mov	r3, r0
 8010280:	60b9      	str	r1, [r7, #8]
 8010282:	607a      	str	r2, [r7, #4]
 8010284:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d106      	bne.n	801029a <tcp_eff_send_mss_netif+0x22>
 801028c:	4b14      	ldr	r3, [pc, #80]	@ (80102e0 <tcp_eff_send_mss_netif+0x68>)
 801028e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8010292:	4914      	ldr	r1, [pc, #80]	@ (80102e4 <tcp_eff_send_mss_netif+0x6c>)
 8010294:	4814      	ldr	r0, [pc, #80]	@ (80102e8 <tcp_eff_send_mss_netif+0x70>)
 8010296:	f007 fce3 	bl	8017c60 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d101      	bne.n	80102a4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80102a0:	89fb      	ldrh	r3, [r7, #14]
 80102a2:	e019      	b.n	80102d8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80102a8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80102aa:	8afb      	ldrh	r3, [r7, #22]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d012      	beq.n	80102d6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80102b0:	2328      	movs	r3, #40	@ 0x28
 80102b2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80102b4:	8afa      	ldrh	r2, [r7, #22]
 80102b6:	8abb      	ldrh	r3, [r7, #20]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d904      	bls.n	80102c6 <tcp_eff_send_mss_netif+0x4e>
 80102bc:	8afa      	ldrh	r2, [r7, #22]
 80102be:	8abb      	ldrh	r3, [r7, #20]
 80102c0:	1ad3      	subs	r3, r2, r3
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	e000      	b.n	80102c8 <tcp_eff_send_mss_netif+0x50>
 80102c6:	2300      	movs	r3, #0
 80102c8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80102ca:	8a7a      	ldrh	r2, [r7, #18]
 80102cc:	89fb      	ldrh	r3, [r7, #14]
 80102ce:	4293      	cmp	r3, r2
 80102d0:	bf28      	it	cs
 80102d2:	4613      	movcs	r3, r2
 80102d4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80102d6:	89fb      	ldrh	r3, [r7, #14]
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3718      	adds	r7, #24
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	0801a898 	.word	0x0801a898
 80102e4:	0801afa4 	.word	0x0801afa4
 80102e8:	0801a8dc 	.word	0x0801a8dc

080102ec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b084      	sub	sp, #16
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d119      	bne.n	8010334 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010300:	4b10      	ldr	r3, [pc, #64]	@ (8010344 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010302:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8010306:	4910      	ldr	r1, [pc, #64]	@ (8010348 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010308:	4810      	ldr	r0, [pc, #64]	@ (801034c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801030a:	f007 fca9 	bl	8017c60 <iprintf>

  while (pcb != NULL) {
 801030e:	e011      	b.n	8010334 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	429a      	cmp	r2, r3
 801031a:	d108      	bne.n	801032e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	68db      	ldr	r3, [r3, #12]
 8010320:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010322:	68f8      	ldr	r0, [r7, #12]
 8010324:	f7fe fd42 	bl	800edac <tcp_abort>
      pcb = next;
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	60fb      	str	r3, [r7, #12]
 801032c:	e002      	b.n	8010334 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	68db      	ldr	r3, [r3, #12]
 8010332:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d1ea      	bne.n	8010310 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801033a:	bf00      	nop
 801033c:	bf00      	nop
 801033e:	3710      	adds	r7, #16
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}
 8010344:	0801a898 	.word	0x0801a898
 8010348:	0801afcc 	.word	0x0801afcc
 801034c:	0801a8dc 	.word	0x0801a8dc

08010350 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b084      	sub	sp, #16
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d02a      	beq.n	80103b6 <tcp_netif_ip_addr_changed+0x66>
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d026      	beq.n	80103b6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010368:	4b15      	ldr	r3, [pc, #84]	@ (80103c0 <tcp_netif_ip_addr_changed+0x70>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	4619      	mov	r1, r3
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f7ff ffbc 	bl	80102ec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010374:	4b13      	ldr	r3, [pc, #76]	@ (80103c4 <tcp_netif_ip_addr_changed+0x74>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	4619      	mov	r1, r3
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f7ff ffb6 	bl	80102ec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d017      	beq.n	80103b6 <tcp_netif_ip_addr_changed+0x66>
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d013      	beq.n	80103b6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801038e:	4b0e      	ldr	r3, [pc, #56]	@ (80103c8 <tcp_netif_ip_addr_changed+0x78>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	60fb      	str	r3, [r7, #12]
 8010394:	e00c      	b.n	80103b0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	681a      	ldr	r2, [r3, #0]
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	429a      	cmp	r2, r3
 80103a0:	d103      	bne.n	80103aa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	681a      	ldr	r2, [r3, #0]
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	68db      	ldr	r3, [r3, #12]
 80103ae:	60fb      	str	r3, [r7, #12]
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d1ef      	bne.n	8010396 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80103b6:	bf00      	nop
 80103b8:	3710      	adds	r7, #16
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}
 80103be:	bf00      	nop
 80103c0:	20010004 	.word	0x20010004
 80103c4:	2000fffc 	.word	0x2000fffc
 80103c8:	20010000 	.word	0x20010000

080103cc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d007      	beq.n	80103ec <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7ff fb67 	bl	800fab4 <tcp_segs_free>
    pcb->ooseq = NULL;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2200      	movs	r2, #0
 80103ea:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80103ec:	bf00      	nop
 80103ee:	3708      	adds	r7, #8
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80103f4:	b590      	push	{r4, r7, lr}
 80103f6:	b08d      	sub	sp, #52	@ 0x34
 80103f8:	af04      	add	r7, sp, #16
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d105      	bne.n	8010410 <tcp_input+0x1c>
 8010404:	4b9b      	ldr	r3, [pc, #620]	@ (8010674 <tcp_input+0x280>)
 8010406:	2283      	movs	r2, #131	@ 0x83
 8010408:	499b      	ldr	r1, [pc, #620]	@ (8010678 <tcp_input+0x284>)
 801040a:	489c      	ldr	r0, [pc, #624]	@ (801067c <tcp_input+0x288>)
 801040c:	f007 fc28 	bl	8017c60 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	4a9a      	ldr	r2, [pc, #616]	@ (8010680 <tcp_input+0x28c>)
 8010416:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	895b      	ldrh	r3, [r3, #10]
 801041c:	2b13      	cmp	r3, #19
 801041e:	f240 83d1 	bls.w	8010bc4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010422:	4b98      	ldr	r3, [pc, #608]	@ (8010684 <tcp_input+0x290>)
 8010424:	695b      	ldr	r3, [r3, #20]
 8010426:	4a97      	ldr	r2, [pc, #604]	@ (8010684 <tcp_input+0x290>)
 8010428:	6812      	ldr	r2, [r2, #0]
 801042a:	4611      	mov	r1, r2
 801042c:	4618      	mov	r0, r3
 801042e:	f006 f9df 	bl	80167f0 <ip4_addr_isbroadcast_u32>
 8010432:	4603      	mov	r3, r0
 8010434:	2b00      	cmp	r3, #0
 8010436:	f040 83c7 	bne.w	8010bc8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801043a:	4b92      	ldr	r3, [pc, #584]	@ (8010684 <tcp_input+0x290>)
 801043c:	695b      	ldr	r3, [r3, #20]
 801043e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010442:	2be0      	cmp	r3, #224	@ 0xe0
 8010444:	f000 83c0 	beq.w	8010bc8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010448:	4b8d      	ldr	r3, [pc, #564]	@ (8010680 <tcp_input+0x28c>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	899b      	ldrh	r3, [r3, #12]
 801044e:	b29b      	uxth	r3, r3
 8010450:	4618      	mov	r0, r3
 8010452:	f7fc faa7 	bl	800c9a4 <lwip_htons>
 8010456:	4603      	mov	r3, r0
 8010458:	0b1b      	lsrs	r3, r3, #12
 801045a:	b29b      	uxth	r3, r3
 801045c:	b2db      	uxtb	r3, r3
 801045e:	009b      	lsls	r3, r3, #2
 8010460:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010462:	7cbb      	ldrb	r3, [r7, #18]
 8010464:	2b13      	cmp	r3, #19
 8010466:	f240 83b1 	bls.w	8010bcc <tcp_input+0x7d8>
 801046a:	7cbb      	ldrb	r3, [r7, #18]
 801046c:	b29a      	uxth	r2, r3
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	891b      	ldrh	r3, [r3, #8]
 8010472:	429a      	cmp	r2, r3
 8010474:	f200 83aa 	bhi.w	8010bcc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010478:	7cbb      	ldrb	r3, [r7, #18]
 801047a:	b29b      	uxth	r3, r3
 801047c:	3b14      	subs	r3, #20
 801047e:	b29a      	uxth	r2, r3
 8010480:	4b81      	ldr	r3, [pc, #516]	@ (8010688 <tcp_input+0x294>)
 8010482:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010484:	4b81      	ldr	r3, [pc, #516]	@ (801068c <tcp_input+0x298>)
 8010486:	2200      	movs	r2, #0
 8010488:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	895a      	ldrh	r2, [r3, #10]
 801048e:	7cbb      	ldrb	r3, [r7, #18]
 8010490:	b29b      	uxth	r3, r3
 8010492:	429a      	cmp	r2, r3
 8010494:	d309      	bcc.n	80104aa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010496:	4b7c      	ldr	r3, [pc, #496]	@ (8010688 <tcp_input+0x294>)
 8010498:	881a      	ldrh	r2, [r3, #0]
 801049a:	4b7d      	ldr	r3, [pc, #500]	@ (8010690 <tcp_input+0x29c>)
 801049c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801049e:	7cbb      	ldrb	r3, [r7, #18]
 80104a0:	4619      	mov	r1, r3
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f7fd fdea 	bl	800e07c <pbuf_remove_header>
 80104a8:	e04e      	b.n	8010548 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d105      	bne.n	80104be <tcp_input+0xca>
 80104b2:	4b70      	ldr	r3, [pc, #448]	@ (8010674 <tcp_input+0x280>)
 80104b4:	22c2      	movs	r2, #194	@ 0xc2
 80104b6:	4977      	ldr	r1, [pc, #476]	@ (8010694 <tcp_input+0x2a0>)
 80104b8:	4870      	ldr	r0, [pc, #448]	@ (801067c <tcp_input+0x288>)
 80104ba:	f007 fbd1 	bl	8017c60 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80104be:	2114      	movs	r1, #20
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f7fd fddb 	bl	800e07c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	895a      	ldrh	r2, [r3, #10]
 80104ca:	4b71      	ldr	r3, [pc, #452]	@ (8010690 <tcp_input+0x29c>)
 80104cc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80104ce:	4b6e      	ldr	r3, [pc, #440]	@ (8010688 <tcp_input+0x294>)
 80104d0:	881a      	ldrh	r2, [r3, #0]
 80104d2:	4b6f      	ldr	r3, [pc, #444]	@ (8010690 <tcp_input+0x29c>)
 80104d4:	881b      	ldrh	r3, [r3, #0]
 80104d6:	1ad3      	subs	r3, r2, r3
 80104d8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80104da:	4b6d      	ldr	r3, [pc, #436]	@ (8010690 <tcp_input+0x29c>)
 80104dc:	881b      	ldrh	r3, [r3, #0]
 80104de:	4619      	mov	r1, r3
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f7fd fdcb 	bl	800e07c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	895b      	ldrh	r3, [r3, #10]
 80104ec:	8a3a      	ldrh	r2, [r7, #16]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	f200 836e 	bhi.w	8010bd0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	685b      	ldr	r3, [r3, #4]
 80104fa:	4a64      	ldr	r2, [pc, #400]	@ (801068c <tcp_input+0x298>)
 80104fc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	8a3a      	ldrh	r2, [r7, #16]
 8010504:	4611      	mov	r1, r2
 8010506:	4618      	mov	r0, r3
 8010508:	f7fd fdb8 	bl	800e07c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	891a      	ldrh	r2, [r3, #8]
 8010510:	8a3b      	ldrh	r3, [r7, #16]
 8010512:	1ad3      	subs	r3, r2, r3
 8010514:	b29a      	uxth	r2, r3
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	895b      	ldrh	r3, [r3, #10]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d005      	beq.n	801052e <tcp_input+0x13a>
 8010522:	4b54      	ldr	r3, [pc, #336]	@ (8010674 <tcp_input+0x280>)
 8010524:	22df      	movs	r2, #223	@ 0xdf
 8010526:	495c      	ldr	r1, [pc, #368]	@ (8010698 <tcp_input+0x2a4>)
 8010528:	4854      	ldr	r0, [pc, #336]	@ (801067c <tcp_input+0x288>)
 801052a:	f007 fb99 	bl	8017c60 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	891a      	ldrh	r2, [r3, #8]
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	891b      	ldrh	r3, [r3, #8]
 8010538:	429a      	cmp	r2, r3
 801053a:	d005      	beq.n	8010548 <tcp_input+0x154>
 801053c:	4b4d      	ldr	r3, [pc, #308]	@ (8010674 <tcp_input+0x280>)
 801053e:	22e0      	movs	r2, #224	@ 0xe0
 8010540:	4956      	ldr	r1, [pc, #344]	@ (801069c <tcp_input+0x2a8>)
 8010542:	484e      	ldr	r0, [pc, #312]	@ (801067c <tcp_input+0x288>)
 8010544:	f007 fb8c 	bl	8017c60 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010548:	4b4d      	ldr	r3, [pc, #308]	@ (8010680 <tcp_input+0x28c>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	881b      	ldrh	r3, [r3, #0]
 801054e:	b29b      	uxth	r3, r3
 8010550:	4a4b      	ldr	r2, [pc, #300]	@ (8010680 <tcp_input+0x28c>)
 8010552:	6814      	ldr	r4, [r2, #0]
 8010554:	4618      	mov	r0, r3
 8010556:	f7fc fa25 	bl	800c9a4 <lwip_htons>
 801055a:	4603      	mov	r3, r0
 801055c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801055e:	4b48      	ldr	r3, [pc, #288]	@ (8010680 <tcp_input+0x28c>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	885b      	ldrh	r3, [r3, #2]
 8010564:	b29b      	uxth	r3, r3
 8010566:	4a46      	ldr	r2, [pc, #280]	@ (8010680 <tcp_input+0x28c>)
 8010568:	6814      	ldr	r4, [r2, #0]
 801056a:	4618      	mov	r0, r3
 801056c:	f7fc fa1a 	bl	800c9a4 <lwip_htons>
 8010570:	4603      	mov	r3, r0
 8010572:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010574:	4b42      	ldr	r3, [pc, #264]	@ (8010680 <tcp_input+0x28c>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	4a41      	ldr	r2, [pc, #260]	@ (8010680 <tcp_input+0x28c>)
 801057c:	6814      	ldr	r4, [r2, #0]
 801057e:	4618      	mov	r0, r3
 8010580:	f7fc fa25 	bl	800c9ce <lwip_htonl>
 8010584:	4603      	mov	r3, r0
 8010586:	6063      	str	r3, [r4, #4]
 8010588:	6863      	ldr	r3, [r4, #4]
 801058a:	4a45      	ldr	r2, [pc, #276]	@ (80106a0 <tcp_input+0x2ac>)
 801058c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801058e:	4b3c      	ldr	r3, [pc, #240]	@ (8010680 <tcp_input+0x28c>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	689b      	ldr	r3, [r3, #8]
 8010594:	4a3a      	ldr	r2, [pc, #232]	@ (8010680 <tcp_input+0x28c>)
 8010596:	6814      	ldr	r4, [r2, #0]
 8010598:	4618      	mov	r0, r3
 801059a:	f7fc fa18 	bl	800c9ce <lwip_htonl>
 801059e:	4603      	mov	r3, r0
 80105a0:	60a3      	str	r3, [r4, #8]
 80105a2:	68a3      	ldr	r3, [r4, #8]
 80105a4:	4a3f      	ldr	r2, [pc, #252]	@ (80106a4 <tcp_input+0x2b0>)
 80105a6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80105a8:	4b35      	ldr	r3, [pc, #212]	@ (8010680 <tcp_input+0x28c>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	89db      	ldrh	r3, [r3, #14]
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	4a33      	ldr	r2, [pc, #204]	@ (8010680 <tcp_input+0x28c>)
 80105b2:	6814      	ldr	r4, [r2, #0]
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7fc f9f5 	bl	800c9a4 <lwip_htons>
 80105ba:	4603      	mov	r3, r0
 80105bc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80105be:	4b30      	ldr	r3, [pc, #192]	@ (8010680 <tcp_input+0x28c>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	899b      	ldrh	r3, [r3, #12]
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7fc f9ec 	bl	800c9a4 <lwip_htons>
 80105cc:	4603      	mov	r3, r0
 80105ce:	b2db      	uxtb	r3, r3
 80105d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80105d4:	b2da      	uxtb	r2, r3
 80105d6:	4b34      	ldr	r3, [pc, #208]	@ (80106a8 <tcp_input+0x2b4>)
 80105d8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	891a      	ldrh	r2, [r3, #8]
 80105de:	4b33      	ldr	r3, [pc, #204]	@ (80106ac <tcp_input+0x2b8>)
 80105e0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80105e2:	4b31      	ldr	r3, [pc, #196]	@ (80106a8 <tcp_input+0x2b4>)
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	f003 0303 	and.w	r3, r3, #3
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d00c      	beq.n	8010608 <tcp_input+0x214>
    tcplen++;
 80105ee:	4b2f      	ldr	r3, [pc, #188]	@ (80106ac <tcp_input+0x2b8>)
 80105f0:	881b      	ldrh	r3, [r3, #0]
 80105f2:	3301      	adds	r3, #1
 80105f4:	b29a      	uxth	r2, r3
 80105f6:	4b2d      	ldr	r3, [pc, #180]	@ (80106ac <tcp_input+0x2b8>)
 80105f8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	891a      	ldrh	r2, [r3, #8]
 80105fe:	4b2b      	ldr	r3, [pc, #172]	@ (80106ac <tcp_input+0x2b8>)
 8010600:	881b      	ldrh	r3, [r3, #0]
 8010602:	429a      	cmp	r2, r3
 8010604:	f200 82e6 	bhi.w	8010bd4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010608:	2300      	movs	r3, #0
 801060a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801060c:	4b28      	ldr	r3, [pc, #160]	@ (80106b0 <tcp_input+0x2bc>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	61fb      	str	r3, [r7, #28]
 8010612:	e09d      	b.n	8010750 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010614:	69fb      	ldr	r3, [r7, #28]
 8010616:	7d1b      	ldrb	r3, [r3, #20]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d105      	bne.n	8010628 <tcp_input+0x234>
 801061c:	4b15      	ldr	r3, [pc, #84]	@ (8010674 <tcp_input+0x280>)
 801061e:	22fb      	movs	r2, #251	@ 0xfb
 8010620:	4924      	ldr	r1, [pc, #144]	@ (80106b4 <tcp_input+0x2c0>)
 8010622:	4816      	ldr	r0, [pc, #88]	@ (801067c <tcp_input+0x288>)
 8010624:	f007 fb1c 	bl	8017c60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	7d1b      	ldrb	r3, [r3, #20]
 801062c:	2b0a      	cmp	r3, #10
 801062e:	d105      	bne.n	801063c <tcp_input+0x248>
 8010630:	4b10      	ldr	r3, [pc, #64]	@ (8010674 <tcp_input+0x280>)
 8010632:	22fc      	movs	r2, #252	@ 0xfc
 8010634:	4920      	ldr	r1, [pc, #128]	@ (80106b8 <tcp_input+0x2c4>)
 8010636:	4811      	ldr	r0, [pc, #68]	@ (801067c <tcp_input+0x288>)
 8010638:	f007 fb12 	bl	8017c60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801063c:	69fb      	ldr	r3, [r7, #28]
 801063e:	7d1b      	ldrb	r3, [r3, #20]
 8010640:	2b01      	cmp	r3, #1
 8010642:	d105      	bne.n	8010650 <tcp_input+0x25c>
 8010644:	4b0b      	ldr	r3, [pc, #44]	@ (8010674 <tcp_input+0x280>)
 8010646:	22fd      	movs	r2, #253	@ 0xfd
 8010648:	491c      	ldr	r1, [pc, #112]	@ (80106bc <tcp_input+0x2c8>)
 801064a:	480c      	ldr	r0, [pc, #48]	@ (801067c <tcp_input+0x288>)
 801064c:	f007 fb08 	bl	8017c60 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010650:	69fb      	ldr	r3, [r7, #28]
 8010652:	7a1b      	ldrb	r3, [r3, #8]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d033      	beq.n	80106c0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010658:	69fb      	ldr	r3, [r7, #28]
 801065a:	7a1a      	ldrb	r2, [r3, #8]
 801065c:	4b09      	ldr	r3, [pc, #36]	@ (8010684 <tcp_input+0x290>)
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010664:	3301      	adds	r3, #1
 8010666:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010668:	429a      	cmp	r2, r3
 801066a:	d029      	beq.n	80106c0 <tcp_input+0x2cc>
      prev = pcb;
 801066c:	69fb      	ldr	r3, [r7, #28]
 801066e:	61bb      	str	r3, [r7, #24]
      continue;
 8010670:	e06b      	b.n	801074a <tcp_input+0x356>
 8010672:	bf00      	nop
 8010674:	0801b000 	.word	0x0801b000
 8010678:	0801b034 	.word	0x0801b034
 801067c:	0801b04c 	.word	0x0801b04c
 8010680:	20010020 	.word	0x20010020
 8010684:	2000a6ac 	.word	0x2000a6ac
 8010688:	20010024 	.word	0x20010024
 801068c:	20010028 	.word	0x20010028
 8010690:	20010026 	.word	0x20010026
 8010694:	0801b074 	.word	0x0801b074
 8010698:	0801b084 	.word	0x0801b084
 801069c:	0801b090 	.word	0x0801b090
 80106a0:	20010030 	.word	0x20010030
 80106a4:	20010034 	.word	0x20010034
 80106a8:	2001003c 	.word	0x2001003c
 80106ac:	2001003a 	.word	0x2001003a
 80106b0:	20010004 	.word	0x20010004
 80106b4:	0801b0b0 	.word	0x0801b0b0
 80106b8:	0801b0d8 	.word	0x0801b0d8
 80106bc:	0801b104 	.word	0x0801b104
    }

    if (pcb->remote_port == tcphdr->src &&
 80106c0:	69fb      	ldr	r3, [r7, #28]
 80106c2:	8b1a      	ldrh	r2, [r3, #24]
 80106c4:	4b72      	ldr	r3, [pc, #456]	@ (8010890 <tcp_input+0x49c>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	881b      	ldrh	r3, [r3, #0]
 80106ca:	b29b      	uxth	r3, r3
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d13a      	bne.n	8010746 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80106d0:	69fb      	ldr	r3, [r7, #28]
 80106d2:	8ada      	ldrh	r2, [r3, #22]
 80106d4:	4b6e      	ldr	r3, [pc, #440]	@ (8010890 <tcp_input+0x49c>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	885b      	ldrh	r3, [r3, #2]
 80106da:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80106dc:	429a      	cmp	r2, r3
 80106de:	d132      	bne.n	8010746 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80106e0:	69fb      	ldr	r3, [r7, #28]
 80106e2:	685a      	ldr	r2, [r3, #4]
 80106e4:	4b6b      	ldr	r3, [pc, #428]	@ (8010894 <tcp_input+0x4a0>)
 80106e6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80106e8:	429a      	cmp	r2, r3
 80106ea:	d12c      	bne.n	8010746 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80106ec:	69fb      	ldr	r3, [r7, #28]
 80106ee:	681a      	ldr	r2, [r3, #0]
 80106f0:	4b68      	ldr	r3, [pc, #416]	@ (8010894 <tcp_input+0x4a0>)
 80106f2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d126      	bne.n	8010746 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	68db      	ldr	r3, [r3, #12]
 80106fc:	69fa      	ldr	r2, [r7, #28]
 80106fe:	429a      	cmp	r2, r3
 8010700:	d106      	bne.n	8010710 <tcp_input+0x31c>
 8010702:	4b65      	ldr	r3, [pc, #404]	@ (8010898 <tcp_input+0x4a4>)
 8010704:	f240 120d 	movw	r2, #269	@ 0x10d
 8010708:	4964      	ldr	r1, [pc, #400]	@ (801089c <tcp_input+0x4a8>)
 801070a:	4865      	ldr	r0, [pc, #404]	@ (80108a0 <tcp_input+0x4ac>)
 801070c:	f007 faa8 	bl	8017c60 <iprintf>
      if (prev != NULL) {
 8010710:	69bb      	ldr	r3, [r7, #24]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d00a      	beq.n	801072c <tcp_input+0x338>
        prev->next = pcb->next;
 8010716:	69fb      	ldr	r3, [r7, #28]
 8010718:	68da      	ldr	r2, [r3, #12]
 801071a:	69bb      	ldr	r3, [r7, #24]
 801071c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801071e:	4b61      	ldr	r3, [pc, #388]	@ (80108a4 <tcp_input+0x4b0>)
 8010720:	681a      	ldr	r2, [r3, #0]
 8010722:	69fb      	ldr	r3, [r7, #28]
 8010724:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010726:	4a5f      	ldr	r2, [pc, #380]	@ (80108a4 <tcp_input+0x4b0>)
 8010728:	69fb      	ldr	r3, [r7, #28]
 801072a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801072c:	69fb      	ldr	r3, [r7, #28]
 801072e:	68db      	ldr	r3, [r3, #12]
 8010730:	69fa      	ldr	r2, [r7, #28]
 8010732:	429a      	cmp	r2, r3
 8010734:	d111      	bne.n	801075a <tcp_input+0x366>
 8010736:	4b58      	ldr	r3, [pc, #352]	@ (8010898 <tcp_input+0x4a4>)
 8010738:	f240 1215 	movw	r2, #277	@ 0x115
 801073c:	495a      	ldr	r1, [pc, #360]	@ (80108a8 <tcp_input+0x4b4>)
 801073e:	4858      	ldr	r0, [pc, #352]	@ (80108a0 <tcp_input+0x4ac>)
 8010740:	f007 fa8e 	bl	8017c60 <iprintf>
      break;
 8010744:	e009      	b.n	801075a <tcp_input+0x366>
    }
    prev = pcb;
 8010746:	69fb      	ldr	r3, [r7, #28]
 8010748:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801074a:	69fb      	ldr	r3, [r7, #28]
 801074c:	68db      	ldr	r3, [r3, #12]
 801074e:	61fb      	str	r3, [r7, #28]
 8010750:	69fb      	ldr	r3, [r7, #28]
 8010752:	2b00      	cmp	r3, #0
 8010754:	f47f af5e 	bne.w	8010614 <tcp_input+0x220>
 8010758:	e000      	b.n	801075c <tcp_input+0x368>
      break;
 801075a:	bf00      	nop
  }

  if (pcb == NULL) {
 801075c:	69fb      	ldr	r3, [r7, #28]
 801075e:	2b00      	cmp	r3, #0
 8010760:	f040 80aa 	bne.w	80108b8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010764:	4b51      	ldr	r3, [pc, #324]	@ (80108ac <tcp_input+0x4b8>)
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	61fb      	str	r3, [r7, #28]
 801076a:	e03f      	b.n	80107ec <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801076c:	69fb      	ldr	r3, [r7, #28]
 801076e:	7d1b      	ldrb	r3, [r3, #20]
 8010770:	2b0a      	cmp	r3, #10
 8010772:	d006      	beq.n	8010782 <tcp_input+0x38e>
 8010774:	4b48      	ldr	r3, [pc, #288]	@ (8010898 <tcp_input+0x4a4>)
 8010776:	f240 121f 	movw	r2, #287	@ 0x11f
 801077a:	494d      	ldr	r1, [pc, #308]	@ (80108b0 <tcp_input+0x4bc>)
 801077c:	4848      	ldr	r0, [pc, #288]	@ (80108a0 <tcp_input+0x4ac>)
 801077e:	f007 fa6f 	bl	8017c60 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010782:	69fb      	ldr	r3, [r7, #28]
 8010784:	7a1b      	ldrb	r3, [r3, #8]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d009      	beq.n	801079e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801078a:	69fb      	ldr	r3, [r7, #28]
 801078c:	7a1a      	ldrb	r2, [r3, #8]
 801078e:	4b41      	ldr	r3, [pc, #260]	@ (8010894 <tcp_input+0x4a0>)
 8010790:	685b      	ldr	r3, [r3, #4]
 8010792:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010796:	3301      	adds	r3, #1
 8010798:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801079a:	429a      	cmp	r2, r3
 801079c:	d122      	bne.n	80107e4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801079e:	69fb      	ldr	r3, [r7, #28]
 80107a0:	8b1a      	ldrh	r2, [r3, #24]
 80107a2:	4b3b      	ldr	r3, [pc, #236]	@ (8010890 <tcp_input+0x49c>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	881b      	ldrh	r3, [r3, #0]
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d11b      	bne.n	80107e6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80107ae:	69fb      	ldr	r3, [r7, #28]
 80107b0:	8ada      	ldrh	r2, [r3, #22]
 80107b2:	4b37      	ldr	r3, [pc, #220]	@ (8010890 <tcp_input+0x49c>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	885b      	ldrh	r3, [r3, #2]
 80107b8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d113      	bne.n	80107e6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80107be:	69fb      	ldr	r3, [r7, #28]
 80107c0:	685a      	ldr	r2, [r3, #4]
 80107c2:	4b34      	ldr	r3, [pc, #208]	@ (8010894 <tcp_input+0x4a0>)
 80107c4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d10d      	bne.n	80107e6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80107ca:	69fb      	ldr	r3, [r7, #28]
 80107cc:	681a      	ldr	r2, [r3, #0]
 80107ce:	4b31      	ldr	r3, [pc, #196]	@ (8010894 <tcp_input+0x4a0>)
 80107d0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d107      	bne.n	80107e6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80107d6:	69f8      	ldr	r0, [r7, #28]
 80107d8:	f000 fb56 	bl	8010e88 <tcp_timewait_input>
        }
        pbuf_free(p);
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f7fd fcd3 	bl	800e188 <pbuf_free>
        return;
 80107e2:	e1fd      	b.n	8010be0 <tcp_input+0x7ec>
        continue;
 80107e4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80107e6:	69fb      	ldr	r3, [r7, #28]
 80107e8:	68db      	ldr	r3, [r3, #12]
 80107ea:	61fb      	str	r3, [r7, #28]
 80107ec:	69fb      	ldr	r3, [r7, #28]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d1bc      	bne.n	801076c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80107f2:	2300      	movs	r3, #0
 80107f4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80107f6:	4b2f      	ldr	r3, [pc, #188]	@ (80108b4 <tcp_input+0x4c0>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	617b      	str	r3, [r7, #20]
 80107fc:	e02a      	b.n	8010854 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	7a1b      	ldrb	r3, [r3, #8]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d00c      	beq.n	8010820 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	7a1a      	ldrb	r2, [r3, #8]
 801080a:	4b22      	ldr	r3, [pc, #136]	@ (8010894 <tcp_input+0x4a0>)
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010812:	3301      	adds	r3, #1
 8010814:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010816:	429a      	cmp	r2, r3
 8010818:	d002      	beq.n	8010820 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	61bb      	str	r3, [r7, #24]
        continue;
 801081e:	e016      	b.n	801084e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	8ada      	ldrh	r2, [r3, #22]
 8010824:	4b1a      	ldr	r3, [pc, #104]	@ (8010890 <tcp_input+0x49c>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	885b      	ldrh	r3, [r3, #2]
 801082a:	b29b      	uxth	r3, r3
 801082c:	429a      	cmp	r2, r3
 801082e:	d10c      	bne.n	801084a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	4b17      	ldr	r3, [pc, #92]	@ (8010894 <tcp_input+0x4a0>)
 8010836:	695b      	ldr	r3, [r3, #20]
 8010838:	429a      	cmp	r2, r3
 801083a:	d00f      	beq.n	801085c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d00d      	beq.n	801085e <tcp_input+0x46a>
 8010842:	697b      	ldr	r3, [r7, #20]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d009      	beq.n	801085e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	68db      	ldr	r3, [r3, #12]
 8010852:	617b      	str	r3, [r7, #20]
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d1d1      	bne.n	80107fe <tcp_input+0x40a>
 801085a:	e000      	b.n	801085e <tcp_input+0x46a>
            break;
 801085c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d029      	beq.n	80108b8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010864:	69bb      	ldr	r3, [r7, #24]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d00a      	beq.n	8010880 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801086a:	697b      	ldr	r3, [r7, #20]
 801086c:	68da      	ldr	r2, [r3, #12]
 801086e:	69bb      	ldr	r3, [r7, #24]
 8010870:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010872:	4b10      	ldr	r3, [pc, #64]	@ (80108b4 <tcp_input+0x4c0>)
 8010874:	681a      	ldr	r2, [r3, #0]
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801087a:	4a0e      	ldr	r2, [pc, #56]	@ (80108b4 <tcp_input+0x4c0>)
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010880:	6978      	ldr	r0, [r7, #20]
 8010882:	f000 fa03 	bl	8010c8c <tcp_listen_input>
      }
      pbuf_free(p);
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f7fd fc7e 	bl	800e188 <pbuf_free>
      return;
 801088c:	e1a8      	b.n	8010be0 <tcp_input+0x7ec>
 801088e:	bf00      	nop
 8010890:	20010020 	.word	0x20010020
 8010894:	2000a6ac 	.word	0x2000a6ac
 8010898:	0801b000 	.word	0x0801b000
 801089c:	0801b12c 	.word	0x0801b12c
 80108a0:	0801b04c 	.word	0x0801b04c
 80108a4:	20010004 	.word	0x20010004
 80108a8:	0801b158 	.word	0x0801b158
 80108ac:	20010008 	.word	0x20010008
 80108b0:	0801b184 	.word	0x0801b184
 80108b4:	20010000 	.word	0x20010000
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	f000 8158 	beq.w	8010b70 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80108c0:	4b95      	ldr	r3, [pc, #596]	@ (8010b18 <tcp_input+0x724>)
 80108c2:	2200      	movs	r2, #0
 80108c4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	891a      	ldrh	r2, [r3, #8]
 80108ca:	4b93      	ldr	r3, [pc, #588]	@ (8010b18 <tcp_input+0x724>)
 80108cc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80108ce:	4a92      	ldr	r2, [pc, #584]	@ (8010b18 <tcp_input+0x724>)
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80108d4:	4b91      	ldr	r3, [pc, #580]	@ (8010b1c <tcp_input+0x728>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4a8f      	ldr	r2, [pc, #572]	@ (8010b18 <tcp_input+0x724>)
 80108da:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80108dc:	4b90      	ldr	r3, [pc, #576]	@ (8010b20 <tcp_input+0x72c>)
 80108de:	2200      	movs	r2, #0
 80108e0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80108e2:	4b90      	ldr	r3, [pc, #576]	@ (8010b24 <tcp_input+0x730>)
 80108e4:	2200      	movs	r2, #0
 80108e6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80108e8:	4b8f      	ldr	r3, [pc, #572]	@ (8010b28 <tcp_input+0x734>)
 80108ea:	2200      	movs	r2, #0
 80108ec:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80108ee:	4b8f      	ldr	r3, [pc, #572]	@ (8010b2c <tcp_input+0x738>)
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	f003 0308 	and.w	r3, r3, #8
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d006      	beq.n	8010908 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	7b5b      	ldrb	r3, [r3, #13]
 80108fe:	f043 0301 	orr.w	r3, r3, #1
 8010902:	b2da      	uxtb	r2, r3
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010908:	69fb      	ldr	r3, [r7, #28]
 801090a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801090c:	2b00      	cmp	r3, #0
 801090e:	d017      	beq.n	8010940 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010910:	69f8      	ldr	r0, [r7, #28]
 8010912:	f7ff f853 	bl	800f9bc <tcp_process_refused_data>
 8010916:	4603      	mov	r3, r0
 8010918:	f113 0f0d 	cmn.w	r3, #13
 801091c:	d007      	beq.n	801092e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801091e:	69fb      	ldr	r3, [r7, #28]
 8010920:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010922:	2b00      	cmp	r3, #0
 8010924:	d00c      	beq.n	8010940 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010926:	4b82      	ldr	r3, [pc, #520]	@ (8010b30 <tcp_input+0x73c>)
 8010928:	881b      	ldrh	r3, [r3, #0]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d008      	beq.n	8010940 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801092e:	69fb      	ldr	r3, [r7, #28]
 8010930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010932:	2b00      	cmp	r3, #0
 8010934:	f040 80e3 	bne.w	8010afe <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010938:	69f8      	ldr	r0, [r7, #28]
 801093a:	f003 fdff 	bl	801453c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801093e:	e0de      	b.n	8010afe <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010940:	4a7c      	ldr	r2, [pc, #496]	@ (8010b34 <tcp_input+0x740>)
 8010942:	69fb      	ldr	r3, [r7, #28]
 8010944:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010946:	69f8      	ldr	r0, [r7, #28]
 8010948:	f000 fb18 	bl	8010f7c <tcp_process>
 801094c:	4603      	mov	r3, r0
 801094e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010950:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010954:	f113 0f0d 	cmn.w	r3, #13
 8010958:	f000 80d3 	beq.w	8010b02 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801095c:	4b71      	ldr	r3, [pc, #452]	@ (8010b24 <tcp_input+0x730>)
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	f003 0308 	and.w	r3, r3, #8
 8010964:	2b00      	cmp	r3, #0
 8010966:	d015      	beq.n	8010994 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010968:	69fb      	ldr	r3, [r7, #28]
 801096a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801096e:	2b00      	cmp	r3, #0
 8010970:	d008      	beq.n	8010984 <tcp_input+0x590>
 8010972:	69fb      	ldr	r3, [r7, #28]
 8010974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010978:	69fa      	ldr	r2, [r7, #28]
 801097a:	6912      	ldr	r2, [r2, #16]
 801097c:	f06f 010d 	mvn.w	r1, #13
 8010980:	4610      	mov	r0, r2
 8010982:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010984:	69f9      	ldr	r1, [r7, #28]
 8010986:	486c      	ldr	r0, [pc, #432]	@ (8010b38 <tcp_input+0x744>)
 8010988:	f7ff fbbc 	bl	8010104 <tcp_pcb_remove>
        tcp_free(pcb);
 801098c:	69f8      	ldr	r0, [r7, #28]
 801098e:	f7fd fec9 	bl	800e724 <tcp_free>
 8010992:	e0da      	b.n	8010b4a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010994:	2300      	movs	r3, #0
 8010996:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010998:	4b63      	ldr	r3, [pc, #396]	@ (8010b28 <tcp_input+0x734>)
 801099a:	881b      	ldrh	r3, [r3, #0]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d01d      	beq.n	80109dc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80109a0:	4b61      	ldr	r3, [pc, #388]	@ (8010b28 <tcp_input+0x734>)
 80109a2:	881b      	ldrh	r3, [r3, #0]
 80109a4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80109a6:	69fb      	ldr	r3, [r7, #28]
 80109a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d00a      	beq.n	80109c6 <tcp_input+0x5d2>
 80109b0:	69fb      	ldr	r3, [r7, #28]
 80109b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109b6:	69fa      	ldr	r2, [r7, #28]
 80109b8:	6910      	ldr	r0, [r2, #16]
 80109ba:	89fa      	ldrh	r2, [r7, #14]
 80109bc:	69f9      	ldr	r1, [r7, #28]
 80109be:	4798      	blx	r3
 80109c0:	4603      	mov	r3, r0
 80109c2:	74fb      	strb	r3, [r7, #19]
 80109c4:	e001      	b.n	80109ca <tcp_input+0x5d6>
 80109c6:	2300      	movs	r3, #0
 80109c8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80109ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80109ce:	f113 0f0d 	cmn.w	r3, #13
 80109d2:	f000 8098 	beq.w	8010b06 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80109d6:	4b54      	ldr	r3, [pc, #336]	@ (8010b28 <tcp_input+0x734>)
 80109d8:	2200      	movs	r2, #0
 80109da:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80109dc:	69f8      	ldr	r0, [r7, #28]
 80109de:	f000 f915 	bl	8010c0c <tcp_input_delayed_close>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	f040 8090 	bne.w	8010b0a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80109ea:	4b4d      	ldr	r3, [pc, #308]	@ (8010b20 <tcp_input+0x72c>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d041      	beq.n	8010a76 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80109f2:	69fb      	ldr	r3, [r7, #28]
 80109f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d006      	beq.n	8010a08 <tcp_input+0x614>
 80109fa:	4b50      	ldr	r3, [pc, #320]	@ (8010b3c <tcp_input+0x748>)
 80109fc:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010a00:	494f      	ldr	r1, [pc, #316]	@ (8010b40 <tcp_input+0x74c>)
 8010a02:	4850      	ldr	r0, [pc, #320]	@ (8010b44 <tcp_input+0x750>)
 8010a04:	f007 f92c 	bl	8017c60 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010a08:	69fb      	ldr	r3, [r7, #28]
 8010a0a:	8b5b      	ldrh	r3, [r3, #26]
 8010a0c:	f003 0310 	and.w	r3, r3, #16
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d008      	beq.n	8010a26 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010a14:	4b42      	ldr	r3, [pc, #264]	@ (8010b20 <tcp_input+0x72c>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7fd fbb5 	bl	800e188 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010a1e:	69f8      	ldr	r0, [r7, #28]
 8010a20:	f7fe f9c4 	bl	800edac <tcp_abort>
            goto aborted;
 8010a24:	e091      	b.n	8010b4a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010a26:	69fb      	ldr	r3, [r7, #28]
 8010a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d00c      	beq.n	8010a4a <tcp_input+0x656>
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010a36:	69fb      	ldr	r3, [r7, #28]
 8010a38:	6918      	ldr	r0, [r3, #16]
 8010a3a:	4b39      	ldr	r3, [pc, #228]	@ (8010b20 <tcp_input+0x72c>)
 8010a3c:	681a      	ldr	r2, [r3, #0]
 8010a3e:	2300      	movs	r3, #0
 8010a40:	69f9      	ldr	r1, [r7, #28]
 8010a42:	47a0      	blx	r4
 8010a44:	4603      	mov	r3, r0
 8010a46:	74fb      	strb	r3, [r7, #19]
 8010a48:	e008      	b.n	8010a5c <tcp_input+0x668>
 8010a4a:	4b35      	ldr	r3, [pc, #212]	@ (8010b20 <tcp_input+0x72c>)
 8010a4c:	681a      	ldr	r2, [r3, #0]
 8010a4e:	2300      	movs	r3, #0
 8010a50:	69f9      	ldr	r1, [r7, #28]
 8010a52:	2000      	movs	r0, #0
 8010a54:	f7ff f888 	bl	800fb68 <tcp_recv_null>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010a5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010a60:	f113 0f0d 	cmn.w	r3, #13
 8010a64:	d053      	beq.n	8010b0e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010a66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d003      	beq.n	8010a76 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8010b20 <tcp_input+0x72c>)
 8010a70:	681a      	ldr	r2, [r3, #0]
 8010a72:	69fb      	ldr	r3, [r7, #28]
 8010a74:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010a76:	4b2b      	ldr	r3, [pc, #172]	@ (8010b24 <tcp_input+0x730>)
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	f003 0320 	and.w	r3, r3, #32
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d030      	beq.n	8010ae4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010a82:	69fb      	ldr	r3, [r7, #28]
 8010a84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d009      	beq.n	8010a9e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010a8a:	69fb      	ldr	r3, [r7, #28]
 8010a8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010a8e:	7b5a      	ldrb	r2, [r3, #13]
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010a94:	f042 0220 	orr.w	r2, r2, #32
 8010a98:	b2d2      	uxtb	r2, r2
 8010a9a:	735a      	strb	r2, [r3, #13]
 8010a9c:	e022      	b.n	8010ae4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010a9e:	69fb      	ldr	r3, [r7, #28]
 8010aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010aa2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010aa6:	d005      	beq.n	8010ab4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010aa8:	69fb      	ldr	r3, [r7, #28]
 8010aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010aac:	3301      	adds	r3, #1
 8010aae:	b29a      	uxth	r2, r3
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010ab4:	69fb      	ldr	r3, [r7, #28]
 8010ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d00b      	beq.n	8010ad6 <tcp_input+0x6e2>
 8010abe:	69fb      	ldr	r3, [r7, #28]
 8010ac0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	6918      	ldr	r0, [r3, #16]
 8010ac8:	2300      	movs	r3, #0
 8010aca:	2200      	movs	r2, #0
 8010acc:	69f9      	ldr	r1, [r7, #28]
 8010ace:	47a0      	blx	r4
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	74fb      	strb	r3, [r7, #19]
 8010ad4:	e001      	b.n	8010ada <tcp_input+0x6e6>
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010ada:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ade:	f113 0f0d 	cmn.w	r3, #13
 8010ae2:	d016      	beq.n	8010b12 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010ae4:	4b13      	ldr	r3, [pc, #76]	@ (8010b34 <tcp_input+0x740>)
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010aea:	69f8      	ldr	r0, [r7, #28]
 8010aec:	f000 f88e 	bl	8010c0c <tcp_input_delayed_close>
 8010af0:	4603      	mov	r3, r0
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d128      	bne.n	8010b48 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010af6:	69f8      	ldr	r0, [r7, #28]
 8010af8:	f002 ff1a 	bl	8013930 <tcp_output>
 8010afc:	e025      	b.n	8010b4a <tcp_input+0x756>
        goto aborted;
 8010afe:	bf00      	nop
 8010b00:	e023      	b.n	8010b4a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010b02:	bf00      	nop
 8010b04:	e021      	b.n	8010b4a <tcp_input+0x756>
              goto aborted;
 8010b06:	bf00      	nop
 8010b08:	e01f      	b.n	8010b4a <tcp_input+0x756>
          goto aborted;
 8010b0a:	bf00      	nop
 8010b0c:	e01d      	b.n	8010b4a <tcp_input+0x756>
            goto aborted;
 8010b0e:	bf00      	nop
 8010b10:	e01b      	b.n	8010b4a <tcp_input+0x756>
              goto aborted;
 8010b12:	bf00      	nop
 8010b14:	e019      	b.n	8010b4a <tcp_input+0x756>
 8010b16:	bf00      	nop
 8010b18:	20010010 	.word	0x20010010
 8010b1c:	20010020 	.word	0x20010020
 8010b20:	20010040 	.word	0x20010040
 8010b24:	2001003d 	.word	0x2001003d
 8010b28:	20010038 	.word	0x20010038
 8010b2c:	2001003c 	.word	0x2001003c
 8010b30:	2001003a 	.word	0x2001003a
 8010b34:	20010044 	.word	0x20010044
 8010b38:	20010004 	.word	0x20010004
 8010b3c:	0801b000 	.word	0x0801b000
 8010b40:	0801b1b4 	.word	0x0801b1b4
 8010b44:	0801b04c 	.word	0x0801b04c
          goto aborted;
 8010b48:	bf00      	nop
    tcp_input_pcb = NULL;
 8010b4a:	4b27      	ldr	r3, [pc, #156]	@ (8010be8 <tcp_input+0x7f4>)
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010b50:	4b26      	ldr	r3, [pc, #152]	@ (8010bec <tcp_input+0x7f8>)
 8010b52:	2200      	movs	r2, #0
 8010b54:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010b56:	4b26      	ldr	r3, [pc, #152]	@ (8010bf0 <tcp_input+0x7fc>)
 8010b58:	685b      	ldr	r3, [r3, #4]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d03f      	beq.n	8010bde <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010b5e:	4b24      	ldr	r3, [pc, #144]	@ (8010bf0 <tcp_input+0x7fc>)
 8010b60:	685b      	ldr	r3, [r3, #4]
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7fd fb10 	bl	800e188 <pbuf_free>
      inseg.p = NULL;
 8010b68:	4b21      	ldr	r3, [pc, #132]	@ (8010bf0 <tcp_input+0x7fc>)
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010b6e:	e036      	b.n	8010bde <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010b70:	4b20      	ldr	r3, [pc, #128]	@ (8010bf4 <tcp_input+0x800>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	899b      	ldrh	r3, [r3, #12]
 8010b76:	b29b      	uxth	r3, r3
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7fb ff13 	bl	800c9a4 <lwip_htons>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	b2db      	uxtb	r3, r3
 8010b82:	f003 0304 	and.w	r3, r3, #4
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d118      	bne.n	8010bbc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8010bf8 <tcp_input+0x804>)
 8010b8c:	6819      	ldr	r1, [r3, #0]
 8010b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8010bfc <tcp_input+0x808>)
 8010b90:	881b      	ldrh	r3, [r3, #0]
 8010b92:	461a      	mov	r2, r3
 8010b94:	4b1a      	ldr	r3, [pc, #104]	@ (8010c00 <tcp_input+0x80c>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b9a:	4b16      	ldr	r3, [pc, #88]	@ (8010bf4 <tcp_input+0x800>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b9e:	885b      	ldrh	r3, [r3, #2]
 8010ba0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ba2:	4a14      	ldr	r2, [pc, #80]	@ (8010bf4 <tcp_input+0x800>)
 8010ba4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ba6:	8812      	ldrh	r2, [r2, #0]
 8010ba8:	b292      	uxth	r2, r2
 8010baa:	9202      	str	r2, [sp, #8]
 8010bac:	9301      	str	r3, [sp, #4]
 8010bae:	4b15      	ldr	r3, [pc, #84]	@ (8010c04 <tcp_input+0x810>)
 8010bb0:	9300      	str	r3, [sp, #0]
 8010bb2:	4b15      	ldr	r3, [pc, #84]	@ (8010c08 <tcp_input+0x814>)
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	2000      	movs	r0, #0
 8010bb8:	f003 fc6e 	bl	8014498 <tcp_rst>
    pbuf_free(p);
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f7fd fae3 	bl	800e188 <pbuf_free>
  return;
 8010bc2:	e00c      	b.n	8010bde <tcp_input+0x7ea>
    goto dropped;
 8010bc4:	bf00      	nop
 8010bc6:	e006      	b.n	8010bd6 <tcp_input+0x7e2>
    goto dropped;
 8010bc8:	bf00      	nop
 8010bca:	e004      	b.n	8010bd6 <tcp_input+0x7e2>
    goto dropped;
 8010bcc:	bf00      	nop
 8010bce:	e002      	b.n	8010bd6 <tcp_input+0x7e2>
      goto dropped;
 8010bd0:	bf00      	nop
 8010bd2:	e000      	b.n	8010bd6 <tcp_input+0x7e2>
      goto dropped;
 8010bd4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f7fd fad6 	bl	800e188 <pbuf_free>
 8010bdc:	e000      	b.n	8010be0 <tcp_input+0x7ec>
  return;
 8010bde:	bf00      	nop
}
 8010be0:	3724      	adds	r7, #36	@ 0x24
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd90      	pop	{r4, r7, pc}
 8010be6:	bf00      	nop
 8010be8:	20010044 	.word	0x20010044
 8010bec:	20010040 	.word	0x20010040
 8010bf0:	20010010 	.word	0x20010010
 8010bf4:	20010020 	.word	0x20010020
 8010bf8:	20010034 	.word	0x20010034
 8010bfc:	2001003a 	.word	0x2001003a
 8010c00:	20010030 	.word	0x20010030
 8010c04:	2000a6bc 	.word	0x2000a6bc
 8010c08:	2000a6c0 	.word	0x2000a6c0

08010c0c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b082      	sub	sp, #8
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d106      	bne.n	8010c28 <tcp_input_delayed_close+0x1c>
 8010c1a:	4b17      	ldr	r3, [pc, #92]	@ (8010c78 <tcp_input_delayed_close+0x6c>)
 8010c1c:	f240 225a 	movw	r2, #602	@ 0x25a
 8010c20:	4916      	ldr	r1, [pc, #88]	@ (8010c7c <tcp_input_delayed_close+0x70>)
 8010c22:	4817      	ldr	r0, [pc, #92]	@ (8010c80 <tcp_input_delayed_close+0x74>)
 8010c24:	f007 f81c 	bl	8017c60 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010c28:	4b16      	ldr	r3, [pc, #88]	@ (8010c84 <tcp_input_delayed_close+0x78>)
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	f003 0310 	and.w	r3, r3, #16
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d01c      	beq.n	8010c6e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	8b5b      	ldrh	r3, [r3, #26]
 8010c38:	f003 0310 	and.w	r3, r3, #16
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d10d      	bne.n	8010c5c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d008      	beq.n	8010c5c <tcp_input_delayed_close+0x50>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c50:	687a      	ldr	r2, [r7, #4]
 8010c52:	6912      	ldr	r2, [r2, #16]
 8010c54:	f06f 010e 	mvn.w	r1, #14
 8010c58:	4610      	mov	r0, r2
 8010c5a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010c5c:	6879      	ldr	r1, [r7, #4]
 8010c5e:	480a      	ldr	r0, [pc, #40]	@ (8010c88 <tcp_input_delayed_close+0x7c>)
 8010c60:	f7ff fa50 	bl	8010104 <tcp_pcb_remove>
    tcp_free(pcb);
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f7fd fd5d 	bl	800e724 <tcp_free>
    return 1;
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e000      	b.n	8010c70 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010c6e:	2300      	movs	r3, #0
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	3708      	adds	r7, #8
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}
 8010c78:	0801b000 	.word	0x0801b000
 8010c7c:	0801b1d0 	.word	0x0801b1d0
 8010c80:	0801b04c 	.word	0x0801b04c
 8010c84:	2001003d 	.word	0x2001003d
 8010c88:	20010004 	.word	0x20010004

08010c8c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010c8c:	b590      	push	{r4, r7, lr}
 8010c8e:	b08b      	sub	sp, #44	@ 0x2c
 8010c90:	af04      	add	r7, sp, #16
 8010c92:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010c94:	4b6f      	ldr	r3, [pc, #444]	@ (8010e54 <tcp_listen_input+0x1c8>)
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	f003 0304 	and.w	r3, r3, #4
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f040 80d2 	bne.w	8010e46 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d106      	bne.n	8010cb6 <tcp_listen_input+0x2a>
 8010ca8:	4b6b      	ldr	r3, [pc, #428]	@ (8010e58 <tcp_listen_input+0x1cc>)
 8010caa:	f240 2281 	movw	r2, #641	@ 0x281
 8010cae:	496b      	ldr	r1, [pc, #428]	@ (8010e5c <tcp_listen_input+0x1d0>)
 8010cb0:	486b      	ldr	r0, [pc, #428]	@ (8010e60 <tcp_listen_input+0x1d4>)
 8010cb2:	f006 ffd5 	bl	8017c60 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010cb6:	4b67      	ldr	r3, [pc, #412]	@ (8010e54 <tcp_listen_input+0x1c8>)
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	f003 0310 	and.w	r3, r3, #16
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d019      	beq.n	8010cf6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010cc2:	4b68      	ldr	r3, [pc, #416]	@ (8010e64 <tcp_listen_input+0x1d8>)
 8010cc4:	6819      	ldr	r1, [r3, #0]
 8010cc6:	4b68      	ldr	r3, [pc, #416]	@ (8010e68 <tcp_listen_input+0x1dc>)
 8010cc8:	881b      	ldrh	r3, [r3, #0]
 8010cca:	461a      	mov	r2, r3
 8010ccc:	4b67      	ldr	r3, [pc, #412]	@ (8010e6c <tcp_listen_input+0x1e0>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010cd2:	4b67      	ldr	r3, [pc, #412]	@ (8010e70 <tcp_listen_input+0x1e4>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010cd6:	885b      	ldrh	r3, [r3, #2]
 8010cd8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010cda:	4a65      	ldr	r2, [pc, #404]	@ (8010e70 <tcp_listen_input+0x1e4>)
 8010cdc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010cde:	8812      	ldrh	r2, [r2, #0]
 8010ce0:	b292      	uxth	r2, r2
 8010ce2:	9202      	str	r2, [sp, #8]
 8010ce4:	9301      	str	r3, [sp, #4]
 8010ce6:	4b63      	ldr	r3, [pc, #396]	@ (8010e74 <tcp_listen_input+0x1e8>)
 8010ce8:	9300      	str	r3, [sp, #0]
 8010cea:	4b63      	ldr	r3, [pc, #396]	@ (8010e78 <tcp_listen_input+0x1ec>)
 8010cec:	4602      	mov	r2, r0
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f003 fbd2 	bl	8014498 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010cf4:	e0a9      	b.n	8010e4a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010cf6:	4b57      	ldr	r3, [pc, #348]	@ (8010e54 <tcp_listen_input+0x1c8>)
 8010cf8:	781b      	ldrb	r3, [r3, #0]
 8010cfa:	f003 0302 	and.w	r3, r3, #2
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	f000 80a3 	beq.w	8010e4a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	7d5b      	ldrb	r3, [r3, #21]
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f7ff f851 	bl	800fdb0 <tcp_alloc>
 8010d0e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d111      	bne.n	8010d3a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	699b      	ldr	r3, [r3, #24]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d00a      	beq.n	8010d34 <tcp_listen_input+0xa8>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	699b      	ldr	r3, [r3, #24]
 8010d22:	687a      	ldr	r2, [r7, #4]
 8010d24:	6910      	ldr	r0, [r2, #16]
 8010d26:	f04f 32ff 	mov.w	r2, #4294967295
 8010d2a:	2100      	movs	r1, #0
 8010d2c:	4798      	blx	r3
 8010d2e:	4603      	mov	r3, r0
 8010d30:	73bb      	strb	r3, [r7, #14]
      return;
 8010d32:	e08b      	b.n	8010e4c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010d34:	23f0      	movs	r3, #240	@ 0xf0
 8010d36:	73bb      	strb	r3, [r7, #14]
      return;
 8010d38:	e088      	b.n	8010e4c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010d3a:	4b50      	ldr	r3, [pc, #320]	@ (8010e7c <tcp_listen_input+0x1f0>)
 8010d3c:	695a      	ldr	r2, [r3, #20]
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010d42:	4b4e      	ldr	r3, [pc, #312]	@ (8010e7c <tcp_listen_input+0x1f0>)
 8010d44:	691a      	ldr	r2, [r3, #16]
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	8ada      	ldrh	r2, [r3, #22]
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010d52:	4b47      	ldr	r3, [pc, #284]	@ (8010e70 <tcp_listen_input+0x1e4>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	881b      	ldrh	r3, [r3, #0]
 8010d58:	b29a      	uxth	r2, r3
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	2203      	movs	r2, #3
 8010d62:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010d64:	4b41      	ldr	r3, [pc, #260]	@ (8010e6c <tcp_listen_input+0x1e0>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	1c5a      	adds	r2, r3, #1
 8010d6a:	697b      	ldr	r3, [r7, #20]
 8010d6c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8010d76:	6978      	ldr	r0, [r7, #20]
 8010d78:	f7ff fa58 	bl	801022c <tcp_next_iss>
 8010d7c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	693a      	ldr	r2, [r7, #16]
 8010d82:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	693a      	ldr	r2, [r7, #16]
 8010d88:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	693a      	ldr	r2, [r7, #16]
 8010d8e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	693a      	ldr	r2, [r7, #16]
 8010d94:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010d96:	4b35      	ldr	r3, [pc, #212]	@ (8010e6c <tcp_listen_input+0x1e0>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	1e5a      	subs	r2, r3, #1
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	691a      	ldr	r2, [r3, #16]
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	687a      	ldr	r2, [r7, #4]
 8010dac:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	7a5b      	ldrb	r3, [r3, #9]
 8010db2:	f003 030c 	and.w	r3, r3, #12
 8010db6:	b2da      	uxtb	r2, r3
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	7a1a      	ldrb	r2, [r3, #8]
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8010e80 <tcp_listen_input+0x1f4>)
 8010dc6:	681a      	ldr	r2, [r3, #0]
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	60da      	str	r2, [r3, #12]
 8010dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8010e80 <tcp_listen_input+0x1f4>)
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	6013      	str	r3, [r2, #0]
 8010dd2:	f003 fd23 	bl	801481c <tcp_timer_needed>
 8010dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8010e84 <tcp_listen_input+0x1f8>)
 8010dd8:	2201      	movs	r2, #1
 8010dda:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010ddc:	6978      	ldr	r0, [r7, #20]
 8010dde:	f001 fd8b 	bl	80128f8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010de2:	4b23      	ldr	r3, [pc, #140]	@ (8010e70 <tcp_listen_input+0x1e4>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	89db      	ldrh	r3, [r3, #14]
 8010de8:	b29a      	uxth	r2, r3
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	3304      	adds	r3, #4
 8010e04:	4618      	mov	r0, r3
 8010e06:	f005 fa5d 	bl	80162c4 <ip4_route>
 8010e0a:	4601      	mov	r1, r0
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	3304      	adds	r3, #4
 8010e10:	461a      	mov	r2, r3
 8010e12:	4620      	mov	r0, r4
 8010e14:	f7ff fa30 	bl	8010278 <tcp_eff_send_mss_netif>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010e20:	2112      	movs	r1, #18
 8010e22:	6978      	ldr	r0, [r7, #20]
 8010e24:	f002 fc96 	bl	8013754 <tcp_enqueue_flags>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d004      	beq.n	8010e3e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010e34:	2100      	movs	r1, #0
 8010e36:	6978      	ldr	r0, [r7, #20]
 8010e38:	f7fd fefa 	bl	800ec30 <tcp_abandon>
      return;
 8010e3c:	e006      	b.n	8010e4c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010e3e:	6978      	ldr	r0, [r7, #20]
 8010e40:	f002 fd76 	bl	8013930 <tcp_output>
  return;
 8010e44:	e001      	b.n	8010e4a <tcp_listen_input+0x1be>
    return;
 8010e46:	bf00      	nop
 8010e48:	e000      	b.n	8010e4c <tcp_listen_input+0x1c0>
  return;
 8010e4a:	bf00      	nop
}
 8010e4c:	371c      	adds	r7, #28
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd90      	pop	{r4, r7, pc}
 8010e52:	bf00      	nop
 8010e54:	2001003c 	.word	0x2001003c
 8010e58:	0801b000 	.word	0x0801b000
 8010e5c:	0801b1f8 	.word	0x0801b1f8
 8010e60:	0801b04c 	.word	0x0801b04c
 8010e64:	20010034 	.word	0x20010034
 8010e68:	2001003a 	.word	0x2001003a
 8010e6c:	20010030 	.word	0x20010030
 8010e70:	20010020 	.word	0x20010020
 8010e74:	2000a6bc 	.word	0x2000a6bc
 8010e78:	2000a6c0 	.word	0x2000a6c0
 8010e7c:	2000a6ac 	.word	0x2000a6ac
 8010e80:	20010004 	.word	0x20010004
 8010e84:	2001000c 	.word	0x2001000c

08010e88 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b086      	sub	sp, #24
 8010e8c:	af04      	add	r7, sp, #16
 8010e8e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010e90:	4b2f      	ldr	r3, [pc, #188]	@ (8010f50 <tcp_timewait_input+0xc8>)
 8010e92:	781b      	ldrb	r3, [r3, #0]
 8010e94:	f003 0304 	and.w	r3, r3, #4
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d153      	bne.n	8010f44 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d106      	bne.n	8010eb0 <tcp_timewait_input+0x28>
 8010ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8010f54 <tcp_timewait_input+0xcc>)
 8010ea4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8010ea8:	492b      	ldr	r1, [pc, #172]	@ (8010f58 <tcp_timewait_input+0xd0>)
 8010eaa:	482c      	ldr	r0, [pc, #176]	@ (8010f5c <tcp_timewait_input+0xd4>)
 8010eac:	f006 fed8 	bl	8017c60 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010eb0:	4b27      	ldr	r3, [pc, #156]	@ (8010f50 <tcp_timewait_input+0xc8>)
 8010eb2:	781b      	ldrb	r3, [r3, #0]
 8010eb4:	f003 0302 	and.w	r3, r3, #2
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d02a      	beq.n	8010f12 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010ebc:	4b28      	ldr	r3, [pc, #160]	@ (8010f60 <tcp_timewait_input+0xd8>)
 8010ebe:	681a      	ldr	r2, [r3, #0]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ec4:	1ad3      	subs	r3, r2, r3
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	db2d      	blt.n	8010f26 <tcp_timewait_input+0x9e>
 8010eca:	4b25      	ldr	r3, [pc, #148]	@ (8010f60 <tcp_timewait_input+0xd8>)
 8010ecc:	681a      	ldr	r2, [r3, #0]
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ed2:	6879      	ldr	r1, [r7, #4]
 8010ed4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010ed6:	440b      	add	r3, r1
 8010ed8:	1ad3      	subs	r3, r2, r3
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	dc23      	bgt.n	8010f26 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ede:	4b21      	ldr	r3, [pc, #132]	@ (8010f64 <tcp_timewait_input+0xdc>)
 8010ee0:	6819      	ldr	r1, [r3, #0]
 8010ee2:	4b21      	ldr	r3, [pc, #132]	@ (8010f68 <tcp_timewait_input+0xe0>)
 8010ee4:	881b      	ldrh	r3, [r3, #0]
 8010ee6:	461a      	mov	r2, r3
 8010ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8010f60 <tcp_timewait_input+0xd8>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010eee:	4b1f      	ldr	r3, [pc, #124]	@ (8010f6c <tcp_timewait_input+0xe4>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ef2:	885b      	ldrh	r3, [r3, #2]
 8010ef4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8010f6c <tcp_timewait_input+0xe4>)
 8010ef8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010efa:	8812      	ldrh	r2, [r2, #0]
 8010efc:	b292      	uxth	r2, r2
 8010efe:	9202      	str	r2, [sp, #8]
 8010f00:	9301      	str	r3, [sp, #4]
 8010f02:	4b1b      	ldr	r3, [pc, #108]	@ (8010f70 <tcp_timewait_input+0xe8>)
 8010f04:	9300      	str	r3, [sp, #0]
 8010f06:	4b1b      	ldr	r3, [pc, #108]	@ (8010f74 <tcp_timewait_input+0xec>)
 8010f08:	4602      	mov	r2, r0
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f003 fac4 	bl	8014498 <tcp_rst>
      return;
 8010f10:	e01b      	b.n	8010f4a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010f12:	4b0f      	ldr	r3, [pc, #60]	@ (8010f50 <tcp_timewait_input+0xc8>)
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	f003 0301 	and.w	r3, r3, #1
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d003      	beq.n	8010f26 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010f1e:	4b16      	ldr	r3, [pc, #88]	@ (8010f78 <tcp_timewait_input+0xf0>)
 8010f20:	681a      	ldr	r2, [r3, #0]
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010f26:	4b10      	ldr	r3, [pc, #64]	@ (8010f68 <tcp_timewait_input+0xe0>)
 8010f28:	881b      	ldrh	r3, [r3, #0]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d00c      	beq.n	8010f48 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	8b5b      	ldrh	r3, [r3, #26]
 8010f32:	f043 0302 	orr.w	r3, r3, #2
 8010f36:	b29a      	uxth	r2, r3
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f002 fcf7 	bl	8013930 <tcp_output>
  }
  return;
 8010f42:	e001      	b.n	8010f48 <tcp_timewait_input+0xc0>
    return;
 8010f44:	bf00      	nop
 8010f46:	e000      	b.n	8010f4a <tcp_timewait_input+0xc2>
  return;
 8010f48:	bf00      	nop
}
 8010f4a:	3708      	adds	r7, #8
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}
 8010f50:	2001003c 	.word	0x2001003c
 8010f54:	0801b000 	.word	0x0801b000
 8010f58:	0801b218 	.word	0x0801b218
 8010f5c:	0801b04c 	.word	0x0801b04c
 8010f60:	20010030 	.word	0x20010030
 8010f64:	20010034 	.word	0x20010034
 8010f68:	2001003a 	.word	0x2001003a
 8010f6c:	20010020 	.word	0x20010020
 8010f70:	2000a6bc 	.word	0x2000a6bc
 8010f74:	2000a6c0 	.word	0x2000a6c0
 8010f78:	2000fff8 	.word	0x2000fff8

08010f7c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010f7c:	b590      	push	{r4, r7, lr}
 8010f7e:	b08d      	sub	sp, #52	@ 0x34
 8010f80:	af04      	add	r7, sp, #16
 8010f82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010f84:	2300      	movs	r3, #0
 8010f86:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d106      	bne.n	8010fa0 <tcp_process+0x24>
 8010f92:	4b9d      	ldr	r3, [pc, #628]	@ (8011208 <tcp_process+0x28c>)
 8010f94:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010f98:	499c      	ldr	r1, [pc, #624]	@ (801120c <tcp_process+0x290>)
 8010f9a:	489d      	ldr	r0, [pc, #628]	@ (8011210 <tcp_process+0x294>)
 8010f9c:	f006 fe60 	bl	8017c60 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010fa0:	4b9c      	ldr	r3, [pc, #624]	@ (8011214 <tcp_process+0x298>)
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	f003 0304 	and.w	r3, r3, #4
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d04e      	beq.n	801104a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	7d1b      	ldrb	r3, [r3, #20]
 8010fb0:	2b02      	cmp	r3, #2
 8010fb2:	d108      	bne.n	8010fc6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010fb8:	4b97      	ldr	r3, [pc, #604]	@ (8011218 <tcp_process+0x29c>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	d123      	bne.n	8011008 <tcp_process+0x8c>
        acceptable = 1;
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	76fb      	strb	r3, [r7, #27]
 8010fc4:	e020      	b.n	8011008 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fca:	4b94      	ldr	r3, [pc, #592]	@ (801121c <tcp_process+0x2a0>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d102      	bne.n	8010fd8 <tcp_process+0x5c>
        acceptable = 1;
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	76fb      	strb	r3, [r7, #27]
 8010fd6:	e017      	b.n	8011008 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010fd8:	4b90      	ldr	r3, [pc, #576]	@ (801121c <tcp_process+0x2a0>)
 8010fda:	681a      	ldr	r2, [r3, #0]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fe0:	1ad3      	subs	r3, r2, r3
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	db10      	blt.n	8011008 <tcp_process+0x8c>
 8010fe6:	4b8d      	ldr	r3, [pc, #564]	@ (801121c <tcp_process+0x2a0>)
 8010fe8:	681a      	ldr	r2, [r3, #0]
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fee:	6879      	ldr	r1, [r7, #4]
 8010ff0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010ff2:	440b      	add	r3, r1
 8010ff4:	1ad3      	subs	r3, r2, r3
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	dc06      	bgt.n	8011008 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	8b5b      	ldrh	r3, [r3, #26]
 8010ffe:	f043 0302 	orr.w	r3, r3, #2
 8011002:	b29a      	uxth	r2, r3
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011008:	7efb      	ldrb	r3, [r7, #27]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d01b      	beq.n	8011046 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	7d1b      	ldrb	r3, [r3, #20]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d106      	bne.n	8011024 <tcp_process+0xa8>
 8011016:	4b7c      	ldr	r3, [pc, #496]	@ (8011208 <tcp_process+0x28c>)
 8011018:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801101c:	4980      	ldr	r1, [pc, #512]	@ (8011220 <tcp_process+0x2a4>)
 801101e:	487c      	ldr	r0, [pc, #496]	@ (8011210 <tcp_process+0x294>)
 8011020:	f006 fe1e 	bl	8017c60 <iprintf>
      recv_flags |= TF_RESET;
 8011024:	4b7f      	ldr	r3, [pc, #508]	@ (8011224 <tcp_process+0x2a8>)
 8011026:	781b      	ldrb	r3, [r3, #0]
 8011028:	f043 0308 	orr.w	r3, r3, #8
 801102c:	b2da      	uxtb	r2, r3
 801102e:	4b7d      	ldr	r3, [pc, #500]	@ (8011224 <tcp_process+0x2a8>)
 8011030:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	8b5b      	ldrh	r3, [r3, #26]
 8011036:	f023 0301 	bic.w	r3, r3, #1
 801103a:	b29a      	uxth	r2, r3
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011040:	f06f 030d 	mvn.w	r3, #13
 8011044:	e37a      	b.n	801173c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011046:	2300      	movs	r3, #0
 8011048:	e378      	b.n	801173c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801104a:	4b72      	ldr	r3, [pc, #456]	@ (8011214 <tcp_process+0x298>)
 801104c:	781b      	ldrb	r3, [r3, #0]
 801104e:	f003 0302 	and.w	r3, r3, #2
 8011052:	2b00      	cmp	r3, #0
 8011054:	d010      	beq.n	8011078 <tcp_process+0xfc>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	7d1b      	ldrb	r3, [r3, #20]
 801105a:	2b02      	cmp	r3, #2
 801105c:	d00c      	beq.n	8011078 <tcp_process+0xfc>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	7d1b      	ldrb	r3, [r3, #20]
 8011062:	2b03      	cmp	r3, #3
 8011064:	d008      	beq.n	8011078 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	8b5b      	ldrh	r3, [r3, #26]
 801106a:	f043 0302 	orr.w	r3, r3, #2
 801106e:	b29a      	uxth	r2, r3
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011074:	2300      	movs	r3, #0
 8011076:	e361      	b.n	801173c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	8b5b      	ldrh	r3, [r3, #26]
 801107c:	f003 0310 	and.w	r3, r3, #16
 8011080:	2b00      	cmp	r3, #0
 8011082:	d103      	bne.n	801108c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011084:	4b68      	ldr	r3, [pc, #416]	@ (8011228 <tcp_process+0x2ac>)
 8011086:	681a      	ldr	r2, [r3, #0]
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2200      	movs	r2, #0
 8011090:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
  pcb->persist_probe = 0;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2200      	movs	r2, #0
 8011098:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

  tcp_parseopt(pcb);
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f001 fc2b 	bl	80128f8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	7d1b      	ldrb	r3, [r3, #20]
 80110a6:	3b02      	subs	r3, #2
 80110a8:	2b07      	cmp	r3, #7
 80110aa:	f200 8337 	bhi.w	801171c <tcp_process+0x7a0>
 80110ae:	a201      	add	r2, pc, #4	@ (adr r2, 80110b4 <tcp_process+0x138>)
 80110b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110b4:	080110d5 	.word	0x080110d5
 80110b8:	08011305 	.word	0x08011305
 80110bc:	0801147d 	.word	0x0801147d
 80110c0:	080114a7 	.word	0x080114a7
 80110c4:	080115cb 	.word	0x080115cb
 80110c8:	0801147d 	.word	0x0801147d
 80110cc:	08011657 	.word	0x08011657
 80110d0:	080116e7 	.word	0x080116e7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80110d4:	4b4f      	ldr	r3, [pc, #316]	@ (8011214 <tcp_process+0x298>)
 80110d6:	781b      	ldrb	r3, [r3, #0]
 80110d8:	f003 0310 	and.w	r3, r3, #16
 80110dc:	2b00      	cmp	r3, #0
 80110de:	f000 80e4 	beq.w	80112aa <tcp_process+0x32e>
 80110e2:	4b4c      	ldr	r3, [pc, #304]	@ (8011214 <tcp_process+0x298>)
 80110e4:	781b      	ldrb	r3, [r3, #0]
 80110e6:	f003 0302 	and.w	r3, r3, #2
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	f000 80dd 	beq.w	80112aa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110f4:	1c5a      	adds	r2, r3, #1
 80110f6:	4b48      	ldr	r3, [pc, #288]	@ (8011218 <tcp_process+0x29c>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	429a      	cmp	r2, r3
 80110fc:	f040 80d5 	bne.w	80112aa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011100:	4b46      	ldr	r3, [pc, #280]	@ (801121c <tcp_process+0x2a0>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	1c5a      	adds	r2, r3, #1
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8011112:	4b41      	ldr	r3, [pc, #260]	@ (8011218 <tcp_process+0x29c>)
 8011114:	681a      	ldr	r2, [r3, #0]
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801111a:	4b44      	ldr	r3, [pc, #272]	@ (801122c <tcp_process+0x2b0>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	89db      	ldrh	r3, [r3, #14]
 8011120:	b29a      	uxth	r2, r3
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011134:	4b39      	ldr	r3, [pc, #228]	@ (801121c <tcp_process+0x2a0>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	1e5a      	subs	r2, r3, #1
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2204      	movs	r2, #4
 8011142:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	3304      	adds	r3, #4
 801114c:	4618      	mov	r0, r3
 801114e:	f005 f8b9 	bl	80162c4 <ip4_route>
 8011152:	4601      	mov	r1, r0
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	3304      	adds	r3, #4
 8011158:	461a      	mov	r2, r3
 801115a:	4620      	mov	r0, r4
 801115c:	f7ff f88c 	bl	8010278 <tcp_eff_send_mss_netif>
 8011160:	4603      	mov	r3, r0
 8011162:	461a      	mov	r2, r3
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801116c:	009a      	lsls	r2, r3, #2
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011172:	005b      	lsls	r3, r3, #1
 8011174:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011178:	428b      	cmp	r3, r1
 801117a:	bf38      	it	cc
 801117c:	460b      	movcc	r3, r1
 801117e:	429a      	cmp	r2, r3
 8011180:	d204      	bcs.n	801118c <tcp_process+0x210>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011186:	009b      	lsls	r3, r3, #2
 8011188:	b29b      	uxth	r3, r3
 801118a:	e00d      	b.n	80111a8 <tcp_process+0x22c>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011190:	005b      	lsls	r3, r3, #1
 8011192:	f241 121c 	movw	r2, #4380	@ 0x111c
 8011196:	4293      	cmp	r3, r2
 8011198:	d904      	bls.n	80111a4 <tcp_process+0x228>
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801119e:	005b      	lsls	r3, r3, #1
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	e001      	b.n	80111a8 <tcp_process+0x22c>
 80111a4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80111a8:	687a      	ldr	r2, [r7, #4]
 80111aa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d106      	bne.n	80111c6 <tcp_process+0x24a>
 80111b8:	4b13      	ldr	r3, [pc, #76]	@ (8011208 <tcp_process+0x28c>)
 80111ba:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80111be:	491c      	ldr	r1, [pc, #112]	@ (8011230 <tcp_process+0x2b4>)
 80111c0:	4813      	ldr	r0, [pc, #76]	@ (8011210 <tcp_process+0x294>)
 80111c2:	f006 fd4d 	bl	8017c60 <iprintf>
        --pcb->snd_queuelen;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80111cc:	3b01      	subs	r3, #1
 80111ce:	b29a      	uxth	r2, r3
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111da:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80111dc:	69fb      	ldr	r3, [r7, #28]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d12a      	bne.n	8011238 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111e6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80111e8:	69fb      	ldr	r3, [r7, #28]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d106      	bne.n	80111fc <tcp_process+0x280>
 80111ee:	4b06      	ldr	r3, [pc, #24]	@ (8011208 <tcp_process+0x28c>)
 80111f0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80111f4:	490f      	ldr	r1, [pc, #60]	@ (8011234 <tcp_process+0x2b8>)
 80111f6:	4806      	ldr	r0, [pc, #24]	@ (8011210 <tcp_process+0x294>)
 80111f8:	f006 fd32 	bl	8017c60 <iprintf>
          pcb->unsent = rseg->next;
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	681a      	ldr	r2, [r3, #0]
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011204:	e01c      	b.n	8011240 <tcp_process+0x2c4>
 8011206:	bf00      	nop
 8011208:	0801b000 	.word	0x0801b000
 801120c:	0801b238 	.word	0x0801b238
 8011210:	0801b04c 	.word	0x0801b04c
 8011214:	2001003c 	.word	0x2001003c
 8011218:	20010034 	.word	0x20010034
 801121c:	20010030 	.word	0x20010030
 8011220:	0801b254 	.word	0x0801b254
 8011224:	2001003d 	.word	0x2001003d
 8011228:	2000fff8 	.word	0x2000fff8
 801122c:	20010020 	.word	0x20010020
 8011230:	0801b274 	.word	0x0801b274
 8011234:	0801b28c 	.word	0x0801b28c
        } else {
          pcb->unacked = rseg->next;
 8011238:	69fb      	ldr	r3, [r7, #28]
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8011240:	69f8      	ldr	r0, [r7, #28]
 8011242:	f7fe fc4c 	bl	800fade <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801124a:	2b00      	cmp	r3, #0
 801124c:	d104      	bne.n	8011258 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011254:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011256:	e006      	b.n	8011266 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2200      	movs	r2, #0
 801125c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2200      	movs	r2, #0
 8011262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801126c:	2b00      	cmp	r3, #0
 801126e:	d00a      	beq.n	8011286 <tcp_process+0x30a>
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011276:	687a      	ldr	r2, [r7, #4]
 8011278:	6910      	ldr	r0, [r2, #16]
 801127a:	2200      	movs	r2, #0
 801127c:	6879      	ldr	r1, [r7, #4]
 801127e:	4798      	blx	r3
 8011280:	4603      	mov	r3, r0
 8011282:	76bb      	strb	r3, [r7, #26]
 8011284:	e001      	b.n	801128a <tcp_process+0x30e>
 8011286:	2300      	movs	r3, #0
 8011288:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801128a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801128e:	f113 0f0d 	cmn.w	r3, #13
 8011292:	d102      	bne.n	801129a <tcp_process+0x31e>
          return ERR_ABRT;
 8011294:	f06f 030c 	mvn.w	r3, #12
 8011298:	e250      	b.n	801173c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	8b5b      	ldrh	r3, [r3, #26]
 801129e:	f043 0302 	orr.w	r3, r3, #2
 80112a2:	b29a      	uxth	r2, r3
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80112a8:	e23a      	b.n	8011720 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80112aa:	4b98      	ldr	r3, [pc, #608]	@ (801150c <tcp_process+0x590>)
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	f003 0310 	and.w	r3, r3, #16
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	f000 8234 	beq.w	8011720 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112b8:	4b95      	ldr	r3, [pc, #596]	@ (8011510 <tcp_process+0x594>)
 80112ba:	6819      	ldr	r1, [r3, #0]
 80112bc:	4b95      	ldr	r3, [pc, #596]	@ (8011514 <tcp_process+0x598>)
 80112be:	881b      	ldrh	r3, [r3, #0]
 80112c0:	461a      	mov	r2, r3
 80112c2:	4b95      	ldr	r3, [pc, #596]	@ (8011518 <tcp_process+0x59c>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112c8:	4b94      	ldr	r3, [pc, #592]	@ (801151c <tcp_process+0x5a0>)
 80112ca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112cc:	885b      	ldrh	r3, [r3, #2]
 80112ce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112d0:	4a92      	ldr	r2, [pc, #584]	@ (801151c <tcp_process+0x5a0>)
 80112d2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112d4:	8812      	ldrh	r2, [r2, #0]
 80112d6:	b292      	uxth	r2, r2
 80112d8:	9202      	str	r2, [sp, #8]
 80112da:	9301      	str	r3, [sp, #4]
 80112dc:	4b90      	ldr	r3, [pc, #576]	@ (8011520 <tcp_process+0x5a4>)
 80112de:	9300      	str	r3, [sp, #0]
 80112e0:	4b90      	ldr	r3, [pc, #576]	@ (8011524 <tcp_process+0x5a8>)
 80112e2:	4602      	mov	r2, r0
 80112e4:	6878      	ldr	r0, [r7, #4]
 80112e6:	f003 f8d7 	bl	8014498 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80112f0:	2b05      	cmp	r3, #5
 80112f2:	f200 8215 	bhi.w	8011720 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2200      	movs	r2, #0
 80112fa:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f002 fea3 	bl	8014048 <tcp_rexmit_rto>
      break;
 8011302:	e20d      	b.n	8011720 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011304:	4b81      	ldr	r3, [pc, #516]	@ (801150c <tcp_process+0x590>)
 8011306:	781b      	ldrb	r3, [r3, #0]
 8011308:	f003 0310 	and.w	r3, r3, #16
 801130c:	2b00      	cmp	r3, #0
 801130e:	f000 80a1 	beq.w	8011454 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011312:	4b7f      	ldr	r3, [pc, #508]	@ (8011510 <tcp_process+0x594>)
 8011314:	681a      	ldr	r2, [r3, #0]
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801131a:	1ad3      	subs	r3, r2, r3
 801131c:	3b01      	subs	r3, #1
 801131e:	2b00      	cmp	r3, #0
 8011320:	db7e      	blt.n	8011420 <tcp_process+0x4a4>
 8011322:	4b7b      	ldr	r3, [pc, #492]	@ (8011510 <tcp_process+0x594>)
 8011324:	681a      	ldr	r2, [r3, #0]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801132a:	1ad3      	subs	r3, r2, r3
 801132c:	2b00      	cmp	r3, #0
 801132e:	dc77      	bgt.n	8011420 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2204      	movs	r2, #4
 8011334:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801133a:	2b00      	cmp	r3, #0
 801133c:	d102      	bne.n	8011344 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801133e:	23fa      	movs	r3, #250	@ 0xfa
 8011340:	76bb      	strb	r3, [r7, #26]
 8011342:	e01d      	b.n	8011380 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011348:	699b      	ldr	r3, [r3, #24]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d106      	bne.n	801135c <tcp_process+0x3e0>
 801134e:	4b76      	ldr	r3, [pc, #472]	@ (8011528 <tcp_process+0x5ac>)
 8011350:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8011354:	4975      	ldr	r1, [pc, #468]	@ (801152c <tcp_process+0x5b0>)
 8011356:	4876      	ldr	r0, [pc, #472]	@ (8011530 <tcp_process+0x5b4>)
 8011358:	f006 fc82 	bl	8017c60 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011360:	699b      	ldr	r3, [r3, #24]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d00a      	beq.n	801137c <tcp_process+0x400>
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801136a:	699b      	ldr	r3, [r3, #24]
 801136c:	687a      	ldr	r2, [r7, #4]
 801136e:	6910      	ldr	r0, [r2, #16]
 8011370:	2200      	movs	r2, #0
 8011372:	6879      	ldr	r1, [r7, #4]
 8011374:	4798      	blx	r3
 8011376:	4603      	mov	r3, r0
 8011378:	76bb      	strb	r3, [r7, #26]
 801137a:	e001      	b.n	8011380 <tcp_process+0x404>
 801137c:	23f0      	movs	r3, #240	@ 0xf0
 801137e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011380:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d00a      	beq.n	801139e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011388:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801138c:	f113 0f0d 	cmn.w	r3, #13
 8011390:	d002      	beq.n	8011398 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f7fd fd0a 	bl	800edac <tcp_abort>
            }
            return ERR_ABRT;
 8011398:	f06f 030c 	mvn.w	r3, #12
 801139c:	e1ce      	b.n	801173c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f000 fae0 	bl	8011964 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80113a4:	4b63      	ldr	r3, [pc, #396]	@ (8011534 <tcp_process+0x5b8>)
 80113a6:	881b      	ldrh	r3, [r3, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d005      	beq.n	80113b8 <tcp_process+0x43c>
            recv_acked--;
 80113ac:	4b61      	ldr	r3, [pc, #388]	@ (8011534 <tcp_process+0x5b8>)
 80113ae:	881b      	ldrh	r3, [r3, #0]
 80113b0:	3b01      	subs	r3, #1
 80113b2:	b29a      	uxth	r2, r3
 80113b4:	4b5f      	ldr	r3, [pc, #380]	@ (8011534 <tcp_process+0x5b8>)
 80113b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80113bc:	009a      	lsls	r2, r3, #2
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80113c2:	005b      	lsls	r3, r3, #1
 80113c4:	f241 111c 	movw	r1, #4380	@ 0x111c
 80113c8:	428b      	cmp	r3, r1
 80113ca:	bf38      	it	cc
 80113cc:	460b      	movcc	r3, r1
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d204      	bcs.n	80113dc <tcp_process+0x460>
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	b29b      	uxth	r3, r3
 80113da:	e00d      	b.n	80113f8 <tcp_process+0x47c>
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80113e0:	005b      	lsls	r3, r3, #1
 80113e2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80113e6:	4293      	cmp	r3, r2
 80113e8:	d904      	bls.n	80113f4 <tcp_process+0x478>
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80113ee:	005b      	lsls	r3, r3, #1
 80113f0:	b29b      	uxth	r3, r3
 80113f2:	e001      	b.n	80113f8 <tcp_process+0x47c>
 80113f4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80113f8:	687a      	ldr	r2, [r7, #4]
 80113fa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80113fe:	4b4e      	ldr	r3, [pc, #312]	@ (8011538 <tcp_process+0x5bc>)
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	f003 0320 	and.w	r3, r3, #32
 8011406:	2b00      	cmp	r3, #0
 8011408:	d037      	beq.n	801147a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	8b5b      	ldrh	r3, [r3, #26]
 801140e:	f043 0302 	orr.w	r3, r3, #2
 8011412:	b29a      	uxth	r2, r3
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2207      	movs	r2, #7
 801141c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801141e:	e02c      	b.n	801147a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011420:	4b3b      	ldr	r3, [pc, #236]	@ (8011510 <tcp_process+0x594>)
 8011422:	6819      	ldr	r1, [r3, #0]
 8011424:	4b3b      	ldr	r3, [pc, #236]	@ (8011514 <tcp_process+0x598>)
 8011426:	881b      	ldrh	r3, [r3, #0]
 8011428:	461a      	mov	r2, r3
 801142a:	4b3b      	ldr	r3, [pc, #236]	@ (8011518 <tcp_process+0x59c>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011430:	4b3a      	ldr	r3, [pc, #232]	@ (801151c <tcp_process+0x5a0>)
 8011432:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011434:	885b      	ldrh	r3, [r3, #2]
 8011436:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011438:	4a38      	ldr	r2, [pc, #224]	@ (801151c <tcp_process+0x5a0>)
 801143a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801143c:	8812      	ldrh	r2, [r2, #0]
 801143e:	b292      	uxth	r2, r2
 8011440:	9202      	str	r2, [sp, #8]
 8011442:	9301      	str	r3, [sp, #4]
 8011444:	4b36      	ldr	r3, [pc, #216]	@ (8011520 <tcp_process+0x5a4>)
 8011446:	9300      	str	r3, [sp, #0]
 8011448:	4b36      	ldr	r3, [pc, #216]	@ (8011524 <tcp_process+0x5a8>)
 801144a:	4602      	mov	r2, r0
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f003 f823 	bl	8014498 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011452:	e167      	b.n	8011724 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011454:	4b2d      	ldr	r3, [pc, #180]	@ (801150c <tcp_process+0x590>)
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	f003 0302 	and.w	r3, r3, #2
 801145c:	2b00      	cmp	r3, #0
 801145e:	f000 8161 	beq.w	8011724 <tcp_process+0x7a8>
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011466:	1e5a      	subs	r2, r3, #1
 8011468:	4b2b      	ldr	r3, [pc, #172]	@ (8011518 <tcp_process+0x59c>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	429a      	cmp	r2, r3
 801146e:	f040 8159 	bne.w	8011724 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011472:	6878      	ldr	r0, [r7, #4]
 8011474:	f002 fe0a 	bl	801408c <tcp_rexmit>
      break;
 8011478:	e154      	b.n	8011724 <tcp_process+0x7a8>
 801147a:	e153      	b.n	8011724 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f000 fa71 	bl	8011964 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011482:	4b2d      	ldr	r3, [pc, #180]	@ (8011538 <tcp_process+0x5bc>)
 8011484:	781b      	ldrb	r3, [r3, #0]
 8011486:	f003 0320 	and.w	r3, r3, #32
 801148a:	2b00      	cmp	r3, #0
 801148c:	f000 814c 	beq.w	8011728 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	8b5b      	ldrh	r3, [r3, #26]
 8011494:	f043 0302 	orr.w	r3, r3, #2
 8011498:	b29a      	uxth	r2, r3
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	2207      	movs	r2, #7
 80114a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80114a4:	e140      	b.n	8011728 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	f000 fa5c 	bl	8011964 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80114ac:	4b22      	ldr	r3, [pc, #136]	@ (8011538 <tcp_process+0x5bc>)
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	f003 0320 	and.w	r3, r3, #32
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d071      	beq.n	801159c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80114b8:	4b14      	ldr	r3, [pc, #80]	@ (801150c <tcp_process+0x590>)
 80114ba:	781b      	ldrb	r3, [r3, #0]
 80114bc:	f003 0310 	and.w	r3, r3, #16
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d060      	beq.n	8011586 <tcp_process+0x60a>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80114c8:	4b11      	ldr	r3, [pc, #68]	@ (8011510 <tcp_process+0x594>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	429a      	cmp	r2, r3
 80114ce:	d15a      	bne.n	8011586 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d156      	bne.n	8011586 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	8b5b      	ldrh	r3, [r3, #26]
 80114dc:	f043 0302 	orr.w	r3, r3, #2
 80114e0:	b29a      	uxth	r2, r3
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f7fe fdbc 	bl	8010064 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80114ec:	4b13      	ldr	r3, [pc, #76]	@ (801153c <tcp_process+0x5c0>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d105      	bne.n	8011502 <tcp_process+0x586>
 80114f6:	4b11      	ldr	r3, [pc, #68]	@ (801153c <tcp_process+0x5c0>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	4a0f      	ldr	r2, [pc, #60]	@ (801153c <tcp_process+0x5c0>)
 80114fe:	6013      	str	r3, [r2, #0]
 8011500:	e02e      	b.n	8011560 <tcp_process+0x5e4>
 8011502:	4b0e      	ldr	r3, [pc, #56]	@ (801153c <tcp_process+0x5c0>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	617b      	str	r3, [r7, #20]
 8011508:	e027      	b.n	801155a <tcp_process+0x5de>
 801150a:	bf00      	nop
 801150c:	2001003c 	.word	0x2001003c
 8011510:	20010034 	.word	0x20010034
 8011514:	2001003a 	.word	0x2001003a
 8011518:	20010030 	.word	0x20010030
 801151c:	20010020 	.word	0x20010020
 8011520:	2000a6bc 	.word	0x2000a6bc
 8011524:	2000a6c0 	.word	0x2000a6c0
 8011528:	0801b000 	.word	0x0801b000
 801152c:	0801b2a0 	.word	0x0801b2a0
 8011530:	0801b04c 	.word	0x0801b04c
 8011534:	20010038 	.word	0x20010038
 8011538:	2001003d 	.word	0x2001003d
 801153c:	20010004 	.word	0x20010004
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	68db      	ldr	r3, [r3, #12]
 8011544:	687a      	ldr	r2, [r7, #4]
 8011546:	429a      	cmp	r2, r3
 8011548:	d104      	bne.n	8011554 <tcp_process+0x5d8>
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	68da      	ldr	r2, [r3, #12]
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	60da      	str	r2, [r3, #12]
 8011552:	e005      	b.n	8011560 <tcp_process+0x5e4>
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	68db      	ldr	r3, [r3, #12]
 8011558:	617b      	str	r3, [r7, #20]
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d1ef      	bne.n	8011540 <tcp_process+0x5c4>
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2200      	movs	r2, #0
 8011564:	60da      	str	r2, [r3, #12]
 8011566:	4b77      	ldr	r3, [pc, #476]	@ (8011744 <tcp_process+0x7c8>)
 8011568:	2201      	movs	r2, #1
 801156a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	220a      	movs	r2, #10
 8011570:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011572:	4b75      	ldr	r3, [pc, #468]	@ (8011748 <tcp_process+0x7cc>)
 8011574:	681a      	ldr	r2, [r3, #0]
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	60da      	str	r2, [r3, #12]
 801157a:	4a73      	ldr	r2, [pc, #460]	@ (8011748 <tcp_process+0x7cc>)
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	6013      	str	r3, [r2, #0]
 8011580:	f003 f94c 	bl	801481c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011584:	e0d2      	b.n	801172c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	8b5b      	ldrh	r3, [r3, #26]
 801158a:	f043 0302 	orr.w	r3, r3, #2
 801158e:	b29a      	uxth	r2, r3
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2208      	movs	r2, #8
 8011598:	751a      	strb	r2, [r3, #20]
      break;
 801159a:	e0c7      	b.n	801172c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801159c:	4b6b      	ldr	r3, [pc, #428]	@ (801174c <tcp_process+0x7d0>)
 801159e:	781b      	ldrb	r3, [r3, #0]
 80115a0:	f003 0310 	and.w	r3, r3, #16
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	f000 80c1 	beq.w	801172c <tcp_process+0x7b0>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80115ae:	4b68      	ldr	r3, [pc, #416]	@ (8011750 <tcp_process+0x7d4>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	429a      	cmp	r2, r3
 80115b4:	f040 80ba 	bne.w	801172c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f040 80b5 	bne.w	801172c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	2206      	movs	r2, #6
 80115c6:	751a      	strb	r2, [r3, #20]
      break;
 80115c8:	e0b0      	b.n	801172c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f000 f9ca 	bl	8011964 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80115d0:	4b60      	ldr	r3, [pc, #384]	@ (8011754 <tcp_process+0x7d8>)
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	f003 0320 	and.w	r3, r3, #32
 80115d8:	2b00      	cmp	r3, #0
 80115da:	f000 80a9 	beq.w	8011730 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	8b5b      	ldrh	r3, [r3, #26]
 80115e2:	f043 0302 	orr.w	r3, r3, #2
 80115e6:	b29a      	uxth	r2, r3
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f7fe fd39 	bl	8010064 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80115f2:	4b59      	ldr	r3, [pc, #356]	@ (8011758 <tcp_process+0x7dc>)
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	687a      	ldr	r2, [r7, #4]
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d105      	bne.n	8011608 <tcp_process+0x68c>
 80115fc:	4b56      	ldr	r3, [pc, #344]	@ (8011758 <tcp_process+0x7dc>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	68db      	ldr	r3, [r3, #12]
 8011602:	4a55      	ldr	r2, [pc, #340]	@ (8011758 <tcp_process+0x7dc>)
 8011604:	6013      	str	r3, [r2, #0]
 8011606:	e013      	b.n	8011630 <tcp_process+0x6b4>
 8011608:	4b53      	ldr	r3, [pc, #332]	@ (8011758 <tcp_process+0x7dc>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	613b      	str	r3, [r7, #16]
 801160e:	e00c      	b.n	801162a <tcp_process+0x6ae>
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	68db      	ldr	r3, [r3, #12]
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	429a      	cmp	r2, r3
 8011618:	d104      	bne.n	8011624 <tcp_process+0x6a8>
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	68da      	ldr	r2, [r3, #12]
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	60da      	str	r2, [r3, #12]
 8011622:	e005      	b.n	8011630 <tcp_process+0x6b4>
 8011624:	693b      	ldr	r3, [r7, #16]
 8011626:	68db      	ldr	r3, [r3, #12]
 8011628:	613b      	str	r3, [r7, #16]
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d1ef      	bne.n	8011610 <tcp_process+0x694>
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2200      	movs	r2, #0
 8011634:	60da      	str	r2, [r3, #12]
 8011636:	4b43      	ldr	r3, [pc, #268]	@ (8011744 <tcp_process+0x7c8>)
 8011638:	2201      	movs	r2, #1
 801163a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	220a      	movs	r2, #10
 8011640:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011642:	4b41      	ldr	r3, [pc, #260]	@ (8011748 <tcp_process+0x7cc>)
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	60da      	str	r2, [r3, #12]
 801164a:	4a3f      	ldr	r2, [pc, #252]	@ (8011748 <tcp_process+0x7cc>)
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6013      	str	r3, [r2, #0]
 8011650:	f003 f8e4 	bl	801481c <tcp_timer_needed>
      }
      break;
 8011654:	e06c      	b.n	8011730 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f000 f984 	bl	8011964 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801165c:	4b3b      	ldr	r3, [pc, #236]	@ (801174c <tcp_process+0x7d0>)
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	f003 0310 	and.w	r3, r3, #16
 8011664:	2b00      	cmp	r3, #0
 8011666:	d065      	beq.n	8011734 <tcp_process+0x7b8>
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801166c:	4b38      	ldr	r3, [pc, #224]	@ (8011750 <tcp_process+0x7d4>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	429a      	cmp	r2, r3
 8011672:	d15f      	bne.n	8011734 <tcp_process+0x7b8>
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011678:	2b00      	cmp	r3, #0
 801167a:	d15b      	bne.n	8011734 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f7fe fcf1 	bl	8010064 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011682:	4b35      	ldr	r3, [pc, #212]	@ (8011758 <tcp_process+0x7dc>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	687a      	ldr	r2, [r7, #4]
 8011688:	429a      	cmp	r2, r3
 801168a:	d105      	bne.n	8011698 <tcp_process+0x71c>
 801168c:	4b32      	ldr	r3, [pc, #200]	@ (8011758 <tcp_process+0x7dc>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	68db      	ldr	r3, [r3, #12]
 8011692:	4a31      	ldr	r2, [pc, #196]	@ (8011758 <tcp_process+0x7dc>)
 8011694:	6013      	str	r3, [r2, #0]
 8011696:	e013      	b.n	80116c0 <tcp_process+0x744>
 8011698:	4b2f      	ldr	r3, [pc, #188]	@ (8011758 <tcp_process+0x7dc>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	60fb      	str	r3, [r7, #12]
 801169e:	e00c      	b.n	80116ba <tcp_process+0x73e>
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	68db      	ldr	r3, [r3, #12]
 80116a4:	687a      	ldr	r2, [r7, #4]
 80116a6:	429a      	cmp	r2, r3
 80116a8:	d104      	bne.n	80116b4 <tcp_process+0x738>
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	68da      	ldr	r2, [r3, #12]
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	60da      	str	r2, [r3, #12]
 80116b2:	e005      	b.n	80116c0 <tcp_process+0x744>
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	68db      	ldr	r3, [r3, #12]
 80116b8:	60fb      	str	r3, [r7, #12]
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d1ef      	bne.n	80116a0 <tcp_process+0x724>
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2200      	movs	r2, #0
 80116c4:	60da      	str	r2, [r3, #12]
 80116c6:	4b1f      	ldr	r3, [pc, #124]	@ (8011744 <tcp_process+0x7c8>)
 80116c8:	2201      	movs	r2, #1
 80116ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	220a      	movs	r2, #10
 80116d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80116d2:	4b1d      	ldr	r3, [pc, #116]	@ (8011748 <tcp_process+0x7cc>)
 80116d4:	681a      	ldr	r2, [r3, #0]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	60da      	str	r2, [r3, #12]
 80116da:	4a1b      	ldr	r2, [pc, #108]	@ (8011748 <tcp_process+0x7cc>)
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	6013      	str	r3, [r2, #0]
 80116e0:	f003 f89c 	bl	801481c <tcp_timer_needed>
      }
      break;
 80116e4:	e026      	b.n	8011734 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f000 f93c 	bl	8011964 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80116ec:	4b17      	ldr	r3, [pc, #92]	@ (801174c <tcp_process+0x7d0>)
 80116ee:	781b      	ldrb	r3, [r3, #0]
 80116f0:	f003 0310 	and.w	r3, r3, #16
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d01f      	beq.n	8011738 <tcp_process+0x7bc>
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80116fc:	4b14      	ldr	r3, [pc, #80]	@ (8011750 <tcp_process+0x7d4>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	429a      	cmp	r2, r3
 8011702:	d119      	bne.n	8011738 <tcp_process+0x7bc>
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011708:	2b00      	cmp	r3, #0
 801170a:	d115      	bne.n	8011738 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801170c:	4b11      	ldr	r3, [pc, #68]	@ (8011754 <tcp_process+0x7d8>)
 801170e:	781b      	ldrb	r3, [r3, #0]
 8011710:	f043 0310 	orr.w	r3, r3, #16
 8011714:	b2da      	uxtb	r2, r3
 8011716:	4b0f      	ldr	r3, [pc, #60]	@ (8011754 <tcp_process+0x7d8>)
 8011718:	701a      	strb	r2, [r3, #0]
      }
      break;
 801171a:	e00d      	b.n	8011738 <tcp_process+0x7bc>
    default:
      break;
 801171c:	bf00      	nop
 801171e:	e00c      	b.n	801173a <tcp_process+0x7be>
      break;
 8011720:	bf00      	nop
 8011722:	e00a      	b.n	801173a <tcp_process+0x7be>
      break;
 8011724:	bf00      	nop
 8011726:	e008      	b.n	801173a <tcp_process+0x7be>
      break;
 8011728:	bf00      	nop
 801172a:	e006      	b.n	801173a <tcp_process+0x7be>
      break;
 801172c:	bf00      	nop
 801172e:	e004      	b.n	801173a <tcp_process+0x7be>
      break;
 8011730:	bf00      	nop
 8011732:	e002      	b.n	801173a <tcp_process+0x7be>
      break;
 8011734:	bf00      	nop
 8011736:	e000      	b.n	801173a <tcp_process+0x7be>
      break;
 8011738:	bf00      	nop
  }
  return ERR_OK;
 801173a:	2300      	movs	r3, #0
}
 801173c:	4618      	mov	r0, r3
 801173e:	3724      	adds	r7, #36	@ 0x24
 8011740:	46bd      	mov	sp, r7
 8011742:	bd90      	pop	{r4, r7, pc}
 8011744:	2001000c 	.word	0x2001000c
 8011748:	20010008 	.word	0x20010008
 801174c:	2001003c 	.word	0x2001003c
 8011750:	20010034 	.word	0x20010034
 8011754:	2001003d 	.word	0x2001003d
 8011758:	20010004 	.word	0x20010004

0801175c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801175c:	b590      	push	{r4, r7, lr}
 801175e:	b085      	sub	sp, #20
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d106      	bne.n	801177a <tcp_oos_insert_segment+0x1e>
 801176c:	4b3b      	ldr	r3, [pc, #236]	@ (801185c <tcp_oos_insert_segment+0x100>)
 801176e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8011772:	493b      	ldr	r1, [pc, #236]	@ (8011860 <tcp_oos_insert_segment+0x104>)
 8011774:	483b      	ldr	r0, [pc, #236]	@ (8011864 <tcp_oos_insert_segment+0x108>)
 8011776:	f006 fa73 	bl	8017c60 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	68db      	ldr	r3, [r3, #12]
 801177e:	899b      	ldrh	r3, [r3, #12]
 8011780:	b29b      	uxth	r3, r3
 8011782:	4618      	mov	r0, r3
 8011784:	f7fb f90e 	bl	800c9a4 <lwip_htons>
 8011788:	4603      	mov	r3, r0
 801178a:	b2db      	uxtb	r3, r3
 801178c:	f003 0301 	and.w	r3, r3, #1
 8011790:	2b00      	cmp	r3, #0
 8011792:	d028      	beq.n	80117e6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011794:	6838      	ldr	r0, [r7, #0]
 8011796:	f7fe f98d 	bl	800fab4 <tcp_segs_free>
    next = NULL;
 801179a:	2300      	movs	r3, #0
 801179c:	603b      	str	r3, [r7, #0]
 801179e:	e056      	b.n	801184e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	68db      	ldr	r3, [r3, #12]
 80117a4:	899b      	ldrh	r3, [r3, #12]
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	4618      	mov	r0, r3
 80117aa:	f7fb f8fb 	bl	800c9a4 <lwip_htons>
 80117ae:	4603      	mov	r3, r0
 80117b0:	b2db      	uxtb	r3, r3
 80117b2:	f003 0301 	and.w	r3, r3, #1
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d00d      	beq.n	80117d6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	68db      	ldr	r3, [r3, #12]
 80117be:	899b      	ldrh	r3, [r3, #12]
 80117c0:	b29c      	uxth	r4, r3
 80117c2:	2001      	movs	r0, #1
 80117c4:	f7fb f8ee 	bl	800c9a4 <lwip_htons>
 80117c8:	4603      	mov	r3, r0
 80117ca:	461a      	mov	r2, r3
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	68db      	ldr	r3, [r3, #12]
 80117d0:	4322      	orrs	r2, r4
 80117d2:	b292      	uxth	r2, r2
 80117d4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80117e0:	68f8      	ldr	r0, [r7, #12]
 80117e2:	f7fe f97c 	bl	800fade <tcp_seg_free>
    while (next &&
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d00e      	beq.n	801180a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	891b      	ldrh	r3, [r3, #8]
 80117f0:	461a      	mov	r2, r3
 80117f2:	4b1d      	ldr	r3, [pc, #116]	@ (8011868 <tcp_oos_insert_segment+0x10c>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	441a      	add	r2, r3
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	68db      	ldr	r3, [r3, #12]
 80117fc:	685b      	ldr	r3, [r3, #4]
 80117fe:	6839      	ldr	r1, [r7, #0]
 8011800:	8909      	ldrh	r1, [r1, #8]
 8011802:	440b      	add	r3, r1
 8011804:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011806:	2b00      	cmp	r3, #0
 8011808:	daca      	bge.n	80117a0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d01e      	beq.n	801184e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	891b      	ldrh	r3, [r3, #8]
 8011814:	461a      	mov	r2, r3
 8011816:	4b14      	ldr	r3, [pc, #80]	@ (8011868 <tcp_oos_insert_segment+0x10c>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	441a      	add	r2, r3
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011824:	2b00      	cmp	r3, #0
 8011826:	dd12      	ble.n	801184e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	68db      	ldr	r3, [r3, #12]
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	b29a      	uxth	r2, r3
 8011830:	4b0d      	ldr	r3, [pc, #52]	@ (8011868 <tcp_oos_insert_segment+0x10c>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	b29b      	uxth	r3, r3
 8011836:	1ad3      	subs	r3, r2, r3
 8011838:	b29a      	uxth	r2, r3
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	685a      	ldr	r2, [r3, #4]
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	891b      	ldrh	r3, [r3, #8]
 8011846:	4619      	mov	r1, r3
 8011848:	4610      	mov	r0, r2
 801184a:	f7fc fb17 	bl	800de7c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	683a      	ldr	r2, [r7, #0]
 8011852:	601a      	str	r2, [r3, #0]
}
 8011854:	bf00      	nop
 8011856:	3714      	adds	r7, #20
 8011858:	46bd      	mov	sp, r7
 801185a:	bd90      	pop	{r4, r7, pc}
 801185c:	0801b000 	.word	0x0801b000
 8011860:	0801b2c0 	.word	0x0801b2c0
 8011864:	0801b04c 	.word	0x0801b04c
 8011868:	20010030 	.word	0x20010030

0801186c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801186c:	b5b0      	push	{r4, r5, r7, lr}
 801186e:	b086      	sub	sp, #24
 8011870:	af00      	add	r7, sp, #0
 8011872:	60f8      	str	r0, [r7, #12]
 8011874:	60b9      	str	r1, [r7, #8]
 8011876:	607a      	str	r2, [r7, #4]
 8011878:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801187a:	e03e      	b.n	80118fa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801187c:	68bb      	ldr	r3, [r7, #8]
 801187e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	4618      	mov	r0, r3
 801188c:	f7fc fd0a 	bl	800e2a4 <pbuf_clen>
 8011890:	4603      	mov	r3, r0
 8011892:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801189a:	8a7a      	ldrh	r2, [r7, #18]
 801189c:	429a      	cmp	r2, r3
 801189e:	d906      	bls.n	80118ae <tcp_free_acked_segments+0x42>
 80118a0:	4b2a      	ldr	r3, [pc, #168]	@ (801194c <tcp_free_acked_segments+0xe0>)
 80118a2:	f240 4257 	movw	r2, #1111	@ 0x457
 80118a6:	492a      	ldr	r1, [pc, #168]	@ (8011950 <tcp_free_acked_segments+0xe4>)
 80118a8:	482a      	ldr	r0, [pc, #168]	@ (8011954 <tcp_free_acked_segments+0xe8>)
 80118aa:	f006 f9d9 	bl	8017c60 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80118b4:	8a7b      	ldrh	r3, [r7, #18]
 80118b6:	1ad3      	subs	r3, r2, r3
 80118b8:	b29a      	uxth	r2, r3
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80118c0:	697b      	ldr	r3, [r7, #20]
 80118c2:	891a      	ldrh	r2, [r3, #8]
 80118c4:	4b24      	ldr	r3, [pc, #144]	@ (8011958 <tcp_free_acked_segments+0xec>)
 80118c6:	881b      	ldrh	r3, [r3, #0]
 80118c8:	4413      	add	r3, r2
 80118ca:	b29a      	uxth	r2, r3
 80118cc:	4b22      	ldr	r3, [pc, #136]	@ (8011958 <tcp_free_acked_segments+0xec>)
 80118ce:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80118d0:	6978      	ldr	r0, [r7, #20]
 80118d2:	f7fe f904 	bl	800fade <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d00c      	beq.n	80118fa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d109      	bne.n	80118fa <tcp_free_acked_segments+0x8e>
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d106      	bne.n	80118fa <tcp_free_acked_segments+0x8e>
 80118ec:	4b17      	ldr	r3, [pc, #92]	@ (801194c <tcp_free_acked_segments+0xe0>)
 80118ee:	f240 4261 	movw	r2, #1121	@ 0x461
 80118f2:	491a      	ldr	r1, [pc, #104]	@ (801195c <tcp_free_acked_segments+0xf0>)
 80118f4:	4817      	ldr	r0, [pc, #92]	@ (8011954 <tcp_free_acked_segments+0xe8>)
 80118f6:	f006 f9b3 	bl	8017c60 <iprintf>
  while (seg_list != NULL &&
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d020      	beq.n	8011942 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	68db      	ldr	r3, [r3, #12]
 8011904:	685b      	ldr	r3, [r3, #4]
 8011906:	4618      	mov	r0, r3
 8011908:	f7fb f861 	bl	800c9ce <lwip_htonl>
 801190c:	4604      	mov	r4, r0
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	891b      	ldrh	r3, [r3, #8]
 8011912:	461d      	mov	r5, r3
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	68db      	ldr	r3, [r3, #12]
 8011918:	899b      	ldrh	r3, [r3, #12]
 801191a:	b29b      	uxth	r3, r3
 801191c:	4618      	mov	r0, r3
 801191e:	f7fb f841 	bl	800c9a4 <lwip_htons>
 8011922:	4603      	mov	r3, r0
 8011924:	b2db      	uxtb	r3, r3
 8011926:	f003 0303 	and.w	r3, r3, #3
 801192a:	2b00      	cmp	r3, #0
 801192c:	d001      	beq.n	8011932 <tcp_free_acked_segments+0xc6>
 801192e:	2301      	movs	r3, #1
 8011930:	e000      	b.n	8011934 <tcp_free_acked_segments+0xc8>
 8011932:	2300      	movs	r3, #0
 8011934:	442b      	add	r3, r5
 8011936:	18e2      	adds	r2, r4, r3
 8011938:	4b09      	ldr	r3, [pc, #36]	@ (8011960 <tcp_free_acked_segments+0xf4>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801193e:	2b00      	cmp	r3, #0
 8011940:	dd9c      	ble.n	801187c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011942:	68bb      	ldr	r3, [r7, #8]
}
 8011944:	4618      	mov	r0, r3
 8011946:	3718      	adds	r7, #24
 8011948:	46bd      	mov	sp, r7
 801194a:	bdb0      	pop	{r4, r5, r7, pc}
 801194c:	0801b000 	.word	0x0801b000
 8011950:	0801b2e8 	.word	0x0801b2e8
 8011954:	0801b04c 	.word	0x0801b04c
 8011958:	20010038 	.word	0x20010038
 801195c:	0801b310 	.word	0x0801b310
 8011960:	20010034 	.word	0x20010034

08011964 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011964:	b5b0      	push	{r4, r5, r7, lr}
 8011966:	b094      	sub	sp, #80	@ 0x50
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801196c:	2300      	movs	r3, #0
 801196e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d106      	bne.n	8011984 <tcp_receive+0x20>
 8011976:	4b91      	ldr	r3, [pc, #580]	@ (8011bbc <tcp_receive+0x258>)
 8011978:	f240 427b 	movw	r2, #1147	@ 0x47b
 801197c:	4990      	ldr	r1, [pc, #576]	@ (8011bc0 <tcp_receive+0x25c>)
 801197e:	4891      	ldr	r0, [pc, #580]	@ (8011bc4 <tcp_receive+0x260>)
 8011980:	f006 f96e 	bl	8017c60 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	7d1b      	ldrb	r3, [r3, #20]
 8011988:	2b03      	cmp	r3, #3
 801198a:	d806      	bhi.n	801199a <tcp_receive+0x36>
 801198c:	4b8b      	ldr	r3, [pc, #556]	@ (8011bbc <tcp_receive+0x258>)
 801198e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8011992:	498d      	ldr	r1, [pc, #564]	@ (8011bc8 <tcp_receive+0x264>)
 8011994:	488b      	ldr	r0, [pc, #556]	@ (8011bc4 <tcp_receive+0x260>)
 8011996:	f006 f963 	bl	8017c60 <iprintf>

  if (flags & TCP_ACK) {
 801199a:	4b8c      	ldr	r3, [pc, #560]	@ (8011bcc <tcp_receive+0x268>)
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	f003 0310 	and.w	r3, r3, #16
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	f000 8264 	beq.w	8011e70 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80119ae:	461a      	mov	r2, r3
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80119b4:	4413      	add	r3, r2
 80119b6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80119bc:	4b84      	ldr	r3, [pc, #528]	@ (8011bd0 <tcp_receive+0x26c>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	1ad3      	subs	r3, r2, r3
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	db1b      	blt.n	80119fe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80119ca:	4b81      	ldr	r3, [pc, #516]	@ (8011bd0 <tcp_receive+0x26c>)
 80119cc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d106      	bne.n	80119e0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80119d6:	4b7f      	ldr	r3, [pc, #508]	@ (8011bd4 <tcp_receive+0x270>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	1ad3      	subs	r3, r2, r3
 80119dc:	2b00      	cmp	r3, #0
 80119de:	db0e      	blt.n	80119fe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80119e4:	4b7b      	ldr	r3, [pc, #492]	@ (8011bd4 <tcp_receive+0x270>)
 80119e6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80119e8:	429a      	cmp	r2, r3
 80119ea:	d125      	bne.n	8011a38 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80119ec:	4b7a      	ldr	r3, [pc, #488]	@ (8011bd8 <tcp_receive+0x274>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	89db      	ldrh	r3, [r3, #14]
 80119f2:	b29a      	uxth	r2, r3
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d91c      	bls.n	8011a38 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80119fe:	4b76      	ldr	r3, [pc, #472]	@ (8011bd8 <tcp_receive+0x274>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	89db      	ldrh	r3, [r3, #14]
 8011a04:	b29a      	uxth	r2, r3
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d205      	bcs.n	8011a28 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8011a28:	4b69      	ldr	r3, [pc, #420]	@ (8011bd0 <tcp_receive+0x26c>)
 8011a2a:	681a      	ldr	r2, [r3, #0]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8011a30:	4b68      	ldr	r3, [pc, #416]	@ (8011bd4 <tcp_receive+0x270>)
 8011a32:	681a      	ldr	r2, [r3, #0]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011a38:	4b66      	ldr	r3, [pc, #408]	@ (8011bd4 <tcp_receive+0x270>)
 8011a3a:	681a      	ldr	r2, [r3, #0]
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a40:	1ad3      	subs	r3, r2, r3
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	dc58      	bgt.n	8011af8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011a46:	4b65      	ldr	r3, [pc, #404]	@ (8011bdc <tcp_receive+0x278>)
 8011a48:	881b      	ldrh	r3, [r3, #0]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d14b      	bne.n	8011ae6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8011a58:	4413      	add	r3, r2
 8011a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d142      	bne.n	8011ae6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	db3d      	blt.n	8011ae6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011a6e:	4b59      	ldr	r3, [pc, #356]	@ (8011bd4 <tcp_receive+0x270>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d137      	bne.n	8011ae6 <tcp_receive+0x182>
              found_dupack = 1;
 8011a76:	2301      	movs	r3, #1
 8011a78:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011a80:	2bff      	cmp	r3, #255	@ 0xff
 8011a82:	d007      	beq.n	8011a94 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011a8a:	3301      	adds	r3, #1
 8011a8c:	b2da      	uxtb	r2, r3
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011a9a:	2b03      	cmp	r3, #3
 8011a9c:	d91b      	bls.n	8011ad6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011aa8:	4413      	add	r3, r2
 8011aaa:	b29a      	uxth	r2, r3
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d30a      	bcc.n	8011acc <tcp_receive+0x168>
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ac0:	4413      	add	r3, r2
 8011ac2:	b29a      	uxth	r2, r3
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011aca:	e004      	b.n	8011ad6 <tcp_receive+0x172>
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011ad2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011adc:	2b02      	cmp	r3, #2
 8011ade:	d902      	bls.n	8011ae6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f002 fb3f 	bl	8014164 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	f040 8161 	bne.w	8011db0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2200      	movs	r2, #0
 8011af2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011af6:	e15b      	b.n	8011db0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011af8:	4b36      	ldr	r3, [pc, #216]	@ (8011bd4 <tcp_receive+0x270>)
 8011afa:	681a      	ldr	r2, [r3, #0]
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b00:	1ad3      	subs	r3, r2, r3
 8011b02:	3b01      	subs	r3, #1
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	f2c0 814e 	blt.w	8011da6 <tcp_receive+0x442>
 8011b0a:	4b32      	ldr	r3, [pc, #200]	@ (8011bd4 <tcp_receive+0x270>)
 8011b0c:	681a      	ldr	r2, [r3, #0]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011b12:	1ad3      	subs	r3, r2, r3
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	f300 8146 	bgt.w	8011da6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	8b5b      	ldrh	r3, [r3, #26]
 8011b1e:	f003 0304 	and.w	r3, r3, #4
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d010      	beq.n	8011b48 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	8b5b      	ldrh	r3, [r3, #26]
 8011b2a:	f023 0304 	bic.w	r3, r3, #4
 8011b2e:	b29a      	uxth	r2, r3
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2200      	movs	r2, #0
 8011b44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011b56:	10db      	asrs	r3, r3, #3
 8011b58:	b21b      	sxth	r3, r3
 8011b5a:	b29a      	uxth	r2, r3
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011b62:	b29b      	uxth	r3, r3
 8011b64:	4413      	add	r3, r2
 8011b66:	b29b      	uxth	r3, r3
 8011b68:	b21a      	sxth	r2, r3
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011b70:	4b18      	ldr	r3, [pc, #96]	@ (8011bd4 <tcp_receive+0x270>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	b29a      	uxth	r2, r3
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	1ad3      	subs	r3, r2, r3
 8011b7e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2200      	movs	r2, #0
 8011b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8011b88:	4b12      	ldr	r3, [pc, #72]	@ (8011bd4 <tcp_receive+0x270>)
 8011b8a:	681a      	ldr	r2, [r3, #0]
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	7d1b      	ldrb	r3, [r3, #20]
 8011b94:	2b03      	cmp	r3, #3
 8011b96:	f240 8097 	bls.w	8011cc8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d245      	bcs.n	8011c36 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	8b5b      	ldrh	r3, [r3, #26]
 8011bae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d014      	beq.n	8011be0 <tcp_receive+0x27c>
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	e013      	b.n	8011be2 <tcp_receive+0x27e>
 8011bba:	bf00      	nop
 8011bbc:	0801b000 	.word	0x0801b000
 8011bc0:	0801b330 	.word	0x0801b330
 8011bc4:	0801b04c 	.word	0x0801b04c
 8011bc8:	0801b34c 	.word	0x0801b34c
 8011bcc:	2001003c 	.word	0x2001003c
 8011bd0:	20010030 	.word	0x20010030
 8011bd4:	20010034 	.word	0x20010034
 8011bd8:	20010020 	.word	0x20010020
 8011bdc:	2001003a 	.word	0x2001003a
 8011be0:	2302      	movs	r3, #2
 8011be2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011be6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8011bea:	b29a      	uxth	r2, r3
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011bf0:	fb12 f303 	smulbb	r3, r2, r3
 8011bf4:	b29b      	uxth	r3, r3
 8011bf6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	bf28      	it	cs
 8011bfc:	4613      	movcs	r3, r2
 8011bfe:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011c06:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011c08:	4413      	add	r3, r2
 8011c0a:	b29a      	uxth	r2, r3
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d309      	bcc.n	8011c2a <tcp_receive+0x2c6>
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011c1c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011c1e:	4413      	add	r3, r2
 8011c20:	b29a      	uxth	r2, r3
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011c28:	e04e      	b.n	8011cc8 <tcp_receive+0x364>
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011c30:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011c34:	e048      	b.n	8011cc8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011c3c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011c3e:	4413      	add	r3, r2
 8011c40:	b29a      	uxth	r2, r3
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	d309      	bcc.n	8011c60 <tcp_receive+0x2fc>
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011c52:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011c54:	4413      	add	r3, r2
 8011c56:	b29a      	uxth	r2, r3
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8011c5e:	e004      	b.n	8011c6a <tcp_receive+0x306>
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011c66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d326      	bcc.n	8011cc8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011c86:	1ad3      	subs	r3, r2, r3
 8011c88:	b29a      	uxth	r2, r3
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011c9a:	4413      	add	r3, r2
 8011c9c:	b29a      	uxth	r2, r3
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d30a      	bcc.n	8011cbe <tcp_receive+0x35a>
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011cb2:	4413      	add	r3, r2
 8011cb4:	b29a      	uxth	r2, r3
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011cbc:	e004      	b.n	8011cc8 <tcp_receive+0x364>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011cc4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011cd0:	4a98      	ldr	r2, [pc, #608]	@ (8011f34 <tcp_receive+0x5d0>)
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f7ff fdca 	bl	801186c <tcp_free_acked_segments>
 8011cd8:	4602      	mov	r2, r0
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ce6:	4a94      	ldr	r2, [pc, #592]	@ (8011f38 <tcp_receive+0x5d4>)
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f7ff fdbf 	bl	801186c <tcp_free_acked_segments>
 8011cee:	4602      	mov	r2, r0
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d104      	bne.n	8011d06 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011d02:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011d04:	e002      	b.n	8011d0c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2200      	movs	r2, #0
 8011d0a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d103      	bne.n	8011d22 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011d28:	4b84      	ldr	r3, [pc, #528]	@ (8011f3c <tcp_receive+0x5d8>)
 8011d2a:	881b      	ldrh	r3, [r3, #0]
 8011d2c:	4413      	add	r3, r2
 8011d2e:	b29a      	uxth	r2, r3
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	8b5b      	ldrh	r3, [r3, #26]
 8011d3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d035      	beq.n	8011dae <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d118      	bne.n	8011d7c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d00c      	beq.n	8011d6c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d5a:	68db      	ldr	r3, [r3, #12]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f7fa fe35 	bl	800c9ce <lwip_htonl>
 8011d64:	4603      	mov	r3, r0
 8011d66:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	dc20      	bgt.n	8011dae <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	8b5b      	ldrh	r3, [r3, #26]
 8011d70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011d74:	b29a      	uxth	r2, r3
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011d7a:	e018      	b.n	8011dae <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d84:	68db      	ldr	r3, [r3, #12]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7fa fe20 	bl	800c9ce <lwip_htonl>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	1ae3      	subs	r3, r4, r3
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	dc0b      	bgt.n	8011dae <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	8b5b      	ldrh	r3, [r3, #26]
 8011d9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011d9e:	b29a      	uxth	r2, r3
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011da4:	e003      	b.n	8011dae <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f002 fbc8 	bl	801453c <tcp_send_empty_ack>
 8011dac:	e000      	b.n	8011db0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011dae:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d05b      	beq.n	8011e70 <tcp_receive+0x50c>
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011dbc:	4b60      	ldr	r3, [pc, #384]	@ (8011f40 <tcp_receive+0x5dc>)
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	1ad3      	subs	r3, r2, r3
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	da54      	bge.n	8011e70 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011dc6:	4b5f      	ldr	r3, [pc, #380]	@ (8011f44 <tcp_receive+0x5e0>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	b29a      	uxth	r2, r3
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011dd0:	b29b      	uxth	r3, r3
 8011dd2:	1ad3      	subs	r3, r2, r3
 8011dd4:	b29b      	uxth	r3, r3
 8011dd6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011dda:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011de4:	10db      	asrs	r3, r3, #3
 8011de6:	b21b      	sxth	r3, r3
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	1ad3      	subs	r3, r2, r3
 8011dec:	b29b      	uxth	r3, r3
 8011dee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011df8:	b29a      	uxth	r2, r3
 8011dfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011dfe:	4413      	add	r3, r2
 8011e00:	b29b      	uxth	r3, r3
 8011e02:	b21a      	sxth	r2, r3
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8011e08:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	da05      	bge.n	8011e1c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011e10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011e14:	425b      	negs	r3, r3
 8011e16:	b29b      	uxth	r3, r3
 8011e18:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011e1c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011e26:	109b      	asrs	r3, r3, #2
 8011e28:	b21b      	sxth	r3, r3
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	1ad3      	subs	r3, r2, r3
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011e3a:	b29a      	uxth	r2, r3
 8011e3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011e40:	4413      	add	r3, r2
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	b21a      	sxth	r2, r3
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011e50:	10db      	asrs	r3, r3, #3
 8011e52:	b21b      	sxth	r3, r3
 8011e54:	b29a      	uxth	r2, r3
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011e5c:	b29b      	uxth	r3, r3
 8011e5e:	4413      	add	r3, r2
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	b21a      	sxth	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011e70:	4b35      	ldr	r3, [pc, #212]	@ (8011f48 <tcp_receive+0x5e4>)
 8011e72:	881b      	ldrh	r3, [r3, #0]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	f000 84df 	beq.w	8012838 <tcp_receive+0xed4>
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	7d1b      	ldrb	r3, [r3, #20]
 8011e7e:	2b06      	cmp	r3, #6
 8011e80:	f200 84da 	bhi.w	8012838 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011e88:	4b30      	ldr	r3, [pc, #192]	@ (8011f4c <tcp_receive+0x5e8>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	1ad3      	subs	r3, r2, r3
 8011e8e:	3b01      	subs	r3, #1
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	f2c0 808f 	blt.w	8011fb4 <tcp_receive+0x650>
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8011f48 <tcp_receive+0x5e4>)
 8011e9c:	881b      	ldrh	r3, [r3, #0]
 8011e9e:	4619      	mov	r1, r3
 8011ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8011f4c <tcp_receive+0x5e8>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	440b      	add	r3, r1
 8011ea6:	1ad3      	subs	r3, r2, r3
 8011ea8:	3301      	adds	r3, #1
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	f300 8082 	bgt.w	8011fb4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011eb0:	4b27      	ldr	r3, [pc, #156]	@ (8011f50 <tcp_receive+0x5ec>)
 8011eb2:	685b      	ldr	r3, [r3, #4]
 8011eb4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011eba:	4b24      	ldr	r3, [pc, #144]	@ (8011f4c <tcp_receive+0x5e8>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	1ad3      	subs	r3, r2, r3
 8011ec0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011ec2:	4b23      	ldr	r3, [pc, #140]	@ (8011f50 <tcp_receive+0x5ec>)
 8011ec4:	685b      	ldr	r3, [r3, #4]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d106      	bne.n	8011ed8 <tcp_receive+0x574>
 8011eca:	4b22      	ldr	r3, [pc, #136]	@ (8011f54 <tcp_receive+0x5f0>)
 8011ecc:	f240 5294 	movw	r2, #1428	@ 0x594
 8011ed0:	4921      	ldr	r1, [pc, #132]	@ (8011f58 <tcp_receive+0x5f4>)
 8011ed2:	4822      	ldr	r0, [pc, #136]	@ (8011f5c <tcp_receive+0x5f8>)
 8011ed4:	f005 fec4 	bl	8017c60 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eda:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011ede:	4293      	cmp	r3, r2
 8011ee0:	d906      	bls.n	8011ef0 <tcp_receive+0x58c>
 8011ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8011f54 <tcp_receive+0x5f0>)
 8011ee4:	f240 5295 	movw	r2, #1429	@ 0x595
 8011ee8:	491d      	ldr	r1, [pc, #116]	@ (8011f60 <tcp_receive+0x5fc>)
 8011eea:	481c      	ldr	r0, [pc, #112]	@ (8011f5c <tcp_receive+0x5f8>)
 8011eec:	f005 feb8 	bl	8017c60 <iprintf>
      off = (u16_t)off32;
 8011ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ef2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011ef6:	4b16      	ldr	r3, [pc, #88]	@ (8011f50 <tcp_receive+0x5ec>)
 8011ef8:	685b      	ldr	r3, [r3, #4]
 8011efa:	891b      	ldrh	r3, [r3, #8]
 8011efc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d906      	bls.n	8011f12 <tcp_receive+0x5ae>
 8011f04:	4b13      	ldr	r3, [pc, #76]	@ (8011f54 <tcp_receive+0x5f0>)
 8011f06:	f240 5297 	movw	r2, #1431	@ 0x597
 8011f0a:	4916      	ldr	r1, [pc, #88]	@ (8011f64 <tcp_receive+0x600>)
 8011f0c:	4813      	ldr	r0, [pc, #76]	@ (8011f5c <tcp_receive+0x5f8>)
 8011f0e:	f005 fea7 	bl	8017c60 <iprintf>
      inseg.len -= off;
 8011f12:	4b0f      	ldr	r3, [pc, #60]	@ (8011f50 <tcp_receive+0x5ec>)
 8011f14:	891a      	ldrh	r2, [r3, #8]
 8011f16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011f1a:	1ad3      	subs	r3, r2, r3
 8011f1c:	b29a      	uxth	r2, r3
 8011f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8011f50 <tcp_receive+0x5ec>)
 8011f20:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011f22:	4b0b      	ldr	r3, [pc, #44]	@ (8011f50 <tcp_receive+0x5ec>)
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	891a      	ldrh	r2, [r3, #8]
 8011f28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011f2c:	1ad3      	subs	r3, r2, r3
 8011f2e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8011f30:	e02a      	b.n	8011f88 <tcp_receive+0x624>
 8011f32:	bf00      	nop
 8011f34:	0801b368 	.word	0x0801b368
 8011f38:	0801b370 	.word	0x0801b370
 8011f3c:	20010038 	.word	0x20010038
 8011f40:	20010034 	.word	0x20010034
 8011f44:	2000fff8 	.word	0x2000fff8
 8011f48:	2001003a 	.word	0x2001003a
 8011f4c:	20010030 	.word	0x20010030
 8011f50:	20010010 	.word	0x20010010
 8011f54:	0801b000 	.word	0x0801b000
 8011f58:	0801b378 	.word	0x0801b378
 8011f5c:	0801b04c 	.word	0x0801b04c
 8011f60:	0801b388 	.word	0x0801b388
 8011f64:	0801b398 	.word	0x0801b398
        off -= p->len;
 8011f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f6a:	895b      	ldrh	r3, [r3, #10]
 8011f6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011f70:	1ad3      	subs	r3, r2, r3
 8011f72:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f78:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011f7a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f7e:	2200      	movs	r2, #0
 8011f80:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011f82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8011f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f8a:	895b      	ldrh	r3, [r3, #10]
 8011f8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d8e9      	bhi.n	8011f68 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011f94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011f98:	4619      	mov	r1, r3
 8011f9a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011f9c:	f7fc f86e 	bl	800e07c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fa4:	4a90      	ldr	r2, [pc, #576]	@ (80121e8 <tcp_receive+0x884>)
 8011fa6:	6013      	str	r3, [r2, #0]
 8011fa8:	4b90      	ldr	r3, [pc, #576]	@ (80121ec <tcp_receive+0x888>)
 8011faa:	68db      	ldr	r3, [r3, #12]
 8011fac:	4a8e      	ldr	r2, [pc, #568]	@ (80121e8 <tcp_receive+0x884>)
 8011fae:	6812      	ldr	r2, [r2, #0]
 8011fb0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011fb2:	e00d      	b.n	8011fd0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011fb4:	4b8c      	ldr	r3, [pc, #560]	@ (80121e8 <tcp_receive+0x884>)
 8011fb6:	681a      	ldr	r2, [r3, #0]
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fbc:	1ad3      	subs	r3, r2, r3
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	da06      	bge.n	8011fd0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	8b5b      	ldrh	r3, [r3, #26]
 8011fc6:	f043 0302 	orr.w	r3, r3, #2
 8011fca:	b29a      	uxth	r2, r3
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011fd0:	4b85      	ldr	r3, [pc, #532]	@ (80121e8 <tcp_receive+0x884>)
 8011fd2:	681a      	ldr	r2, [r3, #0]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fd8:	1ad3      	subs	r3, r2, r3
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	f2c0 8427 	blt.w	801282e <tcp_receive+0xeca>
 8011fe0:	4b81      	ldr	r3, [pc, #516]	@ (80121e8 <tcp_receive+0x884>)
 8011fe2:	681a      	ldr	r2, [r3, #0]
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fe8:	6879      	ldr	r1, [r7, #4]
 8011fea:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011fec:	440b      	add	r3, r1
 8011fee:	1ad3      	subs	r3, r2, r3
 8011ff0:	3301      	adds	r3, #1
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	f300 841b 	bgt.w	801282e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ffc:	4b7a      	ldr	r3, [pc, #488]	@ (80121e8 <tcp_receive+0x884>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	429a      	cmp	r2, r3
 8012002:	f040 8298 	bne.w	8012536 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012006:	4b79      	ldr	r3, [pc, #484]	@ (80121ec <tcp_receive+0x888>)
 8012008:	891c      	ldrh	r4, [r3, #8]
 801200a:	4b78      	ldr	r3, [pc, #480]	@ (80121ec <tcp_receive+0x888>)
 801200c:	68db      	ldr	r3, [r3, #12]
 801200e:	899b      	ldrh	r3, [r3, #12]
 8012010:	b29b      	uxth	r3, r3
 8012012:	4618      	mov	r0, r3
 8012014:	f7fa fcc6 	bl	800c9a4 <lwip_htons>
 8012018:	4603      	mov	r3, r0
 801201a:	b2db      	uxtb	r3, r3
 801201c:	f003 0303 	and.w	r3, r3, #3
 8012020:	2b00      	cmp	r3, #0
 8012022:	d001      	beq.n	8012028 <tcp_receive+0x6c4>
 8012024:	2301      	movs	r3, #1
 8012026:	e000      	b.n	801202a <tcp_receive+0x6c6>
 8012028:	2300      	movs	r3, #0
 801202a:	4423      	add	r3, r4
 801202c:	b29a      	uxth	r2, r3
 801202e:	4b70      	ldr	r3, [pc, #448]	@ (80121f0 <tcp_receive+0x88c>)
 8012030:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012036:	4b6e      	ldr	r3, [pc, #440]	@ (80121f0 <tcp_receive+0x88c>)
 8012038:	881b      	ldrh	r3, [r3, #0]
 801203a:	429a      	cmp	r2, r3
 801203c:	d274      	bcs.n	8012128 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801203e:	4b6b      	ldr	r3, [pc, #428]	@ (80121ec <tcp_receive+0x888>)
 8012040:	68db      	ldr	r3, [r3, #12]
 8012042:	899b      	ldrh	r3, [r3, #12]
 8012044:	b29b      	uxth	r3, r3
 8012046:	4618      	mov	r0, r3
 8012048:	f7fa fcac 	bl	800c9a4 <lwip_htons>
 801204c:	4603      	mov	r3, r0
 801204e:	b2db      	uxtb	r3, r3
 8012050:	f003 0301 	and.w	r3, r3, #1
 8012054:	2b00      	cmp	r3, #0
 8012056:	d01e      	beq.n	8012096 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012058:	4b64      	ldr	r3, [pc, #400]	@ (80121ec <tcp_receive+0x888>)
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	899b      	ldrh	r3, [r3, #12]
 801205e:	b29b      	uxth	r3, r3
 8012060:	b21b      	sxth	r3, r3
 8012062:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012066:	b21c      	sxth	r4, r3
 8012068:	4b60      	ldr	r3, [pc, #384]	@ (80121ec <tcp_receive+0x888>)
 801206a:	68db      	ldr	r3, [r3, #12]
 801206c:	899b      	ldrh	r3, [r3, #12]
 801206e:	b29b      	uxth	r3, r3
 8012070:	4618      	mov	r0, r3
 8012072:	f7fa fc97 	bl	800c9a4 <lwip_htons>
 8012076:	4603      	mov	r3, r0
 8012078:	b2db      	uxtb	r3, r3
 801207a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801207e:	b29b      	uxth	r3, r3
 8012080:	4618      	mov	r0, r3
 8012082:	f7fa fc8f 	bl	800c9a4 <lwip_htons>
 8012086:	4603      	mov	r3, r0
 8012088:	b21b      	sxth	r3, r3
 801208a:	4323      	orrs	r3, r4
 801208c:	b21a      	sxth	r2, r3
 801208e:	4b57      	ldr	r3, [pc, #348]	@ (80121ec <tcp_receive+0x888>)
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	b292      	uxth	r2, r2
 8012094:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801209a:	4b54      	ldr	r3, [pc, #336]	@ (80121ec <tcp_receive+0x888>)
 801209c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801209e:	4b53      	ldr	r3, [pc, #332]	@ (80121ec <tcp_receive+0x888>)
 80120a0:	68db      	ldr	r3, [r3, #12]
 80120a2:	899b      	ldrh	r3, [r3, #12]
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7fa fc7c 	bl	800c9a4 <lwip_htons>
 80120ac:	4603      	mov	r3, r0
 80120ae:	b2db      	uxtb	r3, r3
 80120b0:	f003 0302 	and.w	r3, r3, #2
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d005      	beq.n	80120c4 <tcp_receive+0x760>
            inseg.len -= 1;
 80120b8:	4b4c      	ldr	r3, [pc, #304]	@ (80121ec <tcp_receive+0x888>)
 80120ba:	891b      	ldrh	r3, [r3, #8]
 80120bc:	3b01      	subs	r3, #1
 80120be:	b29a      	uxth	r2, r3
 80120c0:	4b4a      	ldr	r3, [pc, #296]	@ (80121ec <tcp_receive+0x888>)
 80120c2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80120c4:	4b49      	ldr	r3, [pc, #292]	@ (80121ec <tcp_receive+0x888>)
 80120c6:	685b      	ldr	r3, [r3, #4]
 80120c8:	4a48      	ldr	r2, [pc, #288]	@ (80121ec <tcp_receive+0x888>)
 80120ca:	8912      	ldrh	r2, [r2, #8]
 80120cc:	4611      	mov	r1, r2
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7fb fed4 	bl	800de7c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80120d4:	4b45      	ldr	r3, [pc, #276]	@ (80121ec <tcp_receive+0x888>)
 80120d6:	891c      	ldrh	r4, [r3, #8]
 80120d8:	4b44      	ldr	r3, [pc, #272]	@ (80121ec <tcp_receive+0x888>)
 80120da:	68db      	ldr	r3, [r3, #12]
 80120dc:	899b      	ldrh	r3, [r3, #12]
 80120de:	b29b      	uxth	r3, r3
 80120e0:	4618      	mov	r0, r3
 80120e2:	f7fa fc5f 	bl	800c9a4 <lwip_htons>
 80120e6:	4603      	mov	r3, r0
 80120e8:	b2db      	uxtb	r3, r3
 80120ea:	f003 0303 	and.w	r3, r3, #3
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d001      	beq.n	80120f6 <tcp_receive+0x792>
 80120f2:	2301      	movs	r3, #1
 80120f4:	e000      	b.n	80120f8 <tcp_receive+0x794>
 80120f6:	2300      	movs	r3, #0
 80120f8:	4423      	add	r3, r4
 80120fa:	b29a      	uxth	r2, r3
 80120fc:	4b3c      	ldr	r3, [pc, #240]	@ (80121f0 <tcp_receive+0x88c>)
 80120fe:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012100:	4b3b      	ldr	r3, [pc, #236]	@ (80121f0 <tcp_receive+0x88c>)
 8012102:	881b      	ldrh	r3, [r3, #0]
 8012104:	461a      	mov	r2, r3
 8012106:	4b38      	ldr	r3, [pc, #224]	@ (80121e8 <tcp_receive+0x884>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	441a      	add	r2, r3
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012110:	6879      	ldr	r1, [r7, #4]
 8012112:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012114:	440b      	add	r3, r1
 8012116:	429a      	cmp	r2, r3
 8012118:	d006      	beq.n	8012128 <tcp_receive+0x7c4>
 801211a:	4b36      	ldr	r3, [pc, #216]	@ (80121f4 <tcp_receive+0x890>)
 801211c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8012120:	4935      	ldr	r1, [pc, #212]	@ (80121f8 <tcp_receive+0x894>)
 8012122:	4836      	ldr	r0, [pc, #216]	@ (80121fc <tcp_receive+0x898>)
 8012124:	f005 fd9c 	bl	8017c60 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801212c:	2b00      	cmp	r3, #0
 801212e:	f000 80e6 	beq.w	80122fe <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012132:	4b2e      	ldr	r3, [pc, #184]	@ (80121ec <tcp_receive+0x888>)
 8012134:	68db      	ldr	r3, [r3, #12]
 8012136:	899b      	ldrh	r3, [r3, #12]
 8012138:	b29b      	uxth	r3, r3
 801213a:	4618      	mov	r0, r3
 801213c:	f7fa fc32 	bl	800c9a4 <lwip_htons>
 8012140:	4603      	mov	r3, r0
 8012142:	b2db      	uxtb	r3, r3
 8012144:	f003 0301 	and.w	r3, r3, #1
 8012148:	2b00      	cmp	r3, #0
 801214a:	d010      	beq.n	801216e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801214c:	e00a      	b.n	8012164 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012152:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012158:	681a      	ldr	r2, [r3, #0]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801215e:	68f8      	ldr	r0, [r7, #12]
 8012160:	f7fd fcbd 	bl	800fade <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012168:	2b00      	cmp	r3, #0
 801216a:	d1f0      	bne.n	801214e <tcp_receive+0x7ea>
 801216c:	e0c7      	b.n	80122fe <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012172:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012174:	e051      	b.n	801221a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012178:	68db      	ldr	r3, [r3, #12]
 801217a:	899b      	ldrh	r3, [r3, #12]
 801217c:	b29b      	uxth	r3, r3
 801217e:	4618      	mov	r0, r3
 8012180:	f7fa fc10 	bl	800c9a4 <lwip_htons>
 8012184:	4603      	mov	r3, r0
 8012186:	b2db      	uxtb	r3, r3
 8012188:	f003 0301 	and.w	r3, r3, #1
 801218c:	2b00      	cmp	r3, #0
 801218e:	d03c      	beq.n	801220a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012190:	4b16      	ldr	r3, [pc, #88]	@ (80121ec <tcp_receive+0x888>)
 8012192:	68db      	ldr	r3, [r3, #12]
 8012194:	899b      	ldrh	r3, [r3, #12]
 8012196:	b29b      	uxth	r3, r3
 8012198:	4618      	mov	r0, r3
 801219a:	f7fa fc03 	bl	800c9a4 <lwip_htons>
 801219e:	4603      	mov	r3, r0
 80121a0:	b2db      	uxtb	r3, r3
 80121a2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d12f      	bne.n	801220a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80121aa:	4b10      	ldr	r3, [pc, #64]	@ (80121ec <tcp_receive+0x888>)
 80121ac:	68db      	ldr	r3, [r3, #12]
 80121ae:	899b      	ldrh	r3, [r3, #12]
 80121b0:	b29c      	uxth	r4, r3
 80121b2:	2001      	movs	r0, #1
 80121b4:	f7fa fbf6 	bl	800c9a4 <lwip_htons>
 80121b8:	4603      	mov	r3, r0
 80121ba:	461a      	mov	r2, r3
 80121bc:	4b0b      	ldr	r3, [pc, #44]	@ (80121ec <tcp_receive+0x888>)
 80121be:	68db      	ldr	r3, [r3, #12]
 80121c0:	4322      	orrs	r2, r4
 80121c2:	b292      	uxth	r2, r2
 80121c4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80121c6:	4b09      	ldr	r3, [pc, #36]	@ (80121ec <tcp_receive+0x888>)
 80121c8:	891c      	ldrh	r4, [r3, #8]
 80121ca:	4b08      	ldr	r3, [pc, #32]	@ (80121ec <tcp_receive+0x888>)
 80121cc:	68db      	ldr	r3, [r3, #12]
 80121ce:	899b      	ldrh	r3, [r3, #12]
 80121d0:	b29b      	uxth	r3, r3
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7fa fbe6 	bl	800c9a4 <lwip_htons>
 80121d8:	4603      	mov	r3, r0
 80121da:	b2db      	uxtb	r3, r3
 80121dc:	f003 0303 	and.w	r3, r3, #3
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d00d      	beq.n	8012200 <tcp_receive+0x89c>
 80121e4:	2301      	movs	r3, #1
 80121e6:	e00c      	b.n	8012202 <tcp_receive+0x89e>
 80121e8:	20010030 	.word	0x20010030
 80121ec:	20010010 	.word	0x20010010
 80121f0:	2001003a 	.word	0x2001003a
 80121f4:	0801b000 	.word	0x0801b000
 80121f8:	0801b3a8 	.word	0x0801b3a8
 80121fc:	0801b04c 	.word	0x0801b04c
 8012200:	2300      	movs	r3, #0
 8012202:	4423      	add	r3, r4
 8012204:	b29a      	uxth	r2, r3
 8012206:	4b98      	ldr	r3, [pc, #608]	@ (8012468 <tcp_receive+0xb04>)
 8012208:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801220a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801220c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801220e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8012214:	6938      	ldr	r0, [r7, #16]
 8012216:	f7fd fc62 	bl	800fade <tcp_seg_free>
            while (next &&
 801221a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801221c:	2b00      	cmp	r3, #0
 801221e:	d00e      	beq.n	801223e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012220:	4b91      	ldr	r3, [pc, #580]	@ (8012468 <tcp_receive+0xb04>)
 8012222:	881b      	ldrh	r3, [r3, #0]
 8012224:	461a      	mov	r2, r3
 8012226:	4b91      	ldr	r3, [pc, #580]	@ (801246c <tcp_receive+0xb08>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	441a      	add	r2, r3
 801222c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801222e:	68db      	ldr	r3, [r3, #12]
 8012230:	685b      	ldr	r3, [r3, #4]
 8012232:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012234:	8909      	ldrh	r1, [r1, #8]
 8012236:	440b      	add	r3, r1
 8012238:	1ad3      	subs	r3, r2, r3
            while (next &&
 801223a:	2b00      	cmp	r3, #0
 801223c:	da9b      	bge.n	8012176 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801223e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012240:	2b00      	cmp	r3, #0
 8012242:	d059      	beq.n	80122f8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012244:	4b88      	ldr	r3, [pc, #544]	@ (8012468 <tcp_receive+0xb04>)
 8012246:	881b      	ldrh	r3, [r3, #0]
 8012248:	461a      	mov	r2, r3
 801224a:	4b88      	ldr	r3, [pc, #544]	@ (801246c <tcp_receive+0xb08>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	441a      	add	r2, r3
 8012250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012252:	68db      	ldr	r3, [r3, #12]
 8012254:	685b      	ldr	r3, [r3, #4]
 8012256:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012258:	2b00      	cmp	r3, #0
 801225a:	dd4d      	ble.n	80122f8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801225c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801225e:	68db      	ldr	r3, [r3, #12]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	b29a      	uxth	r2, r3
 8012264:	4b81      	ldr	r3, [pc, #516]	@ (801246c <tcp_receive+0xb08>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	b29b      	uxth	r3, r3
 801226a:	1ad3      	subs	r3, r2, r3
 801226c:	b29a      	uxth	r2, r3
 801226e:	4b80      	ldr	r3, [pc, #512]	@ (8012470 <tcp_receive+0xb0c>)
 8012270:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012272:	4b7f      	ldr	r3, [pc, #508]	@ (8012470 <tcp_receive+0xb0c>)
 8012274:	68db      	ldr	r3, [r3, #12]
 8012276:	899b      	ldrh	r3, [r3, #12]
 8012278:	b29b      	uxth	r3, r3
 801227a:	4618      	mov	r0, r3
 801227c:	f7fa fb92 	bl	800c9a4 <lwip_htons>
 8012280:	4603      	mov	r3, r0
 8012282:	b2db      	uxtb	r3, r3
 8012284:	f003 0302 	and.w	r3, r3, #2
 8012288:	2b00      	cmp	r3, #0
 801228a:	d005      	beq.n	8012298 <tcp_receive+0x934>
                inseg.len -= 1;
 801228c:	4b78      	ldr	r3, [pc, #480]	@ (8012470 <tcp_receive+0xb0c>)
 801228e:	891b      	ldrh	r3, [r3, #8]
 8012290:	3b01      	subs	r3, #1
 8012292:	b29a      	uxth	r2, r3
 8012294:	4b76      	ldr	r3, [pc, #472]	@ (8012470 <tcp_receive+0xb0c>)
 8012296:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012298:	4b75      	ldr	r3, [pc, #468]	@ (8012470 <tcp_receive+0xb0c>)
 801229a:	685b      	ldr	r3, [r3, #4]
 801229c:	4a74      	ldr	r2, [pc, #464]	@ (8012470 <tcp_receive+0xb0c>)
 801229e:	8912      	ldrh	r2, [r2, #8]
 80122a0:	4611      	mov	r1, r2
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7fb fdea 	bl	800de7c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80122a8:	4b71      	ldr	r3, [pc, #452]	@ (8012470 <tcp_receive+0xb0c>)
 80122aa:	891c      	ldrh	r4, [r3, #8]
 80122ac:	4b70      	ldr	r3, [pc, #448]	@ (8012470 <tcp_receive+0xb0c>)
 80122ae:	68db      	ldr	r3, [r3, #12]
 80122b0:	899b      	ldrh	r3, [r3, #12]
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7fa fb75 	bl	800c9a4 <lwip_htons>
 80122ba:	4603      	mov	r3, r0
 80122bc:	b2db      	uxtb	r3, r3
 80122be:	f003 0303 	and.w	r3, r3, #3
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d001      	beq.n	80122ca <tcp_receive+0x966>
 80122c6:	2301      	movs	r3, #1
 80122c8:	e000      	b.n	80122cc <tcp_receive+0x968>
 80122ca:	2300      	movs	r3, #0
 80122cc:	4423      	add	r3, r4
 80122ce:	b29a      	uxth	r2, r3
 80122d0:	4b65      	ldr	r3, [pc, #404]	@ (8012468 <tcp_receive+0xb04>)
 80122d2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80122d4:	4b64      	ldr	r3, [pc, #400]	@ (8012468 <tcp_receive+0xb04>)
 80122d6:	881b      	ldrh	r3, [r3, #0]
 80122d8:	461a      	mov	r2, r3
 80122da:	4b64      	ldr	r3, [pc, #400]	@ (801246c <tcp_receive+0xb08>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	441a      	add	r2, r3
 80122e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122e2:	68db      	ldr	r3, [r3, #12]
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d006      	beq.n	80122f8 <tcp_receive+0x994>
 80122ea:	4b62      	ldr	r3, [pc, #392]	@ (8012474 <tcp_receive+0xb10>)
 80122ec:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80122f0:	4961      	ldr	r1, [pc, #388]	@ (8012478 <tcp_receive+0xb14>)
 80122f2:	4862      	ldr	r0, [pc, #392]	@ (801247c <tcp_receive+0xb18>)
 80122f4:	f005 fcb4 	bl	8017c60 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80122fc:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80122fe:	4b5a      	ldr	r3, [pc, #360]	@ (8012468 <tcp_receive+0xb04>)
 8012300:	881b      	ldrh	r3, [r3, #0]
 8012302:	461a      	mov	r2, r3
 8012304:	4b59      	ldr	r3, [pc, #356]	@ (801246c <tcp_receive+0xb08>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	441a      	add	r2, r3
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012312:	4b55      	ldr	r3, [pc, #340]	@ (8012468 <tcp_receive+0xb04>)
 8012314:	881b      	ldrh	r3, [r3, #0]
 8012316:	429a      	cmp	r2, r3
 8012318:	d206      	bcs.n	8012328 <tcp_receive+0x9c4>
 801231a:	4b56      	ldr	r3, [pc, #344]	@ (8012474 <tcp_receive+0xb10>)
 801231c:	f240 6207 	movw	r2, #1543	@ 0x607
 8012320:	4957      	ldr	r1, [pc, #348]	@ (8012480 <tcp_receive+0xb1c>)
 8012322:	4856      	ldr	r0, [pc, #344]	@ (801247c <tcp_receive+0xb18>)
 8012324:	f005 fc9c 	bl	8017c60 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801232c:	4b4e      	ldr	r3, [pc, #312]	@ (8012468 <tcp_receive+0xb04>)
 801232e:	881b      	ldrh	r3, [r3, #0]
 8012330:	1ad3      	subs	r3, r2, r3
 8012332:	b29a      	uxth	r2, r3
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012338:	6878      	ldr	r0, [r7, #4]
 801233a:	f7fc fea5 	bl	800f088 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801233e:	4b4c      	ldr	r3, [pc, #304]	@ (8012470 <tcp_receive+0xb0c>)
 8012340:	685b      	ldr	r3, [r3, #4]
 8012342:	891b      	ldrh	r3, [r3, #8]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d006      	beq.n	8012356 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012348:	4b49      	ldr	r3, [pc, #292]	@ (8012470 <tcp_receive+0xb0c>)
 801234a:	685b      	ldr	r3, [r3, #4]
 801234c:	4a4d      	ldr	r2, [pc, #308]	@ (8012484 <tcp_receive+0xb20>)
 801234e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012350:	4b47      	ldr	r3, [pc, #284]	@ (8012470 <tcp_receive+0xb0c>)
 8012352:	2200      	movs	r2, #0
 8012354:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012356:	4b46      	ldr	r3, [pc, #280]	@ (8012470 <tcp_receive+0xb0c>)
 8012358:	68db      	ldr	r3, [r3, #12]
 801235a:	899b      	ldrh	r3, [r3, #12]
 801235c:	b29b      	uxth	r3, r3
 801235e:	4618      	mov	r0, r3
 8012360:	f7fa fb20 	bl	800c9a4 <lwip_htons>
 8012364:	4603      	mov	r3, r0
 8012366:	b2db      	uxtb	r3, r3
 8012368:	f003 0301 	and.w	r3, r3, #1
 801236c:	2b00      	cmp	r3, #0
 801236e:	f000 80b8 	beq.w	80124e2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012372:	4b45      	ldr	r3, [pc, #276]	@ (8012488 <tcp_receive+0xb24>)
 8012374:	781b      	ldrb	r3, [r3, #0]
 8012376:	f043 0320 	orr.w	r3, r3, #32
 801237a:	b2da      	uxtb	r2, r3
 801237c:	4b42      	ldr	r3, [pc, #264]	@ (8012488 <tcp_receive+0xb24>)
 801237e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012380:	e0af      	b.n	80124e2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012386:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801238c:	68db      	ldr	r3, [r3, #12]
 801238e:	685b      	ldr	r3, [r3, #4]
 8012390:	4a36      	ldr	r2, [pc, #216]	@ (801246c <tcp_receive+0xb08>)
 8012392:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	891b      	ldrh	r3, [r3, #8]
 8012398:	461c      	mov	r4, r3
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	68db      	ldr	r3, [r3, #12]
 801239e:	899b      	ldrh	r3, [r3, #12]
 80123a0:	b29b      	uxth	r3, r3
 80123a2:	4618      	mov	r0, r3
 80123a4:	f7fa fafe 	bl	800c9a4 <lwip_htons>
 80123a8:	4603      	mov	r3, r0
 80123aa:	b2db      	uxtb	r3, r3
 80123ac:	f003 0303 	and.w	r3, r3, #3
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d001      	beq.n	80123b8 <tcp_receive+0xa54>
 80123b4:	2301      	movs	r3, #1
 80123b6:	e000      	b.n	80123ba <tcp_receive+0xa56>
 80123b8:	2300      	movs	r3, #0
 80123ba:	191a      	adds	r2, r3, r4
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123c0:	441a      	add	r2, r3
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80123ca:	461c      	mov	r4, r3
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	891b      	ldrh	r3, [r3, #8]
 80123d0:	461d      	mov	r5, r3
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	899b      	ldrh	r3, [r3, #12]
 80123d8:	b29b      	uxth	r3, r3
 80123da:	4618      	mov	r0, r3
 80123dc:	f7fa fae2 	bl	800c9a4 <lwip_htons>
 80123e0:	4603      	mov	r3, r0
 80123e2:	b2db      	uxtb	r3, r3
 80123e4:	f003 0303 	and.w	r3, r3, #3
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d001      	beq.n	80123f0 <tcp_receive+0xa8c>
 80123ec:	2301      	movs	r3, #1
 80123ee:	e000      	b.n	80123f2 <tcp_receive+0xa8e>
 80123f0:	2300      	movs	r3, #0
 80123f2:	442b      	add	r3, r5
 80123f4:	429c      	cmp	r4, r3
 80123f6:	d206      	bcs.n	8012406 <tcp_receive+0xaa2>
 80123f8:	4b1e      	ldr	r3, [pc, #120]	@ (8012474 <tcp_receive+0xb10>)
 80123fa:	f240 622b 	movw	r2, #1579	@ 0x62b
 80123fe:	4923      	ldr	r1, [pc, #140]	@ (801248c <tcp_receive+0xb28>)
 8012400:	481e      	ldr	r0, [pc, #120]	@ (801247c <tcp_receive+0xb18>)
 8012402:	f005 fc2d 	bl	8017c60 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012406:	68bb      	ldr	r3, [r7, #8]
 8012408:	891b      	ldrh	r3, [r3, #8]
 801240a:	461c      	mov	r4, r3
 801240c:	68bb      	ldr	r3, [r7, #8]
 801240e:	68db      	ldr	r3, [r3, #12]
 8012410:	899b      	ldrh	r3, [r3, #12]
 8012412:	b29b      	uxth	r3, r3
 8012414:	4618      	mov	r0, r3
 8012416:	f7fa fac5 	bl	800c9a4 <lwip_htons>
 801241a:	4603      	mov	r3, r0
 801241c:	b2db      	uxtb	r3, r3
 801241e:	f003 0303 	and.w	r3, r3, #3
 8012422:	2b00      	cmp	r3, #0
 8012424:	d001      	beq.n	801242a <tcp_receive+0xac6>
 8012426:	2301      	movs	r3, #1
 8012428:	e000      	b.n	801242c <tcp_receive+0xac8>
 801242a:	2300      	movs	r3, #0
 801242c:	1919      	adds	r1, r3, r4
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012432:	b28b      	uxth	r3, r1
 8012434:	1ad3      	subs	r3, r2, r3
 8012436:	b29a      	uxth	r2, r3
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f7fc fe23 	bl	800f088 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	891b      	ldrh	r3, [r3, #8]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d028      	beq.n	801249e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801244c:	4b0d      	ldr	r3, [pc, #52]	@ (8012484 <tcp_receive+0xb20>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d01d      	beq.n	8012490 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012454:	4b0b      	ldr	r3, [pc, #44]	@ (8012484 <tcp_receive+0xb20>)
 8012456:	681a      	ldr	r2, [r3, #0]
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	685b      	ldr	r3, [r3, #4]
 801245c:	4619      	mov	r1, r3
 801245e:	4610      	mov	r0, r2
 8012460:	f7fb ff60 	bl	800e324 <pbuf_cat>
 8012464:	e018      	b.n	8012498 <tcp_receive+0xb34>
 8012466:	bf00      	nop
 8012468:	2001003a 	.word	0x2001003a
 801246c:	20010030 	.word	0x20010030
 8012470:	20010010 	.word	0x20010010
 8012474:	0801b000 	.word	0x0801b000
 8012478:	0801b3e0 	.word	0x0801b3e0
 801247c:	0801b04c 	.word	0x0801b04c
 8012480:	0801b41c 	.word	0x0801b41c
 8012484:	20010040 	.word	0x20010040
 8012488:	2001003d 	.word	0x2001003d
 801248c:	0801b43c 	.word	0x0801b43c
            } else {
              recv_data = cseg->p;
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	4a70      	ldr	r2, [pc, #448]	@ (8012658 <tcp_receive+0xcf4>)
 8012496:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	2200      	movs	r2, #0
 801249c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	68db      	ldr	r3, [r3, #12]
 80124a2:	899b      	ldrh	r3, [r3, #12]
 80124a4:	b29b      	uxth	r3, r3
 80124a6:	4618      	mov	r0, r3
 80124a8:	f7fa fa7c 	bl	800c9a4 <lwip_htons>
 80124ac:	4603      	mov	r3, r0
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	f003 0301 	and.w	r3, r3, #1
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d00d      	beq.n	80124d4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80124b8:	4b68      	ldr	r3, [pc, #416]	@ (801265c <tcp_receive+0xcf8>)
 80124ba:	781b      	ldrb	r3, [r3, #0]
 80124bc:	f043 0320 	orr.w	r3, r3, #32
 80124c0:	b2da      	uxtb	r2, r3
 80124c2:	4b66      	ldr	r3, [pc, #408]	@ (801265c <tcp_receive+0xcf8>)
 80124c4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	7d1b      	ldrb	r3, [r3, #20]
 80124ca:	2b04      	cmp	r3, #4
 80124cc:	d102      	bne.n	80124d4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	2207      	movs	r2, #7
 80124d2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	681a      	ldr	r2, [r3, #0]
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80124dc:	68b8      	ldr	r0, [r7, #8]
 80124de:	f7fd fafe 	bl	800fade <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d008      	beq.n	80124fc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124ee:	68db      	ldr	r3, [r3, #12]
 80124f0:	685a      	ldr	r2, [r3, #4]
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80124f6:	429a      	cmp	r2, r3
 80124f8:	f43f af43 	beq.w	8012382 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	8b5b      	ldrh	r3, [r3, #26]
 8012500:	f003 0301 	and.w	r3, r3, #1
 8012504:	2b00      	cmp	r3, #0
 8012506:	d00e      	beq.n	8012526 <tcp_receive+0xbc2>
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	8b5b      	ldrh	r3, [r3, #26]
 801250c:	f023 0301 	bic.w	r3, r3, #1
 8012510:	b29a      	uxth	r2, r3
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	835a      	strh	r2, [r3, #26]
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	8b5b      	ldrh	r3, [r3, #26]
 801251a:	f043 0302 	orr.w	r3, r3, #2
 801251e:	b29a      	uxth	r2, r3
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012524:	e187      	b.n	8012836 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	8b5b      	ldrh	r3, [r3, #26]
 801252a:	f043 0301 	orr.w	r3, r3, #1
 801252e:	b29a      	uxth	r2, r3
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012534:	e17f      	b.n	8012836 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801253a:	2b00      	cmp	r3, #0
 801253c:	d106      	bne.n	801254c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801253e:	4848      	ldr	r0, [pc, #288]	@ (8012660 <tcp_receive+0xcfc>)
 8012540:	f7fd fae6 	bl	800fb10 <tcp_seg_copy>
 8012544:	4602      	mov	r2, r0
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	675a      	str	r2, [r3, #116]	@ 0x74
 801254a:	e16c      	b.n	8012826 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801254c:	2300      	movs	r3, #0
 801254e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012554:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012556:	e156      	b.n	8012806 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8012558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801255a:	68db      	ldr	r3, [r3, #12]
 801255c:	685a      	ldr	r2, [r3, #4]
 801255e:	4b41      	ldr	r3, [pc, #260]	@ (8012664 <tcp_receive+0xd00>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	429a      	cmp	r2, r3
 8012564:	d11d      	bne.n	80125a2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012566:	4b3e      	ldr	r3, [pc, #248]	@ (8012660 <tcp_receive+0xcfc>)
 8012568:	891a      	ldrh	r2, [r3, #8]
 801256a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801256c:	891b      	ldrh	r3, [r3, #8]
 801256e:	429a      	cmp	r2, r3
 8012570:	f240 814e 	bls.w	8012810 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012574:	483a      	ldr	r0, [pc, #232]	@ (8012660 <tcp_receive+0xcfc>)
 8012576:	f7fd facb 	bl	800fb10 <tcp_seg_copy>
 801257a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	2b00      	cmp	r3, #0
 8012580:	f000 8148 	beq.w	8012814 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8012584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012586:	2b00      	cmp	r3, #0
 8012588:	d003      	beq.n	8012592 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801258a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801258c:	697a      	ldr	r2, [r7, #20]
 801258e:	601a      	str	r2, [r3, #0]
 8012590:	e002      	b.n	8012598 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	697a      	ldr	r2, [r7, #20]
 8012596:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012598:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801259a:	6978      	ldr	r0, [r7, #20]
 801259c:	f7ff f8de 	bl	801175c <tcp_oos_insert_segment>
                }
                break;
 80125a0:	e138      	b.n	8012814 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80125a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d117      	bne.n	80125d8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80125a8:	4b2e      	ldr	r3, [pc, #184]	@ (8012664 <tcp_receive+0xd00>)
 80125aa:	681a      	ldr	r2, [r3, #0]
 80125ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125ae:	68db      	ldr	r3, [r3, #12]
 80125b0:	685b      	ldr	r3, [r3, #4]
 80125b2:	1ad3      	subs	r3, r2, r3
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	da57      	bge.n	8012668 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80125b8:	4829      	ldr	r0, [pc, #164]	@ (8012660 <tcp_receive+0xcfc>)
 80125ba:	f7fd faa9 	bl	800fb10 <tcp_seg_copy>
 80125be:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80125c0:	69bb      	ldr	r3, [r7, #24]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	f000 8128 	beq.w	8012818 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	69ba      	ldr	r2, [r7, #24]
 80125cc:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80125ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80125d0:	69b8      	ldr	r0, [r7, #24]
 80125d2:	f7ff f8c3 	bl	801175c <tcp_oos_insert_segment>
                  }
                  break;
 80125d6:	e11f      	b.n	8012818 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80125d8:	4b22      	ldr	r3, [pc, #136]	@ (8012664 <tcp_receive+0xd00>)
 80125da:	681a      	ldr	r2, [r3, #0]
 80125dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125de:	68db      	ldr	r3, [r3, #12]
 80125e0:	685b      	ldr	r3, [r3, #4]
 80125e2:	1ad3      	subs	r3, r2, r3
 80125e4:	3b01      	subs	r3, #1
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	db3e      	blt.n	8012668 <tcp_receive+0xd04>
 80125ea:	4b1e      	ldr	r3, [pc, #120]	@ (8012664 <tcp_receive+0xd00>)
 80125ec:	681a      	ldr	r2, [r3, #0]
 80125ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125f0:	68db      	ldr	r3, [r3, #12]
 80125f2:	685b      	ldr	r3, [r3, #4]
 80125f4:	1ad3      	subs	r3, r2, r3
 80125f6:	3301      	adds	r3, #1
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	dc35      	bgt.n	8012668 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80125fc:	4818      	ldr	r0, [pc, #96]	@ (8012660 <tcp_receive+0xcfc>)
 80125fe:	f7fd fa87 	bl	800fb10 <tcp_seg_copy>
 8012602:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012604:	69fb      	ldr	r3, [r7, #28]
 8012606:	2b00      	cmp	r3, #0
 8012608:	f000 8108 	beq.w	801281c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801260c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801260e:	68db      	ldr	r3, [r3, #12]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012614:	8912      	ldrh	r2, [r2, #8]
 8012616:	441a      	add	r2, r3
 8012618:	4b12      	ldr	r3, [pc, #72]	@ (8012664 <tcp_receive+0xd00>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	1ad3      	subs	r3, r2, r3
 801261e:	2b00      	cmp	r3, #0
 8012620:	dd12      	ble.n	8012648 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012622:	4b10      	ldr	r3, [pc, #64]	@ (8012664 <tcp_receive+0xd00>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	b29a      	uxth	r2, r3
 8012628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801262a:	68db      	ldr	r3, [r3, #12]
 801262c:	685b      	ldr	r3, [r3, #4]
 801262e:	b29b      	uxth	r3, r3
 8012630:	1ad3      	subs	r3, r2, r3
 8012632:	b29a      	uxth	r2, r3
 8012634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012636:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801263a:	685a      	ldr	r2, [r3, #4]
 801263c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801263e:	891b      	ldrh	r3, [r3, #8]
 8012640:	4619      	mov	r1, r3
 8012642:	4610      	mov	r0, r2
 8012644:	f7fb fc1a 	bl	800de7c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801264a:	69fa      	ldr	r2, [r7, #28]
 801264c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801264e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012650:	69f8      	ldr	r0, [r7, #28]
 8012652:	f7ff f883 	bl	801175c <tcp_oos_insert_segment>
                  }
                  break;
 8012656:	e0e1      	b.n	801281c <tcp_receive+0xeb8>
 8012658:	20010040 	.word	0x20010040
 801265c:	2001003d 	.word	0x2001003d
 8012660:	20010010 	.word	0x20010010
 8012664:	20010030 	.word	0x20010030
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801266a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801266c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	2b00      	cmp	r3, #0
 8012672:	f040 80c5 	bne.w	8012800 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012676:	4b7f      	ldr	r3, [pc, #508]	@ (8012874 <tcp_receive+0xf10>)
 8012678:	681a      	ldr	r2, [r3, #0]
 801267a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801267c:	68db      	ldr	r3, [r3, #12]
 801267e:	685b      	ldr	r3, [r3, #4]
 8012680:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012682:	2b00      	cmp	r3, #0
 8012684:	f340 80bc 	ble.w	8012800 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801268a:	68db      	ldr	r3, [r3, #12]
 801268c:	899b      	ldrh	r3, [r3, #12]
 801268e:	b29b      	uxth	r3, r3
 8012690:	4618      	mov	r0, r3
 8012692:	f7fa f987 	bl	800c9a4 <lwip_htons>
 8012696:	4603      	mov	r3, r0
 8012698:	b2db      	uxtb	r3, r3
 801269a:	f003 0301 	and.w	r3, r3, #1
 801269e:	2b00      	cmp	r3, #0
 80126a0:	f040 80be 	bne.w	8012820 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80126a4:	4874      	ldr	r0, [pc, #464]	@ (8012878 <tcp_receive+0xf14>)
 80126a6:	f7fd fa33 	bl	800fb10 <tcp_seg_copy>
 80126aa:	4602      	mov	r2, r0
 80126ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126ae:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80126b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	f000 80b5 	beq.w	8012824 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80126ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126bc:	68db      	ldr	r3, [r3, #12]
 80126be:	685b      	ldr	r3, [r3, #4]
 80126c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80126c2:	8912      	ldrh	r2, [r2, #8]
 80126c4:	441a      	add	r2, r3
 80126c6:	4b6b      	ldr	r3, [pc, #428]	@ (8012874 <tcp_receive+0xf10>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	1ad3      	subs	r3, r2, r3
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	dd12      	ble.n	80126f6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80126d0:	4b68      	ldr	r3, [pc, #416]	@ (8012874 <tcp_receive+0xf10>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	b29a      	uxth	r2, r3
 80126d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126d8:	68db      	ldr	r3, [r3, #12]
 80126da:	685b      	ldr	r3, [r3, #4]
 80126dc:	b29b      	uxth	r3, r3
 80126de:	1ad3      	subs	r3, r2, r3
 80126e0:	b29a      	uxth	r2, r3
 80126e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126e4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80126e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126e8:	685a      	ldr	r2, [r3, #4]
 80126ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126ec:	891b      	ldrh	r3, [r3, #8]
 80126ee:	4619      	mov	r1, r3
 80126f0:	4610      	mov	r0, r2
 80126f2:	f7fb fbc3 	bl	800de7c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80126f6:	4b61      	ldr	r3, [pc, #388]	@ (801287c <tcp_receive+0xf18>)
 80126f8:	881b      	ldrh	r3, [r3, #0]
 80126fa:	461a      	mov	r2, r3
 80126fc:	4b5d      	ldr	r3, [pc, #372]	@ (8012874 <tcp_receive+0xf10>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	441a      	add	r2, r3
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012706:	6879      	ldr	r1, [r7, #4]
 8012708:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801270a:	440b      	add	r3, r1
 801270c:	1ad3      	subs	r3, r2, r3
 801270e:	2b00      	cmp	r3, #0
 8012710:	f340 8088 	ble.w	8012824 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	68db      	ldr	r3, [r3, #12]
 801271a:	899b      	ldrh	r3, [r3, #12]
 801271c:	b29b      	uxth	r3, r3
 801271e:	4618      	mov	r0, r3
 8012720:	f7fa f940 	bl	800c9a4 <lwip_htons>
 8012724:	4603      	mov	r3, r0
 8012726:	b2db      	uxtb	r3, r3
 8012728:	f003 0301 	and.w	r3, r3, #1
 801272c:	2b00      	cmp	r3, #0
 801272e:	d021      	beq.n	8012774 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	68db      	ldr	r3, [r3, #12]
 8012736:	899b      	ldrh	r3, [r3, #12]
 8012738:	b29b      	uxth	r3, r3
 801273a:	b21b      	sxth	r3, r3
 801273c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012740:	b21c      	sxth	r4, r3
 8012742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	68db      	ldr	r3, [r3, #12]
 8012748:	899b      	ldrh	r3, [r3, #12]
 801274a:	b29b      	uxth	r3, r3
 801274c:	4618      	mov	r0, r3
 801274e:	f7fa f929 	bl	800c9a4 <lwip_htons>
 8012752:	4603      	mov	r3, r0
 8012754:	b2db      	uxtb	r3, r3
 8012756:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801275a:	b29b      	uxth	r3, r3
 801275c:	4618      	mov	r0, r3
 801275e:	f7fa f921 	bl	800c9a4 <lwip_htons>
 8012762:	4603      	mov	r3, r0
 8012764:	b21b      	sxth	r3, r3
 8012766:	4323      	orrs	r3, r4
 8012768:	b21a      	sxth	r2, r3
 801276a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	68db      	ldr	r3, [r3, #12]
 8012770:	b292      	uxth	r2, r2
 8012772:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012778:	b29a      	uxth	r2, r3
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801277e:	4413      	add	r3, r2
 8012780:	b299      	uxth	r1, r3
 8012782:	4b3c      	ldr	r3, [pc, #240]	@ (8012874 <tcp_receive+0xf10>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	b29a      	uxth	r2, r3
 8012788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	1a8a      	subs	r2, r1, r2
 801278e:	b292      	uxth	r2, r2
 8012790:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	685a      	ldr	r2, [r3, #4]
 8012798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	891b      	ldrh	r3, [r3, #8]
 801279e:	4619      	mov	r1, r3
 80127a0:	4610      	mov	r0, r2
 80127a2:	f7fb fb6b 	bl	800de7c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80127a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	891c      	ldrh	r4, [r3, #8]
 80127ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	68db      	ldr	r3, [r3, #12]
 80127b2:	899b      	ldrh	r3, [r3, #12]
 80127b4:	b29b      	uxth	r3, r3
 80127b6:	4618      	mov	r0, r3
 80127b8:	f7fa f8f4 	bl	800c9a4 <lwip_htons>
 80127bc:	4603      	mov	r3, r0
 80127be:	b2db      	uxtb	r3, r3
 80127c0:	f003 0303 	and.w	r3, r3, #3
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d001      	beq.n	80127cc <tcp_receive+0xe68>
 80127c8:	2301      	movs	r3, #1
 80127ca:	e000      	b.n	80127ce <tcp_receive+0xe6a>
 80127cc:	2300      	movs	r3, #0
 80127ce:	4423      	add	r3, r4
 80127d0:	b29a      	uxth	r2, r3
 80127d2:	4b2a      	ldr	r3, [pc, #168]	@ (801287c <tcp_receive+0xf18>)
 80127d4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80127d6:	4b29      	ldr	r3, [pc, #164]	@ (801287c <tcp_receive+0xf18>)
 80127d8:	881b      	ldrh	r3, [r3, #0]
 80127da:	461a      	mov	r2, r3
 80127dc:	4b25      	ldr	r3, [pc, #148]	@ (8012874 <tcp_receive+0xf10>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	441a      	add	r2, r3
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127e6:	6879      	ldr	r1, [r7, #4]
 80127e8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80127ea:	440b      	add	r3, r1
 80127ec:	429a      	cmp	r2, r3
 80127ee:	d019      	beq.n	8012824 <tcp_receive+0xec0>
 80127f0:	4b23      	ldr	r3, [pc, #140]	@ (8012880 <tcp_receive+0xf1c>)
 80127f2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80127f6:	4923      	ldr	r1, [pc, #140]	@ (8012884 <tcp_receive+0xf20>)
 80127f8:	4823      	ldr	r0, [pc, #140]	@ (8012888 <tcp_receive+0xf24>)
 80127fa:	f005 fa31 	bl	8017c60 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80127fe:	e011      	b.n	8012824 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012808:	2b00      	cmp	r3, #0
 801280a:	f47f aea5 	bne.w	8012558 <tcp_receive+0xbf4>
 801280e:	e00a      	b.n	8012826 <tcp_receive+0xec2>
                break;
 8012810:	bf00      	nop
 8012812:	e008      	b.n	8012826 <tcp_receive+0xec2>
                break;
 8012814:	bf00      	nop
 8012816:	e006      	b.n	8012826 <tcp_receive+0xec2>
                  break;
 8012818:	bf00      	nop
 801281a:	e004      	b.n	8012826 <tcp_receive+0xec2>
                  break;
 801281c:	bf00      	nop
 801281e:	e002      	b.n	8012826 <tcp_receive+0xec2>
                  break;
 8012820:	bf00      	nop
 8012822:	e000      	b.n	8012826 <tcp_receive+0xec2>
                break;
 8012824:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f001 fe88 	bl	801453c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801282c:	e003      	b.n	8012836 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f001 fe84 	bl	801453c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012834:	e01a      	b.n	801286c <tcp_receive+0xf08>
 8012836:	e019      	b.n	801286c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012838:	4b0e      	ldr	r3, [pc, #56]	@ (8012874 <tcp_receive+0xf10>)
 801283a:	681a      	ldr	r2, [r3, #0]
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012840:	1ad3      	subs	r3, r2, r3
 8012842:	2b00      	cmp	r3, #0
 8012844:	db0a      	blt.n	801285c <tcp_receive+0xef8>
 8012846:	4b0b      	ldr	r3, [pc, #44]	@ (8012874 <tcp_receive+0xf10>)
 8012848:	681a      	ldr	r2, [r3, #0]
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801284e:	6879      	ldr	r1, [r7, #4]
 8012850:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012852:	440b      	add	r3, r1
 8012854:	1ad3      	subs	r3, r2, r3
 8012856:	3301      	adds	r3, #1
 8012858:	2b00      	cmp	r3, #0
 801285a:	dd07      	ble.n	801286c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	8b5b      	ldrh	r3, [r3, #26]
 8012860:	f043 0302 	orr.w	r3, r3, #2
 8012864:	b29a      	uxth	r2, r3
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801286a:	e7ff      	b.n	801286c <tcp_receive+0xf08>
 801286c:	bf00      	nop
 801286e:	3750      	adds	r7, #80	@ 0x50
 8012870:	46bd      	mov	sp, r7
 8012872:	bdb0      	pop	{r4, r5, r7, pc}
 8012874:	20010030 	.word	0x20010030
 8012878:	20010010 	.word	0x20010010
 801287c:	2001003a 	.word	0x2001003a
 8012880:	0801b000 	.word	0x0801b000
 8012884:	0801b3a8 	.word	0x0801b3a8
 8012888:	0801b04c 	.word	0x0801b04c

0801288c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801288c:	b480      	push	{r7}
 801288e:	b083      	sub	sp, #12
 8012890:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012892:	4b15      	ldr	r3, [pc, #84]	@ (80128e8 <tcp_get_next_optbyte+0x5c>)
 8012894:	881b      	ldrh	r3, [r3, #0]
 8012896:	1c5a      	adds	r2, r3, #1
 8012898:	b291      	uxth	r1, r2
 801289a:	4a13      	ldr	r2, [pc, #76]	@ (80128e8 <tcp_get_next_optbyte+0x5c>)
 801289c:	8011      	strh	r1, [r2, #0]
 801289e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80128a0:	4b12      	ldr	r3, [pc, #72]	@ (80128ec <tcp_get_next_optbyte+0x60>)
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d004      	beq.n	80128b2 <tcp_get_next_optbyte+0x26>
 80128a8:	4b11      	ldr	r3, [pc, #68]	@ (80128f0 <tcp_get_next_optbyte+0x64>)
 80128aa:	881b      	ldrh	r3, [r3, #0]
 80128ac:	88fa      	ldrh	r2, [r7, #6]
 80128ae:	429a      	cmp	r2, r3
 80128b0:	d208      	bcs.n	80128c4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80128b2:	4b10      	ldr	r3, [pc, #64]	@ (80128f4 <tcp_get_next_optbyte+0x68>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	3314      	adds	r3, #20
 80128b8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80128ba:	88fb      	ldrh	r3, [r7, #6]
 80128bc:	683a      	ldr	r2, [r7, #0]
 80128be:	4413      	add	r3, r2
 80128c0:	781b      	ldrb	r3, [r3, #0]
 80128c2:	e00b      	b.n	80128dc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80128c4:	88fb      	ldrh	r3, [r7, #6]
 80128c6:	b2da      	uxtb	r2, r3
 80128c8:	4b09      	ldr	r3, [pc, #36]	@ (80128f0 <tcp_get_next_optbyte+0x64>)
 80128ca:	881b      	ldrh	r3, [r3, #0]
 80128cc:	b2db      	uxtb	r3, r3
 80128ce:	1ad3      	subs	r3, r2, r3
 80128d0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80128d2:	4b06      	ldr	r3, [pc, #24]	@ (80128ec <tcp_get_next_optbyte+0x60>)
 80128d4:	681a      	ldr	r2, [r3, #0]
 80128d6:	797b      	ldrb	r3, [r7, #5]
 80128d8:	4413      	add	r3, r2
 80128da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80128dc:	4618      	mov	r0, r3
 80128de:	370c      	adds	r7, #12
 80128e0:	46bd      	mov	sp, r7
 80128e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e6:	4770      	bx	lr
 80128e8:	2001002c 	.word	0x2001002c
 80128ec:	20010028 	.word	0x20010028
 80128f0:	20010026 	.word	0x20010026
 80128f4:	20010020 	.word	0x20010020

080128f8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b084      	sub	sp, #16
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d106      	bne.n	8012914 <tcp_parseopt+0x1c>
 8012906:	4b32      	ldr	r3, [pc, #200]	@ (80129d0 <tcp_parseopt+0xd8>)
 8012908:	f240 727d 	movw	r2, #1917	@ 0x77d
 801290c:	4931      	ldr	r1, [pc, #196]	@ (80129d4 <tcp_parseopt+0xdc>)
 801290e:	4832      	ldr	r0, [pc, #200]	@ (80129d8 <tcp_parseopt+0xe0>)
 8012910:	f005 f9a6 	bl	8017c60 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012914:	4b31      	ldr	r3, [pc, #196]	@ (80129dc <tcp_parseopt+0xe4>)
 8012916:	881b      	ldrh	r3, [r3, #0]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d056      	beq.n	80129ca <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801291c:	4b30      	ldr	r3, [pc, #192]	@ (80129e0 <tcp_parseopt+0xe8>)
 801291e:	2200      	movs	r2, #0
 8012920:	801a      	strh	r2, [r3, #0]
 8012922:	e046      	b.n	80129b2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8012924:	f7ff ffb2 	bl	801288c <tcp_get_next_optbyte>
 8012928:	4603      	mov	r3, r0
 801292a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801292c:	7bfb      	ldrb	r3, [r7, #15]
 801292e:	2b02      	cmp	r3, #2
 8012930:	d006      	beq.n	8012940 <tcp_parseopt+0x48>
 8012932:	2b02      	cmp	r3, #2
 8012934:	dc2a      	bgt.n	801298c <tcp_parseopt+0x94>
 8012936:	2b00      	cmp	r3, #0
 8012938:	d042      	beq.n	80129c0 <tcp_parseopt+0xc8>
 801293a:	2b01      	cmp	r3, #1
 801293c:	d038      	beq.n	80129b0 <tcp_parseopt+0xb8>
 801293e:	e025      	b.n	801298c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012940:	f7ff ffa4 	bl	801288c <tcp_get_next_optbyte>
 8012944:	4603      	mov	r3, r0
 8012946:	2b04      	cmp	r3, #4
 8012948:	d13c      	bne.n	80129c4 <tcp_parseopt+0xcc>
 801294a:	4b25      	ldr	r3, [pc, #148]	@ (80129e0 <tcp_parseopt+0xe8>)
 801294c:	881b      	ldrh	r3, [r3, #0]
 801294e:	3301      	adds	r3, #1
 8012950:	4a22      	ldr	r2, [pc, #136]	@ (80129dc <tcp_parseopt+0xe4>)
 8012952:	8812      	ldrh	r2, [r2, #0]
 8012954:	4293      	cmp	r3, r2
 8012956:	da35      	bge.n	80129c4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012958:	f7ff ff98 	bl	801288c <tcp_get_next_optbyte>
 801295c:	4603      	mov	r3, r0
 801295e:	021b      	lsls	r3, r3, #8
 8012960:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012962:	f7ff ff93 	bl	801288c <tcp_get_next_optbyte>
 8012966:	4603      	mov	r3, r0
 8012968:	461a      	mov	r2, r3
 801296a:	89bb      	ldrh	r3, [r7, #12]
 801296c:	4313      	orrs	r3, r2
 801296e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012970:	89bb      	ldrh	r3, [r7, #12]
 8012972:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8012976:	d804      	bhi.n	8012982 <tcp_parseopt+0x8a>
 8012978:	89bb      	ldrh	r3, [r7, #12]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d001      	beq.n	8012982 <tcp_parseopt+0x8a>
 801297e:	89ba      	ldrh	r2, [r7, #12]
 8012980:	e001      	b.n	8012986 <tcp_parseopt+0x8e>
 8012982:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801298a:	e012      	b.n	80129b2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801298c:	f7ff ff7e 	bl	801288c <tcp_get_next_optbyte>
 8012990:	4603      	mov	r3, r0
 8012992:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012994:	7afb      	ldrb	r3, [r7, #11]
 8012996:	2b01      	cmp	r3, #1
 8012998:	d916      	bls.n	80129c8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801299a:	7afb      	ldrb	r3, [r7, #11]
 801299c:	b29a      	uxth	r2, r3
 801299e:	4b10      	ldr	r3, [pc, #64]	@ (80129e0 <tcp_parseopt+0xe8>)
 80129a0:	881b      	ldrh	r3, [r3, #0]
 80129a2:	4413      	add	r3, r2
 80129a4:	b29b      	uxth	r3, r3
 80129a6:	3b02      	subs	r3, #2
 80129a8:	b29a      	uxth	r2, r3
 80129aa:	4b0d      	ldr	r3, [pc, #52]	@ (80129e0 <tcp_parseopt+0xe8>)
 80129ac:	801a      	strh	r2, [r3, #0]
 80129ae:	e000      	b.n	80129b2 <tcp_parseopt+0xba>
          break;
 80129b0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80129b2:	4b0b      	ldr	r3, [pc, #44]	@ (80129e0 <tcp_parseopt+0xe8>)
 80129b4:	881a      	ldrh	r2, [r3, #0]
 80129b6:	4b09      	ldr	r3, [pc, #36]	@ (80129dc <tcp_parseopt+0xe4>)
 80129b8:	881b      	ldrh	r3, [r3, #0]
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d3b2      	bcc.n	8012924 <tcp_parseopt+0x2c>
 80129be:	e004      	b.n	80129ca <tcp_parseopt+0xd2>
          return;
 80129c0:	bf00      	nop
 80129c2:	e002      	b.n	80129ca <tcp_parseopt+0xd2>
            return;
 80129c4:	bf00      	nop
 80129c6:	e000      	b.n	80129ca <tcp_parseopt+0xd2>
            return;
 80129c8:	bf00      	nop
      }
    }
  }
}
 80129ca:	3710      	adds	r7, #16
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}
 80129d0:	0801b000 	.word	0x0801b000
 80129d4:	0801b464 	.word	0x0801b464
 80129d8:	0801b04c 	.word	0x0801b04c
 80129dc:	20010024 	.word	0x20010024
 80129e0:	2001002c 	.word	0x2001002c

080129e4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80129e4:	b480      	push	{r7}
 80129e6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80129e8:	4b05      	ldr	r3, [pc, #20]	@ (8012a00 <tcp_trigger_input_pcb_close+0x1c>)
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	f043 0310 	orr.w	r3, r3, #16
 80129f0:	b2da      	uxtb	r2, r3
 80129f2:	4b03      	ldr	r3, [pc, #12]	@ (8012a00 <tcp_trigger_input_pcb_close+0x1c>)
 80129f4:	701a      	strb	r2, [r3, #0]
}
 80129f6:	bf00      	nop
 80129f8:	46bd      	mov	sp, r7
 80129fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fe:	4770      	bx	lr
 8012a00:	2001003d 	.word	0x2001003d

08012a04 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b084      	sub	sp, #16
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	60f8      	str	r0, [r7, #12]
 8012a0c:	60b9      	str	r1, [r7, #8]
 8012a0e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d00a      	beq.n	8012a2c <tcp_route+0x28>
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	7a1b      	ldrb	r3, [r3, #8]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d006      	beq.n	8012a2c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	7a1b      	ldrb	r3, [r3, #8]
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7fb f822 	bl	800da6c <netif_get_by_index>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	e003      	b.n	8012a34 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f003 fc49 	bl	80162c4 <ip4_route>
 8012a32:	4603      	mov	r3, r0
  }
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	3710      	adds	r7, #16
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}

08012a3c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012a3c:	b590      	push	{r4, r7, lr}
 8012a3e:	b087      	sub	sp, #28
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	60f8      	str	r0, [r7, #12]
 8012a44:	60b9      	str	r1, [r7, #8]
 8012a46:	603b      	str	r3, [r7, #0]
 8012a48:	4613      	mov	r3, r2
 8012a4a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d105      	bne.n	8012a5e <tcp_create_segment+0x22>
 8012a52:	4b43      	ldr	r3, [pc, #268]	@ (8012b60 <tcp_create_segment+0x124>)
 8012a54:	22a3      	movs	r2, #163	@ 0xa3
 8012a56:	4943      	ldr	r1, [pc, #268]	@ (8012b64 <tcp_create_segment+0x128>)
 8012a58:	4843      	ldr	r0, [pc, #268]	@ (8012b68 <tcp_create_segment+0x12c>)
 8012a5a:	f005 f901 	bl	8017c60 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d105      	bne.n	8012a70 <tcp_create_segment+0x34>
 8012a64:	4b3e      	ldr	r3, [pc, #248]	@ (8012b60 <tcp_create_segment+0x124>)
 8012a66:	22a4      	movs	r2, #164	@ 0xa4
 8012a68:	4940      	ldr	r1, [pc, #256]	@ (8012b6c <tcp_create_segment+0x130>)
 8012a6a:	483f      	ldr	r0, [pc, #252]	@ (8012b68 <tcp_create_segment+0x12c>)
 8012a6c:	f005 f8f8 	bl	8017c60 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012a70:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012a74:	009b      	lsls	r3, r3, #2
 8012a76:	b2db      	uxtb	r3, r3
 8012a78:	f003 0304 	and.w	r3, r3, #4
 8012a7c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012a7e:	2003      	movs	r0, #3
 8012a80:	f7fa fc68 	bl	800d354 <memp_malloc>
 8012a84:	6138      	str	r0, [r7, #16]
 8012a86:	693b      	ldr	r3, [r7, #16]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d104      	bne.n	8012a96 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012a8c:	68b8      	ldr	r0, [r7, #8]
 8012a8e:	f7fb fb7b 	bl	800e188 <pbuf_free>
    return NULL;
 8012a92:	2300      	movs	r3, #0
 8012a94:	e060      	b.n	8012b58 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012a9c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	2200      	movs	r2, #0
 8012aa2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	68ba      	ldr	r2, [r7, #8]
 8012aa8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	891a      	ldrh	r2, [r3, #8]
 8012aae:	7dfb      	ldrb	r3, [r7, #23]
 8012ab0:	b29b      	uxth	r3, r3
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d205      	bcs.n	8012ac2 <tcp_create_segment+0x86>
 8012ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8012b60 <tcp_create_segment+0x124>)
 8012ab8:	22b0      	movs	r2, #176	@ 0xb0
 8012aba:	492d      	ldr	r1, [pc, #180]	@ (8012b70 <tcp_create_segment+0x134>)
 8012abc:	482a      	ldr	r0, [pc, #168]	@ (8012b68 <tcp_create_segment+0x12c>)
 8012abe:	f005 f8cf 	bl	8017c60 <iprintf>
  seg->len = p->tot_len - optlen;
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	891a      	ldrh	r2, [r3, #8]
 8012ac6:	7dfb      	ldrb	r3, [r7, #23]
 8012ac8:	b29b      	uxth	r3, r3
 8012aca:	1ad3      	subs	r3, r2, r3
 8012acc:	b29a      	uxth	r2, r3
 8012ace:	693b      	ldr	r3, [r7, #16]
 8012ad0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012ad2:	2114      	movs	r1, #20
 8012ad4:	68b8      	ldr	r0, [r7, #8]
 8012ad6:	f7fb fac1 	bl	800e05c <pbuf_add_header>
 8012ada:	4603      	mov	r3, r0
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d004      	beq.n	8012aea <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012ae0:	6938      	ldr	r0, [r7, #16]
 8012ae2:	f7fc fffc 	bl	800fade <tcp_seg_free>
    return NULL;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	e036      	b.n	8012b58 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012aea:	693b      	ldr	r3, [r7, #16]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	685a      	ldr	r2, [r3, #4]
 8012af0:	693b      	ldr	r3, [r7, #16]
 8012af2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	8ada      	ldrh	r2, [r3, #22]
 8012af8:	693b      	ldr	r3, [r7, #16]
 8012afa:	68dc      	ldr	r4, [r3, #12]
 8012afc:	4610      	mov	r0, r2
 8012afe:	f7f9 ff51 	bl	800c9a4 <lwip_htons>
 8012b02:	4603      	mov	r3, r0
 8012b04:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	8b1a      	ldrh	r2, [r3, #24]
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	68dc      	ldr	r4, [r3, #12]
 8012b0e:	4610      	mov	r0, r2
 8012b10:	f7f9 ff48 	bl	800c9a4 <lwip_htons>
 8012b14:	4603      	mov	r3, r0
 8012b16:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012b18:	693b      	ldr	r3, [r7, #16]
 8012b1a:	68dc      	ldr	r4, [r3, #12]
 8012b1c:	6838      	ldr	r0, [r7, #0]
 8012b1e:	f7f9 ff56 	bl	800c9ce <lwip_htonl>
 8012b22:	4603      	mov	r3, r0
 8012b24:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012b26:	7dfb      	ldrb	r3, [r7, #23]
 8012b28:	089b      	lsrs	r3, r3, #2
 8012b2a:	b2db      	uxtb	r3, r3
 8012b2c:	3305      	adds	r3, #5
 8012b2e:	b29b      	uxth	r3, r3
 8012b30:	031b      	lsls	r3, r3, #12
 8012b32:	b29a      	uxth	r2, r3
 8012b34:	79fb      	ldrb	r3, [r7, #7]
 8012b36:	b29b      	uxth	r3, r3
 8012b38:	4313      	orrs	r3, r2
 8012b3a:	b29a      	uxth	r2, r3
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	68dc      	ldr	r4, [r3, #12]
 8012b40:	4610      	mov	r0, r2
 8012b42:	f7f9 ff2f 	bl	800c9a4 <lwip_htons>
 8012b46:	4603      	mov	r3, r0
 8012b48:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	68db      	ldr	r3, [r3, #12]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	749a      	strb	r2, [r3, #18]
 8012b52:	2200      	movs	r2, #0
 8012b54:	74da      	strb	r2, [r3, #19]
  return seg;
 8012b56:	693b      	ldr	r3, [r7, #16]
}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	371c      	adds	r7, #28
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd90      	pop	{r4, r7, pc}
 8012b60:	0801b480 	.word	0x0801b480
 8012b64:	0801b4b4 	.word	0x0801b4b4
 8012b68:	0801b4d4 	.word	0x0801b4d4
 8012b6c:	0801b4fc 	.word	0x0801b4fc
 8012b70:	0801b520 	.word	0x0801b520

08012b74 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b086      	sub	sp, #24
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	607b      	str	r3, [r7, #4]
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	73fb      	strb	r3, [r7, #15]
 8012b80:	460b      	mov	r3, r1
 8012b82:	81bb      	strh	r3, [r7, #12]
 8012b84:	4613      	mov	r3, r2
 8012b86:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012b88:	89bb      	ldrh	r3, [r7, #12]
 8012b8a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d105      	bne.n	8012b9e <tcp_pbuf_prealloc+0x2a>
 8012b92:	4b30      	ldr	r3, [pc, #192]	@ (8012c54 <tcp_pbuf_prealloc+0xe0>)
 8012b94:	22e8      	movs	r2, #232	@ 0xe8
 8012b96:	4930      	ldr	r1, [pc, #192]	@ (8012c58 <tcp_pbuf_prealloc+0xe4>)
 8012b98:	4830      	ldr	r0, [pc, #192]	@ (8012c5c <tcp_pbuf_prealloc+0xe8>)
 8012b9a:	f005 f861 	bl	8017c60 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012b9e:	6a3b      	ldr	r3, [r7, #32]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d105      	bne.n	8012bb0 <tcp_pbuf_prealloc+0x3c>
 8012ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8012c54 <tcp_pbuf_prealloc+0xe0>)
 8012ba6:	22e9      	movs	r2, #233	@ 0xe9
 8012ba8:	492d      	ldr	r1, [pc, #180]	@ (8012c60 <tcp_pbuf_prealloc+0xec>)
 8012baa:	482c      	ldr	r0, [pc, #176]	@ (8012c5c <tcp_pbuf_prealloc+0xe8>)
 8012bac:	f005 f858 	bl	8017c60 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012bb0:	89ba      	ldrh	r2, [r7, #12]
 8012bb2:	897b      	ldrh	r3, [r7, #10]
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d221      	bcs.n	8012bfc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012bb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012bbc:	f003 0302 	and.w	r3, r3, #2
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d111      	bne.n	8012be8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012bc4:	6a3b      	ldr	r3, [r7, #32]
 8012bc6:	8b5b      	ldrh	r3, [r3, #26]
 8012bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d115      	bne.n	8012bfc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012bd0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d007      	beq.n	8012be8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012bd8:	6a3b      	ldr	r3, [r7, #32]
 8012bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d103      	bne.n	8012be8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012be0:	6a3b      	ldr	r3, [r7, #32]
 8012be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d009      	beq.n	8012bfc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012be8:	89bb      	ldrh	r3, [r7, #12]
 8012bea:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8012bee:	f023 0203 	bic.w	r2, r3, #3
 8012bf2:	897b      	ldrh	r3, [r7, #10]
 8012bf4:	4293      	cmp	r3, r2
 8012bf6:	bf28      	it	cs
 8012bf8:	4613      	movcs	r3, r2
 8012bfa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012bfc:	8af9      	ldrh	r1, [r7, #22]
 8012bfe:	7bfb      	ldrb	r3, [r7, #15]
 8012c00:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012c04:	4618      	mov	r0, r3
 8012c06:	f7fa ffdb 	bl	800dbc0 <pbuf_alloc>
 8012c0a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012c0c:	693b      	ldr	r3, [r7, #16]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d101      	bne.n	8012c16 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012c12:	2300      	movs	r3, #0
 8012c14:	e019      	b.n	8012c4a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012c16:	693b      	ldr	r3, [r7, #16]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d006      	beq.n	8012c2c <tcp_pbuf_prealloc+0xb8>
 8012c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8012c54 <tcp_pbuf_prealloc+0xe0>)
 8012c20:	f240 120b 	movw	r2, #267	@ 0x10b
 8012c24:	490f      	ldr	r1, [pc, #60]	@ (8012c64 <tcp_pbuf_prealloc+0xf0>)
 8012c26:	480d      	ldr	r0, [pc, #52]	@ (8012c5c <tcp_pbuf_prealloc+0xe8>)
 8012c28:	f005 f81a 	bl	8017c60 <iprintf>
  *oversize = p->len - length;
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	895a      	ldrh	r2, [r3, #10]
 8012c30:	89bb      	ldrh	r3, [r7, #12]
 8012c32:	1ad3      	subs	r3, r2, r3
 8012c34:	b29a      	uxth	r2, r3
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012c3a:	693b      	ldr	r3, [r7, #16]
 8012c3c:	89ba      	ldrh	r2, [r7, #12]
 8012c3e:	811a      	strh	r2, [r3, #8]
 8012c40:	693b      	ldr	r3, [r7, #16]
 8012c42:	891a      	ldrh	r2, [r3, #8]
 8012c44:	693b      	ldr	r3, [r7, #16]
 8012c46:	815a      	strh	r2, [r3, #10]
  return p;
 8012c48:	693b      	ldr	r3, [r7, #16]
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3718      	adds	r7, #24
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}
 8012c52:	bf00      	nop
 8012c54:	0801b480 	.word	0x0801b480
 8012c58:	0801b538 	.word	0x0801b538
 8012c5c:	0801b4d4 	.word	0x0801b4d4
 8012c60:	0801b55c 	.word	0x0801b55c
 8012c64:	0801b57c 	.word	0x0801b57c

08012c68 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b082      	sub	sp, #8
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
 8012c70:	460b      	mov	r3, r1
 8012c72:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d106      	bne.n	8012c88 <tcp_write_checks+0x20>
 8012c7a:	4b33      	ldr	r3, [pc, #204]	@ (8012d48 <tcp_write_checks+0xe0>)
 8012c7c:	f240 1233 	movw	r2, #307	@ 0x133
 8012c80:	4932      	ldr	r1, [pc, #200]	@ (8012d4c <tcp_write_checks+0xe4>)
 8012c82:	4833      	ldr	r0, [pc, #204]	@ (8012d50 <tcp_write_checks+0xe8>)
 8012c84:	f004 ffec 	bl	8017c60 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	7d1b      	ldrb	r3, [r3, #20]
 8012c8c:	2b04      	cmp	r3, #4
 8012c8e:	d00e      	beq.n	8012cae <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012c94:	2b07      	cmp	r3, #7
 8012c96:	d00a      	beq.n	8012cae <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012c9c:	2b02      	cmp	r3, #2
 8012c9e:	d006      	beq.n	8012cae <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012ca4:	2b03      	cmp	r3, #3
 8012ca6:	d002      	beq.n	8012cae <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012ca8:	f06f 030a 	mvn.w	r3, #10
 8012cac:	e048      	b.n	8012d40 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012cae:	887b      	ldrh	r3, [r7, #2]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d101      	bne.n	8012cb8 <tcp_write_checks+0x50>
    return ERR_OK;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	e043      	b.n	8012d40 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012cbe:	887a      	ldrh	r2, [r7, #2]
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	d909      	bls.n	8012cd8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	8b5b      	ldrh	r3, [r3, #26]
 8012cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ccc:	b29a      	uxth	r2, r3
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8012cd6:	e033      	b.n	8012d40 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012cde:	2b08      	cmp	r3, #8
 8012ce0:	d909      	bls.n	8012cf6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	8b5b      	ldrh	r3, [r3, #26]
 8012ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012cea:	b29a      	uxth	r2, r3
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8012cf4:	e024      	b.n	8012d40 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d00f      	beq.n	8012d20 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d11a      	bne.n	8012d3e <tcp_write_checks+0xd6>
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d116      	bne.n	8012d3e <tcp_write_checks+0xd6>
 8012d10:	4b0d      	ldr	r3, [pc, #52]	@ (8012d48 <tcp_write_checks+0xe0>)
 8012d12:	f240 1255 	movw	r2, #341	@ 0x155
 8012d16:	490f      	ldr	r1, [pc, #60]	@ (8012d54 <tcp_write_checks+0xec>)
 8012d18:	480d      	ldr	r0, [pc, #52]	@ (8012d50 <tcp_write_checks+0xe8>)
 8012d1a:	f004 ffa1 	bl	8017c60 <iprintf>
 8012d1e:	e00e      	b.n	8012d3e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d103      	bne.n	8012d30 <tcp_write_checks+0xc8>
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d006      	beq.n	8012d3e <tcp_write_checks+0xd6>
 8012d30:	4b05      	ldr	r3, [pc, #20]	@ (8012d48 <tcp_write_checks+0xe0>)
 8012d32:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8012d36:	4908      	ldr	r1, [pc, #32]	@ (8012d58 <tcp_write_checks+0xf0>)
 8012d38:	4805      	ldr	r0, [pc, #20]	@ (8012d50 <tcp_write_checks+0xe8>)
 8012d3a:	f004 ff91 	bl	8017c60 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012d3e:	2300      	movs	r3, #0
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3708      	adds	r7, #8
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}
 8012d48:	0801b480 	.word	0x0801b480
 8012d4c:	0801b590 	.word	0x0801b590
 8012d50:	0801b4d4 	.word	0x0801b4d4
 8012d54:	0801b5b0 	.word	0x0801b5b0
 8012d58:	0801b5ec 	.word	0x0801b5ec

08012d5c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012d5c:	b590      	push	{r4, r7, lr}
 8012d5e:	b09b      	sub	sp, #108	@ 0x6c
 8012d60:	af04      	add	r7, sp, #16
 8012d62:	60f8      	str	r0, [r7, #12]
 8012d64:	60b9      	str	r1, [r7, #8]
 8012d66:	4611      	mov	r1, r2
 8012d68:	461a      	mov	r2, r3
 8012d6a:	460b      	mov	r3, r1
 8012d6c:	80fb      	strh	r3, [r7, #6]
 8012d6e:	4613      	mov	r3, r2
 8012d70:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012d72:	2300      	movs	r3, #0
 8012d74:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012d76:	2300      	movs	r3, #0
 8012d78:	653b      	str	r3, [r7, #80]	@ 0x50
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012d7e:	2300      	movs	r3, #0
 8012d80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012d82:	2300      	movs	r3, #0
 8012d84:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012d86:	2300      	movs	r3, #0
 8012d88:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012d92:	2300      	movs	r3, #0
 8012d94:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012d96:	2300      	movs	r3, #0
 8012d98:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d109      	bne.n	8012db8 <tcp_write+0x5c>
 8012da4:	4ba4      	ldr	r3, [pc, #656]	@ (8013038 <tcp_write+0x2dc>)
 8012da6:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8012daa:	49a4      	ldr	r1, [pc, #656]	@ (801303c <tcp_write+0x2e0>)
 8012dac:	48a4      	ldr	r0, [pc, #656]	@ (8013040 <tcp_write+0x2e4>)
 8012dae:	f004 ff57 	bl	8017c60 <iprintf>
 8012db2:	f06f 030f 	mvn.w	r3, #15
 8012db6:	e32a      	b.n	801340e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012dbe:	085b      	lsrs	r3, r3, #1
 8012dc0:	b29a      	uxth	r2, r3
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012dc6:	4293      	cmp	r3, r2
 8012dc8:	bf28      	it	cs
 8012dca:	4613      	movcs	r3, r2
 8012dcc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012dce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d102      	bne.n	8012dda <tcp_write+0x7e>
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012dd8:	e000      	b.n	8012ddc <tcp_write+0x80>
 8012dda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ddc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012dde:	68bb      	ldr	r3, [r7, #8]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d109      	bne.n	8012df8 <tcp_write+0x9c>
 8012de4:	4b94      	ldr	r3, [pc, #592]	@ (8013038 <tcp_write+0x2dc>)
 8012de6:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8012dea:	4996      	ldr	r1, [pc, #600]	@ (8013044 <tcp_write+0x2e8>)
 8012dec:	4894      	ldr	r0, [pc, #592]	@ (8013040 <tcp_write+0x2e4>)
 8012dee:	f004 ff37 	bl	8017c60 <iprintf>
 8012df2:	f06f 030f 	mvn.w	r3, #15
 8012df6:	e30a      	b.n	801340e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012df8:	88fb      	ldrh	r3, [r7, #6]
 8012dfa:	4619      	mov	r1, r3
 8012dfc:	68f8      	ldr	r0, [r7, #12]
 8012dfe:	f7ff ff33 	bl	8012c68 <tcp_write_checks>
 8012e02:	4603      	mov	r3, r0
 8012e04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8012e08:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d002      	beq.n	8012e16 <tcp_write+0xba>
    return err;
 8012e10:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8012e14:	e2fb      	b.n	801340e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012e1c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012e20:	2300      	movs	r3, #0
 8012e22:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	f000 80f6 	beq.w	801301c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e34:	653b      	str	r3, [r7, #80]	@ 0x50
 8012e36:	e002      	b.n	8012e3e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012e38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012e3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d1f8      	bne.n	8012e38 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e48:	7a9b      	ldrb	r3, [r3, #10]
 8012e4a:	009b      	lsls	r3, r3, #2
 8012e4c:	b29b      	uxth	r3, r3
 8012e4e:	f003 0304 	and.w	r3, r3, #4
 8012e52:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012e54:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012e56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e58:	891b      	ldrh	r3, [r3, #8]
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	8c3b      	ldrh	r3, [r7, #32]
 8012e5e:	440b      	add	r3, r1
 8012e60:	429a      	cmp	r2, r3
 8012e62:	da06      	bge.n	8012e72 <tcp_write+0x116>
 8012e64:	4b74      	ldr	r3, [pc, #464]	@ (8013038 <tcp_write+0x2dc>)
 8012e66:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8012e6a:	4977      	ldr	r1, [pc, #476]	@ (8013048 <tcp_write+0x2ec>)
 8012e6c:	4874      	ldr	r0, [pc, #464]	@ (8013040 <tcp_write+0x2e4>)
 8012e6e:	f004 fef7 	bl	8017c60 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012e72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e74:	891a      	ldrh	r2, [r3, #8]
 8012e76:	8c3b      	ldrh	r3, [r7, #32]
 8012e78:	4413      	add	r3, r2
 8012e7a:	b29b      	uxth	r3, r3
 8012e7c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012e7e:	1ad3      	subs	r3, r2, r3
 8012e80:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012e88:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012e8a:	8a7b      	ldrh	r3, [r7, #18]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d026      	beq.n	8012ede <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012e90:	8a7b      	ldrh	r3, [r7, #18]
 8012e92:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012e94:	429a      	cmp	r2, r3
 8012e96:	d206      	bcs.n	8012ea6 <tcp_write+0x14a>
 8012e98:	4b67      	ldr	r3, [pc, #412]	@ (8013038 <tcp_write+0x2dc>)
 8012e9a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8012e9e:	496b      	ldr	r1, [pc, #428]	@ (801304c <tcp_write+0x2f0>)
 8012ea0:	4867      	ldr	r0, [pc, #412]	@ (8013040 <tcp_write+0x2e4>)
 8012ea2:	f004 fedd 	bl	8017c60 <iprintf>
      seg = last_unsent;
 8012ea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012eaa:	8a7b      	ldrh	r3, [r7, #18]
 8012eac:	88fa      	ldrh	r2, [r7, #6]
 8012eae:	4293      	cmp	r3, r2
 8012eb0:	bf28      	it	cs
 8012eb2:	4613      	movcs	r3, r2
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012eb8:	4293      	cmp	r3, r2
 8012eba:	bf28      	it	cs
 8012ebc:	4613      	movcs	r3, r2
 8012ebe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8012ec0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012ec4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012ec6:	4413      	add	r3, r2
 8012ec8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8012ecc:	8a7a      	ldrh	r2, [r7, #18]
 8012ece:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012ed0:	1ad3      	subs	r3, r2, r3
 8012ed2:	b29b      	uxth	r3, r3
 8012ed4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012ed6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012ed8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012eda:	1ad3      	subs	r3, r2, r3
 8012edc:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012ede:	8a7b      	ldrh	r3, [r7, #18]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d00b      	beq.n	8012efc <tcp_write+0x1a0>
 8012ee4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012ee8:	88fb      	ldrh	r3, [r7, #6]
 8012eea:	429a      	cmp	r2, r3
 8012eec:	d006      	beq.n	8012efc <tcp_write+0x1a0>
 8012eee:	4b52      	ldr	r3, [pc, #328]	@ (8013038 <tcp_write+0x2dc>)
 8012ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012ef4:	4956      	ldr	r1, [pc, #344]	@ (8013050 <tcp_write+0x2f4>)
 8012ef6:	4852      	ldr	r0, [pc, #328]	@ (8013040 <tcp_write+0x2e4>)
 8012ef8:	f004 feb2 	bl	8017c60 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012efc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012f00:	88fb      	ldrh	r3, [r7, #6]
 8012f02:	429a      	cmp	r2, r3
 8012f04:	f080 8167 	bcs.w	80131d6 <tcp_write+0x47a>
 8012f08:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	f000 8163 	beq.w	80131d6 <tcp_write+0x47a>
 8012f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f12:	891b      	ldrh	r3, [r3, #8]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	f000 815e 	beq.w	80131d6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012f1a:	88fa      	ldrh	r2, [r7, #6]
 8012f1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012f20:	1ad2      	subs	r2, r2, r3
 8012f22:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012f24:	4293      	cmp	r3, r2
 8012f26:	bfa8      	it	ge
 8012f28:	4613      	movge	r3, r2
 8012f2a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012f2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012f30:	797b      	ldrb	r3, [r7, #5]
 8012f32:	f003 0301 	and.w	r3, r3, #1
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d027      	beq.n	8012f8a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012f3a:	f107 0012 	add.w	r0, r7, #18
 8012f3e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012f40:	8bf9      	ldrh	r1, [r7, #30]
 8012f42:	2301      	movs	r3, #1
 8012f44:	9302      	str	r3, [sp, #8]
 8012f46:	797b      	ldrb	r3, [r7, #5]
 8012f48:	9301      	str	r3, [sp, #4]
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	9300      	str	r3, [sp, #0]
 8012f4e:	4603      	mov	r3, r0
 8012f50:	2000      	movs	r0, #0
 8012f52:	f7ff fe0f 	bl	8012b74 <tcp_pbuf_prealloc>
 8012f56:	6578      	str	r0, [r7, #84]	@ 0x54
 8012f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	f000 8225 	beq.w	80133aa <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f62:	6858      	ldr	r0, [r3, #4]
 8012f64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012f68:	68ba      	ldr	r2, [r7, #8]
 8012f6a:	4413      	add	r3, r2
 8012f6c:	8bfa      	ldrh	r2, [r7, #30]
 8012f6e:	4619      	mov	r1, r3
 8012f70:	f004 ffe1 	bl	8017f36 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012f74:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012f76:	f7fb f995 	bl	800e2a4 <pbuf_clen>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	461a      	mov	r2, r3
 8012f7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012f82:	4413      	add	r3, r2
 8012f84:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8012f88:	e041      	b.n	801300e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f8c:	685b      	ldr	r3, [r3, #4]
 8012f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012f90:	e002      	b.n	8012f98 <tcp_write+0x23c>
 8012f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8012f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d1f8      	bne.n	8012f92 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fa2:	7b1b      	ldrb	r3, [r3, #12]
 8012fa4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d115      	bne.n	8012fd8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fae:	685b      	ldr	r3, [r3, #4]
 8012fb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012fb2:	8952      	ldrh	r2, [r2, #10]
 8012fb4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012fb6:	68ba      	ldr	r2, [r7, #8]
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	d10d      	bne.n	8012fd8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012fbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d006      	beq.n	8012fd2 <tcp_write+0x276>
 8012fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8013038 <tcp_write+0x2dc>)
 8012fc6:	f240 2231 	movw	r2, #561	@ 0x231
 8012fca:	4922      	ldr	r1, [pc, #136]	@ (8013054 <tcp_write+0x2f8>)
 8012fcc:	481c      	ldr	r0, [pc, #112]	@ (8013040 <tcp_write+0x2e4>)
 8012fce:	f004 fe47 	bl	8017c60 <iprintf>
          extendlen = seglen;
 8012fd2:	8bfb      	ldrh	r3, [r7, #30]
 8012fd4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8012fd6:	e01a      	b.n	801300e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012fd8:	8bfb      	ldrh	r3, [r7, #30]
 8012fda:	2201      	movs	r2, #1
 8012fdc:	4619      	mov	r1, r3
 8012fde:	2000      	movs	r0, #0
 8012fe0:	f7fa fdee 	bl	800dbc0 <pbuf_alloc>
 8012fe4:	6578      	str	r0, [r7, #84]	@ 0x54
 8012fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	f000 81e0 	beq.w	80133ae <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012fee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012ff2:	68ba      	ldr	r2, [r7, #8]
 8012ff4:	441a      	add	r2, r3
 8012ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ff8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012ffa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012ffc:	f7fb f952 	bl	800e2a4 <pbuf_clen>
 8013000:	4603      	mov	r3, r0
 8013002:	461a      	mov	r2, r3
 8013004:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013008:	4413      	add	r3, r2
 801300a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801300e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013012:	8bfb      	ldrh	r3, [r7, #30]
 8013014:	4413      	add	r3, r2
 8013016:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801301a:	e0dc      	b.n	80131d6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013022:	2b00      	cmp	r3, #0
 8013024:	f000 80d7 	beq.w	80131d6 <tcp_write+0x47a>
 8013028:	4b03      	ldr	r3, [pc, #12]	@ (8013038 <tcp_write+0x2dc>)
 801302a:	f240 224a 	movw	r2, #586	@ 0x24a
 801302e:	490a      	ldr	r1, [pc, #40]	@ (8013058 <tcp_write+0x2fc>)
 8013030:	4803      	ldr	r0, [pc, #12]	@ (8013040 <tcp_write+0x2e4>)
 8013032:	f004 fe15 	bl	8017c60 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013036:	e0ce      	b.n	80131d6 <tcp_write+0x47a>
 8013038:	0801b480 	.word	0x0801b480
 801303c:	0801b620 	.word	0x0801b620
 8013040:	0801b4d4 	.word	0x0801b4d4
 8013044:	0801b638 	.word	0x0801b638
 8013048:	0801b66c 	.word	0x0801b66c
 801304c:	0801b684 	.word	0x0801b684
 8013050:	0801b6a4 	.word	0x0801b6a4
 8013054:	0801b6c4 	.word	0x0801b6c4
 8013058:	0801b6f0 	.word	0x0801b6f0
    struct pbuf *p;
    u16_t left = len - pos;
 801305c:	88fa      	ldrh	r2, [r7, #6]
 801305e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013062:	1ad3      	subs	r3, r2, r3
 8013064:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013066:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801306a:	b29b      	uxth	r3, r3
 801306c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801306e:	1ad3      	subs	r3, r2, r3
 8013070:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8013072:	8b7a      	ldrh	r2, [r7, #26]
 8013074:	8bbb      	ldrh	r3, [r7, #28]
 8013076:	4293      	cmp	r3, r2
 8013078:	bf28      	it	cs
 801307a:	4613      	movcs	r3, r2
 801307c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801307e:	797b      	ldrb	r3, [r7, #5]
 8013080:	f003 0301 	and.w	r3, r3, #1
 8013084:	2b00      	cmp	r3, #0
 8013086:	d036      	beq.n	80130f6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013088:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801308c:	b29a      	uxth	r2, r3
 801308e:	8b3b      	ldrh	r3, [r7, #24]
 8013090:	4413      	add	r3, r2
 8013092:	b299      	uxth	r1, r3
 8013094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013096:	2b00      	cmp	r3, #0
 8013098:	bf0c      	ite	eq
 801309a:	2301      	moveq	r3, #1
 801309c:	2300      	movne	r3, #0
 801309e:	b2db      	uxtb	r3, r3
 80130a0:	f107 0012 	add.w	r0, r7, #18
 80130a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80130a6:	9302      	str	r3, [sp, #8]
 80130a8:	797b      	ldrb	r3, [r7, #5]
 80130aa:	9301      	str	r3, [sp, #4]
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	9300      	str	r3, [sp, #0]
 80130b0:	4603      	mov	r3, r0
 80130b2:	2036      	movs	r0, #54	@ 0x36
 80130b4:	f7ff fd5e 	bl	8012b74 <tcp_pbuf_prealloc>
 80130b8:	6338      	str	r0, [r7, #48]	@ 0x30
 80130ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130bc:	2b00      	cmp	r3, #0
 80130be:	f000 8178 	beq.w	80133b2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80130c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130c4:	895b      	ldrh	r3, [r3, #10]
 80130c6:	8b3a      	ldrh	r2, [r7, #24]
 80130c8:	429a      	cmp	r2, r3
 80130ca:	d906      	bls.n	80130da <tcp_write+0x37e>
 80130cc:	4b8c      	ldr	r3, [pc, #560]	@ (8013300 <tcp_write+0x5a4>)
 80130ce:	f240 2266 	movw	r2, #614	@ 0x266
 80130d2:	498c      	ldr	r1, [pc, #560]	@ (8013304 <tcp_write+0x5a8>)
 80130d4:	488c      	ldr	r0, [pc, #560]	@ (8013308 <tcp_write+0x5ac>)
 80130d6:	f004 fdc3 	bl	8017c60 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80130da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130dc:	685a      	ldr	r2, [r3, #4]
 80130de:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80130e2:	18d0      	adds	r0, r2, r3
 80130e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80130e8:	68ba      	ldr	r2, [r7, #8]
 80130ea:	4413      	add	r3, r2
 80130ec:	8b3a      	ldrh	r2, [r7, #24]
 80130ee:	4619      	mov	r1, r3
 80130f0:	f004 ff21 	bl	8017f36 <memcpy>
 80130f4:	e02f      	b.n	8013156 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80130f6:	8a7b      	ldrh	r3, [r7, #18]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d006      	beq.n	801310a <tcp_write+0x3ae>
 80130fc:	4b80      	ldr	r3, [pc, #512]	@ (8013300 <tcp_write+0x5a4>)
 80130fe:	f240 2271 	movw	r2, #625	@ 0x271
 8013102:	4982      	ldr	r1, [pc, #520]	@ (801330c <tcp_write+0x5b0>)
 8013104:	4880      	ldr	r0, [pc, #512]	@ (8013308 <tcp_write+0x5ac>)
 8013106:	f004 fdab 	bl	8017c60 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801310a:	8b3b      	ldrh	r3, [r7, #24]
 801310c:	2201      	movs	r2, #1
 801310e:	4619      	mov	r1, r3
 8013110:	2036      	movs	r0, #54	@ 0x36
 8013112:	f7fa fd55 	bl	800dbc0 <pbuf_alloc>
 8013116:	6178      	str	r0, [r7, #20]
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	2b00      	cmp	r3, #0
 801311c:	f000 814b 	beq.w	80133b6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8013120:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013124:	68ba      	ldr	r2, [r7, #8]
 8013126:	441a      	add	r2, r3
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801312c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013130:	b29b      	uxth	r3, r3
 8013132:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013136:	4619      	mov	r1, r3
 8013138:	2036      	movs	r0, #54	@ 0x36
 801313a:	f7fa fd41 	bl	800dbc0 <pbuf_alloc>
 801313e:	6338      	str	r0, [r7, #48]	@ 0x30
 8013140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013142:	2b00      	cmp	r3, #0
 8013144:	d103      	bne.n	801314e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013146:	6978      	ldr	r0, [r7, #20]
 8013148:	f7fb f81e 	bl	800e188 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801314c:	e136      	b.n	80133bc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801314e:	6979      	ldr	r1, [r7, #20]
 8013150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013152:	f7fb f8e7 	bl	800e324 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013156:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013158:	f7fb f8a4 	bl	800e2a4 <pbuf_clen>
 801315c:	4603      	mov	r3, r0
 801315e:	461a      	mov	r2, r3
 8013160:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013164:	4413      	add	r3, r2
 8013166:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801316a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801316e:	2b09      	cmp	r3, #9
 8013170:	d903      	bls.n	801317a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8013172:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013174:	f7fb f808 	bl	800e188 <pbuf_free>
      goto memerr;
 8013178:	e120      	b.n	80133bc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801317e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013182:	441a      	add	r2, r3
 8013184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013188:	9300      	str	r3, [sp, #0]
 801318a:	4613      	mov	r3, r2
 801318c:	2200      	movs	r2, #0
 801318e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013190:	68f8      	ldr	r0, [r7, #12]
 8013192:	f7ff fc53 	bl	8012a3c <tcp_create_segment>
 8013196:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8013198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801319a:	2b00      	cmp	r3, #0
 801319c:	f000 810d 	beq.w	80133ba <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80131a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d102      	bne.n	80131ac <tcp_write+0x450>
      queue = seg;
 80131a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80131aa:	e00c      	b.n	80131c6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80131ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d106      	bne.n	80131c0 <tcp_write+0x464>
 80131b2:	4b53      	ldr	r3, [pc, #332]	@ (8013300 <tcp_write+0x5a4>)
 80131b4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80131b8:	4955      	ldr	r1, [pc, #340]	@ (8013310 <tcp_write+0x5b4>)
 80131ba:	4853      	ldr	r0, [pc, #332]	@ (8013308 <tcp_write+0x5ac>)
 80131bc:	f004 fd50 	bl	8017c60 <iprintf>
      prev_seg->next = seg;
 80131c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80131c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80131c4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80131c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131c8:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80131ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80131ce:	8b3b      	ldrh	r3, [r7, #24]
 80131d0:	4413      	add	r3, r2
 80131d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 80131d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80131da:	88fb      	ldrh	r3, [r7, #6]
 80131dc:	429a      	cmp	r2, r3
 80131de:	f4ff af3d 	bcc.w	801305c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80131e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d02c      	beq.n	8013242 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80131e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80131ea:	685b      	ldr	r3, [r3, #4]
 80131ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80131ee:	e01e      	b.n	801322e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80131f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131f2:	891a      	ldrh	r2, [r3, #8]
 80131f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80131f6:	4413      	add	r3, r2
 80131f8:	b29a      	uxth	r2, r3
 80131fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131fc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80131fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d110      	bne.n	8013228 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013208:	685b      	ldr	r3, [r3, #4]
 801320a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801320c:	8952      	ldrh	r2, [r2, #10]
 801320e:	4413      	add	r3, r2
 8013210:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013212:	68b9      	ldr	r1, [r7, #8]
 8013214:	4618      	mov	r0, r3
 8013216:	f004 fe8e 	bl	8017f36 <memcpy>
        p->len += oversize_used;
 801321a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801321c:	895a      	ldrh	r2, [r3, #10]
 801321e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013220:	4413      	add	r3, r2
 8013222:	b29a      	uxth	r2, r3
 8013224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013226:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801322e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013230:	2b00      	cmp	r3, #0
 8013232:	d1dd      	bne.n	80131f0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013236:	891a      	ldrh	r2, [r3, #8]
 8013238:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801323a:	4413      	add	r3, r2
 801323c:	b29a      	uxth	r2, r3
 801323e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013240:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013242:	8a7a      	ldrh	r2, [r7, #18]
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801324a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801324c:	2b00      	cmp	r3, #0
 801324e:	d018      	beq.n	8013282 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013252:	2b00      	cmp	r3, #0
 8013254:	d106      	bne.n	8013264 <tcp_write+0x508>
 8013256:	4b2a      	ldr	r3, [pc, #168]	@ (8013300 <tcp_write+0x5a4>)
 8013258:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801325c:	492d      	ldr	r1, [pc, #180]	@ (8013314 <tcp_write+0x5b8>)
 801325e:	482a      	ldr	r0, [pc, #168]	@ (8013308 <tcp_write+0x5ac>)
 8013260:	f004 fcfe 	bl	8017c60 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013266:	685b      	ldr	r3, [r3, #4]
 8013268:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801326a:	4618      	mov	r0, r3
 801326c:	f7fb f85a 	bl	800e324 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013272:	891a      	ldrh	r2, [r3, #8]
 8013274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013276:	891b      	ldrh	r3, [r3, #8]
 8013278:	4413      	add	r3, r2
 801327a:	b29a      	uxth	r2, r3
 801327c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801327e:	811a      	strh	r2, [r3, #8]
 8013280:	e037      	b.n	80132f2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8013282:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013284:	2b00      	cmp	r3, #0
 8013286:	d034      	beq.n	80132f2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801328a:	2b00      	cmp	r3, #0
 801328c:	d003      	beq.n	8013296 <tcp_write+0x53a>
 801328e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013290:	685b      	ldr	r3, [r3, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d106      	bne.n	80132a4 <tcp_write+0x548>
 8013296:	4b1a      	ldr	r3, [pc, #104]	@ (8013300 <tcp_write+0x5a4>)
 8013298:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801329c:	491e      	ldr	r1, [pc, #120]	@ (8013318 <tcp_write+0x5bc>)
 801329e:	481a      	ldr	r0, [pc, #104]	@ (8013308 <tcp_write+0x5ac>)
 80132a0:	f004 fcde 	bl	8017c60 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80132a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132a6:	685b      	ldr	r3, [r3, #4]
 80132a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80132aa:	e009      	b.n	80132c0 <tcp_write+0x564>
      p->tot_len += extendlen;
 80132ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132ae:	891a      	ldrh	r2, [r3, #8]
 80132b0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80132b2:	4413      	add	r3, r2
 80132b4:	b29a      	uxth	r2, r3
 80132b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132b8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80132ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80132c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d1f1      	bne.n	80132ac <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80132c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132ca:	891a      	ldrh	r2, [r3, #8]
 80132cc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80132ce:	4413      	add	r3, r2
 80132d0:	b29a      	uxth	r2, r3
 80132d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132d4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80132d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132d8:	895a      	ldrh	r2, [r3, #10]
 80132da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80132dc:	4413      	add	r3, r2
 80132de:	b29a      	uxth	r2, r3
 80132e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132e2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80132e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132e6:	891a      	ldrh	r2, [r3, #8]
 80132e8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80132ea:	4413      	add	r3, r2
 80132ec:	b29a      	uxth	r2, r3
 80132ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132f0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80132f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d111      	bne.n	801331c <tcp_write+0x5c0>
    pcb->unsent = queue;
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80132fc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80132fe:	e010      	b.n	8013322 <tcp_write+0x5c6>
 8013300:	0801b480 	.word	0x0801b480
 8013304:	0801b720 	.word	0x0801b720
 8013308:	0801b4d4 	.word	0x0801b4d4
 801330c:	0801b760 	.word	0x0801b760
 8013310:	0801b770 	.word	0x0801b770
 8013314:	0801b784 	.word	0x0801b784
 8013318:	0801b7bc 	.word	0x0801b7bc
  } else {
    last_unsent->next = queue;
 801331c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801331e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013320:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013326:	88fb      	ldrh	r3, [r7, #6]
 8013328:	441a      	add	r2, r3
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8013334:	88fb      	ldrh	r3, [r7, #6]
 8013336:	1ad3      	subs	r3, r2, r3
 8013338:	b29a      	uxth	r2, r3
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8013346:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013350:	2b00      	cmp	r3, #0
 8013352:	d00e      	beq.n	8013372 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013358:	2b00      	cmp	r3, #0
 801335a:	d10a      	bne.n	8013372 <tcp_write+0x616>
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013360:	2b00      	cmp	r3, #0
 8013362:	d106      	bne.n	8013372 <tcp_write+0x616>
 8013364:	4b2c      	ldr	r3, [pc, #176]	@ (8013418 <tcp_write+0x6bc>)
 8013366:	f240 3212 	movw	r2, #786	@ 0x312
 801336a:	492c      	ldr	r1, [pc, #176]	@ (801341c <tcp_write+0x6c0>)
 801336c:	482c      	ldr	r0, [pc, #176]	@ (8013420 <tcp_write+0x6c4>)
 801336e:	f004 fc77 	bl	8017c60 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013374:	2b00      	cmp	r3, #0
 8013376:	d016      	beq.n	80133a6 <tcp_write+0x64a>
 8013378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801337a:	68db      	ldr	r3, [r3, #12]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d012      	beq.n	80133a6 <tcp_write+0x64a>
 8013380:	797b      	ldrb	r3, [r7, #5]
 8013382:	f003 0302 	and.w	r3, r3, #2
 8013386:	2b00      	cmp	r3, #0
 8013388:	d10d      	bne.n	80133a6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801338a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801338c:	68db      	ldr	r3, [r3, #12]
 801338e:	899b      	ldrh	r3, [r3, #12]
 8013390:	b29c      	uxth	r4, r3
 8013392:	2008      	movs	r0, #8
 8013394:	f7f9 fb06 	bl	800c9a4 <lwip_htons>
 8013398:	4603      	mov	r3, r0
 801339a:	461a      	mov	r2, r3
 801339c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	4322      	orrs	r2, r4
 80133a2:	b292      	uxth	r2, r2
 80133a4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80133a6:	2300      	movs	r3, #0
 80133a8:	e031      	b.n	801340e <tcp_write+0x6b2>
          goto memerr;
 80133aa:	bf00      	nop
 80133ac:	e006      	b.n	80133bc <tcp_write+0x660>
            goto memerr;
 80133ae:	bf00      	nop
 80133b0:	e004      	b.n	80133bc <tcp_write+0x660>
        goto memerr;
 80133b2:	bf00      	nop
 80133b4:	e002      	b.n	80133bc <tcp_write+0x660>
        goto memerr;
 80133b6:	bf00      	nop
 80133b8:	e000      	b.n	80133bc <tcp_write+0x660>
      goto memerr;
 80133ba:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	8b5b      	ldrh	r3, [r3, #26]
 80133c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80133c4:	b29a      	uxth	r2, r3
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80133ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d002      	beq.n	80133d6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80133d0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80133d2:	f7fa fed9 	bl	800e188 <pbuf_free>
  }
  if (queue != NULL) {
 80133d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d002      	beq.n	80133e2 <tcp_write+0x686>
    tcp_segs_free(queue);
 80133dc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80133de:	f7fc fb69 	bl	800fab4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d00e      	beq.n	801340a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d10a      	bne.n	801340a <tcp_write+0x6ae>
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d106      	bne.n	801340a <tcp_write+0x6ae>
 80133fc:	4b06      	ldr	r3, [pc, #24]	@ (8013418 <tcp_write+0x6bc>)
 80133fe:	f240 3227 	movw	r2, #807	@ 0x327
 8013402:	4906      	ldr	r1, [pc, #24]	@ (801341c <tcp_write+0x6c0>)
 8013404:	4806      	ldr	r0, [pc, #24]	@ (8013420 <tcp_write+0x6c4>)
 8013406:	f004 fc2b 	bl	8017c60 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801340a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801340e:	4618      	mov	r0, r3
 8013410:	375c      	adds	r7, #92	@ 0x5c
 8013412:	46bd      	mov	sp, r7
 8013414:	bd90      	pop	{r4, r7, pc}
 8013416:	bf00      	nop
 8013418:	0801b480 	.word	0x0801b480
 801341c:	0801b7f4 	.word	0x0801b7f4
 8013420:	0801b4d4 	.word	0x0801b4d4

08013424 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013424:	b590      	push	{r4, r7, lr}
 8013426:	b08b      	sub	sp, #44	@ 0x2c
 8013428:	af02      	add	r7, sp, #8
 801342a:	6078      	str	r0, [r7, #4]
 801342c:	460b      	mov	r3, r1
 801342e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013430:	2300      	movs	r3, #0
 8013432:	61fb      	str	r3, [r7, #28]
 8013434:	2300      	movs	r3, #0
 8013436:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013438:	2300      	movs	r3, #0
 801343a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d106      	bne.n	8013450 <tcp_split_unsent_seg+0x2c>
 8013442:	4b95      	ldr	r3, [pc, #596]	@ (8013698 <tcp_split_unsent_seg+0x274>)
 8013444:	f240 324b 	movw	r2, #843	@ 0x34b
 8013448:	4994      	ldr	r1, [pc, #592]	@ (801369c <tcp_split_unsent_seg+0x278>)
 801344a:	4895      	ldr	r0, [pc, #596]	@ (80136a0 <tcp_split_unsent_seg+0x27c>)
 801344c:	f004 fc08 	bl	8017c60 <iprintf>

  useg = pcb->unsent;
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013454:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d102      	bne.n	8013462 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801345c:	f04f 33ff 	mov.w	r3, #4294967295
 8013460:	e116      	b.n	8013690 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013462:	887b      	ldrh	r3, [r7, #2]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d109      	bne.n	801347c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013468:	4b8b      	ldr	r3, [pc, #556]	@ (8013698 <tcp_split_unsent_seg+0x274>)
 801346a:	f240 3253 	movw	r2, #851	@ 0x353
 801346e:	498d      	ldr	r1, [pc, #564]	@ (80136a4 <tcp_split_unsent_seg+0x280>)
 8013470:	488b      	ldr	r0, [pc, #556]	@ (80136a0 <tcp_split_unsent_seg+0x27c>)
 8013472:	f004 fbf5 	bl	8017c60 <iprintf>
    return ERR_VAL;
 8013476:	f06f 0305 	mvn.w	r3, #5
 801347a:	e109      	b.n	8013690 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	891b      	ldrh	r3, [r3, #8]
 8013480:	887a      	ldrh	r2, [r7, #2]
 8013482:	429a      	cmp	r2, r3
 8013484:	d301      	bcc.n	801348a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013486:	2300      	movs	r3, #0
 8013488:	e102      	b.n	8013690 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801348e:	887a      	ldrh	r2, [r7, #2]
 8013490:	429a      	cmp	r2, r3
 8013492:	d906      	bls.n	80134a2 <tcp_split_unsent_seg+0x7e>
 8013494:	4b80      	ldr	r3, [pc, #512]	@ (8013698 <tcp_split_unsent_seg+0x274>)
 8013496:	f240 325b 	movw	r2, #859	@ 0x35b
 801349a:	4983      	ldr	r1, [pc, #524]	@ (80136a8 <tcp_split_unsent_seg+0x284>)
 801349c:	4880      	ldr	r0, [pc, #512]	@ (80136a0 <tcp_split_unsent_seg+0x27c>)
 801349e:	f004 fbdf 	bl	8017c60 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80134a2:	697b      	ldr	r3, [r7, #20]
 80134a4:	891b      	ldrh	r3, [r3, #8]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d106      	bne.n	80134b8 <tcp_split_unsent_seg+0x94>
 80134aa:	4b7b      	ldr	r3, [pc, #492]	@ (8013698 <tcp_split_unsent_seg+0x274>)
 80134ac:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80134b0:	497e      	ldr	r1, [pc, #504]	@ (80136ac <tcp_split_unsent_seg+0x288>)
 80134b2:	487b      	ldr	r0, [pc, #492]	@ (80136a0 <tcp_split_unsent_seg+0x27c>)
 80134b4:	f004 fbd4 	bl	8017c60 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	7a9b      	ldrb	r3, [r3, #10]
 80134bc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80134be:	7bfb      	ldrb	r3, [r7, #15]
 80134c0:	009b      	lsls	r3, r3, #2
 80134c2:	b2db      	uxtb	r3, r3
 80134c4:	f003 0304 	and.w	r3, r3, #4
 80134c8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	891a      	ldrh	r2, [r3, #8]
 80134ce:	887b      	ldrh	r3, [r7, #2]
 80134d0:	1ad3      	subs	r3, r2, r3
 80134d2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80134d4:	7bbb      	ldrb	r3, [r7, #14]
 80134d6:	b29a      	uxth	r2, r3
 80134d8:	89bb      	ldrh	r3, [r7, #12]
 80134da:	4413      	add	r3, r2
 80134dc:	b29b      	uxth	r3, r3
 80134de:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80134e2:	4619      	mov	r1, r3
 80134e4:	2036      	movs	r0, #54	@ 0x36
 80134e6:	f7fa fb6b 	bl	800dbc0 <pbuf_alloc>
 80134ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80134ec:	693b      	ldr	r3, [r7, #16]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	f000 80b7 	beq.w	8013662 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80134f4:	697b      	ldr	r3, [r7, #20]
 80134f6:	685b      	ldr	r3, [r3, #4]
 80134f8:	891a      	ldrh	r2, [r3, #8]
 80134fa:	697b      	ldr	r3, [r7, #20]
 80134fc:	891b      	ldrh	r3, [r3, #8]
 80134fe:	1ad3      	subs	r3, r2, r3
 8013500:	b29a      	uxth	r2, r3
 8013502:	887b      	ldrh	r3, [r7, #2]
 8013504:	4413      	add	r3, r2
 8013506:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013508:	697b      	ldr	r3, [r7, #20]
 801350a:	6858      	ldr	r0, [r3, #4]
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	685a      	ldr	r2, [r3, #4]
 8013510:	7bbb      	ldrb	r3, [r7, #14]
 8013512:	18d1      	adds	r1, r2, r3
 8013514:	897b      	ldrh	r3, [r7, #10]
 8013516:	89ba      	ldrh	r2, [r7, #12]
 8013518:	f7fb f82c 	bl	800e574 <pbuf_copy_partial>
 801351c:	4603      	mov	r3, r0
 801351e:	461a      	mov	r2, r3
 8013520:	89bb      	ldrh	r3, [r7, #12]
 8013522:	4293      	cmp	r3, r2
 8013524:	f040 809f 	bne.w	8013666 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	68db      	ldr	r3, [r3, #12]
 801352c:	899b      	ldrh	r3, [r3, #12]
 801352e:	b29b      	uxth	r3, r3
 8013530:	4618      	mov	r0, r3
 8013532:	f7f9 fa37 	bl	800c9a4 <lwip_htons>
 8013536:	4603      	mov	r3, r0
 8013538:	b2db      	uxtb	r3, r3
 801353a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801353e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013540:	2300      	movs	r3, #0
 8013542:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013544:	7efb      	ldrb	r3, [r7, #27]
 8013546:	f003 0308 	and.w	r3, r3, #8
 801354a:	2b00      	cmp	r3, #0
 801354c:	d007      	beq.n	801355e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801354e:	7efb      	ldrb	r3, [r7, #27]
 8013550:	f023 0308 	bic.w	r3, r3, #8
 8013554:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013556:	7ebb      	ldrb	r3, [r7, #26]
 8013558:	f043 0308 	orr.w	r3, r3, #8
 801355c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801355e:	7efb      	ldrb	r3, [r7, #27]
 8013560:	f003 0301 	and.w	r3, r3, #1
 8013564:	2b00      	cmp	r3, #0
 8013566:	d007      	beq.n	8013578 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013568:	7efb      	ldrb	r3, [r7, #27]
 801356a:	f023 0301 	bic.w	r3, r3, #1
 801356e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013570:	7ebb      	ldrb	r3, [r7, #26]
 8013572:	f043 0301 	orr.w	r3, r3, #1
 8013576:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	68db      	ldr	r3, [r3, #12]
 801357c:	685b      	ldr	r3, [r3, #4]
 801357e:	4618      	mov	r0, r3
 8013580:	f7f9 fa25 	bl	800c9ce <lwip_htonl>
 8013584:	4602      	mov	r2, r0
 8013586:	887b      	ldrh	r3, [r7, #2]
 8013588:	18d1      	adds	r1, r2, r3
 801358a:	7eba      	ldrb	r2, [r7, #26]
 801358c:	7bfb      	ldrb	r3, [r7, #15]
 801358e:	9300      	str	r3, [sp, #0]
 8013590:	460b      	mov	r3, r1
 8013592:	6939      	ldr	r1, [r7, #16]
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f7ff fa51 	bl	8012a3c <tcp_create_segment>
 801359a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801359c:	69fb      	ldr	r3, [r7, #28]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d063      	beq.n	801366a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	685b      	ldr	r3, [r3, #4]
 80135a6:	4618      	mov	r0, r3
 80135a8:	f7fa fe7c 	bl	800e2a4 <pbuf_clen>
 80135ac:	4603      	mov	r3, r0
 80135ae:	461a      	mov	r2, r3
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80135b6:	1a9b      	subs	r3, r3, r2
 80135b8:	b29a      	uxth	r2, r3
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80135c0:	697b      	ldr	r3, [r7, #20]
 80135c2:	6858      	ldr	r0, [r3, #4]
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	685b      	ldr	r3, [r3, #4]
 80135c8:	891a      	ldrh	r2, [r3, #8]
 80135ca:	89bb      	ldrh	r3, [r7, #12]
 80135cc:	1ad3      	subs	r3, r2, r3
 80135ce:	b29b      	uxth	r3, r3
 80135d0:	4619      	mov	r1, r3
 80135d2:	f7fa fc53 	bl	800de7c <pbuf_realloc>
  useg->len -= remainder;
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	891a      	ldrh	r2, [r3, #8]
 80135da:	89bb      	ldrh	r3, [r7, #12]
 80135dc:	1ad3      	subs	r3, r2, r3
 80135de:	b29a      	uxth	r2, r3
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80135e4:	697b      	ldr	r3, [r7, #20]
 80135e6:	68db      	ldr	r3, [r3, #12]
 80135e8:	899b      	ldrh	r3, [r3, #12]
 80135ea:	b29c      	uxth	r4, r3
 80135ec:	7efb      	ldrb	r3, [r7, #27]
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	4618      	mov	r0, r3
 80135f2:	f7f9 f9d7 	bl	800c9a4 <lwip_htons>
 80135f6:	4603      	mov	r3, r0
 80135f8:	461a      	mov	r2, r3
 80135fa:	697b      	ldr	r3, [r7, #20]
 80135fc:	68db      	ldr	r3, [r3, #12]
 80135fe:	4322      	orrs	r2, r4
 8013600:	b292      	uxth	r2, r2
 8013602:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	685b      	ldr	r3, [r3, #4]
 8013608:	4618      	mov	r0, r3
 801360a:	f7fa fe4b 	bl	800e2a4 <pbuf_clen>
 801360e:	4603      	mov	r3, r0
 8013610:	461a      	mov	r2, r3
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013618:	4413      	add	r3, r2
 801361a:	b29a      	uxth	r2, r3
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013622:	69fb      	ldr	r3, [r7, #28]
 8013624:	685b      	ldr	r3, [r3, #4]
 8013626:	4618      	mov	r0, r3
 8013628:	f7fa fe3c 	bl	800e2a4 <pbuf_clen>
 801362c:	4603      	mov	r3, r0
 801362e:	461a      	mov	r2, r3
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013636:	4413      	add	r3, r2
 8013638:	b29a      	uxth	r2, r3
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013640:	697b      	ldr	r3, [r7, #20]
 8013642:	681a      	ldr	r2, [r3, #0]
 8013644:	69fb      	ldr	r3, [r7, #28]
 8013646:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	69fa      	ldr	r2, [r7, #28]
 801364c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801364e:	69fb      	ldr	r3, [r7, #28]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d103      	bne.n	801365e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2200      	movs	r2, #0
 801365a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801365e:	2300      	movs	r3, #0
 8013660:	e016      	b.n	8013690 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013662:	bf00      	nop
 8013664:	e002      	b.n	801366c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013666:	bf00      	nop
 8013668:	e000      	b.n	801366c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801366a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801366c:	69fb      	ldr	r3, [r7, #28]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d006      	beq.n	8013680 <tcp_split_unsent_seg+0x25c>
 8013672:	4b09      	ldr	r3, [pc, #36]	@ (8013698 <tcp_split_unsent_seg+0x274>)
 8013674:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8013678:	490d      	ldr	r1, [pc, #52]	@ (80136b0 <tcp_split_unsent_seg+0x28c>)
 801367a:	4809      	ldr	r0, [pc, #36]	@ (80136a0 <tcp_split_unsent_seg+0x27c>)
 801367c:	f004 faf0 	bl	8017c60 <iprintf>
  if (p != NULL) {
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d002      	beq.n	801368c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013686:	6938      	ldr	r0, [r7, #16]
 8013688:	f7fa fd7e 	bl	800e188 <pbuf_free>
  }

  return ERR_MEM;
 801368c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013690:	4618      	mov	r0, r3
 8013692:	3724      	adds	r7, #36	@ 0x24
 8013694:	46bd      	mov	sp, r7
 8013696:	bd90      	pop	{r4, r7, pc}
 8013698:	0801b480 	.word	0x0801b480
 801369c:	0801b814 	.word	0x0801b814
 80136a0:	0801b4d4 	.word	0x0801b4d4
 80136a4:	0801b838 	.word	0x0801b838
 80136a8:	0801b85c 	.word	0x0801b85c
 80136ac:	0801b86c 	.word	0x0801b86c
 80136b0:	0801b87c 	.word	0x0801b87c

080136b4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80136b4:	b590      	push	{r4, r7, lr}
 80136b6:	b085      	sub	sp, #20
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d106      	bne.n	80136d0 <tcp_send_fin+0x1c>
 80136c2:	4b21      	ldr	r3, [pc, #132]	@ (8013748 <tcp_send_fin+0x94>)
 80136c4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80136c8:	4920      	ldr	r1, [pc, #128]	@ (801374c <tcp_send_fin+0x98>)
 80136ca:	4821      	ldr	r0, [pc, #132]	@ (8013750 <tcp_send_fin+0x9c>)
 80136cc:	f004 fac8 	bl	8017c60 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d02e      	beq.n	8013736 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80136dc:	60fb      	str	r3, [r7, #12]
 80136de:	e002      	b.n	80136e6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d1f8      	bne.n	80136e0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	68db      	ldr	r3, [r3, #12]
 80136f2:	899b      	ldrh	r3, [r3, #12]
 80136f4:	b29b      	uxth	r3, r3
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7f9 f954 	bl	800c9a4 <lwip_htons>
 80136fc:	4603      	mov	r3, r0
 80136fe:	b2db      	uxtb	r3, r3
 8013700:	f003 0307 	and.w	r3, r3, #7
 8013704:	2b00      	cmp	r3, #0
 8013706:	d116      	bne.n	8013736 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	68db      	ldr	r3, [r3, #12]
 801370c:	899b      	ldrh	r3, [r3, #12]
 801370e:	b29c      	uxth	r4, r3
 8013710:	2001      	movs	r0, #1
 8013712:	f7f9 f947 	bl	800c9a4 <lwip_htons>
 8013716:	4603      	mov	r3, r0
 8013718:	461a      	mov	r2, r3
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	68db      	ldr	r3, [r3, #12]
 801371e:	4322      	orrs	r2, r4
 8013720:	b292      	uxth	r2, r2
 8013722:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	8b5b      	ldrh	r3, [r3, #26]
 8013728:	f043 0320 	orr.w	r3, r3, #32
 801372c:	b29a      	uxth	r2, r3
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013732:	2300      	movs	r3, #0
 8013734:	e004      	b.n	8013740 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013736:	2101      	movs	r1, #1
 8013738:	6878      	ldr	r0, [r7, #4]
 801373a:	f000 f80b 	bl	8013754 <tcp_enqueue_flags>
 801373e:	4603      	mov	r3, r0
}
 8013740:	4618      	mov	r0, r3
 8013742:	3714      	adds	r7, #20
 8013744:	46bd      	mov	sp, r7
 8013746:	bd90      	pop	{r4, r7, pc}
 8013748:	0801b480 	.word	0x0801b480
 801374c:	0801b888 	.word	0x0801b888
 8013750:	0801b4d4 	.word	0x0801b4d4

08013754 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013754:	b580      	push	{r7, lr}
 8013756:	b08a      	sub	sp, #40	@ 0x28
 8013758:	af02      	add	r7, sp, #8
 801375a:	6078      	str	r0, [r7, #4]
 801375c:	460b      	mov	r3, r1
 801375e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013760:	2300      	movs	r3, #0
 8013762:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013764:	2300      	movs	r3, #0
 8013766:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013768:	78fb      	ldrb	r3, [r7, #3]
 801376a:	f003 0303 	and.w	r3, r3, #3
 801376e:	2b00      	cmp	r3, #0
 8013770:	d106      	bne.n	8013780 <tcp_enqueue_flags+0x2c>
 8013772:	4b67      	ldr	r3, [pc, #412]	@ (8013910 <tcp_enqueue_flags+0x1bc>)
 8013774:	f240 4211 	movw	r2, #1041	@ 0x411
 8013778:	4966      	ldr	r1, [pc, #408]	@ (8013914 <tcp_enqueue_flags+0x1c0>)
 801377a:	4867      	ldr	r0, [pc, #412]	@ (8013918 <tcp_enqueue_flags+0x1c4>)
 801377c:	f004 fa70 	bl	8017c60 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d106      	bne.n	8013794 <tcp_enqueue_flags+0x40>
 8013786:	4b62      	ldr	r3, [pc, #392]	@ (8013910 <tcp_enqueue_flags+0x1bc>)
 8013788:	f240 4213 	movw	r2, #1043	@ 0x413
 801378c:	4963      	ldr	r1, [pc, #396]	@ (801391c <tcp_enqueue_flags+0x1c8>)
 801378e:	4862      	ldr	r0, [pc, #392]	@ (8013918 <tcp_enqueue_flags+0x1c4>)
 8013790:	f004 fa66 	bl	8017c60 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013794:	78fb      	ldrb	r3, [r7, #3]
 8013796:	f003 0302 	and.w	r3, r3, #2
 801379a:	2b00      	cmp	r3, #0
 801379c:	d001      	beq.n	80137a2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801379e:	2301      	movs	r3, #1
 80137a0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80137a2:	7ffb      	ldrb	r3, [r7, #31]
 80137a4:	009b      	lsls	r3, r3, #2
 80137a6:	b2db      	uxtb	r3, r3
 80137a8:	f003 0304 	and.w	r3, r3, #4
 80137ac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80137ae:	7dfb      	ldrb	r3, [r7, #23]
 80137b0:	b29b      	uxth	r3, r3
 80137b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80137b6:	4619      	mov	r1, r3
 80137b8:	2036      	movs	r0, #54	@ 0x36
 80137ba:	f7fa fa01 	bl	800dbc0 <pbuf_alloc>
 80137be:	6138      	str	r0, [r7, #16]
 80137c0:	693b      	ldr	r3, [r7, #16]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d109      	bne.n	80137da <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	8b5b      	ldrh	r3, [r3, #26]
 80137ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80137ce:	b29a      	uxth	r2, r3
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80137d4:	f04f 33ff 	mov.w	r3, #4294967295
 80137d8:	e095      	b.n	8013906 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	895a      	ldrh	r2, [r3, #10]
 80137de:	7dfb      	ldrb	r3, [r7, #23]
 80137e0:	b29b      	uxth	r3, r3
 80137e2:	429a      	cmp	r2, r3
 80137e4:	d206      	bcs.n	80137f4 <tcp_enqueue_flags+0xa0>
 80137e6:	4b4a      	ldr	r3, [pc, #296]	@ (8013910 <tcp_enqueue_flags+0x1bc>)
 80137e8:	f240 4239 	movw	r2, #1081	@ 0x439
 80137ec:	494c      	ldr	r1, [pc, #304]	@ (8013920 <tcp_enqueue_flags+0x1cc>)
 80137ee:	484a      	ldr	r0, [pc, #296]	@ (8013918 <tcp_enqueue_flags+0x1c4>)
 80137f0:	f004 fa36 	bl	8017c60 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80137f8:	78fa      	ldrb	r2, [r7, #3]
 80137fa:	7ffb      	ldrb	r3, [r7, #31]
 80137fc:	9300      	str	r3, [sp, #0]
 80137fe:	460b      	mov	r3, r1
 8013800:	6939      	ldr	r1, [r7, #16]
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	f7ff f91a 	bl	8012a3c <tcp_create_segment>
 8013808:	60f8      	str	r0, [r7, #12]
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d109      	bne.n	8013824 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	8b5b      	ldrh	r3, [r3, #26]
 8013814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013818:	b29a      	uxth	r2, r3
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801381e:	f04f 33ff 	mov.w	r3, #4294967295
 8013822:	e070      	b.n	8013906 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	68db      	ldr	r3, [r3, #12]
 8013828:	f003 0303 	and.w	r3, r3, #3
 801382c:	2b00      	cmp	r3, #0
 801382e:	d006      	beq.n	801383e <tcp_enqueue_flags+0xea>
 8013830:	4b37      	ldr	r3, [pc, #220]	@ (8013910 <tcp_enqueue_flags+0x1bc>)
 8013832:	f240 4242 	movw	r2, #1090	@ 0x442
 8013836:	493b      	ldr	r1, [pc, #236]	@ (8013924 <tcp_enqueue_flags+0x1d0>)
 8013838:	4837      	ldr	r0, [pc, #220]	@ (8013918 <tcp_enqueue_flags+0x1c4>)
 801383a:	f004 fa11 	bl	8017c60 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	891b      	ldrh	r3, [r3, #8]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d006      	beq.n	8013854 <tcp_enqueue_flags+0x100>
 8013846:	4b32      	ldr	r3, [pc, #200]	@ (8013910 <tcp_enqueue_flags+0x1bc>)
 8013848:	f240 4243 	movw	r2, #1091	@ 0x443
 801384c:	4936      	ldr	r1, [pc, #216]	@ (8013928 <tcp_enqueue_flags+0x1d4>)
 801384e:	4832      	ldr	r0, [pc, #200]	@ (8013918 <tcp_enqueue_flags+0x1c4>)
 8013850:	f004 fa06 	bl	8017c60 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013858:	2b00      	cmp	r3, #0
 801385a:	d103      	bne.n	8013864 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	68fa      	ldr	r2, [r7, #12]
 8013860:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013862:	e00d      	b.n	8013880 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013868:	61bb      	str	r3, [r7, #24]
 801386a:	e002      	b.n	8013872 <tcp_enqueue_flags+0x11e>
 801386c:	69bb      	ldr	r3, [r7, #24]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	61bb      	str	r3, [r7, #24]
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d1f8      	bne.n	801386c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801387a:	69bb      	ldr	r3, [r7, #24]
 801387c:	68fa      	ldr	r2, [r7, #12]
 801387e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	2200      	movs	r2, #0
 8013884:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013888:	78fb      	ldrb	r3, [r7, #3]
 801388a:	f003 0302 	and.w	r3, r3, #2
 801388e:	2b00      	cmp	r3, #0
 8013890:	d104      	bne.n	801389c <tcp_enqueue_flags+0x148>
 8013892:	78fb      	ldrb	r3, [r7, #3]
 8013894:	f003 0301 	and.w	r3, r3, #1
 8013898:	2b00      	cmp	r3, #0
 801389a:	d004      	beq.n	80138a6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80138a0:	1c5a      	adds	r2, r3, #1
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80138a6:	78fb      	ldrb	r3, [r7, #3]
 80138a8:	f003 0301 	and.w	r3, r3, #1
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d006      	beq.n	80138be <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	8b5b      	ldrh	r3, [r3, #26]
 80138b4:	f043 0320 	orr.w	r3, r3, #32
 80138b8:	b29a      	uxth	r2, r3
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7fa fcee 	bl	800e2a4 <pbuf_clen>
 80138c8:	4603      	mov	r3, r0
 80138ca:	461a      	mov	r2, r3
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80138d2:	4413      	add	r3, r2
 80138d4:	b29a      	uxth	r2, r3
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d00e      	beq.n	8013904 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d10a      	bne.n	8013904 <tcp_enqueue_flags+0x1b0>
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d106      	bne.n	8013904 <tcp_enqueue_flags+0x1b0>
 80138f6:	4b06      	ldr	r3, [pc, #24]	@ (8013910 <tcp_enqueue_flags+0x1bc>)
 80138f8:	f240 4265 	movw	r2, #1125	@ 0x465
 80138fc:	490b      	ldr	r1, [pc, #44]	@ (801392c <tcp_enqueue_flags+0x1d8>)
 80138fe:	4806      	ldr	r0, [pc, #24]	@ (8013918 <tcp_enqueue_flags+0x1c4>)
 8013900:	f004 f9ae 	bl	8017c60 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013904:	2300      	movs	r3, #0
}
 8013906:	4618      	mov	r0, r3
 8013908:	3720      	adds	r7, #32
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}
 801390e:	bf00      	nop
 8013910:	0801b480 	.word	0x0801b480
 8013914:	0801b8a4 	.word	0x0801b8a4
 8013918:	0801b4d4 	.word	0x0801b4d4
 801391c:	0801b8fc 	.word	0x0801b8fc
 8013920:	0801b91c 	.word	0x0801b91c
 8013924:	0801b958 	.word	0x0801b958
 8013928:	0801b970 	.word	0x0801b970
 801392c:	0801b99c 	.word	0x0801b99c

08013930 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013930:	b5b0      	push	{r4, r5, r7, lr}
 8013932:	b08a      	sub	sp, #40	@ 0x28
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d106      	bne.n	801394c <tcp_output+0x1c>
 801393e:	4b8a      	ldr	r3, [pc, #552]	@ (8013b68 <tcp_output+0x238>)
 8013940:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8013944:	4989      	ldr	r1, [pc, #548]	@ (8013b6c <tcp_output+0x23c>)
 8013946:	488a      	ldr	r0, [pc, #552]	@ (8013b70 <tcp_output+0x240>)
 8013948:	f004 f98a 	bl	8017c60 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	7d1b      	ldrb	r3, [r3, #20]
 8013950:	2b01      	cmp	r3, #1
 8013952:	d106      	bne.n	8013962 <tcp_output+0x32>
 8013954:	4b84      	ldr	r3, [pc, #528]	@ (8013b68 <tcp_output+0x238>)
 8013956:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801395a:	4986      	ldr	r1, [pc, #536]	@ (8013b74 <tcp_output+0x244>)
 801395c:	4884      	ldr	r0, [pc, #528]	@ (8013b70 <tcp_output+0x240>)
 801395e:	f004 f97f 	bl	8017c60 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013962:	4b85      	ldr	r3, [pc, #532]	@ (8013b78 <tcp_output+0x248>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	687a      	ldr	r2, [r7, #4]
 8013968:	429a      	cmp	r2, r3
 801396a:	d101      	bne.n	8013970 <tcp_output+0x40>
    return ERR_OK;
 801396c:	2300      	movs	r3, #0
 801396e:	e1ce      	b.n	8013d0e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801397c:	4293      	cmp	r3, r2
 801397e:	bf28      	it	cs
 8013980:	4613      	movcs	r3, r2
 8013982:	b29b      	uxth	r3, r3
 8013984:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801398a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801398e:	2b00      	cmp	r3, #0
 8013990:	d10b      	bne.n	80139aa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	8b5b      	ldrh	r3, [r3, #26]
 8013996:	f003 0302 	and.w	r3, r3, #2
 801399a:	2b00      	cmp	r3, #0
 801399c:	f000 81aa 	beq.w	8013cf4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	f000 fdcb 	bl	801453c <tcp_send_empty_ack>
 80139a6:	4603      	mov	r3, r0
 80139a8:	e1b1      	b.n	8013d0e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80139aa:	6879      	ldr	r1, [r7, #4]
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	3304      	adds	r3, #4
 80139b0:	461a      	mov	r2, r3
 80139b2:	6878      	ldr	r0, [r7, #4]
 80139b4:	f7ff f826 	bl	8012a04 <tcp_route>
 80139b8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80139ba:	697b      	ldr	r3, [r7, #20]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d102      	bne.n	80139c6 <tcp_output+0x96>
    return ERR_RTE;
 80139c0:	f06f 0303 	mvn.w	r3, #3
 80139c4:	e1a3      	b.n	8013d0e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d003      	beq.n	80139d4 <tcp_output+0xa4>
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d111      	bne.n	80139f8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80139d4:	697b      	ldr	r3, [r7, #20]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d002      	beq.n	80139e0 <tcp_output+0xb0>
 80139da:	697b      	ldr	r3, [r7, #20]
 80139dc:	3304      	adds	r3, #4
 80139de:	e000      	b.n	80139e2 <tcp_output+0xb2>
 80139e0:	2300      	movs	r3, #0
 80139e2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d102      	bne.n	80139f0 <tcp_output+0xc0>
      return ERR_RTE;
 80139ea:	f06f 0303 	mvn.w	r3, #3
 80139ee:	e18e      	b.n	8013d0e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	681a      	ldr	r2, [r3, #0]
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80139f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139fa:	68db      	ldr	r3, [r3, #12]
 80139fc:	685b      	ldr	r3, [r3, #4]
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7f8 ffe5 	bl	800c9ce <lwip_htonl>
 8013a04:	4602      	mov	r2, r0
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a0a:	1ad3      	subs	r3, r2, r3
 8013a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013a0e:	8912      	ldrh	r2, [r2, #8]
 8013a10:	4413      	add	r3, r2
 8013a12:	69ba      	ldr	r2, [r7, #24]
 8013a14:	429a      	cmp	r2, r3
 8013a16:	d227      	bcs.n	8013a68 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013a1e:	461a      	mov	r2, r3
 8013a20:	69bb      	ldr	r3, [r7, #24]
 8013a22:	4293      	cmp	r3, r2
 8013a24:	d114      	bne.n	8013a50 <tcp_output+0x120>
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d110      	bne.n	8013a50 <tcp_output+0x120>
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d10b      	bne.n	8013a50 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      pcb->persist_backoff = 1;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	2201      	movs	r2, #1
 8013a44:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
      pcb->persist_probe = 0;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	8b5b      	ldrh	r3, [r3, #26]
 8013a54:	f003 0302 	and.w	r3, r3, #2
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	f000 814d 	beq.w	8013cf8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f000 fd6c 	bl	801453c <tcp_send_empty_ack>
 8013a64:	4603      	mov	r3, r0
 8013a66:	e152      	b.n	8013d0e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013a74:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013a76:	6a3b      	ldr	r3, [r7, #32]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	f000 811c 	beq.w	8013cb6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013a7e:	e002      	b.n	8013a86 <tcp_output+0x156>
 8013a80:	6a3b      	ldr	r3, [r7, #32]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	623b      	str	r3, [r7, #32]
 8013a86:	6a3b      	ldr	r3, [r7, #32]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d1f8      	bne.n	8013a80 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013a8e:	e112      	b.n	8013cb6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a92:	68db      	ldr	r3, [r3, #12]
 8013a94:	899b      	ldrh	r3, [r3, #12]
 8013a96:	b29b      	uxth	r3, r3
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f7f8 ff83 	bl	800c9a4 <lwip_htons>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	b2db      	uxtb	r3, r3
 8013aa2:	f003 0304 	and.w	r3, r3, #4
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d006      	beq.n	8013ab8 <tcp_output+0x188>
 8013aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8013b68 <tcp_output+0x238>)
 8013aac:	f240 5236 	movw	r2, #1334	@ 0x536
 8013ab0:	4932      	ldr	r1, [pc, #200]	@ (8013b7c <tcp_output+0x24c>)
 8013ab2:	482f      	ldr	r0, [pc, #188]	@ (8013b70 <tcp_output+0x240>)
 8013ab4:	f004 f8d4 	bl	8017c60 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d01f      	beq.n	8013b00 <tcp_output+0x1d0>
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	8b5b      	ldrh	r3, [r3, #26]
 8013ac4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d119      	bne.n	8013b00 <tcp_output+0x1d0>
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d00b      	beq.n	8013aec <tcp_output+0x1bc>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d110      	bne.n	8013b00 <tcp_output+0x1d0>
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ae2:	891a      	ldrh	r2, [r3, #8]
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d209      	bcs.n	8013b00 <tcp_output+0x1d0>
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d004      	beq.n	8013b00 <tcp_output+0x1d0>
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013afc:	2b08      	cmp	r3, #8
 8013afe:	d901      	bls.n	8013b04 <tcp_output+0x1d4>
 8013b00:	2301      	movs	r3, #1
 8013b02:	e000      	b.n	8013b06 <tcp_output+0x1d6>
 8013b04:	2300      	movs	r3, #0
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d106      	bne.n	8013b18 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	8b5b      	ldrh	r3, [r3, #26]
 8013b0e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	f000 80e4 	beq.w	8013ce0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	7d1b      	ldrb	r3, [r3, #20]
 8013b1c:	2b02      	cmp	r3, #2
 8013b1e:	d00d      	beq.n	8013b3c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b22:	68db      	ldr	r3, [r3, #12]
 8013b24:	899b      	ldrh	r3, [r3, #12]
 8013b26:	b29c      	uxth	r4, r3
 8013b28:	2010      	movs	r0, #16
 8013b2a:	f7f8 ff3b 	bl	800c9a4 <lwip_htons>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	461a      	mov	r2, r3
 8013b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b34:	68db      	ldr	r3, [r3, #12]
 8013b36:	4322      	orrs	r2, r4
 8013b38:	b292      	uxth	r2, r2
 8013b3a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013b3c:	697a      	ldr	r2, [r7, #20]
 8013b3e:	6879      	ldr	r1, [r7, #4]
 8013b40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013b42:	f000 f909 	bl	8013d58 <tcp_output_segment>
 8013b46:	4603      	mov	r3, r0
 8013b48:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d016      	beq.n	8013b80 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	8b5b      	ldrh	r3, [r3, #26]
 8013b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013b5a:	b29a      	uxth	r2, r3
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	835a      	strh	r2, [r3, #26]
      return err;
 8013b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b64:	e0d3      	b.n	8013d0e <tcp_output+0x3de>
 8013b66:	bf00      	nop
 8013b68:	0801b480 	.word	0x0801b480
 8013b6c:	0801b9c4 	.word	0x0801b9c4
 8013b70:	0801b4d4 	.word	0x0801b4d4
 8013b74:	0801b9dc 	.word	0x0801b9dc
 8013b78:	20010044 	.word	0x20010044
 8013b7c:	0801ba04 	.word	0x0801ba04
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b82:	681a      	ldr	r2, [r3, #0]
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	7d1b      	ldrb	r3, [r3, #20]
 8013b8c:	2b02      	cmp	r3, #2
 8013b8e:	d006      	beq.n	8013b9e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	8b5b      	ldrh	r3, [r3, #26]
 8013b94:	f023 0303 	bic.w	r3, r3, #3
 8013b98:	b29a      	uxth	r2, r3
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ba0:	68db      	ldr	r3, [r3, #12]
 8013ba2:	685b      	ldr	r3, [r3, #4]
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7f8 ff12 	bl	800c9ce <lwip_htonl>
 8013baa:	4604      	mov	r4, r0
 8013bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bae:	891b      	ldrh	r3, [r3, #8]
 8013bb0:	461d      	mov	r5, r3
 8013bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bb4:	68db      	ldr	r3, [r3, #12]
 8013bb6:	899b      	ldrh	r3, [r3, #12]
 8013bb8:	b29b      	uxth	r3, r3
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f7f8 fef2 	bl	800c9a4 <lwip_htons>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	b2db      	uxtb	r3, r3
 8013bc4:	f003 0303 	and.w	r3, r3, #3
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d001      	beq.n	8013bd0 <tcp_output+0x2a0>
 8013bcc:	2301      	movs	r3, #1
 8013bce:	e000      	b.n	8013bd2 <tcp_output+0x2a2>
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	442b      	add	r3, r5
 8013bd4:	4423      	add	r3, r4
 8013bd6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	1ad3      	subs	r3, r2, r3
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	da02      	bge.n	8013bea <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	68ba      	ldr	r2, [r7, #8]
 8013be8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bec:	891b      	ldrh	r3, [r3, #8]
 8013bee:	461c      	mov	r4, r3
 8013bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bf2:	68db      	ldr	r3, [r3, #12]
 8013bf4:	899b      	ldrh	r3, [r3, #12]
 8013bf6:	b29b      	uxth	r3, r3
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7f8 fed3 	bl	800c9a4 <lwip_htons>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	b2db      	uxtb	r3, r3
 8013c02:	f003 0303 	and.w	r3, r3, #3
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d001      	beq.n	8013c0e <tcp_output+0x2de>
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	e000      	b.n	8013c10 <tcp_output+0x2e0>
 8013c0e:	2300      	movs	r3, #0
 8013c10:	4423      	add	r3, r4
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d049      	beq.n	8013caa <tcp_output+0x37a>
      seg->next = NULL;
 8013c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c18:	2200      	movs	r2, #0
 8013c1a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d105      	bne.n	8013c30 <tcp_output+0x300>
        pcb->unacked = seg;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c28:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8013c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c2c:	623b      	str	r3, [r7, #32]
 8013c2e:	e03f      	b.n	8013cb0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c32:	68db      	ldr	r3, [r3, #12]
 8013c34:	685b      	ldr	r3, [r3, #4]
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7f8 fec9 	bl	800c9ce <lwip_htonl>
 8013c3c:	4604      	mov	r4, r0
 8013c3e:	6a3b      	ldr	r3, [r7, #32]
 8013c40:	68db      	ldr	r3, [r3, #12]
 8013c42:	685b      	ldr	r3, [r3, #4]
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7f8 fec2 	bl	800c9ce <lwip_htonl>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	1ae3      	subs	r3, r4, r3
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	da24      	bge.n	8013c9c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	3370      	adds	r3, #112	@ 0x70
 8013c56:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013c58:	e002      	b.n	8013c60 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013c5a:	69fb      	ldr	r3, [r7, #28]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013c60:	69fb      	ldr	r3, [r7, #28]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d011      	beq.n	8013c8c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013c68:	69fb      	ldr	r3, [r7, #28]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	68db      	ldr	r3, [r3, #12]
 8013c6e:	685b      	ldr	r3, [r3, #4]
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7f8 feac 	bl	800c9ce <lwip_htonl>
 8013c76:	4604      	mov	r4, r0
 8013c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c7a:	68db      	ldr	r3, [r3, #12]
 8013c7c:	685b      	ldr	r3, [r3, #4]
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f7f8 fea5 	bl	800c9ce <lwip_htonl>
 8013c84:	4603      	mov	r3, r0
 8013c86:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	dbe6      	blt.n	8013c5a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013c8c:	69fb      	ldr	r3, [r7, #28]
 8013c8e:	681a      	ldr	r2, [r3, #0]
 8013c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c92:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013c94:	69fb      	ldr	r3, [r7, #28]
 8013c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c98:	601a      	str	r2, [r3, #0]
 8013c9a:	e009      	b.n	8013cb0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013c9c:	6a3b      	ldr	r3, [r7, #32]
 8013c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013ca0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013ca2:	6a3b      	ldr	r3, [r7, #32]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	623b      	str	r3, [r7, #32]
 8013ca8:	e002      	b.n	8013cb0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013caa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013cac:	f7fb ff17 	bl	800fade <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8013cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d012      	beq.n	8013ce2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cbe:	68db      	ldr	r3, [r3, #12]
 8013cc0:	685b      	ldr	r3, [r3, #4]
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f7f8 fe83 	bl	800c9ce <lwip_htonl>
 8013cc8:	4602      	mov	r2, r0
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013cce:	1ad3      	subs	r3, r2, r3
 8013cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013cd2:	8912      	ldrh	r2, [r2, #8]
 8013cd4:	4413      	add	r3, r2
  while (seg != NULL &&
 8013cd6:	69ba      	ldr	r2, [r7, #24]
 8013cd8:	429a      	cmp	r2, r3
 8013cda:	f4bf aed9 	bcs.w	8013a90 <tcp_output+0x160>
 8013cde:	e000      	b.n	8013ce2 <tcp_output+0x3b2>
      break;
 8013ce0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d108      	bne.n	8013cfc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	2200      	movs	r2, #0
 8013cee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8013cf2:	e004      	b.n	8013cfe <tcp_output+0x3ce>
    goto output_done;
 8013cf4:	bf00      	nop
 8013cf6:	e002      	b.n	8013cfe <tcp_output+0x3ce>
    goto output_done;
 8013cf8:	bf00      	nop
 8013cfa:	e000      	b.n	8013cfe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013cfc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	8b5b      	ldrh	r3, [r3, #26]
 8013d02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013d06:	b29a      	uxth	r2, r3
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013d0c:	2300      	movs	r3, #0
}
 8013d0e:	4618      	mov	r0, r3
 8013d10:	3728      	adds	r7, #40	@ 0x28
 8013d12:	46bd      	mov	sp, r7
 8013d14:	bdb0      	pop	{r4, r5, r7, pc}
 8013d16:	bf00      	nop

08013d18 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b082      	sub	sp, #8
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d106      	bne.n	8013d34 <tcp_output_segment_busy+0x1c>
 8013d26:	4b09      	ldr	r3, [pc, #36]	@ (8013d4c <tcp_output_segment_busy+0x34>)
 8013d28:	f240 529a 	movw	r2, #1434	@ 0x59a
 8013d2c:	4908      	ldr	r1, [pc, #32]	@ (8013d50 <tcp_output_segment_busy+0x38>)
 8013d2e:	4809      	ldr	r0, [pc, #36]	@ (8013d54 <tcp_output_segment_busy+0x3c>)
 8013d30:	f003 ff96 	bl	8017c60 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	685b      	ldr	r3, [r3, #4]
 8013d38:	7b9b      	ldrb	r3, [r3, #14]
 8013d3a:	2b01      	cmp	r3, #1
 8013d3c:	d001      	beq.n	8013d42 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013d3e:	2301      	movs	r3, #1
 8013d40:	e000      	b.n	8013d44 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013d42:	2300      	movs	r3, #0
}
 8013d44:	4618      	mov	r0, r3
 8013d46:	3708      	adds	r7, #8
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}
 8013d4c:	0801b480 	.word	0x0801b480
 8013d50:	0801ba1c 	.word	0x0801ba1c
 8013d54:	0801b4d4 	.word	0x0801b4d4

08013d58 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013d58:	b5b0      	push	{r4, r5, r7, lr}
 8013d5a:	b08c      	sub	sp, #48	@ 0x30
 8013d5c:	af04      	add	r7, sp, #16
 8013d5e:	60f8      	str	r0, [r7, #12]
 8013d60:	60b9      	str	r1, [r7, #8]
 8013d62:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d106      	bne.n	8013d78 <tcp_output_segment+0x20>
 8013d6a:	4b64      	ldr	r3, [pc, #400]	@ (8013efc <tcp_output_segment+0x1a4>)
 8013d6c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8013d70:	4963      	ldr	r1, [pc, #396]	@ (8013f00 <tcp_output_segment+0x1a8>)
 8013d72:	4864      	ldr	r0, [pc, #400]	@ (8013f04 <tcp_output_segment+0x1ac>)
 8013d74:	f003 ff74 	bl	8017c60 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013d78:	68bb      	ldr	r3, [r7, #8]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d106      	bne.n	8013d8c <tcp_output_segment+0x34>
 8013d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8013efc <tcp_output_segment+0x1a4>)
 8013d80:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8013d84:	4960      	ldr	r1, [pc, #384]	@ (8013f08 <tcp_output_segment+0x1b0>)
 8013d86:	485f      	ldr	r0, [pc, #380]	@ (8013f04 <tcp_output_segment+0x1ac>)
 8013d88:	f003 ff6a 	bl	8017c60 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d106      	bne.n	8013da0 <tcp_output_segment+0x48>
 8013d92:	4b5a      	ldr	r3, [pc, #360]	@ (8013efc <tcp_output_segment+0x1a4>)
 8013d94:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8013d98:	495c      	ldr	r1, [pc, #368]	@ (8013f0c <tcp_output_segment+0x1b4>)
 8013d9a:	485a      	ldr	r0, [pc, #360]	@ (8013f04 <tcp_output_segment+0x1ac>)
 8013d9c:	f003 ff60 	bl	8017c60 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013da0:	68f8      	ldr	r0, [r7, #12]
 8013da2:	f7ff ffb9 	bl	8013d18 <tcp_output_segment_busy>
 8013da6:	4603      	mov	r3, r0
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d001      	beq.n	8013db0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013dac:	2300      	movs	r3, #0
 8013dae:	e0a1      	b.n	8013ef4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	68dc      	ldr	r4, [r3, #12]
 8013db8:	4610      	mov	r0, r2
 8013dba:	f7f8 fe08 	bl	800c9ce <lwip_htonl>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	68dc      	ldr	r4, [r3, #12]
 8013dca:	4610      	mov	r0, r2
 8013dcc:	f7f8 fdea 	bl	800c9a4 <lwip_htons>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013dd8:	68ba      	ldr	r2, [r7, #8]
 8013dda:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013ddc:	441a      	add	r2, r3
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	68db      	ldr	r3, [r3, #12]
 8013de6:	3314      	adds	r3, #20
 8013de8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	7a9b      	ldrb	r3, [r3, #10]
 8013dee:	f003 0301 	and.w	r3, r3, #1
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d015      	beq.n	8013e22 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	3304      	adds	r3, #4
 8013dfa:	461a      	mov	r2, r3
 8013dfc:	6879      	ldr	r1, [r7, #4]
 8013dfe:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8013e02:	f7fc fa39 	bl	8010278 <tcp_eff_send_mss_netif>
 8013e06:	4603      	mov	r3, r0
 8013e08:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013e0a:	8b7b      	ldrh	r3, [r7, #26]
 8013e0c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8013e10:	4618      	mov	r0, r3
 8013e12:	f7f8 fddc 	bl	800c9ce <lwip_htonl>
 8013e16:	4602      	mov	r2, r0
 8013e18:	69fb      	ldr	r3, [r7, #28]
 8013e1a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013e1c:	69fb      	ldr	r3, [r7, #28]
 8013e1e:	3304      	adds	r3, #4
 8013e20:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013e22:	68bb      	ldr	r3, [r7, #8]
 8013e24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	da02      	bge.n	8013e32 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	2200      	movs	r2, #0
 8013e30:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d10c      	bne.n	8013e54 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013e3a:	4b35      	ldr	r3, [pc, #212]	@ (8013f10 <tcp_output_segment+0x1b8>)
 8013e3c:	681a      	ldr	r2, [r3, #0]
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	68db      	ldr	r3, [r3, #12]
 8013e46:	685b      	ldr	r3, [r3, #4]
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f7f8 fdc0 	bl	800c9ce <lwip_htonl>
 8013e4e:	4602      	mov	r2, r0
 8013e50:	68bb      	ldr	r3, [r7, #8]
 8013e52:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	68da      	ldr	r2, [r3, #12]
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	685b      	ldr	r3, [r3, #4]
 8013e5c:	685b      	ldr	r3, [r3, #4]
 8013e5e:	1ad3      	subs	r3, r2, r3
 8013e60:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	685b      	ldr	r3, [r3, #4]
 8013e66:	8959      	ldrh	r1, [r3, #10]
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	685b      	ldr	r3, [r3, #4]
 8013e6c:	8b3a      	ldrh	r2, [r7, #24]
 8013e6e:	1a8a      	subs	r2, r1, r2
 8013e70:	b292      	uxth	r2, r2
 8013e72:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	685b      	ldr	r3, [r3, #4]
 8013e78:	8919      	ldrh	r1, [r3, #8]
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	685b      	ldr	r3, [r3, #4]
 8013e7e:	8b3a      	ldrh	r2, [r7, #24]
 8013e80:	1a8a      	subs	r2, r1, r2
 8013e82:	b292      	uxth	r2, r2
 8013e84:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	685b      	ldr	r3, [r3, #4]
 8013e8a:	68fa      	ldr	r2, [r7, #12]
 8013e8c:	68d2      	ldr	r2, [r2, #12]
 8013e8e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	68db      	ldr	r3, [r3, #12]
 8013e94:	2200      	movs	r2, #0
 8013e96:	741a      	strb	r2, [r3, #16]
 8013e98:	2200      	movs	r2, #0
 8013e9a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	68da      	ldr	r2, [r3, #12]
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	7a9b      	ldrb	r3, [r3, #10]
 8013ea4:	f003 0301 	and.w	r3, r3, #1
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d001      	beq.n	8013eb0 <tcp_output_segment+0x158>
 8013eac:	2318      	movs	r3, #24
 8013eae:	e000      	b.n	8013eb2 <tcp_output_segment+0x15a>
 8013eb0:	2314      	movs	r3, #20
 8013eb2:	4413      	add	r3, r2
 8013eb4:	69fa      	ldr	r2, [r7, #28]
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d006      	beq.n	8013ec8 <tcp_output_segment+0x170>
 8013eba:	4b10      	ldr	r3, [pc, #64]	@ (8013efc <tcp_output_segment+0x1a4>)
 8013ebc:	f240 621c 	movw	r2, #1564	@ 0x61c
 8013ec0:	4914      	ldr	r1, [pc, #80]	@ (8013f14 <tcp_output_segment+0x1bc>)
 8013ec2:	4810      	ldr	r0, [pc, #64]	@ (8013f04 <tcp_output_segment+0x1ac>)
 8013ec4:	f003 fecc 	bl	8017c60 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	6858      	ldr	r0, [r3, #4]
 8013ecc:	68b9      	ldr	r1, [r7, #8]
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	1d1c      	adds	r4, r3, #4
 8013ed2:	68bb      	ldr	r3, [r7, #8]
 8013ed4:	7add      	ldrb	r5, [r3, #11]
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	7a9b      	ldrb	r3, [r3, #10]
 8013eda:	687a      	ldr	r2, [r7, #4]
 8013edc:	9202      	str	r2, [sp, #8]
 8013ede:	2206      	movs	r2, #6
 8013ee0:	9201      	str	r2, [sp, #4]
 8013ee2:	9300      	str	r3, [sp, #0]
 8013ee4:	462b      	mov	r3, r5
 8013ee6:	4622      	mov	r2, r4
 8013ee8:	f002 fbaa 	bl	8016640 <ip4_output_if>
 8013eec:	4603      	mov	r3, r0
 8013eee:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3720      	adds	r7, #32
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bdb0      	pop	{r4, r5, r7, pc}
 8013efc:	0801b480 	.word	0x0801b480
 8013f00:	0801ba44 	.word	0x0801ba44
 8013f04:	0801b4d4 	.word	0x0801b4d4
 8013f08:	0801ba64 	.word	0x0801ba64
 8013f0c:	0801ba84 	.word	0x0801ba84
 8013f10:	2000fff8 	.word	0x2000fff8
 8013f14:	0801baa8 	.word	0x0801baa8

08013f18 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013f18:	b5b0      	push	{r4, r5, r7, lr}
 8013f1a:	b084      	sub	sp, #16
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d106      	bne.n	8013f34 <tcp_rexmit_rto_prepare+0x1c>
 8013f26:	4b31      	ldr	r3, [pc, #196]	@ (8013fec <tcp_rexmit_rto_prepare+0xd4>)
 8013f28:	f240 6263 	movw	r2, #1635	@ 0x663
 8013f2c:	4930      	ldr	r1, [pc, #192]	@ (8013ff0 <tcp_rexmit_rto_prepare+0xd8>)
 8013f2e:	4831      	ldr	r0, [pc, #196]	@ (8013ff4 <tcp_rexmit_rto_prepare+0xdc>)
 8013f30:	f003 fe96 	bl	8017c60 <iprintf>

  if (pcb->unacked == NULL) {
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d102      	bne.n	8013f42 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013f3c:	f06f 0305 	mvn.w	r3, #5
 8013f40:	e050      	b.n	8013fe4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f46:	60fb      	str	r3, [r7, #12]
 8013f48:	e00b      	b.n	8013f62 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013f4a:	68f8      	ldr	r0, [r7, #12]
 8013f4c:	f7ff fee4 	bl	8013d18 <tcp_output_segment_busy>
 8013f50:	4603      	mov	r3, r0
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d002      	beq.n	8013f5c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013f56:	f06f 0305 	mvn.w	r3, #5
 8013f5a:	e043      	b.n	8013fe4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	60fb      	str	r3, [r7, #12]
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d1ef      	bne.n	8013f4a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013f6a:	68f8      	ldr	r0, [r7, #12]
 8013f6c:	f7ff fed4 	bl	8013d18 <tcp_output_segment_busy>
 8013f70:	4603      	mov	r3, r0
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d002      	beq.n	8013f7c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013f76:	f06f 0305 	mvn.w	r3, #5
 8013f7a:	e033      	b.n	8013fe4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	2200      	movs	r2, #0
 8013f90:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	8b5b      	ldrh	r3, [r3, #26]
 8013f96:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8013f9a:	b29a      	uxth	r2, r3
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	68db      	ldr	r3, [r3, #12]
 8013fa4:	685b      	ldr	r3, [r3, #4]
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f7f8 fd11 	bl	800c9ce <lwip_htonl>
 8013fac:	4604      	mov	r4, r0
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	891b      	ldrh	r3, [r3, #8]
 8013fb2:	461d      	mov	r5, r3
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	68db      	ldr	r3, [r3, #12]
 8013fb8:	899b      	ldrh	r3, [r3, #12]
 8013fba:	b29b      	uxth	r3, r3
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f7f8 fcf1 	bl	800c9a4 <lwip_htons>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	b2db      	uxtb	r3, r3
 8013fc6:	f003 0303 	and.w	r3, r3, #3
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d001      	beq.n	8013fd2 <tcp_rexmit_rto_prepare+0xba>
 8013fce:	2301      	movs	r3, #1
 8013fd0:	e000      	b.n	8013fd4 <tcp_rexmit_rto_prepare+0xbc>
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	442b      	add	r3, r5
 8013fd6:	18e2      	adds	r2, r4, r3
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	2200      	movs	r2, #0
 8013fe0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8013fe2:	2300      	movs	r3, #0
}
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	3710      	adds	r7, #16
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	bdb0      	pop	{r4, r5, r7, pc}
 8013fec:	0801b480 	.word	0x0801b480
 8013ff0:	0801babc 	.word	0x0801babc
 8013ff4:	0801b4d4 	.word	0x0801b4d4

08013ff8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b082      	sub	sp, #8
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d106      	bne.n	8014014 <tcp_rexmit_rto_commit+0x1c>
 8014006:	4b0d      	ldr	r3, [pc, #52]	@ (801403c <tcp_rexmit_rto_commit+0x44>)
 8014008:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801400c:	490c      	ldr	r1, [pc, #48]	@ (8014040 <tcp_rexmit_rto_commit+0x48>)
 801400e:	480d      	ldr	r0, [pc, #52]	@ (8014044 <tcp_rexmit_rto_commit+0x4c>)
 8014010:	f003 fe26 	bl	8017c60 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801401a:	2bff      	cmp	r3, #255	@ 0xff
 801401c:	d007      	beq.n	801402e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014024:	3301      	adds	r3, #1
 8014026:	b2da      	uxtb	r2, r3
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801402e:	6878      	ldr	r0, [r7, #4]
 8014030:	f7ff fc7e 	bl	8013930 <tcp_output>
}
 8014034:	bf00      	nop
 8014036:	3708      	adds	r7, #8
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}
 801403c:	0801b480 	.word	0x0801b480
 8014040:	0801bae0 	.word	0x0801bae0
 8014044:	0801b4d4 	.word	0x0801b4d4

08014048 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b082      	sub	sp, #8
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d106      	bne.n	8014064 <tcp_rexmit_rto+0x1c>
 8014056:	4b0a      	ldr	r3, [pc, #40]	@ (8014080 <tcp_rexmit_rto+0x38>)
 8014058:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801405c:	4909      	ldr	r1, [pc, #36]	@ (8014084 <tcp_rexmit_rto+0x3c>)
 801405e:	480a      	ldr	r0, [pc, #40]	@ (8014088 <tcp_rexmit_rto+0x40>)
 8014060:	f003 fdfe 	bl	8017c60 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014064:	6878      	ldr	r0, [r7, #4]
 8014066:	f7ff ff57 	bl	8013f18 <tcp_rexmit_rto_prepare>
 801406a:	4603      	mov	r3, r0
 801406c:	2b00      	cmp	r3, #0
 801406e:	d102      	bne.n	8014076 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f7ff ffc1 	bl	8013ff8 <tcp_rexmit_rto_commit>
  }
}
 8014076:	bf00      	nop
 8014078:	3708      	adds	r7, #8
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}
 801407e:	bf00      	nop
 8014080:	0801b480 	.word	0x0801b480
 8014084:	0801bb04 	.word	0x0801bb04
 8014088:	0801b4d4 	.word	0x0801b4d4

0801408c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801408c:	b590      	push	{r4, r7, lr}
 801408e:	b085      	sub	sp, #20
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d106      	bne.n	80140a8 <tcp_rexmit+0x1c>
 801409a:	4b2f      	ldr	r3, [pc, #188]	@ (8014158 <tcp_rexmit+0xcc>)
 801409c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80140a0:	492e      	ldr	r1, [pc, #184]	@ (801415c <tcp_rexmit+0xd0>)
 80140a2:	482f      	ldr	r0, [pc, #188]	@ (8014160 <tcp_rexmit+0xd4>)
 80140a4:	f003 fddc 	bl	8017c60 <iprintf>

  if (pcb->unacked == NULL) {
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d102      	bne.n	80140b6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80140b0:	f06f 0305 	mvn.w	r3, #5
 80140b4:	e04c      	b.n	8014150 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80140ba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80140bc:	68b8      	ldr	r0, [r7, #8]
 80140be:	f7ff fe2b 	bl	8013d18 <tcp_output_segment_busy>
 80140c2:	4603      	mov	r3, r0
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d002      	beq.n	80140ce <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80140c8:	f06f 0305 	mvn.w	r3, #5
 80140cc:	e040      	b.n	8014150 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80140ce:	68bb      	ldr	r3, [r7, #8]
 80140d0:	681a      	ldr	r2, [r3, #0]
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	336c      	adds	r3, #108	@ 0x6c
 80140da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80140dc:	e002      	b.n	80140e4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d011      	beq.n	8014110 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	68db      	ldr	r3, [r3, #12]
 80140f2:	685b      	ldr	r3, [r3, #4]
 80140f4:	4618      	mov	r0, r3
 80140f6:	f7f8 fc6a 	bl	800c9ce <lwip_htonl>
 80140fa:	4604      	mov	r4, r0
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	68db      	ldr	r3, [r3, #12]
 8014100:	685b      	ldr	r3, [r3, #4]
 8014102:	4618      	mov	r0, r3
 8014104:	f7f8 fc63 	bl	800c9ce <lwip_htonl>
 8014108:	4603      	mov	r3, r0
 801410a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801410c:	2b00      	cmp	r3, #0
 801410e:	dbe6      	blt.n	80140de <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	681a      	ldr	r2, [r3, #0]
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	68ba      	ldr	r2, [r7, #8]
 801411c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d103      	bne.n	801412e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	2200      	movs	r2, #0
 801412a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014134:	2bff      	cmp	r3, #255	@ 0xff
 8014136:	d007      	beq.n	8014148 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801413e:	3301      	adds	r3, #1
 8014140:	b2da      	uxtb	r2, r3
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	2200      	movs	r2, #0
 801414c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801414e:	2300      	movs	r3, #0
}
 8014150:	4618      	mov	r0, r3
 8014152:	3714      	adds	r7, #20
 8014154:	46bd      	mov	sp, r7
 8014156:	bd90      	pop	{r4, r7, pc}
 8014158:	0801b480 	.word	0x0801b480
 801415c:	0801bb20 	.word	0x0801bb20
 8014160:	0801b4d4 	.word	0x0801b4d4

08014164 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b082      	sub	sp, #8
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d106      	bne.n	8014180 <tcp_rexmit_fast+0x1c>
 8014172:	4b2a      	ldr	r3, [pc, #168]	@ (801421c <tcp_rexmit_fast+0xb8>)
 8014174:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8014178:	4929      	ldr	r1, [pc, #164]	@ (8014220 <tcp_rexmit_fast+0xbc>)
 801417a:	482a      	ldr	r0, [pc, #168]	@ (8014224 <tcp_rexmit_fast+0xc0>)
 801417c:	f003 fd70 	bl	8017c60 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014184:	2b00      	cmp	r3, #0
 8014186:	d044      	beq.n	8014212 <tcp_rexmit_fast+0xae>
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	8b5b      	ldrh	r3, [r3, #26]
 801418c:	f003 0304 	and.w	r3, r3, #4
 8014190:	2b00      	cmp	r3, #0
 8014192:	d13e      	bne.n	8014212 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014194:	6878      	ldr	r0, [r7, #4]
 8014196:	f7ff ff79 	bl	801408c <tcp_rexmit>
 801419a:	4603      	mov	r3, r0
 801419c:	2b00      	cmp	r3, #0
 801419e:	d138      	bne.n	8014212 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80141ac:	4293      	cmp	r3, r2
 80141ae:	bf28      	it	cs
 80141b0:	4613      	movcs	r3, r2
 80141b2:	b29b      	uxth	r3, r3
 80141b4:	0fda      	lsrs	r2, r3, #31
 80141b6:	4413      	add	r3, r2
 80141b8:	105b      	asrs	r3, r3, #1
 80141ba:	b29a      	uxth	r2, r3
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80141c8:	461a      	mov	r2, r3
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80141ce:	005b      	lsls	r3, r3, #1
 80141d0:	429a      	cmp	r2, r3
 80141d2:	d206      	bcs.n	80141e2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80141d8:	005b      	lsls	r3, r3, #1
 80141da:	b29a      	uxth	r2, r3
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80141ec:	4619      	mov	r1, r3
 80141ee:	0049      	lsls	r1, r1, #1
 80141f0:	440b      	add	r3, r1
 80141f2:	b29b      	uxth	r3, r3
 80141f4:	4413      	add	r3, r2
 80141f6:	b29a      	uxth	r2, r3
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	8b5b      	ldrh	r3, [r3, #26]
 8014202:	f043 0304 	orr.w	r3, r3, #4
 8014206:	b29a      	uxth	r2, r3
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	2200      	movs	r2, #0
 8014210:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8014212:	bf00      	nop
 8014214:	3708      	adds	r7, #8
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}
 801421a:	bf00      	nop
 801421c:	0801b480 	.word	0x0801b480
 8014220:	0801bb38 	.word	0x0801bb38
 8014224:	0801b4d4 	.word	0x0801b4d4

08014228 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b086      	sub	sp, #24
 801422c:	af00      	add	r7, sp, #0
 801422e:	60f8      	str	r0, [r7, #12]
 8014230:	607b      	str	r3, [r7, #4]
 8014232:	460b      	mov	r3, r1
 8014234:	817b      	strh	r3, [r7, #10]
 8014236:	4613      	mov	r3, r2
 8014238:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801423a:	897a      	ldrh	r2, [r7, #10]
 801423c:	893b      	ldrh	r3, [r7, #8]
 801423e:	4413      	add	r3, r2
 8014240:	b29b      	uxth	r3, r3
 8014242:	3314      	adds	r3, #20
 8014244:	b29b      	uxth	r3, r3
 8014246:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801424a:	4619      	mov	r1, r3
 801424c:	2022      	movs	r0, #34	@ 0x22
 801424e:	f7f9 fcb7 	bl	800dbc0 <pbuf_alloc>
 8014252:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014254:	697b      	ldr	r3, [r7, #20]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d04d      	beq.n	80142f6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801425a:	897b      	ldrh	r3, [r7, #10]
 801425c:	3313      	adds	r3, #19
 801425e:	697a      	ldr	r2, [r7, #20]
 8014260:	8952      	ldrh	r2, [r2, #10]
 8014262:	4293      	cmp	r3, r2
 8014264:	db06      	blt.n	8014274 <tcp_output_alloc_header_common+0x4c>
 8014266:	4b26      	ldr	r3, [pc, #152]	@ (8014300 <tcp_output_alloc_header_common+0xd8>)
 8014268:	f240 7223 	movw	r2, #1827	@ 0x723
 801426c:	4925      	ldr	r1, [pc, #148]	@ (8014304 <tcp_output_alloc_header_common+0xdc>)
 801426e:	4826      	ldr	r0, [pc, #152]	@ (8014308 <tcp_output_alloc_header_common+0xe0>)
 8014270:	f003 fcf6 	bl	8017c60 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014274:	697b      	ldr	r3, [r7, #20]
 8014276:	685b      	ldr	r3, [r3, #4]
 8014278:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801427a:	8c3b      	ldrh	r3, [r7, #32]
 801427c:	4618      	mov	r0, r3
 801427e:	f7f8 fb91 	bl	800c9a4 <lwip_htons>
 8014282:	4603      	mov	r3, r0
 8014284:	461a      	mov	r2, r3
 8014286:	693b      	ldr	r3, [r7, #16]
 8014288:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801428a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801428c:	4618      	mov	r0, r3
 801428e:	f7f8 fb89 	bl	800c9a4 <lwip_htons>
 8014292:	4603      	mov	r3, r0
 8014294:	461a      	mov	r2, r3
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801429a:	693b      	ldr	r3, [r7, #16]
 801429c:	687a      	ldr	r2, [r7, #4]
 801429e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80142a0:	68f8      	ldr	r0, [r7, #12]
 80142a2:	f7f8 fb94 	bl	800c9ce <lwip_htonl>
 80142a6:	4602      	mov	r2, r0
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80142ac:	897b      	ldrh	r3, [r7, #10]
 80142ae:	089b      	lsrs	r3, r3, #2
 80142b0:	b29b      	uxth	r3, r3
 80142b2:	3305      	adds	r3, #5
 80142b4:	b29b      	uxth	r3, r3
 80142b6:	031b      	lsls	r3, r3, #12
 80142b8:	b29a      	uxth	r2, r3
 80142ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80142be:	b29b      	uxth	r3, r3
 80142c0:	4313      	orrs	r3, r2
 80142c2:	b29b      	uxth	r3, r3
 80142c4:	4618      	mov	r0, r3
 80142c6:	f7f8 fb6d 	bl	800c9a4 <lwip_htons>
 80142ca:	4603      	mov	r3, r0
 80142cc:	461a      	mov	r2, r3
 80142ce:	693b      	ldr	r3, [r7, #16]
 80142d0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80142d2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7f8 fb65 	bl	800c9a4 <lwip_htons>
 80142da:	4603      	mov	r3, r0
 80142dc:	461a      	mov	r2, r3
 80142de:	693b      	ldr	r3, [r7, #16]
 80142e0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80142e2:	693b      	ldr	r3, [r7, #16]
 80142e4:	2200      	movs	r2, #0
 80142e6:	741a      	strb	r2, [r3, #16]
 80142e8:	2200      	movs	r2, #0
 80142ea:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80142ec:	693b      	ldr	r3, [r7, #16]
 80142ee:	2200      	movs	r2, #0
 80142f0:	749a      	strb	r2, [r3, #18]
 80142f2:	2200      	movs	r2, #0
 80142f4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80142f6:	697b      	ldr	r3, [r7, #20]
}
 80142f8:	4618      	mov	r0, r3
 80142fa:	3718      	adds	r7, #24
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}
 8014300:	0801b480 	.word	0x0801b480
 8014304:	0801bb58 	.word	0x0801bb58
 8014308:	0801b4d4 	.word	0x0801b4d4

0801430c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801430c:	b5b0      	push	{r4, r5, r7, lr}
 801430e:	b08a      	sub	sp, #40	@ 0x28
 8014310:	af04      	add	r7, sp, #16
 8014312:	60f8      	str	r0, [r7, #12]
 8014314:	607b      	str	r3, [r7, #4]
 8014316:	460b      	mov	r3, r1
 8014318:	817b      	strh	r3, [r7, #10]
 801431a:	4613      	mov	r3, r2
 801431c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d106      	bne.n	8014332 <tcp_output_alloc_header+0x26>
 8014324:	4b15      	ldr	r3, [pc, #84]	@ (801437c <tcp_output_alloc_header+0x70>)
 8014326:	f240 7242 	movw	r2, #1858	@ 0x742
 801432a:	4915      	ldr	r1, [pc, #84]	@ (8014380 <tcp_output_alloc_header+0x74>)
 801432c:	4815      	ldr	r0, [pc, #84]	@ (8014384 <tcp_output_alloc_header+0x78>)
 801432e:	f003 fc97 	bl	8017c60 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	8adb      	ldrh	r3, [r3, #22]
 801433a:	68fa      	ldr	r2, [r7, #12]
 801433c:	8b12      	ldrh	r2, [r2, #24]
 801433e:	68f9      	ldr	r1, [r7, #12]
 8014340:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8014342:	893d      	ldrh	r5, [r7, #8]
 8014344:	897c      	ldrh	r4, [r7, #10]
 8014346:	9103      	str	r1, [sp, #12]
 8014348:	2110      	movs	r1, #16
 801434a:	9102      	str	r1, [sp, #8]
 801434c:	9201      	str	r2, [sp, #4]
 801434e:	9300      	str	r3, [sp, #0]
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	462a      	mov	r2, r5
 8014354:	4621      	mov	r1, r4
 8014356:	f7ff ff67 	bl	8014228 <tcp_output_alloc_header_common>
 801435a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801435c:	697b      	ldr	r3, [r7, #20]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d006      	beq.n	8014370 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014366:	68fa      	ldr	r2, [r7, #12]
 8014368:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801436a:	441a      	add	r2, r3
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8014370:	697b      	ldr	r3, [r7, #20]
}
 8014372:	4618      	mov	r0, r3
 8014374:	3718      	adds	r7, #24
 8014376:	46bd      	mov	sp, r7
 8014378:	bdb0      	pop	{r4, r5, r7, pc}
 801437a:	bf00      	nop
 801437c:	0801b480 	.word	0x0801b480
 8014380:	0801bb88 	.word	0x0801bb88
 8014384:	0801b4d4 	.word	0x0801b4d4

08014388 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b088      	sub	sp, #32
 801438c:	af00      	add	r7, sp, #0
 801438e:	60f8      	str	r0, [r7, #12]
 8014390:	60b9      	str	r1, [r7, #8]
 8014392:	4611      	mov	r1, r2
 8014394:	461a      	mov	r2, r3
 8014396:	460b      	mov	r3, r1
 8014398:	71fb      	strb	r3, [r7, #7]
 801439a:	4613      	mov	r3, r2
 801439c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801439e:	2300      	movs	r3, #0
 80143a0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80143a2:	68bb      	ldr	r3, [r7, #8]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d106      	bne.n	80143b6 <tcp_output_fill_options+0x2e>
 80143a8:	4b12      	ldr	r3, [pc, #72]	@ (80143f4 <tcp_output_fill_options+0x6c>)
 80143aa:	f240 7256 	movw	r2, #1878	@ 0x756
 80143ae:	4912      	ldr	r1, [pc, #72]	@ (80143f8 <tcp_output_fill_options+0x70>)
 80143b0:	4812      	ldr	r0, [pc, #72]	@ (80143fc <tcp_output_fill_options+0x74>)
 80143b2:	f003 fc55 	bl	8017c60 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80143b6:	68bb      	ldr	r3, [r7, #8]
 80143b8:	685b      	ldr	r3, [r3, #4]
 80143ba:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80143bc:	69bb      	ldr	r3, [r7, #24]
 80143be:	3314      	adds	r3, #20
 80143c0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80143c2:	8bfb      	ldrh	r3, [r7, #30]
 80143c4:	009b      	lsls	r3, r3, #2
 80143c6:	461a      	mov	r2, r3
 80143c8:	79fb      	ldrb	r3, [r7, #7]
 80143ca:	009b      	lsls	r3, r3, #2
 80143cc:	f003 0304 	and.w	r3, r3, #4
 80143d0:	4413      	add	r3, r2
 80143d2:	3314      	adds	r3, #20
 80143d4:	69ba      	ldr	r2, [r7, #24]
 80143d6:	4413      	add	r3, r2
 80143d8:	697a      	ldr	r2, [r7, #20]
 80143da:	429a      	cmp	r2, r3
 80143dc:	d006      	beq.n	80143ec <tcp_output_fill_options+0x64>
 80143de:	4b05      	ldr	r3, [pc, #20]	@ (80143f4 <tcp_output_fill_options+0x6c>)
 80143e0:	f240 7275 	movw	r2, #1909	@ 0x775
 80143e4:	4906      	ldr	r1, [pc, #24]	@ (8014400 <tcp_output_fill_options+0x78>)
 80143e6:	4805      	ldr	r0, [pc, #20]	@ (80143fc <tcp_output_fill_options+0x74>)
 80143e8:	f003 fc3a 	bl	8017c60 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80143ec:	bf00      	nop
 80143ee:	3720      	adds	r7, #32
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd80      	pop	{r7, pc}
 80143f4:	0801b480 	.word	0x0801b480
 80143f8:	0801bbb0 	.word	0x0801bbb0
 80143fc:	0801b4d4 	.word	0x0801b4d4
 8014400:	0801baa8 	.word	0x0801baa8

08014404 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b08a      	sub	sp, #40	@ 0x28
 8014408:	af04      	add	r7, sp, #16
 801440a:	60f8      	str	r0, [r7, #12]
 801440c:	60b9      	str	r1, [r7, #8]
 801440e:	607a      	str	r2, [r7, #4]
 8014410:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d106      	bne.n	8014426 <tcp_output_control_segment+0x22>
 8014418:	4b1c      	ldr	r3, [pc, #112]	@ (801448c <tcp_output_control_segment+0x88>)
 801441a:	f240 7287 	movw	r2, #1927	@ 0x787
 801441e:	491c      	ldr	r1, [pc, #112]	@ (8014490 <tcp_output_control_segment+0x8c>)
 8014420:	481c      	ldr	r0, [pc, #112]	@ (8014494 <tcp_output_control_segment+0x90>)
 8014422:	f003 fc1d 	bl	8017c60 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014426:	683a      	ldr	r2, [r7, #0]
 8014428:	6879      	ldr	r1, [r7, #4]
 801442a:	68f8      	ldr	r0, [r7, #12]
 801442c:	f7fe faea 	bl	8012a04 <tcp_route>
 8014430:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d102      	bne.n	801443e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014438:	23fc      	movs	r3, #252	@ 0xfc
 801443a:	75fb      	strb	r3, [r7, #23]
 801443c:	e01c      	b.n	8014478 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d006      	beq.n	8014452 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	7adb      	ldrb	r3, [r3, #11]
 8014448:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	7a9b      	ldrb	r3, [r3, #10]
 801444e:	757b      	strb	r3, [r7, #21]
 8014450:	e003      	b.n	801445a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014452:	23ff      	movs	r3, #255	@ 0xff
 8014454:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014456:	2300      	movs	r3, #0
 8014458:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801445a:	7dba      	ldrb	r2, [r7, #22]
 801445c:	693b      	ldr	r3, [r7, #16]
 801445e:	9302      	str	r3, [sp, #8]
 8014460:	2306      	movs	r3, #6
 8014462:	9301      	str	r3, [sp, #4]
 8014464:	7d7b      	ldrb	r3, [r7, #21]
 8014466:	9300      	str	r3, [sp, #0]
 8014468:	4613      	mov	r3, r2
 801446a:	683a      	ldr	r2, [r7, #0]
 801446c:	6879      	ldr	r1, [r7, #4]
 801446e:	68b8      	ldr	r0, [r7, #8]
 8014470:	f002 f8e6 	bl	8016640 <ip4_output_if>
 8014474:	4603      	mov	r3, r0
 8014476:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014478:	68b8      	ldr	r0, [r7, #8]
 801447a:	f7f9 fe85 	bl	800e188 <pbuf_free>
  return err;
 801447e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014482:	4618      	mov	r0, r3
 8014484:	3718      	adds	r7, #24
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}
 801448a:	bf00      	nop
 801448c:	0801b480 	.word	0x0801b480
 8014490:	0801bbd8 	.word	0x0801bbd8
 8014494:	0801b4d4 	.word	0x0801b4d4

08014498 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014498:	b590      	push	{r4, r7, lr}
 801449a:	b08b      	sub	sp, #44	@ 0x2c
 801449c:	af04      	add	r7, sp, #16
 801449e:	60f8      	str	r0, [r7, #12]
 80144a0:	60b9      	str	r1, [r7, #8]
 80144a2:	607a      	str	r2, [r7, #4]
 80144a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80144a6:	683b      	ldr	r3, [r7, #0]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d106      	bne.n	80144ba <tcp_rst+0x22>
 80144ac:	4b1f      	ldr	r3, [pc, #124]	@ (801452c <tcp_rst+0x94>)
 80144ae:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80144b2:	491f      	ldr	r1, [pc, #124]	@ (8014530 <tcp_rst+0x98>)
 80144b4:	481f      	ldr	r0, [pc, #124]	@ (8014534 <tcp_rst+0x9c>)
 80144b6:	f003 fbd3 	bl	8017c60 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80144ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d106      	bne.n	80144ce <tcp_rst+0x36>
 80144c0:	4b1a      	ldr	r3, [pc, #104]	@ (801452c <tcp_rst+0x94>)
 80144c2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80144c6:	491c      	ldr	r1, [pc, #112]	@ (8014538 <tcp_rst+0xa0>)
 80144c8:	481a      	ldr	r0, [pc, #104]	@ (8014534 <tcp_rst+0x9c>)
 80144ca:	f003 fbc9 	bl	8017c60 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80144ce:	2300      	movs	r3, #0
 80144d0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80144d2:	f246 0308 	movw	r3, #24584	@ 0x6008
 80144d6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80144d8:	7dfb      	ldrb	r3, [r7, #23]
 80144da:	b29c      	uxth	r4, r3
 80144dc:	68b8      	ldr	r0, [r7, #8]
 80144de:	f7f8 fa76 	bl	800c9ce <lwip_htonl>
 80144e2:	4602      	mov	r2, r0
 80144e4:	8abb      	ldrh	r3, [r7, #20]
 80144e6:	9303      	str	r3, [sp, #12]
 80144e8:	2314      	movs	r3, #20
 80144ea:	9302      	str	r3, [sp, #8]
 80144ec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80144ee:	9301      	str	r3, [sp, #4]
 80144f0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80144f2:	9300      	str	r3, [sp, #0]
 80144f4:	4613      	mov	r3, r2
 80144f6:	2200      	movs	r2, #0
 80144f8:	4621      	mov	r1, r4
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f7ff fe94 	bl	8014228 <tcp_output_alloc_header_common>
 8014500:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014502:	693b      	ldr	r3, [r7, #16]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d00c      	beq.n	8014522 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014508:	7dfb      	ldrb	r3, [r7, #23]
 801450a:	2200      	movs	r2, #0
 801450c:	6939      	ldr	r1, [r7, #16]
 801450e:	68f8      	ldr	r0, [r7, #12]
 8014510:	f7ff ff3a 	bl	8014388 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014516:	683a      	ldr	r2, [r7, #0]
 8014518:	6939      	ldr	r1, [r7, #16]
 801451a:	68f8      	ldr	r0, [r7, #12]
 801451c:	f7ff ff72 	bl	8014404 <tcp_output_control_segment>
 8014520:	e000      	b.n	8014524 <tcp_rst+0x8c>
    return;
 8014522:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014524:	371c      	adds	r7, #28
 8014526:	46bd      	mov	sp, r7
 8014528:	bd90      	pop	{r4, r7, pc}
 801452a:	bf00      	nop
 801452c:	0801b480 	.word	0x0801b480
 8014530:	0801bc04 	.word	0x0801bc04
 8014534:	0801b4d4 	.word	0x0801b4d4
 8014538:	0801bc20 	.word	0x0801bc20

0801453c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801453c:	b590      	push	{r4, r7, lr}
 801453e:	b087      	sub	sp, #28
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014544:	2300      	movs	r3, #0
 8014546:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014548:	2300      	movs	r3, #0
 801454a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d106      	bne.n	8014560 <tcp_send_empty_ack+0x24>
 8014552:	4b28      	ldr	r3, [pc, #160]	@ (80145f4 <tcp_send_empty_ack+0xb8>)
 8014554:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8014558:	4927      	ldr	r1, [pc, #156]	@ (80145f8 <tcp_send_empty_ack+0xbc>)
 801455a:	4828      	ldr	r0, [pc, #160]	@ (80145fc <tcp_send_empty_ack+0xc0>)
 801455c:	f003 fb80 	bl	8017c60 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014560:	7dfb      	ldrb	r3, [r7, #23]
 8014562:	009b      	lsls	r3, r3, #2
 8014564:	b2db      	uxtb	r3, r3
 8014566:	f003 0304 	and.w	r3, r3, #4
 801456a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801456c:	7d7b      	ldrb	r3, [r7, #21]
 801456e:	b29c      	uxth	r4, r3
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014574:	4618      	mov	r0, r3
 8014576:	f7f8 fa2a 	bl	800c9ce <lwip_htonl>
 801457a:	4603      	mov	r3, r0
 801457c:	2200      	movs	r2, #0
 801457e:	4621      	mov	r1, r4
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f7ff fec3 	bl	801430c <tcp_output_alloc_header>
 8014586:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014588:	693b      	ldr	r3, [r7, #16]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d109      	bne.n	80145a2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	8b5b      	ldrh	r3, [r3, #26]
 8014592:	f043 0303 	orr.w	r3, r3, #3
 8014596:	b29a      	uxth	r2, r3
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801459c:	f06f 0301 	mvn.w	r3, #1
 80145a0:	e023      	b.n	80145ea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80145a2:	7dbb      	ldrb	r3, [r7, #22]
 80145a4:	7dfa      	ldrb	r2, [r7, #23]
 80145a6:	6939      	ldr	r1, [r7, #16]
 80145a8:	6878      	ldr	r0, [r7, #4]
 80145aa:	f7ff feed 	bl	8014388 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80145ae:	687a      	ldr	r2, [r7, #4]
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	3304      	adds	r3, #4
 80145b4:	6939      	ldr	r1, [r7, #16]
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f7ff ff24 	bl	8014404 <tcp_output_control_segment>
 80145bc:	4603      	mov	r3, r0
 80145be:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80145c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d007      	beq.n	80145d8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	8b5b      	ldrh	r3, [r3, #26]
 80145cc:	f043 0303 	orr.w	r3, r3, #3
 80145d0:	b29a      	uxth	r2, r3
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	835a      	strh	r2, [r3, #26]
 80145d6:	e006      	b.n	80145e6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	8b5b      	ldrh	r3, [r3, #26]
 80145dc:	f023 0303 	bic.w	r3, r3, #3
 80145e0:	b29a      	uxth	r2, r3
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80145e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80145ea:	4618      	mov	r0, r3
 80145ec:	371c      	adds	r7, #28
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd90      	pop	{r4, r7, pc}
 80145f2:	bf00      	nop
 80145f4:	0801b480 	.word	0x0801b480
 80145f8:	0801bc3c 	.word	0x0801bc3c
 80145fc:	0801b4d4 	.word	0x0801b4d4

08014600 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014600:	b590      	push	{r4, r7, lr}
 8014602:	b087      	sub	sp, #28
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014608:	2300      	movs	r3, #0
 801460a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d106      	bne.n	8014620 <tcp_keepalive+0x20>
 8014612:	4b18      	ldr	r3, [pc, #96]	@ (8014674 <tcp_keepalive+0x74>)
 8014614:	f640 0224 	movw	r2, #2084	@ 0x824
 8014618:	4917      	ldr	r1, [pc, #92]	@ (8014678 <tcp_keepalive+0x78>)
 801461a:	4818      	ldr	r0, [pc, #96]	@ (801467c <tcp_keepalive+0x7c>)
 801461c:	f003 fb20 	bl	8017c60 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014620:	7dfb      	ldrb	r3, [r7, #23]
 8014622:	b29c      	uxth	r4, r3
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014628:	3b01      	subs	r3, #1
 801462a:	4618      	mov	r0, r3
 801462c:	f7f8 f9cf 	bl	800c9ce <lwip_htonl>
 8014630:	4603      	mov	r3, r0
 8014632:	2200      	movs	r2, #0
 8014634:	4621      	mov	r1, r4
 8014636:	6878      	ldr	r0, [r7, #4]
 8014638:	f7ff fe68 	bl	801430c <tcp_output_alloc_header>
 801463c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801463e:	693b      	ldr	r3, [r7, #16]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d102      	bne.n	801464a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014644:	f04f 33ff 	mov.w	r3, #4294967295
 8014648:	e010      	b.n	801466c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801464a:	7dfb      	ldrb	r3, [r7, #23]
 801464c:	2200      	movs	r2, #0
 801464e:	6939      	ldr	r1, [r7, #16]
 8014650:	6878      	ldr	r0, [r7, #4]
 8014652:	f7ff fe99 	bl	8014388 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014656:	687a      	ldr	r2, [r7, #4]
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	3304      	adds	r3, #4
 801465c:	6939      	ldr	r1, [r7, #16]
 801465e:	6878      	ldr	r0, [r7, #4]
 8014660:	f7ff fed0 	bl	8014404 <tcp_output_control_segment>
 8014664:	4603      	mov	r3, r0
 8014666:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014668:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801466c:	4618      	mov	r0, r3
 801466e:	371c      	adds	r7, #28
 8014670:	46bd      	mov	sp, r7
 8014672:	bd90      	pop	{r4, r7, pc}
 8014674:	0801b480 	.word	0x0801b480
 8014678:	0801bc5c 	.word	0x0801bc5c
 801467c:	0801b4d4 	.word	0x0801b4d4

08014680 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014680:	b590      	push	{r4, r7, lr}
 8014682:	b08b      	sub	sp, #44	@ 0x2c
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014688:	2300      	movs	r3, #0
 801468a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d106      	bne.n	80146a2 <tcp_zero_window_probe+0x22>
 8014694:	4b4c      	ldr	r3, [pc, #304]	@ (80147c8 <tcp_zero_window_probe+0x148>)
 8014696:	f640 024f 	movw	r2, #2127	@ 0x84f
 801469a:	494c      	ldr	r1, [pc, #304]	@ (80147cc <tcp_zero_window_probe+0x14c>)
 801469c:	484c      	ldr	r0, [pc, #304]	@ (80147d0 <tcp_zero_window_probe+0x150>)
 801469e:	f003 fadf 	bl	8017c60 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80146a6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80146a8:	6a3b      	ldr	r3, [r7, #32]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d101      	bne.n	80146b2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80146ae:	2300      	movs	r3, #0
 80146b0:	e086      	b.n	80147c0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 80146b8:	2bff      	cmp	r3, #255	@ 0xff
 80146ba:	d007      	beq.n	80146cc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 80146c2:	3301      	adds	r3, #1
 80146c4:	b2da      	uxtb	r2, r3
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80146cc:	6a3b      	ldr	r3, [r7, #32]
 80146ce:	68db      	ldr	r3, [r3, #12]
 80146d0:	899b      	ldrh	r3, [r3, #12]
 80146d2:	b29b      	uxth	r3, r3
 80146d4:	4618      	mov	r0, r3
 80146d6:	f7f8 f965 	bl	800c9a4 <lwip_htons>
 80146da:	4603      	mov	r3, r0
 80146dc:	b2db      	uxtb	r3, r3
 80146de:	f003 0301 	and.w	r3, r3, #1
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d005      	beq.n	80146f2 <tcp_zero_window_probe+0x72>
 80146e6:	6a3b      	ldr	r3, [r7, #32]
 80146e8:	891b      	ldrh	r3, [r3, #8]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d101      	bne.n	80146f2 <tcp_zero_window_probe+0x72>
 80146ee:	2301      	movs	r3, #1
 80146f0:	e000      	b.n	80146f4 <tcp_zero_window_probe+0x74>
 80146f2:	2300      	movs	r3, #0
 80146f4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80146f6:	7ffb      	ldrb	r3, [r7, #31]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	bf0c      	ite	eq
 80146fc:	2301      	moveq	r3, #1
 80146fe:	2300      	movne	r3, #0
 8014700:	b2db      	uxtb	r3, r3
 8014702:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014704:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014708:	b299      	uxth	r1, r3
 801470a:	6a3b      	ldr	r3, [r7, #32]
 801470c:	68db      	ldr	r3, [r3, #12]
 801470e:	685b      	ldr	r3, [r3, #4]
 8014710:	8bba      	ldrh	r2, [r7, #28]
 8014712:	6878      	ldr	r0, [r7, #4]
 8014714:	f7ff fdfa 	bl	801430c <tcp_output_alloc_header>
 8014718:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801471a:	69bb      	ldr	r3, [r7, #24]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d102      	bne.n	8014726 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014720:	f04f 33ff 	mov.w	r3, #4294967295
 8014724:	e04c      	b.n	80147c0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014726:	69bb      	ldr	r3, [r7, #24]
 8014728:	685b      	ldr	r3, [r3, #4]
 801472a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801472c:	7ffb      	ldrb	r3, [r7, #31]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d011      	beq.n	8014756 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014732:	697b      	ldr	r3, [r7, #20]
 8014734:	899b      	ldrh	r3, [r3, #12]
 8014736:	b29b      	uxth	r3, r3
 8014738:	b21b      	sxth	r3, r3
 801473a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801473e:	b21c      	sxth	r4, r3
 8014740:	2011      	movs	r0, #17
 8014742:	f7f8 f92f 	bl	800c9a4 <lwip_htons>
 8014746:	4603      	mov	r3, r0
 8014748:	b21b      	sxth	r3, r3
 801474a:	4323      	orrs	r3, r4
 801474c:	b21b      	sxth	r3, r3
 801474e:	b29a      	uxth	r2, r3
 8014750:	697b      	ldr	r3, [r7, #20]
 8014752:	819a      	strh	r2, [r3, #12]
 8014754:	e010      	b.n	8014778 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014756:	69bb      	ldr	r3, [r7, #24]
 8014758:	685b      	ldr	r3, [r3, #4]
 801475a:	3314      	adds	r3, #20
 801475c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801475e:	6a3b      	ldr	r3, [r7, #32]
 8014760:	6858      	ldr	r0, [r3, #4]
 8014762:	6a3b      	ldr	r3, [r7, #32]
 8014764:	685b      	ldr	r3, [r3, #4]
 8014766:	891a      	ldrh	r2, [r3, #8]
 8014768:	6a3b      	ldr	r3, [r7, #32]
 801476a:	891b      	ldrh	r3, [r3, #8]
 801476c:	1ad3      	subs	r3, r2, r3
 801476e:	b29b      	uxth	r3, r3
 8014770:	2201      	movs	r2, #1
 8014772:	6939      	ldr	r1, [r7, #16]
 8014774:	f7f9 fefe 	bl	800e574 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014778:	6a3b      	ldr	r3, [r7, #32]
 801477a:	68db      	ldr	r3, [r3, #12]
 801477c:	685b      	ldr	r3, [r3, #4]
 801477e:	4618      	mov	r0, r3
 8014780:	f7f8 f925 	bl	800c9ce <lwip_htonl>
 8014784:	4603      	mov	r3, r0
 8014786:	3301      	adds	r3, #1
 8014788:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	1ad3      	subs	r3, r2, r3
 8014792:	2b00      	cmp	r3, #0
 8014794:	da02      	bge.n	801479c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	68fa      	ldr	r2, [r7, #12]
 801479a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801479c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80147a0:	2200      	movs	r2, #0
 80147a2:	69b9      	ldr	r1, [r7, #24]
 80147a4:	6878      	ldr	r0, [r7, #4]
 80147a6:	f7ff fdef 	bl	8014388 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80147aa:	687a      	ldr	r2, [r7, #4]
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	3304      	adds	r3, #4
 80147b0:	69b9      	ldr	r1, [r7, #24]
 80147b2:	6878      	ldr	r0, [r7, #4]
 80147b4:	f7ff fe26 	bl	8014404 <tcp_output_control_segment>
 80147b8:	4603      	mov	r3, r0
 80147ba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80147bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80147c0:	4618      	mov	r0, r3
 80147c2:	372c      	adds	r7, #44	@ 0x2c
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd90      	pop	{r4, r7, pc}
 80147c8:	0801b480 	.word	0x0801b480
 80147cc:	0801bc78 	.word	0x0801bc78
 80147d0:	0801b4d4 	.word	0x0801b4d4

080147d4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b082      	sub	sp, #8
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80147dc:	f7f9 ffda 	bl	800e794 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80147e0:	4b0a      	ldr	r3, [pc, #40]	@ (801480c <tcpip_tcp_timer+0x38>)
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d103      	bne.n	80147f0 <tcpip_tcp_timer+0x1c>
 80147e8:	4b09      	ldr	r3, [pc, #36]	@ (8014810 <tcpip_tcp_timer+0x3c>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d005      	beq.n	80147fc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80147f0:	2200      	movs	r2, #0
 80147f2:	4908      	ldr	r1, [pc, #32]	@ (8014814 <tcpip_tcp_timer+0x40>)
 80147f4:	20fa      	movs	r0, #250	@ 0xfa
 80147f6:	f000 f8f3 	bl	80149e0 <sys_timeout>
 80147fa:	e003      	b.n	8014804 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80147fc:	4b06      	ldr	r3, [pc, #24]	@ (8014818 <tcpip_tcp_timer+0x44>)
 80147fe:	2200      	movs	r2, #0
 8014800:	601a      	str	r2, [r3, #0]
  }
}
 8014802:	bf00      	nop
 8014804:	bf00      	nop
 8014806:	3708      	adds	r7, #8
 8014808:	46bd      	mov	sp, r7
 801480a:	bd80      	pop	{r7, pc}
 801480c:	20010004 	.word	0x20010004
 8014810:	20010008 	.word	0x20010008
 8014814:	080147d5 	.word	0x080147d5
 8014818:	20010050 	.word	0x20010050

0801481c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014820:	4b0a      	ldr	r3, [pc, #40]	@ (801484c <tcp_timer_needed+0x30>)
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d10f      	bne.n	8014848 <tcp_timer_needed+0x2c>
 8014828:	4b09      	ldr	r3, [pc, #36]	@ (8014850 <tcp_timer_needed+0x34>)
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d103      	bne.n	8014838 <tcp_timer_needed+0x1c>
 8014830:	4b08      	ldr	r3, [pc, #32]	@ (8014854 <tcp_timer_needed+0x38>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d007      	beq.n	8014848 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014838:	4b04      	ldr	r3, [pc, #16]	@ (801484c <tcp_timer_needed+0x30>)
 801483a:	2201      	movs	r2, #1
 801483c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801483e:	2200      	movs	r2, #0
 8014840:	4905      	ldr	r1, [pc, #20]	@ (8014858 <tcp_timer_needed+0x3c>)
 8014842:	20fa      	movs	r0, #250	@ 0xfa
 8014844:	f000 f8cc 	bl	80149e0 <sys_timeout>
  }
}
 8014848:	bf00      	nop
 801484a:	bd80      	pop	{r7, pc}
 801484c:	20010050 	.word	0x20010050
 8014850:	20010004 	.word	0x20010004
 8014854:	20010008 	.word	0x20010008
 8014858:	080147d5 	.word	0x080147d5

0801485c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b086      	sub	sp, #24
 8014860:	af00      	add	r7, sp, #0
 8014862:	60f8      	str	r0, [r7, #12]
 8014864:	60b9      	str	r1, [r7, #8]
 8014866:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014868:	200a      	movs	r0, #10
 801486a:	f7f8 fd73 	bl	800d354 <memp_malloc>
 801486e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014870:	693b      	ldr	r3, [r7, #16]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d109      	bne.n	801488a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d151      	bne.n	8014920 <sys_timeout_abs+0xc4>
 801487c:	4b2a      	ldr	r3, [pc, #168]	@ (8014928 <sys_timeout_abs+0xcc>)
 801487e:	22be      	movs	r2, #190	@ 0xbe
 8014880:	492a      	ldr	r1, [pc, #168]	@ (801492c <sys_timeout_abs+0xd0>)
 8014882:	482b      	ldr	r0, [pc, #172]	@ (8014930 <sys_timeout_abs+0xd4>)
 8014884:	f003 f9ec 	bl	8017c60 <iprintf>
    return;
 8014888:	e04a      	b.n	8014920 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801488a:	693b      	ldr	r3, [r7, #16]
 801488c:	2200      	movs	r2, #0
 801488e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014890:	693b      	ldr	r3, [r7, #16]
 8014892:	68ba      	ldr	r2, [r7, #8]
 8014894:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014896:	693b      	ldr	r3, [r7, #16]
 8014898:	687a      	ldr	r2, [r7, #4]
 801489a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801489c:	693b      	ldr	r3, [r7, #16]
 801489e:	68fa      	ldr	r2, [r7, #12]
 80148a0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80148a2:	4b24      	ldr	r3, [pc, #144]	@ (8014934 <sys_timeout_abs+0xd8>)
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d103      	bne.n	80148b2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80148aa:	4a22      	ldr	r2, [pc, #136]	@ (8014934 <sys_timeout_abs+0xd8>)
 80148ac:	693b      	ldr	r3, [r7, #16]
 80148ae:	6013      	str	r3, [r2, #0]
    return;
 80148b0:	e037      	b.n	8014922 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80148b2:	693b      	ldr	r3, [r7, #16]
 80148b4:	685a      	ldr	r2, [r3, #4]
 80148b6:	4b1f      	ldr	r3, [pc, #124]	@ (8014934 <sys_timeout_abs+0xd8>)
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	685b      	ldr	r3, [r3, #4]
 80148bc:	1ad3      	subs	r3, r2, r3
 80148be:	0fdb      	lsrs	r3, r3, #31
 80148c0:	f003 0301 	and.w	r3, r3, #1
 80148c4:	b2db      	uxtb	r3, r3
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d007      	beq.n	80148da <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80148ca:	4b1a      	ldr	r3, [pc, #104]	@ (8014934 <sys_timeout_abs+0xd8>)
 80148cc:	681a      	ldr	r2, [r3, #0]
 80148ce:	693b      	ldr	r3, [r7, #16]
 80148d0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80148d2:	4a18      	ldr	r2, [pc, #96]	@ (8014934 <sys_timeout_abs+0xd8>)
 80148d4:	693b      	ldr	r3, [r7, #16]
 80148d6:	6013      	str	r3, [r2, #0]
 80148d8:	e023      	b.n	8014922 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80148da:	4b16      	ldr	r3, [pc, #88]	@ (8014934 <sys_timeout_abs+0xd8>)
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	617b      	str	r3, [r7, #20]
 80148e0:	e01a      	b.n	8014918 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80148e2:	697b      	ldr	r3, [r7, #20]
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d00b      	beq.n	8014902 <sys_timeout_abs+0xa6>
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	685a      	ldr	r2, [r3, #4]
 80148ee:	697b      	ldr	r3, [r7, #20]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	685b      	ldr	r3, [r3, #4]
 80148f4:	1ad3      	subs	r3, r2, r3
 80148f6:	0fdb      	lsrs	r3, r3, #31
 80148f8:	f003 0301 	and.w	r3, r3, #1
 80148fc:	b2db      	uxtb	r3, r3
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d007      	beq.n	8014912 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014902:	697b      	ldr	r3, [r7, #20]
 8014904:	681a      	ldr	r2, [r3, #0]
 8014906:	693b      	ldr	r3, [r7, #16]
 8014908:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801490a:	697b      	ldr	r3, [r7, #20]
 801490c:	693a      	ldr	r2, [r7, #16]
 801490e:	601a      	str	r2, [r3, #0]
        break;
 8014910:	e007      	b.n	8014922 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014912:	697b      	ldr	r3, [r7, #20]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	617b      	str	r3, [r7, #20]
 8014918:	697b      	ldr	r3, [r7, #20]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d1e1      	bne.n	80148e2 <sys_timeout_abs+0x86>
 801491e:	e000      	b.n	8014922 <sys_timeout_abs+0xc6>
    return;
 8014920:	bf00      	nop
      }
    }
  }
}
 8014922:	3718      	adds	r7, #24
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}
 8014928:	0801bc9c 	.word	0x0801bc9c
 801492c:	0801bcd0 	.word	0x0801bcd0
 8014930:	0801bd10 	.word	0x0801bd10
 8014934:	20010048 	.word	0x20010048

08014938 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b086      	sub	sp, #24
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014944:	697b      	ldr	r3, [r7, #20]
 8014946:	685b      	ldr	r3, [r3, #4]
 8014948:	4798      	blx	r3

  now = sys_now();
 801494a:	f7f2 facf 	bl	8006eec <sys_now>
 801494e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014950:	697b      	ldr	r3, [r7, #20]
 8014952:	681a      	ldr	r2, [r3, #0]
 8014954:	4b0f      	ldr	r3, [pc, #60]	@ (8014994 <lwip_cyclic_timer+0x5c>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	4413      	add	r3, r2
 801495a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801495c:	68fa      	ldr	r2, [r7, #12]
 801495e:	693b      	ldr	r3, [r7, #16]
 8014960:	1ad3      	subs	r3, r2, r3
 8014962:	0fdb      	lsrs	r3, r3, #31
 8014964:	f003 0301 	and.w	r3, r3, #1
 8014968:	b2db      	uxtb	r3, r3
 801496a:	2b00      	cmp	r3, #0
 801496c:	d009      	beq.n	8014982 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801496e:	697b      	ldr	r3, [r7, #20]
 8014970:	681a      	ldr	r2, [r3, #0]
 8014972:	693b      	ldr	r3, [r7, #16]
 8014974:	4413      	add	r3, r2
 8014976:	687a      	ldr	r2, [r7, #4]
 8014978:	4907      	ldr	r1, [pc, #28]	@ (8014998 <lwip_cyclic_timer+0x60>)
 801497a:	4618      	mov	r0, r3
 801497c:	f7ff ff6e 	bl	801485c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014980:	e004      	b.n	801498c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014982:	687a      	ldr	r2, [r7, #4]
 8014984:	4904      	ldr	r1, [pc, #16]	@ (8014998 <lwip_cyclic_timer+0x60>)
 8014986:	68f8      	ldr	r0, [r7, #12]
 8014988:	f7ff ff68 	bl	801485c <sys_timeout_abs>
}
 801498c:	bf00      	nop
 801498e:	3718      	adds	r7, #24
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}
 8014994:	2001004c 	.word	0x2001004c
 8014998:	08014939 	.word	0x08014939

0801499c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b082      	sub	sp, #8
 80149a0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80149a2:	2301      	movs	r3, #1
 80149a4:	607b      	str	r3, [r7, #4]
 80149a6:	e00e      	b.n	80149c6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80149a8:	4a0b      	ldr	r2, [pc, #44]	@ (80149d8 <sys_timeouts_init+0x3c>)
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	00db      	lsls	r3, r3, #3
 80149b4:	4a08      	ldr	r2, [pc, #32]	@ (80149d8 <sys_timeouts_init+0x3c>)
 80149b6:	4413      	add	r3, r2
 80149b8:	461a      	mov	r2, r3
 80149ba:	4908      	ldr	r1, [pc, #32]	@ (80149dc <sys_timeouts_init+0x40>)
 80149bc:	f000 f810 	bl	80149e0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	3301      	adds	r3, #1
 80149c4:	607b      	str	r3, [r7, #4]
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2b02      	cmp	r3, #2
 80149ca:	d9ed      	bls.n	80149a8 <sys_timeouts_init+0xc>
  }
}
 80149cc:	bf00      	nop
 80149ce:	bf00      	nop
 80149d0:	3708      	adds	r7, #8
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}
 80149d6:	bf00      	nop
 80149d8:	0801c8cc 	.word	0x0801c8cc
 80149dc:	08014939 	.word	0x08014939

080149e0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b086      	sub	sp, #24
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	60f8      	str	r0, [r7, #12]
 80149e8:	60b9      	str	r1, [r7, #8]
 80149ea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80149f2:	d306      	bcc.n	8014a02 <sys_timeout+0x22>
 80149f4:	4b0a      	ldr	r3, [pc, #40]	@ (8014a20 <sys_timeout+0x40>)
 80149f6:	f240 1229 	movw	r2, #297	@ 0x129
 80149fa:	490a      	ldr	r1, [pc, #40]	@ (8014a24 <sys_timeout+0x44>)
 80149fc:	480a      	ldr	r0, [pc, #40]	@ (8014a28 <sys_timeout+0x48>)
 80149fe:	f003 f92f 	bl	8017c60 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014a02:	f7f2 fa73 	bl	8006eec <sys_now>
 8014a06:	4602      	mov	r2, r0
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	4413      	add	r3, r2
 8014a0c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014a0e:	687a      	ldr	r2, [r7, #4]
 8014a10:	68b9      	ldr	r1, [r7, #8]
 8014a12:	6978      	ldr	r0, [r7, #20]
 8014a14:	f7ff ff22 	bl	801485c <sys_timeout_abs>
#endif
}
 8014a18:	bf00      	nop
 8014a1a:	3718      	adds	r7, #24
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	bd80      	pop	{r7, pc}
 8014a20:	0801bc9c 	.word	0x0801bc9c
 8014a24:	0801bd38 	.word	0x0801bd38
 8014a28:	0801bd10 	.word	0x0801bd10

08014a2c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b084      	sub	sp, #16
 8014a30:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014a32:	f7f2 fa5b 	bl	8006eec <sys_now>
 8014a36:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014a38:	4b17      	ldr	r3, [pc, #92]	@ (8014a98 <sys_check_timeouts+0x6c>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d022      	beq.n	8014a8a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	685b      	ldr	r3, [r3, #4]
 8014a48:	68fa      	ldr	r2, [r7, #12]
 8014a4a:	1ad3      	subs	r3, r2, r3
 8014a4c:	0fdb      	lsrs	r3, r3, #31
 8014a4e:	f003 0301 	and.w	r3, r3, #1
 8014a52:	b2db      	uxtb	r3, r3
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d11a      	bne.n	8014a8e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014a58:	68bb      	ldr	r3, [r7, #8]
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	4a0e      	ldr	r2, [pc, #56]	@ (8014a98 <sys_check_timeouts+0x6c>)
 8014a5e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014a60:	68bb      	ldr	r3, [r7, #8]
 8014a62:	689b      	ldr	r3, [r3, #8]
 8014a64:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	68db      	ldr	r3, [r3, #12]
 8014a6a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014a6c:	68bb      	ldr	r3, [r7, #8]
 8014a6e:	685b      	ldr	r3, [r3, #4]
 8014a70:	4a0a      	ldr	r2, [pc, #40]	@ (8014a9c <sys_check_timeouts+0x70>)
 8014a72:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014a74:	68b9      	ldr	r1, [r7, #8]
 8014a76:	200a      	movs	r0, #10
 8014a78:	f7f8 fce2 	bl	800d440 <memp_free>
    if (handler != NULL) {
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d0da      	beq.n	8014a38 <sys_check_timeouts+0xc>
      handler(arg);
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	6838      	ldr	r0, [r7, #0]
 8014a86:	4798      	blx	r3
  do {
 8014a88:	e7d6      	b.n	8014a38 <sys_check_timeouts+0xc>
      return;
 8014a8a:	bf00      	nop
 8014a8c:	e000      	b.n	8014a90 <sys_check_timeouts+0x64>
      return;
 8014a8e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014a90:	3710      	adds	r7, #16
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}
 8014a96:	bf00      	nop
 8014a98:	20010048 	.word	0x20010048
 8014a9c:	2001004c 	.word	0x2001004c

08014aa0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b082      	sub	sp, #8
 8014aa4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014aa6:	4b16      	ldr	r3, [pc, #88]	@ (8014b00 <sys_timeouts_sleeptime+0x60>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d102      	bne.n	8014ab4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014aae:	f04f 33ff 	mov.w	r3, #4294967295
 8014ab2:	e020      	b.n	8014af6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014ab4:	f7f2 fa1a 	bl	8006eec <sys_now>
 8014ab8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014aba:	4b11      	ldr	r3, [pc, #68]	@ (8014b00 <sys_timeouts_sleeptime+0x60>)
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	685a      	ldr	r2, [r3, #4]
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	1ad3      	subs	r3, r2, r3
 8014ac4:	0fdb      	lsrs	r3, r3, #31
 8014ac6:	f003 0301 	and.w	r3, r3, #1
 8014aca:	b2db      	uxtb	r3, r3
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d001      	beq.n	8014ad4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	e010      	b.n	8014af6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8014b00 <sys_timeouts_sleeptime+0x60>)
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	685a      	ldr	r2, [r3, #4]
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	1ad3      	subs	r3, r2, r3
 8014ade:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014ae0:	683b      	ldr	r3, [r7, #0]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	da06      	bge.n	8014af4 <sys_timeouts_sleeptime+0x54>
 8014ae6:	4b07      	ldr	r3, [pc, #28]	@ (8014b04 <sys_timeouts_sleeptime+0x64>)
 8014ae8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8014aec:	4906      	ldr	r1, [pc, #24]	@ (8014b08 <sys_timeouts_sleeptime+0x68>)
 8014aee:	4807      	ldr	r0, [pc, #28]	@ (8014b0c <sys_timeouts_sleeptime+0x6c>)
 8014af0:	f003 f8b6 	bl	8017c60 <iprintf>
    return ret;
 8014af4:	683b      	ldr	r3, [r7, #0]
  }
}
 8014af6:	4618      	mov	r0, r3
 8014af8:	3708      	adds	r7, #8
 8014afa:	46bd      	mov	sp, r7
 8014afc:	bd80      	pop	{r7, pc}
 8014afe:	bf00      	nop
 8014b00:	20010048 	.word	0x20010048
 8014b04:	0801bc9c 	.word	0x0801bc9c
 8014b08:	0801bd70 	.word	0x0801bd70
 8014b0c:	0801bd10 	.word	0x0801bd10

08014b10 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014b14:	f002 ffa4 	bl	8017a60 <rand>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	b29b      	uxth	r3, r3
 8014b1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014b20:	b29b      	uxth	r3, r3
 8014b22:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014b26:	b29a      	uxth	r2, r3
 8014b28:	4b01      	ldr	r3, [pc, #4]	@ (8014b30 <udp_init+0x20>)
 8014b2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014b2c:	bf00      	nop
 8014b2e:	bd80      	pop	{r7, pc}
 8014b30:	2000002c 	.word	0x2000002c

08014b34 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014b34:	b480      	push	{r7}
 8014b36:	b083      	sub	sp, #12
 8014b38:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014b3e:	4b17      	ldr	r3, [pc, #92]	@ (8014b9c <udp_new_port+0x68>)
 8014b40:	881b      	ldrh	r3, [r3, #0]
 8014b42:	1c5a      	adds	r2, r3, #1
 8014b44:	b291      	uxth	r1, r2
 8014b46:	4a15      	ldr	r2, [pc, #84]	@ (8014b9c <udp_new_port+0x68>)
 8014b48:	8011      	strh	r1, [r2, #0]
 8014b4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014b4e:	4293      	cmp	r3, r2
 8014b50:	d103      	bne.n	8014b5a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014b52:	4b12      	ldr	r3, [pc, #72]	@ (8014b9c <udp_new_port+0x68>)
 8014b54:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8014b58:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b5a:	4b11      	ldr	r3, [pc, #68]	@ (8014ba0 <udp_new_port+0x6c>)
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	603b      	str	r3, [r7, #0]
 8014b60:	e011      	b.n	8014b86 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014b62:	683b      	ldr	r3, [r7, #0]
 8014b64:	8a5a      	ldrh	r2, [r3, #18]
 8014b66:	4b0d      	ldr	r3, [pc, #52]	@ (8014b9c <udp_new_port+0x68>)
 8014b68:	881b      	ldrh	r3, [r3, #0]
 8014b6a:	429a      	cmp	r2, r3
 8014b6c:	d108      	bne.n	8014b80 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014b6e:	88fb      	ldrh	r3, [r7, #6]
 8014b70:	3301      	adds	r3, #1
 8014b72:	80fb      	strh	r3, [r7, #6]
 8014b74:	88fb      	ldrh	r3, [r7, #6]
 8014b76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014b7a:	d3e0      	bcc.n	8014b3e <udp_new_port+0xa>
        return 0;
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	e007      	b.n	8014b90 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	68db      	ldr	r3, [r3, #12]
 8014b84:	603b      	str	r3, [r7, #0]
 8014b86:	683b      	ldr	r3, [r7, #0]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d1ea      	bne.n	8014b62 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014b8c:	4b03      	ldr	r3, [pc, #12]	@ (8014b9c <udp_new_port+0x68>)
 8014b8e:	881b      	ldrh	r3, [r3, #0]
}
 8014b90:	4618      	mov	r0, r3
 8014b92:	370c      	adds	r7, #12
 8014b94:	46bd      	mov	sp, r7
 8014b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9a:	4770      	bx	lr
 8014b9c:	2000002c 	.word	0x2000002c
 8014ba0:	20010054 	.word	0x20010054

08014ba4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b084      	sub	sp, #16
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	60f8      	str	r0, [r7, #12]
 8014bac:	60b9      	str	r1, [r7, #8]
 8014bae:	4613      	mov	r3, r2
 8014bb0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d105      	bne.n	8014bc4 <udp_input_local_match+0x20>
 8014bb8:	4b27      	ldr	r3, [pc, #156]	@ (8014c58 <udp_input_local_match+0xb4>)
 8014bba:	2287      	movs	r2, #135	@ 0x87
 8014bbc:	4927      	ldr	r1, [pc, #156]	@ (8014c5c <udp_input_local_match+0xb8>)
 8014bbe:	4828      	ldr	r0, [pc, #160]	@ (8014c60 <udp_input_local_match+0xbc>)
 8014bc0:	f003 f84e 	bl	8017c60 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014bc4:	68bb      	ldr	r3, [r7, #8]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d105      	bne.n	8014bd6 <udp_input_local_match+0x32>
 8014bca:	4b23      	ldr	r3, [pc, #140]	@ (8014c58 <udp_input_local_match+0xb4>)
 8014bcc:	2288      	movs	r2, #136	@ 0x88
 8014bce:	4925      	ldr	r1, [pc, #148]	@ (8014c64 <udp_input_local_match+0xc0>)
 8014bd0:	4823      	ldr	r0, [pc, #140]	@ (8014c60 <udp_input_local_match+0xbc>)
 8014bd2:	f003 f845 	bl	8017c60 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	7a1b      	ldrb	r3, [r3, #8]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d00b      	beq.n	8014bf6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	7a1a      	ldrb	r2, [r3, #8]
 8014be2:	4b21      	ldr	r3, [pc, #132]	@ (8014c68 <udp_input_local_match+0xc4>)
 8014be4:	685b      	ldr	r3, [r3, #4]
 8014be6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014bea:	3301      	adds	r3, #1
 8014bec:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014bee:	429a      	cmp	r2, r3
 8014bf0:	d001      	beq.n	8014bf6 <udp_input_local_match+0x52>
    return 0;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	e02b      	b.n	8014c4e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014bf6:	79fb      	ldrb	r3, [r7, #7]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d018      	beq.n	8014c2e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d013      	beq.n	8014c2a <udp_input_local_match+0x86>
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d00f      	beq.n	8014c2a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014c0a:	4b17      	ldr	r3, [pc, #92]	@ (8014c68 <udp_input_local_match+0xc4>)
 8014c0c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c12:	d00a      	beq.n	8014c2a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	681a      	ldr	r2, [r3, #0]
 8014c18:	4b13      	ldr	r3, [pc, #76]	@ (8014c68 <udp_input_local_match+0xc4>)
 8014c1a:	695b      	ldr	r3, [r3, #20]
 8014c1c:	405a      	eors	r2, r3
 8014c1e:	68bb      	ldr	r3, [r7, #8]
 8014c20:	3308      	adds	r3, #8
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d110      	bne.n	8014c4c <udp_input_local_match+0xa8>
          return 1;
 8014c2a:	2301      	movs	r3, #1
 8014c2c:	e00f      	b.n	8014c4e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d009      	beq.n	8014c48 <udp_input_local_match+0xa4>
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d005      	beq.n	8014c48 <udp_input_local_match+0xa4>
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	681a      	ldr	r2, [r3, #0]
 8014c40:	4b09      	ldr	r3, [pc, #36]	@ (8014c68 <udp_input_local_match+0xc4>)
 8014c42:	695b      	ldr	r3, [r3, #20]
 8014c44:	429a      	cmp	r2, r3
 8014c46:	d101      	bne.n	8014c4c <udp_input_local_match+0xa8>
        return 1;
 8014c48:	2301      	movs	r3, #1
 8014c4a:	e000      	b.n	8014c4e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014c4c:	2300      	movs	r3, #0
}
 8014c4e:	4618      	mov	r0, r3
 8014c50:	3710      	adds	r7, #16
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}
 8014c56:	bf00      	nop
 8014c58:	0801bd84 	.word	0x0801bd84
 8014c5c:	0801bdb4 	.word	0x0801bdb4
 8014c60:	0801bdd8 	.word	0x0801bdd8
 8014c64:	0801be00 	.word	0x0801be00
 8014c68:	2000a6ac 	.word	0x2000a6ac

08014c6c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014c6c:	b590      	push	{r4, r7, lr}
 8014c6e:	b08d      	sub	sp, #52	@ 0x34
 8014c70:	af02      	add	r7, sp, #8
 8014c72:	6078      	str	r0, [r7, #4]
 8014c74:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014c76:	2300      	movs	r3, #0
 8014c78:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d105      	bne.n	8014c8c <udp_input+0x20>
 8014c80:	4b7c      	ldr	r3, [pc, #496]	@ (8014e74 <udp_input+0x208>)
 8014c82:	22cf      	movs	r2, #207	@ 0xcf
 8014c84:	497c      	ldr	r1, [pc, #496]	@ (8014e78 <udp_input+0x20c>)
 8014c86:	487d      	ldr	r0, [pc, #500]	@ (8014e7c <udp_input+0x210>)
 8014c88:	f002 ffea 	bl	8017c60 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014c8c:	683b      	ldr	r3, [r7, #0]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d105      	bne.n	8014c9e <udp_input+0x32>
 8014c92:	4b78      	ldr	r3, [pc, #480]	@ (8014e74 <udp_input+0x208>)
 8014c94:	22d0      	movs	r2, #208	@ 0xd0
 8014c96:	497a      	ldr	r1, [pc, #488]	@ (8014e80 <udp_input+0x214>)
 8014c98:	4878      	ldr	r0, [pc, #480]	@ (8014e7c <udp_input+0x210>)
 8014c9a:	f002 ffe1 	bl	8017c60 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	895b      	ldrh	r3, [r3, #10]
 8014ca2:	2b07      	cmp	r3, #7
 8014ca4:	d803      	bhi.n	8014cae <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014ca6:	6878      	ldr	r0, [r7, #4]
 8014ca8:	f7f9 fa6e 	bl	800e188 <pbuf_free>
    goto end;
 8014cac:	e0de      	b.n	8014e6c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	685b      	ldr	r3, [r3, #4]
 8014cb2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014cb4:	4b73      	ldr	r3, [pc, #460]	@ (8014e84 <udp_input+0x218>)
 8014cb6:	695b      	ldr	r3, [r3, #20]
 8014cb8:	4a72      	ldr	r2, [pc, #456]	@ (8014e84 <udp_input+0x218>)
 8014cba:	6812      	ldr	r2, [r2, #0]
 8014cbc:	4611      	mov	r1, r2
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	f001 fd96 	bl	80167f0 <ip4_addr_isbroadcast_u32>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	881b      	ldrh	r3, [r3, #0]
 8014ccc:	b29b      	uxth	r3, r3
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f7f7 fe68 	bl	800c9a4 <lwip_htons>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014cd8:	697b      	ldr	r3, [r7, #20]
 8014cda:	885b      	ldrh	r3, [r3, #2]
 8014cdc:	b29b      	uxth	r3, r3
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f7f7 fe60 	bl	800c9a4 <lwip_htons>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014ce8:	2300      	movs	r3, #0
 8014cea:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8014cec:	2300      	movs	r3, #0
 8014cee:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014cf4:	4b64      	ldr	r3, [pc, #400]	@ (8014e88 <udp_input+0x21c>)
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8014cfa:	e054      	b.n	8014da6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cfe:	8a5b      	ldrh	r3, [r3, #18]
 8014d00:	89fa      	ldrh	r2, [r7, #14]
 8014d02:	429a      	cmp	r2, r3
 8014d04:	d14a      	bne.n	8014d9c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014d06:	7cfb      	ldrb	r3, [r7, #19]
 8014d08:	461a      	mov	r2, r3
 8014d0a:	6839      	ldr	r1, [r7, #0]
 8014d0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014d0e:	f7ff ff49 	bl	8014ba4 <udp_input_local_match>
 8014d12:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d041      	beq.n	8014d9c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d1a:	7c1b      	ldrb	r3, [r3, #16]
 8014d1c:	f003 0304 	and.w	r3, r3, #4
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d11d      	bne.n	8014d60 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014d24:	69fb      	ldr	r3, [r7, #28]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d102      	bne.n	8014d30 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d2c:	61fb      	str	r3, [r7, #28]
 8014d2e:	e017      	b.n	8014d60 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014d30:	7cfb      	ldrb	r3, [r7, #19]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d014      	beq.n	8014d60 <udp_input+0xf4>
 8014d36:	4b53      	ldr	r3, [pc, #332]	@ (8014e84 <udp_input+0x218>)
 8014d38:	695b      	ldr	r3, [r3, #20]
 8014d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d3e:	d10f      	bne.n	8014d60 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014d40:	69fb      	ldr	r3, [r7, #28]
 8014d42:	681a      	ldr	r2, [r3, #0]
 8014d44:	683b      	ldr	r3, [r7, #0]
 8014d46:	3304      	adds	r3, #4
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d008      	beq.n	8014d60 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d50:	681a      	ldr	r2, [r3, #0]
 8014d52:	683b      	ldr	r3, [r7, #0]
 8014d54:	3304      	adds	r3, #4
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	429a      	cmp	r2, r3
 8014d5a:	d101      	bne.n	8014d60 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d5e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d62:	8a9b      	ldrh	r3, [r3, #20]
 8014d64:	8a3a      	ldrh	r2, [r7, #16]
 8014d66:	429a      	cmp	r2, r3
 8014d68:	d118      	bne.n	8014d9c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d6c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d005      	beq.n	8014d7e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d74:	685a      	ldr	r2, [r3, #4]
 8014d76:	4b43      	ldr	r3, [pc, #268]	@ (8014e84 <udp_input+0x218>)
 8014d78:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	d10e      	bne.n	8014d9c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014d7e:	6a3b      	ldr	r3, [r7, #32]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d014      	beq.n	8014dae <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d86:	68da      	ldr	r2, [r3, #12]
 8014d88:	6a3b      	ldr	r3, [r7, #32]
 8014d8a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8014e88 <udp_input+0x21c>)
 8014d8e:	681a      	ldr	r2, [r3, #0]
 8014d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d92:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014d94:	4a3c      	ldr	r2, [pc, #240]	@ (8014e88 <udp_input+0x21c>)
 8014d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d98:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014d9a:	e008      	b.n	8014dae <udp_input+0x142>
      }
    }

    prev = pcb;
 8014d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d9e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014da2:	68db      	ldr	r3, [r3, #12]
 8014da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8014da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d1a7      	bne.n	8014cfc <udp_input+0x90>
 8014dac:	e000      	b.n	8014db0 <udp_input+0x144>
        break;
 8014dae:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d101      	bne.n	8014dba <udp_input+0x14e>
    pcb = uncon_pcb;
 8014db6:	69fb      	ldr	r3, [r7, #28]
 8014db8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d002      	beq.n	8014dc6 <udp_input+0x15a>
    for_us = 1;
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	76fb      	strb	r3, [r7, #27]
 8014dc4:	e00a      	b.n	8014ddc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	3304      	adds	r3, #4
 8014dca:	681a      	ldr	r2, [r3, #0]
 8014dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8014e84 <udp_input+0x218>)
 8014dce:	695b      	ldr	r3, [r3, #20]
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	bf0c      	ite	eq
 8014dd4:	2301      	moveq	r3, #1
 8014dd6:	2300      	movne	r3, #0
 8014dd8:	b2db      	uxtb	r3, r3
 8014dda:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014ddc:	7efb      	ldrb	r3, [r7, #27]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d041      	beq.n	8014e66 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014de2:	2108      	movs	r1, #8
 8014de4:	6878      	ldr	r0, [r7, #4]
 8014de6:	f7f9 f949 	bl	800e07c <pbuf_remove_header>
 8014dea:	4603      	mov	r3, r0
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d00a      	beq.n	8014e06 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014df0:	4b20      	ldr	r3, [pc, #128]	@ (8014e74 <udp_input+0x208>)
 8014df2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8014df6:	4925      	ldr	r1, [pc, #148]	@ (8014e8c <udp_input+0x220>)
 8014df8:	4820      	ldr	r0, [pc, #128]	@ (8014e7c <udp_input+0x210>)
 8014dfa:	f002 ff31 	bl	8017c60 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014dfe:	6878      	ldr	r0, [r7, #4]
 8014e00:	f7f9 f9c2 	bl	800e188 <pbuf_free>
      goto end;
 8014e04:	e032      	b.n	8014e6c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d012      	beq.n	8014e32 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e0e:	699b      	ldr	r3, [r3, #24]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d00a      	beq.n	8014e2a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e16:	699c      	ldr	r4, [r3, #24]
 8014e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e1a:	69d8      	ldr	r0, [r3, #28]
 8014e1c:	8a3b      	ldrh	r3, [r7, #16]
 8014e1e:	9300      	str	r3, [sp, #0]
 8014e20:	4b1b      	ldr	r3, [pc, #108]	@ (8014e90 <udp_input+0x224>)
 8014e22:	687a      	ldr	r2, [r7, #4]
 8014e24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014e26:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014e28:	e021      	b.n	8014e6e <udp_input+0x202>
        pbuf_free(p);
 8014e2a:	6878      	ldr	r0, [r7, #4]
 8014e2c:	f7f9 f9ac 	bl	800e188 <pbuf_free>
        goto end;
 8014e30:	e01c      	b.n	8014e6c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014e32:	7cfb      	ldrb	r3, [r7, #19]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d112      	bne.n	8014e5e <udp_input+0x1f2>
 8014e38:	4b12      	ldr	r3, [pc, #72]	@ (8014e84 <udp_input+0x218>)
 8014e3a:	695b      	ldr	r3, [r3, #20]
 8014e3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014e40:	2be0      	cmp	r3, #224	@ 0xe0
 8014e42:	d00c      	beq.n	8014e5e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014e44:	4b0f      	ldr	r3, [pc, #60]	@ (8014e84 <udp_input+0x218>)
 8014e46:	899b      	ldrh	r3, [r3, #12]
 8014e48:	3308      	adds	r3, #8
 8014e4a:	b29b      	uxth	r3, r3
 8014e4c:	b21b      	sxth	r3, r3
 8014e4e:	4619      	mov	r1, r3
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f7f9 f986 	bl	800e162 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014e56:	2103      	movs	r1, #3
 8014e58:	6878      	ldr	r0, [r7, #4]
 8014e5a:	f001 f9a9 	bl	80161b0 <icmp_dest_unreach>
      pbuf_free(p);
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	f7f9 f992 	bl	800e188 <pbuf_free>
  return;
 8014e64:	e003      	b.n	8014e6e <udp_input+0x202>
    pbuf_free(p);
 8014e66:	6878      	ldr	r0, [r7, #4]
 8014e68:	f7f9 f98e 	bl	800e188 <pbuf_free>
  return;
 8014e6c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014e6e:	372c      	adds	r7, #44	@ 0x2c
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd90      	pop	{r4, r7, pc}
 8014e74:	0801bd84 	.word	0x0801bd84
 8014e78:	0801be28 	.word	0x0801be28
 8014e7c:	0801bdd8 	.word	0x0801bdd8
 8014e80:	0801be40 	.word	0x0801be40
 8014e84:	2000a6ac 	.word	0x2000a6ac
 8014e88:	20010054 	.word	0x20010054
 8014e8c:	0801be5c 	.word	0x0801be5c
 8014e90:	2000a6bc 	.word	0x2000a6bc

08014e94 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b086      	sub	sp, #24
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	60f8      	str	r0, [r7, #12]
 8014e9c:	60b9      	str	r1, [r7, #8]
 8014e9e:	4613      	mov	r3, r2
 8014ea0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014ea2:	68bb      	ldr	r3, [r7, #8]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d101      	bne.n	8014eac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014ea8:	4b39      	ldr	r3, [pc, #228]	@ (8014f90 <udp_bind+0xfc>)
 8014eaa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d109      	bne.n	8014ec6 <udp_bind+0x32>
 8014eb2:	4b38      	ldr	r3, [pc, #224]	@ (8014f94 <udp_bind+0x100>)
 8014eb4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8014eb8:	4937      	ldr	r1, [pc, #220]	@ (8014f98 <udp_bind+0x104>)
 8014eba:	4838      	ldr	r0, [pc, #224]	@ (8014f9c <udp_bind+0x108>)
 8014ebc:	f002 fed0 	bl	8017c60 <iprintf>
 8014ec0:	f06f 030f 	mvn.w	r3, #15
 8014ec4:	e060      	b.n	8014f88 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014eca:	4b35      	ldr	r3, [pc, #212]	@ (8014fa0 <udp_bind+0x10c>)
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	617b      	str	r3, [r7, #20]
 8014ed0:	e009      	b.n	8014ee6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014ed2:	68fa      	ldr	r2, [r7, #12]
 8014ed4:	697b      	ldr	r3, [r7, #20]
 8014ed6:	429a      	cmp	r2, r3
 8014ed8:	d102      	bne.n	8014ee0 <udp_bind+0x4c>
      rebind = 1;
 8014eda:	2301      	movs	r3, #1
 8014edc:	74fb      	strb	r3, [r7, #19]
      break;
 8014ede:	e005      	b.n	8014eec <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	68db      	ldr	r3, [r3, #12]
 8014ee4:	617b      	str	r3, [r7, #20]
 8014ee6:	697b      	ldr	r3, [r7, #20]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d1f2      	bne.n	8014ed2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014eec:	88fb      	ldrh	r3, [r7, #6]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d109      	bne.n	8014f06 <udp_bind+0x72>
    port = udp_new_port();
 8014ef2:	f7ff fe1f 	bl	8014b34 <udp_new_port>
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014efa:	88fb      	ldrh	r3, [r7, #6]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d12c      	bne.n	8014f5a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014f00:	f06f 0307 	mvn.w	r3, #7
 8014f04:	e040      	b.n	8014f88 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014f06:	4b26      	ldr	r3, [pc, #152]	@ (8014fa0 <udp_bind+0x10c>)
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	617b      	str	r3, [r7, #20]
 8014f0c:	e022      	b.n	8014f54 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014f0e:	68fa      	ldr	r2, [r7, #12]
 8014f10:	697b      	ldr	r3, [r7, #20]
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d01b      	beq.n	8014f4e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014f16:	697b      	ldr	r3, [r7, #20]
 8014f18:	8a5b      	ldrh	r3, [r3, #18]
 8014f1a:	88fa      	ldrh	r2, [r7, #6]
 8014f1c:	429a      	cmp	r2, r3
 8014f1e:	d116      	bne.n	8014f4e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	681a      	ldr	r2, [r3, #0]
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014f28:	429a      	cmp	r2, r3
 8014f2a:	d00d      	beq.n	8014f48 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d00a      	beq.n	8014f48 <udp_bind+0xb4>
 8014f32:	68bb      	ldr	r3, [r7, #8]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d006      	beq.n	8014f48 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014f3a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d003      	beq.n	8014f48 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014f40:	697b      	ldr	r3, [r7, #20]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d102      	bne.n	8014f4e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014f48:	f06f 0307 	mvn.w	r3, #7
 8014f4c:	e01c      	b.n	8014f88 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014f4e:	697b      	ldr	r3, [r7, #20]
 8014f50:	68db      	ldr	r3, [r3, #12]
 8014f52:	617b      	str	r3, [r7, #20]
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d1d9      	bne.n	8014f0e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014f5a:	68bb      	ldr	r3, [r7, #8]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d002      	beq.n	8014f66 <udp_bind+0xd2>
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	e000      	b.n	8014f68 <udp_bind+0xd4>
 8014f66:	2300      	movs	r3, #0
 8014f68:	68fa      	ldr	r2, [r7, #12]
 8014f6a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	88fa      	ldrh	r2, [r7, #6]
 8014f70:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014f72:	7cfb      	ldrb	r3, [r7, #19]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d106      	bne.n	8014f86 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014f78:	4b09      	ldr	r3, [pc, #36]	@ (8014fa0 <udp_bind+0x10c>)
 8014f7a:	681a      	ldr	r2, [r3, #0]
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014f80:	4a07      	ldr	r2, [pc, #28]	@ (8014fa0 <udp_bind+0x10c>)
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014f86:	2300      	movs	r3, #0
}
 8014f88:	4618      	mov	r0, r3
 8014f8a:	3718      	adds	r7, #24
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bd80      	pop	{r7, pc}
 8014f90:	0801c8e4 	.word	0x0801c8e4
 8014f94:	0801bd84 	.word	0x0801bd84
 8014f98:	0801c04c 	.word	0x0801c04c
 8014f9c:	0801bdd8 	.word	0x0801bdd8
 8014fa0:	20010054 	.word	0x20010054

08014fa4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b084      	sub	sp, #16
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	60f8      	str	r0, [r7, #12]
 8014fac:	60b9      	str	r1, [r7, #8]
 8014fae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d107      	bne.n	8014fc6 <udp_recv+0x22>
 8014fb6:	4b08      	ldr	r3, [pc, #32]	@ (8014fd8 <udp_recv+0x34>)
 8014fb8:	f240 428a 	movw	r2, #1162	@ 0x48a
 8014fbc:	4907      	ldr	r1, [pc, #28]	@ (8014fdc <udp_recv+0x38>)
 8014fbe:	4808      	ldr	r0, [pc, #32]	@ (8014fe0 <udp_recv+0x3c>)
 8014fc0:	f002 fe4e 	bl	8017c60 <iprintf>
 8014fc4:	e005      	b.n	8014fd2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	68ba      	ldr	r2, [r7, #8]
 8014fca:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	687a      	ldr	r2, [r7, #4]
 8014fd0:	61da      	str	r2, [r3, #28]
}
 8014fd2:	3710      	adds	r7, #16
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}
 8014fd8:	0801bd84 	.word	0x0801bd84
 8014fdc:	0801c0b8 	.word	0x0801c0b8
 8014fe0:	0801bdd8 	.word	0x0801bdd8

08014fe4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b084      	sub	sp, #16
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d107      	bne.n	8015002 <udp_remove+0x1e>
 8014ff2:	4b19      	ldr	r3, [pc, #100]	@ (8015058 <udp_remove+0x74>)
 8014ff4:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8014ff8:	4918      	ldr	r1, [pc, #96]	@ (801505c <udp_remove+0x78>)
 8014ffa:	4819      	ldr	r0, [pc, #100]	@ (8015060 <udp_remove+0x7c>)
 8014ffc:	f002 fe30 	bl	8017c60 <iprintf>
 8015000:	e026      	b.n	8015050 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015002:	4b18      	ldr	r3, [pc, #96]	@ (8015064 <udp_remove+0x80>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	687a      	ldr	r2, [r7, #4]
 8015008:	429a      	cmp	r2, r3
 801500a:	d105      	bne.n	8015018 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801500c:	4b15      	ldr	r3, [pc, #84]	@ (8015064 <udp_remove+0x80>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	68db      	ldr	r3, [r3, #12]
 8015012:	4a14      	ldr	r2, [pc, #80]	@ (8015064 <udp_remove+0x80>)
 8015014:	6013      	str	r3, [r2, #0]
 8015016:	e017      	b.n	8015048 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015018:	4b12      	ldr	r3, [pc, #72]	@ (8015064 <udp_remove+0x80>)
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	60fb      	str	r3, [r7, #12]
 801501e:	e010      	b.n	8015042 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	68db      	ldr	r3, [r3, #12]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d009      	beq.n	801503c <udp_remove+0x58>
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	68db      	ldr	r3, [r3, #12]
 801502c:	687a      	ldr	r2, [r7, #4]
 801502e:	429a      	cmp	r2, r3
 8015030:	d104      	bne.n	801503c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	68da      	ldr	r2, [r3, #12]
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	60da      	str	r2, [r3, #12]
        break;
 801503a:	e005      	b.n	8015048 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	68db      	ldr	r3, [r3, #12]
 8015040:	60fb      	str	r3, [r7, #12]
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d1eb      	bne.n	8015020 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015048:	6879      	ldr	r1, [r7, #4]
 801504a:	2000      	movs	r0, #0
 801504c:	f7f8 f9f8 	bl	800d440 <memp_free>
}
 8015050:	3710      	adds	r7, #16
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}
 8015056:	bf00      	nop
 8015058:	0801bd84 	.word	0x0801bd84
 801505c:	0801c0d0 	.word	0x0801c0d0
 8015060:	0801bdd8 	.word	0x0801bdd8
 8015064:	20010054 	.word	0x20010054

08015068 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b082      	sub	sp, #8
 801506c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801506e:	2000      	movs	r0, #0
 8015070:	f7f8 f970 	bl	800d354 <memp_malloc>
 8015074:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d007      	beq.n	801508c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801507c:	2220      	movs	r2, #32
 801507e:	2100      	movs	r1, #0
 8015080:	6878      	ldr	r0, [r7, #4]
 8015082:	f002 fe8c 	bl	8017d9e <memset>
    pcb->ttl = UDP_TTL;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	22ff      	movs	r2, #255	@ 0xff
 801508a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801508c:	687b      	ldr	r3, [r7, #4]
}
 801508e:	4618      	mov	r0, r3
 8015090:	3708      	adds	r7, #8
 8015092:	46bd      	mov	sp, r7
 8015094:	bd80      	pop	{r7, pc}

08015096 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8015096:	b580      	push	{r7, lr}
 8015098:	b084      	sub	sp, #16
 801509a:	af00      	add	r7, sp, #0
 801509c:	4603      	mov	r3, r0
 801509e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80150a0:	f7ff ffe2 	bl	8015068 <udp_new>
 80150a4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80150a6:	68fb      	ldr	r3, [r7, #12]
}
 80150a8:	4618      	mov	r0, r3
 80150aa:	3710      	adds	r7, #16
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd80      	pop	{r7, pc}

080150b0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80150b0:	b480      	push	{r7}
 80150b2:	b085      	sub	sp, #20
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
 80150b8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d01e      	beq.n	80150fe <udp_netif_ip_addr_changed+0x4e>
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d01a      	beq.n	80150fe <udp_netif_ip_addr_changed+0x4e>
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d017      	beq.n	80150fe <udp_netif_ip_addr_changed+0x4e>
 80150ce:	683b      	ldr	r3, [r7, #0]
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d013      	beq.n	80150fe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80150d6:	4b0d      	ldr	r3, [pc, #52]	@ (801510c <udp_netif_ip_addr_changed+0x5c>)
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	60fb      	str	r3, [r7, #12]
 80150dc:	e00c      	b.n	80150f8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	681a      	ldr	r2, [r3, #0]
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d103      	bne.n	80150f2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80150ea:	683b      	ldr	r3, [r7, #0]
 80150ec:	681a      	ldr	r2, [r3, #0]
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	68db      	ldr	r3, [r3, #12]
 80150f6:	60fb      	str	r3, [r7, #12]
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d1ef      	bne.n	80150de <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80150fe:	bf00      	nop
 8015100:	3714      	adds	r7, #20
 8015102:	46bd      	mov	sp, r7
 8015104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015108:	4770      	bx	lr
 801510a:	bf00      	nop
 801510c:	20010054 	.word	0x20010054

08015110 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b082      	sub	sp, #8
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015118:	4915      	ldr	r1, [pc, #84]	@ (8015170 <etharp_free_entry+0x60>)
 801511a:	687a      	ldr	r2, [r7, #4]
 801511c:	4613      	mov	r3, r2
 801511e:	005b      	lsls	r3, r3, #1
 8015120:	4413      	add	r3, r2
 8015122:	00db      	lsls	r3, r3, #3
 8015124:	440b      	add	r3, r1
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d013      	beq.n	8015154 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801512c:	4910      	ldr	r1, [pc, #64]	@ (8015170 <etharp_free_entry+0x60>)
 801512e:	687a      	ldr	r2, [r7, #4]
 8015130:	4613      	mov	r3, r2
 8015132:	005b      	lsls	r3, r3, #1
 8015134:	4413      	add	r3, r2
 8015136:	00db      	lsls	r3, r3, #3
 8015138:	440b      	add	r3, r1
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	4618      	mov	r0, r3
 801513e:	f7f9 f823 	bl	800e188 <pbuf_free>
    arp_table[i].q = NULL;
 8015142:	490b      	ldr	r1, [pc, #44]	@ (8015170 <etharp_free_entry+0x60>)
 8015144:	687a      	ldr	r2, [r7, #4]
 8015146:	4613      	mov	r3, r2
 8015148:	005b      	lsls	r3, r3, #1
 801514a:	4413      	add	r3, r2
 801514c:	00db      	lsls	r3, r3, #3
 801514e:	440b      	add	r3, r1
 8015150:	2200      	movs	r2, #0
 8015152:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015154:	4906      	ldr	r1, [pc, #24]	@ (8015170 <etharp_free_entry+0x60>)
 8015156:	687a      	ldr	r2, [r7, #4]
 8015158:	4613      	mov	r3, r2
 801515a:	005b      	lsls	r3, r3, #1
 801515c:	4413      	add	r3, r2
 801515e:	00db      	lsls	r3, r3, #3
 8015160:	440b      	add	r3, r1
 8015162:	3314      	adds	r3, #20
 8015164:	2200      	movs	r2, #0
 8015166:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015168:	bf00      	nop
 801516a:	3708      	adds	r7, #8
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}
 8015170:	20010058 	.word	0x20010058

08015174 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b082      	sub	sp, #8
 8015178:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801517a:	2300      	movs	r3, #0
 801517c:	607b      	str	r3, [r7, #4]
 801517e:	e096      	b.n	80152ae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015180:	494f      	ldr	r1, [pc, #316]	@ (80152c0 <etharp_tmr+0x14c>)
 8015182:	687a      	ldr	r2, [r7, #4]
 8015184:	4613      	mov	r3, r2
 8015186:	005b      	lsls	r3, r3, #1
 8015188:	4413      	add	r3, r2
 801518a:	00db      	lsls	r3, r3, #3
 801518c:	440b      	add	r3, r1
 801518e:	3314      	adds	r3, #20
 8015190:	781b      	ldrb	r3, [r3, #0]
 8015192:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015194:	78fb      	ldrb	r3, [r7, #3]
 8015196:	2b00      	cmp	r3, #0
 8015198:	f000 8086 	beq.w	80152a8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801519c:	4948      	ldr	r1, [pc, #288]	@ (80152c0 <etharp_tmr+0x14c>)
 801519e:	687a      	ldr	r2, [r7, #4]
 80151a0:	4613      	mov	r3, r2
 80151a2:	005b      	lsls	r3, r3, #1
 80151a4:	4413      	add	r3, r2
 80151a6:	00db      	lsls	r3, r3, #3
 80151a8:	440b      	add	r3, r1
 80151aa:	3312      	adds	r3, #18
 80151ac:	881b      	ldrh	r3, [r3, #0]
 80151ae:	3301      	adds	r3, #1
 80151b0:	b298      	uxth	r0, r3
 80151b2:	4943      	ldr	r1, [pc, #268]	@ (80152c0 <etharp_tmr+0x14c>)
 80151b4:	687a      	ldr	r2, [r7, #4]
 80151b6:	4613      	mov	r3, r2
 80151b8:	005b      	lsls	r3, r3, #1
 80151ba:	4413      	add	r3, r2
 80151bc:	00db      	lsls	r3, r3, #3
 80151be:	440b      	add	r3, r1
 80151c0:	3312      	adds	r3, #18
 80151c2:	4602      	mov	r2, r0
 80151c4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80151c6:	493e      	ldr	r1, [pc, #248]	@ (80152c0 <etharp_tmr+0x14c>)
 80151c8:	687a      	ldr	r2, [r7, #4]
 80151ca:	4613      	mov	r3, r2
 80151cc:	005b      	lsls	r3, r3, #1
 80151ce:	4413      	add	r3, r2
 80151d0:	00db      	lsls	r3, r3, #3
 80151d2:	440b      	add	r3, r1
 80151d4:	3312      	adds	r3, #18
 80151d6:	881b      	ldrh	r3, [r3, #0]
 80151d8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80151dc:	d215      	bcs.n	801520a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80151de:	4938      	ldr	r1, [pc, #224]	@ (80152c0 <etharp_tmr+0x14c>)
 80151e0:	687a      	ldr	r2, [r7, #4]
 80151e2:	4613      	mov	r3, r2
 80151e4:	005b      	lsls	r3, r3, #1
 80151e6:	4413      	add	r3, r2
 80151e8:	00db      	lsls	r3, r3, #3
 80151ea:	440b      	add	r3, r1
 80151ec:	3314      	adds	r3, #20
 80151ee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80151f0:	2b01      	cmp	r3, #1
 80151f2:	d10e      	bne.n	8015212 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80151f4:	4932      	ldr	r1, [pc, #200]	@ (80152c0 <etharp_tmr+0x14c>)
 80151f6:	687a      	ldr	r2, [r7, #4]
 80151f8:	4613      	mov	r3, r2
 80151fa:	005b      	lsls	r3, r3, #1
 80151fc:	4413      	add	r3, r2
 80151fe:	00db      	lsls	r3, r3, #3
 8015200:	440b      	add	r3, r1
 8015202:	3312      	adds	r3, #18
 8015204:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015206:	2b04      	cmp	r3, #4
 8015208:	d903      	bls.n	8015212 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801520a:	6878      	ldr	r0, [r7, #4]
 801520c:	f7ff ff80 	bl	8015110 <etharp_free_entry>
 8015210:	e04a      	b.n	80152a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015212:	492b      	ldr	r1, [pc, #172]	@ (80152c0 <etharp_tmr+0x14c>)
 8015214:	687a      	ldr	r2, [r7, #4]
 8015216:	4613      	mov	r3, r2
 8015218:	005b      	lsls	r3, r3, #1
 801521a:	4413      	add	r3, r2
 801521c:	00db      	lsls	r3, r3, #3
 801521e:	440b      	add	r3, r1
 8015220:	3314      	adds	r3, #20
 8015222:	781b      	ldrb	r3, [r3, #0]
 8015224:	2b03      	cmp	r3, #3
 8015226:	d10a      	bne.n	801523e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015228:	4925      	ldr	r1, [pc, #148]	@ (80152c0 <etharp_tmr+0x14c>)
 801522a:	687a      	ldr	r2, [r7, #4]
 801522c:	4613      	mov	r3, r2
 801522e:	005b      	lsls	r3, r3, #1
 8015230:	4413      	add	r3, r2
 8015232:	00db      	lsls	r3, r3, #3
 8015234:	440b      	add	r3, r1
 8015236:	3314      	adds	r3, #20
 8015238:	2204      	movs	r2, #4
 801523a:	701a      	strb	r2, [r3, #0]
 801523c:	e034      	b.n	80152a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801523e:	4920      	ldr	r1, [pc, #128]	@ (80152c0 <etharp_tmr+0x14c>)
 8015240:	687a      	ldr	r2, [r7, #4]
 8015242:	4613      	mov	r3, r2
 8015244:	005b      	lsls	r3, r3, #1
 8015246:	4413      	add	r3, r2
 8015248:	00db      	lsls	r3, r3, #3
 801524a:	440b      	add	r3, r1
 801524c:	3314      	adds	r3, #20
 801524e:	781b      	ldrb	r3, [r3, #0]
 8015250:	2b04      	cmp	r3, #4
 8015252:	d10a      	bne.n	801526a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015254:	491a      	ldr	r1, [pc, #104]	@ (80152c0 <etharp_tmr+0x14c>)
 8015256:	687a      	ldr	r2, [r7, #4]
 8015258:	4613      	mov	r3, r2
 801525a:	005b      	lsls	r3, r3, #1
 801525c:	4413      	add	r3, r2
 801525e:	00db      	lsls	r3, r3, #3
 8015260:	440b      	add	r3, r1
 8015262:	3314      	adds	r3, #20
 8015264:	2202      	movs	r2, #2
 8015266:	701a      	strb	r2, [r3, #0]
 8015268:	e01e      	b.n	80152a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801526a:	4915      	ldr	r1, [pc, #84]	@ (80152c0 <etharp_tmr+0x14c>)
 801526c:	687a      	ldr	r2, [r7, #4]
 801526e:	4613      	mov	r3, r2
 8015270:	005b      	lsls	r3, r3, #1
 8015272:	4413      	add	r3, r2
 8015274:	00db      	lsls	r3, r3, #3
 8015276:	440b      	add	r3, r1
 8015278:	3314      	adds	r3, #20
 801527a:	781b      	ldrb	r3, [r3, #0]
 801527c:	2b01      	cmp	r3, #1
 801527e:	d113      	bne.n	80152a8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015280:	490f      	ldr	r1, [pc, #60]	@ (80152c0 <etharp_tmr+0x14c>)
 8015282:	687a      	ldr	r2, [r7, #4]
 8015284:	4613      	mov	r3, r2
 8015286:	005b      	lsls	r3, r3, #1
 8015288:	4413      	add	r3, r2
 801528a:	00db      	lsls	r3, r3, #3
 801528c:	440b      	add	r3, r1
 801528e:	3308      	adds	r3, #8
 8015290:	6818      	ldr	r0, [r3, #0]
 8015292:	687a      	ldr	r2, [r7, #4]
 8015294:	4613      	mov	r3, r2
 8015296:	005b      	lsls	r3, r3, #1
 8015298:	4413      	add	r3, r2
 801529a:	00db      	lsls	r3, r3, #3
 801529c:	4a08      	ldr	r2, [pc, #32]	@ (80152c0 <etharp_tmr+0x14c>)
 801529e:	4413      	add	r3, r2
 80152a0:	3304      	adds	r3, #4
 80152a2:	4619      	mov	r1, r3
 80152a4:	f000 fe6e 	bl	8015f84 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	3301      	adds	r3, #1
 80152ac:	607b      	str	r3, [r7, #4]
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	2b09      	cmp	r3, #9
 80152b2:	f77f af65 	ble.w	8015180 <etharp_tmr+0xc>
      }
    }
  }
}
 80152b6:	bf00      	nop
 80152b8:	bf00      	nop
 80152ba:	3708      	adds	r7, #8
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd80      	pop	{r7, pc}
 80152c0:	20010058 	.word	0x20010058

080152c4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b08a      	sub	sp, #40	@ 0x28
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	60f8      	str	r0, [r7, #12]
 80152cc:	460b      	mov	r3, r1
 80152ce:	607a      	str	r2, [r7, #4]
 80152d0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80152d2:	230a      	movs	r3, #10
 80152d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80152d6:	230a      	movs	r3, #10
 80152d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80152da:	230a      	movs	r3, #10
 80152dc:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80152de:	2300      	movs	r3, #0
 80152e0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80152e2:	230a      	movs	r3, #10
 80152e4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80152e6:	2300      	movs	r3, #0
 80152e8:	83bb      	strh	r3, [r7, #28]
 80152ea:	2300      	movs	r3, #0
 80152ec:	837b      	strh	r3, [r7, #26]
 80152ee:	2300      	movs	r3, #0
 80152f0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80152f2:	2300      	movs	r3, #0
 80152f4:	843b      	strh	r3, [r7, #32]
 80152f6:	e0ae      	b.n	8015456 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80152f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152fc:	49a6      	ldr	r1, [pc, #664]	@ (8015598 <etharp_find_entry+0x2d4>)
 80152fe:	4613      	mov	r3, r2
 8015300:	005b      	lsls	r3, r3, #1
 8015302:	4413      	add	r3, r2
 8015304:	00db      	lsls	r3, r3, #3
 8015306:	440b      	add	r3, r1
 8015308:	3314      	adds	r3, #20
 801530a:	781b      	ldrb	r3, [r3, #0]
 801530c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801530e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015312:	2b0a      	cmp	r3, #10
 8015314:	d105      	bne.n	8015322 <etharp_find_entry+0x5e>
 8015316:	7dfb      	ldrb	r3, [r7, #23]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d102      	bne.n	8015322 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801531c:	8c3b      	ldrh	r3, [r7, #32]
 801531e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8015320:	e095      	b.n	801544e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015322:	7dfb      	ldrb	r3, [r7, #23]
 8015324:	2b00      	cmp	r3, #0
 8015326:	f000 8092 	beq.w	801544e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801532a:	7dfb      	ldrb	r3, [r7, #23]
 801532c:	2b01      	cmp	r3, #1
 801532e:	d009      	beq.n	8015344 <etharp_find_entry+0x80>
 8015330:	7dfb      	ldrb	r3, [r7, #23]
 8015332:	2b01      	cmp	r3, #1
 8015334:	d806      	bhi.n	8015344 <etharp_find_entry+0x80>
 8015336:	4b99      	ldr	r3, [pc, #612]	@ (801559c <etharp_find_entry+0x2d8>)
 8015338:	f240 1223 	movw	r2, #291	@ 0x123
 801533c:	4998      	ldr	r1, [pc, #608]	@ (80155a0 <etharp_find_entry+0x2dc>)
 801533e:	4899      	ldr	r0, [pc, #612]	@ (80155a4 <etharp_find_entry+0x2e0>)
 8015340:	f002 fc8e 	bl	8017c60 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d020      	beq.n	801538c <etharp_find_entry+0xc8>
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	6819      	ldr	r1, [r3, #0]
 801534e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015352:	4891      	ldr	r0, [pc, #580]	@ (8015598 <etharp_find_entry+0x2d4>)
 8015354:	4613      	mov	r3, r2
 8015356:	005b      	lsls	r3, r3, #1
 8015358:	4413      	add	r3, r2
 801535a:	00db      	lsls	r3, r3, #3
 801535c:	4403      	add	r3, r0
 801535e:	3304      	adds	r3, #4
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	4299      	cmp	r1, r3
 8015364:	d112      	bne.n	801538c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d00c      	beq.n	8015386 <etharp_find_entry+0xc2>
 801536c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015370:	4989      	ldr	r1, [pc, #548]	@ (8015598 <etharp_find_entry+0x2d4>)
 8015372:	4613      	mov	r3, r2
 8015374:	005b      	lsls	r3, r3, #1
 8015376:	4413      	add	r3, r2
 8015378:	00db      	lsls	r3, r3, #3
 801537a:	440b      	add	r3, r1
 801537c:	3308      	adds	r3, #8
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	687a      	ldr	r2, [r7, #4]
 8015382:	429a      	cmp	r2, r3
 8015384:	d102      	bne.n	801538c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015386:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801538a:	e100      	b.n	801558e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801538c:	7dfb      	ldrb	r3, [r7, #23]
 801538e:	2b01      	cmp	r3, #1
 8015390:	d140      	bne.n	8015414 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015392:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015396:	4980      	ldr	r1, [pc, #512]	@ (8015598 <etharp_find_entry+0x2d4>)
 8015398:	4613      	mov	r3, r2
 801539a:	005b      	lsls	r3, r3, #1
 801539c:	4413      	add	r3, r2
 801539e:	00db      	lsls	r3, r3, #3
 80153a0:	440b      	add	r3, r1
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d01a      	beq.n	80153de <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80153a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153ac:	497a      	ldr	r1, [pc, #488]	@ (8015598 <etharp_find_entry+0x2d4>)
 80153ae:	4613      	mov	r3, r2
 80153b0:	005b      	lsls	r3, r3, #1
 80153b2:	4413      	add	r3, r2
 80153b4:	00db      	lsls	r3, r3, #3
 80153b6:	440b      	add	r3, r1
 80153b8:	3312      	adds	r3, #18
 80153ba:	881b      	ldrh	r3, [r3, #0]
 80153bc:	8bba      	ldrh	r2, [r7, #28]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d845      	bhi.n	801544e <etharp_find_entry+0x18a>
            old_queue = i;
 80153c2:	8c3b      	ldrh	r3, [r7, #32]
 80153c4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80153c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153ca:	4973      	ldr	r1, [pc, #460]	@ (8015598 <etharp_find_entry+0x2d4>)
 80153cc:	4613      	mov	r3, r2
 80153ce:	005b      	lsls	r3, r3, #1
 80153d0:	4413      	add	r3, r2
 80153d2:	00db      	lsls	r3, r3, #3
 80153d4:	440b      	add	r3, r1
 80153d6:	3312      	adds	r3, #18
 80153d8:	881b      	ldrh	r3, [r3, #0]
 80153da:	83bb      	strh	r3, [r7, #28]
 80153dc:	e037      	b.n	801544e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80153de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153e2:	496d      	ldr	r1, [pc, #436]	@ (8015598 <etharp_find_entry+0x2d4>)
 80153e4:	4613      	mov	r3, r2
 80153e6:	005b      	lsls	r3, r3, #1
 80153e8:	4413      	add	r3, r2
 80153ea:	00db      	lsls	r3, r3, #3
 80153ec:	440b      	add	r3, r1
 80153ee:	3312      	adds	r3, #18
 80153f0:	881b      	ldrh	r3, [r3, #0]
 80153f2:	8b7a      	ldrh	r2, [r7, #26]
 80153f4:	429a      	cmp	r2, r3
 80153f6:	d82a      	bhi.n	801544e <etharp_find_entry+0x18a>
            old_pending = i;
 80153f8:	8c3b      	ldrh	r3, [r7, #32]
 80153fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80153fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015400:	4965      	ldr	r1, [pc, #404]	@ (8015598 <etharp_find_entry+0x2d4>)
 8015402:	4613      	mov	r3, r2
 8015404:	005b      	lsls	r3, r3, #1
 8015406:	4413      	add	r3, r2
 8015408:	00db      	lsls	r3, r3, #3
 801540a:	440b      	add	r3, r1
 801540c:	3312      	adds	r3, #18
 801540e:	881b      	ldrh	r3, [r3, #0]
 8015410:	837b      	strh	r3, [r7, #26]
 8015412:	e01c      	b.n	801544e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015414:	7dfb      	ldrb	r3, [r7, #23]
 8015416:	2b01      	cmp	r3, #1
 8015418:	d919      	bls.n	801544e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801541a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801541e:	495e      	ldr	r1, [pc, #376]	@ (8015598 <etharp_find_entry+0x2d4>)
 8015420:	4613      	mov	r3, r2
 8015422:	005b      	lsls	r3, r3, #1
 8015424:	4413      	add	r3, r2
 8015426:	00db      	lsls	r3, r3, #3
 8015428:	440b      	add	r3, r1
 801542a:	3312      	adds	r3, #18
 801542c:	881b      	ldrh	r3, [r3, #0]
 801542e:	8b3a      	ldrh	r2, [r7, #24]
 8015430:	429a      	cmp	r2, r3
 8015432:	d80c      	bhi.n	801544e <etharp_find_entry+0x18a>
            old_stable = i;
 8015434:	8c3b      	ldrh	r3, [r7, #32]
 8015436:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8015438:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801543c:	4956      	ldr	r1, [pc, #344]	@ (8015598 <etharp_find_entry+0x2d4>)
 801543e:	4613      	mov	r3, r2
 8015440:	005b      	lsls	r3, r3, #1
 8015442:	4413      	add	r3, r2
 8015444:	00db      	lsls	r3, r3, #3
 8015446:	440b      	add	r3, r1
 8015448:	3312      	adds	r3, #18
 801544a:	881b      	ldrh	r3, [r3, #0]
 801544c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801544e:	8c3b      	ldrh	r3, [r7, #32]
 8015450:	3301      	adds	r3, #1
 8015452:	b29b      	uxth	r3, r3
 8015454:	843b      	strh	r3, [r7, #32]
 8015456:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801545a:	2b09      	cmp	r3, #9
 801545c:	f77f af4c 	ble.w	80152f8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015460:	7afb      	ldrb	r3, [r7, #11]
 8015462:	f003 0302 	and.w	r3, r3, #2
 8015466:	2b00      	cmp	r3, #0
 8015468:	d108      	bne.n	801547c <etharp_find_entry+0x1b8>
 801546a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801546e:	2b0a      	cmp	r3, #10
 8015470:	d107      	bne.n	8015482 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015472:	7afb      	ldrb	r3, [r7, #11]
 8015474:	f003 0301 	and.w	r3, r3, #1
 8015478:	2b00      	cmp	r3, #0
 801547a:	d102      	bne.n	8015482 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801547c:	f04f 33ff 	mov.w	r3, #4294967295
 8015480:	e085      	b.n	801558e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015482:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015486:	2b09      	cmp	r3, #9
 8015488:	dc02      	bgt.n	8015490 <etharp_find_entry+0x1cc>
    i = empty;
 801548a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801548c:	843b      	strh	r3, [r7, #32]
 801548e:	e039      	b.n	8015504 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015490:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8015494:	2b09      	cmp	r3, #9
 8015496:	dc14      	bgt.n	80154c2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015498:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801549a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801549c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154a0:	493d      	ldr	r1, [pc, #244]	@ (8015598 <etharp_find_entry+0x2d4>)
 80154a2:	4613      	mov	r3, r2
 80154a4:	005b      	lsls	r3, r3, #1
 80154a6:	4413      	add	r3, r2
 80154a8:	00db      	lsls	r3, r3, #3
 80154aa:	440b      	add	r3, r1
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d018      	beq.n	80154e4 <etharp_find_entry+0x220>
 80154b2:	4b3a      	ldr	r3, [pc, #232]	@ (801559c <etharp_find_entry+0x2d8>)
 80154b4:	f240 126d 	movw	r2, #365	@ 0x16d
 80154b8:	493b      	ldr	r1, [pc, #236]	@ (80155a8 <etharp_find_entry+0x2e4>)
 80154ba:	483a      	ldr	r0, [pc, #232]	@ (80155a4 <etharp_find_entry+0x2e0>)
 80154bc:	f002 fbd0 	bl	8017c60 <iprintf>
 80154c0:	e010      	b.n	80154e4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80154c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80154c6:	2b09      	cmp	r3, #9
 80154c8:	dc02      	bgt.n	80154d0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80154ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80154cc:	843b      	strh	r3, [r7, #32]
 80154ce:	e009      	b.n	80154e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80154d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80154d4:	2b09      	cmp	r3, #9
 80154d6:	dc02      	bgt.n	80154de <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80154d8:	8bfb      	ldrh	r3, [r7, #30]
 80154da:	843b      	strh	r3, [r7, #32]
 80154dc:	e002      	b.n	80154e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80154de:	f04f 33ff 	mov.w	r3, #4294967295
 80154e2:	e054      	b.n	801558e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80154e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80154e8:	2b09      	cmp	r3, #9
 80154ea:	dd06      	ble.n	80154fa <etharp_find_entry+0x236>
 80154ec:	4b2b      	ldr	r3, [pc, #172]	@ (801559c <etharp_find_entry+0x2d8>)
 80154ee:	f240 127f 	movw	r2, #383	@ 0x17f
 80154f2:	492e      	ldr	r1, [pc, #184]	@ (80155ac <etharp_find_entry+0x2e8>)
 80154f4:	482b      	ldr	r0, [pc, #172]	@ (80155a4 <etharp_find_entry+0x2e0>)
 80154f6:	f002 fbb3 	bl	8017c60 <iprintf>
    etharp_free_entry(i);
 80154fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80154fe:	4618      	mov	r0, r3
 8015500:	f7ff fe06 	bl	8015110 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015504:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015508:	2b09      	cmp	r3, #9
 801550a:	dd06      	ble.n	801551a <etharp_find_entry+0x256>
 801550c:	4b23      	ldr	r3, [pc, #140]	@ (801559c <etharp_find_entry+0x2d8>)
 801550e:	f240 1283 	movw	r2, #387	@ 0x183
 8015512:	4926      	ldr	r1, [pc, #152]	@ (80155ac <etharp_find_entry+0x2e8>)
 8015514:	4823      	ldr	r0, [pc, #140]	@ (80155a4 <etharp_find_entry+0x2e0>)
 8015516:	f002 fba3 	bl	8017c60 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801551a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801551e:	491e      	ldr	r1, [pc, #120]	@ (8015598 <etharp_find_entry+0x2d4>)
 8015520:	4613      	mov	r3, r2
 8015522:	005b      	lsls	r3, r3, #1
 8015524:	4413      	add	r3, r2
 8015526:	00db      	lsls	r3, r3, #3
 8015528:	440b      	add	r3, r1
 801552a:	3314      	adds	r3, #20
 801552c:	781b      	ldrb	r3, [r3, #0]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d006      	beq.n	8015540 <etharp_find_entry+0x27c>
 8015532:	4b1a      	ldr	r3, [pc, #104]	@ (801559c <etharp_find_entry+0x2d8>)
 8015534:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8015538:	491d      	ldr	r1, [pc, #116]	@ (80155b0 <etharp_find_entry+0x2ec>)
 801553a:	481a      	ldr	r0, [pc, #104]	@ (80155a4 <etharp_find_entry+0x2e0>)
 801553c:	f002 fb90 	bl	8017c60 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d00b      	beq.n	801555e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015546:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	6819      	ldr	r1, [r3, #0]
 801554e:	4812      	ldr	r0, [pc, #72]	@ (8015598 <etharp_find_entry+0x2d4>)
 8015550:	4613      	mov	r3, r2
 8015552:	005b      	lsls	r3, r3, #1
 8015554:	4413      	add	r3, r2
 8015556:	00db      	lsls	r3, r3, #3
 8015558:	4403      	add	r3, r0
 801555a:	3304      	adds	r3, #4
 801555c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801555e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015562:	490d      	ldr	r1, [pc, #52]	@ (8015598 <etharp_find_entry+0x2d4>)
 8015564:	4613      	mov	r3, r2
 8015566:	005b      	lsls	r3, r3, #1
 8015568:	4413      	add	r3, r2
 801556a:	00db      	lsls	r3, r3, #3
 801556c:	440b      	add	r3, r1
 801556e:	3312      	adds	r3, #18
 8015570:	2200      	movs	r2, #0
 8015572:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015574:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015578:	4907      	ldr	r1, [pc, #28]	@ (8015598 <etharp_find_entry+0x2d4>)
 801557a:	4613      	mov	r3, r2
 801557c:	005b      	lsls	r3, r3, #1
 801557e:	4413      	add	r3, r2
 8015580:	00db      	lsls	r3, r3, #3
 8015582:	440b      	add	r3, r1
 8015584:	3308      	adds	r3, #8
 8015586:	687a      	ldr	r2, [r7, #4]
 8015588:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801558a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801558e:	4618      	mov	r0, r3
 8015590:	3728      	adds	r7, #40	@ 0x28
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}
 8015596:	bf00      	nop
 8015598:	20010058 	.word	0x20010058
 801559c:	0801c0e8 	.word	0x0801c0e8
 80155a0:	0801c120 	.word	0x0801c120
 80155a4:	0801c160 	.word	0x0801c160
 80155a8:	0801c188 	.word	0x0801c188
 80155ac:	0801c1a0 	.word	0x0801c1a0
 80155b0:	0801c1b4 	.word	0x0801c1b4

080155b4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b088      	sub	sp, #32
 80155b8:	af02      	add	r7, sp, #8
 80155ba:	60f8      	str	r0, [r7, #12]
 80155bc:	60b9      	str	r1, [r7, #8]
 80155be:	607a      	str	r2, [r7, #4]
 80155c0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80155c8:	2b06      	cmp	r3, #6
 80155ca:	d006      	beq.n	80155da <etharp_update_arp_entry+0x26>
 80155cc:	4b48      	ldr	r3, [pc, #288]	@ (80156f0 <etharp_update_arp_entry+0x13c>)
 80155ce:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80155d2:	4948      	ldr	r1, [pc, #288]	@ (80156f4 <etharp_update_arp_entry+0x140>)
 80155d4:	4848      	ldr	r0, [pc, #288]	@ (80156f8 <etharp_update_arp_entry+0x144>)
 80155d6:	f002 fb43 	bl	8017c60 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d012      	beq.n	8015606 <etharp_update_arp_entry+0x52>
 80155e0:	68bb      	ldr	r3, [r7, #8]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d00e      	beq.n	8015606 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80155e8:	68bb      	ldr	r3, [r7, #8]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	68f9      	ldr	r1, [r7, #12]
 80155ee:	4618      	mov	r0, r3
 80155f0:	f001 f8fe 	bl	80167f0 <ip4_addr_isbroadcast_u32>
 80155f4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d105      	bne.n	8015606 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80155fa:	68bb      	ldr	r3, [r7, #8]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015602:	2be0      	cmp	r3, #224	@ 0xe0
 8015604:	d102      	bne.n	801560c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015606:	f06f 030f 	mvn.w	r3, #15
 801560a:	e06c      	b.n	80156e6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801560c:	78fb      	ldrb	r3, [r7, #3]
 801560e:	68fa      	ldr	r2, [r7, #12]
 8015610:	4619      	mov	r1, r3
 8015612:	68b8      	ldr	r0, [r7, #8]
 8015614:	f7ff fe56 	bl	80152c4 <etharp_find_entry>
 8015618:	4603      	mov	r3, r0
 801561a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801561c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015620:	2b00      	cmp	r3, #0
 8015622:	da02      	bge.n	801562a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015624:	8afb      	ldrh	r3, [r7, #22]
 8015626:	b25b      	sxtb	r3, r3
 8015628:	e05d      	b.n	80156e6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801562a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801562e:	4933      	ldr	r1, [pc, #204]	@ (80156fc <etharp_update_arp_entry+0x148>)
 8015630:	4613      	mov	r3, r2
 8015632:	005b      	lsls	r3, r3, #1
 8015634:	4413      	add	r3, r2
 8015636:	00db      	lsls	r3, r3, #3
 8015638:	440b      	add	r3, r1
 801563a:	3314      	adds	r3, #20
 801563c:	2202      	movs	r2, #2
 801563e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015640:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015644:	492d      	ldr	r1, [pc, #180]	@ (80156fc <etharp_update_arp_entry+0x148>)
 8015646:	4613      	mov	r3, r2
 8015648:	005b      	lsls	r3, r3, #1
 801564a:	4413      	add	r3, r2
 801564c:	00db      	lsls	r3, r3, #3
 801564e:	440b      	add	r3, r1
 8015650:	3308      	adds	r3, #8
 8015652:	68fa      	ldr	r2, [r7, #12]
 8015654:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015656:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801565a:	4613      	mov	r3, r2
 801565c:	005b      	lsls	r3, r3, #1
 801565e:	4413      	add	r3, r2
 8015660:	00db      	lsls	r3, r3, #3
 8015662:	3308      	adds	r3, #8
 8015664:	4a25      	ldr	r2, [pc, #148]	@ (80156fc <etharp_update_arp_entry+0x148>)
 8015666:	4413      	add	r3, r2
 8015668:	3304      	adds	r3, #4
 801566a:	2206      	movs	r2, #6
 801566c:	6879      	ldr	r1, [r7, #4]
 801566e:	4618      	mov	r0, r3
 8015670:	f002 fc61 	bl	8017f36 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015674:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015678:	4920      	ldr	r1, [pc, #128]	@ (80156fc <etharp_update_arp_entry+0x148>)
 801567a:	4613      	mov	r3, r2
 801567c:	005b      	lsls	r3, r3, #1
 801567e:	4413      	add	r3, r2
 8015680:	00db      	lsls	r3, r3, #3
 8015682:	440b      	add	r3, r1
 8015684:	3312      	adds	r3, #18
 8015686:	2200      	movs	r2, #0
 8015688:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801568a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801568e:	491b      	ldr	r1, [pc, #108]	@ (80156fc <etharp_update_arp_entry+0x148>)
 8015690:	4613      	mov	r3, r2
 8015692:	005b      	lsls	r3, r3, #1
 8015694:	4413      	add	r3, r2
 8015696:	00db      	lsls	r3, r3, #3
 8015698:	440b      	add	r3, r1
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d021      	beq.n	80156e4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80156a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80156a4:	4915      	ldr	r1, [pc, #84]	@ (80156fc <etharp_update_arp_entry+0x148>)
 80156a6:	4613      	mov	r3, r2
 80156a8:	005b      	lsls	r3, r3, #1
 80156aa:	4413      	add	r3, r2
 80156ac:	00db      	lsls	r3, r3, #3
 80156ae:	440b      	add	r3, r1
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80156b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80156b8:	4910      	ldr	r1, [pc, #64]	@ (80156fc <etharp_update_arp_entry+0x148>)
 80156ba:	4613      	mov	r3, r2
 80156bc:	005b      	lsls	r3, r3, #1
 80156be:	4413      	add	r3, r2
 80156c0:	00db      	lsls	r3, r3, #3
 80156c2:	440b      	add	r3, r1
 80156c4:	2200      	movs	r2, #0
 80156c6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80156ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80156d2:	9300      	str	r3, [sp, #0]
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	6939      	ldr	r1, [r7, #16]
 80156d8:	68f8      	ldr	r0, [r7, #12]
 80156da:	f001 ff97 	bl	801760c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80156de:	6938      	ldr	r0, [r7, #16]
 80156e0:	f7f8 fd52 	bl	800e188 <pbuf_free>
  }
  return ERR_OK;
 80156e4:	2300      	movs	r3, #0
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	3718      	adds	r7, #24
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd80      	pop	{r7, pc}
 80156ee:	bf00      	nop
 80156f0:	0801c0e8 	.word	0x0801c0e8
 80156f4:	0801c1e0 	.word	0x0801c1e0
 80156f8:	0801c160 	.word	0x0801c160
 80156fc:	20010058 	.word	0x20010058

08015700 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b084      	sub	sp, #16
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015708:	2300      	movs	r3, #0
 801570a:	60fb      	str	r3, [r7, #12]
 801570c:	e01e      	b.n	801574c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801570e:	4913      	ldr	r1, [pc, #76]	@ (801575c <etharp_cleanup_netif+0x5c>)
 8015710:	68fa      	ldr	r2, [r7, #12]
 8015712:	4613      	mov	r3, r2
 8015714:	005b      	lsls	r3, r3, #1
 8015716:	4413      	add	r3, r2
 8015718:	00db      	lsls	r3, r3, #3
 801571a:	440b      	add	r3, r1
 801571c:	3314      	adds	r3, #20
 801571e:	781b      	ldrb	r3, [r3, #0]
 8015720:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015722:	7afb      	ldrb	r3, [r7, #11]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d00e      	beq.n	8015746 <etharp_cleanup_netif+0x46>
 8015728:	490c      	ldr	r1, [pc, #48]	@ (801575c <etharp_cleanup_netif+0x5c>)
 801572a:	68fa      	ldr	r2, [r7, #12]
 801572c:	4613      	mov	r3, r2
 801572e:	005b      	lsls	r3, r3, #1
 8015730:	4413      	add	r3, r2
 8015732:	00db      	lsls	r3, r3, #3
 8015734:	440b      	add	r3, r1
 8015736:	3308      	adds	r3, #8
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	687a      	ldr	r2, [r7, #4]
 801573c:	429a      	cmp	r2, r3
 801573e:	d102      	bne.n	8015746 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015740:	68f8      	ldr	r0, [r7, #12]
 8015742:	f7ff fce5 	bl	8015110 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	3301      	adds	r3, #1
 801574a:	60fb      	str	r3, [r7, #12]
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	2b09      	cmp	r3, #9
 8015750:	dddd      	ble.n	801570e <etharp_cleanup_netif+0xe>
    }
  }
}
 8015752:	bf00      	nop
 8015754:	bf00      	nop
 8015756:	3710      	adds	r7, #16
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}
 801575c:	20010058 	.word	0x20010058

08015760 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015760:	b5b0      	push	{r4, r5, r7, lr}
 8015762:	b08a      	sub	sp, #40	@ 0x28
 8015764:	af04      	add	r7, sp, #16
 8015766:	6078      	str	r0, [r7, #4]
 8015768:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d107      	bne.n	8015780 <etharp_input+0x20>
 8015770:	4b3d      	ldr	r3, [pc, #244]	@ (8015868 <etharp_input+0x108>)
 8015772:	f240 228a 	movw	r2, #650	@ 0x28a
 8015776:	493d      	ldr	r1, [pc, #244]	@ (801586c <etharp_input+0x10c>)
 8015778:	483d      	ldr	r0, [pc, #244]	@ (8015870 <etharp_input+0x110>)
 801577a:	f002 fa71 	bl	8017c60 <iprintf>
 801577e:	e06f      	b.n	8015860 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	685b      	ldr	r3, [r3, #4]
 8015784:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015786:	693b      	ldr	r3, [r7, #16]
 8015788:	881b      	ldrh	r3, [r3, #0]
 801578a:	b29b      	uxth	r3, r3
 801578c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015790:	d10c      	bne.n	80157ac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015792:	693b      	ldr	r3, [r7, #16]
 8015794:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015796:	2b06      	cmp	r3, #6
 8015798:	d108      	bne.n	80157ac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801579a:	693b      	ldr	r3, [r7, #16]
 801579c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801579e:	2b04      	cmp	r3, #4
 80157a0:	d104      	bne.n	80157ac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80157a2:	693b      	ldr	r3, [r7, #16]
 80157a4:	885b      	ldrh	r3, [r3, #2]
 80157a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80157a8:	2b08      	cmp	r3, #8
 80157aa:	d003      	beq.n	80157b4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80157ac:	6878      	ldr	r0, [r7, #4]
 80157ae:	f7f8 fceb 	bl	800e188 <pbuf_free>
    return;
 80157b2:	e055      	b.n	8015860 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80157b4:	693b      	ldr	r3, [r7, #16]
 80157b6:	330e      	adds	r3, #14
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80157bc:	693b      	ldr	r3, [r7, #16]
 80157be:	3318      	adds	r3, #24
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80157c4:	683b      	ldr	r3, [r7, #0]
 80157c6:	3304      	adds	r3, #4
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d102      	bne.n	80157d4 <etharp_input+0x74>
    for_us = 0;
 80157ce:	2300      	movs	r3, #0
 80157d0:	75fb      	strb	r3, [r7, #23]
 80157d2:	e009      	b.n	80157e8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80157d4:	68ba      	ldr	r2, [r7, #8]
 80157d6:	683b      	ldr	r3, [r7, #0]
 80157d8:	3304      	adds	r3, #4
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	429a      	cmp	r2, r3
 80157de:	bf0c      	ite	eq
 80157e0:	2301      	moveq	r3, #1
 80157e2:	2300      	movne	r3, #0
 80157e4:	b2db      	uxtb	r3, r3
 80157e6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80157e8:	693b      	ldr	r3, [r7, #16]
 80157ea:	f103 0208 	add.w	r2, r3, #8
 80157ee:	7dfb      	ldrb	r3, [r7, #23]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d001      	beq.n	80157f8 <etharp_input+0x98>
 80157f4:	2301      	movs	r3, #1
 80157f6:	e000      	b.n	80157fa <etharp_input+0x9a>
 80157f8:	2302      	movs	r3, #2
 80157fa:	f107 010c 	add.w	r1, r7, #12
 80157fe:	6838      	ldr	r0, [r7, #0]
 8015800:	f7ff fed8 	bl	80155b4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015804:	693b      	ldr	r3, [r7, #16]
 8015806:	88db      	ldrh	r3, [r3, #6]
 8015808:	b29b      	uxth	r3, r3
 801580a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801580e:	d003      	beq.n	8015818 <etharp_input+0xb8>
 8015810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015814:	d01e      	beq.n	8015854 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015816:	e020      	b.n	801585a <etharp_input+0xfa>
      if (for_us) {
 8015818:	7dfb      	ldrb	r3, [r7, #23]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d01c      	beq.n	8015858 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801581e:	683b      	ldr	r3, [r7, #0]
 8015820:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8015824:	693b      	ldr	r3, [r7, #16]
 8015826:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801582a:	683b      	ldr	r3, [r7, #0]
 801582c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8015830:	683b      	ldr	r3, [r7, #0]
 8015832:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015834:	693a      	ldr	r2, [r7, #16]
 8015836:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015838:	2102      	movs	r1, #2
 801583a:	9103      	str	r1, [sp, #12]
 801583c:	f107 010c 	add.w	r1, r7, #12
 8015840:	9102      	str	r1, [sp, #8]
 8015842:	9201      	str	r2, [sp, #4]
 8015844:	9300      	str	r3, [sp, #0]
 8015846:	462b      	mov	r3, r5
 8015848:	4622      	mov	r2, r4
 801584a:	4601      	mov	r1, r0
 801584c:	6838      	ldr	r0, [r7, #0]
 801584e:	f000 faeb 	bl	8015e28 <etharp_raw>
      break;
 8015852:	e001      	b.n	8015858 <etharp_input+0xf8>
      break;
 8015854:	bf00      	nop
 8015856:	e000      	b.n	801585a <etharp_input+0xfa>
      break;
 8015858:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801585a:	6878      	ldr	r0, [r7, #4]
 801585c:	f7f8 fc94 	bl	800e188 <pbuf_free>
}
 8015860:	3718      	adds	r7, #24
 8015862:	46bd      	mov	sp, r7
 8015864:	bdb0      	pop	{r4, r5, r7, pc}
 8015866:	bf00      	nop
 8015868:	0801c0e8 	.word	0x0801c0e8
 801586c:	0801c238 	.word	0x0801c238
 8015870:	0801c160 	.word	0x0801c160

08015874 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b086      	sub	sp, #24
 8015878:	af02      	add	r7, sp, #8
 801587a:	60f8      	str	r0, [r7, #12]
 801587c:	60b9      	str	r1, [r7, #8]
 801587e:	4613      	mov	r3, r2
 8015880:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015882:	79fa      	ldrb	r2, [r7, #7]
 8015884:	4944      	ldr	r1, [pc, #272]	@ (8015998 <etharp_output_to_arp_index+0x124>)
 8015886:	4613      	mov	r3, r2
 8015888:	005b      	lsls	r3, r3, #1
 801588a:	4413      	add	r3, r2
 801588c:	00db      	lsls	r3, r3, #3
 801588e:	440b      	add	r3, r1
 8015890:	3314      	adds	r3, #20
 8015892:	781b      	ldrb	r3, [r3, #0]
 8015894:	2b01      	cmp	r3, #1
 8015896:	d806      	bhi.n	80158a6 <etharp_output_to_arp_index+0x32>
 8015898:	4b40      	ldr	r3, [pc, #256]	@ (801599c <etharp_output_to_arp_index+0x128>)
 801589a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801589e:	4940      	ldr	r1, [pc, #256]	@ (80159a0 <etharp_output_to_arp_index+0x12c>)
 80158a0:	4840      	ldr	r0, [pc, #256]	@ (80159a4 <etharp_output_to_arp_index+0x130>)
 80158a2:	f002 f9dd 	bl	8017c60 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80158a6:	79fa      	ldrb	r2, [r7, #7]
 80158a8:	493b      	ldr	r1, [pc, #236]	@ (8015998 <etharp_output_to_arp_index+0x124>)
 80158aa:	4613      	mov	r3, r2
 80158ac:	005b      	lsls	r3, r3, #1
 80158ae:	4413      	add	r3, r2
 80158b0:	00db      	lsls	r3, r3, #3
 80158b2:	440b      	add	r3, r1
 80158b4:	3314      	adds	r3, #20
 80158b6:	781b      	ldrb	r3, [r3, #0]
 80158b8:	2b02      	cmp	r3, #2
 80158ba:	d153      	bne.n	8015964 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80158bc:	79fa      	ldrb	r2, [r7, #7]
 80158be:	4936      	ldr	r1, [pc, #216]	@ (8015998 <etharp_output_to_arp_index+0x124>)
 80158c0:	4613      	mov	r3, r2
 80158c2:	005b      	lsls	r3, r3, #1
 80158c4:	4413      	add	r3, r2
 80158c6:	00db      	lsls	r3, r3, #3
 80158c8:	440b      	add	r3, r1
 80158ca:	3312      	adds	r3, #18
 80158cc:	881b      	ldrh	r3, [r3, #0]
 80158ce:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80158d2:	d919      	bls.n	8015908 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80158d4:	79fa      	ldrb	r2, [r7, #7]
 80158d6:	4613      	mov	r3, r2
 80158d8:	005b      	lsls	r3, r3, #1
 80158da:	4413      	add	r3, r2
 80158dc:	00db      	lsls	r3, r3, #3
 80158de:	4a2e      	ldr	r2, [pc, #184]	@ (8015998 <etharp_output_to_arp_index+0x124>)
 80158e0:	4413      	add	r3, r2
 80158e2:	3304      	adds	r3, #4
 80158e4:	4619      	mov	r1, r3
 80158e6:	68f8      	ldr	r0, [r7, #12]
 80158e8:	f000 fb4c 	bl	8015f84 <etharp_request>
 80158ec:	4603      	mov	r3, r0
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d138      	bne.n	8015964 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80158f2:	79fa      	ldrb	r2, [r7, #7]
 80158f4:	4928      	ldr	r1, [pc, #160]	@ (8015998 <etharp_output_to_arp_index+0x124>)
 80158f6:	4613      	mov	r3, r2
 80158f8:	005b      	lsls	r3, r3, #1
 80158fa:	4413      	add	r3, r2
 80158fc:	00db      	lsls	r3, r3, #3
 80158fe:	440b      	add	r3, r1
 8015900:	3314      	adds	r3, #20
 8015902:	2203      	movs	r2, #3
 8015904:	701a      	strb	r2, [r3, #0]
 8015906:	e02d      	b.n	8015964 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015908:	79fa      	ldrb	r2, [r7, #7]
 801590a:	4923      	ldr	r1, [pc, #140]	@ (8015998 <etharp_output_to_arp_index+0x124>)
 801590c:	4613      	mov	r3, r2
 801590e:	005b      	lsls	r3, r3, #1
 8015910:	4413      	add	r3, r2
 8015912:	00db      	lsls	r3, r3, #3
 8015914:	440b      	add	r3, r1
 8015916:	3312      	adds	r3, #18
 8015918:	881b      	ldrh	r3, [r3, #0]
 801591a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801591e:	d321      	bcc.n	8015964 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015920:	79fa      	ldrb	r2, [r7, #7]
 8015922:	4613      	mov	r3, r2
 8015924:	005b      	lsls	r3, r3, #1
 8015926:	4413      	add	r3, r2
 8015928:	00db      	lsls	r3, r3, #3
 801592a:	4a1b      	ldr	r2, [pc, #108]	@ (8015998 <etharp_output_to_arp_index+0x124>)
 801592c:	4413      	add	r3, r2
 801592e:	1d19      	adds	r1, r3, #4
 8015930:	79fa      	ldrb	r2, [r7, #7]
 8015932:	4613      	mov	r3, r2
 8015934:	005b      	lsls	r3, r3, #1
 8015936:	4413      	add	r3, r2
 8015938:	00db      	lsls	r3, r3, #3
 801593a:	3308      	adds	r3, #8
 801593c:	4a16      	ldr	r2, [pc, #88]	@ (8015998 <etharp_output_to_arp_index+0x124>)
 801593e:	4413      	add	r3, r2
 8015940:	3304      	adds	r3, #4
 8015942:	461a      	mov	r2, r3
 8015944:	68f8      	ldr	r0, [r7, #12]
 8015946:	f000 fafb 	bl	8015f40 <etharp_request_dst>
 801594a:	4603      	mov	r3, r0
 801594c:	2b00      	cmp	r3, #0
 801594e:	d109      	bne.n	8015964 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015950:	79fa      	ldrb	r2, [r7, #7]
 8015952:	4911      	ldr	r1, [pc, #68]	@ (8015998 <etharp_output_to_arp_index+0x124>)
 8015954:	4613      	mov	r3, r2
 8015956:	005b      	lsls	r3, r3, #1
 8015958:	4413      	add	r3, r2
 801595a:	00db      	lsls	r3, r3, #3
 801595c:	440b      	add	r3, r1
 801595e:	3314      	adds	r3, #20
 8015960:	2203      	movs	r2, #3
 8015962:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801596a:	79fa      	ldrb	r2, [r7, #7]
 801596c:	4613      	mov	r3, r2
 801596e:	005b      	lsls	r3, r3, #1
 8015970:	4413      	add	r3, r2
 8015972:	00db      	lsls	r3, r3, #3
 8015974:	3308      	adds	r3, #8
 8015976:	4a08      	ldr	r2, [pc, #32]	@ (8015998 <etharp_output_to_arp_index+0x124>)
 8015978:	4413      	add	r3, r2
 801597a:	3304      	adds	r3, #4
 801597c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015980:	9200      	str	r2, [sp, #0]
 8015982:	460a      	mov	r2, r1
 8015984:	68b9      	ldr	r1, [r7, #8]
 8015986:	68f8      	ldr	r0, [r7, #12]
 8015988:	f001 fe40 	bl	801760c <ethernet_output>
 801598c:	4603      	mov	r3, r0
}
 801598e:	4618      	mov	r0, r3
 8015990:	3710      	adds	r7, #16
 8015992:	46bd      	mov	sp, r7
 8015994:	bd80      	pop	{r7, pc}
 8015996:	bf00      	nop
 8015998:	20010058 	.word	0x20010058
 801599c:	0801c0e8 	.word	0x0801c0e8
 80159a0:	0801c258 	.word	0x0801c258
 80159a4:	0801c160 	.word	0x0801c160

080159a8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b08a      	sub	sp, #40	@ 0x28
 80159ac:	af02      	add	r7, sp, #8
 80159ae:	60f8      	str	r0, [r7, #12]
 80159b0:	60b9      	str	r1, [r7, #8]
 80159b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d106      	bne.n	80159cc <etharp_output+0x24>
 80159be:	4b73      	ldr	r3, [pc, #460]	@ (8015b8c <etharp_output+0x1e4>)
 80159c0:	f240 321e 	movw	r2, #798	@ 0x31e
 80159c4:	4972      	ldr	r1, [pc, #456]	@ (8015b90 <etharp_output+0x1e8>)
 80159c6:	4873      	ldr	r0, [pc, #460]	@ (8015b94 <etharp_output+0x1ec>)
 80159c8:	f002 f94a 	bl	8017c60 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80159cc:	68bb      	ldr	r3, [r7, #8]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d106      	bne.n	80159e0 <etharp_output+0x38>
 80159d2:	4b6e      	ldr	r3, [pc, #440]	@ (8015b8c <etharp_output+0x1e4>)
 80159d4:	f240 321f 	movw	r2, #799	@ 0x31f
 80159d8:	496f      	ldr	r1, [pc, #444]	@ (8015b98 <etharp_output+0x1f0>)
 80159da:	486e      	ldr	r0, [pc, #440]	@ (8015b94 <etharp_output+0x1ec>)
 80159dc:	f002 f940 	bl	8017c60 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d106      	bne.n	80159f4 <etharp_output+0x4c>
 80159e6:	4b69      	ldr	r3, [pc, #420]	@ (8015b8c <etharp_output+0x1e4>)
 80159e8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80159ec:	496b      	ldr	r1, [pc, #428]	@ (8015b9c <etharp_output+0x1f4>)
 80159ee:	4869      	ldr	r0, [pc, #420]	@ (8015b94 <etharp_output+0x1ec>)
 80159f0:	f002 f936 	bl	8017c60 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	68f9      	ldr	r1, [r7, #12]
 80159fa:	4618      	mov	r0, r3
 80159fc:	f000 fef8 	bl	80167f0 <ip4_addr_isbroadcast_u32>
 8015a00:	4603      	mov	r3, r0
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d002      	beq.n	8015a0c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015a06:	4b66      	ldr	r3, [pc, #408]	@ (8015ba0 <etharp_output+0x1f8>)
 8015a08:	61fb      	str	r3, [r7, #28]
 8015a0a:	e0af      	b.n	8015b6c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015a14:	2be0      	cmp	r3, #224	@ 0xe0
 8015a16:	d118      	bne.n	8015a4a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015a18:	2301      	movs	r3, #1
 8015a1a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015a20:	235e      	movs	r3, #94	@ 0x5e
 8015a22:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	3301      	adds	r3, #1
 8015a28:	781b      	ldrb	r3, [r3, #0]
 8015a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015a2e:	b2db      	uxtb	r3, r3
 8015a30:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	3302      	adds	r3, #2
 8015a36:	781b      	ldrb	r3, [r3, #0]
 8015a38:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	3303      	adds	r3, #3
 8015a3e:	781b      	ldrb	r3, [r3, #0]
 8015a40:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015a42:	f107 0310 	add.w	r3, r7, #16
 8015a46:	61fb      	str	r3, [r7, #28]
 8015a48:	e090      	b.n	8015b6c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	681a      	ldr	r2, [r3, #0]
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	3304      	adds	r3, #4
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	405a      	eors	r2, r3
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	3308      	adds	r3, #8
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	4013      	ands	r3, r2
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d012      	beq.n	8015a88 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015a68:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8015a6c:	4293      	cmp	r3, r2
 8015a6e:	d00b      	beq.n	8015a88 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	330c      	adds	r3, #12
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d003      	beq.n	8015a82 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	330c      	adds	r3, #12
 8015a7e:	61bb      	str	r3, [r7, #24]
 8015a80:	e002      	b.n	8015a88 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015a82:	f06f 0303 	mvn.w	r3, #3
 8015a86:	e07d      	b.n	8015b84 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015a88:	4b46      	ldr	r3, [pc, #280]	@ (8015ba4 <etharp_output+0x1fc>)
 8015a8a:	781b      	ldrb	r3, [r3, #0]
 8015a8c:	4619      	mov	r1, r3
 8015a8e:	4a46      	ldr	r2, [pc, #280]	@ (8015ba8 <etharp_output+0x200>)
 8015a90:	460b      	mov	r3, r1
 8015a92:	005b      	lsls	r3, r3, #1
 8015a94:	440b      	add	r3, r1
 8015a96:	00db      	lsls	r3, r3, #3
 8015a98:	4413      	add	r3, r2
 8015a9a:	3314      	adds	r3, #20
 8015a9c:	781b      	ldrb	r3, [r3, #0]
 8015a9e:	2b01      	cmp	r3, #1
 8015aa0:	d925      	bls.n	8015aee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015aa2:	4b40      	ldr	r3, [pc, #256]	@ (8015ba4 <etharp_output+0x1fc>)
 8015aa4:	781b      	ldrb	r3, [r3, #0]
 8015aa6:	4619      	mov	r1, r3
 8015aa8:	4a3f      	ldr	r2, [pc, #252]	@ (8015ba8 <etharp_output+0x200>)
 8015aaa:	460b      	mov	r3, r1
 8015aac:	005b      	lsls	r3, r3, #1
 8015aae:	440b      	add	r3, r1
 8015ab0:	00db      	lsls	r3, r3, #3
 8015ab2:	4413      	add	r3, r2
 8015ab4:	3308      	adds	r3, #8
 8015ab6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015ab8:	68fa      	ldr	r2, [r7, #12]
 8015aba:	429a      	cmp	r2, r3
 8015abc:	d117      	bne.n	8015aee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015abe:	69bb      	ldr	r3, [r7, #24]
 8015ac0:	681a      	ldr	r2, [r3, #0]
 8015ac2:	4b38      	ldr	r3, [pc, #224]	@ (8015ba4 <etharp_output+0x1fc>)
 8015ac4:	781b      	ldrb	r3, [r3, #0]
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	4937      	ldr	r1, [pc, #220]	@ (8015ba8 <etharp_output+0x200>)
 8015aca:	4603      	mov	r3, r0
 8015acc:	005b      	lsls	r3, r3, #1
 8015ace:	4403      	add	r3, r0
 8015ad0:	00db      	lsls	r3, r3, #3
 8015ad2:	440b      	add	r3, r1
 8015ad4:	3304      	adds	r3, #4
 8015ad6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015ad8:	429a      	cmp	r2, r3
 8015ada:	d108      	bne.n	8015aee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015adc:	4b31      	ldr	r3, [pc, #196]	@ (8015ba4 <etharp_output+0x1fc>)
 8015ade:	781b      	ldrb	r3, [r3, #0]
 8015ae0:	461a      	mov	r2, r3
 8015ae2:	68b9      	ldr	r1, [r7, #8]
 8015ae4:	68f8      	ldr	r0, [r7, #12]
 8015ae6:	f7ff fec5 	bl	8015874 <etharp_output_to_arp_index>
 8015aea:	4603      	mov	r3, r0
 8015aec:	e04a      	b.n	8015b84 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015aee:	2300      	movs	r3, #0
 8015af0:	75fb      	strb	r3, [r7, #23]
 8015af2:	e031      	b.n	8015b58 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015af4:	7dfa      	ldrb	r2, [r7, #23]
 8015af6:	492c      	ldr	r1, [pc, #176]	@ (8015ba8 <etharp_output+0x200>)
 8015af8:	4613      	mov	r3, r2
 8015afa:	005b      	lsls	r3, r3, #1
 8015afc:	4413      	add	r3, r2
 8015afe:	00db      	lsls	r3, r3, #3
 8015b00:	440b      	add	r3, r1
 8015b02:	3314      	adds	r3, #20
 8015b04:	781b      	ldrb	r3, [r3, #0]
 8015b06:	2b01      	cmp	r3, #1
 8015b08:	d923      	bls.n	8015b52 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015b0a:	7dfa      	ldrb	r2, [r7, #23]
 8015b0c:	4926      	ldr	r1, [pc, #152]	@ (8015ba8 <etharp_output+0x200>)
 8015b0e:	4613      	mov	r3, r2
 8015b10:	005b      	lsls	r3, r3, #1
 8015b12:	4413      	add	r3, r2
 8015b14:	00db      	lsls	r3, r3, #3
 8015b16:	440b      	add	r3, r1
 8015b18:	3308      	adds	r3, #8
 8015b1a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015b1c:	68fa      	ldr	r2, [r7, #12]
 8015b1e:	429a      	cmp	r2, r3
 8015b20:	d117      	bne.n	8015b52 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015b22:	69bb      	ldr	r3, [r7, #24]
 8015b24:	6819      	ldr	r1, [r3, #0]
 8015b26:	7dfa      	ldrb	r2, [r7, #23]
 8015b28:	481f      	ldr	r0, [pc, #124]	@ (8015ba8 <etharp_output+0x200>)
 8015b2a:	4613      	mov	r3, r2
 8015b2c:	005b      	lsls	r3, r3, #1
 8015b2e:	4413      	add	r3, r2
 8015b30:	00db      	lsls	r3, r3, #3
 8015b32:	4403      	add	r3, r0
 8015b34:	3304      	adds	r3, #4
 8015b36:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015b38:	4299      	cmp	r1, r3
 8015b3a:	d10a      	bne.n	8015b52 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015b3c:	4a19      	ldr	r2, [pc, #100]	@ (8015ba4 <etharp_output+0x1fc>)
 8015b3e:	7dfb      	ldrb	r3, [r7, #23]
 8015b40:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015b42:	7dfb      	ldrb	r3, [r7, #23]
 8015b44:	461a      	mov	r2, r3
 8015b46:	68b9      	ldr	r1, [r7, #8]
 8015b48:	68f8      	ldr	r0, [r7, #12]
 8015b4a:	f7ff fe93 	bl	8015874 <etharp_output_to_arp_index>
 8015b4e:	4603      	mov	r3, r0
 8015b50:	e018      	b.n	8015b84 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015b52:	7dfb      	ldrb	r3, [r7, #23]
 8015b54:	3301      	adds	r3, #1
 8015b56:	75fb      	strb	r3, [r7, #23]
 8015b58:	7dfb      	ldrb	r3, [r7, #23]
 8015b5a:	2b09      	cmp	r3, #9
 8015b5c:	d9ca      	bls.n	8015af4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015b5e:	68ba      	ldr	r2, [r7, #8]
 8015b60:	69b9      	ldr	r1, [r7, #24]
 8015b62:	68f8      	ldr	r0, [r7, #12]
 8015b64:	f000 f822 	bl	8015bac <etharp_query>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	e00b      	b.n	8015b84 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8015b72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015b76:	9300      	str	r3, [sp, #0]
 8015b78:	69fb      	ldr	r3, [r7, #28]
 8015b7a:	68b9      	ldr	r1, [r7, #8]
 8015b7c:	68f8      	ldr	r0, [r7, #12]
 8015b7e:	f001 fd45 	bl	801760c <ethernet_output>
 8015b82:	4603      	mov	r3, r0
}
 8015b84:	4618      	mov	r0, r3
 8015b86:	3720      	adds	r7, #32
 8015b88:	46bd      	mov	sp, r7
 8015b8a:	bd80      	pop	{r7, pc}
 8015b8c:	0801c0e8 	.word	0x0801c0e8
 8015b90:	0801c238 	.word	0x0801c238
 8015b94:	0801c160 	.word	0x0801c160
 8015b98:	0801c288 	.word	0x0801c288
 8015b9c:	0801c228 	.word	0x0801c228
 8015ba0:	0801c8e8 	.word	0x0801c8e8
 8015ba4:	20010148 	.word	0x20010148
 8015ba8:	20010058 	.word	0x20010058

08015bac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b08c      	sub	sp, #48	@ 0x30
 8015bb0:	af02      	add	r7, sp, #8
 8015bb2:	60f8      	str	r0, [r7, #12]
 8015bb4:	60b9      	str	r1, [r7, #8]
 8015bb6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	3326      	adds	r3, #38	@ 0x26
 8015bbc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015bbe:	23ff      	movs	r3, #255	@ 0xff
 8015bc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8015bc4:	2300      	movs	r3, #0
 8015bc6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015bc8:	68bb      	ldr	r3, [r7, #8]
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	68f9      	ldr	r1, [r7, #12]
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f000 fe0e 	bl	80167f0 <ip4_addr_isbroadcast_u32>
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d10c      	bne.n	8015bf4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015bda:	68bb      	ldr	r3, [r7, #8]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015be2:	2be0      	cmp	r3, #224	@ 0xe0
 8015be4:	d006      	beq.n	8015bf4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015be6:	68bb      	ldr	r3, [r7, #8]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d003      	beq.n	8015bf4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015bec:	68bb      	ldr	r3, [r7, #8]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d102      	bne.n	8015bfa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015bf4:	f06f 030f 	mvn.w	r3, #15
 8015bf8:	e101      	b.n	8015dfe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015bfa:	68fa      	ldr	r2, [r7, #12]
 8015bfc:	2101      	movs	r1, #1
 8015bfe:	68b8      	ldr	r0, [r7, #8]
 8015c00:	f7ff fb60 	bl	80152c4 <etharp_find_entry>
 8015c04:	4603      	mov	r3, r0
 8015c06:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015c08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	da02      	bge.n	8015c16 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015c10:	8a7b      	ldrh	r3, [r7, #18]
 8015c12:	b25b      	sxtb	r3, r3
 8015c14:	e0f3      	b.n	8015dfe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015c16:	8a7b      	ldrh	r3, [r7, #18]
 8015c18:	2b7e      	cmp	r3, #126	@ 0x7e
 8015c1a:	d906      	bls.n	8015c2a <etharp_query+0x7e>
 8015c1c:	4b7a      	ldr	r3, [pc, #488]	@ (8015e08 <etharp_query+0x25c>)
 8015c1e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8015c22:	497a      	ldr	r1, [pc, #488]	@ (8015e0c <etharp_query+0x260>)
 8015c24:	487a      	ldr	r0, [pc, #488]	@ (8015e10 <etharp_query+0x264>)
 8015c26:	f002 f81b 	bl	8017c60 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015c2a:	8a7b      	ldrh	r3, [r7, #18]
 8015c2c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015c2e:	7c7a      	ldrb	r2, [r7, #17]
 8015c30:	4978      	ldr	r1, [pc, #480]	@ (8015e14 <etharp_query+0x268>)
 8015c32:	4613      	mov	r3, r2
 8015c34:	005b      	lsls	r3, r3, #1
 8015c36:	4413      	add	r3, r2
 8015c38:	00db      	lsls	r3, r3, #3
 8015c3a:	440b      	add	r3, r1
 8015c3c:	3314      	adds	r3, #20
 8015c3e:	781b      	ldrb	r3, [r3, #0]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d115      	bne.n	8015c70 <etharp_query+0xc4>
    is_new_entry = 1;
 8015c44:	2301      	movs	r3, #1
 8015c46:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015c48:	7c7a      	ldrb	r2, [r7, #17]
 8015c4a:	4972      	ldr	r1, [pc, #456]	@ (8015e14 <etharp_query+0x268>)
 8015c4c:	4613      	mov	r3, r2
 8015c4e:	005b      	lsls	r3, r3, #1
 8015c50:	4413      	add	r3, r2
 8015c52:	00db      	lsls	r3, r3, #3
 8015c54:	440b      	add	r3, r1
 8015c56:	3314      	adds	r3, #20
 8015c58:	2201      	movs	r2, #1
 8015c5a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015c5c:	7c7a      	ldrb	r2, [r7, #17]
 8015c5e:	496d      	ldr	r1, [pc, #436]	@ (8015e14 <etharp_query+0x268>)
 8015c60:	4613      	mov	r3, r2
 8015c62:	005b      	lsls	r3, r3, #1
 8015c64:	4413      	add	r3, r2
 8015c66:	00db      	lsls	r3, r3, #3
 8015c68:	440b      	add	r3, r1
 8015c6a:	3308      	adds	r3, #8
 8015c6c:	68fa      	ldr	r2, [r7, #12]
 8015c6e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015c70:	7c7a      	ldrb	r2, [r7, #17]
 8015c72:	4968      	ldr	r1, [pc, #416]	@ (8015e14 <etharp_query+0x268>)
 8015c74:	4613      	mov	r3, r2
 8015c76:	005b      	lsls	r3, r3, #1
 8015c78:	4413      	add	r3, r2
 8015c7a:	00db      	lsls	r3, r3, #3
 8015c7c:	440b      	add	r3, r1
 8015c7e:	3314      	adds	r3, #20
 8015c80:	781b      	ldrb	r3, [r3, #0]
 8015c82:	2b01      	cmp	r3, #1
 8015c84:	d011      	beq.n	8015caa <etharp_query+0xfe>
 8015c86:	7c7a      	ldrb	r2, [r7, #17]
 8015c88:	4962      	ldr	r1, [pc, #392]	@ (8015e14 <etharp_query+0x268>)
 8015c8a:	4613      	mov	r3, r2
 8015c8c:	005b      	lsls	r3, r3, #1
 8015c8e:	4413      	add	r3, r2
 8015c90:	00db      	lsls	r3, r3, #3
 8015c92:	440b      	add	r3, r1
 8015c94:	3314      	adds	r3, #20
 8015c96:	781b      	ldrb	r3, [r3, #0]
 8015c98:	2b01      	cmp	r3, #1
 8015c9a:	d806      	bhi.n	8015caa <etharp_query+0xfe>
 8015c9c:	4b5a      	ldr	r3, [pc, #360]	@ (8015e08 <etharp_query+0x25c>)
 8015c9e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8015ca2:	495d      	ldr	r1, [pc, #372]	@ (8015e18 <etharp_query+0x26c>)
 8015ca4:	485a      	ldr	r0, [pc, #360]	@ (8015e10 <etharp_query+0x264>)
 8015ca6:	f001 ffdb 	bl	8017c60 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015caa:	6a3b      	ldr	r3, [r7, #32]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d102      	bne.n	8015cb6 <etharp_query+0x10a>
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d10c      	bne.n	8015cd0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015cb6:	68b9      	ldr	r1, [r7, #8]
 8015cb8:	68f8      	ldr	r0, [r7, #12]
 8015cba:	f000 f963 	bl	8015f84 <etharp_request>
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d102      	bne.n	8015cd0 <etharp_query+0x124>
      return result;
 8015cca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015cce:	e096      	b.n	8015dfe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d106      	bne.n	8015ce4 <etharp_query+0x138>
 8015cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8015e08 <etharp_query+0x25c>)
 8015cd8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8015cdc:	494f      	ldr	r1, [pc, #316]	@ (8015e1c <etharp_query+0x270>)
 8015cde:	484c      	ldr	r0, [pc, #304]	@ (8015e10 <etharp_query+0x264>)
 8015ce0:	f001 ffbe 	bl	8017c60 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015ce4:	7c7a      	ldrb	r2, [r7, #17]
 8015ce6:	494b      	ldr	r1, [pc, #300]	@ (8015e14 <etharp_query+0x268>)
 8015ce8:	4613      	mov	r3, r2
 8015cea:	005b      	lsls	r3, r3, #1
 8015cec:	4413      	add	r3, r2
 8015cee:	00db      	lsls	r3, r3, #3
 8015cf0:	440b      	add	r3, r1
 8015cf2:	3314      	adds	r3, #20
 8015cf4:	781b      	ldrb	r3, [r3, #0]
 8015cf6:	2b01      	cmp	r3, #1
 8015cf8:	d917      	bls.n	8015d2a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015cfa:	4a49      	ldr	r2, [pc, #292]	@ (8015e20 <etharp_query+0x274>)
 8015cfc:	7c7b      	ldrb	r3, [r7, #17]
 8015cfe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015d00:	7c7a      	ldrb	r2, [r7, #17]
 8015d02:	4613      	mov	r3, r2
 8015d04:	005b      	lsls	r3, r3, #1
 8015d06:	4413      	add	r3, r2
 8015d08:	00db      	lsls	r3, r3, #3
 8015d0a:	3308      	adds	r3, #8
 8015d0c:	4a41      	ldr	r2, [pc, #260]	@ (8015e14 <etharp_query+0x268>)
 8015d0e:	4413      	add	r3, r2
 8015d10:	3304      	adds	r3, #4
 8015d12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015d16:	9200      	str	r2, [sp, #0]
 8015d18:	697a      	ldr	r2, [r7, #20]
 8015d1a:	6879      	ldr	r1, [r7, #4]
 8015d1c:	68f8      	ldr	r0, [r7, #12]
 8015d1e:	f001 fc75 	bl	801760c <ethernet_output>
 8015d22:	4603      	mov	r3, r0
 8015d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015d28:	e067      	b.n	8015dfa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015d2a:	7c7a      	ldrb	r2, [r7, #17]
 8015d2c:	4939      	ldr	r1, [pc, #228]	@ (8015e14 <etharp_query+0x268>)
 8015d2e:	4613      	mov	r3, r2
 8015d30:	005b      	lsls	r3, r3, #1
 8015d32:	4413      	add	r3, r2
 8015d34:	00db      	lsls	r3, r3, #3
 8015d36:	440b      	add	r3, r1
 8015d38:	3314      	adds	r3, #20
 8015d3a:	781b      	ldrb	r3, [r3, #0]
 8015d3c:	2b01      	cmp	r3, #1
 8015d3e:	d15c      	bne.n	8015dfa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015d40:	2300      	movs	r3, #0
 8015d42:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015d48:	e01c      	b.n	8015d84 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015d4a:	69fb      	ldr	r3, [r7, #28]
 8015d4c:	895a      	ldrh	r2, [r3, #10]
 8015d4e:	69fb      	ldr	r3, [r7, #28]
 8015d50:	891b      	ldrh	r3, [r3, #8]
 8015d52:	429a      	cmp	r2, r3
 8015d54:	d10a      	bne.n	8015d6c <etharp_query+0x1c0>
 8015d56:	69fb      	ldr	r3, [r7, #28]
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d006      	beq.n	8015d6c <etharp_query+0x1c0>
 8015d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8015e08 <etharp_query+0x25c>)
 8015d60:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8015d64:	492f      	ldr	r1, [pc, #188]	@ (8015e24 <etharp_query+0x278>)
 8015d66:	482a      	ldr	r0, [pc, #168]	@ (8015e10 <etharp_query+0x264>)
 8015d68:	f001 ff7a 	bl	8017c60 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015d6c:	69fb      	ldr	r3, [r7, #28]
 8015d6e:	7b1b      	ldrb	r3, [r3, #12]
 8015d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d002      	beq.n	8015d7e <etharp_query+0x1d2>
        copy_needed = 1;
 8015d78:	2301      	movs	r3, #1
 8015d7a:	61bb      	str	r3, [r7, #24]
        break;
 8015d7c:	e005      	b.n	8015d8a <etharp_query+0x1de>
      }
      p = p->next;
 8015d7e:	69fb      	ldr	r3, [r7, #28]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015d84:	69fb      	ldr	r3, [r7, #28]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d1df      	bne.n	8015d4a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015d8a:	69bb      	ldr	r3, [r7, #24]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d007      	beq.n	8015da0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015d90:	687a      	ldr	r2, [r7, #4]
 8015d92:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8015d96:	200e      	movs	r0, #14
 8015d98:	f7f8 fc5e 	bl	800e658 <pbuf_clone>
 8015d9c:	61f8      	str	r0, [r7, #28]
 8015d9e:	e004      	b.n	8015daa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015da4:	69f8      	ldr	r0, [r7, #28]
 8015da6:	f7f8 fa95 	bl	800e2d4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015daa:	69fb      	ldr	r3, [r7, #28]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d021      	beq.n	8015df4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015db0:	7c7a      	ldrb	r2, [r7, #17]
 8015db2:	4918      	ldr	r1, [pc, #96]	@ (8015e14 <etharp_query+0x268>)
 8015db4:	4613      	mov	r3, r2
 8015db6:	005b      	lsls	r3, r3, #1
 8015db8:	4413      	add	r3, r2
 8015dba:	00db      	lsls	r3, r3, #3
 8015dbc:	440b      	add	r3, r1
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d00a      	beq.n	8015dda <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015dc4:	7c7a      	ldrb	r2, [r7, #17]
 8015dc6:	4913      	ldr	r1, [pc, #76]	@ (8015e14 <etharp_query+0x268>)
 8015dc8:	4613      	mov	r3, r2
 8015dca:	005b      	lsls	r3, r3, #1
 8015dcc:	4413      	add	r3, r2
 8015dce:	00db      	lsls	r3, r3, #3
 8015dd0:	440b      	add	r3, r1
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f7f8 f9d7 	bl	800e188 <pbuf_free>
      }
      arp_table[i].q = p;
 8015dda:	7c7a      	ldrb	r2, [r7, #17]
 8015ddc:	490d      	ldr	r1, [pc, #52]	@ (8015e14 <etharp_query+0x268>)
 8015dde:	4613      	mov	r3, r2
 8015de0:	005b      	lsls	r3, r3, #1
 8015de2:	4413      	add	r3, r2
 8015de4:	00db      	lsls	r3, r3, #3
 8015de6:	440b      	add	r3, r1
 8015de8:	69fa      	ldr	r2, [r7, #28]
 8015dea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015dec:	2300      	movs	r3, #0
 8015dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015df2:	e002      	b.n	8015dfa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015df4:	23ff      	movs	r3, #255	@ 0xff
 8015df6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8015dfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3728      	adds	r7, #40	@ 0x28
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}
 8015e06:	bf00      	nop
 8015e08:	0801c0e8 	.word	0x0801c0e8
 8015e0c:	0801c294 	.word	0x0801c294
 8015e10:	0801c160 	.word	0x0801c160
 8015e14:	20010058 	.word	0x20010058
 8015e18:	0801c2a4 	.word	0x0801c2a4
 8015e1c:	0801c288 	.word	0x0801c288
 8015e20:	20010148 	.word	0x20010148
 8015e24:	0801c2cc 	.word	0x0801c2cc

08015e28 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b08a      	sub	sp, #40	@ 0x28
 8015e2c:	af02      	add	r7, sp, #8
 8015e2e:	60f8      	str	r0, [r7, #12]
 8015e30:	60b9      	str	r1, [r7, #8]
 8015e32:	607a      	str	r2, [r7, #4]
 8015e34:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015e36:	2300      	movs	r3, #0
 8015e38:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d106      	bne.n	8015e4e <etharp_raw+0x26>
 8015e40:	4b3a      	ldr	r3, [pc, #232]	@ (8015f2c <etharp_raw+0x104>)
 8015e42:	f240 4257 	movw	r2, #1111	@ 0x457
 8015e46:	493a      	ldr	r1, [pc, #232]	@ (8015f30 <etharp_raw+0x108>)
 8015e48:	483a      	ldr	r0, [pc, #232]	@ (8015f34 <etharp_raw+0x10c>)
 8015e4a:	f001 ff09 	bl	8017c60 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015e4e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015e52:	211c      	movs	r1, #28
 8015e54:	200e      	movs	r0, #14
 8015e56:	f7f7 feb3 	bl	800dbc0 <pbuf_alloc>
 8015e5a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015e5c:	69bb      	ldr	r3, [r7, #24]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d102      	bne.n	8015e68 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015e62:	f04f 33ff 	mov.w	r3, #4294967295
 8015e66:	e05d      	b.n	8015f24 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015e68:	69bb      	ldr	r3, [r7, #24]
 8015e6a:	895b      	ldrh	r3, [r3, #10]
 8015e6c:	2b1b      	cmp	r3, #27
 8015e6e:	d806      	bhi.n	8015e7e <etharp_raw+0x56>
 8015e70:	4b2e      	ldr	r3, [pc, #184]	@ (8015f2c <etharp_raw+0x104>)
 8015e72:	f240 4262 	movw	r2, #1122	@ 0x462
 8015e76:	4930      	ldr	r1, [pc, #192]	@ (8015f38 <etharp_raw+0x110>)
 8015e78:	482e      	ldr	r0, [pc, #184]	@ (8015f34 <etharp_raw+0x10c>)
 8015e7a:	f001 fef1 	bl	8017c60 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015e7e:	69bb      	ldr	r3, [r7, #24]
 8015e80:	685b      	ldr	r3, [r3, #4]
 8015e82:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015e84:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015e86:	4618      	mov	r0, r3
 8015e88:	f7f6 fd8c 	bl	800c9a4 <lwip_htons>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	461a      	mov	r2, r3
 8015e90:	697b      	ldr	r3, [r7, #20]
 8015e92:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015e9a:	2b06      	cmp	r3, #6
 8015e9c:	d006      	beq.n	8015eac <etharp_raw+0x84>
 8015e9e:	4b23      	ldr	r3, [pc, #140]	@ (8015f2c <etharp_raw+0x104>)
 8015ea0:	f240 4269 	movw	r2, #1129	@ 0x469
 8015ea4:	4925      	ldr	r1, [pc, #148]	@ (8015f3c <etharp_raw+0x114>)
 8015ea6:	4823      	ldr	r0, [pc, #140]	@ (8015f34 <etharp_raw+0x10c>)
 8015ea8:	f001 feda 	bl	8017c60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015eac:	697b      	ldr	r3, [r7, #20]
 8015eae:	3308      	adds	r3, #8
 8015eb0:	2206      	movs	r2, #6
 8015eb2:	6839      	ldr	r1, [r7, #0]
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f002 f83e 	bl	8017f36 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015eba:	697b      	ldr	r3, [r7, #20]
 8015ebc:	3312      	adds	r3, #18
 8015ebe:	2206      	movs	r2, #6
 8015ec0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	f002 f837 	bl	8017f36 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015ec8:	697b      	ldr	r3, [r7, #20]
 8015eca:	330e      	adds	r3, #14
 8015ecc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ece:	6812      	ldr	r2, [r2, #0]
 8015ed0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015ed2:	697b      	ldr	r3, [r7, #20]
 8015ed4:	3318      	adds	r3, #24
 8015ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015ed8:	6812      	ldr	r2, [r2, #0]
 8015eda:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015edc:	697b      	ldr	r3, [r7, #20]
 8015ede:	2200      	movs	r2, #0
 8015ee0:	701a      	strb	r2, [r3, #0]
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	f042 0201 	orr.w	r2, r2, #1
 8015ee8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015eea:	697b      	ldr	r3, [r7, #20]
 8015eec:	2200      	movs	r2, #0
 8015eee:	f042 0208 	orr.w	r2, r2, #8
 8015ef2:	709a      	strb	r2, [r3, #2]
 8015ef4:	2200      	movs	r2, #0
 8015ef6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015ef8:	697b      	ldr	r3, [r7, #20]
 8015efa:	2206      	movs	r2, #6
 8015efc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015efe:	697b      	ldr	r3, [r7, #20]
 8015f00:	2204      	movs	r2, #4
 8015f02:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015f04:	f640 0306 	movw	r3, #2054	@ 0x806
 8015f08:	9300      	str	r3, [sp, #0]
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	68ba      	ldr	r2, [r7, #8]
 8015f0e:	69b9      	ldr	r1, [r7, #24]
 8015f10:	68f8      	ldr	r0, [r7, #12]
 8015f12:	f001 fb7b 	bl	801760c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015f16:	69b8      	ldr	r0, [r7, #24]
 8015f18:	f7f8 f936 	bl	800e188 <pbuf_free>
  p = NULL;
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015f20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015f24:	4618      	mov	r0, r3
 8015f26:	3720      	adds	r7, #32
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	bd80      	pop	{r7, pc}
 8015f2c:	0801c0e8 	.word	0x0801c0e8
 8015f30:	0801c238 	.word	0x0801c238
 8015f34:	0801c160 	.word	0x0801c160
 8015f38:	0801c2e8 	.word	0x0801c2e8
 8015f3c:	0801c31c 	.word	0x0801c31c

08015f40 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b088      	sub	sp, #32
 8015f44:	af04      	add	r7, sp, #16
 8015f46:	60f8      	str	r0, [r7, #12]
 8015f48:	60b9      	str	r1, [r7, #8]
 8015f4a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015f5c:	2201      	movs	r2, #1
 8015f5e:	9203      	str	r2, [sp, #12]
 8015f60:	68ba      	ldr	r2, [r7, #8]
 8015f62:	9202      	str	r2, [sp, #8]
 8015f64:	4a06      	ldr	r2, [pc, #24]	@ (8015f80 <etharp_request_dst+0x40>)
 8015f66:	9201      	str	r2, [sp, #4]
 8015f68:	9300      	str	r3, [sp, #0]
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	687a      	ldr	r2, [r7, #4]
 8015f6e:	68f8      	ldr	r0, [r7, #12]
 8015f70:	f7ff ff5a 	bl	8015e28 <etharp_raw>
 8015f74:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015f76:	4618      	mov	r0, r3
 8015f78:	3710      	adds	r7, #16
 8015f7a:	46bd      	mov	sp, r7
 8015f7c:	bd80      	pop	{r7, pc}
 8015f7e:	bf00      	nop
 8015f80:	0801c8f0 	.word	0x0801c8f0

08015f84 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b082      	sub	sp, #8
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
 8015f8c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015f8e:	4a05      	ldr	r2, [pc, #20]	@ (8015fa4 <etharp_request+0x20>)
 8015f90:	6839      	ldr	r1, [r7, #0]
 8015f92:	6878      	ldr	r0, [r7, #4]
 8015f94:	f7ff ffd4 	bl	8015f40 <etharp_request_dst>
 8015f98:	4603      	mov	r3, r0
}
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	3708      	adds	r7, #8
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	bd80      	pop	{r7, pc}
 8015fa2:	bf00      	nop
 8015fa4:	0801c8e8 	.word	0x0801c8e8

08015fa8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b08e      	sub	sp, #56	@ 0x38
 8015fac:	af04      	add	r7, sp, #16
 8015fae:	6078      	str	r0, [r7, #4]
 8015fb0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015fb2:	4b79      	ldr	r3, [pc, #484]	@ (8016198 <icmp_input+0x1f0>)
 8015fb4:	689b      	ldr	r3, [r3, #8]
 8015fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fba:	781b      	ldrb	r3, [r3, #0]
 8015fbc:	f003 030f 	and.w	r3, r3, #15
 8015fc0:	b2db      	uxtb	r3, r3
 8015fc2:	009b      	lsls	r3, r3, #2
 8015fc4:	b2db      	uxtb	r3, r3
 8015fc6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8015fc8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015fca:	2b13      	cmp	r3, #19
 8015fcc:	f240 80cd 	bls.w	801616a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	895b      	ldrh	r3, [r3, #10]
 8015fd4:	2b03      	cmp	r3, #3
 8015fd6:	f240 80ca 	bls.w	801616e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	685b      	ldr	r3, [r3, #4]
 8015fde:	781b      	ldrb	r3, [r3, #0]
 8015fe0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015fe4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	f000 80b7 	beq.w	801615c <icmp_input+0x1b4>
 8015fee:	2b08      	cmp	r3, #8
 8015ff0:	f040 80b7 	bne.w	8016162 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015ff4:	4b69      	ldr	r3, [pc, #420]	@ (801619c <icmp_input+0x1f4>)
 8015ff6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015ff8:	4b67      	ldr	r3, [pc, #412]	@ (8016198 <icmp_input+0x1f0>)
 8015ffa:	695b      	ldr	r3, [r3, #20]
 8015ffc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016000:	2be0      	cmp	r3, #224	@ 0xe0
 8016002:	f000 80bb 	beq.w	801617c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016006:	4b64      	ldr	r3, [pc, #400]	@ (8016198 <icmp_input+0x1f0>)
 8016008:	695b      	ldr	r3, [r3, #20]
 801600a:	4a63      	ldr	r2, [pc, #396]	@ (8016198 <icmp_input+0x1f0>)
 801600c:	6812      	ldr	r2, [r2, #0]
 801600e:	4611      	mov	r1, r2
 8016010:	4618      	mov	r0, r3
 8016012:	f000 fbed 	bl	80167f0 <ip4_addr_isbroadcast_u32>
 8016016:	4603      	mov	r3, r0
 8016018:	2b00      	cmp	r3, #0
 801601a:	f040 80b1 	bne.w	8016180 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	891b      	ldrh	r3, [r3, #8]
 8016022:	2b07      	cmp	r3, #7
 8016024:	f240 80a5 	bls.w	8016172 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016028:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801602a:	330e      	adds	r3, #14
 801602c:	4619      	mov	r1, r3
 801602e:	6878      	ldr	r0, [r7, #4]
 8016030:	f7f8 f814 	bl	800e05c <pbuf_add_header>
 8016034:	4603      	mov	r3, r0
 8016036:	2b00      	cmp	r3, #0
 8016038:	d04b      	beq.n	80160d2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	891a      	ldrh	r2, [r3, #8]
 801603e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016040:	4413      	add	r3, r2
 8016042:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	891b      	ldrh	r3, [r3, #8]
 8016048:	8b7a      	ldrh	r2, [r7, #26]
 801604a:	429a      	cmp	r2, r3
 801604c:	f0c0 809a 	bcc.w	8016184 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016050:	8b7b      	ldrh	r3, [r7, #26]
 8016052:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016056:	4619      	mov	r1, r3
 8016058:	200e      	movs	r0, #14
 801605a:	f7f7 fdb1 	bl	800dbc0 <pbuf_alloc>
 801605e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016060:	697b      	ldr	r3, [r7, #20]
 8016062:	2b00      	cmp	r3, #0
 8016064:	f000 8090 	beq.w	8016188 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016068:	697b      	ldr	r3, [r7, #20]
 801606a:	895b      	ldrh	r3, [r3, #10]
 801606c:	461a      	mov	r2, r3
 801606e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016070:	3308      	adds	r3, #8
 8016072:	429a      	cmp	r2, r3
 8016074:	d203      	bcs.n	801607e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016076:	6978      	ldr	r0, [r7, #20]
 8016078:	f7f8 f886 	bl	800e188 <pbuf_free>
          goto icmperr;
 801607c:	e085      	b.n	801618a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801607e:	697b      	ldr	r3, [r7, #20]
 8016080:	685b      	ldr	r3, [r3, #4]
 8016082:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016084:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016086:	4618      	mov	r0, r3
 8016088:	f001 ff55 	bl	8017f36 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801608c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801608e:	4619      	mov	r1, r3
 8016090:	6978      	ldr	r0, [r7, #20]
 8016092:	f7f7 fff3 	bl	800e07c <pbuf_remove_header>
 8016096:	4603      	mov	r3, r0
 8016098:	2b00      	cmp	r3, #0
 801609a:	d009      	beq.n	80160b0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801609c:	4b40      	ldr	r3, [pc, #256]	@ (80161a0 <icmp_input+0x1f8>)
 801609e:	22b6      	movs	r2, #182	@ 0xb6
 80160a0:	4940      	ldr	r1, [pc, #256]	@ (80161a4 <icmp_input+0x1fc>)
 80160a2:	4841      	ldr	r0, [pc, #260]	@ (80161a8 <icmp_input+0x200>)
 80160a4:	f001 fddc 	bl	8017c60 <iprintf>
          pbuf_free(r);
 80160a8:	6978      	ldr	r0, [r7, #20]
 80160aa:	f7f8 f86d 	bl	800e188 <pbuf_free>
          goto icmperr;
 80160ae:	e06c      	b.n	801618a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80160b0:	6879      	ldr	r1, [r7, #4]
 80160b2:	6978      	ldr	r0, [r7, #20]
 80160b4:	f7f8 f98c 	bl	800e3d0 <pbuf_copy>
 80160b8:	4603      	mov	r3, r0
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d003      	beq.n	80160c6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80160be:	6978      	ldr	r0, [r7, #20]
 80160c0:	f7f8 f862 	bl	800e188 <pbuf_free>
          goto icmperr;
 80160c4:	e061      	b.n	801618a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f7f8 f85e 	bl	800e188 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80160cc:	697b      	ldr	r3, [r7, #20]
 80160ce:	607b      	str	r3, [r7, #4]
 80160d0:	e00f      	b.n	80160f2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80160d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80160d4:	330e      	adds	r3, #14
 80160d6:	4619      	mov	r1, r3
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	f7f7 ffcf 	bl	800e07c <pbuf_remove_header>
 80160de:	4603      	mov	r3, r0
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d006      	beq.n	80160f2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80160e4:	4b2e      	ldr	r3, [pc, #184]	@ (80161a0 <icmp_input+0x1f8>)
 80160e6:	22c7      	movs	r2, #199	@ 0xc7
 80160e8:	4930      	ldr	r1, [pc, #192]	@ (80161ac <icmp_input+0x204>)
 80160ea:	482f      	ldr	r0, [pc, #188]	@ (80161a8 <icmp_input+0x200>)
 80160ec:	f001 fdb8 	bl	8017c60 <iprintf>
          goto icmperr;
 80160f0:	e04b      	b.n	801618a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	685b      	ldr	r3, [r3, #4]
 80160f6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80160f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80160fa:	4619      	mov	r1, r3
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	f7f7 ffad 	bl	800e05c <pbuf_add_header>
 8016102:	4603      	mov	r3, r0
 8016104:	2b00      	cmp	r3, #0
 8016106:	d12b      	bne.n	8016160 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	685b      	ldr	r3, [r3, #4]
 801610c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801610e:	69fb      	ldr	r3, [r7, #28]
 8016110:	681a      	ldr	r2, [r3, #0]
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016116:	4b20      	ldr	r3, [pc, #128]	@ (8016198 <icmp_input+0x1f0>)
 8016118:	691a      	ldr	r2, [r3, #16]
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801611e:	693b      	ldr	r3, [r7, #16]
 8016120:	2200      	movs	r2, #0
 8016122:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016124:	693b      	ldr	r3, [r7, #16]
 8016126:	2200      	movs	r2, #0
 8016128:	709a      	strb	r2, [r3, #2]
 801612a:	2200      	movs	r2, #0
 801612c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	22ff      	movs	r2, #255	@ 0xff
 8016132:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	2200      	movs	r2, #0
 8016138:	729a      	strb	r2, [r3, #10]
 801613a:	2200      	movs	r2, #0
 801613c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	9302      	str	r3, [sp, #8]
 8016142:	2301      	movs	r3, #1
 8016144:	9301      	str	r3, [sp, #4]
 8016146:	2300      	movs	r3, #0
 8016148:	9300      	str	r3, [sp, #0]
 801614a:	23ff      	movs	r3, #255	@ 0xff
 801614c:	2200      	movs	r2, #0
 801614e:	69f9      	ldr	r1, [r7, #28]
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f000 fa75 	bl	8016640 <ip4_output_if>
 8016156:	4603      	mov	r3, r0
 8016158:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801615a:	e001      	b.n	8016160 <icmp_input+0x1b8>
      break;
 801615c:	bf00      	nop
 801615e:	e000      	b.n	8016162 <icmp_input+0x1ba>
      break;
 8016160:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016162:	6878      	ldr	r0, [r7, #4]
 8016164:	f7f8 f810 	bl	800e188 <pbuf_free>
  return;
 8016168:	e013      	b.n	8016192 <icmp_input+0x1ea>
    goto lenerr;
 801616a:	bf00      	nop
 801616c:	e002      	b.n	8016174 <icmp_input+0x1cc>
    goto lenerr;
 801616e:	bf00      	nop
 8016170:	e000      	b.n	8016174 <icmp_input+0x1cc>
        goto lenerr;
 8016172:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016174:	6878      	ldr	r0, [r7, #4]
 8016176:	f7f8 f807 	bl	800e188 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801617a:	e00a      	b.n	8016192 <icmp_input+0x1ea>
        goto icmperr;
 801617c:	bf00      	nop
 801617e:	e004      	b.n	801618a <icmp_input+0x1e2>
        goto icmperr;
 8016180:	bf00      	nop
 8016182:	e002      	b.n	801618a <icmp_input+0x1e2>
          goto icmperr;
 8016184:	bf00      	nop
 8016186:	e000      	b.n	801618a <icmp_input+0x1e2>
          goto icmperr;
 8016188:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801618a:	6878      	ldr	r0, [r7, #4]
 801618c:	f7f7 fffc 	bl	800e188 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016190:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016192:	3728      	adds	r7, #40	@ 0x28
 8016194:	46bd      	mov	sp, r7
 8016196:	bd80      	pop	{r7, pc}
 8016198:	2000a6ac 	.word	0x2000a6ac
 801619c:	2000a6c0 	.word	0x2000a6c0
 80161a0:	0801c360 	.word	0x0801c360
 80161a4:	0801c398 	.word	0x0801c398
 80161a8:	0801c3d0 	.word	0x0801c3d0
 80161ac:	0801c3f8 	.word	0x0801c3f8

080161b0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b082      	sub	sp, #8
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
 80161b8:	460b      	mov	r3, r1
 80161ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80161bc:	78fb      	ldrb	r3, [r7, #3]
 80161be:	461a      	mov	r2, r3
 80161c0:	2103      	movs	r1, #3
 80161c2:	6878      	ldr	r0, [r7, #4]
 80161c4:	f000 f814 	bl	80161f0 <icmp_send_response>
}
 80161c8:	bf00      	nop
 80161ca:	3708      	adds	r7, #8
 80161cc:	46bd      	mov	sp, r7
 80161ce:	bd80      	pop	{r7, pc}

080161d0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80161d0:	b580      	push	{r7, lr}
 80161d2:	b082      	sub	sp, #8
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	6078      	str	r0, [r7, #4]
 80161d8:	460b      	mov	r3, r1
 80161da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80161dc:	78fb      	ldrb	r3, [r7, #3]
 80161de:	461a      	mov	r2, r3
 80161e0:	210b      	movs	r1, #11
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f000 f804 	bl	80161f0 <icmp_send_response>
}
 80161e8:	bf00      	nop
 80161ea:	3708      	adds	r7, #8
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bd80      	pop	{r7, pc}

080161f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b08c      	sub	sp, #48	@ 0x30
 80161f4:	af04      	add	r7, sp, #16
 80161f6:	6078      	str	r0, [r7, #4]
 80161f8:	460b      	mov	r3, r1
 80161fa:	70fb      	strb	r3, [r7, #3]
 80161fc:	4613      	mov	r3, r2
 80161fe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016200:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016204:	2124      	movs	r1, #36	@ 0x24
 8016206:	2022      	movs	r0, #34	@ 0x22
 8016208:	f7f7 fcda 	bl	800dbc0 <pbuf_alloc>
 801620c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801620e:	69fb      	ldr	r3, [r7, #28]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d04c      	beq.n	80162ae <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016214:	69fb      	ldr	r3, [r7, #28]
 8016216:	895b      	ldrh	r3, [r3, #10]
 8016218:	2b23      	cmp	r3, #35	@ 0x23
 801621a:	d806      	bhi.n	801622a <icmp_send_response+0x3a>
 801621c:	4b26      	ldr	r3, [pc, #152]	@ (80162b8 <icmp_send_response+0xc8>)
 801621e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8016222:	4926      	ldr	r1, [pc, #152]	@ (80162bc <icmp_send_response+0xcc>)
 8016224:	4826      	ldr	r0, [pc, #152]	@ (80162c0 <icmp_send_response+0xd0>)
 8016226:	f001 fd1b 	bl	8017c60 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	685b      	ldr	r3, [r3, #4]
 801622e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016230:	69fb      	ldr	r3, [r7, #28]
 8016232:	685b      	ldr	r3, [r3, #4]
 8016234:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016236:	697b      	ldr	r3, [r7, #20]
 8016238:	78fa      	ldrb	r2, [r7, #3]
 801623a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801623c:	697b      	ldr	r3, [r7, #20]
 801623e:	78ba      	ldrb	r2, [r7, #2]
 8016240:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016242:	697b      	ldr	r3, [r7, #20]
 8016244:	2200      	movs	r2, #0
 8016246:	711a      	strb	r2, [r3, #4]
 8016248:	2200      	movs	r2, #0
 801624a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801624c:	697b      	ldr	r3, [r7, #20]
 801624e:	2200      	movs	r2, #0
 8016250:	719a      	strb	r2, [r3, #6]
 8016252:	2200      	movs	r2, #0
 8016254:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016256:	69fb      	ldr	r3, [r7, #28]
 8016258:	685b      	ldr	r3, [r3, #4]
 801625a:	f103 0008 	add.w	r0, r3, #8
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	685b      	ldr	r3, [r3, #4]
 8016262:	221c      	movs	r2, #28
 8016264:	4619      	mov	r1, r3
 8016266:	f001 fe66 	bl	8017f36 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801626a:	69bb      	ldr	r3, [r7, #24]
 801626c:	68db      	ldr	r3, [r3, #12]
 801626e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016270:	f107 030c 	add.w	r3, r7, #12
 8016274:	4618      	mov	r0, r3
 8016276:	f000 f825 	bl	80162c4 <ip4_route>
 801627a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801627c:	693b      	ldr	r3, [r7, #16]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d011      	beq.n	80162a6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016282:	697b      	ldr	r3, [r7, #20]
 8016284:	2200      	movs	r2, #0
 8016286:	709a      	strb	r2, [r3, #2]
 8016288:	2200      	movs	r2, #0
 801628a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801628c:	f107 020c 	add.w	r2, r7, #12
 8016290:	693b      	ldr	r3, [r7, #16]
 8016292:	9302      	str	r3, [sp, #8]
 8016294:	2301      	movs	r3, #1
 8016296:	9301      	str	r3, [sp, #4]
 8016298:	2300      	movs	r3, #0
 801629a:	9300      	str	r3, [sp, #0]
 801629c:	23ff      	movs	r3, #255	@ 0xff
 801629e:	2100      	movs	r1, #0
 80162a0:	69f8      	ldr	r0, [r7, #28]
 80162a2:	f000 f9cd 	bl	8016640 <ip4_output_if>
  }
  pbuf_free(q);
 80162a6:	69f8      	ldr	r0, [r7, #28]
 80162a8:	f7f7 ff6e 	bl	800e188 <pbuf_free>
 80162ac:	e000      	b.n	80162b0 <icmp_send_response+0xc0>
    return;
 80162ae:	bf00      	nop
}
 80162b0:	3720      	adds	r7, #32
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	bf00      	nop
 80162b8:	0801c360 	.word	0x0801c360
 80162bc:	0801c42c 	.word	0x0801c42c
 80162c0:	0801c3d0 	.word	0x0801c3d0

080162c4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80162c4:	b480      	push	{r7}
 80162c6:	b085      	sub	sp, #20
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80162cc:	4b33      	ldr	r3, [pc, #204]	@ (801639c <ip4_route+0xd8>)
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	60fb      	str	r3, [r7, #12]
 80162d2:	e036      	b.n	8016342 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80162da:	f003 0301 	and.w	r3, r3, #1
 80162de:	b2db      	uxtb	r3, r3
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d02b      	beq.n	801633c <ip4_route+0x78>
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80162ea:	089b      	lsrs	r3, r3, #2
 80162ec:	f003 0301 	and.w	r3, r3, #1
 80162f0:	b2db      	uxtb	r3, r3
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d022      	beq.n	801633c <ip4_route+0x78>
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	3304      	adds	r3, #4
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d01d      	beq.n	801633c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	681a      	ldr	r2, [r3, #0]
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	3304      	adds	r3, #4
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	405a      	eors	r2, r3
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	3308      	adds	r3, #8
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	4013      	ands	r3, r2
 8016314:	2b00      	cmp	r3, #0
 8016316:	d101      	bne.n	801631c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	e038      	b.n	801638e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016322:	f003 0302 	and.w	r3, r3, #2
 8016326:	2b00      	cmp	r3, #0
 8016328:	d108      	bne.n	801633c <ip4_route+0x78>
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	681a      	ldr	r2, [r3, #0]
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	330c      	adds	r3, #12
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	429a      	cmp	r2, r3
 8016336:	d101      	bne.n	801633c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	e028      	b.n	801638e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	60fb      	str	r3, [r7, #12]
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d1c5      	bne.n	80162d4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016348:	4b15      	ldr	r3, [pc, #84]	@ (80163a0 <ip4_route+0xdc>)
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d01a      	beq.n	8016386 <ip4_route+0xc2>
 8016350:	4b13      	ldr	r3, [pc, #76]	@ (80163a0 <ip4_route+0xdc>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016358:	f003 0301 	and.w	r3, r3, #1
 801635c:	2b00      	cmp	r3, #0
 801635e:	d012      	beq.n	8016386 <ip4_route+0xc2>
 8016360:	4b0f      	ldr	r3, [pc, #60]	@ (80163a0 <ip4_route+0xdc>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016368:	f003 0304 	and.w	r3, r3, #4
 801636c:	2b00      	cmp	r3, #0
 801636e:	d00a      	beq.n	8016386 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016370:	4b0b      	ldr	r3, [pc, #44]	@ (80163a0 <ip4_route+0xdc>)
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	3304      	adds	r3, #4
 8016376:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016378:	2b00      	cmp	r3, #0
 801637a:	d004      	beq.n	8016386 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	b2db      	uxtb	r3, r3
 8016382:	2b7f      	cmp	r3, #127	@ 0x7f
 8016384:	d101      	bne.n	801638a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016386:	2300      	movs	r3, #0
 8016388:	e001      	b.n	801638e <ip4_route+0xca>
  }

  return netif_default;
 801638a:	4b05      	ldr	r3, [pc, #20]	@ (80163a0 <ip4_route+0xdc>)
 801638c:	681b      	ldr	r3, [r3, #0]
}
 801638e:	4618      	mov	r0, r3
 8016390:	3714      	adds	r7, #20
 8016392:	46bd      	mov	sp, r7
 8016394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016398:	4770      	bx	lr
 801639a:	bf00      	nop
 801639c:	2000ffec 	.word	0x2000ffec
 80163a0:	2000fff0 	.word	0x2000fff0

080163a4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b082      	sub	sp, #8
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80163b2:	f003 0301 	and.w	r3, r3, #1
 80163b6:	b2db      	uxtb	r3, r3
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d016      	beq.n	80163ea <ip4_input_accept+0x46>
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	3304      	adds	r3, #4
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d011      	beq.n	80163ea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80163c6:	4b0b      	ldr	r3, [pc, #44]	@ (80163f4 <ip4_input_accept+0x50>)
 80163c8:	695a      	ldr	r2, [r3, #20]
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	3304      	adds	r3, #4
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	429a      	cmp	r2, r3
 80163d2:	d008      	beq.n	80163e6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80163d4:	4b07      	ldr	r3, [pc, #28]	@ (80163f4 <ip4_input_accept+0x50>)
 80163d6:	695b      	ldr	r3, [r3, #20]
 80163d8:	6879      	ldr	r1, [r7, #4]
 80163da:	4618      	mov	r0, r3
 80163dc:	f000 fa08 	bl	80167f0 <ip4_addr_isbroadcast_u32>
 80163e0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d001      	beq.n	80163ea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80163e6:	2301      	movs	r3, #1
 80163e8:	e000      	b.n	80163ec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80163ea:	2300      	movs	r3, #0
}
 80163ec:	4618      	mov	r0, r3
 80163ee:	3708      	adds	r7, #8
 80163f0:	46bd      	mov	sp, r7
 80163f2:	bd80      	pop	{r7, pc}
 80163f4:	2000a6ac 	.word	0x2000a6ac

080163f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b086      	sub	sp, #24
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
 8016400:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	685b      	ldr	r3, [r3, #4]
 8016406:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016408:	697b      	ldr	r3, [r7, #20]
 801640a:	781b      	ldrb	r3, [r3, #0]
 801640c:	091b      	lsrs	r3, r3, #4
 801640e:	b2db      	uxtb	r3, r3
 8016410:	2b04      	cmp	r3, #4
 8016412:	d004      	beq.n	801641e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016414:	6878      	ldr	r0, [r7, #4]
 8016416:	f7f7 feb7 	bl	800e188 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801641a:	2300      	movs	r3, #0
 801641c:	e107      	b.n	801662e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801641e:	697b      	ldr	r3, [r7, #20]
 8016420:	781b      	ldrb	r3, [r3, #0]
 8016422:	f003 030f 	and.w	r3, r3, #15
 8016426:	b2db      	uxtb	r3, r3
 8016428:	009b      	lsls	r3, r3, #2
 801642a:	b2db      	uxtb	r3, r3
 801642c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801642e:	697b      	ldr	r3, [r7, #20]
 8016430:	885b      	ldrh	r3, [r3, #2]
 8016432:	b29b      	uxth	r3, r3
 8016434:	4618      	mov	r0, r3
 8016436:	f7f6 fab5 	bl	800c9a4 <lwip_htons>
 801643a:	4603      	mov	r3, r0
 801643c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	891b      	ldrh	r3, [r3, #8]
 8016442:	89ba      	ldrh	r2, [r7, #12]
 8016444:	429a      	cmp	r2, r3
 8016446:	d204      	bcs.n	8016452 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016448:	89bb      	ldrh	r3, [r7, #12]
 801644a:	4619      	mov	r1, r3
 801644c:	6878      	ldr	r0, [r7, #4]
 801644e:	f7f7 fd15 	bl	800de7c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	895b      	ldrh	r3, [r3, #10]
 8016456:	89fa      	ldrh	r2, [r7, #14]
 8016458:	429a      	cmp	r2, r3
 801645a:	d807      	bhi.n	801646c <ip4_input+0x74>
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	891b      	ldrh	r3, [r3, #8]
 8016460:	89ba      	ldrh	r2, [r7, #12]
 8016462:	429a      	cmp	r2, r3
 8016464:	d802      	bhi.n	801646c <ip4_input+0x74>
 8016466:	89fb      	ldrh	r3, [r7, #14]
 8016468:	2b13      	cmp	r3, #19
 801646a:	d804      	bhi.n	8016476 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	f7f7 fe8b 	bl	800e188 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016472:	2300      	movs	r3, #0
 8016474:	e0db      	b.n	801662e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016476:	697b      	ldr	r3, [r7, #20]
 8016478:	691b      	ldr	r3, [r3, #16]
 801647a:	4a6f      	ldr	r2, [pc, #444]	@ (8016638 <ip4_input+0x240>)
 801647c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801647e:	697b      	ldr	r3, [r7, #20]
 8016480:	68db      	ldr	r3, [r3, #12]
 8016482:	4a6d      	ldr	r2, [pc, #436]	@ (8016638 <ip4_input+0x240>)
 8016484:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016486:	4b6c      	ldr	r3, [pc, #432]	@ (8016638 <ip4_input+0x240>)
 8016488:	695b      	ldr	r3, [r3, #20]
 801648a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801648e:	2be0      	cmp	r3, #224	@ 0xe0
 8016490:	d112      	bne.n	80164b8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016492:	683b      	ldr	r3, [r7, #0]
 8016494:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016498:	f003 0301 	and.w	r3, r3, #1
 801649c:	b2db      	uxtb	r3, r3
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d007      	beq.n	80164b2 <ip4_input+0xba>
 80164a2:	683b      	ldr	r3, [r7, #0]
 80164a4:	3304      	adds	r3, #4
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d002      	beq.n	80164b2 <ip4_input+0xba>
      netif = inp;
 80164ac:	683b      	ldr	r3, [r7, #0]
 80164ae:	613b      	str	r3, [r7, #16]
 80164b0:	e02a      	b.n	8016508 <ip4_input+0x110>
    } else {
      netif = NULL;
 80164b2:	2300      	movs	r3, #0
 80164b4:	613b      	str	r3, [r7, #16]
 80164b6:	e027      	b.n	8016508 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80164b8:	6838      	ldr	r0, [r7, #0]
 80164ba:	f7ff ff73 	bl	80163a4 <ip4_input_accept>
 80164be:	4603      	mov	r3, r0
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d002      	beq.n	80164ca <ip4_input+0xd2>
      netif = inp;
 80164c4:	683b      	ldr	r3, [r7, #0]
 80164c6:	613b      	str	r3, [r7, #16]
 80164c8:	e01e      	b.n	8016508 <ip4_input+0x110>
    } else {
      netif = NULL;
 80164ca:	2300      	movs	r3, #0
 80164cc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80164ce:	4b5a      	ldr	r3, [pc, #360]	@ (8016638 <ip4_input+0x240>)
 80164d0:	695b      	ldr	r3, [r3, #20]
 80164d2:	b2db      	uxtb	r3, r3
 80164d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80164d6:	d017      	beq.n	8016508 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80164d8:	4b58      	ldr	r3, [pc, #352]	@ (801663c <ip4_input+0x244>)
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	613b      	str	r3, [r7, #16]
 80164de:	e00e      	b.n	80164fe <ip4_input+0x106>
          if (netif == inp) {
 80164e0:	693a      	ldr	r2, [r7, #16]
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	429a      	cmp	r2, r3
 80164e6:	d006      	beq.n	80164f6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80164e8:	6938      	ldr	r0, [r7, #16]
 80164ea:	f7ff ff5b 	bl	80163a4 <ip4_input_accept>
 80164ee:	4603      	mov	r3, r0
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d108      	bne.n	8016506 <ip4_input+0x10e>
 80164f4:	e000      	b.n	80164f8 <ip4_input+0x100>
            continue;
 80164f6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80164f8:	693b      	ldr	r3, [r7, #16]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	613b      	str	r3, [r7, #16]
 80164fe:	693b      	ldr	r3, [r7, #16]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d1ed      	bne.n	80164e0 <ip4_input+0xe8>
 8016504:	e000      	b.n	8016508 <ip4_input+0x110>
            break;
 8016506:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016508:	4b4b      	ldr	r3, [pc, #300]	@ (8016638 <ip4_input+0x240>)
 801650a:	691b      	ldr	r3, [r3, #16]
 801650c:	6839      	ldr	r1, [r7, #0]
 801650e:	4618      	mov	r0, r3
 8016510:	f000 f96e 	bl	80167f0 <ip4_addr_isbroadcast_u32>
 8016514:	4603      	mov	r3, r0
 8016516:	2b00      	cmp	r3, #0
 8016518:	d105      	bne.n	8016526 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801651a:	4b47      	ldr	r3, [pc, #284]	@ (8016638 <ip4_input+0x240>)
 801651c:	691b      	ldr	r3, [r3, #16]
 801651e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016522:	2be0      	cmp	r3, #224	@ 0xe0
 8016524:	d104      	bne.n	8016530 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016526:	6878      	ldr	r0, [r7, #4]
 8016528:	f7f7 fe2e 	bl	800e188 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801652c:	2300      	movs	r3, #0
 801652e:	e07e      	b.n	801662e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016530:	693b      	ldr	r3, [r7, #16]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d104      	bne.n	8016540 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f7f7 fe26 	bl	800e188 <pbuf_free>
    return ERR_OK;
 801653c:	2300      	movs	r3, #0
 801653e:	e076      	b.n	801662e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016540:	697b      	ldr	r3, [r7, #20]
 8016542:	88db      	ldrh	r3, [r3, #6]
 8016544:	b29b      	uxth	r3, r3
 8016546:	461a      	mov	r2, r3
 8016548:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801654c:	4013      	ands	r3, r2
 801654e:	2b00      	cmp	r3, #0
 8016550:	d00b      	beq.n	801656a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016552:	6878      	ldr	r0, [r7, #4]
 8016554:	f000 fc92 	bl	8016e7c <ip4_reass>
 8016558:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d101      	bne.n	8016564 <ip4_input+0x16c>
      return ERR_OK;
 8016560:	2300      	movs	r3, #0
 8016562:	e064      	b.n	801662e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	685b      	ldr	r3, [r3, #4]
 8016568:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801656a:	4a33      	ldr	r2, [pc, #204]	@ (8016638 <ip4_input+0x240>)
 801656c:	693b      	ldr	r3, [r7, #16]
 801656e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016570:	4a31      	ldr	r2, [pc, #196]	@ (8016638 <ip4_input+0x240>)
 8016572:	683b      	ldr	r3, [r7, #0]
 8016574:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016576:	4a30      	ldr	r2, [pc, #192]	@ (8016638 <ip4_input+0x240>)
 8016578:	697b      	ldr	r3, [r7, #20]
 801657a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801657c:	697b      	ldr	r3, [r7, #20]
 801657e:	781b      	ldrb	r3, [r3, #0]
 8016580:	f003 030f 	and.w	r3, r3, #15
 8016584:	b2db      	uxtb	r3, r3
 8016586:	009b      	lsls	r3, r3, #2
 8016588:	b2db      	uxtb	r3, r3
 801658a:	461a      	mov	r2, r3
 801658c:	4b2a      	ldr	r3, [pc, #168]	@ (8016638 <ip4_input+0x240>)
 801658e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016590:	89fb      	ldrh	r3, [r7, #14]
 8016592:	4619      	mov	r1, r3
 8016594:	6878      	ldr	r0, [r7, #4]
 8016596:	f7f7 fd71 	bl	800e07c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801659a:	697b      	ldr	r3, [r7, #20]
 801659c:	7a5b      	ldrb	r3, [r3, #9]
 801659e:	2b11      	cmp	r3, #17
 80165a0:	d006      	beq.n	80165b0 <ip4_input+0x1b8>
 80165a2:	2b11      	cmp	r3, #17
 80165a4:	dc13      	bgt.n	80165ce <ip4_input+0x1d6>
 80165a6:	2b01      	cmp	r3, #1
 80165a8:	d00c      	beq.n	80165c4 <ip4_input+0x1cc>
 80165aa:	2b06      	cmp	r3, #6
 80165ac:	d005      	beq.n	80165ba <ip4_input+0x1c2>
 80165ae:	e00e      	b.n	80165ce <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80165b0:	6839      	ldr	r1, [r7, #0]
 80165b2:	6878      	ldr	r0, [r7, #4]
 80165b4:	f7fe fb5a 	bl	8014c6c <udp_input>
        break;
 80165b8:	e026      	b.n	8016608 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80165ba:	6839      	ldr	r1, [r7, #0]
 80165bc:	6878      	ldr	r0, [r7, #4]
 80165be:	f7f9 ff19 	bl	80103f4 <tcp_input>
        break;
 80165c2:	e021      	b.n	8016608 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80165c4:	6839      	ldr	r1, [r7, #0]
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f7ff fcee 	bl	8015fa8 <icmp_input>
        break;
 80165cc:	e01c      	b.n	8016608 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80165ce:	4b1a      	ldr	r3, [pc, #104]	@ (8016638 <ip4_input+0x240>)
 80165d0:	695b      	ldr	r3, [r3, #20]
 80165d2:	6939      	ldr	r1, [r7, #16]
 80165d4:	4618      	mov	r0, r3
 80165d6:	f000 f90b 	bl	80167f0 <ip4_addr_isbroadcast_u32>
 80165da:	4603      	mov	r3, r0
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d10f      	bne.n	8016600 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80165e0:	4b15      	ldr	r3, [pc, #84]	@ (8016638 <ip4_input+0x240>)
 80165e2:	695b      	ldr	r3, [r3, #20]
 80165e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80165e8:	2be0      	cmp	r3, #224	@ 0xe0
 80165ea:	d009      	beq.n	8016600 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80165ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80165f0:	4619      	mov	r1, r3
 80165f2:	6878      	ldr	r0, [r7, #4]
 80165f4:	f7f7 fdb5 	bl	800e162 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80165f8:	2102      	movs	r1, #2
 80165fa:	6878      	ldr	r0, [r7, #4]
 80165fc:	f7ff fdd8 	bl	80161b0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016600:	6878      	ldr	r0, [r7, #4]
 8016602:	f7f7 fdc1 	bl	800e188 <pbuf_free>
        break;
 8016606:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016608:	4b0b      	ldr	r3, [pc, #44]	@ (8016638 <ip4_input+0x240>)
 801660a:	2200      	movs	r2, #0
 801660c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801660e:	4b0a      	ldr	r3, [pc, #40]	@ (8016638 <ip4_input+0x240>)
 8016610:	2200      	movs	r2, #0
 8016612:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016614:	4b08      	ldr	r3, [pc, #32]	@ (8016638 <ip4_input+0x240>)
 8016616:	2200      	movs	r2, #0
 8016618:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801661a:	4b07      	ldr	r3, [pc, #28]	@ (8016638 <ip4_input+0x240>)
 801661c:	2200      	movs	r2, #0
 801661e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016620:	4b05      	ldr	r3, [pc, #20]	@ (8016638 <ip4_input+0x240>)
 8016622:	2200      	movs	r2, #0
 8016624:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016626:	4b04      	ldr	r3, [pc, #16]	@ (8016638 <ip4_input+0x240>)
 8016628:	2200      	movs	r2, #0
 801662a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801662c:	2300      	movs	r3, #0
}
 801662e:	4618      	mov	r0, r3
 8016630:	3718      	adds	r7, #24
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
 8016636:	bf00      	nop
 8016638:	2000a6ac 	.word	0x2000a6ac
 801663c:	2000ffec 	.word	0x2000ffec

08016640 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016640:	b580      	push	{r7, lr}
 8016642:	b08a      	sub	sp, #40	@ 0x28
 8016644:	af04      	add	r7, sp, #16
 8016646:	60f8      	str	r0, [r7, #12]
 8016648:	60b9      	str	r1, [r7, #8]
 801664a:	607a      	str	r2, [r7, #4]
 801664c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801664e:	68bb      	ldr	r3, [r7, #8]
 8016650:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d009      	beq.n	801666c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016658:	68bb      	ldr	r3, [r7, #8]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d003      	beq.n	8016666 <ip4_output_if+0x26>
 801665e:	68bb      	ldr	r3, [r7, #8]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d102      	bne.n	801666c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016668:	3304      	adds	r3, #4
 801666a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801666c:	78fa      	ldrb	r2, [r7, #3]
 801666e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016670:	9302      	str	r3, [sp, #8]
 8016672:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016676:	9301      	str	r3, [sp, #4]
 8016678:	f897 3020 	ldrb.w	r3, [r7, #32]
 801667c:	9300      	str	r3, [sp, #0]
 801667e:	4613      	mov	r3, r2
 8016680:	687a      	ldr	r2, [r7, #4]
 8016682:	6979      	ldr	r1, [r7, #20]
 8016684:	68f8      	ldr	r0, [r7, #12]
 8016686:	f000 f805 	bl	8016694 <ip4_output_if_src>
 801668a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801668c:	4618      	mov	r0, r3
 801668e:	3718      	adds	r7, #24
 8016690:	46bd      	mov	sp, r7
 8016692:	bd80      	pop	{r7, pc}

08016694 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016694:	b580      	push	{r7, lr}
 8016696:	b088      	sub	sp, #32
 8016698:	af00      	add	r7, sp, #0
 801669a:	60f8      	str	r0, [r7, #12]
 801669c:	60b9      	str	r1, [r7, #8]
 801669e:	607a      	str	r2, [r7, #4]
 80166a0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	7b9b      	ldrb	r3, [r3, #14]
 80166a6:	2b01      	cmp	r3, #1
 80166a8:	d006      	beq.n	80166b8 <ip4_output_if_src+0x24>
 80166aa:	4b4b      	ldr	r3, [pc, #300]	@ (80167d8 <ip4_output_if_src+0x144>)
 80166ac:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80166b0:	494a      	ldr	r1, [pc, #296]	@ (80167dc <ip4_output_if_src+0x148>)
 80166b2:	484b      	ldr	r0, [pc, #300]	@ (80167e0 <ip4_output_if_src+0x14c>)
 80166b4:	f001 fad4 	bl	8017c60 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d060      	beq.n	8016780 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80166be:	2314      	movs	r3, #20
 80166c0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80166c2:	2114      	movs	r1, #20
 80166c4:	68f8      	ldr	r0, [r7, #12]
 80166c6:	f7f7 fcc9 	bl	800e05c <pbuf_add_header>
 80166ca:	4603      	mov	r3, r0
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d002      	beq.n	80166d6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80166d0:	f06f 0301 	mvn.w	r3, #1
 80166d4:	e07c      	b.n	80167d0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	685b      	ldr	r3, [r3, #4]
 80166da:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	895b      	ldrh	r3, [r3, #10]
 80166e0:	2b13      	cmp	r3, #19
 80166e2:	d806      	bhi.n	80166f2 <ip4_output_if_src+0x5e>
 80166e4:	4b3c      	ldr	r3, [pc, #240]	@ (80167d8 <ip4_output_if_src+0x144>)
 80166e6:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80166ea:	493e      	ldr	r1, [pc, #248]	@ (80167e4 <ip4_output_if_src+0x150>)
 80166ec:	483c      	ldr	r0, [pc, #240]	@ (80167e0 <ip4_output_if_src+0x14c>)
 80166ee:	f001 fab7 	bl	8017c60 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80166f2:	69fb      	ldr	r3, [r7, #28]
 80166f4:	78fa      	ldrb	r2, [r7, #3]
 80166f6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80166f8:	69fb      	ldr	r3, [r7, #28]
 80166fa:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80166fe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	681a      	ldr	r2, [r3, #0]
 8016704:	69fb      	ldr	r3, [r7, #28]
 8016706:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016708:	8b7b      	ldrh	r3, [r7, #26]
 801670a:	089b      	lsrs	r3, r3, #2
 801670c:	b29b      	uxth	r3, r3
 801670e:	b2db      	uxtb	r3, r3
 8016710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016714:	b2da      	uxtb	r2, r3
 8016716:	69fb      	ldr	r3, [r7, #28]
 8016718:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801671a:	69fb      	ldr	r3, [r7, #28]
 801671c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016720:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	891b      	ldrh	r3, [r3, #8]
 8016726:	4618      	mov	r0, r3
 8016728:	f7f6 f93c 	bl	800c9a4 <lwip_htons>
 801672c:	4603      	mov	r3, r0
 801672e:	461a      	mov	r2, r3
 8016730:	69fb      	ldr	r3, [r7, #28]
 8016732:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016734:	69fb      	ldr	r3, [r7, #28]
 8016736:	2200      	movs	r2, #0
 8016738:	719a      	strb	r2, [r3, #6]
 801673a:	2200      	movs	r2, #0
 801673c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801673e:	4b2a      	ldr	r3, [pc, #168]	@ (80167e8 <ip4_output_if_src+0x154>)
 8016740:	881b      	ldrh	r3, [r3, #0]
 8016742:	4618      	mov	r0, r3
 8016744:	f7f6 f92e 	bl	800c9a4 <lwip_htons>
 8016748:	4603      	mov	r3, r0
 801674a:	461a      	mov	r2, r3
 801674c:	69fb      	ldr	r3, [r7, #28]
 801674e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016750:	4b25      	ldr	r3, [pc, #148]	@ (80167e8 <ip4_output_if_src+0x154>)
 8016752:	881b      	ldrh	r3, [r3, #0]
 8016754:	3301      	adds	r3, #1
 8016756:	b29a      	uxth	r2, r3
 8016758:	4b23      	ldr	r3, [pc, #140]	@ (80167e8 <ip4_output_if_src+0x154>)
 801675a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801675c:	68bb      	ldr	r3, [r7, #8]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d104      	bne.n	801676c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016762:	4b22      	ldr	r3, [pc, #136]	@ (80167ec <ip4_output_if_src+0x158>)
 8016764:	681a      	ldr	r2, [r3, #0]
 8016766:	69fb      	ldr	r3, [r7, #28]
 8016768:	60da      	str	r2, [r3, #12]
 801676a:	e003      	b.n	8016774 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801676c:	68bb      	ldr	r3, [r7, #8]
 801676e:	681a      	ldr	r2, [r3, #0]
 8016770:	69fb      	ldr	r3, [r7, #28]
 8016772:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016774:	69fb      	ldr	r3, [r7, #28]
 8016776:	2200      	movs	r2, #0
 8016778:	729a      	strb	r2, [r3, #10]
 801677a:	2200      	movs	r2, #0
 801677c:	72da      	strb	r2, [r3, #11]
 801677e:	e00f      	b.n	80167a0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	895b      	ldrh	r3, [r3, #10]
 8016784:	2b13      	cmp	r3, #19
 8016786:	d802      	bhi.n	801678e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016788:	f06f 0301 	mvn.w	r3, #1
 801678c:	e020      	b.n	80167d0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	685b      	ldr	r3, [r3, #4]
 8016792:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016794:	69fb      	ldr	r3, [r7, #28]
 8016796:	691b      	ldr	r3, [r3, #16]
 8016798:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801679a:	f107 0314 	add.w	r3, r7, #20
 801679e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80167a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d00c      	beq.n	80167c2 <ip4_output_if_src+0x12e>
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	891a      	ldrh	r2, [r3, #8]
 80167ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80167b0:	429a      	cmp	r2, r3
 80167b2:	d906      	bls.n	80167c2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80167b4:	687a      	ldr	r2, [r7, #4]
 80167b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80167b8:	68f8      	ldr	r0, [r7, #12]
 80167ba:	f000 fd53 	bl	8017264 <ip4_frag>
 80167be:	4603      	mov	r3, r0
 80167c0:	e006      	b.n	80167d0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80167c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167c4:	695b      	ldr	r3, [r3, #20]
 80167c6:	687a      	ldr	r2, [r7, #4]
 80167c8:	68f9      	ldr	r1, [r7, #12]
 80167ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80167cc:	4798      	blx	r3
 80167ce:	4603      	mov	r3, r0
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	3720      	adds	r7, #32
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}
 80167d8:	0801c458 	.word	0x0801c458
 80167dc:	0801c48c 	.word	0x0801c48c
 80167e0:	0801c498 	.word	0x0801c498
 80167e4:	0801c4c0 	.word	0x0801c4c0
 80167e8:	2001014a 	.word	0x2001014a
 80167ec:	0801c8e4 	.word	0x0801c8e4

080167f0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80167f0:	b480      	push	{r7}
 80167f2:	b085      	sub	sp, #20
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	6078      	str	r0, [r7, #4]
 80167f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016804:	d002      	beq.n	801680c <ip4_addr_isbroadcast_u32+0x1c>
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d101      	bne.n	8016810 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801680c:	2301      	movs	r3, #1
 801680e:	e02a      	b.n	8016866 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016810:	683b      	ldr	r3, [r7, #0]
 8016812:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016816:	f003 0302 	and.w	r3, r3, #2
 801681a:	2b00      	cmp	r3, #0
 801681c:	d101      	bne.n	8016822 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801681e:	2300      	movs	r3, #0
 8016820:	e021      	b.n	8016866 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016822:	683b      	ldr	r3, [r7, #0]
 8016824:	3304      	adds	r3, #4
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	687a      	ldr	r2, [r7, #4]
 801682a:	429a      	cmp	r2, r3
 801682c:	d101      	bne.n	8016832 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801682e:	2300      	movs	r3, #0
 8016830:	e019      	b.n	8016866 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016832:	68fa      	ldr	r2, [r7, #12]
 8016834:	683b      	ldr	r3, [r7, #0]
 8016836:	3304      	adds	r3, #4
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	405a      	eors	r2, r3
 801683c:	683b      	ldr	r3, [r7, #0]
 801683e:	3308      	adds	r3, #8
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	4013      	ands	r3, r2
 8016844:	2b00      	cmp	r3, #0
 8016846:	d10d      	bne.n	8016864 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016848:	683b      	ldr	r3, [r7, #0]
 801684a:	3308      	adds	r3, #8
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	43da      	mvns	r2, r3
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016854:	683b      	ldr	r3, [r7, #0]
 8016856:	3308      	adds	r3, #8
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801685c:	429a      	cmp	r2, r3
 801685e:	d101      	bne.n	8016864 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016860:	2301      	movs	r3, #1
 8016862:	e000      	b.n	8016866 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016864:	2300      	movs	r3, #0
  }
}
 8016866:	4618      	mov	r0, r3
 8016868:	3714      	adds	r7, #20
 801686a:	46bd      	mov	sp, r7
 801686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016870:	4770      	bx	lr
	...

08016874 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b084      	sub	sp, #16
 8016878:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801687a:	2300      	movs	r3, #0
 801687c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801687e:	4b12      	ldr	r3, [pc, #72]	@ (80168c8 <ip_reass_tmr+0x54>)
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016884:	e018      	b.n	80168b8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	7fdb      	ldrb	r3, [r3, #31]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d00b      	beq.n	80168a6 <ip_reass_tmr+0x32>
      r->timer--;
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	7fdb      	ldrb	r3, [r3, #31]
 8016892:	3b01      	subs	r3, #1
 8016894:	b2da      	uxtb	r2, r3
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	60fb      	str	r3, [r7, #12]
 80168a4:	e008      	b.n	80168b8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80168b0:	68b9      	ldr	r1, [r7, #8]
 80168b2:	6878      	ldr	r0, [r7, #4]
 80168b4:	f000 f80a 	bl	80168cc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d1e3      	bne.n	8016886 <ip_reass_tmr+0x12>
    }
  }
}
 80168be:	bf00      	nop
 80168c0:	bf00      	nop
 80168c2:	3710      	adds	r7, #16
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}
 80168c8:	2001014c 	.word	0x2001014c

080168cc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80168cc:	b580      	push	{r7, lr}
 80168ce:	b088      	sub	sp, #32
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]
 80168d4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80168d6:	2300      	movs	r3, #0
 80168d8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80168da:	683a      	ldr	r2, [r7, #0]
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	429a      	cmp	r2, r3
 80168e0:	d105      	bne.n	80168ee <ip_reass_free_complete_datagram+0x22>
 80168e2:	4b45      	ldr	r3, [pc, #276]	@ (80169f8 <ip_reass_free_complete_datagram+0x12c>)
 80168e4:	22ab      	movs	r2, #171	@ 0xab
 80168e6:	4945      	ldr	r1, [pc, #276]	@ (80169fc <ip_reass_free_complete_datagram+0x130>)
 80168e8:	4845      	ldr	r0, [pc, #276]	@ (8016a00 <ip_reass_free_complete_datagram+0x134>)
 80168ea:	f001 f9b9 	bl	8017c60 <iprintf>
  if (prev != NULL) {
 80168ee:	683b      	ldr	r3, [r7, #0]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d00a      	beq.n	801690a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	687a      	ldr	r2, [r7, #4]
 80168fa:	429a      	cmp	r2, r3
 80168fc:	d005      	beq.n	801690a <ip_reass_free_complete_datagram+0x3e>
 80168fe:	4b3e      	ldr	r3, [pc, #248]	@ (80169f8 <ip_reass_free_complete_datagram+0x12c>)
 8016900:	22ad      	movs	r2, #173	@ 0xad
 8016902:	4940      	ldr	r1, [pc, #256]	@ (8016a04 <ip_reass_free_complete_datagram+0x138>)
 8016904:	483e      	ldr	r0, [pc, #248]	@ (8016a00 <ip_reass_free_complete_datagram+0x134>)
 8016906:	f001 f9ab 	bl	8017c60 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	685b      	ldr	r3, [r3, #4]
 801690e:	685b      	ldr	r3, [r3, #4]
 8016910:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016912:	697b      	ldr	r3, [r7, #20]
 8016914:	889b      	ldrh	r3, [r3, #4]
 8016916:	b29b      	uxth	r3, r3
 8016918:	2b00      	cmp	r3, #0
 801691a:	d12a      	bne.n	8016972 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	685b      	ldr	r3, [r3, #4]
 8016920:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016922:	697b      	ldr	r3, [r7, #20]
 8016924:	681a      	ldr	r2, [r3, #0]
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801692a:	69bb      	ldr	r3, [r7, #24]
 801692c:	6858      	ldr	r0, [r3, #4]
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	3308      	adds	r3, #8
 8016932:	2214      	movs	r2, #20
 8016934:	4619      	mov	r1, r3
 8016936:	f001 fafe 	bl	8017f36 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801693a:	2101      	movs	r1, #1
 801693c:	69b8      	ldr	r0, [r7, #24]
 801693e:	f7ff fc47 	bl	80161d0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016942:	69b8      	ldr	r0, [r7, #24]
 8016944:	f7f7 fcae 	bl	800e2a4 <pbuf_clen>
 8016948:	4603      	mov	r3, r0
 801694a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801694c:	8bfa      	ldrh	r2, [r7, #30]
 801694e:	8a7b      	ldrh	r3, [r7, #18]
 8016950:	4413      	add	r3, r2
 8016952:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016956:	db05      	blt.n	8016964 <ip_reass_free_complete_datagram+0x98>
 8016958:	4b27      	ldr	r3, [pc, #156]	@ (80169f8 <ip_reass_free_complete_datagram+0x12c>)
 801695a:	22bc      	movs	r2, #188	@ 0xbc
 801695c:	492a      	ldr	r1, [pc, #168]	@ (8016a08 <ip_reass_free_complete_datagram+0x13c>)
 801695e:	4828      	ldr	r0, [pc, #160]	@ (8016a00 <ip_reass_free_complete_datagram+0x134>)
 8016960:	f001 f97e 	bl	8017c60 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016964:	8bfa      	ldrh	r2, [r7, #30]
 8016966:	8a7b      	ldrh	r3, [r7, #18]
 8016968:	4413      	add	r3, r2
 801696a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801696c:	69b8      	ldr	r0, [r7, #24]
 801696e:	f7f7 fc0b 	bl	800e188 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	685b      	ldr	r3, [r3, #4]
 8016976:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016978:	e01f      	b.n	80169ba <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801697a:	69bb      	ldr	r3, [r7, #24]
 801697c:	685b      	ldr	r3, [r3, #4]
 801697e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016980:	69bb      	ldr	r3, [r7, #24]
 8016982:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016984:	697b      	ldr	r3, [r7, #20]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801698a:	68f8      	ldr	r0, [r7, #12]
 801698c:	f7f7 fc8a 	bl	800e2a4 <pbuf_clen>
 8016990:	4603      	mov	r3, r0
 8016992:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016994:	8bfa      	ldrh	r2, [r7, #30]
 8016996:	8a7b      	ldrh	r3, [r7, #18]
 8016998:	4413      	add	r3, r2
 801699a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801699e:	db05      	blt.n	80169ac <ip_reass_free_complete_datagram+0xe0>
 80169a0:	4b15      	ldr	r3, [pc, #84]	@ (80169f8 <ip_reass_free_complete_datagram+0x12c>)
 80169a2:	22cc      	movs	r2, #204	@ 0xcc
 80169a4:	4918      	ldr	r1, [pc, #96]	@ (8016a08 <ip_reass_free_complete_datagram+0x13c>)
 80169a6:	4816      	ldr	r0, [pc, #88]	@ (8016a00 <ip_reass_free_complete_datagram+0x134>)
 80169a8:	f001 f95a 	bl	8017c60 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80169ac:	8bfa      	ldrh	r2, [r7, #30]
 80169ae:	8a7b      	ldrh	r3, [r7, #18]
 80169b0:	4413      	add	r3, r2
 80169b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80169b4:	68f8      	ldr	r0, [r7, #12]
 80169b6:	f7f7 fbe7 	bl	800e188 <pbuf_free>
  while (p != NULL) {
 80169ba:	69bb      	ldr	r3, [r7, #24]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d1dc      	bne.n	801697a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80169c0:	6839      	ldr	r1, [r7, #0]
 80169c2:	6878      	ldr	r0, [r7, #4]
 80169c4:	f000 f8c2 	bl	8016b4c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80169c8:	4b10      	ldr	r3, [pc, #64]	@ (8016a0c <ip_reass_free_complete_datagram+0x140>)
 80169ca:	881b      	ldrh	r3, [r3, #0]
 80169cc:	8bfa      	ldrh	r2, [r7, #30]
 80169ce:	429a      	cmp	r2, r3
 80169d0:	d905      	bls.n	80169de <ip_reass_free_complete_datagram+0x112>
 80169d2:	4b09      	ldr	r3, [pc, #36]	@ (80169f8 <ip_reass_free_complete_datagram+0x12c>)
 80169d4:	22d2      	movs	r2, #210	@ 0xd2
 80169d6:	490e      	ldr	r1, [pc, #56]	@ (8016a10 <ip_reass_free_complete_datagram+0x144>)
 80169d8:	4809      	ldr	r0, [pc, #36]	@ (8016a00 <ip_reass_free_complete_datagram+0x134>)
 80169da:	f001 f941 	bl	8017c60 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80169de:	4b0b      	ldr	r3, [pc, #44]	@ (8016a0c <ip_reass_free_complete_datagram+0x140>)
 80169e0:	881a      	ldrh	r2, [r3, #0]
 80169e2:	8bfb      	ldrh	r3, [r7, #30]
 80169e4:	1ad3      	subs	r3, r2, r3
 80169e6:	b29a      	uxth	r2, r3
 80169e8:	4b08      	ldr	r3, [pc, #32]	@ (8016a0c <ip_reass_free_complete_datagram+0x140>)
 80169ea:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80169ec:	8bfb      	ldrh	r3, [r7, #30]
}
 80169ee:	4618      	mov	r0, r3
 80169f0:	3720      	adds	r7, #32
 80169f2:	46bd      	mov	sp, r7
 80169f4:	bd80      	pop	{r7, pc}
 80169f6:	bf00      	nop
 80169f8:	0801c4f0 	.word	0x0801c4f0
 80169fc:	0801c52c 	.word	0x0801c52c
 8016a00:	0801c538 	.word	0x0801c538
 8016a04:	0801c560 	.word	0x0801c560
 8016a08:	0801c574 	.word	0x0801c574
 8016a0c:	20010150 	.word	0x20010150
 8016a10:	0801c594 	.word	0x0801c594

08016a14 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b08a      	sub	sp, #40	@ 0x28
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
 8016a1c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016a1e:	2300      	movs	r3, #0
 8016a20:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016a22:	2300      	movs	r3, #0
 8016a24:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016a26:	2300      	movs	r3, #0
 8016a28:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016a2e:	2300      	movs	r3, #0
 8016a30:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016a32:	4b28      	ldr	r3, [pc, #160]	@ (8016ad4 <ip_reass_remove_oldest_datagram+0xc0>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016a38:	e030      	b.n	8016a9c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a3c:	695a      	ldr	r2, [r3, #20]
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	68db      	ldr	r3, [r3, #12]
 8016a42:	429a      	cmp	r2, r3
 8016a44:	d10c      	bne.n	8016a60 <ip_reass_remove_oldest_datagram+0x4c>
 8016a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a48:	699a      	ldr	r2, [r3, #24]
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	691b      	ldr	r3, [r3, #16]
 8016a4e:	429a      	cmp	r2, r3
 8016a50:	d106      	bne.n	8016a60 <ip_reass_remove_oldest_datagram+0x4c>
 8016a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a54:	899a      	ldrh	r2, [r3, #12]
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	889b      	ldrh	r3, [r3, #4]
 8016a5a:	b29b      	uxth	r3, r3
 8016a5c:	429a      	cmp	r2, r3
 8016a5e:	d014      	beq.n	8016a8a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016a60:	693b      	ldr	r3, [r7, #16]
 8016a62:	3301      	adds	r3, #1
 8016a64:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016a66:	6a3b      	ldr	r3, [r7, #32]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d104      	bne.n	8016a76 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a6e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016a70:	69fb      	ldr	r3, [r7, #28]
 8016a72:	61bb      	str	r3, [r7, #24]
 8016a74:	e009      	b.n	8016a8a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a78:	7fda      	ldrb	r2, [r3, #31]
 8016a7a:	6a3b      	ldr	r3, [r7, #32]
 8016a7c:	7fdb      	ldrb	r3, [r3, #31]
 8016a7e:	429a      	cmp	r2, r3
 8016a80:	d803      	bhi.n	8016a8a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a84:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016a86:	69fb      	ldr	r3, [r7, #28]
 8016a88:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d001      	beq.n	8016a96 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a94:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d1cb      	bne.n	8016a3a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016aa2:	6a3b      	ldr	r3, [r7, #32]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d008      	beq.n	8016aba <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016aa8:	69b9      	ldr	r1, [r7, #24]
 8016aaa:	6a38      	ldr	r0, [r7, #32]
 8016aac:	f7ff ff0e 	bl	80168cc <ip_reass_free_complete_datagram>
 8016ab0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016ab2:	697a      	ldr	r2, [r7, #20]
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	4413      	add	r3, r2
 8016ab8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016aba:	697a      	ldr	r2, [r7, #20]
 8016abc:	683b      	ldr	r3, [r7, #0]
 8016abe:	429a      	cmp	r2, r3
 8016ac0:	da02      	bge.n	8016ac8 <ip_reass_remove_oldest_datagram+0xb4>
 8016ac2:	693b      	ldr	r3, [r7, #16]
 8016ac4:	2b01      	cmp	r3, #1
 8016ac6:	dcac      	bgt.n	8016a22 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016ac8:	697b      	ldr	r3, [r7, #20]
}
 8016aca:	4618      	mov	r0, r3
 8016acc:	3728      	adds	r7, #40	@ 0x28
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	bd80      	pop	{r7, pc}
 8016ad2:	bf00      	nop
 8016ad4:	2001014c 	.word	0x2001014c

08016ad8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b084      	sub	sp, #16
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
 8016ae0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016ae2:	2004      	movs	r0, #4
 8016ae4:	f7f6 fc36 	bl	800d354 <memp_malloc>
 8016ae8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d110      	bne.n	8016b12 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016af0:	6839      	ldr	r1, [r7, #0]
 8016af2:	6878      	ldr	r0, [r7, #4]
 8016af4:	f7ff ff8e 	bl	8016a14 <ip_reass_remove_oldest_datagram>
 8016af8:	4602      	mov	r2, r0
 8016afa:	683b      	ldr	r3, [r7, #0]
 8016afc:	4293      	cmp	r3, r2
 8016afe:	dc03      	bgt.n	8016b08 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016b00:	2004      	movs	r0, #4
 8016b02:	f7f6 fc27 	bl	800d354 <memp_malloc>
 8016b06:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d101      	bne.n	8016b12 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016b0e:	2300      	movs	r3, #0
 8016b10:	e016      	b.n	8016b40 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016b12:	2220      	movs	r2, #32
 8016b14:	2100      	movs	r1, #0
 8016b16:	68f8      	ldr	r0, [r7, #12]
 8016b18:	f001 f941 	bl	8017d9e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	220f      	movs	r2, #15
 8016b20:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016b22:	4b09      	ldr	r3, [pc, #36]	@ (8016b48 <ip_reass_enqueue_new_datagram+0x70>)
 8016b24:	681a      	ldr	r2, [r3, #0]
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016b2a:	4a07      	ldr	r2, [pc, #28]	@ (8016b48 <ip_reass_enqueue_new_datagram+0x70>)
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	3308      	adds	r3, #8
 8016b34:	2214      	movs	r2, #20
 8016b36:	6879      	ldr	r1, [r7, #4]
 8016b38:	4618      	mov	r0, r3
 8016b3a:	f001 f9fc 	bl	8017f36 <memcpy>
  return ipr;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
}
 8016b40:	4618      	mov	r0, r3
 8016b42:	3710      	adds	r7, #16
 8016b44:	46bd      	mov	sp, r7
 8016b46:	bd80      	pop	{r7, pc}
 8016b48:	2001014c 	.word	0x2001014c

08016b4c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b082      	sub	sp, #8
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	6078      	str	r0, [r7, #4]
 8016b54:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016b56:	4b10      	ldr	r3, [pc, #64]	@ (8016b98 <ip_reass_dequeue_datagram+0x4c>)
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	687a      	ldr	r2, [r7, #4]
 8016b5c:	429a      	cmp	r2, r3
 8016b5e:	d104      	bne.n	8016b6a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	4a0c      	ldr	r2, [pc, #48]	@ (8016b98 <ip_reass_dequeue_datagram+0x4c>)
 8016b66:	6013      	str	r3, [r2, #0]
 8016b68:	e00d      	b.n	8016b86 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016b6a:	683b      	ldr	r3, [r7, #0]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d106      	bne.n	8016b7e <ip_reass_dequeue_datagram+0x32>
 8016b70:	4b0a      	ldr	r3, [pc, #40]	@ (8016b9c <ip_reass_dequeue_datagram+0x50>)
 8016b72:	f240 1245 	movw	r2, #325	@ 0x145
 8016b76:	490a      	ldr	r1, [pc, #40]	@ (8016ba0 <ip_reass_dequeue_datagram+0x54>)
 8016b78:	480a      	ldr	r0, [pc, #40]	@ (8016ba4 <ip_reass_dequeue_datagram+0x58>)
 8016b7a:	f001 f871 	bl	8017c60 <iprintf>
    prev->next = ipr->next;
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	681a      	ldr	r2, [r3, #0]
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016b86:	6879      	ldr	r1, [r7, #4]
 8016b88:	2004      	movs	r0, #4
 8016b8a:	f7f6 fc59 	bl	800d440 <memp_free>
}
 8016b8e:	bf00      	nop
 8016b90:	3708      	adds	r7, #8
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd80      	pop	{r7, pc}
 8016b96:	bf00      	nop
 8016b98:	2001014c 	.word	0x2001014c
 8016b9c:	0801c4f0 	.word	0x0801c4f0
 8016ba0:	0801c5b8 	.word	0x0801c5b8
 8016ba4:	0801c538 	.word	0x0801c538

08016ba8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b08c      	sub	sp, #48	@ 0x30
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	60f8      	str	r0, [r7, #12]
 8016bb0:	60b9      	str	r1, [r7, #8]
 8016bb2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016bb8:	2301      	movs	r3, #1
 8016bba:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016bbc:	68bb      	ldr	r3, [r7, #8]
 8016bbe:	685b      	ldr	r3, [r3, #4]
 8016bc0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016bc2:	69fb      	ldr	r3, [r7, #28]
 8016bc4:	885b      	ldrh	r3, [r3, #2]
 8016bc6:	b29b      	uxth	r3, r3
 8016bc8:	4618      	mov	r0, r3
 8016bca:	f7f5 feeb 	bl	800c9a4 <lwip_htons>
 8016bce:	4603      	mov	r3, r0
 8016bd0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016bd2:	69fb      	ldr	r3, [r7, #28]
 8016bd4:	781b      	ldrb	r3, [r3, #0]
 8016bd6:	f003 030f 	and.w	r3, r3, #15
 8016bda:	b2db      	uxtb	r3, r3
 8016bdc:	009b      	lsls	r3, r3, #2
 8016bde:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016be0:	7e7b      	ldrb	r3, [r7, #25]
 8016be2:	b29b      	uxth	r3, r3
 8016be4:	8b7a      	ldrh	r2, [r7, #26]
 8016be6:	429a      	cmp	r2, r3
 8016be8:	d202      	bcs.n	8016bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016bea:	f04f 33ff 	mov.w	r3, #4294967295
 8016bee:	e135      	b.n	8016e5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016bf0:	7e7b      	ldrb	r3, [r7, #25]
 8016bf2:	b29b      	uxth	r3, r3
 8016bf4:	8b7a      	ldrh	r2, [r7, #26]
 8016bf6:	1ad3      	subs	r3, r2, r3
 8016bf8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016bfa:	69fb      	ldr	r3, [r7, #28]
 8016bfc:	88db      	ldrh	r3, [r3, #6]
 8016bfe:	b29b      	uxth	r3, r3
 8016c00:	4618      	mov	r0, r3
 8016c02:	f7f5 fecf 	bl	800c9a4 <lwip_htons>
 8016c06:	4603      	mov	r3, r0
 8016c08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c0c:	b29b      	uxth	r3, r3
 8016c0e:	00db      	lsls	r3, r3, #3
 8016c10:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016c12:	68bb      	ldr	r3, [r7, #8]
 8016c14:	685b      	ldr	r3, [r3, #4]
 8016c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8016c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c1a:	2200      	movs	r2, #0
 8016c1c:	701a      	strb	r2, [r3, #0]
 8016c1e:	2200      	movs	r2, #0
 8016c20:	705a      	strb	r2, [r3, #1]
 8016c22:	2200      	movs	r2, #0
 8016c24:	709a      	strb	r2, [r3, #2]
 8016c26:	2200      	movs	r2, #0
 8016c28:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c2c:	8afa      	ldrh	r2, [r7, #22]
 8016c2e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016c30:	8afa      	ldrh	r2, [r7, #22]
 8016c32:	8b7b      	ldrh	r3, [r7, #26]
 8016c34:	4413      	add	r3, r2
 8016c36:	b29a      	uxth	r2, r3
 8016c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c3a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c3e:	88db      	ldrh	r3, [r3, #6]
 8016c40:	b29b      	uxth	r3, r3
 8016c42:	8afa      	ldrh	r2, [r7, #22]
 8016c44:	429a      	cmp	r2, r3
 8016c46:	d902      	bls.n	8016c4e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016c48:	f04f 33ff 	mov.w	r3, #4294967295
 8016c4c:	e106      	b.n	8016e5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	685b      	ldr	r3, [r3, #4]
 8016c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8016c54:	e068      	b.n	8016d28 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c58:	685b      	ldr	r3, [r3, #4]
 8016c5a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c5e:	889b      	ldrh	r3, [r3, #4]
 8016c60:	b29a      	uxth	r2, r3
 8016c62:	693b      	ldr	r3, [r7, #16]
 8016c64:	889b      	ldrh	r3, [r3, #4]
 8016c66:	b29b      	uxth	r3, r3
 8016c68:	429a      	cmp	r2, r3
 8016c6a:	d235      	bcs.n	8016cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c70:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d020      	beq.n	8016cba <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c7a:	889b      	ldrh	r3, [r3, #4]
 8016c7c:	b29a      	uxth	r2, r3
 8016c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c80:	88db      	ldrh	r3, [r3, #6]
 8016c82:	b29b      	uxth	r3, r3
 8016c84:	429a      	cmp	r2, r3
 8016c86:	d307      	bcc.n	8016c98 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c8a:	88db      	ldrh	r3, [r3, #6]
 8016c8c:	b29a      	uxth	r2, r3
 8016c8e:	693b      	ldr	r3, [r7, #16]
 8016c90:	889b      	ldrh	r3, [r3, #4]
 8016c92:	b29b      	uxth	r3, r3
 8016c94:	429a      	cmp	r2, r3
 8016c96:	d902      	bls.n	8016c9e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016c98:	f04f 33ff 	mov.w	r3, #4294967295
 8016c9c:	e0de      	b.n	8016e5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ca0:	68ba      	ldr	r2, [r7, #8]
 8016ca2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ca6:	88db      	ldrh	r3, [r3, #6]
 8016ca8:	b29a      	uxth	r2, r3
 8016caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cac:	889b      	ldrh	r3, [r3, #4]
 8016cae:	b29b      	uxth	r3, r3
 8016cb0:	429a      	cmp	r2, r3
 8016cb2:	d03d      	beq.n	8016d30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016cb8:	e03a      	b.n	8016d30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cbc:	88db      	ldrh	r3, [r3, #6]
 8016cbe:	b29a      	uxth	r2, r3
 8016cc0:	693b      	ldr	r3, [r7, #16]
 8016cc2:	889b      	ldrh	r3, [r3, #4]
 8016cc4:	b29b      	uxth	r3, r3
 8016cc6:	429a      	cmp	r2, r3
 8016cc8:	d902      	bls.n	8016cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016cca:	f04f 33ff 	mov.w	r3, #4294967295
 8016cce:	e0c5      	b.n	8016e5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	68ba      	ldr	r2, [r7, #8]
 8016cd4:	605a      	str	r2, [r3, #4]
      break;
 8016cd6:	e02b      	b.n	8016d30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cda:	889b      	ldrh	r3, [r3, #4]
 8016cdc:	b29a      	uxth	r2, r3
 8016cde:	693b      	ldr	r3, [r7, #16]
 8016ce0:	889b      	ldrh	r3, [r3, #4]
 8016ce2:	b29b      	uxth	r3, r3
 8016ce4:	429a      	cmp	r2, r3
 8016ce6:	d102      	bne.n	8016cee <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8016cec:	e0b6      	b.n	8016e5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cf0:	889b      	ldrh	r3, [r3, #4]
 8016cf2:	b29a      	uxth	r2, r3
 8016cf4:	693b      	ldr	r3, [r7, #16]
 8016cf6:	88db      	ldrh	r3, [r3, #6]
 8016cf8:	b29b      	uxth	r3, r3
 8016cfa:	429a      	cmp	r2, r3
 8016cfc:	d202      	bcs.n	8016d04 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8016d02:	e0ab      	b.n	8016e5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d009      	beq.n	8016d1e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d0c:	88db      	ldrh	r3, [r3, #6]
 8016d0e:	b29a      	uxth	r2, r3
 8016d10:	693b      	ldr	r3, [r7, #16]
 8016d12:	889b      	ldrh	r3, [r3, #4]
 8016d14:	b29b      	uxth	r3, r3
 8016d16:	429a      	cmp	r2, r3
 8016d18:	d001      	beq.n	8016d1e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016d1e:	693b      	ldr	r3, [r7, #16]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8016d24:	693b      	ldr	r3, [r7, #16]
 8016d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8016d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d193      	bne.n	8016c56 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016d2e:	e000      	b.n	8016d32 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016d30:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d12d      	bne.n	8016d94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d01c      	beq.n	8016d78 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d40:	88db      	ldrh	r3, [r3, #6]
 8016d42:	b29a      	uxth	r2, r3
 8016d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d46:	889b      	ldrh	r3, [r3, #4]
 8016d48:	b29b      	uxth	r3, r3
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	d906      	bls.n	8016d5c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016d4e:	4b45      	ldr	r3, [pc, #276]	@ (8016e64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016d50:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8016d54:	4944      	ldr	r1, [pc, #272]	@ (8016e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016d56:	4845      	ldr	r0, [pc, #276]	@ (8016e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016d58:	f000 ff82 	bl	8017c60 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d5e:	68ba      	ldr	r2, [r7, #8]
 8016d60:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d64:	88db      	ldrh	r3, [r3, #6]
 8016d66:	b29a      	uxth	r2, r3
 8016d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d6a:	889b      	ldrh	r3, [r3, #4]
 8016d6c:	b29b      	uxth	r3, r3
 8016d6e:	429a      	cmp	r2, r3
 8016d70:	d010      	beq.n	8016d94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016d72:	2300      	movs	r3, #0
 8016d74:	623b      	str	r3, [r7, #32]
 8016d76:	e00d      	b.n	8016d94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	685b      	ldr	r3, [r3, #4]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d006      	beq.n	8016d8e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016d80:	4b38      	ldr	r3, [pc, #224]	@ (8016e64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016d82:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8016d86:	493a      	ldr	r1, [pc, #232]	@ (8016e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016d88:	4838      	ldr	r0, [pc, #224]	@ (8016e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016d8a:	f000 ff69 	bl	8017c60 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	68ba      	ldr	r2, [r7, #8]
 8016d92:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d105      	bne.n	8016da6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	7f9b      	ldrb	r3, [r3, #30]
 8016d9e:	f003 0301 	and.w	r3, r3, #1
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d059      	beq.n	8016e5a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016da6:	6a3b      	ldr	r3, [r7, #32]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d04f      	beq.n	8016e4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	685b      	ldr	r3, [r3, #4]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d006      	beq.n	8016dc2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	685b      	ldr	r3, [r3, #4]
 8016db8:	685b      	ldr	r3, [r3, #4]
 8016dba:	889b      	ldrh	r3, [r3, #4]
 8016dbc:	b29b      	uxth	r3, r3
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d002      	beq.n	8016dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	623b      	str	r3, [r7, #32]
 8016dc6:	e041      	b.n	8016e4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dca:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8016dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016dd2:	e012      	b.n	8016dfa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dd6:	685b      	ldr	r3, [r3, #4]
 8016dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8016dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ddc:	88db      	ldrh	r3, [r3, #6]
 8016dde:	b29a      	uxth	r2, r3
 8016de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016de2:	889b      	ldrh	r3, [r3, #4]
 8016de4:	b29b      	uxth	r3, r3
 8016de6:	429a      	cmp	r2, r3
 8016de8:	d002      	beq.n	8016df0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016dea:	2300      	movs	r3, #0
 8016dec:	623b      	str	r3, [r7, #32]
            break;
 8016dee:	e007      	b.n	8016e00 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016df2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8016df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d1e9      	bne.n	8016dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016e00:	6a3b      	ldr	r3, [r7, #32]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d022      	beq.n	8016e4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	685b      	ldr	r3, [r3, #4]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d106      	bne.n	8016e1c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016e0e:	4b15      	ldr	r3, [pc, #84]	@ (8016e64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e10:	f240 12df 	movw	r2, #479	@ 0x1df
 8016e14:	4917      	ldr	r1, [pc, #92]	@ (8016e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016e16:	4815      	ldr	r0, [pc, #84]	@ (8016e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016e18:	f000 ff22 	bl	8017c60 <iprintf>
          LWIP_ASSERT("sanity check",
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	685b      	ldr	r3, [r3, #4]
 8016e20:	685b      	ldr	r3, [r3, #4]
 8016e22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016e24:	429a      	cmp	r2, r3
 8016e26:	d106      	bne.n	8016e36 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016e28:	4b0e      	ldr	r3, [pc, #56]	@ (8016e64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e2a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8016e2e:	4911      	ldr	r1, [pc, #68]	@ (8016e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016e30:	480e      	ldr	r0, [pc, #56]	@ (8016e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016e32:	f000 ff15 	bl	8017c60 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d006      	beq.n	8016e4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016e3e:	4b09      	ldr	r3, [pc, #36]	@ (8016e64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e40:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8016e44:	490c      	ldr	r1, [pc, #48]	@ (8016e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016e46:	4809      	ldr	r0, [pc, #36]	@ (8016e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016e48:	f000 ff0a 	bl	8017c60 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016e4c:	6a3b      	ldr	r3, [r7, #32]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	bf14      	ite	ne
 8016e52:	2301      	movne	r3, #1
 8016e54:	2300      	moveq	r3, #0
 8016e56:	b2db      	uxtb	r3, r3
 8016e58:	e000      	b.n	8016e5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016e5a:	2300      	movs	r3, #0
}
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	3730      	adds	r7, #48	@ 0x30
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd80      	pop	{r7, pc}
 8016e64:	0801c4f0 	.word	0x0801c4f0
 8016e68:	0801c5d4 	.word	0x0801c5d4
 8016e6c:	0801c538 	.word	0x0801c538
 8016e70:	0801c5f4 	.word	0x0801c5f4
 8016e74:	0801c62c 	.word	0x0801c62c
 8016e78:	0801c63c 	.word	0x0801c63c

08016e7c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b08e      	sub	sp, #56	@ 0x38
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e8c:	781b      	ldrb	r3, [r3, #0]
 8016e8e:	f003 030f 	and.w	r3, r3, #15
 8016e92:	b2db      	uxtb	r3, r3
 8016e94:	009b      	lsls	r3, r3, #2
 8016e96:	b2db      	uxtb	r3, r3
 8016e98:	2b14      	cmp	r3, #20
 8016e9a:	f040 8171 	bne.w	8017180 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ea0:	88db      	ldrh	r3, [r3, #6]
 8016ea2:	b29b      	uxth	r3, r3
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	f7f5 fd7d 	bl	800c9a4 <lwip_htons>
 8016eaa:	4603      	mov	r3, r0
 8016eac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016eb0:	b29b      	uxth	r3, r3
 8016eb2:	00db      	lsls	r3, r3, #3
 8016eb4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016eb8:	885b      	ldrh	r3, [r3, #2]
 8016eba:	b29b      	uxth	r3, r3
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f7f5 fd71 	bl	800c9a4 <lwip_htons>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ec8:	781b      	ldrb	r3, [r3, #0]
 8016eca:	f003 030f 	and.w	r3, r3, #15
 8016ece:	b2db      	uxtb	r3, r3
 8016ed0:	009b      	lsls	r3, r3, #2
 8016ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8016ed6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016eda:	b29b      	uxth	r3, r3
 8016edc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016ede:	429a      	cmp	r2, r3
 8016ee0:	f0c0 8150 	bcc.w	8017184 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016ee8:	b29b      	uxth	r3, r3
 8016eea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016eec:	1ad3      	subs	r3, r2, r3
 8016eee:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016ef0:	6878      	ldr	r0, [r7, #4]
 8016ef2:	f7f7 f9d7 	bl	800e2a4 <pbuf_clen>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016efa:	4b8c      	ldr	r3, [pc, #560]	@ (801712c <ip4_reass+0x2b0>)
 8016efc:	881b      	ldrh	r3, [r3, #0]
 8016efe:	461a      	mov	r2, r3
 8016f00:	8c3b      	ldrh	r3, [r7, #32]
 8016f02:	4413      	add	r3, r2
 8016f04:	2b0a      	cmp	r3, #10
 8016f06:	dd10      	ble.n	8016f2a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016f08:	8c3b      	ldrh	r3, [r7, #32]
 8016f0a:	4619      	mov	r1, r3
 8016f0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016f0e:	f7ff fd81 	bl	8016a14 <ip_reass_remove_oldest_datagram>
 8016f12:	4603      	mov	r3, r0
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	f000 8137 	beq.w	8017188 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016f1a:	4b84      	ldr	r3, [pc, #528]	@ (801712c <ip4_reass+0x2b0>)
 8016f1c:	881b      	ldrh	r3, [r3, #0]
 8016f1e:	461a      	mov	r2, r3
 8016f20:	8c3b      	ldrh	r3, [r7, #32]
 8016f22:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016f24:	2b0a      	cmp	r3, #10
 8016f26:	f300 812f 	bgt.w	8017188 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016f2a:	4b81      	ldr	r3, [pc, #516]	@ (8017130 <ip4_reass+0x2b4>)
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8016f30:	e015      	b.n	8016f5e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f34:	695a      	ldr	r2, [r3, #20]
 8016f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f38:	68db      	ldr	r3, [r3, #12]
 8016f3a:	429a      	cmp	r2, r3
 8016f3c:	d10c      	bne.n	8016f58 <ip4_reass+0xdc>
 8016f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f40:	699a      	ldr	r2, [r3, #24]
 8016f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f44:	691b      	ldr	r3, [r3, #16]
 8016f46:	429a      	cmp	r2, r3
 8016f48:	d106      	bne.n	8016f58 <ip4_reass+0xdc>
 8016f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f4c:	899a      	ldrh	r2, [r3, #12]
 8016f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f50:	889b      	ldrh	r3, [r3, #4]
 8016f52:	b29b      	uxth	r3, r3
 8016f54:	429a      	cmp	r2, r3
 8016f56:	d006      	beq.n	8016f66 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8016f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d1e6      	bne.n	8016f32 <ip4_reass+0xb6>
 8016f64:	e000      	b.n	8016f68 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016f66:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d109      	bne.n	8016f82 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016f6e:	8c3b      	ldrh	r3, [r7, #32]
 8016f70:	4619      	mov	r1, r3
 8016f72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016f74:	f7ff fdb0 	bl	8016ad8 <ip_reass_enqueue_new_datagram>
 8016f78:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d11c      	bne.n	8016fba <ip4_reass+0x13e>
      goto nullreturn;
 8016f80:	e105      	b.n	801718e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f84:	88db      	ldrh	r3, [r3, #6]
 8016f86:	b29b      	uxth	r3, r3
 8016f88:	4618      	mov	r0, r3
 8016f8a:	f7f5 fd0b 	bl	800c9a4 <lwip_htons>
 8016f8e:	4603      	mov	r3, r0
 8016f90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d110      	bne.n	8016fba <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f9a:	89db      	ldrh	r3, [r3, #14]
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	f7f5 fd01 	bl	800c9a4 <lwip_htons>
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d006      	beq.n	8016fba <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fae:	3308      	adds	r3, #8
 8016fb0:	2214      	movs	r2, #20
 8016fb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	f000 ffbe 	bl	8017f36 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fbc:	88db      	ldrh	r3, [r3, #6]
 8016fbe:	b29b      	uxth	r3, r3
 8016fc0:	f003 0320 	and.w	r3, r3, #32
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	bf0c      	ite	eq
 8016fc8:	2301      	moveq	r3, #1
 8016fca:	2300      	movne	r3, #0
 8016fcc:	b2db      	uxtb	r3, r3
 8016fce:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016fd0:	69fb      	ldr	r3, [r7, #28]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d00e      	beq.n	8016ff4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016fd6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016fd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016fda:	4413      	add	r3, r2
 8016fdc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016fde:	8b7a      	ldrh	r2, [r7, #26]
 8016fe0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016fe2:	429a      	cmp	r2, r3
 8016fe4:	f0c0 80a0 	bcc.w	8017128 <ip4_reass+0x2ac>
 8016fe8:	8b7b      	ldrh	r3, [r7, #26]
 8016fea:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8016fee:	4293      	cmp	r3, r2
 8016ff0:	f200 809a 	bhi.w	8017128 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016ff4:	69fa      	ldr	r2, [r7, #28]
 8016ff6:	6879      	ldr	r1, [r7, #4]
 8016ff8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016ffa:	f7ff fdd5 	bl	8016ba8 <ip_reass_chain_frag_into_datagram_and_validate>
 8016ffe:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017000:	697b      	ldr	r3, [r7, #20]
 8017002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017006:	f000 809b 	beq.w	8017140 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801700a:	4b48      	ldr	r3, [pc, #288]	@ (801712c <ip4_reass+0x2b0>)
 801700c:	881a      	ldrh	r2, [r3, #0]
 801700e:	8c3b      	ldrh	r3, [r7, #32]
 8017010:	4413      	add	r3, r2
 8017012:	b29a      	uxth	r2, r3
 8017014:	4b45      	ldr	r3, [pc, #276]	@ (801712c <ip4_reass+0x2b0>)
 8017016:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017018:	69fb      	ldr	r3, [r7, #28]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d00d      	beq.n	801703a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801701e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017020:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017022:	4413      	add	r3, r2
 8017024:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017028:	8a7a      	ldrh	r2, [r7, #18]
 801702a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801702c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801702e:	7f9b      	ldrb	r3, [r3, #30]
 8017030:	f043 0301 	orr.w	r3, r3, #1
 8017034:	b2da      	uxtb	r2, r3
 8017036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017038:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801703a:	697b      	ldr	r3, [r7, #20]
 801703c:	2b01      	cmp	r3, #1
 801703e:	d171      	bne.n	8017124 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017042:	8b9b      	ldrh	r3, [r3, #28]
 8017044:	3314      	adds	r3, #20
 8017046:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801704a:	685b      	ldr	r3, [r3, #4]
 801704c:	685b      	ldr	r3, [r3, #4]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017054:	685b      	ldr	r3, [r3, #4]
 8017056:	685b      	ldr	r3, [r3, #4]
 8017058:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801705a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801705c:	3308      	adds	r3, #8
 801705e:	2214      	movs	r2, #20
 8017060:	4619      	mov	r1, r3
 8017062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017064:	f000 ff67 	bl	8017f36 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017068:	8a3b      	ldrh	r3, [r7, #16]
 801706a:	4618      	mov	r0, r3
 801706c:	f7f5 fc9a 	bl	800c9a4 <lwip_htons>
 8017070:	4603      	mov	r3, r0
 8017072:	461a      	mov	r2, r3
 8017074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017076:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801707a:	2200      	movs	r2, #0
 801707c:	719a      	strb	r2, [r3, #6]
 801707e:	2200      	movs	r2, #0
 8017080:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017084:	2200      	movs	r2, #0
 8017086:	729a      	strb	r2, [r3, #10]
 8017088:	2200      	movs	r2, #0
 801708a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801708c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801708e:	685b      	ldr	r3, [r3, #4]
 8017090:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017092:	e00d      	b.n	80170b0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017096:	685b      	ldr	r3, [r3, #4]
 8017098:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801709a:	2114      	movs	r1, #20
 801709c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801709e:	f7f6 ffed 	bl	800e07c <pbuf_remove_header>
      pbuf_cat(p, r);
 80170a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80170a4:	6878      	ldr	r0, [r7, #4]
 80170a6:	f7f7 f93d 	bl	800e324 <pbuf_cat>
      r = iprh->next_pbuf;
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80170b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d1ee      	bne.n	8017094 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80170b6:	4b1e      	ldr	r3, [pc, #120]	@ (8017130 <ip4_reass+0x2b4>)
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80170bc:	429a      	cmp	r2, r3
 80170be:	d102      	bne.n	80170c6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80170c0:	2300      	movs	r3, #0
 80170c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80170c4:	e010      	b.n	80170e8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80170c6:	4b1a      	ldr	r3, [pc, #104]	@ (8017130 <ip4_reass+0x2b4>)
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80170cc:	e007      	b.n	80170de <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80170ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80170d4:	429a      	cmp	r2, r3
 80170d6:	d006      	beq.n	80170e6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80170d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80170de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d1f4      	bne.n	80170ce <ip4_reass+0x252>
 80170e4:	e000      	b.n	80170e8 <ip4_reass+0x26c>
          break;
 80170e6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80170e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80170ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80170ec:	f7ff fd2e 	bl	8016b4c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80170f0:	6878      	ldr	r0, [r7, #4]
 80170f2:	f7f7 f8d7 	bl	800e2a4 <pbuf_clen>
 80170f6:	4603      	mov	r3, r0
 80170f8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80170fa:	4b0c      	ldr	r3, [pc, #48]	@ (801712c <ip4_reass+0x2b0>)
 80170fc:	881b      	ldrh	r3, [r3, #0]
 80170fe:	8c3a      	ldrh	r2, [r7, #32]
 8017100:	429a      	cmp	r2, r3
 8017102:	d906      	bls.n	8017112 <ip4_reass+0x296>
 8017104:	4b0b      	ldr	r3, [pc, #44]	@ (8017134 <ip4_reass+0x2b8>)
 8017106:	f240 229b 	movw	r2, #667	@ 0x29b
 801710a:	490b      	ldr	r1, [pc, #44]	@ (8017138 <ip4_reass+0x2bc>)
 801710c:	480b      	ldr	r0, [pc, #44]	@ (801713c <ip4_reass+0x2c0>)
 801710e:	f000 fda7 	bl	8017c60 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017112:	4b06      	ldr	r3, [pc, #24]	@ (801712c <ip4_reass+0x2b0>)
 8017114:	881a      	ldrh	r2, [r3, #0]
 8017116:	8c3b      	ldrh	r3, [r7, #32]
 8017118:	1ad3      	subs	r3, r2, r3
 801711a:	b29a      	uxth	r2, r3
 801711c:	4b03      	ldr	r3, [pc, #12]	@ (801712c <ip4_reass+0x2b0>)
 801711e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	e038      	b.n	8017196 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017124:	2300      	movs	r3, #0
 8017126:	e036      	b.n	8017196 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017128:	bf00      	nop
 801712a:	e00a      	b.n	8017142 <ip4_reass+0x2c6>
 801712c:	20010150 	.word	0x20010150
 8017130:	2001014c 	.word	0x2001014c
 8017134:	0801c4f0 	.word	0x0801c4f0
 8017138:	0801c660 	.word	0x0801c660
 801713c:	0801c538 	.word	0x0801c538
    goto nullreturn_ipr;
 8017140:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017144:	2b00      	cmp	r3, #0
 8017146:	d106      	bne.n	8017156 <ip4_reass+0x2da>
 8017148:	4b15      	ldr	r3, [pc, #84]	@ (80171a0 <ip4_reass+0x324>)
 801714a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801714e:	4915      	ldr	r1, [pc, #84]	@ (80171a4 <ip4_reass+0x328>)
 8017150:	4815      	ldr	r0, [pc, #84]	@ (80171a8 <ip4_reass+0x32c>)
 8017152:	f000 fd85 	bl	8017c60 <iprintf>
  if (ipr->p == NULL) {
 8017156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017158:	685b      	ldr	r3, [r3, #4]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d116      	bne.n	801718c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801715e:	4b13      	ldr	r3, [pc, #76]	@ (80171ac <ip4_reass+0x330>)
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017164:	429a      	cmp	r2, r3
 8017166:	d006      	beq.n	8017176 <ip4_reass+0x2fa>
 8017168:	4b0d      	ldr	r3, [pc, #52]	@ (80171a0 <ip4_reass+0x324>)
 801716a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801716e:	4910      	ldr	r1, [pc, #64]	@ (80171b0 <ip4_reass+0x334>)
 8017170:	480d      	ldr	r0, [pc, #52]	@ (80171a8 <ip4_reass+0x32c>)
 8017172:	f000 fd75 	bl	8017c60 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017176:	2100      	movs	r1, #0
 8017178:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801717a:	f7ff fce7 	bl	8016b4c <ip_reass_dequeue_datagram>
 801717e:	e006      	b.n	801718e <ip4_reass+0x312>
    goto nullreturn;
 8017180:	bf00      	nop
 8017182:	e004      	b.n	801718e <ip4_reass+0x312>
    goto nullreturn;
 8017184:	bf00      	nop
 8017186:	e002      	b.n	801718e <ip4_reass+0x312>
      goto nullreturn;
 8017188:	bf00      	nop
 801718a:	e000      	b.n	801718e <ip4_reass+0x312>
  }

nullreturn:
 801718c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801718e:	6878      	ldr	r0, [r7, #4]
 8017190:	f7f6 fffa 	bl	800e188 <pbuf_free>
  return NULL;
 8017194:	2300      	movs	r3, #0
}
 8017196:	4618      	mov	r0, r3
 8017198:	3738      	adds	r7, #56	@ 0x38
 801719a:	46bd      	mov	sp, r7
 801719c:	bd80      	pop	{r7, pc}
 801719e:	bf00      	nop
 80171a0:	0801c4f0 	.word	0x0801c4f0
 80171a4:	0801c67c 	.word	0x0801c67c
 80171a8:	0801c538 	.word	0x0801c538
 80171ac:	2001014c 	.word	0x2001014c
 80171b0:	0801c688 	.word	0x0801c688

080171b4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80171b4:	b580      	push	{r7, lr}
 80171b6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80171b8:	2005      	movs	r0, #5
 80171ba:	f7f6 f8cb 	bl	800d354 <memp_malloc>
 80171be:	4603      	mov	r3, r0
}
 80171c0:	4618      	mov	r0, r3
 80171c2:	bd80      	pop	{r7, pc}

080171c4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80171c4:	b580      	push	{r7, lr}
 80171c6:	b082      	sub	sp, #8
 80171c8:	af00      	add	r7, sp, #0
 80171ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d106      	bne.n	80171e0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80171d2:	4b07      	ldr	r3, [pc, #28]	@ (80171f0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80171d4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80171d8:	4906      	ldr	r1, [pc, #24]	@ (80171f4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80171da:	4807      	ldr	r0, [pc, #28]	@ (80171f8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80171dc:	f000 fd40 	bl	8017c60 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80171e0:	6879      	ldr	r1, [r7, #4]
 80171e2:	2005      	movs	r0, #5
 80171e4:	f7f6 f92c 	bl	800d440 <memp_free>
}
 80171e8:	bf00      	nop
 80171ea:	3708      	adds	r7, #8
 80171ec:	46bd      	mov	sp, r7
 80171ee:	bd80      	pop	{r7, pc}
 80171f0:	0801c4f0 	.word	0x0801c4f0
 80171f4:	0801c6a8 	.word	0x0801c6a8
 80171f8:	0801c538 	.word	0x0801c538

080171fc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80171fc:	b580      	push	{r7, lr}
 80171fe:	b084      	sub	sp, #16
 8017200:	af00      	add	r7, sp, #0
 8017202:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d106      	bne.n	801721c <ipfrag_free_pbuf_custom+0x20>
 801720e:	4b11      	ldr	r3, [pc, #68]	@ (8017254 <ipfrag_free_pbuf_custom+0x58>)
 8017210:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8017214:	4910      	ldr	r1, [pc, #64]	@ (8017258 <ipfrag_free_pbuf_custom+0x5c>)
 8017216:	4811      	ldr	r0, [pc, #68]	@ (801725c <ipfrag_free_pbuf_custom+0x60>)
 8017218:	f000 fd22 	bl	8017c60 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801721c:	68fa      	ldr	r2, [r7, #12]
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	429a      	cmp	r2, r3
 8017222:	d006      	beq.n	8017232 <ipfrag_free_pbuf_custom+0x36>
 8017224:	4b0b      	ldr	r3, [pc, #44]	@ (8017254 <ipfrag_free_pbuf_custom+0x58>)
 8017226:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801722a:	490d      	ldr	r1, [pc, #52]	@ (8017260 <ipfrag_free_pbuf_custom+0x64>)
 801722c:	480b      	ldr	r0, [pc, #44]	@ (801725c <ipfrag_free_pbuf_custom+0x60>)
 801722e:	f000 fd17 	bl	8017c60 <iprintf>
  if (pcr->original != NULL) {
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	695b      	ldr	r3, [r3, #20]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d004      	beq.n	8017244 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	695b      	ldr	r3, [r3, #20]
 801723e:	4618      	mov	r0, r3
 8017240:	f7f6 ffa2 	bl	800e188 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017244:	68f8      	ldr	r0, [r7, #12]
 8017246:	f7ff ffbd 	bl	80171c4 <ip_frag_free_pbuf_custom_ref>
}
 801724a:	bf00      	nop
 801724c:	3710      	adds	r7, #16
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}
 8017252:	bf00      	nop
 8017254:	0801c4f0 	.word	0x0801c4f0
 8017258:	0801c6b4 	.word	0x0801c6b4
 801725c:	0801c538 	.word	0x0801c538
 8017260:	0801c6c0 	.word	0x0801c6c0

08017264 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017264:	b580      	push	{r7, lr}
 8017266:	b094      	sub	sp, #80	@ 0x50
 8017268:	af02      	add	r7, sp, #8
 801726a:	60f8      	str	r0, [r7, #12]
 801726c:	60b9      	str	r1, [r7, #8]
 801726e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017270:	2300      	movs	r3, #0
 8017272:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017276:	68bb      	ldr	r3, [r7, #8]
 8017278:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801727a:	3b14      	subs	r3, #20
 801727c:	2b00      	cmp	r3, #0
 801727e:	da00      	bge.n	8017282 <ip4_frag+0x1e>
 8017280:	3307      	adds	r3, #7
 8017282:	10db      	asrs	r3, r3, #3
 8017284:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017286:	2314      	movs	r3, #20
 8017288:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	685b      	ldr	r3, [r3, #4]
 801728e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8017290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017292:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017296:	781b      	ldrb	r3, [r3, #0]
 8017298:	f003 030f 	and.w	r3, r3, #15
 801729c:	b2db      	uxtb	r3, r3
 801729e:	009b      	lsls	r3, r3, #2
 80172a0:	b2db      	uxtb	r3, r3
 80172a2:	2b14      	cmp	r3, #20
 80172a4:	d002      	beq.n	80172ac <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80172a6:	f06f 0305 	mvn.w	r3, #5
 80172aa:	e110      	b.n	80174ce <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	895b      	ldrh	r3, [r3, #10]
 80172b0:	2b13      	cmp	r3, #19
 80172b2:	d809      	bhi.n	80172c8 <ip4_frag+0x64>
 80172b4:	4b88      	ldr	r3, [pc, #544]	@ (80174d8 <ip4_frag+0x274>)
 80172b6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80172ba:	4988      	ldr	r1, [pc, #544]	@ (80174dc <ip4_frag+0x278>)
 80172bc:	4888      	ldr	r0, [pc, #544]	@ (80174e0 <ip4_frag+0x27c>)
 80172be:	f000 fccf 	bl	8017c60 <iprintf>
 80172c2:	f06f 0305 	mvn.w	r3, #5
 80172c6:	e102      	b.n	80174ce <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80172c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172ca:	88db      	ldrh	r3, [r3, #6]
 80172cc:	b29b      	uxth	r3, r3
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7f5 fb68 	bl	800c9a4 <lwip_htons>
 80172d4:	4603      	mov	r3, r0
 80172d6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80172d8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80172da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80172de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80172e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80172e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80172e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	891b      	ldrh	r3, [r3, #8]
 80172ee:	3b14      	subs	r3, #20
 80172f0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80172f4:	e0e1      	b.n	80174ba <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80172f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80172f8:	00db      	lsls	r3, r3, #3
 80172fa:	b29b      	uxth	r3, r3
 80172fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017300:	4293      	cmp	r3, r2
 8017302:	bf28      	it	cs
 8017304:	4613      	movcs	r3, r2
 8017306:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017308:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801730c:	2114      	movs	r1, #20
 801730e:	200e      	movs	r0, #14
 8017310:	f7f6 fc56 	bl	800dbc0 <pbuf_alloc>
 8017314:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8017316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017318:	2b00      	cmp	r3, #0
 801731a:	f000 80d5 	beq.w	80174c8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017320:	895b      	ldrh	r3, [r3, #10]
 8017322:	2b13      	cmp	r3, #19
 8017324:	d806      	bhi.n	8017334 <ip4_frag+0xd0>
 8017326:	4b6c      	ldr	r3, [pc, #432]	@ (80174d8 <ip4_frag+0x274>)
 8017328:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801732c:	496d      	ldr	r1, [pc, #436]	@ (80174e4 <ip4_frag+0x280>)
 801732e:	486c      	ldr	r0, [pc, #432]	@ (80174e0 <ip4_frag+0x27c>)
 8017330:	f000 fc96 	bl	8017c60 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017336:	685b      	ldr	r3, [r3, #4]
 8017338:	2214      	movs	r2, #20
 801733a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801733c:	4618      	mov	r0, r3
 801733e:	f000 fdfa 	bl	8017f36 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017344:	685b      	ldr	r3, [r3, #4]
 8017346:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8017348:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801734a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801734e:	e064      	b.n	801741a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	895a      	ldrh	r2, [r3, #10]
 8017354:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017356:	1ad3      	subs	r3, r2, r3
 8017358:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	895b      	ldrh	r3, [r3, #10]
 801735e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017360:	429a      	cmp	r2, r3
 8017362:	d906      	bls.n	8017372 <ip4_frag+0x10e>
 8017364:	4b5c      	ldr	r3, [pc, #368]	@ (80174d8 <ip4_frag+0x274>)
 8017366:	f240 322d 	movw	r2, #813	@ 0x32d
 801736a:	495f      	ldr	r1, [pc, #380]	@ (80174e8 <ip4_frag+0x284>)
 801736c:	485c      	ldr	r0, [pc, #368]	@ (80174e0 <ip4_frag+0x27c>)
 801736e:	f000 fc77 	bl	8017c60 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017372:	8bfa      	ldrh	r2, [r7, #30]
 8017374:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017378:	4293      	cmp	r3, r2
 801737a:	bf28      	it	cs
 801737c:	4613      	movcs	r3, r2
 801737e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017382:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017386:	2b00      	cmp	r3, #0
 8017388:	d105      	bne.n	8017396 <ip4_frag+0x132>
        poff = 0;
 801738a:	2300      	movs	r3, #0
 801738c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	60fb      	str	r3, [r7, #12]
        continue;
 8017394:	e041      	b.n	801741a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017396:	f7ff ff0d 	bl	80171b4 <ip_frag_alloc_pbuf_custom_ref>
 801739a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801739c:	69bb      	ldr	r3, [r7, #24]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d103      	bne.n	80173aa <ip4_frag+0x146>
        pbuf_free(rambuf);
 80173a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80173a4:	f7f6 fef0 	bl	800e188 <pbuf_free>
        goto memerr;
 80173a8:	e08f      	b.n	80174ca <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80173aa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80173b0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80173b2:	4413      	add	r3, r2
 80173b4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80173b8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80173bc:	9201      	str	r2, [sp, #4]
 80173be:	9300      	str	r3, [sp, #0]
 80173c0:	4603      	mov	r3, r0
 80173c2:	2241      	movs	r2, #65	@ 0x41
 80173c4:	2000      	movs	r0, #0
 80173c6:	f7f6 fd25 	bl	800de14 <pbuf_alloced_custom>
 80173ca:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80173cc:	697b      	ldr	r3, [r7, #20]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d106      	bne.n	80173e0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80173d2:	69b8      	ldr	r0, [r7, #24]
 80173d4:	f7ff fef6 	bl	80171c4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80173d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80173da:	f7f6 fed5 	bl	800e188 <pbuf_free>
        goto memerr;
 80173de:	e074      	b.n	80174ca <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80173e0:	68f8      	ldr	r0, [r7, #12]
 80173e2:	f7f6 ff77 	bl	800e2d4 <pbuf_ref>
      pcr->original = p;
 80173e6:	69bb      	ldr	r3, [r7, #24]
 80173e8:	68fa      	ldr	r2, [r7, #12]
 80173ea:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80173ec:	69bb      	ldr	r3, [r7, #24]
 80173ee:	4a3f      	ldr	r2, [pc, #252]	@ (80174ec <ip4_frag+0x288>)
 80173f0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80173f2:	6979      	ldr	r1, [r7, #20]
 80173f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80173f6:	f7f6 ff95 	bl	800e324 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80173fa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80173fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017402:	1ad3      	subs	r3, r2, r3
 8017404:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8017408:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801740c:	2b00      	cmp	r3, #0
 801740e:	d004      	beq.n	801741a <ip4_frag+0x1b6>
        poff = 0;
 8017410:	2300      	movs	r3, #0
 8017412:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801741a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801741e:	2b00      	cmp	r3, #0
 8017420:	d196      	bne.n	8017350 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017422:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017424:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017428:	4413      	add	r3, r2
 801742a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801742c:	68bb      	ldr	r3, [r7, #8]
 801742e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017430:	f1a3 0213 	sub.w	r2, r3, #19
 8017434:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017438:	429a      	cmp	r2, r3
 801743a:	bfcc      	ite	gt
 801743c:	2301      	movgt	r3, #1
 801743e:	2300      	movle	r3, #0
 8017440:	b2db      	uxtb	r3, r3
 8017442:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017444:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017448:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801744c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801744e:	6a3b      	ldr	r3, [r7, #32]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d002      	beq.n	801745a <ip4_frag+0x1f6>
 8017454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017456:	2b00      	cmp	r3, #0
 8017458:	d003      	beq.n	8017462 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801745a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801745c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017460:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017462:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017464:	4618      	mov	r0, r3
 8017466:	f7f5 fa9d 	bl	800c9a4 <lwip_htons>
 801746a:	4603      	mov	r3, r0
 801746c:	461a      	mov	r2, r3
 801746e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017470:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017472:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017474:	3314      	adds	r3, #20
 8017476:	b29b      	uxth	r3, r3
 8017478:	4618      	mov	r0, r3
 801747a:	f7f5 fa93 	bl	800c9a4 <lwip_htons>
 801747e:	4603      	mov	r3, r0
 8017480:	461a      	mov	r2, r3
 8017482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017484:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017488:	2200      	movs	r2, #0
 801748a:	729a      	strb	r2, [r3, #10]
 801748c:	2200      	movs	r2, #0
 801748e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017490:	68bb      	ldr	r3, [r7, #8]
 8017492:	695b      	ldr	r3, [r3, #20]
 8017494:	687a      	ldr	r2, [r7, #4]
 8017496:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017498:	68b8      	ldr	r0, [r7, #8]
 801749a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801749c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801749e:	f7f6 fe73 	bl	800e188 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80174a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80174a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80174a8:	1ad3      	subs	r3, r2, r3
 80174aa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80174ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80174b2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80174b4:	4413      	add	r3, r2
 80174b6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80174ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80174be:	2b00      	cmp	r3, #0
 80174c0:	f47f af19 	bne.w	80172f6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80174c4:	2300      	movs	r3, #0
 80174c6:	e002      	b.n	80174ce <ip4_frag+0x26a>
      goto memerr;
 80174c8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80174ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80174ce:	4618      	mov	r0, r3
 80174d0:	3748      	adds	r7, #72	@ 0x48
 80174d2:	46bd      	mov	sp, r7
 80174d4:	bd80      	pop	{r7, pc}
 80174d6:	bf00      	nop
 80174d8:	0801c4f0 	.word	0x0801c4f0
 80174dc:	0801c6cc 	.word	0x0801c6cc
 80174e0:	0801c538 	.word	0x0801c538
 80174e4:	0801c6e8 	.word	0x0801c6e8
 80174e8:	0801c708 	.word	0x0801c708
 80174ec:	080171fd 	.word	0x080171fd

080174f0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b086      	sub	sp, #24
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
 80174f8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80174fa:	230e      	movs	r3, #14
 80174fc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	895b      	ldrh	r3, [r3, #10]
 8017502:	2b0e      	cmp	r3, #14
 8017504:	d96e      	bls.n	80175e4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	7bdb      	ldrb	r3, [r3, #15]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d106      	bne.n	801751c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801750e:	683b      	ldr	r3, [r7, #0]
 8017510:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017514:	3301      	adds	r3, #1
 8017516:	b2da      	uxtb	r2, r3
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	685b      	ldr	r3, [r3, #4]
 8017520:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017522:	693b      	ldr	r3, [r7, #16]
 8017524:	7b1a      	ldrb	r2, [r3, #12]
 8017526:	7b5b      	ldrb	r3, [r3, #13]
 8017528:	021b      	lsls	r3, r3, #8
 801752a:	4313      	orrs	r3, r2
 801752c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801752e:	693b      	ldr	r3, [r7, #16]
 8017530:	781b      	ldrb	r3, [r3, #0]
 8017532:	f003 0301 	and.w	r3, r3, #1
 8017536:	2b00      	cmp	r3, #0
 8017538:	d023      	beq.n	8017582 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801753a:	693b      	ldr	r3, [r7, #16]
 801753c:	781b      	ldrb	r3, [r3, #0]
 801753e:	2b01      	cmp	r3, #1
 8017540:	d10f      	bne.n	8017562 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017542:	693b      	ldr	r3, [r7, #16]
 8017544:	785b      	ldrb	r3, [r3, #1]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d11b      	bne.n	8017582 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801754a:	693b      	ldr	r3, [r7, #16]
 801754c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801754e:	2b5e      	cmp	r3, #94	@ 0x5e
 8017550:	d117      	bne.n	8017582 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	7b5b      	ldrb	r3, [r3, #13]
 8017556:	f043 0310 	orr.w	r3, r3, #16
 801755a:	b2da      	uxtb	r2, r3
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	735a      	strb	r2, [r3, #13]
 8017560:	e00f      	b.n	8017582 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017562:	693b      	ldr	r3, [r7, #16]
 8017564:	2206      	movs	r2, #6
 8017566:	4928      	ldr	r1, [pc, #160]	@ (8017608 <ethernet_input+0x118>)
 8017568:	4618      	mov	r0, r3
 801756a:	f000 fbee 	bl	8017d4a <memcmp>
 801756e:	4603      	mov	r3, r0
 8017570:	2b00      	cmp	r3, #0
 8017572:	d106      	bne.n	8017582 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	7b5b      	ldrb	r3, [r3, #13]
 8017578:	f043 0308 	orr.w	r3, r3, #8
 801757c:	b2da      	uxtb	r2, r3
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017582:	89fb      	ldrh	r3, [r7, #14]
 8017584:	2b08      	cmp	r3, #8
 8017586:	d003      	beq.n	8017590 <ethernet_input+0xa0>
 8017588:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801758c:	d014      	beq.n	80175b8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801758e:	e032      	b.n	80175f6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017590:	683b      	ldr	r3, [r7, #0]
 8017592:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017596:	f003 0308 	and.w	r3, r3, #8
 801759a:	2b00      	cmp	r3, #0
 801759c:	d024      	beq.n	80175e8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801759e:	8afb      	ldrh	r3, [r7, #22]
 80175a0:	4619      	mov	r1, r3
 80175a2:	6878      	ldr	r0, [r7, #4]
 80175a4:	f7f6 fd6a 	bl	800e07c <pbuf_remove_header>
 80175a8:	4603      	mov	r3, r0
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d11e      	bne.n	80175ec <ethernet_input+0xfc>
        ip4_input(p, netif);
 80175ae:	6839      	ldr	r1, [r7, #0]
 80175b0:	6878      	ldr	r0, [r7, #4]
 80175b2:	f7fe ff21 	bl	80163f8 <ip4_input>
      break;
 80175b6:	e013      	b.n	80175e0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80175b8:	683b      	ldr	r3, [r7, #0]
 80175ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80175be:	f003 0308 	and.w	r3, r3, #8
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d014      	beq.n	80175f0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80175c6:	8afb      	ldrh	r3, [r7, #22]
 80175c8:	4619      	mov	r1, r3
 80175ca:	6878      	ldr	r0, [r7, #4]
 80175cc:	f7f6 fd56 	bl	800e07c <pbuf_remove_header>
 80175d0:	4603      	mov	r3, r0
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d10e      	bne.n	80175f4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80175d6:	6839      	ldr	r1, [r7, #0]
 80175d8:	6878      	ldr	r0, [r7, #4]
 80175da:	f7fe f8c1 	bl	8015760 <etharp_input>
      break;
 80175de:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80175e0:	2300      	movs	r3, #0
 80175e2:	e00c      	b.n	80175fe <ethernet_input+0x10e>
    goto free_and_return;
 80175e4:	bf00      	nop
 80175e6:	e006      	b.n	80175f6 <ethernet_input+0x106>
        goto free_and_return;
 80175e8:	bf00      	nop
 80175ea:	e004      	b.n	80175f6 <ethernet_input+0x106>
        goto free_and_return;
 80175ec:	bf00      	nop
 80175ee:	e002      	b.n	80175f6 <ethernet_input+0x106>
        goto free_and_return;
 80175f0:	bf00      	nop
 80175f2:	e000      	b.n	80175f6 <ethernet_input+0x106>
        goto free_and_return;
 80175f4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80175f6:	6878      	ldr	r0, [r7, #4]
 80175f8:	f7f6 fdc6 	bl	800e188 <pbuf_free>
  return ERR_OK;
 80175fc:	2300      	movs	r3, #0
}
 80175fe:	4618      	mov	r0, r3
 8017600:	3718      	adds	r7, #24
 8017602:	46bd      	mov	sp, r7
 8017604:	bd80      	pop	{r7, pc}
 8017606:	bf00      	nop
 8017608:	0801c8e8 	.word	0x0801c8e8

0801760c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801760c:	b580      	push	{r7, lr}
 801760e:	b086      	sub	sp, #24
 8017610:	af00      	add	r7, sp, #0
 8017612:	60f8      	str	r0, [r7, #12]
 8017614:	60b9      	str	r1, [r7, #8]
 8017616:	607a      	str	r2, [r7, #4]
 8017618:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801761a:	8c3b      	ldrh	r3, [r7, #32]
 801761c:	4618      	mov	r0, r3
 801761e:	f7f5 f9c1 	bl	800c9a4 <lwip_htons>
 8017622:	4603      	mov	r3, r0
 8017624:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017626:	210e      	movs	r1, #14
 8017628:	68b8      	ldr	r0, [r7, #8]
 801762a:	f7f6 fd17 	bl	800e05c <pbuf_add_header>
 801762e:	4603      	mov	r3, r0
 8017630:	2b00      	cmp	r3, #0
 8017632:	d125      	bne.n	8017680 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017634:	68bb      	ldr	r3, [r7, #8]
 8017636:	685b      	ldr	r3, [r3, #4]
 8017638:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	8afa      	ldrh	r2, [r7, #22]
 801763e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017640:	693b      	ldr	r3, [r7, #16]
 8017642:	2206      	movs	r2, #6
 8017644:	6839      	ldr	r1, [r7, #0]
 8017646:	4618      	mov	r0, r3
 8017648:	f000 fc75 	bl	8017f36 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801764c:	693b      	ldr	r3, [r7, #16]
 801764e:	3306      	adds	r3, #6
 8017650:	2206      	movs	r2, #6
 8017652:	6879      	ldr	r1, [r7, #4]
 8017654:	4618      	mov	r0, r3
 8017656:	f000 fc6e 	bl	8017f36 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8017660:	2b06      	cmp	r3, #6
 8017662:	d006      	beq.n	8017672 <ethernet_output+0x66>
 8017664:	4b0a      	ldr	r3, [pc, #40]	@ (8017690 <ethernet_output+0x84>)
 8017666:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801766a:	490a      	ldr	r1, [pc, #40]	@ (8017694 <ethernet_output+0x88>)
 801766c:	480a      	ldr	r0, [pc, #40]	@ (8017698 <ethernet_output+0x8c>)
 801766e:	f000 faf7 	bl	8017c60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	699b      	ldr	r3, [r3, #24]
 8017676:	68b9      	ldr	r1, [r7, #8]
 8017678:	68f8      	ldr	r0, [r7, #12]
 801767a:	4798      	blx	r3
 801767c:	4603      	mov	r3, r0
 801767e:	e002      	b.n	8017686 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017680:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017682:	f06f 0301 	mvn.w	r3, #1
}
 8017686:	4618      	mov	r0, r3
 8017688:	3718      	adds	r7, #24
 801768a:	46bd      	mov	sp, r7
 801768c:	bd80      	pop	{r7, pc}
 801768e:	bf00      	nop
 8017690:	0801c718 	.word	0x0801c718
 8017694:	0801c750 	.word	0x0801c750
 8017698:	0801c784 	.word	0x0801c784

0801769c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b086      	sub	sp, #24
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
 80176a4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	60bb      	str	r3, [r7, #8]
 80176aa:	2304      	movs	r3, #4
 80176ac:	60fb      	str	r3, [r7, #12]
 80176ae:	2300      	movs	r3, #0
 80176b0:	613b      	str	r3, [r7, #16]
 80176b2:	2300      	movs	r3, #0
 80176b4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80176b6:	f107 0308 	add.w	r3, r7, #8
 80176ba:	2100      	movs	r1, #0
 80176bc:	4618      	mov	r0, r3
 80176be:	f7f0 f848 	bl	8007752 <osMessageCreate>
 80176c2:	4602      	mov	r2, r0
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d102      	bne.n	80176d6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80176d0:	f04f 33ff 	mov.w	r3, #4294967295
 80176d4:	e000      	b.n	80176d8 <sys_mbox_new+0x3c>

  return ERR_OK;
 80176d6:	2300      	movs	r3, #0
}
 80176d8:	4618      	mov	r0, r3
 80176da:	3718      	adds	r7, #24
 80176dc:	46bd      	mov	sp, r7
 80176de:	bd80      	pop	{r7, pc}

080176e0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b082      	sub	sp, #8
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	4618      	mov	r0, r3
 80176ee:	f7f0 f90d 	bl	800790c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	4618      	mov	r0, r3
 80176f8:	f7f0 f91e 	bl	8007938 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80176fc:	bf00      	nop
 80176fe:	3708      	adds	r7, #8
 8017700:	46bd      	mov	sp, r7
 8017702:	bd80      	pop	{r7, pc}

08017704 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b084      	sub	sp, #16
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]
 801770c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	6839      	ldr	r1, [r7, #0]
 8017714:	2200      	movs	r2, #0
 8017716:	4618      	mov	r0, r3
 8017718:	f7f0 f844 	bl	80077a4 <osMessagePut>
 801771c:	4603      	mov	r3, r0
 801771e:	2b00      	cmp	r3, #0
 8017720:	d102      	bne.n	8017728 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017722:	2300      	movs	r3, #0
 8017724:	73fb      	strb	r3, [r7, #15]
 8017726:	e001      	b.n	801772c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017728:	23ff      	movs	r3, #255	@ 0xff
 801772a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801772c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017730:	4618      	mov	r0, r3
 8017732:	3710      	adds	r7, #16
 8017734:	46bd      	mov	sp, r7
 8017736:	bd80      	pop	{r7, pc}

08017738 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017738:	b580      	push	{r7, lr}
 801773a:	b08c      	sub	sp, #48	@ 0x30
 801773c:	af00      	add	r7, sp, #0
 801773e:	61f8      	str	r0, [r7, #28]
 8017740:	61b9      	str	r1, [r7, #24]
 8017742:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017744:	f7ef fe30 	bl	80073a8 <osKernelSysTick>
 8017748:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801774a:	697b      	ldr	r3, [r7, #20]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d017      	beq.n	8017780 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017750:	69fb      	ldr	r3, [r7, #28]
 8017752:	6819      	ldr	r1, [r3, #0]
 8017754:	f107 0320 	add.w	r3, r7, #32
 8017758:	697a      	ldr	r2, [r7, #20]
 801775a:	4618      	mov	r0, r3
 801775c:	f7f0 f862 	bl	8007824 <osMessageGet>

    if(event.status == osEventMessage)
 8017760:	6a3b      	ldr	r3, [r7, #32]
 8017762:	2b10      	cmp	r3, #16
 8017764:	d109      	bne.n	801777a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017768:	461a      	mov	r2, r3
 801776a:	69bb      	ldr	r3, [r7, #24]
 801776c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801776e:	f7ef fe1b 	bl	80073a8 <osKernelSysTick>
 8017772:	4602      	mov	r2, r0
 8017774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017776:	1ad3      	subs	r3, r2, r3
 8017778:	e019      	b.n	80177ae <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801777a:	f04f 33ff 	mov.w	r3, #4294967295
 801777e:	e016      	b.n	80177ae <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017780:	69fb      	ldr	r3, [r7, #28]
 8017782:	6819      	ldr	r1, [r3, #0]
 8017784:	463b      	mov	r3, r7
 8017786:	f04f 32ff 	mov.w	r2, #4294967295
 801778a:	4618      	mov	r0, r3
 801778c:	f7f0 f84a 	bl	8007824 <osMessageGet>
 8017790:	f107 0320 	add.w	r3, r7, #32
 8017794:	463a      	mov	r2, r7
 8017796:	ca07      	ldmia	r2, {r0, r1, r2}
 8017798:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801779c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801779e:	461a      	mov	r2, r3
 80177a0:	69bb      	ldr	r3, [r7, #24]
 80177a2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80177a4:	f7ef fe00 	bl	80073a8 <osKernelSysTick>
 80177a8:	4602      	mov	r2, r0
 80177aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177ac:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80177ae:	4618      	mov	r0, r3
 80177b0:	3730      	adds	r7, #48	@ 0x30
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bd80      	pop	{r7, pc}

080177b6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80177b6:	b580      	push	{r7, lr}
 80177b8:	b086      	sub	sp, #24
 80177ba:	af00      	add	r7, sp, #0
 80177bc:	6078      	str	r0, [r7, #4]
 80177be:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	6819      	ldr	r1, [r3, #0]
 80177c4:	f107 030c 	add.w	r3, r7, #12
 80177c8:	2200      	movs	r2, #0
 80177ca:	4618      	mov	r0, r3
 80177cc:	f7f0 f82a 	bl	8007824 <osMessageGet>

  if(event.status == osEventMessage)
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	2b10      	cmp	r3, #16
 80177d4:	d105      	bne.n	80177e2 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80177d6:	693b      	ldr	r3, [r7, #16]
 80177d8:	461a      	mov	r2, r3
 80177da:	683b      	ldr	r3, [r7, #0]
 80177dc:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80177de:	2300      	movs	r3, #0
 80177e0:	e001      	b.n	80177e6 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80177e2:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80177e6:	4618      	mov	r0, r3
 80177e8:	3718      	adds	r7, #24
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd80      	pop	{r7, pc}

080177ee <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80177ee:	b480      	push	{r7}
 80177f0:	b083      	sub	sp, #12
 80177f2:	af00      	add	r7, sp, #0
 80177f4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d101      	bne.n	8017802 <sys_mbox_valid+0x14>
    return 0;
 80177fe:	2300      	movs	r3, #0
 8017800:	e000      	b.n	8017804 <sys_mbox_valid+0x16>
  else
    return 1;
 8017802:	2301      	movs	r3, #1
}
 8017804:	4618      	mov	r0, r3
 8017806:	370c      	adds	r7, #12
 8017808:	46bd      	mov	sp, r7
 801780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801780e:	4770      	bx	lr

08017810 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017810:	b480      	push	{r7}
 8017812:	b083      	sub	sp, #12
 8017814:	af00      	add	r7, sp, #0
 8017816:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	2200      	movs	r2, #0
 801781c:	601a      	str	r2, [r3, #0]
}
 801781e:	bf00      	nop
 8017820:	370c      	adds	r7, #12
 8017822:	46bd      	mov	sp, r7
 8017824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017828:	4770      	bx	lr

0801782a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801782a:	b580      	push	{r7, lr}
 801782c:	b084      	sub	sp, #16
 801782e:	af00      	add	r7, sp, #0
 8017830:	6078      	str	r0, [r7, #4]
 8017832:	460b      	mov	r3, r1
 8017834:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8017836:	2300      	movs	r3, #0
 8017838:	60bb      	str	r3, [r7, #8]
 801783a:	2300      	movs	r3, #0
 801783c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801783e:	f107 0308 	add.w	r3, r7, #8
 8017842:	2101      	movs	r1, #1
 8017844:	4618      	mov	r0, r3
 8017846:	f7ef febb 	bl	80075c0 <osSemaphoreCreate>
 801784a:	4602      	mov	r2, r0
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d102      	bne.n	801785e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017858:	f04f 33ff 	mov.w	r3, #4294967295
 801785c:	e009      	b.n	8017872 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801785e:	78fb      	ldrb	r3, [r7, #3]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d105      	bne.n	8017870 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	2100      	movs	r1, #0
 801786a:	4618      	mov	r0, r3
 801786c:	f7ef feda 	bl	8007624 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017870:	2300      	movs	r3, #0
}
 8017872:	4618      	mov	r0, r3
 8017874:	3710      	adds	r7, #16
 8017876:	46bd      	mov	sp, r7
 8017878:	bd80      	pop	{r7, pc}

0801787a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801787a:	b580      	push	{r7, lr}
 801787c:	b084      	sub	sp, #16
 801787e:	af00      	add	r7, sp, #0
 8017880:	6078      	str	r0, [r7, #4]
 8017882:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017884:	f7ef fd90 	bl	80073a8 <osKernelSysTick>
 8017888:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801788a:	683b      	ldr	r3, [r7, #0]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d011      	beq.n	80178b4 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	6839      	ldr	r1, [r7, #0]
 8017896:	4618      	mov	r0, r3
 8017898:	f7ef fec4 	bl	8007624 <osSemaphoreWait>
 801789c:	4603      	mov	r3, r0
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d105      	bne.n	80178ae <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80178a2:	f7ef fd81 	bl	80073a8 <osKernelSysTick>
 80178a6:	4602      	mov	r2, r0
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	1ad3      	subs	r3, r2, r3
 80178ac:	e012      	b.n	80178d4 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80178ae:	f04f 33ff 	mov.w	r3, #4294967295
 80178b2:	e00f      	b.n	80178d4 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80178b4:	bf00      	nop
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	f04f 31ff 	mov.w	r1, #4294967295
 80178be:	4618      	mov	r0, r3
 80178c0:	f7ef feb0 	bl	8007624 <osSemaphoreWait>
 80178c4:	4603      	mov	r3, r0
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d1f5      	bne.n	80178b6 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80178ca:	f7ef fd6d 	bl	80073a8 <osKernelSysTick>
 80178ce:	4602      	mov	r2, r0
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80178d4:	4618      	mov	r0, r3
 80178d6:	3710      	adds	r7, #16
 80178d8:	46bd      	mov	sp, r7
 80178da:	bd80      	pop	{r7, pc}

080178dc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b082      	sub	sp, #8
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	4618      	mov	r0, r3
 80178ea:	f7ef fee9 	bl	80076c0 <osSemaphoreRelease>
}
 80178ee:	bf00      	nop
 80178f0:	3708      	adds	r7, #8
 80178f2:	46bd      	mov	sp, r7
 80178f4:	bd80      	pop	{r7, pc}

080178f6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80178f6:	b580      	push	{r7, lr}
 80178f8:	b082      	sub	sp, #8
 80178fa:	af00      	add	r7, sp, #0
 80178fc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	4618      	mov	r0, r3
 8017904:	f7ef ff12 	bl	800772c <osSemaphoreDelete>
}
 8017908:	bf00      	nop
 801790a:	3708      	adds	r7, #8
 801790c:	46bd      	mov	sp, r7
 801790e:	bd80      	pop	{r7, pc}

08017910 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017910:	b480      	push	{r7}
 8017912:	b083      	sub	sp, #12
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d101      	bne.n	8017924 <sys_sem_valid+0x14>
    return 0;
 8017920:	2300      	movs	r3, #0
 8017922:	e000      	b.n	8017926 <sys_sem_valid+0x16>
  else
    return 1;
 8017924:	2301      	movs	r3, #1
}
 8017926:	4618      	mov	r0, r3
 8017928:	370c      	adds	r7, #12
 801792a:	46bd      	mov	sp, r7
 801792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017930:	4770      	bx	lr

08017932 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017932:	b480      	push	{r7}
 8017934:	b083      	sub	sp, #12
 8017936:	af00      	add	r7, sp, #0
 8017938:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	2200      	movs	r2, #0
 801793e:	601a      	str	r2, [r3, #0]
}
 8017940:	bf00      	nop
 8017942:	370c      	adds	r7, #12
 8017944:	46bd      	mov	sp, r7
 8017946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801794a:	4770      	bx	lr

0801794c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801794c:	b580      	push	{r7, lr}
 801794e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017950:	4803      	ldr	r0, [pc, #12]	@ (8017960 <sys_init+0x14>)
 8017952:	f7ef fd99 	bl	8007488 <osMutexCreate>
 8017956:	4603      	mov	r3, r0
 8017958:	4a02      	ldr	r2, [pc, #8]	@ (8017964 <sys_init+0x18>)
 801795a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801795c:	bf00      	nop
 801795e:	bd80      	pop	{r7, pc}
 8017960:	0801c8f8 	.word	0x0801c8f8
 8017964:	20010154 	.word	0x20010154

08017968 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017968:	b580      	push	{r7, lr}
 801796a:	b084      	sub	sp, #16
 801796c:	af00      	add	r7, sp, #0
 801796e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017970:	2300      	movs	r3, #0
 8017972:	60bb      	str	r3, [r7, #8]
 8017974:	2300      	movs	r3, #0
 8017976:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017978:	f107 0308 	add.w	r3, r7, #8
 801797c:	4618      	mov	r0, r3
 801797e:	f7ef fd83 	bl	8007488 <osMutexCreate>
 8017982:	4602      	mov	r2, r0
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d102      	bne.n	8017996 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017990:	f04f 33ff 	mov.w	r3, #4294967295
 8017994:	e000      	b.n	8017998 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017996:	2300      	movs	r3, #0
}
 8017998:	4618      	mov	r0, r3
 801799a:	3710      	adds	r7, #16
 801799c:	46bd      	mov	sp, r7
 801799e:	bd80      	pop	{r7, pc}

080179a0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b082      	sub	sp, #8
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	f04f 31ff 	mov.w	r1, #4294967295
 80179b0:	4618      	mov	r0, r3
 80179b2:	f7ef fd81 	bl	80074b8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80179b6:	bf00      	nop
 80179b8:	3708      	adds	r7, #8
 80179ba:	46bd      	mov	sp, r7
 80179bc:	bd80      	pop	{r7, pc}

080179be <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80179be:	b580      	push	{r7, lr}
 80179c0:	b082      	sub	sp, #8
 80179c2:	af00      	add	r7, sp, #0
 80179c4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	4618      	mov	r0, r3
 80179cc:	f7ef fdc2 	bl	8007554 <osMutexRelease>
}
 80179d0:	bf00      	nop
 80179d2:	3708      	adds	r7, #8
 80179d4:	46bd      	mov	sp, r7
 80179d6:	bd80      	pop	{r7, pc}

080179d8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b08c      	sub	sp, #48	@ 0x30
 80179dc:	af00      	add	r7, sp, #0
 80179de:	60f8      	str	r0, [r7, #12]
 80179e0:	60b9      	str	r1, [r7, #8]
 80179e2:	607a      	str	r2, [r7, #4]
 80179e4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80179e6:	f107 0314 	add.w	r3, r7, #20
 80179ea:	2200      	movs	r2, #0
 80179ec:	601a      	str	r2, [r3, #0]
 80179ee:	605a      	str	r2, [r3, #4]
 80179f0:	609a      	str	r2, [r3, #8]
 80179f2:	60da      	str	r2, [r3, #12]
 80179f4:	611a      	str	r2, [r3, #16]
 80179f6:	615a      	str	r2, [r3, #20]
 80179f8:	619a      	str	r2, [r3, #24]
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	617b      	str	r3, [r7, #20]
 80179fe:	68bb      	ldr	r3, [r7, #8]
 8017a00:	61bb      	str	r3, [r7, #24]
 8017a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017a04:	b21b      	sxth	r3, r3
 8017a06:	83bb      	strh	r3, [r7, #28]
 8017a08:	683b      	ldr	r3, [r7, #0]
 8017a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017a0c:	f107 0314 	add.w	r3, r7, #20
 8017a10:	6879      	ldr	r1, [r7, #4]
 8017a12:	4618      	mov	r0, r3
 8017a14:	f7ef fcd8 	bl	80073c8 <osThreadCreate>
 8017a18:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	3730      	adds	r7, #48	@ 0x30
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bd80      	pop	{r7, pc}
	...

08017a24 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017a24:	b580      	push	{r7, lr}
 8017a26:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017a28:	4b04      	ldr	r3, [pc, #16]	@ (8017a3c <sys_arch_protect+0x18>)
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8017a30:	4618      	mov	r0, r3
 8017a32:	f7ef fd41 	bl	80074b8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017a36:	2301      	movs	r3, #1
}
 8017a38:	4618      	mov	r0, r3
 8017a3a:	bd80      	pop	{r7, pc}
 8017a3c:	20010154 	.word	0x20010154

08017a40 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b082      	sub	sp, #8
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017a48:	4b04      	ldr	r3, [pc, #16]	@ (8017a5c <sys_arch_unprotect+0x1c>)
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	f7ef fd81 	bl	8007554 <osMutexRelease>
}
 8017a52:	bf00      	nop
 8017a54:	3708      	adds	r7, #8
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd80      	pop	{r7, pc}
 8017a5a:	bf00      	nop
 8017a5c:	20010154 	.word	0x20010154

08017a60 <rand>:
 8017a60:	4b16      	ldr	r3, [pc, #88]	@ (8017abc <rand+0x5c>)
 8017a62:	b510      	push	{r4, lr}
 8017a64:	681c      	ldr	r4, [r3, #0]
 8017a66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017a68:	b9b3      	cbnz	r3, 8017a98 <rand+0x38>
 8017a6a:	2018      	movs	r0, #24
 8017a6c:	f000 fada 	bl	8018024 <malloc>
 8017a70:	4602      	mov	r2, r0
 8017a72:	6320      	str	r0, [r4, #48]	@ 0x30
 8017a74:	b920      	cbnz	r0, 8017a80 <rand+0x20>
 8017a76:	4b12      	ldr	r3, [pc, #72]	@ (8017ac0 <rand+0x60>)
 8017a78:	4812      	ldr	r0, [pc, #72]	@ (8017ac4 <rand+0x64>)
 8017a7a:	2152      	movs	r1, #82	@ 0x52
 8017a7c:	f000 fa6a 	bl	8017f54 <__assert_func>
 8017a80:	4911      	ldr	r1, [pc, #68]	@ (8017ac8 <rand+0x68>)
 8017a82:	4b12      	ldr	r3, [pc, #72]	@ (8017acc <rand+0x6c>)
 8017a84:	e9c0 1300 	strd	r1, r3, [r0]
 8017a88:	4b11      	ldr	r3, [pc, #68]	@ (8017ad0 <rand+0x70>)
 8017a8a:	6083      	str	r3, [r0, #8]
 8017a8c:	230b      	movs	r3, #11
 8017a8e:	8183      	strh	r3, [r0, #12]
 8017a90:	2100      	movs	r1, #0
 8017a92:	2001      	movs	r0, #1
 8017a94:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017a98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017a9a:	480e      	ldr	r0, [pc, #56]	@ (8017ad4 <rand+0x74>)
 8017a9c:	690b      	ldr	r3, [r1, #16]
 8017a9e:	694c      	ldr	r4, [r1, #20]
 8017aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8017ad8 <rand+0x78>)
 8017aa2:	4358      	muls	r0, r3
 8017aa4:	fb02 0004 	mla	r0, r2, r4, r0
 8017aa8:	fba3 3202 	umull	r3, r2, r3, r2
 8017aac:	3301      	adds	r3, #1
 8017aae:	eb40 0002 	adc.w	r0, r0, r2
 8017ab2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017ab6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017aba:	bd10      	pop	{r4, pc}
 8017abc:	2000003c 	.word	0x2000003c
 8017ac0:	0801c900 	.word	0x0801c900
 8017ac4:	0801c917 	.word	0x0801c917
 8017ac8:	abcd330e 	.word	0xabcd330e
 8017acc:	e66d1234 	.word	0xe66d1234
 8017ad0:	0005deec 	.word	0x0005deec
 8017ad4:	5851f42d 	.word	0x5851f42d
 8017ad8:	4c957f2d 	.word	0x4c957f2d

08017adc <std>:
 8017adc:	2300      	movs	r3, #0
 8017ade:	b510      	push	{r4, lr}
 8017ae0:	4604      	mov	r4, r0
 8017ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8017ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017aea:	6083      	str	r3, [r0, #8]
 8017aec:	8181      	strh	r1, [r0, #12]
 8017aee:	6643      	str	r3, [r0, #100]	@ 0x64
 8017af0:	81c2      	strh	r2, [r0, #14]
 8017af2:	6183      	str	r3, [r0, #24]
 8017af4:	4619      	mov	r1, r3
 8017af6:	2208      	movs	r2, #8
 8017af8:	305c      	adds	r0, #92	@ 0x5c
 8017afa:	f000 f950 	bl	8017d9e <memset>
 8017afe:	4b0d      	ldr	r3, [pc, #52]	@ (8017b34 <std+0x58>)
 8017b00:	6263      	str	r3, [r4, #36]	@ 0x24
 8017b02:	4b0d      	ldr	r3, [pc, #52]	@ (8017b38 <std+0x5c>)
 8017b04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017b06:	4b0d      	ldr	r3, [pc, #52]	@ (8017b3c <std+0x60>)
 8017b08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8017b40 <std+0x64>)
 8017b0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8017b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8017b44 <std+0x68>)
 8017b10:	6224      	str	r4, [r4, #32]
 8017b12:	429c      	cmp	r4, r3
 8017b14:	d006      	beq.n	8017b24 <std+0x48>
 8017b16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017b1a:	4294      	cmp	r4, r2
 8017b1c:	d002      	beq.n	8017b24 <std+0x48>
 8017b1e:	33d0      	adds	r3, #208	@ 0xd0
 8017b20:	429c      	cmp	r4, r3
 8017b22:	d105      	bne.n	8017b30 <std+0x54>
 8017b24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b2c:	f000 ba00 	b.w	8017f30 <__retarget_lock_init_recursive>
 8017b30:	bd10      	pop	{r4, pc}
 8017b32:	bf00      	nop
 8017b34:	08017cc5 	.word	0x08017cc5
 8017b38:	08017ce7 	.word	0x08017ce7
 8017b3c:	08017d1f 	.word	0x08017d1f
 8017b40:	08017d43 	.word	0x08017d43
 8017b44:	20010158 	.word	0x20010158

08017b48 <stdio_exit_handler>:
 8017b48:	4a02      	ldr	r2, [pc, #8]	@ (8017b54 <stdio_exit_handler+0xc>)
 8017b4a:	4903      	ldr	r1, [pc, #12]	@ (8017b58 <stdio_exit_handler+0x10>)
 8017b4c:	4803      	ldr	r0, [pc, #12]	@ (8017b5c <stdio_exit_handler+0x14>)
 8017b4e:	f000 b869 	b.w	8017c24 <_fwalk_sglue>
 8017b52:	bf00      	nop
 8017b54:	20000030 	.word	0x20000030
 8017b58:	08018ae9 	.word	0x08018ae9
 8017b5c:	20000040 	.word	0x20000040

08017b60 <cleanup_stdio>:
 8017b60:	6841      	ldr	r1, [r0, #4]
 8017b62:	4b0c      	ldr	r3, [pc, #48]	@ (8017b94 <cleanup_stdio+0x34>)
 8017b64:	4299      	cmp	r1, r3
 8017b66:	b510      	push	{r4, lr}
 8017b68:	4604      	mov	r4, r0
 8017b6a:	d001      	beq.n	8017b70 <cleanup_stdio+0x10>
 8017b6c:	f000 ffbc 	bl	8018ae8 <_fflush_r>
 8017b70:	68a1      	ldr	r1, [r4, #8]
 8017b72:	4b09      	ldr	r3, [pc, #36]	@ (8017b98 <cleanup_stdio+0x38>)
 8017b74:	4299      	cmp	r1, r3
 8017b76:	d002      	beq.n	8017b7e <cleanup_stdio+0x1e>
 8017b78:	4620      	mov	r0, r4
 8017b7a:	f000 ffb5 	bl	8018ae8 <_fflush_r>
 8017b7e:	68e1      	ldr	r1, [r4, #12]
 8017b80:	4b06      	ldr	r3, [pc, #24]	@ (8017b9c <cleanup_stdio+0x3c>)
 8017b82:	4299      	cmp	r1, r3
 8017b84:	d004      	beq.n	8017b90 <cleanup_stdio+0x30>
 8017b86:	4620      	mov	r0, r4
 8017b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b8c:	f000 bfac 	b.w	8018ae8 <_fflush_r>
 8017b90:	bd10      	pop	{r4, pc}
 8017b92:	bf00      	nop
 8017b94:	20010158 	.word	0x20010158
 8017b98:	200101c0 	.word	0x200101c0
 8017b9c:	20010228 	.word	0x20010228

08017ba0 <global_stdio_init.part.0>:
 8017ba0:	b510      	push	{r4, lr}
 8017ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8017bd0 <global_stdio_init.part.0+0x30>)
 8017ba4:	4c0b      	ldr	r4, [pc, #44]	@ (8017bd4 <global_stdio_init.part.0+0x34>)
 8017ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8017bd8 <global_stdio_init.part.0+0x38>)
 8017ba8:	601a      	str	r2, [r3, #0]
 8017baa:	4620      	mov	r0, r4
 8017bac:	2200      	movs	r2, #0
 8017bae:	2104      	movs	r1, #4
 8017bb0:	f7ff ff94 	bl	8017adc <std>
 8017bb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017bb8:	2201      	movs	r2, #1
 8017bba:	2109      	movs	r1, #9
 8017bbc:	f7ff ff8e 	bl	8017adc <std>
 8017bc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017bc4:	2202      	movs	r2, #2
 8017bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bca:	2112      	movs	r1, #18
 8017bcc:	f7ff bf86 	b.w	8017adc <std>
 8017bd0:	20010290 	.word	0x20010290
 8017bd4:	20010158 	.word	0x20010158
 8017bd8:	08017b49 	.word	0x08017b49

08017bdc <__sfp_lock_acquire>:
 8017bdc:	4801      	ldr	r0, [pc, #4]	@ (8017be4 <__sfp_lock_acquire+0x8>)
 8017bde:	f000 b9a8 	b.w	8017f32 <__retarget_lock_acquire_recursive>
 8017be2:	bf00      	nop
 8017be4:	20010299 	.word	0x20010299

08017be8 <__sfp_lock_release>:
 8017be8:	4801      	ldr	r0, [pc, #4]	@ (8017bf0 <__sfp_lock_release+0x8>)
 8017bea:	f000 b9a3 	b.w	8017f34 <__retarget_lock_release_recursive>
 8017bee:	bf00      	nop
 8017bf0:	20010299 	.word	0x20010299

08017bf4 <__sinit>:
 8017bf4:	b510      	push	{r4, lr}
 8017bf6:	4604      	mov	r4, r0
 8017bf8:	f7ff fff0 	bl	8017bdc <__sfp_lock_acquire>
 8017bfc:	6a23      	ldr	r3, [r4, #32]
 8017bfe:	b11b      	cbz	r3, 8017c08 <__sinit+0x14>
 8017c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c04:	f7ff bff0 	b.w	8017be8 <__sfp_lock_release>
 8017c08:	4b04      	ldr	r3, [pc, #16]	@ (8017c1c <__sinit+0x28>)
 8017c0a:	6223      	str	r3, [r4, #32]
 8017c0c:	4b04      	ldr	r3, [pc, #16]	@ (8017c20 <__sinit+0x2c>)
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d1f5      	bne.n	8017c00 <__sinit+0xc>
 8017c14:	f7ff ffc4 	bl	8017ba0 <global_stdio_init.part.0>
 8017c18:	e7f2      	b.n	8017c00 <__sinit+0xc>
 8017c1a:	bf00      	nop
 8017c1c:	08017b61 	.word	0x08017b61
 8017c20:	20010290 	.word	0x20010290

08017c24 <_fwalk_sglue>:
 8017c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c28:	4607      	mov	r7, r0
 8017c2a:	4688      	mov	r8, r1
 8017c2c:	4614      	mov	r4, r2
 8017c2e:	2600      	movs	r6, #0
 8017c30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017c34:	f1b9 0901 	subs.w	r9, r9, #1
 8017c38:	d505      	bpl.n	8017c46 <_fwalk_sglue+0x22>
 8017c3a:	6824      	ldr	r4, [r4, #0]
 8017c3c:	2c00      	cmp	r4, #0
 8017c3e:	d1f7      	bne.n	8017c30 <_fwalk_sglue+0xc>
 8017c40:	4630      	mov	r0, r6
 8017c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c46:	89ab      	ldrh	r3, [r5, #12]
 8017c48:	2b01      	cmp	r3, #1
 8017c4a:	d907      	bls.n	8017c5c <_fwalk_sglue+0x38>
 8017c4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017c50:	3301      	adds	r3, #1
 8017c52:	d003      	beq.n	8017c5c <_fwalk_sglue+0x38>
 8017c54:	4629      	mov	r1, r5
 8017c56:	4638      	mov	r0, r7
 8017c58:	47c0      	blx	r8
 8017c5a:	4306      	orrs	r6, r0
 8017c5c:	3568      	adds	r5, #104	@ 0x68
 8017c5e:	e7e9      	b.n	8017c34 <_fwalk_sglue+0x10>

08017c60 <iprintf>:
 8017c60:	b40f      	push	{r0, r1, r2, r3}
 8017c62:	b507      	push	{r0, r1, r2, lr}
 8017c64:	4906      	ldr	r1, [pc, #24]	@ (8017c80 <iprintf+0x20>)
 8017c66:	ab04      	add	r3, sp, #16
 8017c68:	6808      	ldr	r0, [r1, #0]
 8017c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c6e:	6881      	ldr	r1, [r0, #8]
 8017c70:	9301      	str	r3, [sp, #4]
 8017c72:	f000 fc0f 	bl	8018494 <_vfiprintf_r>
 8017c76:	b003      	add	sp, #12
 8017c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c7c:	b004      	add	sp, #16
 8017c7e:	4770      	bx	lr
 8017c80:	2000003c 	.word	0x2000003c

08017c84 <siprintf>:
 8017c84:	b40e      	push	{r1, r2, r3}
 8017c86:	b500      	push	{lr}
 8017c88:	b09c      	sub	sp, #112	@ 0x70
 8017c8a:	ab1d      	add	r3, sp, #116	@ 0x74
 8017c8c:	9002      	str	r0, [sp, #8]
 8017c8e:	9006      	str	r0, [sp, #24]
 8017c90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017c94:	4809      	ldr	r0, [pc, #36]	@ (8017cbc <siprintf+0x38>)
 8017c96:	9107      	str	r1, [sp, #28]
 8017c98:	9104      	str	r1, [sp, #16]
 8017c9a:	4909      	ldr	r1, [pc, #36]	@ (8017cc0 <siprintf+0x3c>)
 8017c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ca0:	9105      	str	r1, [sp, #20]
 8017ca2:	6800      	ldr	r0, [r0, #0]
 8017ca4:	9301      	str	r3, [sp, #4]
 8017ca6:	a902      	add	r1, sp, #8
 8017ca8:	f000 face 	bl	8018248 <_svfiprintf_r>
 8017cac:	9b02      	ldr	r3, [sp, #8]
 8017cae:	2200      	movs	r2, #0
 8017cb0:	701a      	strb	r2, [r3, #0]
 8017cb2:	b01c      	add	sp, #112	@ 0x70
 8017cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8017cb8:	b003      	add	sp, #12
 8017cba:	4770      	bx	lr
 8017cbc:	2000003c 	.word	0x2000003c
 8017cc0:	ffff0208 	.word	0xffff0208

08017cc4 <__sread>:
 8017cc4:	b510      	push	{r4, lr}
 8017cc6:	460c      	mov	r4, r1
 8017cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ccc:	f000 f8e8 	bl	8017ea0 <_read_r>
 8017cd0:	2800      	cmp	r0, #0
 8017cd2:	bfab      	itete	ge
 8017cd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8017cd8:	181b      	addge	r3, r3, r0
 8017cda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017cde:	bfac      	ite	ge
 8017ce0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017ce2:	81a3      	strhlt	r3, [r4, #12]
 8017ce4:	bd10      	pop	{r4, pc}

08017ce6 <__swrite>:
 8017ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cea:	461f      	mov	r7, r3
 8017cec:	898b      	ldrh	r3, [r1, #12]
 8017cee:	05db      	lsls	r3, r3, #23
 8017cf0:	4605      	mov	r5, r0
 8017cf2:	460c      	mov	r4, r1
 8017cf4:	4616      	mov	r6, r2
 8017cf6:	d505      	bpl.n	8017d04 <__swrite+0x1e>
 8017cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cfc:	2302      	movs	r3, #2
 8017cfe:	2200      	movs	r2, #0
 8017d00:	f000 f8bc 	bl	8017e7c <_lseek_r>
 8017d04:	89a3      	ldrh	r3, [r4, #12]
 8017d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017d0e:	81a3      	strh	r3, [r4, #12]
 8017d10:	4632      	mov	r2, r6
 8017d12:	463b      	mov	r3, r7
 8017d14:	4628      	mov	r0, r5
 8017d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d1a:	f000 b8d3 	b.w	8017ec4 <_write_r>

08017d1e <__sseek>:
 8017d1e:	b510      	push	{r4, lr}
 8017d20:	460c      	mov	r4, r1
 8017d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d26:	f000 f8a9 	bl	8017e7c <_lseek_r>
 8017d2a:	1c43      	adds	r3, r0, #1
 8017d2c:	89a3      	ldrh	r3, [r4, #12]
 8017d2e:	bf15      	itete	ne
 8017d30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017d32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017d36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017d3a:	81a3      	strheq	r3, [r4, #12]
 8017d3c:	bf18      	it	ne
 8017d3e:	81a3      	strhne	r3, [r4, #12]
 8017d40:	bd10      	pop	{r4, pc}

08017d42 <__sclose>:
 8017d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d46:	f000 b833 	b.w	8017db0 <_close_r>

08017d4a <memcmp>:
 8017d4a:	b510      	push	{r4, lr}
 8017d4c:	3901      	subs	r1, #1
 8017d4e:	4402      	add	r2, r0
 8017d50:	4290      	cmp	r0, r2
 8017d52:	d101      	bne.n	8017d58 <memcmp+0xe>
 8017d54:	2000      	movs	r0, #0
 8017d56:	e005      	b.n	8017d64 <memcmp+0x1a>
 8017d58:	7803      	ldrb	r3, [r0, #0]
 8017d5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017d5e:	42a3      	cmp	r3, r4
 8017d60:	d001      	beq.n	8017d66 <memcmp+0x1c>
 8017d62:	1b18      	subs	r0, r3, r4
 8017d64:	bd10      	pop	{r4, pc}
 8017d66:	3001      	adds	r0, #1
 8017d68:	e7f2      	b.n	8017d50 <memcmp+0x6>

08017d6a <memmove>:
 8017d6a:	4288      	cmp	r0, r1
 8017d6c:	b510      	push	{r4, lr}
 8017d6e:	eb01 0402 	add.w	r4, r1, r2
 8017d72:	d902      	bls.n	8017d7a <memmove+0x10>
 8017d74:	4284      	cmp	r4, r0
 8017d76:	4623      	mov	r3, r4
 8017d78:	d807      	bhi.n	8017d8a <memmove+0x20>
 8017d7a:	1e43      	subs	r3, r0, #1
 8017d7c:	42a1      	cmp	r1, r4
 8017d7e:	d008      	beq.n	8017d92 <memmove+0x28>
 8017d80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d84:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017d88:	e7f8      	b.n	8017d7c <memmove+0x12>
 8017d8a:	4402      	add	r2, r0
 8017d8c:	4601      	mov	r1, r0
 8017d8e:	428a      	cmp	r2, r1
 8017d90:	d100      	bne.n	8017d94 <memmove+0x2a>
 8017d92:	bd10      	pop	{r4, pc}
 8017d94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d98:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017d9c:	e7f7      	b.n	8017d8e <memmove+0x24>

08017d9e <memset>:
 8017d9e:	4402      	add	r2, r0
 8017da0:	4603      	mov	r3, r0
 8017da2:	4293      	cmp	r3, r2
 8017da4:	d100      	bne.n	8017da8 <memset+0xa>
 8017da6:	4770      	bx	lr
 8017da8:	f803 1b01 	strb.w	r1, [r3], #1
 8017dac:	e7f9      	b.n	8017da2 <memset+0x4>
	...

08017db0 <_close_r>:
 8017db0:	b538      	push	{r3, r4, r5, lr}
 8017db2:	4d06      	ldr	r5, [pc, #24]	@ (8017dcc <_close_r+0x1c>)
 8017db4:	2300      	movs	r3, #0
 8017db6:	4604      	mov	r4, r0
 8017db8:	4608      	mov	r0, r1
 8017dba:	602b      	str	r3, [r5, #0]
 8017dbc:	f7e9 ff2e 	bl	8001c1c <_close>
 8017dc0:	1c43      	adds	r3, r0, #1
 8017dc2:	d102      	bne.n	8017dca <_close_r+0x1a>
 8017dc4:	682b      	ldr	r3, [r5, #0]
 8017dc6:	b103      	cbz	r3, 8017dca <_close_r+0x1a>
 8017dc8:	6023      	str	r3, [r4, #0]
 8017dca:	bd38      	pop	{r3, r4, r5, pc}
 8017dcc:	20010294 	.word	0x20010294

08017dd0 <_reclaim_reent>:
 8017dd0:	4b29      	ldr	r3, [pc, #164]	@ (8017e78 <_reclaim_reent+0xa8>)
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	4283      	cmp	r3, r0
 8017dd6:	b570      	push	{r4, r5, r6, lr}
 8017dd8:	4604      	mov	r4, r0
 8017dda:	d04b      	beq.n	8017e74 <_reclaim_reent+0xa4>
 8017ddc:	69c3      	ldr	r3, [r0, #28]
 8017dde:	b1ab      	cbz	r3, 8017e0c <_reclaim_reent+0x3c>
 8017de0:	68db      	ldr	r3, [r3, #12]
 8017de2:	b16b      	cbz	r3, 8017e00 <_reclaim_reent+0x30>
 8017de4:	2500      	movs	r5, #0
 8017de6:	69e3      	ldr	r3, [r4, #28]
 8017de8:	68db      	ldr	r3, [r3, #12]
 8017dea:	5959      	ldr	r1, [r3, r5]
 8017dec:	2900      	cmp	r1, #0
 8017dee:	d13b      	bne.n	8017e68 <_reclaim_reent+0x98>
 8017df0:	3504      	adds	r5, #4
 8017df2:	2d80      	cmp	r5, #128	@ 0x80
 8017df4:	d1f7      	bne.n	8017de6 <_reclaim_reent+0x16>
 8017df6:	69e3      	ldr	r3, [r4, #28]
 8017df8:	4620      	mov	r0, r4
 8017dfa:	68d9      	ldr	r1, [r3, #12]
 8017dfc:	f000 f8c8 	bl	8017f90 <_free_r>
 8017e00:	69e3      	ldr	r3, [r4, #28]
 8017e02:	6819      	ldr	r1, [r3, #0]
 8017e04:	b111      	cbz	r1, 8017e0c <_reclaim_reent+0x3c>
 8017e06:	4620      	mov	r0, r4
 8017e08:	f000 f8c2 	bl	8017f90 <_free_r>
 8017e0c:	6961      	ldr	r1, [r4, #20]
 8017e0e:	b111      	cbz	r1, 8017e16 <_reclaim_reent+0x46>
 8017e10:	4620      	mov	r0, r4
 8017e12:	f000 f8bd 	bl	8017f90 <_free_r>
 8017e16:	69e1      	ldr	r1, [r4, #28]
 8017e18:	b111      	cbz	r1, 8017e20 <_reclaim_reent+0x50>
 8017e1a:	4620      	mov	r0, r4
 8017e1c:	f000 f8b8 	bl	8017f90 <_free_r>
 8017e20:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017e22:	b111      	cbz	r1, 8017e2a <_reclaim_reent+0x5a>
 8017e24:	4620      	mov	r0, r4
 8017e26:	f000 f8b3 	bl	8017f90 <_free_r>
 8017e2a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017e2c:	b111      	cbz	r1, 8017e34 <_reclaim_reent+0x64>
 8017e2e:	4620      	mov	r0, r4
 8017e30:	f000 f8ae 	bl	8017f90 <_free_r>
 8017e34:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017e36:	b111      	cbz	r1, 8017e3e <_reclaim_reent+0x6e>
 8017e38:	4620      	mov	r0, r4
 8017e3a:	f000 f8a9 	bl	8017f90 <_free_r>
 8017e3e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017e40:	b111      	cbz	r1, 8017e48 <_reclaim_reent+0x78>
 8017e42:	4620      	mov	r0, r4
 8017e44:	f000 f8a4 	bl	8017f90 <_free_r>
 8017e48:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017e4a:	b111      	cbz	r1, 8017e52 <_reclaim_reent+0x82>
 8017e4c:	4620      	mov	r0, r4
 8017e4e:	f000 f89f 	bl	8017f90 <_free_r>
 8017e52:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017e54:	b111      	cbz	r1, 8017e5c <_reclaim_reent+0x8c>
 8017e56:	4620      	mov	r0, r4
 8017e58:	f000 f89a 	bl	8017f90 <_free_r>
 8017e5c:	6a23      	ldr	r3, [r4, #32]
 8017e5e:	b14b      	cbz	r3, 8017e74 <_reclaim_reent+0xa4>
 8017e60:	4620      	mov	r0, r4
 8017e62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e66:	4718      	bx	r3
 8017e68:	680e      	ldr	r6, [r1, #0]
 8017e6a:	4620      	mov	r0, r4
 8017e6c:	f000 f890 	bl	8017f90 <_free_r>
 8017e70:	4631      	mov	r1, r6
 8017e72:	e7bb      	b.n	8017dec <_reclaim_reent+0x1c>
 8017e74:	bd70      	pop	{r4, r5, r6, pc}
 8017e76:	bf00      	nop
 8017e78:	2000003c 	.word	0x2000003c

08017e7c <_lseek_r>:
 8017e7c:	b538      	push	{r3, r4, r5, lr}
 8017e7e:	4d07      	ldr	r5, [pc, #28]	@ (8017e9c <_lseek_r+0x20>)
 8017e80:	4604      	mov	r4, r0
 8017e82:	4608      	mov	r0, r1
 8017e84:	4611      	mov	r1, r2
 8017e86:	2200      	movs	r2, #0
 8017e88:	602a      	str	r2, [r5, #0]
 8017e8a:	461a      	mov	r2, r3
 8017e8c:	f7e9 feed 	bl	8001c6a <_lseek>
 8017e90:	1c43      	adds	r3, r0, #1
 8017e92:	d102      	bne.n	8017e9a <_lseek_r+0x1e>
 8017e94:	682b      	ldr	r3, [r5, #0]
 8017e96:	b103      	cbz	r3, 8017e9a <_lseek_r+0x1e>
 8017e98:	6023      	str	r3, [r4, #0]
 8017e9a:	bd38      	pop	{r3, r4, r5, pc}
 8017e9c:	20010294 	.word	0x20010294

08017ea0 <_read_r>:
 8017ea0:	b538      	push	{r3, r4, r5, lr}
 8017ea2:	4d07      	ldr	r5, [pc, #28]	@ (8017ec0 <_read_r+0x20>)
 8017ea4:	4604      	mov	r4, r0
 8017ea6:	4608      	mov	r0, r1
 8017ea8:	4611      	mov	r1, r2
 8017eaa:	2200      	movs	r2, #0
 8017eac:	602a      	str	r2, [r5, #0]
 8017eae:	461a      	mov	r2, r3
 8017eb0:	f7e9 fe7b 	bl	8001baa <_read>
 8017eb4:	1c43      	adds	r3, r0, #1
 8017eb6:	d102      	bne.n	8017ebe <_read_r+0x1e>
 8017eb8:	682b      	ldr	r3, [r5, #0]
 8017eba:	b103      	cbz	r3, 8017ebe <_read_r+0x1e>
 8017ebc:	6023      	str	r3, [r4, #0]
 8017ebe:	bd38      	pop	{r3, r4, r5, pc}
 8017ec0:	20010294 	.word	0x20010294

08017ec4 <_write_r>:
 8017ec4:	b538      	push	{r3, r4, r5, lr}
 8017ec6:	4d07      	ldr	r5, [pc, #28]	@ (8017ee4 <_write_r+0x20>)
 8017ec8:	4604      	mov	r4, r0
 8017eca:	4608      	mov	r0, r1
 8017ecc:	4611      	mov	r1, r2
 8017ece:	2200      	movs	r2, #0
 8017ed0:	602a      	str	r2, [r5, #0]
 8017ed2:	461a      	mov	r2, r3
 8017ed4:	f7e9 fe86 	bl	8001be4 <_write>
 8017ed8:	1c43      	adds	r3, r0, #1
 8017eda:	d102      	bne.n	8017ee2 <_write_r+0x1e>
 8017edc:	682b      	ldr	r3, [r5, #0]
 8017ede:	b103      	cbz	r3, 8017ee2 <_write_r+0x1e>
 8017ee0:	6023      	str	r3, [r4, #0]
 8017ee2:	bd38      	pop	{r3, r4, r5, pc}
 8017ee4:	20010294 	.word	0x20010294

08017ee8 <__libc_init_array>:
 8017ee8:	b570      	push	{r4, r5, r6, lr}
 8017eea:	4d0d      	ldr	r5, [pc, #52]	@ (8017f20 <__libc_init_array+0x38>)
 8017eec:	4c0d      	ldr	r4, [pc, #52]	@ (8017f24 <__libc_init_array+0x3c>)
 8017eee:	1b64      	subs	r4, r4, r5
 8017ef0:	10a4      	asrs	r4, r4, #2
 8017ef2:	2600      	movs	r6, #0
 8017ef4:	42a6      	cmp	r6, r4
 8017ef6:	d109      	bne.n	8017f0c <__libc_init_array+0x24>
 8017ef8:	4d0b      	ldr	r5, [pc, #44]	@ (8017f28 <__libc_init_array+0x40>)
 8017efa:	4c0c      	ldr	r4, [pc, #48]	@ (8017f2c <__libc_init_array+0x44>)
 8017efc:	f000 ffd8 	bl	8018eb0 <_init>
 8017f00:	1b64      	subs	r4, r4, r5
 8017f02:	10a4      	asrs	r4, r4, #2
 8017f04:	2600      	movs	r6, #0
 8017f06:	42a6      	cmp	r6, r4
 8017f08:	d105      	bne.n	8017f16 <__libc_init_array+0x2e>
 8017f0a:	bd70      	pop	{r4, r5, r6, pc}
 8017f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017f10:	4798      	blx	r3
 8017f12:	3601      	adds	r6, #1
 8017f14:	e7ee      	b.n	8017ef4 <__libc_init_array+0xc>
 8017f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8017f1a:	4798      	blx	r3
 8017f1c:	3601      	adds	r6, #1
 8017f1e:	e7f2      	b.n	8017f06 <__libc_init_array+0x1e>
 8017f20:	0801c9e8 	.word	0x0801c9e8
 8017f24:	0801c9e8 	.word	0x0801c9e8
 8017f28:	0801c9e8 	.word	0x0801c9e8
 8017f2c:	0801c9ec 	.word	0x0801c9ec

08017f30 <__retarget_lock_init_recursive>:
 8017f30:	4770      	bx	lr

08017f32 <__retarget_lock_acquire_recursive>:
 8017f32:	4770      	bx	lr

08017f34 <__retarget_lock_release_recursive>:
 8017f34:	4770      	bx	lr

08017f36 <memcpy>:
 8017f36:	440a      	add	r2, r1
 8017f38:	4291      	cmp	r1, r2
 8017f3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8017f3e:	d100      	bne.n	8017f42 <memcpy+0xc>
 8017f40:	4770      	bx	lr
 8017f42:	b510      	push	{r4, lr}
 8017f44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017f4c:	4291      	cmp	r1, r2
 8017f4e:	d1f9      	bne.n	8017f44 <memcpy+0xe>
 8017f50:	bd10      	pop	{r4, pc}
	...

08017f54 <__assert_func>:
 8017f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017f56:	4614      	mov	r4, r2
 8017f58:	461a      	mov	r2, r3
 8017f5a:	4b09      	ldr	r3, [pc, #36]	@ (8017f80 <__assert_func+0x2c>)
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	4605      	mov	r5, r0
 8017f60:	68d8      	ldr	r0, [r3, #12]
 8017f62:	b954      	cbnz	r4, 8017f7a <__assert_func+0x26>
 8017f64:	4b07      	ldr	r3, [pc, #28]	@ (8017f84 <__assert_func+0x30>)
 8017f66:	461c      	mov	r4, r3
 8017f68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017f6c:	9100      	str	r1, [sp, #0]
 8017f6e:	462b      	mov	r3, r5
 8017f70:	4905      	ldr	r1, [pc, #20]	@ (8017f88 <__assert_func+0x34>)
 8017f72:	f000 fde1 	bl	8018b38 <fiprintf>
 8017f76:	f000 fe95 	bl	8018ca4 <abort>
 8017f7a:	4b04      	ldr	r3, [pc, #16]	@ (8017f8c <__assert_func+0x38>)
 8017f7c:	e7f4      	b.n	8017f68 <__assert_func+0x14>
 8017f7e:	bf00      	nop
 8017f80:	2000003c 	.word	0x2000003c
 8017f84:	0801c9aa 	.word	0x0801c9aa
 8017f88:	0801c97c 	.word	0x0801c97c
 8017f8c:	0801c96f 	.word	0x0801c96f

08017f90 <_free_r>:
 8017f90:	b538      	push	{r3, r4, r5, lr}
 8017f92:	4605      	mov	r5, r0
 8017f94:	2900      	cmp	r1, #0
 8017f96:	d041      	beq.n	801801c <_free_r+0x8c>
 8017f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f9c:	1f0c      	subs	r4, r1, #4
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	bfb8      	it	lt
 8017fa2:	18e4      	addlt	r4, r4, r3
 8017fa4:	f000 f8e8 	bl	8018178 <__malloc_lock>
 8017fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8018020 <_free_r+0x90>)
 8017faa:	6813      	ldr	r3, [r2, #0]
 8017fac:	b933      	cbnz	r3, 8017fbc <_free_r+0x2c>
 8017fae:	6063      	str	r3, [r4, #4]
 8017fb0:	6014      	str	r4, [r2, #0]
 8017fb2:	4628      	mov	r0, r5
 8017fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017fb8:	f000 b8e4 	b.w	8018184 <__malloc_unlock>
 8017fbc:	42a3      	cmp	r3, r4
 8017fbe:	d908      	bls.n	8017fd2 <_free_r+0x42>
 8017fc0:	6820      	ldr	r0, [r4, #0]
 8017fc2:	1821      	adds	r1, r4, r0
 8017fc4:	428b      	cmp	r3, r1
 8017fc6:	bf01      	itttt	eq
 8017fc8:	6819      	ldreq	r1, [r3, #0]
 8017fca:	685b      	ldreq	r3, [r3, #4]
 8017fcc:	1809      	addeq	r1, r1, r0
 8017fce:	6021      	streq	r1, [r4, #0]
 8017fd0:	e7ed      	b.n	8017fae <_free_r+0x1e>
 8017fd2:	461a      	mov	r2, r3
 8017fd4:	685b      	ldr	r3, [r3, #4]
 8017fd6:	b10b      	cbz	r3, 8017fdc <_free_r+0x4c>
 8017fd8:	42a3      	cmp	r3, r4
 8017fda:	d9fa      	bls.n	8017fd2 <_free_r+0x42>
 8017fdc:	6811      	ldr	r1, [r2, #0]
 8017fde:	1850      	adds	r0, r2, r1
 8017fe0:	42a0      	cmp	r0, r4
 8017fe2:	d10b      	bne.n	8017ffc <_free_r+0x6c>
 8017fe4:	6820      	ldr	r0, [r4, #0]
 8017fe6:	4401      	add	r1, r0
 8017fe8:	1850      	adds	r0, r2, r1
 8017fea:	4283      	cmp	r3, r0
 8017fec:	6011      	str	r1, [r2, #0]
 8017fee:	d1e0      	bne.n	8017fb2 <_free_r+0x22>
 8017ff0:	6818      	ldr	r0, [r3, #0]
 8017ff2:	685b      	ldr	r3, [r3, #4]
 8017ff4:	6053      	str	r3, [r2, #4]
 8017ff6:	4408      	add	r0, r1
 8017ff8:	6010      	str	r0, [r2, #0]
 8017ffa:	e7da      	b.n	8017fb2 <_free_r+0x22>
 8017ffc:	d902      	bls.n	8018004 <_free_r+0x74>
 8017ffe:	230c      	movs	r3, #12
 8018000:	602b      	str	r3, [r5, #0]
 8018002:	e7d6      	b.n	8017fb2 <_free_r+0x22>
 8018004:	6820      	ldr	r0, [r4, #0]
 8018006:	1821      	adds	r1, r4, r0
 8018008:	428b      	cmp	r3, r1
 801800a:	bf04      	itt	eq
 801800c:	6819      	ldreq	r1, [r3, #0]
 801800e:	685b      	ldreq	r3, [r3, #4]
 8018010:	6063      	str	r3, [r4, #4]
 8018012:	bf04      	itt	eq
 8018014:	1809      	addeq	r1, r1, r0
 8018016:	6021      	streq	r1, [r4, #0]
 8018018:	6054      	str	r4, [r2, #4]
 801801a:	e7ca      	b.n	8017fb2 <_free_r+0x22>
 801801c:	bd38      	pop	{r3, r4, r5, pc}
 801801e:	bf00      	nop
 8018020:	200102a0 	.word	0x200102a0

08018024 <malloc>:
 8018024:	4b02      	ldr	r3, [pc, #8]	@ (8018030 <malloc+0xc>)
 8018026:	4601      	mov	r1, r0
 8018028:	6818      	ldr	r0, [r3, #0]
 801802a:	f000 b825 	b.w	8018078 <_malloc_r>
 801802e:	bf00      	nop
 8018030:	2000003c 	.word	0x2000003c

08018034 <sbrk_aligned>:
 8018034:	b570      	push	{r4, r5, r6, lr}
 8018036:	4e0f      	ldr	r6, [pc, #60]	@ (8018074 <sbrk_aligned+0x40>)
 8018038:	460c      	mov	r4, r1
 801803a:	6831      	ldr	r1, [r6, #0]
 801803c:	4605      	mov	r5, r0
 801803e:	b911      	cbnz	r1, 8018046 <sbrk_aligned+0x12>
 8018040:	f000 fe20 	bl	8018c84 <_sbrk_r>
 8018044:	6030      	str	r0, [r6, #0]
 8018046:	4621      	mov	r1, r4
 8018048:	4628      	mov	r0, r5
 801804a:	f000 fe1b 	bl	8018c84 <_sbrk_r>
 801804e:	1c43      	adds	r3, r0, #1
 8018050:	d103      	bne.n	801805a <sbrk_aligned+0x26>
 8018052:	f04f 34ff 	mov.w	r4, #4294967295
 8018056:	4620      	mov	r0, r4
 8018058:	bd70      	pop	{r4, r5, r6, pc}
 801805a:	1cc4      	adds	r4, r0, #3
 801805c:	f024 0403 	bic.w	r4, r4, #3
 8018060:	42a0      	cmp	r0, r4
 8018062:	d0f8      	beq.n	8018056 <sbrk_aligned+0x22>
 8018064:	1a21      	subs	r1, r4, r0
 8018066:	4628      	mov	r0, r5
 8018068:	f000 fe0c 	bl	8018c84 <_sbrk_r>
 801806c:	3001      	adds	r0, #1
 801806e:	d1f2      	bne.n	8018056 <sbrk_aligned+0x22>
 8018070:	e7ef      	b.n	8018052 <sbrk_aligned+0x1e>
 8018072:	bf00      	nop
 8018074:	2001029c 	.word	0x2001029c

08018078 <_malloc_r>:
 8018078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801807c:	1ccd      	adds	r5, r1, #3
 801807e:	f025 0503 	bic.w	r5, r5, #3
 8018082:	3508      	adds	r5, #8
 8018084:	2d0c      	cmp	r5, #12
 8018086:	bf38      	it	cc
 8018088:	250c      	movcc	r5, #12
 801808a:	2d00      	cmp	r5, #0
 801808c:	4606      	mov	r6, r0
 801808e:	db01      	blt.n	8018094 <_malloc_r+0x1c>
 8018090:	42a9      	cmp	r1, r5
 8018092:	d904      	bls.n	801809e <_malloc_r+0x26>
 8018094:	230c      	movs	r3, #12
 8018096:	6033      	str	r3, [r6, #0]
 8018098:	2000      	movs	r0, #0
 801809a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801809e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018174 <_malloc_r+0xfc>
 80180a2:	f000 f869 	bl	8018178 <__malloc_lock>
 80180a6:	f8d8 3000 	ldr.w	r3, [r8]
 80180aa:	461c      	mov	r4, r3
 80180ac:	bb44      	cbnz	r4, 8018100 <_malloc_r+0x88>
 80180ae:	4629      	mov	r1, r5
 80180b0:	4630      	mov	r0, r6
 80180b2:	f7ff ffbf 	bl	8018034 <sbrk_aligned>
 80180b6:	1c43      	adds	r3, r0, #1
 80180b8:	4604      	mov	r4, r0
 80180ba:	d158      	bne.n	801816e <_malloc_r+0xf6>
 80180bc:	f8d8 4000 	ldr.w	r4, [r8]
 80180c0:	4627      	mov	r7, r4
 80180c2:	2f00      	cmp	r7, #0
 80180c4:	d143      	bne.n	801814e <_malloc_r+0xd6>
 80180c6:	2c00      	cmp	r4, #0
 80180c8:	d04b      	beq.n	8018162 <_malloc_r+0xea>
 80180ca:	6823      	ldr	r3, [r4, #0]
 80180cc:	4639      	mov	r1, r7
 80180ce:	4630      	mov	r0, r6
 80180d0:	eb04 0903 	add.w	r9, r4, r3
 80180d4:	f000 fdd6 	bl	8018c84 <_sbrk_r>
 80180d8:	4581      	cmp	r9, r0
 80180da:	d142      	bne.n	8018162 <_malloc_r+0xea>
 80180dc:	6821      	ldr	r1, [r4, #0]
 80180de:	1a6d      	subs	r5, r5, r1
 80180e0:	4629      	mov	r1, r5
 80180e2:	4630      	mov	r0, r6
 80180e4:	f7ff ffa6 	bl	8018034 <sbrk_aligned>
 80180e8:	3001      	adds	r0, #1
 80180ea:	d03a      	beq.n	8018162 <_malloc_r+0xea>
 80180ec:	6823      	ldr	r3, [r4, #0]
 80180ee:	442b      	add	r3, r5
 80180f0:	6023      	str	r3, [r4, #0]
 80180f2:	f8d8 3000 	ldr.w	r3, [r8]
 80180f6:	685a      	ldr	r2, [r3, #4]
 80180f8:	bb62      	cbnz	r2, 8018154 <_malloc_r+0xdc>
 80180fa:	f8c8 7000 	str.w	r7, [r8]
 80180fe:	e00f      	b.n	8018120 <_malloc_r+0xa8>
 8018100:	6822      	ldr	r2, [r4, #0]
 8018102:	1b52      	subs	r2, r2, r5
 8018104:	d420      	bmi.n	8018148 <_malloc_r+0xd0>
 8018106:	2a0b      	cmp	r2, #11
 8018108:	d917      	bls.n	801813a <_malloc_r+0xc2>
 801810a:	1961      	adds	r1, r4, r5
 801810c:	42a3      	cmp	r3, r4
 801810e:	6025      	str	r5, [r4, #0]
 8018110:	bf18      	it	ne
 8018112:	6059      	strne	r1, [r3, #4]
 8018114:	6863      	ldr	r3, [r4, #4]
 8018116:	bf08      	it	eq
 8018118:	f8c8 1000 	streq.w	r1, [r8]
 801811c:	5162      	str	r2, [r4, r5]
 801811e:	604b      	str	r3, [r1, #4]
 8018120:	4630      	mov	r0, r6
 8018122:	f000 f82f 	bl	8018184 <__malloc_unlock>
 8018126:	f104 000b 	add.w	r0, r4, #11
 801812a:	1d23      	adds	r3, r4, #4
 801812c:	f020 0007 	bic.w	r0, r0, #7
 8018130:	1ac2      	subs	r2, r0, r3
 8018132:	bf1c      	itt	ne
 8018134:	1a1b      	subne	r3, r3, r0
 8018136:	50a3      	strne	r3, [r4, r2]
 8018138:	e7af      	b.n	801809a <_malloc_r+0x22>
 801813a:	6862      	ldr	r2, [r4, #4]
 801813c:	42a3      	cmp	r3, r4
 801813e:	bf0c      	ite	eq
 8018140:	f8c8 2000 	streq.w	r2, [r8]
 8018144:	605a      	strne	r2, [r3, #4]
 8018146:	e7eb      	b.n	8018120 <_malloc_r+0xa8>
 8018148:	4623      	mov	r3, r4
 801814a:	6864      	ldr	r4, [r4, #4]
 801814c:	e7ae      	b.n	80180ac <_malloc_r+0x34>
 801814e:	463c      	mov	r4, r7
 8018150:	687f      	ldr	r7, [r7, #4]
 8018152:	e7b6      	b.n	80180c2 <_malloc_r+0x4a>
 8018154:	461a      	mov	r2, r3
 8018156:	685b      	ldr	r3, [r3, #4]
 8018158:	42a3      	cmp	r3, r4
 801815a:	d1fb      	bne.n	8018154 <_malloc_r+0xdc>
 801815c:	2300      	movs	r3, #0
 801815e:	6053      	str	r3, [r2, #4]
 8018160:	e7de      	b.n	8018120 <_malloc_r+0xa8>
 8018162:	230c      	movs	r3, #12
 8018164:	6033      	str	r3, [r6, #0]
 8018166:	4630      	mov	r0, r6
 8018168:	f000 f80c 	bl	8018184 <__malloc_unlock>
 801816c:	e794      	b.n	8018098 <_malloc_r+0x20>
 801816e:	6005      	str	r5, [r0, #0]
 8018170:	e7d6      	b.n	8018120 <_malloc_r+0xa8>
 8018172:	bf00      	nop
 8018174:	200102a0 	.word	0x200102a0

08018178 <__malloc_lock>:
 8018178:	4801      	ldr	r0, [pc, #4]	@ (8018180 <__malloc_lock+0x8>)
 801817a:	f7ff beda 	b.w	8017f32 <__retarget_lock_acquire_recursive>
 801817e:	bf00      	nop
 8018180:	20010298 	.word	0x20010298

08018184 <__malloc_unlock>:
 8018184:	4801      	ldr	r0, [pc, #4]	@ (801818c <__malloc_unlock+0x8>)
 8018186:	f7ff bed5 	b.w	8017f34 <__retarget_lock_release_recursive>
 801818a:	bf00      	nop
 801818c:	20010298 	.word	0x20010298

08018190 <__ssputs_r>:
 8018190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018194:	688e      	ldr	r6, [r1, #8]
 8018196:	461f      	mov	r7, r3
 8018198:	42be      	cmp	r6, r7
 801819a:	680b      	ldr	r3, [r1, #0]
 801819c:	4682      	mov	sl, r0
 801819e:	460c      	mov	r4, r1
 80181a0:	4690      	mov	r8, r2
 80181a2:	d82d      	bhi.n	8018200 <__ssputs_r+0x70>
 80181a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80181a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80181ac:	d026      	beq.n	80181fc <__ssputs_r+0x6c>
 80181ae:	6965      	ldr	r5, [r4, #20]
 80181b0:	6909      	ldr	r1, [r1, #16]
 80181b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80181b6:	eba3 0901 	sub.w	r9, r3, r1
 80181ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80181be:	1c7b      	adds	r3, r7, #1
 80181c0:	444b      	add	r3, r9
 80181c2:	106d      	asrs	r5, r5, #1
 80181c4:	429d      	cmp	r5, r3
 80181c6:	bf38      	it	cc
 80181c8:	461d      	movcc	r5, r3
 80181ca:	0553      	lsls	r3, r2, #21
 80181cc:	d527      	bpl.n	801821e <__ssputs_r+0x8e>
 80181ce:	4629      	mov	r1, r5
 80181d0:	f7ff ff52 	bl	8018078 <_malloc_r>
 80181d4:	4606      	mov	r6, r0
 80181d6:	b360      	cbz	r0, 8018232 <__ssputs_r+0xa2>
 80181d8:	6921      	ldr	r1, [r4, #16]
 80181da:	464a      	mov	r2, r9
 80181dc:	f7ff feab 	bl	8017f36 <memcpy>
 80181e0:	89a3      	ldrh	r3, [r4, #12]
 80181e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80181e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80181ea:	81a3      	strh	r3, [r4, #12]
 80181ec:	6126      	str	r6, [r4, #16]
 80181ee:	6165      	str	r5, [r4, #20]
 80181f0:	444e      	add	r6, r9
 80181f2:	eba5 0509 	sub.w	r5, r5, r9
 80181f6:	6026      	str	r6, [r4, #0]
 80181f8:	60a5      	str	r5, [r4, #8]
 80181fa:	463e      	mov	r6, r7
 80181fc:	42be      	cmp	r6, r7
 80181fe:	d900      	bls.n	8018202 <__ssputs_r+0x72>
 8018200:	463e      	mov	r6, r7
 8018202:	6820      	ldr	r0, [r4, #0]
 8018204:	4632      	mov	r2, r6
 8018206:	4641      	mov	r1, r8
 8018208:	f7ff fdaf 	bl	8017d6a <memmove>
 801820c:	68a3      	ldr	r3, [r4, #8]
 801820e:	1b9b      	subs	r3, r3, r6
 8018210:	60a3      	str	r3, [r4, #8]
 8018212:	6823      	ldr	r3, [r4, #0]
 8018214:	4433      	add	r3, r6
 8018216:	6023      	str	r3, [r4, #0]
 8018218:	2000      	movs	r0, #0
 801821a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801821e:	462a      	mov	r2, r5
 8018220:	f000 fd47 	bl	8018cb2 <_realloc_r>
 8018224:	4606      	mov	r6, r0
 8018226:	2800      	cmp	r0, #0
 8018228:	d1e0      	bne.n	80181ec <__ssputs_r+0x5c>
 801822a:	6921      	ldr	r1, [r4, #16]
 801822c:	4650      	mov	r0, sl
 801822e:	f7ff feaf 	bl	8017f90 <_free_r>
 8018232:	230c      	movs	r3, #12
 8018234:	f8ca 3000 	str.w	r3, [sl]
 8018238:	89a3      	ldrh	r3, [r4, #12]
 801823a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801823e:	81a3      	strh	r3, [r4, #12]
 8018240:	f04f 30ff 	mov.w	r0, #4294967295
 8018244:	e7e9      	b.n	801821a <__ssputs_r+0x8a>
	...

08018248 <_svfiprintf_r>:
 8018248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801824c:	4698      	mov	r8, r3
 801824e:	898b      	ldrh	r3, [r1, #12]
 8018250:	061b      	lsls	r3, r3, #24
 8018252:	b09d      	sub	sp, #116	@ 0x74
 8018254:	4607      	mov	r7, r0
 8018256:	460d      	mov	r5, r1
 8018258:	4614      	mov	r4, r2
 801825a:	d510      	bpl.n	801827e <_svfiprintf_r+0x36>
 801825c:	690b      	ldr	r3, [r1, #16]
 801825e:	b973      	cbnz	r3, 801827e <_svfiprintf_r+0x36>
 8018260:	2140      	movs	r1, #64	@ 0x40
 8018262:	f7ff ff09 	bl	8018078 <_malloc_r>
 8018266:	6028      	str	r0, [r5, #0]
 8018268:	6128      	str	r0, [r5, #16]
 801826a:	b930      	cbnz	r0, 801827a <_svfiprintf_r+0x32>
 801826c:	230c      	movs	r3, #12
 801826e:	603b      	str	r3, [r7, #0]
 8018270:	f04f 30ff 	mov.w	r0, #4294967295
 8018274:	b01d      	add	sp, #116	@ 0x74
 8018276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801827a:	2340      	movs	r3, #64	@ 0x40
 801827c:	616b      	str	r3, [r5, #20]
 801827e:	2300      	movs	r3, #0
 8018280:	9309      	str	r3, [sp, #36]	@ 0x24
 8018282:	2320      	movs	r3, #32
 8018284:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018288:	f8cd 800c 	str.w	r8, [sp, #12]
 801828c:	2330      	movs	r3, #48	@ 0x30
 801828e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801842c <_svfiprintf_r+0x1e4>
 8018292:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018296:	f04f 0901 	mov.w	r9, #1
 801829a:	4623      	mov	r3, r4
 801829c:	469a      	mov	sl, r3
 801829e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80182a2:	b10a      	cbz	r2, 80182a8 <_svfiprintf_r+0x60>
 80182a4:	2a25      	cmp	r2, #37	@ 0x25
 80182a6:	d1f9      	bne.n	801829c <_svfiprintf_r+0x54>
 80182a8:	ebba 0b04 	subs.w	fp, sl, r4
 80182ac:	d00b      	beq.n	80182c6 <_svfiprintf_r+0x7e>
 80182ae:	465b      	mov	r3, fp
 80182b0:	4622      	mov	r2, r4
 80182b2:	4629      	mov	r1, r5
 80182b4:	4638      	mov	r0, r7
 80182b6:	f7ff ff6b 	bl	8018190 <__ssputs_r>
 80182ba:	3001      	adds	r0, #1
 80182bc:	f000 80a7 	beq.w	801840e <_svfiprintf_r+0x1c6>
 80182c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80182c2:	445a      	add	r2, fp
 80182c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80182c6:	f89a 3000 	ldrb.w	r3, [sl]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	f000 809f 	beq.w	801840e <_svfiprintf_r+0x1c6>
 80182d0:	2300      	movs	r3, #0
 80182d2:	f04f 32ff 	mov.w	r2, #4294967295
 80182d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80182da:	f10a 0a01 	add.w	sl, sl, #1
 80182de:	9304      	str	r3, [sp, #16]
 80182e0:	9307      	str	r3, [sp, #28]
 80182e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80182e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80182e8:	4654      	mov	r4, sl
 80182ea:	2205      	movs	r2, #5
 80182ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182f0:	484e      	ldr	r0, [pc, #312]	@ (801842c <_svfiprintf_r+0x1e4>)
 80182f2:	f7e7 ff85 	bl	8000200 <memchr>
 80182f6:	9a04      	ldr	r2, [sp, #16]
 80182f8:	b9d8      	cbnz	r0, 8018332 <_svfiprintf_r+0xea>
 80182fa:	06d0      	lsls	r0, r2, #27
 80182fc:	bf44      	itt	mi
 80182fe:	2320      	movmi	r3, #32
 8018300:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018304:	0711      	lsls	r1, r2, #28
 8018306:	bf44      	itt	mi
 8018308:	232b      	movmi	r3, #43	@ 0x2b
 801830a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801830e:	f89a 3000 	ldrb.w	r3, [sl]
 8018312:	2b2a      	cmp	r3, #42	@ 0x2a
 8018314:	d015      	beq.n	8018342 <_svfiprintf_r+0xfa>
 8018316:	9a07      	ldr	r2, [sp, #28]
 8018318:	4654      	mov	r4, sl
 801831a:	2000      	movs	r0, #0
 801831c:	f04f 0c0a 	mov.w	ip, #10
 8018320:	4621      	mov	r1, r4
 8018322:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018326:	3b30      	subs	r3, #48	@ 0x30
 8018328:	2b09      	cmp	r3, #9
 801832a:	d94b      	bls.n	80183c4 <_svfiprintf_r+0x17c>
 801832c:	b1b0      	cbz	r0, 801835c <_svfiprintf_r+0x114>
 801832e:	9207      	str	r2, [sp, #28]
 8018330:	e014      	b.n	801835c <_svfiprintf_r+0x114>
 8018332:	eba0 0308 	sub.w	r3, r0, r8
 8018336:	fa09 f303 	lsl.w	r3, r9, r3
 801833a:	4313      	orrs	r3, r2
 801833c:	9304      	str	r3, [sp, #16]
 801833e:	46a2      	mov	sl, r4
 8018340:	e7d2      	b.n	80182e8 <_svfiprintf_r+0xa0>
 8018342:	9b03      	ldr	r3, [sp, #12]
 8018344:	1d19      	adds	r1, r3, #4
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	9103      	str	r1, [sp, #12]
 801834a:	2b00      	cmp	r3, #0
 801834c:	bfbb      	ittet	lt
 801834e:	425b      	neglt	r3, r3
 8018350:	f042 0202 	orrlt.w	r2, r2, #2
 8018354:	9307      	strge	r3, [sp, #28]
 8018356:	9307      	strlt	r3, [sp, #28]
 8018358:	bfb8      	it	lt
 801835a:	9204      	strlt	r2, [sp, #16]
 801835c:	7823      	ldrb	r3, [r4, #0]
 801835e:	2b2e      	cmp	r3, #46	@ 0x2e
 8018360:	d10a      	bne.n	8018378 <_svfiprintf_r+0x130>
 8018362:	7863      	ldrb	r3, [r4, #1]
 8018364:	2b2a      	cmp	r3, #42	@ 0x2a
 8018366:	d132      	bne.n	80183ce <_svfiprintf_r+0x186>
 8018368:	9b03      	ldr	r3, [sp, #12]
 801836a:	1d1a      	adds	r2, r3, #4
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	9203      	str	r2, [sp, #12]
 8018370:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018374:	3402      	adds	r4, #2
 8018376:	9305      	str	r3, [sp, #20]
 8018378:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801843c <_svfiprintf_r+0x1f4>
 801837c:	7821      	ldrb	r1, [r4, #0]
 801837e:	2203      	movs	r2, #3
 8018380:	4650      	mov	r0, sl
 8018382:	f7e7 ff3d 	bl	8000200 <memchr>
 8018386:	b138      	cbz	r0, 8018398 <_svfiprintf_r+0x150>
 8018388:	9b04      	ldr	r3, [sp, #16]
 801838a:	eba0 000a 	sub.w	r0, r0, sl
 801838e:	2240      	movs	r2, #64	@ 0x40
 8018390:	4082      	lsls	r2, r0
 8018392:	4313      	orrs	r3, r2
 8018394:	3401      	adds	r4, #1
 8018396:	9304      	str	r3, [sp, #16]
 8018398:	f814 1b01 	ldrb.w	r1, [r4], #1
 801839c:	4824      	ldr	r0, [pc, #144]	@ (8018430 <_svfiprintf_r+0x1e8>)
 801839e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80183a2:	2206      	movs	r2, #6
 80183a4:	f7e7 ff2c 	bl	8000200 <memchr>
 80183a8:	2800      	cmp	r0, #0
 80183aa:	d036      	beq.n	801841a <_svfiprintf_r+0x1d2>
 80183ac:	4b21      	ldr	r3, [pc, #132]	@ (8018434 <_svfiprintf_r+0x1ec>)
 80183ae:	bb1b      	cbnz	r3, 80183f8 <_svfiprintf_r+0x1b0>
 80183b0:	9b03      	ldr	r3, [sp, #12]
 80183b2:	3307      	adds	r3, #7
 80183b4:	f023 0307 	bic.w	r3, r3, #7
 80183b8:	3308      	adds	r3, #8
 80183ba:	9303      	str	r3, [sp, #12]
 80183bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80183be:	4433      	add	r3, r6
 80183c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80183c2:	e76a      	b.n	801829a <_svfiprintf_r+0x52>
 80183c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80183c8:	460c      	mov	r4, r1
 80183ca:	2001      	movs	r0, #1
 80183cc:	e7a8      	b.n	8018320 <_svfiprintf_r+0xd8>
 80183ce:	2300      	movs	r3, #0
 80183d0:	3401      	adds	r4, #1
 80183d2:	9305      	str	r3, [sp, #20]
 80183d4:	4619      	mov	r1, r3
 80183d6:	f04f 0c0a 	mov.w	ip, #10
 80183da:	4620      	mov	r0, r4
 80183dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80183e0:	3a30      	subs	r2, #48	@ 0x30
 80183e2:	2a09      	cmp	r2, #9
 80183e4:	d903      	bls.n	80183ee <_svfiprintf_r+0x1a6>
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d0c6      	beq.n	8018378 <_svfiprintf_r+0x130>
 80183ea:	9105      	str	r1, [sp, #20]
 80183ec:	e7c4      	b.n	8018378 <_svfiprintf_r+0x130>
 80183ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80183f2:	4604      	mov	r4, r0
 80183f4:	2301      	movs	r3, #1
 80183f6:	e7f0      	b.n	80183da <_svfiprintf_r+0x192>
 80183f8:	ab03      	add	r3, sp, #12
 80183fa:	9300      	str	r3, [sp, #0]
 80183fc:	462a      	mov	r2, r5
 80183fe:	4b0e      	ldr	r3, [pc, #56]	@ (8018438 <_svfiprintf_r+0x1f0>)
 8018400:	a904      	add	r1, sp, #16
 8018402:	4638      	mov	r0, r7
 8018404:	f3af 8000 	nop.w
 8018408:	1c42      	adds	r2, r0, #1
 801840a:	4606      	mov	r6, r0
 801840c:	d1d6      	bne.n	80183bc <_svfiprintf_r+0x174>
 801840e:	89ab      	ldrh	r3, [r5, #12]
 8018410:	065b      	lsls	r3, r3, #25
 8018412:	f53f af2d 	bmi.w	8018270 <_svfiprintf_r+0x28>
 8018416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018418:	e72c      	b.n	8018274 <_svfiprintf_r+0x2c>
 801841a:	ab03      	add	r3, sp, #12
 801841c:	9300      	str	r3, [sp, #0]
 801841e:	462a      	mov	r2, r5
 8018420:	4b05      	ldr	r3, [pc, #20]	@ (8018438 <_svfiprintf_r+0x1f0>)
 8018422:	a904      	add	r1, sp, #16
 8018424:	4638      	mov	r0, r7
 8018426:	f000 f9bb 	bl	80187a0 <_printf_i>
 801842a:	e7ed      	b.n	8018408 <_svfiprintf_r+0x1c0>
 801842c:	0801c9ab 	.word	0x0801c9ab
 8018430:	0801c9b5 	.word	0x0801c9b5
 8018434:	00000000 	.word	0x00000000
 8018438:	08018191 	.word	0x08018191
 801843c:	0801c9b1 	.word	0x0801c9b1

08018440 <__sfputc_r>:
 8018440:	6893      	ldr	r3, [r2, #8]
 8018442:	3b01      	subs	r3, #1
 8018444:	2b00      	cmp	r3, #0
 8018446:	b410      	push	{r4}
 8018448:	6093      	str	r3, [r2, #8]
 801844a:	da08      	bge.n	801845e <__sfputc_r+0x1e>
 801844c:	6994      	ldr	r4, [r2, #24]
 801844e:	42a3      	cmp	r3, r4
 8018450:	db01      	blt.n	8018456 <__sfputc_r+0x16>
 8018452:	290a      	cmp	r1, #10
 8018454:	d103      	bne.n	801845e <__sfputc_r+0x1e>
 8018456:	f85d 4b04 	ldr.w	r4, [sp], #4
 801845a:	f000 bb7f 	b.w	8018b5c <__swbuf_r>
 801845e:	6813      	ldr	r3, [r2, #0]
 8018460:	1c58      	adds	r0, r3, #1
 8018462:	6010      	str	r0, [r2, #0]
 8018464:	7019      	strb	r1, [r3, #0]
 8018466:	4608      	mov	r0, r1
 8018468:	f85d 4b04 	ldr.w	r4, [sp], #4
 801846c:	4770      	bx	lr

0801846e <__sfputs_r>:
 801846e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018470:	4606      	mov	r6, r0
 8018472:	460f      	mov	r7, r1
 8018474:	4614      	mov	r4, r2
 8018476:	18d5      	adds	r5, r2, r3
 8018478:	42ac      	cmp	r4, r5
 801847a:	d101      	bne.n	8018480 <__sfputs_r+0x12>
 801847c:	2000      	movs	r0, #0
 801847e:	e007      	b.n	8018490 <__sfputs_r+0x22>
 8018480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018484:	463a      	mov	r2, r7
 8018486:	4630      	mov	r0, r6
 8018488:	f7ff ffda 	bl	8018440 <__sfputc_r>
 801848c:	1c43      	adds	r3, r0, #1
 801848e:	d1f3      	bne.n	8018478 <__sfputs_r+0xa>
 8018490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018494 <_vfiprintf_r>:
 8018494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018498:	460d      	mov	r5, r1
 801849a:	b09d      	sub	sp, #116	@ 0x74
 801849c:	4614      	mov	r4, r2
 801849e:	4698      	mov	r8, r3
 80184a0:	4606      	mov	r6, r0
 80184a2:	b118      	cbz	r0, 80184ac <_vfiprintf_r+0x18>
 80184a4:	6a03      	ldr	r3, [r0, #32]
 80184a6:	b90b      	cbnz	r3, 80184ac <_vfiprintf_r+0x18>
 80184a8:	f7ff fba4 	bl	8017bf4 <__sinit>
 80184ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80184ae:	07d9      	lsls	r1, r3, #31
 80184b0:	d405      	bmi.n	80184be <_vfiprintf_r+0x2a>
 80184b2:	89ab      	ldrh	r3, [r5, #12]
 80184b4:	059a      	lsls	r2, r3, #22
 80184b6:	d402      	bmi.n	80184be <_vfiprintf_r+0x2a>
 80184b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80184ba:	f7ff fd3a 	bl	8017f32 <__retarget_lock_acquire_recursive>
 80184be:	89ab      	ldrh	r3, [r5, #12]
 80184c0:	071b      	lsls	r3, r3, #28
 80184c2:	d501      	bpl.n	80184c8 <_vfiprintf_r+0x34>
 80184c4:	692b      	ldr	r3, [r5, #16]
 80184c6:	b99b      	cbnz	r3, 80184f0 <_vfiprintf_r+0x5c>
 80184c8:	4629      	mov	r1, r5
 80184ca:	4630      	mov	r0, r6
 80184cc:	f000 fb84 	bl	8018bd8 <__swsetup_r>
 80184d0:	b170      	cbz	r0, 80184f0 <_vfiprintf_r+0x5c>
 80184d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80184d4:	07dc      	lsls	r4, r3, #31
 80184d6:	d504      	bpl.n	80184e2 <_vfiprintf_r+0x4e>
 80184d8:	f04f 30ff 	mov.w	r0, #4294967295
 80184dc:	b01d      	add	sp, #116	@ 0x74
 80184de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184e2:	89ab      	ldrh	r3, [r5, #12]
 80184e4:	0598      	lsls	r0, r3, #22
 80184e6:	d4f7      	bmi.n	80184d8 <_vfiprintf_r+0x44>
 80184e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80184ea:	f7ff fd23 	bl	8017f34 <__retarget_lock_release_recursive>
 80184ee:	e7f3      	b.n	80184d8 <_vfiprintf_r+0x44>
 80184f0:	2300      	movs	r3, #0
 80184f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80184f4:	2320      	movs	r3, #32
 80184f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80184fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80184fe:	2330      	movs	r3, #48	@ 0x30
 8018500:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80186b0 <_vfiprintf_r+0x21c>
 8018504:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018508:	f04f 0901 	mov.w	r9, #1
 801850c:	4623      	mov	r3, r4
 801850e:	469a      	mov	sl, r3
 8018510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018514:	b10a      	cbz	r2, 801851a <_vfiprintf_r+0x86>
 8018516:	2a25      	cmp	r2, #37	@ 0x25
 8018518:	d1f9      	bne.n	801850e <_vfiprintf_r+0x7a>
 801851a:	ebba 0b04 	subs.w	fp, sl, r4
 801851e:	d00b      	beq.n	8018538 <_vfiprintf_r+0xa4>
 8018520:	465b      	mov	r3, fp
 8018522:	4622      	mov	r2, r4
 8018524:	4629      	mov	r1, r5
 8018526:	4630      	mov	r0, r6
 8018528:	f7ff ffa1 	bl	801846e <__sfputs_r>
 801852c:	3001      	adds	r0, #1
 801852e:	f000 80a7 	beq.w	8018680 <_vfiprintf_r+0x1ec>
 8018532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018534:	445a      	add	r2, fp
 8018536:	9209      	str	r2, [sp, #36]	@ 0x24
 8018538:	f89a 3000 	ldrb.w	r3, [sl]
 801853c:	2b00      	cmp	r3, #0
 801853e:	f000 809f 	beq.w	8018680 <_vfiprintf_r+0x1ec>
 8018542:	2300      	movs	r3, #0
 8018544:	f04f 32ff 	mov.w	r2, #4294967295
 8018548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801854c:	f10a 0a01 	add.w	sl, sl, #1
 8018550:	9304      	str	r3, [sp, #16]
 8018552:	9307      	str	r3, [sp, #28]
 8018554:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018558:	931a      	str	r3, [sp, #104]	@ 0x68
 801855a:	4654      	mov	r4, sl
 801855c:	2205      	movs	r2, #5
 801855e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018562:	4853      	ldr	r0, [pc, #332]	@ (80186b0 <_vfiprintf_r+0x21c>)
 8018564:	f7e7 fe4c 	bl	8000200 <memchr>
 8018568:	9a04      	ldr	r2, [sp, #16]
 801856a:	b9d8      	cbnz	r0, 80185a4 <_vfiprintf_r+0x110>
 801856c:	06d1      	lsls	r1, r2, #27
 801856e:	bf44      	itt	mi
 8018570:	2320      	movmi	r3, #32
 8018572:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018576:	0713      	lsls	r3, r2, #28
 8018578:	bf44      	itt	mi
 801857a:	232b      	movmi	r3, #43	@ 0x2b
 801857c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018580:	f89a 3000 	ldrb.w	r3, [sl]
 8018584:	2b2a      	cmp	r3, #42	@ 0x2a
 8018586:	d015      	beq.n	80185b4 <_vfiprintf_r+0x120>
 8018588:	9a07      	ldr	r2, [sp, #28]
 801858a:	4654      	mov	r4, sl
 801858c:	2000      	movs	r0, #0
 801858e:	f04f 0c0a 	mov.w	ip, #10
 8018592:	4621      	mov	r1, r4
 8018594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018598:	3b30      	subs	r3, #48	@ 0x30
 801859a:	2b09      	cmp	r3, #9
 801859c:	d94b      	bls.n	8018636 <_vfiprintf_r+0x1a2>
 801859e:	b1b0      	cbz	r0, 80185ce <_vfiprintf_r+0x13a>
 80185a0:	9207      	str	r2, [sp, #28]
 80185a2:	e014      	b.n	80185ce <_vfiprintf_r+0x13a>
 80185a4:	eba0 0308 	sub.w	r3, r0, r8
 80185a8:	fa09 f303 	lsl.w	r3, r9, r3
 80185ac:	4313      	orrs	r3, r2
 80185ae:	9304      	str	r3, [sp, #16]
 80185b0:	46a2      	mov	sl, r4
 80185b2:	e7d2      	b.n	801855a <_vfiprintf_r+0xc6>
 80185b4:	9b03      	ldr	r3, [sp, #12]
 80185b6:	1d19      	adds	r1, r3, #4
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	9103      	str	r1, [sp, #12]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	bfbb      	ittet	lt
 80185c0:	425b      	neglt	r3, r3
 80185c2:	f042 0202 	orrlt.w	r2, r2, #2
 80185c6:	9307      	strge	r3, [sp, #28]
 80185c8:	9307      	strlt	r3, [sp, #28]
 80185ca:	bfb8      	it	lt
 80185cc:	9204      	strlt	r2, [sp, #16]
 80185ce:	7823      	ldrb	r3, [r4, #0]
 80185d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80185d2:	d10a      	bne.n	80185ea <_vfiprintf_r+0x156>
 80185d4:	7863      	ldrb	r3, [r4, #1]
 80185d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80185d8:	d132      	bne.n	8018640 <_vfiprintf_r+0x1ac>
 80185da:	9b03      	ldr	r3, [sp, #12]
 80185dc:	1d1a      	adds	r2, r3, #4
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	9203      	str	r2, [sp, #12]
 80185e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80185e6:	3402      	adds	r4, #2
 80185e8:	9305      	str	r3, [sp, #20]
 80185ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80186c0 <_vfiprintf_r+0x22c>
 80185ee:	7821      	ldrb	r1, [r4, #0]
 80185f0:	2203      	movs	r2, #3
 80185f2:	4650      	mov	r0, sl
 80185f4:	f7e7 fe04 	bl	8000200 <memchr>
 80185f8:	b138      	cbz	r0, 801860a <_vfiprintf_r+0x176>
 80185fa:	9b04      	ldr	r3, [sp, #16]
 80185fc:	eba0 000a 	sub.w	r0, r0, sl
 8018600:	2240      	movs	r2, #64	@ 0x40
 8018602:	4082      	lsls	r2, r0
 8018604:	4313      	orrs	r3, r2
 8018606:	3401      	adds	r4, #1
 8018608:	9304      	str	r3, [sp, #16]
 801860a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801860e:	4829      	ldr	r0, [pc, #164]	@ (80186b4 <_vfiprintf_r+0x220>)
 8018610:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018614:	2206      	movs	r2, #6
 8018616:	f7e7 fdf3 	bl	8000200 <memchr>
 801861a:	2800      	cmp	r0, #0
 801861c:	d03f      	beq.n	801869e <_vfiprintf_r+0x20a>
 801861e:	4b26      	ldr	r3, [pc, #152]	@ (80186b8 <_vfiprintf_r+0x224>)
 8018620:	bb1b      	cbnz	r3, 801866a <_vfiprintf_r+0x1d6>
 8018622:	9b03      	ldr	r3, [sp, #12]
 8018624:	3307      	adds	r3, #7
 8018626:	f023 0307 	bic.w	r3, r3, #7
 801862a:	3308      	adds	r3, #8
 801862c:	9303      	str	r3, [sp, #12]
 801862e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018630:	443b      	add	r3, r7
 8018632:	9309      	str	r3, [sp, #36]	@ 0x24
 8018634:	e76a      	b.n	801850c <_vfiprintf_r+0x78>
 8018636:	fb0c 3202 	mla	r2, ip, r2, r3
 801863a:	460c      	mov	r4, r1
 801863c:	2001      	movs	r0, #1
 801863e:	e7a8      	b.n	8018592 <_vfiprintf_r+0xfe>
 8018640:	2300      	movs	r3, #0
 8018642:	3401      	adds	r4, #1
 8018644:	9305      	str	r3, [sp, #20]
 8018646:	4619      	mov	r1, r3
 8018648:	f04f 0c0a 	mov.w	ip, #10
 801864c:	4620      	mov	r0, r4
 801864e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018652:	3a30      	subs	r2, #48	@ 0x30
 8018654:	2a09      	cmp	r2, #9
 8018656:	d903      	bls.n	8018660 <_vfiprintf_r+0x1cc>
 8018658:	2b00      	cmp	r3, #0
 801865a:	d0c6      	beq.n	80185ea <_vfiprintf_r+0x156>
 801865c:	9105      	str	r1, [sp, #20]
 801865e:	e7c4      	b.n	80185ea <_vfiprintf_r+0x156>
 8018660:	fb0c 2101 	mla	r1, ip, r1, r2
 8018664:	4604      	mov	r4, r0
 8018666:	2301      	movs	r3, #1
 8018668:	e7f0      	b.n	801864c <_vfiprintf_r+0x1b8>
 801866a:	ab03      	add	r3, sp, #12
 801866c:	9300      	str	r3, [sp, #0]
 801866e:	462a      	mov	r2, r5
 8018670:	4b12      	ldr	r3, [pc, #72]	@ (80186bc <_vfiprintf_r+0x228>)
 8018672:	a904      	add	r1, sp, #16
 8018674:	4630      	mov	r0, r6
 8018676:	f3af 8000 	nop.w
 801867a:	4607      	mov	r7, r0
 801867c:	1c78      	adds	r0, r7, #1
 801867e:	d1d6      	bne.n	801862e <_vfiprintf_r+0x19a>
 8018680:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018682:	07d9      	lsls	r1, r3, #31
 8018684:	d405      	bmi.n	8018692 <_vfiprintf_r+0x1fe>
 8018686:	89ab      	ldrh	r3, [r5, #12]
 8018688:	059a      	lsls	r2, r3, #22
 801868a:	d402      	bmi.n	8018692 <_vfiprintf_r+0x1fe>
 801868c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801868e:	f7ff fc51 	bl	8017f34 <__retarget_lock_release_recursive>
 8018692:	89ab      	ldrh	r3, [r5, #12]
 8018694:	065b      	lsls	r3, r3, #25
 8018696:	f53f af1f 	bmi.w	80184d8 <_vfiprintf_r+0x44>
 801869a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801869c:	e71e      	b.n	80184dc <_vfiprintf_r+0x48>
 801869e:	ab03      	add	r3, sp, #12
 80186a0:	9300      	str	r3, [sp, #0]
 80186a2:	462a      	mov	r2, r5
 80186a4:	4b05      	ldr	r3, [pc, #20]	@ (80186bc <_vfiprintf_r+0x228>)
 80186a6:	a904      	add	r1, sp, #16
 80186a8:	4630      	mov	r0, r6
 80186aa:	f000 f879 	bl	80187a0 <_printf_i>
 80186ae:	e7e4      	b.n	801867a <_vfiprintf_r+0x1e6>
 80186b0:	0801c9ab 	.word	0x0801c9ab
 80186b4:	0801c9b5 	.word	0x0801c9b5
 80186b8:	00000000 	.word	0x00000000
 80186bc:	0801846f 	.word	0x0801846f
 80186c0:	0801c9b1 	.word	0x0801c9b1

080186c4 <_printf_common>:
 80186c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186c8:	4616      	mov	r6, r2
 80186ca:	4698      	mov	r8, r3
 80186cc:	688a      	ldr	r2, [r1, #8]
 80186ce:	690b      	ldr	r3, [r1, #16]
 80186d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80186d4:	4293      	cmp	r3, r2
 80186d6:	bfb8      	it	lt
 80186d8:	4613      	movlt	r3, r2
 80186da:	6033      	str	r3, [r6, #0]
 80186dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80186e0:	4607      	mov	r7, r0
 80186e2:	460c      	mov	r4, r1
 80186e4:	b10a      	cbz	r2, 80186ea <_printf_common+0x26>
 80186e6:	3301      	adds	r3, #1
 80186e8:	6033      	str	r3, [r6, #0]
 80186ea:	6823      	ldr	r3, [r4, #0]
 80186ec:	0699      	lsls	r1, r3, #26
 80186ee:	bf42      	ittt	mi
 80186f0:	6833      	ldrmi	r3, [r6, #0]
 80186f2:	3302      	addmi	r3, #2
 80186f4:	6033      	strmi	r3, [r6, #0]
 80186f6:	6825      	ldr	r5, [r4, #0]
 80186f8:	f015 0506 	ands.w	r5, r5, #6
 80186fc:	d106      	bne.n	801870c <_printf_common+0x48>
 80186fe:	f104 0a19 	add.w	sl, r4, #25
 8018702:	68e3      	ldr	r3, [r4, #12]
 8018704:	6832      	ldr	r2, [r6, #0]
 8018706:	1a9b      	subs	r3, r3, r2
 8018708:	42ab      	cmp	r3, r5
 801870a:	dc26      	bgt.n	801875a <_printf_common+0x96>
 801870c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018710:	6822      	ldr	r2, [r4, #0]
 8018712:	3b00      	subs	r3, #0
 8018714:	bf18      	it	ne
 8018716:	2301      	movne	r3, #1
 8018718:	0692      	lsls	r2, r2, #26
 801871a:	d42b      	bmi.n	8018774 <_printf_common+0xb0>
 801871c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018720:	4641      	mov	r1, r8
 8018722:	4638      	mov	r0, r7
 8018724:	47c8      	blx	r9
 8018726:	3001      	adds	r0, #1
 8018728:	d01e      	beq.n	8018768 <_printf_common+0xa4>
 801872a:	6823      	ldr	r3, [r4, #0]
 801872c:	6922      	ldr	r2, [r4, #16]
 801872e:	f003 0306 	and.w	r3, r3, #6
 8018732:	2b04      	cmp	r3, #4
 8018734:	bf02      	ittt	eq
 8018736:	68e5      	ldreq	r5, [r4, #12]
 8018738:	6833      	ldreq	r3, [r6, #0]
 801873a:	1aed      	subeq	r5, r5, r3
 801873c:	68a3      	ldr	r3, [r4, #8]
 801873e:	bf0c      	ite	eq
 8018740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018744:	2500      	movne	r5, #0
 8018746:	4293      	cmp	r3, r2
 8018748:	bfc4      	itt	gt
 801874a:	1a9b      	subgt	r3, r3, r2
 801874c:	18ed      	addgt	r5, r5, r3
 801874e:	2600      	movs	r6, #0
 8018750:	341a      	adds	r4, #26
 8018752:	42b5      	cmp	r5, r6
 8018754:	d11a      	bne.n	801878c <_printf_common+0xc8>
 8018756:	2000      	movs	r0, #0
 8018758:	e008      	b.n	801876c <_printf_common+0xa8>
 801875a:	2301      	movs	r3, #1
 801875c:	4652      	mov	r2, sl
 801875e:	4641      	mov	r1, r8
 8018760:	4638      	mov	r0, r7
 8018762:	47c8      	blx	r9
 8018764:	3001      	adds	r0, #1
 8018766:	d103      	bne.n	8018770 <_printf_common+0xac>
 8018768:	f04f 30ff 	mov.w	r0, #4294967295
 801876c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018770:	3501      	adds	r5, #1
 8018772:	e7c6      	b.n	8018702 <_printf_common+0x3e>
 8018774:	18e1      	adds	r1, r4, r3
 8018776:	1c5a      	adds	r2, r3, #1
 8018778:	2030      	movs	r0, #48	@ 0x30
 801877a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801877e:	4422      	add	r2, r4
 8018780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018788:	3302      	adds	r3, #2
 801878a:	e7c7      	b.n	801871c <_printf_common+0x58>
 801878c:	2301      	movs	r3, #1
 801878e:	4622      	mov	r2, r4
 8018790:	4641      	mov	r1, r8
 8018792:	4638      	mov	r0, r7
 8018794:	47c8      	blx	r9
 8018796:	3001      	adds	r0, #1
 8018798:	d0e6      	beq.n	8018768 <_printf_common+0xa4>
 801879a:	3601      	adds	r6, #1
 801879c:	e7d9      	b.n	8018752 <_printf_common+0x8e>
	...

080187a0 <_printf_i>:
 80187a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80187a4:	7e0f      	ldrb	r7, [r1, #24]
 80187a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80187a8:	2f78      	cmp	r7, #120	@ 0x78
 80187aa:	4691      	mov	r9, r2
 80187ac:	4680      	mov	r8, r0
 80187ae:	460c      	mov	r4, r1
 80187b0:	469a      	mov	sl, r3
 80187b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80187b6:	d807      	bhi.n	80187c8 <_printf_i+0x28>
 80187b8:	2f62      	cmp	r7, #98	@ 0x62
 80187ba:	d80a      	bhi.n	80187d2 <_printf_i+0x32>
 80187bc:	2f00      	cmp	r7, #0
 80187be:	f000 80d2 	beq.w	8018966 <_printf_i+0x1c6>
 80187c2:	2f58      	cmp	r7, #88	@ 0x58
 80187c4:	f000 80b9 	beq.w	801893a <_printf_i+0x19a>
 80187c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80187cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80187d0:	e03a      	b.n	8018848 <_printf_i+0xa8>
 80187d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80187d6:	2b15      	cmp	r3, #21
 80187d8:	d8f6      	bhi.n	80187c8 <_printf_i+0x28>
 80187da:	a101      	add	r1, pc, #4	@ (adr r1, 80187e0 <_printf_i+0x40>)
 80187dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80187e0:	08018839 	.word	0x08018839
 80187e4:	0801884d 	.word	0x0801884d
 80187e8:	080187c9 	.word	0x080187c9
 80187ec:	080187c9 	.word	0x080187c9
 80187f0:	080187c9 	.word	0x080187c9
 80187f4:	080187c9 	.word	0x080187c9
 80187f8:	0801884d 	.word	0x0801884d
 80187fc:	080187c9 	.word	0x080187c9
 8018800:	080187c9 	.word	0x080187c9
 8018804:	080187c9 	.word	0x080187c9
 8018808:	080187c9 	.word	0x080187c9
 801880c:	0801894d 	.word	0x0801894d
 8018810:	08018877 	.word	0x08018877
 8018814:	08018907 	.word	0x08018907
 8018818:	080187c9 	.word	0x080187c9
 801881c:	080187c9 	.word	0x080187c9
 8018820:	0801896f 	.word	0x0801896f
 8018824:	080187c9 	.word	0x080187c9
 8018828:	08018877 	.word	0x08018877
 801882c:	080187c9 	.word	0x080187c9
 8018830:	080187c9 	.word	0x080187c9
 8018834:	0801890f 	.word	0x0801890f
 8018838:	6833      	ldr	r3, [r6, #0]
 801883a:	1d1a      	adds	r2, r3, #4
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	6032      	str	r2, [r6, #0]
 8018840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018848:	2301      	movs	r3, #1
 801884a:	e09d      	b.n	8018988 <_printf_i+0x1e8>
 801884c:	6833      	ldr	r3, [r6, #0]
 801884e:	6820      	ldr	r0, [r4, #0]
 8018850:	1d19      	adds	r1, r3, #4
 8018852:	6031      	str	r1, [r6, #0]
 8018854:	0606      	lsls	r6, r0, #24
 8018856:	d501      	bpl.n	801885c <_printf_i+0xbc>
 8018858:	681d      	ldr	r5, [r3, #0]
 801885a:	e003      	b.n	8018864 <_printf_i+0xc4>
 801885c:	0645      	lsls	r5, r0, #25
 801885e:	d5fb      	bpl.n	8018858 <_printf_i+0xb8>
 8018860:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018864:	2d00      	cmp	r5, #0
 8018866:	da03      	bge.n	8018870 <_printf_i+0xd0>
 8018868:	232d      	movs	r3, #45	@ 0x2d
 801886a:	426d      	negs	r5, r5
 801886c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018870:	4859      	ldr	r0, [pc, #356]	@ (80189d8 <_printf_i+0x238>)
 8018872:	230a      	movs	r3, #10
 8018874:	e011      	b.n	801889a <_printf_i+0xfa>
 8018876:	6821      	ldr	r1, [r4, #0]
 8018878:	6833      	ldr	r3, [r6, #0]
 801887a:	0608      	lsls	r0, r1, #24
 801887c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018880:	d402      	bmi.n	8018888 <_printf_i+0xe8>
 8018882:	0649      	lsls	r1, r1, #25
 8018884:	bf48      	it	mi
 8018886:	b2ad      	uxthmi	r5, r5
 8018888:	2f6f      	cmp	r7, #111	@ 0x6f
 801888a:	4853      	ldr	r0, [pc, #332]	@ (80189d8 <_printf_i+0x238>)
 801888c:	6033      	str	r3, [r6, #0]
 801888e:	bf14      	ite	ne
 8018890:	230a      	movne	r3, #10
 8018892:	2308      	moveq	r3, #8
 8018894:	2100      	movs	r1, #0
 8018896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801889a:	6866      	ldr	r6, [r4, #4]
 801889c:	60a6      	str	r6, [r4, #8]
 801889e:	2e00      	cmp	r6, #0
 80188a0:	bfa2      	ittt	ge
 80188a2:	6821      	ldrge	r1, [r4, #0]
 80188a4:	f021 0104 	bicge.w	r1, r1, #4
 80188a8:	6021      	strge	r1, [r4, #0]
 80188aa:	b90d      	cbnz	r5, 80188b0 <_printf_i+0x110>
 80188ac:	2e00      	cmp	r6, #0
 80188ae:	d04b      	beq.n	8018948 <_printf_i+0x1a8>
 80188b0:	4616      	mov	r6, r2
 80188b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80188b6:	fb03 5711 	mls	r7, r3, r1, r5
 80188ba:	5dc7      	ldrb	r7, [r0, r7]
 80188bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80188c0:	462f      	mov	r7, r5
 80188c2:	42bb      	cmp	r3, r7
 80188c4:	460d      	mov	r5, r1
 80188c6:	d9f4      	bls.n	80188b2 <_printf_i+0x112>
 80188c8:	2b08      	cmp	r3, #8
 80188ca:	d10b      	bne.n	80188e4 <_printf_i+0x144>
 80188cc:	6823      	ldr	r3, [r4, #0]
 80188ce:	07df      	lsls	r7, r3, #31
 80188d0:	d508      	bpl.n	80188e4 <_printf_i+0x144>
 80188d2:	6923      	ldr	r3, [r4, #16]
 80188d4:	6861      	ldr	r1, [r4, #4]
 80188d6:	4299      	cmp	r1, r3
 80188d8:	bfde      	ittt	le
 80188da:	2330      	movle	r3, #48	@ 0x30
 80188dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80188e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80188e4:	1b92      	subs	r2, r2, r6
 80188e6:	6122      	str	r2, [r4, #16]
 80188e8:	f8cd a000 	str.w	sl, [sp]
 80188ec:	464b      	mov	r3, r9
 80188ee:	aa03      	add	r2, sp, #12
 80188f0:	4621      	mov	r1, r4
 80188f2:	4640      	mov	r0, r8
 80188f4:	f7ff fee6 	bl	80186c4 <_printf_common>
 80188f8:	3001      	adds	r0, #1
 80188fa:	d14a      	bne.n	8018992 <_printf_i+0x1f2>
 80188fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018900:	b004      	add	sp, #16
 8018902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018906:	6823      	ldr	r3, [r4, #0]
 8018908:	f043 0320 	orr.w	r3, r3, #32
 801890c:	6023      	str	r3, [r4, #0]
 801890e:	4833      	ldr	r0, [pc, #204]	@ (80189dc <_printf_i+0x23c>)
 8018910:	2778      	movs	r7, #120	@ 0x78
 8018912:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018916:	6823      	ldr	r3, [r4, #0]
 8018918:	6831      	ldr	r1, [r6, #0]
 801891a:	061f      	lsls	r7, r3, #24
 801891c:	f851 5b04 	ldr.w	r5, [r1], #4
 8018920:	d402      	bmi.n	8018928 <_printf_i+0x188>
 8018922:	065f      	lsls	r7, r3, #25
 8018924:	bf48      	it	mi
 8018926:	b2ad      	uxthmi	r5, r5
 8018928:	6031      	str	r1, [r6, #0]
 801892a:	07d9      	lsls	r1, r3, #31
 801892c:	bf44      	itt	mi
 801892e:	f043 0320 	orrmi.w	r3, r3, #32
 8018932:	6023      	strmi	r3, [r4, #0]
 8018934:	b11d      	cbz	r5, 801893e <_printf_i+0x19e>
 8018936:	2310      	movs	r3, #16
 8018938:	e7ac      	b.n	8018894 <_printf_i+0xf4>
 801893a:	4827      	ldr	r0, [pc, #156]	@ (80189d8 <_printf_i+0x238>)
 801893c:	e7e9      	b.n	8018912 <_printf_i+0x172>
 801893e:	6823      	ldr	r3, [r4, #0]
 8018940:	f023 0320 	bic.w	r3, r3, #32
 8018944:	6023      	str	r3, [r4, #0]
 8018946:	e7f6      	b.n	8018936 <_printf_i+0x196>
 8018948:	4616      	mov	r6, r2
 801894a:	e7bd      	b.n	80188c8 <_printf_i+0x128>
 801894c:	6833      	ldr	r3, [r6, #0]
 801894e:	6825      	ldr	r5, [r4, #0]
 8018950:	6961      	ldr	r1, [r4, #20]
 8018952:	1d18      	adds	r0, r3, #4
 8018954:	6030      	str	r0, [r6, #0]
 8018956:	062e      	lsls	r6, r5, #24
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	d501      	bpl.n	8018960 <_printf_i+0x1c0>
 801895c:	6019      	str	r1, [r3, #0]
 801895e:	e002      	b.n	8018966 <_printf_i+0x1c6>
 8018960:	0668      	lsls	r0, r5, #25
 8018962:	d5fb      	bpl.n	801895c <_printf_i+0x1bc>
 8018964:	8019      	strh	r1, [r3, #0]
 8018966:	2300      	movs	r3, #0
 8018968:	6123      	str	r3, [r4, #16]
 801896a:	4616      	mov	r6, r2
 801896c:	e7bc      	b.n	80188e8 <_printf_i+0x148>
 801896e:	6833      	ldr	r3, [r6, #0]
 8018970:	1d1a      	adds	r2, r3, #4
 8018972:	6032      	str	r2, [r6, #0]
 8018974:	681e      	ldr	r6, [r3, #0]
 8018976:	6862      	ldr	r2, [r4, #4]
 8018978:	2100      	movs	r1, #0
 801897a:	4630      	mov	r0, r6
 801897c:	f7e7 fc40 	bl	8000200 <memchr>
 8018980:	b108      	cbz	r0, 8018986 <_printf_i+0x1e6>
 8018982:	1b80      	subs	r0, r0, r6
 8018984:	6060      	str	r0, [r4, #4]
 8018986:	6863      	ldr	r3, [r4, #4]
 8018988:	6123      	str	r3, [r4, #16]
 801898a:	2300      	movs	r3, #0
 801898c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018990:	e7aa      	b.n	80188e8 <_printf_i+0x148>
 8018992:	6923      	ldr	r3, [r4, #16]
 8018994:	4632      	mov	r2, r6
 8018996:	4649      	mov	r1, r9
 8018998:	4640      	mov	r0, r8
 801899a:	47d0      	blx	sl
 801899c:	3001      	adds	r0, #1
 801899e:	d0ad      	beq.n	80188fc <_printf_i+0x15c>
 80189a0:	6823      	ldr	r3, [r4, #0]
 80189a2:	079b      	lsls	r3, r3, #30
 80189a4:	d413      	bmi.n	80189ce <_printf_i+0x22e>
 80189a6:	68e0      	ldr	r0, [r4, #12]
 80189a8:	9b03      	ldr	r3, [sp, #12]
 80189aa:	4298      	cmp	r0, r3
 80189ac:	bfb8      	it	lt
 80189ae:	4618      	movlt	r0, r3
 80189b0:	e7a6      	b.n	8018900 <_printf_i+0x160>
 80189b2:	2301      	movs	r3, #1
 80189b4:	4632      	mov	r2, r6
 80189b6:	4649      	mov	r1, r9
 80189b8:	4640      	mov	r0, r8
 80189ba:	47d0      	blx	sl
 80189bc:	3001      	adds	r0, #1
 80189be:	d09d      	beq.n	80188fc <_printf_i+0x15c>
 80189c0:	3501      	adds	r5, #1
 80189c2:	68e3      	ldr	r3, [r4, #12]
 80189c4:	9903      	ldr	r1, [sp, #12]
 80189c6:	1a5b      	subs	r3, r3, r1
 80189c8:	42ab      	cmp	r3, r5
 80189ca:	dcf2      	bgt.n	80189b2 <_printf_i+0x212>
 80189cc:	e7eb      	b.n	80189a6 <_printf_i+0x206>
 80189ce:	2500      	movs	r5, #0
 80189d0:	f104 0619 	add.w	r6, r4, #25
 80189d4:	e7f5      	b.n	80189c2 <_printf_i+0x222>
 80189d6:	bf00      	nop
 80189d8:	0801c9bc 	.word	0x0801c9bc
 80189dc:	0801c9cd 	.word	0x0801c9cd

080189e0 <__sflush_r>:
 80189e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80189e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189e8:	0716      	lsls	r6, r2, #28
 80189ea:	4605      	mov	r5, r0
 80189ec:	460c      	mov	r4, r1
 80189ee:	d454      	bmi.n	8018a9a <__sflush_r+0xba>
 80189f0:	684b      	ldr	r3, [r1, #4]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	dc02      	bgt.n	80189fc <__sflush_r+0x1c>
 80189f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	dd48      	ble.n	8018a8e <__sflush_r+0xae>
 80189fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80189fe:	2e00      	cmp	r6, #0
 8018a00:	d045      	beq.n	8018a8e <__sflush_r+0xae>
 8018a02:	2300      	movs	r3, #0
 8018a04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018a08:	682f      	ldr	r7, [r5, #0]
 8018a0a:	6a21      	ldr	r1, [r4, #32]
 8018a0c:	602b      	str	r3, [r5, #0]
 8018a0e:	d030      	beq.n	8018a72 <__sflush_r+0x92>
 8018a10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018a12:	89a3      	ldrh	r3, [r4, #12]
 8018a14:	0759      	lsls	r1, r3, #29
 8018a16:	d505      	bpl.n	8018a24 <__sflush_r+0x44>
 8018a18:	6863      	ldr	r3, [r4, #4]
 8018a1a:	1ad2      	subs	r2, r2, r3
 8018a1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018a1e:	b10b      	cbz	r3, 8018a24 <__sflush_r+0x44>
 8018a20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018a22:	1ad2      	subs	r2, r2, r3
 8018a24:	2300      	movs	r3, #0
 8018a26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018a28:	6a21      	ldr	r1, [r4, #32]
 8018a2a:	4628      	mov	r0, r5
 8018a2c:	47b0      	blx	r6
 8018a2e:	1c43      	adds	r3, r0, #1
 8018a30:	89a3      	ldrh	r3, [r4, #12]
 8018a32:	d106      	bne.n	8018a42 <__sflush_r+0x62>
 8018a34:	6829      	ldr	r1, [r5, #0]
 8018a36:	291d      	cmp	r1, #29
 8018a38:	d82b      	bhi.n	8018a92 <__sflush_r+0xb2>
 8018a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8018ae4 <__sflush_r+0x104>)
 8018a3c:	410a      	asrs	r2, r1
 8018a3e:	07d6      	lsls	r6, r2, #31
 8018a40:	d427      	bmi.n	8018a92 <__sflush_r+0xb2>
 8018a42:	2200      	movs	r2, #0
 8018a44:	6062      	str	r2, [r4, #4]
 8018a46:	04d9      	lsls	r1, r3, #19
 8018a48:	6922      	ldr	r2, [r4, #16]
 8018a4a:	6022      	str	r2, [r4, #0]
 8018a4c:	d504      	bpl.n	8018a58 <__sflush_r+0x78>
 8018a4e:	1c42      	adds	r2, r0, #1
 8018a50:	d101      	bne.n	8018a56 <__sflush_r+0x76>
 8018a52:	682b      	ldr	r3, [r5, #0]
 8018a54:	b903      	cbnz	r3, 8018a58 <__sflush_r+0x78>
 8018a56:	6560      	str	r0, [r4, #84]	@ 0x54
 8018a58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018a5a:	602f      	str	r7, [r5, #0]
 8018a5c:	b1b9      	cbz	r1, 8018a8e <__sflush_r+0xae>
 8018a5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018a62:	4299      	cmp	r1, r3
 8018a64:	d002      	beq.n	8018a6c <__sflush_r+0x8c>
 8018a66:	4628      	mov	r0, r5
 8018a68:	f7ff fa92 	bl	8017f90 <_free_r>
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018a70:	e00d      	b.n	8018a8e <__sflush_r+0xae>
 8018a72:	2301      	movs	r3, #1
 8018a74:	4628      	mov	r0, r5
 8018a76:	47b0      	blx	r6
 8018a78:	4602      	mov	r2, r0
 8018a7a:	1c50      	adds	r0, r2, #1
 8018a7c:	d1c9      	bne.n	8018a12 <__sflush_r+0x32>
 8018a7e:	682b      	ldr	r3, [r5, #0]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d0c6      	beq.n	8018a12 <__sflush_r+0x32>
 8018a84:	2b1d      	cmp	r3, #29
 8018a86:	d001      	beq.n	8018a8c <__sflush_r+0xac>
 8018a88:	2b16      	cmp	r3, #22
 8018a8a:	d11e      	bne.n	8018aca <__sflush_r+0xea>
 8018a8c:	602f      	str	r7, [r5, #0]
 8018a8e:	2000      	movs	r0, #0
 8018a90:	e022      	b.n	8018ad8 <__sflush_r+0xf8>
 8018a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018a96:	b21b      	sxth	r3, r3
 8018a98:	e01b      	b.n	8018ad2 <__sflush_r+0xf2>
 8018a9a:	690f      	ldr	r7, [r1, #16]
 8018a9c:	2f00      	cmp	r7, #0
 8018a9e:	d0f6      	beq.n	8018a8e <__sflush_r+0xae>
 8018aa0:	0793      	lsls	r3, r2, #30
 8018aa2:	680e      	ldr	r6, [r1, #0]
 8018aa4:	bf08      	it	eq
 8018aa6:	694b      	ldreq	r3, [r1, #20]
 8018aa8:	600f      	str	r7, [r1, #0]
 8018aaa:	bf18      	it	ne
 8018aac:	2300      	movne	r3, #0
 8018aae:	eba6 0807 	sub.w	r8, r6, r7
 8018ab2:	608b      	str	r3, [r1, #8]
 8018ab4:	f1b8 0f00 	cmp.w	r8, #0
 8018ab8:	dde9      	ble.n	8018a8e <__sflush_r+0xae>
 8018aba:	6a21      	ldr	r1, [r4, #32]
 8018abc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018abe:	4643      	mov	r3, r8
 8018ac0:	463a      	mov	r2, r7
 8018ac2:	4628      	mov	r0, r5
 8018ac4:	47b0      	blx	r6
 8018ac6:	2800      	cmp	r0, #0
 8018ac8:	dc08      	bgt.n	8018adc <__sflush_r+0xfc>
 8018aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018ad2:	81a3      	strh	r3, [r4, #12]
 8018ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8018ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018adc:	4407      	add	r7, r0
 8018ade:	eba8 0800 	sub.w	r8, r8, r0
 8018ae2:	e7e7      	b.n	8018ab4 <__sflush_r+0xd4>
 8018ae4:	dfbffffe 	.word	0xdfbffffe

08018ae8 <_fflush_r>:
 8018ae8:	b538      	push	{r3, r4, r5, lr}
 8018aea:	690b      	ldr	r3, [r1, #16]
 8018aec:	4605      	mov	r5, r0
 8018aee:	460c      	mov	r4, r1
 8018af0:	b913      	cbnz	r3, 8018af8 <_fflush_r+0x10>
 8018af2:	2500      	movs	r5, #0
 8018af4:	4628      	mov	r0, r5
 8018af6:	bd38      	pop	{r3, r4, r5, pc}
 8018af8:	b118      	cbz	r0, 8018b02 <_fflush_r+0x1a>
 8018afa:	6a03      	ldr	r3, [r0, #32]
 8018afc:	b90b      	cbnz	r3, 8018b02 <_fflush_r+0x1a>
 8018afe:	f7ff f879 	bl	8017bf4 <__sinit>
 8018b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d0f3      	beq.n	8018af2 <_fflush_r+0xa>
 8018b0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018b0c:	07d0      	lsls	r0, r2, #31
 8018b0e:	d404      	bmi.n	8018b1a <_fflush_r+0x32>
 8018b10:	0599      	lsls	r1, r3, #22
 8018b12:	d402      	bmi.n	8018b1a <_fflush_r+0x32>
 8018b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018b16:	f7ff fa0c 	bl	8017f32 <__retarget_lock_acquire_recursive>
 8018b1a:	4628      	mov	r0, r5
 8018b1c:	4621      	mov	r1, r4
 8018b1e:	f7ff ff5f 	bl	80189e0 <__sflush_r>
 8018b22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018b24:	07da      	lsls	r2, r3, #31
 8018b26:	4605      	mov	r5, r0
 8018b28:	d4e4      	bmi.n	8018af4 <_fflush_r+0xc>
 8018b2a:	89a3      	ldrh	r3, [r4, #12]
 8018b2c:	059b      	lsls	r3, r3, #22
 8018b2e:	d4e1      	bmi.n	8018af4 <_fflush_r+0xc>
 8018b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018b32:	f7ff f9ff 	bl	8017f34 <__retarget_lock_release_recursive>
 8018b36:	e7dd      	b.n	8018af4 <_fflush_r+0xc>

08018b38 <fiprintf>:
 8018b38:	b40e      	push	{r1, r2, r3}
 8018b3a:	b503      	push	{r0, r1, lr}
 8018b3c:	4601      	mov	r1, r0
 8018b3e:	ab03      	add	r3, sp, #12
 8018b40:	4805      	ldr	r0, [pc, #20]	@ (8018b58 <fiprintf+0x20>)
 8018b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b46:	6800      	ldr	r0, [r0, #0]
 8018b48:	9301      	str	r3, [sp, #4]
 8018b4a:	f7ff fca3 	bl	8018494 <_vfiprintf_r>
 8018b4e:	b002      	add	sp, #8
 8018b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8018b54:	b003      	add	sp, #12
 8018b56:	4770      	bx	lr
 8018b58:	2000003c 	.word	0x2000003c

08018b5c <__swbuf_r>:
 8018b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b5e:	460e      	mov	r6, r1
 8018b60:	4614      	mov	r4, r2
 8018b62:	4605      	mov	r5, r0
 8018b64:	b118      	cbz	r0, 8018b6e <__swbuf_r+0x12>
 8018b66:	6a03      	ldr	r3, [r0, #32]
 8018b68:	b90b      	cbnz	r3, 8018b6e <__swbuf_r+0x12>
 8018b6a:	f7ff f843 	bl	8017bf4 <__sinit>
 8018b6e:	69a3      	ldr	r3, [r4, #24]
 8018b70:	60a3      	str	r3, [r4, #8]
 8018b72:	89a3      	ldrh	r3, [r4, #12]
 8018b74:	071a      	lsls	r2, r3, #28
 8018b76:	d501      	bpl.n	8018b7c <__swbuf_r+0x20>
 8018b78:	6923      	ldr	r3, [r4, #16]
 8018b7a:	b943      	cbnz	r3, 8018b8e <__swbuf_r+0x32>
 8018b7c:	4621      	mov	r1, r4
 8018b7e:	4628      	mov	r0, r5
 8018b80:	f000 f82a 	bl	8018bd8 <__swsetup_r>
 8018b84:	b118      	cbz	r0, 8018b8e <__swbuf_r+0x32>
 8018b86:	f04f 37ff 	mov.w	r7, #4294967295
 8018b8a:	4638      	mov	r0, r7
 8018b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b8e:	6823      	ldr	r3, [r4, #0]
 8018b90:	6922      	ldr	r2, [r4, #16]
 8018b92:	1a98      	subs	r0, r3, r2
 8018b94:	6963      	ldr	r3, [r4, #20]
 8018b96:	b2f6      	uxtb	r6, r6
 8018b98:	4283      	cmp	r3, r0
 8018b9a:	4637      	mov	r7, r6
 8018b9c:	dc05      	bgt.n	8018baa <__swbuf_r+0x4e>
 8018b9e:	4621      	mov	r1, r4
 8018ba0:	4628      	mov	r0, r5
 8018ba2:	f7ff ffa1 	bl	8018ae8 <_fflush_r>
 8018ba6:	2800      	cmp	r0, #0
 8018ba8:	d1ed      	bne.n	8018b86 <__swbuf_r+0x2a>
 8018baa:	68a3      	ldr	r3, [r4, #8]
 8018bac:	3b01      	subs	r3, #1
 8018bae:	60a3      	str	r3, [r4, #8]
 8018bb0:	6823      	ldr	r3, [r4, #0]
 8018bb2:	1c5a      	adds	r2, r3, #1
 8018bb4:	6022      	str	r2, [r4, #0]
 8018bb6:	701e      	strb	r6, [r3, #0]
 8018bb8:	6962      	ldr	r2, [r4, #20]
 8018bba:	1c43      	adds	r3, r0, #1
 8018bbc:	429a      	cmp	r2, r3
 8018bbe:	d004      	beq.n	8018bca <__swbuf_r+0x6e>
 8018bc0:	89a3      	ldrh	r3, [r4, #12]
 8018bc2:	07db      	lsls	r3, r3, #31
 8018bc4:	d5e1      	bpl.n	8018b8a <__swbuf_r+0x2e>
 8018bc6:	2e0a      	cmp	r6, #10
 8018bc8:	d1df      	bne.n	8018b8a <__swbuf_r+0x2e>
 8018bca:	4621      	mov	r1, r4
 8018bcc:	4628      	mov	r0, r5
 8018bce:	f7ff ff8b 	bl	8018ae8 <_fflush_r>
 8018bd2:	2800      	cmp	r0, #0
 8018bd4:	d0d9      	beq.n	8018b8a <__swbuf_r+0x2e>
 8018bd6:	e7d6      	b.n	8018b86 <__swbuf_r+0x2a>

08018bd8 <__swsetup_r>:
 8018bd8:	b538      	push	{r3, r4, r5, lr}
 8018bda:	4b29      	ldr	r3, [pc, #164]	@ (8018c80 <__swsetup_r+0xa8>)
 8018bdc:	4605      	mov	r5, r0
 8018bde:	6818      	ldr	r0, [r3, #0]
 8018be0:	460c      	mov	r4, r1
 8018be2:	b118      	cbz	r0, 8018bec <__swsetup_r+0x14>
 8018be4:	6a03      	ldr	r3, [r0, #32]
 8018be6:	b90b      	cbnz	r3, 8018bec <__swsetup_r+0x14>
 8018be8:	f7ff f804 	bl	8017bf4 <__sinit>
 8018bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018bf0:	0719      	lsls	r1, r3, #28
 8018bf2:	d422      	bmi.n	8018c3a <__swsetup_r+0x62>
 8018bf4:	06da      	lsls	r2, r3, #27
 8018bf6:	d407      	bmi.n	8018c08 <__swsetup_r+0x30>
 8018bf8:	2209      	movs	r2, #9
 8018bfa:	602a      	str	r2, [r5, #0]
 8018bfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018c00:	81a3      	strh	r3, [r4, #12]
 8018c02:	f04f 30ff 	mov.w	r0, #4294967295
 8018c06:	e033      	b.n	8018c70 <__swsetup_r+0x98>
 8018c08:	0758      	lsls	r0, r3, #29
 8018c0a:	d512      	bpl.n	8018c32 <__swsetup_r+0x5a>
 8018c0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018c0e:	b141      	cbz	r1, 8018c22 <__swsetup_r+0x4a>
 8018c10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018c14:	4299      	cmp	r1, r3
 8018c16:	d002      	beq.n	8018c1e <__swsetup_r+0x46>
 8018c18:	4628      	mov	r0, r5
 8018c1a:	f7ff f9b9 	bl	8017f90 <_free_r>
 8018c1e:	2300      	movs	r3, #0
 8018c20:	6363      	str	r3, [r4, #52]	@ 0x34
 8018c22:	89a3      	ldrh	r3, [r4, #12]
 8018c24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018c28:	81a3      	strh	r3, [r4, #12]
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	6063      	str	r3, [r4, #4]
 8018c2e:	6923      	ldr	r3, [r4, #16]
 8018c30:	6023      	str	r3, [r4, #0]
 8018c32:	89a3      	ldrh	r3, [r4, #12]
 8018c34:	f043 0308 	orr.w	r3, r3, #8
 8018c38:	81a3      	strh	r3, [r4, #12]
 8018c3a:	6923      	ldr	r3, [r4, #16]
 8018c3c:	b94b      	cbnz	r3, 8018c52 <__swsetup_r+0x7a>
 8018c3e:	89a3      	ldrh	r3, [r4, #12]
 8018c40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018c48:	d003      	beq.n	8018c52 <__swsetup_r+0x7a>
 8018c4a:	4621      	mov	r1, r4
 8018c4c:	4628      	mov	r0, r5
 8018c4e:	f000 f884 	bl	8018d5a <__smakebuf_r>
 8018c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c56:	f013 0201 	ands.w	r2, r3, #1
 8018c5a:	d00a      	beq.n	8018c72 <__swsetup_r+0x9a>
 8018c5c:	2200      	movs	r2, #0
 8018c5e:	60a2      	str	r2, [r4, #8]
 8018c60:	6962      	ldr	r2, [r4, #20]
 8018c62:	4252      	negs	r2, r2
 8018c64:	61a2      	str	r2, [r4, #24]
 8018c66:	6922      	ldr	r2, [r4, #16]
 8018c68:	b942      	cbnz	r2, 8018c7c <__swsetup_r+0xa4>
 8018c6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018c6e:	d1c5      	bne.n	8018bfc <__swsetup_r+0x24>
 8018c70:	bd38      	pop	{r3, r4, r5, pc}
 8018c72:	0799      	lsls	r1, r3, #30
 8018c74:	bf58      	it	pl
 8018c76:	6962      	ldrpl	r2, [r4, #20]
 8018c78:	60a2      	str	r2, [r4, #8]
 8018c7a:	e7f4      	b.n	8018c66 <__swsetup_r+0x8e>
 8018c7c:	2000      	movs	r0, #0
 8018c7e:	e7f7      	b.n	8018c70 <__swsetup_r+0x98>
 8018c80:	2000003c 	.word	0x2000003c

08018c84 <_sbrk_r>:
 8018c84:	b538      	push	{r3, r4, r5, lr}
 8018c86:	4d06      	ldr	r5, [pc, #24]	@ (8018ca0 <_sbrk_r+0x1c>)
 8018c88:	2300      	movs	r3, #0
 8018c8a:	4604      	mov	r4, r0
 8018c8c:	4608      	mov	r0, r1
 8018c8e:	602b      	str	r3, [r5, #0]
 8018c90:	f7e8 fff8 	bl	8001c84 <_sbrk>
 8018c94:	1c43      	adds	r3, r0, #1
 8018c96:	d102      	bne.n	8018c9e <_sbrk_r+0x1a>
 8018c98:	682b      	ldr	r3, [r5, #0]
 8018c9a:	b103      	cbz	r3, 8018c9e <_sbrk_r+0x1a>
 8018c9c:	6023      	str	r3, [r4, #0]
 8018c9e:	bd38      	pop	{r3, r4, r5, pc}
 8018ca0:	20010294 	.word	0x20010294

08018ca4 <abort>:
 8018ca4:	b508      	push	{r3, lr}
 8018ca6:	2006      	movs	r0, #6
 8018ca8:	f000 f8bc 	bl	8018e24 <raise>
 8018cac:	2001      	movs	r0, #1
 8018cae:	f7e8 ff71 	bl	8001b94 <_exit>

08018cb2 <_realloc_r>:
 8018cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cb6:	4680      	mov	r8, r0
 8018cb8:	4615      	mov	r5, r2
 8018cba:	460c      	mov	r4, r1
 8018cbc:	b921      	cbnz	r1, 8018cc8 <_realloc_r+0x16>
 8018cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018cc2:	4611      	mov	r1, r2
 8018cc4:	f7ff b9d8 	b.w	8018078 <_malloc_r>
 8018cc8:	b92a      	cbnz	r2, 8018cd6 <_realloc_r+0x24>
 8018cca:	f7ff f961 	bl	8017f90 <_free_r>
 8018cce:	2400      	movs	r4, #0
 8018cd0:	4620      	mov	r0, r4
 8018cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cd6:	f000 f8e3 	bl	8018ea0 <_malloc_usable_size_r>
 8018cda:	4285      	cmp	r5, r0
 8018cdc:	4606      	mov	r6, r0
 8018cde:	d802      	bhi.n	8018ce6 <_realloc_r+0x34>
 8018ce0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018ce4:	d8f4      	bhi.n	8018cd0 <_realloc_r+0x1e>
 8018ce6:	4629      	mov	r1, r5
 8018ce8:	4640      	mov	r0, r8
 8018cea:	f7ff f9c5 	bl	8018078 <_malloc_r>
 8018cee:	4607      	mov	r7, r0
 8018cf0:	2800      	cmp	r0, #0
 8018cf2:	d0ec      	beq.n	8018cce <_realloc_r+0x1c>
 8018cf4:	42b5      	cmp	r5, r6
 8018cf6:	462a      	mov	r2, r5
 8018cf8:	4621      	mov	r1, r4
 8018cfa:	bf28      	it	cs
 8018cfc:	4632      	movcs	r2, r6
 8018cfe:	f7ff f91a 	bl	8017f36 <memcpy>
 8018d02:	4621      	mov	r1, r4
 8018d04:	4640      	mov	r0, r8
 8018d06:	f7ff f943 	bl	8017f90 <_free_r>
 8018d0a:	463c      	mov	r4, r7
 8018d0c:	e7e0      	b.n	8018cd0 <_realloc_r+0x1e>

08018d0e <__swhatbuf_r>:
 8018d0e:	b570      	push	{r4, r5, r6, lr}
 8018d10:	460c      	mov	r4, r1
 8018d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d16:	2900      	cmp	r1, #0
 8018d18:	b096      	sub	sp, #88	@ 0x58
 8018d1a:	4615      	mov	r5, r2
 8018d1c:	461e      	mov	r6, r3
 8018d1e:	da0d      	bge.n	8018d3c <__swhatbuf_r+0x2e>
 8018d20:	89a3      	ldrh	r3, [r4, #12]
 8018d22:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018d26:	f04f 0100 	mov.w	r1, #0
 8018d2a:	bf14      	ite	ne
 8018d2c:	2340      	movne	r3, #64	@ 0x40
 8018d2e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018d32:	2000      	movs	r0, #0
 8018d34:	6031      	str	r1, [r6, #0]
 8018d36:	602b      	str	r3, [r5, #0]
 8018d38:	b016      	add	sp, #88	@ 0x58
 8018d3a:	bd70      	pop	{r4, r5, r6, pc}
 8018d3c:	466a      	mov	r2, sp
 8018d3e:	f000 f879 	bl	8018e34 <_fstat_r>
 8018d42:	2800      	cmp	r0, #0
 8018d44:	dbec      	blt.n	8018d20 <__swhatbuf_r+0x12>
 8018d46:	9901      	ldr	r1, [sp, #4]
 8018d48:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018d4c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018d50:	4259      	negs	r1, r3
 8018d52:	4159      	adcs	r1, r3
 8018d54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018d58:	e7eb      	b.n	8018d32 <__swhatbuf_r+0x24>

08018d5a <__smakebuf_r>:
 8018d5a:	898b      	ldrh	r3, [r1, #12]
 8018d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018d5e:	079d      	lsls	r5, r3, #30
 8018d60:	4606      	mov	r6, r0
 8018d62:	460c      	mov	r4, r1
 8018d64:	d507      	bpl.n	8018d76 <__smakebuf_r+0x1c>
 8018d66:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018d6a:	6023      	str	r3, [r4, #0]
 8018d6c:	6123      	str	r3, [r4, #16]
 8018d6e:	2301      	movs	r3, #1
 8018d70:	6163      	str	r3, [r4, #20]
 8018d72:	b003      	add	sp, #12
 8018d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d76:	ab01      	add	r3, sp, #4
 8018d78:	466a      	mov	r2, sp
 8018d7a:	f7ff ffc8 	bl	8018d0e <__swhatbuf_r>
 8018d7e:	9f00      	ldr	r7, [sp, #0]
 8018d80:	4605      	mov	r5, r0
 8018d82:	4639      	mov	r1, r7
 8018d84:	4630      	mov	r0, r6
 8018d86:	f7ff f977 	bl	8018078 <_malloc_r>
 8018d8a:	b948      	cbnz	r0, 8018da0 <__smakebuf_r+0x46>
 8018d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d90:	059a      	lsls	r2, r3, #22
 8018d92:	d4ee      	bmi.n	8018d72 <__smakebuf_r+0x18>
 8018d94:	f023 0303 	bic.w	r3, r3, #3
 8018d98:	f043 0302 	orr.w	r3, r3, #2
 8018d9c:	81a3      	strh	r3, [r4, #12]
 8018d9e:	e7e2      	b.n	8018d66 <__smakebuf_r+0xc>
 8018da0:	89a3      	ldrh	r3, [r4, #12]
 8018da2:	6020      	str	r0, [r4, #0]
 8018da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018da8:	81a3      	strh	r3, [r4, #12]
 8018daa:	9b01      	ldr	r3, [sp, #4]
 8018dac:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018db0:	b15b      	cbz	r3, 8018dca <__smakebuf_r+0x70>
 8018db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018db6:	4630      	mov	r0, r6
 8018db8:	f000 f84e 	bl	8018e58 <_isatty_r>
 8018dbc:	b128      	cbz	r0, 8018dca <__smakebuf_r+0x70>
 8018dbe:	89a3      	ldrh	r3, [r4, #12]
 8018dc0:	f023 0303 	bic.w	r3, r3, #3
 8018dc4:	f043 0301 	orr.w	r3, r3, #1
 8018dc8:	81a3      	strh	r3, [r4, #12]
 8018dca:	89a3      	ldrh	r3, [r4, #12]
 8018dcc:	431d      	orrs	r5, r3
 8018dce:	81a5      	strh	r5, [r4, #12]
 8018dd0:	e7cf      	b.n	8018d72 <__smakebuf_r+0x18>

08018dd2 <_raise_r>:
 8018dd2:	291f      	cmp	r1, #31
 8018dd4:	b538      	push	{r3, r4, r5, lr}
 8018dd6:	4605      	mov	r5, r0
 8018dd8:	460c      	mov	r4, r1
 8018dda:	d904      	bls.n	8018de6 <_raise_r+0x14>
 8018ddc:	2316      	movs	r3, #22
 8018dde:	6003      	str	r3, [r0, #0]
 8018de0:	f04f 30ff 	mov.w	r0, #4294967295
 8018de4:	bd38      	pop	{r3, r4, r5, pc}
 8018de6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018de8:	b112      	cbz	r2, 8018df0 <_raise_r+0x1e>
 8018dea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018dee:	b94b      	cbnz	r3, 8018e04 <_raise_r+0x32>
 8018df0:	4628      	mov	r0, r5
 8018df2:	f000 f853 	bl	8018e9c <_getpid_r>
 8018df6:	4622      	mov	r2, r4
 8018df8:	4601      	mov	r1, r0
 8018dfa:	4628      	mov	r0, r5
 8018dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018e00:	f000 b83a 	b.w	8018e78 <_kill_r>
 8018e04:	2b01      	cmp	r3, #1
 8018e06:	d00a      	beq.n	8018e1e <_raise_r+0x4c>
 8018e08:	1c59      	adds	r1, r3, #1
 8018e0a:	d103      	bne.n	8018e14 <_raise_r+0x42>
 8018e0c:	2316      	movs	r3, #22
 8018e0e:	6003      	str	r3, [r0, #0]
 8018e10:	2001      	movs	r0, #1
 8018e12:	e7e7      	b.n	8018de4 <_raise_r+0x12>
 8018e14:	2100      	movs	r1, #0
 8018e16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018e1a:	4620      	mov	r0, r4
 8018e1c:	4798      	blx	r3
 8018e1e:	2000      	movs	r0, #0
 8018e20:	e7e0      	b.n	8018de4 <_raise_r+0x12>
	...

08018e24 <raise>:
 8018e24:	4b02      	ldr	r3, [pc, #8]	@ (8018e30 <raise+0xc>)
 8018e26:	4601      	mov	r1, r0
 8018e28:	6818      	ldr	r0, [r3, #0]
 8018e2a:	f7ff bfd2 	b.w	8018dd2 <_raise_r>
 8018e2e:	bf00      	nop
 8018e30:	2000003c 	.word	0x2000003c

08018e34 <_fstat_r>:
 8018e34:	b538      	push	{r3, r4, r5, lr}
 8018e36:	4d07      	ldr	r5, [pc, #28]	@ (8018e54 <_fstat_r+0x20>)
 8018e38:	2300      	movs	r3, #0
 8018e3a:	4604      	mov	r4, r0
 8018e3c:	4608      	mov	r0, r1
 8018e3e:	4611      	mov	r1, r2
 8018e40:	602b      	str	r3, [r5, #0]
 8018e42:	f7e8 fef7 	bl	8001c34 <_fstat>
 8018e46:	1c43      	adds	r3, r0, #1
 8018e48:	d102      	bne.n	8018e50 <_fstat_r+0x1c>
 8018e4a:	682b      	ldr	r3, [r5, #0]
 8018e4c:	b103      	cbz	r3, 8018e50 <_fstat_r+0x1c>
 8018e4e:	6023      	str	r3, [r4, #0]
 8018e50:	bd38      	pop	{r3, r4, r5, pc}
 8018e52:	bf00      	nop
 8018e54:	20010294 	.word	0x20010294

08018e58 <_isatty_r>:
 8018e58:	b538      	push	{r3, r4, r5, lr}
 8018e5a:	4d06      	ldr	r5, [pc, #24]	@ (8018e74 <_isatty_r+0x1c>)
 8018e5c:	2300      	movs	r3, #0
 8018e5e:	4604      	mov	r4, r0
 8018e60:	4608      	mov	r0, r1
 8018e62:	602b      	str	r3, [r5, #0]
 8018e64:	f7e8 fef6 	bl	8001c54 <_isatty>
 8018e68:	1c43      	adds	r3, r0, #1
 8018e6a:	d102      	bne.n	8018e72 <_isatty_r+0x1a>
 8018e6c:	682b      	ldr	r3, [r5, #0]
 8018e6e:	b103      	cbz	r3, 8018e72 <_isatty_r+0x1a>
 8018e70:	6023      	str	r3, [r4, #0]
 8018e72:	bd38      	pop	{r3, r4, r5, pc}
 8018e74:	20010294 	.word	0x20010294

08018e78 <_kill_r>:
 8018e78:	b538      	push	{r3, r4, r5, lr}
 8018e7a:	4d07      	ldr	r5, [pc, #28]	@ (8018e98 <_kill_r+0x20>)
 8018e7c:	2300      	movs	r3, #0
 8018e7e:	4604      	mov	r4, r0
 8018e80:	4608      	mov	r0, r1
 8018e82:	4611      	mov	r1, r2
 8018e84:	602b      	str	r3, [r5, #0]
 8018e86:	f7e8 fe73 	bl	8001b70 <_kill>
 8018e8a:	1c43      	adds	r3, r0, #1
 8018e8c:	d102      	bne.n	8018e94 <_kill_r+0x1c>
 8018e8e:	682b      	ldr	r3, [r5, #0]
 8018e90:	b103      	cbz	r3, 8018e94 <_kill_r+0x1c>
 8018e92:	6023      	str	r3, [r4, #0]
 8018e94:	bd38      	pop	{r3, r4, r5, pc}
 8018e96:	bf00      	nop
 8018e98:	20010294 	.word	0x20010294

08018e9c <_getpid_r>:
 8018e9c:	f7e8 be60 	b.w	8001b60 <_getpid>

08018ea0 <_malloc_usable_size_r>:
 8018ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018ea4:	1f18      	subs	r0, r3, #4
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	bfbc      	itt	lt
 8018eaa:	580b      	ldrlt	r3, [r1, r0]
 8018eac:	18c0      	addlt	r0, r0, r3
 8018eae:	4770      	bx	lr

08018eb0 <_init>:
 8018eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eb2:	bf00      	nop
 8018eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018eb6:	bc08      	pop	{r3}
 8018eb8:	469e      	mov	lr, r3
 8018eba:	4770      	bx	lr

08018ebc <_fini>:
 8018ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ebe:	bf00      	nop
 8018ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ec2:	bc08      	pop	{r3}
 8018ec4:	469e      	mov	lr, r3
 8018ec6:	4770      	bx	lr
